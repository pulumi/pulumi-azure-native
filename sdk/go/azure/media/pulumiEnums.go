// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The encoding profile to be used when encoding audio with AAC.
type AacAudioProfile string

const (
	// Specifies that the output audio is to be encoded into AAC Low Complexity profile (AAC-LC).
	AacAudioProfileAacLc = AacAudioProfile("AacLc")
	// Specifies that the output audio is to be encoded into HE-AAC v1 profile.
	AacAudioProfileHeAacV1 = AacAudioProfile("HeAacV1")
	// Specifies that the output audio is to be encoded into HE-AAC v2 profile.
	AacAudioProfileHeAacV2 = AacAudioProfile("HeAacV2")
)

func (AacAudioProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*AacAudioProfile)(nil)).Elem()
}

func (e AacAudioProfile) ToAacAudioProfileOutput() AacAudioProfileOutput {
	return pulumi.ToOutput(e).(AacAudioProfileOutput)
}

func (e AacAudioProfile) ToAacAudioProfileOutputWithContext(ctx context.Context) AacAudioProfileOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AacAudioProfileOutput)
}

func (e AacAudioProfile) ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput {
	return e.ToAacAudioProfilePtrOutputWithContext(context.Background())
}

func (e AacAudioProfile) ToAacAudioProfilePtrOutputWithContext(ctx context.Context) AacAudioProfilePtrOutput {
	return AacAudioProfile(e).ToAacAudioProfileOutputWithContext(ctx).ToAacAudioProfilePtrOutputWithContext(ctx)
}

func (e AacAudioProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AacAudioProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AacAudioProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AacAudioProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AacAudioProfileOutput struct{ *pulumi.OutputState }

func (AacAudioProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AacAudioProfile)(nil)).Elem()
}

func (o AacAudioProfileOutput) ToAacAudioProfileOutput() AacAudioProfileOutput {
	return o
}

func (o AacAudioProfileOutput) ToAacAudioProfileOutputWithContext(ctx context.Context) AacAudioProfileOutput {
	return o
}

func (o AacAudioProfileOutput) ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput {
	return o.ToAacAudioProfilePtrOutputWithContext(context.Background())
}

func (o AacAudioProfileOutput) ToAacAudioProfilePtrOutputWithContext(ctx context.Context) AacAudioProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AacAudioProfile) *AacAudioProfile {
		return &v
	}).(AacAudioProfilePtrOutput)
}

func (o AacAudioProfileOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AacAudioProfileOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AacAudioProfile) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AacAudioProfileOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AacAudioProfileOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AacAudioProfile) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AacAudioProfilePtrOutput struct{ *pulumi.OutputState }

func (AacAudioProfilePtrOutput) ElementType() reflect.Type {
	return aacAudioProfilePtrType
}

func (o AacAudioProfilePtrOutput) ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput {
	return o
}

func (o AacAudioProfilePtrOutput) ToAacAudioProfilePtrOutputWithContext(ctx context.Context) AacAudioProfilePtrOutput {
	return o
}

func (o AacAudioProfilePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AacAudioProfilePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AacAudioProfile) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AacAudioProfilePtrOutput) Elem() AacAudioProfileOutput {
	return o.ApplyT(func(v *AacAudioProfile) AacAudioProfile {
		var ret AacAudioProfile
		if v != nil {
			ret = *v
		}
		return ret
	}).(AacAudioProfileOutput)
}

// AacAudioProfileInput is an input type that accepts AacAudioProfileArgs and AacAudioProfileOutput values.
// You can construct a concrete instance of `AacAudioProfileInput` via:
//
//          AacAudioProfileArgs{...}
type AacAudioProfileInput interface {
	pulumi.Input

	ToAacAudioProfileOutput() AacAudioProfileOutput
	ToAacAudioProfileOutputWithContext(context.Context) AacAudioProfileOutput
}

var aacAudioProfilePtrType = reflect.TypeOf((**AacAudioProfile)(nil)).Elem()

type AacAudioProfilePtrInput interface {
	pulumi.Input

	ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput
	ToAacAudioProfilePtrOutputWithContext(context.Context) AacAudioProfilePtrOutput
}

type aacAudioProfilePtr string

func AacAudioProfilePtr(v string) AacAudioProfilePtrInput {
	return (*aacAudioProfilePtr)(&v)
}

func (*aacAudioProfilePtr) ElementType() reflect.Type {
	return aacAudioProfilePtrType
}

func (in *aacAudioProfilePtr) ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput {
	return pulumi.ToOutput(in).(AacAudioProfilePtrOutput)
}

func (in *aacAudioProfilePtr) ToAacAudioProfilePtrOutputWithContext(ctx context.Context) AacAudioProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AacAudioProfilePtrOutput)
}

// The type of key used to encrypt the Account Key.
type AccountEncryptionKeyType string

const (
	// The Account Key is encrypted with a System Key.
	AccountEncryptionKeyTypeSystemKey = AccountEncryptionKeyType("SystemKey")
	// The Account Key is encrypted with a Customer Key.
	AccountEncryptionKeyTypeCustomerKey = AccountEncryptionKeyType("CustomerKey")
)

func (AccountEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryptionKeyType)(nil)).Elem()
}

func (e AccountEncryptionKeyType) ToAccountEncryptionKeyTypeOutput() AccountEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(AccountEncryptionKeyTypeOutput)
}

func (e AccountEncryptionKeyType) ToAccountEncryptionKeyTypeOutputWithContext(ctx context.Context) AccountEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccountEncryptionKeyTypeOutput)
}

func (e AccountEncryptionKeyType) ToAccountEncryptionKeyTypePtrOutput() AccountEncryptionKeyTypePtrOutput {
	return e.ToAccountEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e AccountEncryptionKeyType) ToAccountEncryptionKeyTypePtrOutputWithContext(ctx context.Context) AccountEncryptionKeyTypePtrOutput {
	return AccountEncryptionKeyType(e).ToAccountEncryptionKeyTypeOutputWithContext(ctx).ToAccountEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e AccountEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccountEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccountEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccountEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccountEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (AccountEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryptionKeyType)(nil)).Elem()
}

func (o AccountEncryptionKeyTypeOutput) ToAccountEncryptionKeyTypeOutput() AccountEncryptionKeyTypeOutput {
	return o
}

func (o AccountEncryptionKeyTypeOutput) ToAccountEncryptionKeyTypeOutputWithContext(ctx context.Context) AccountEncryptionKeyTypeOutput {
	return o
}

func (o AccountEncryptionKeyTypeOutput) ToAccountEncryptionKeyTypePtrOutput() AccountEncryptionKeyTypePtrOutput {
	return o.ToAccountEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o AccountEncryptionKeyTypeOutput) ToAccountEncryptionKeyTypePtrOutputWithContext(ctx context.Context) AccountEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountEncryptionKeyType) *AccountEncryptionKeyType {
		return &v
	}).(AccountEncryptionKeyTypePtrOutput)
}

func (o AccountEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccountEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccountEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccountEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccountEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccountEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccountEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (AccountEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return accountEncryptionKeyTypePtrType
}

func (o AccountEncryptionKeyTypePtrOutput) ToAccountEncryptionKeyTypePtrOutput() AccountEncryptionKeyTypePtrOutput {
	return o
}

func (o AccountEncryptionKeyTypePtrOutput) ToAccountEncryptionKeyTypePtrOutputWithContext(ctx context.Context) AccountEncryptionKeyTypePtrOutput {
	return o
}

func (o AccountEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccountEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccountEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AccountEncryptionKeyTypePtrOutput) Elem() AccountEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *AccountEncryptionKeyType) AccountEncryptionKeyType {
		var ret AccountEncryptionKeyType
		if v != nil {
			ret = *v
		}
		return ret
	}).(AccountEncryptionKeyTypeOutput)
}

// AccountEncryptionKeyTypeInput is an input type that accepts AccountEncryptionKeyTypeArgs and AccountEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `AccountEncryptionKeyTypeInput` via:
//
//          AccountEncryptionKeyTypeArgs{...}
type AccountEncryptionKeyTypeInput interface {
	pulumi.Input

	ToAccountEncryptionKeyTypeOutput() AccountEncryptionKeyTypeOutput
	ToAccountEncryptionKeyTypeOutputWithContext(context.Context) AccountEncryptionKeyTypeOutput
}

var accountEncryptionKeyTypePtrType = reflect.TypeOf((**AccountEncryptionKeyType)(nil)).Elem()

type AccountEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToAccountEncryptionKeyTypePtrOutput() AccountEncryptionKeyTypePtrOutput
	ToAccountEncryptionKeyTypePtrOutputWithContext(context.Context) AccountEncryptionKeyTypePtrOutput
}

type accountEncryptionKeyTypePtr string

func AccountEncryptionKeyTypePtr(v string) AccountEncryptionKeyTypePtrInput {
	return (*accountEncryptionKeyTypePtr)(&v)
}

func (*accountEncryptionKeyTypePtr) ElementType() reflect.Type {
	return accountEncryptionKeyTypePtrType
}

func (in *accountEncryptionKeyTypePtr) ToAccountEncryptionKeyTypePtrOutput() AccountEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(AccountEncryptionKeyTypePtrOutput)
}

func (in *accountEncryptionKeyTypePtr) ToAccountEncryptionKeyTypePtrOutputWithContext(ctx context.Context) AccountEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccountEncryptionKeyTypePtrOutput)
}

// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
type AnalysisResolution string

const (
	AnalysisResolutionSourceResolution   = AnalysisResolution("SourceResolution")
	AnalysisResolutionStandardDefinition = AnalysisResolution("StandardDefinition")
)

func (AnalysisResolution) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisResolution)(nil)).Elem()
}

func (e AnalysisResolution) ToAnalysisResolutionOutput() AnalysisResolutionOutput {
	return pulumi.ToOutput(e).(AnalysisResolutionOutput)
}

func (e AnalysisResolution) ToAnalysisResolutionOutputWithContext(ctx context.Context) AnalysisResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AnalysisResolutionOutput)
}

func (e AnalysisResolution) ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput {
	return e.ToAnalysisResolutionPtrOutputWithContext(context.Background())
}

func (e AnalysisResolution) ToAnalysisResolutionPtrOutputWithContext(ctx context.Context) AnalysisResolutionPtrOutput {
	return AnalysisResolution(e).ToAnalysisResolutionOutputWithContext(ctx).ToAnalysisResolutionPtrOutputWithContext(ctx)
}

func (e AnalysisResolution) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AnalysisResolution) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AnalysisResolution) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AnalysisResolution) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AnalysisResolutionOutput struct{ *pulumi.OutputState }

func (AnalysisResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisResolution)(nil)).Elem()
}

func (o AnalysisResolutionOutput) ToAnalysisResolutionOutput() AnalysisResolutionOutput {
	return o
}

func (o AnalysisResolutionOutput) ToAnalysisResolutionOutputWithContext(ctx context.Context) AnalysisResolutionOutput {
	return o
}

func (o AnalysisResolutionOutput) ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput {
	return o.ToAnalysisResolutionPtrOutputWithContext(context.Background())
}

func (o AnalysisResolutionOutput) ToAnalysisResolutionPtrOutputWithContext(ctx context.Context) AnalysisResolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisResolution) *AnalysisResolution {
		return &v
	}).(AnalysisResolutionPtrOutput)
}

func (o AnalysisResolutionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AnalysisResolutionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AnalysisResolution) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AnalysisResolutionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AnalysisResolutionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AnalysisResolution) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AnalysisResolutionPtrOutput struct{ *pulumi.OutputState }

func (AnalysisResolutionPtrOutput) ElementType() reflect.Type {
	return analysisResolutionPtrType
}

func (o AnalysisResolutionPtrOutput) ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput {
	return o
}

func (o AnalysisResolutionPtrOutput) ToAnalysisResolutionPtrOutputWithContext(ctx context.Context) AnalysisResolutionPtrOutput {
	return o
}

func (o AnalysisResolutionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AnalysisResolutionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AnalysisResolution) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AnalysisResolutionPtrOutput) Elem() AnalysisResolutionOutput {
	return o.ApplyT(func(v *AnalysisResolution) AnalysisResolution {
		var ret AnalysisResolution
		if v != nil {
			ret = *v
		}
		return ret
	}).(AnalysisResolutionOutput)
}

// AnalysisResolutionInput is an input type that accepts AnalysisResolutionArgs and AnalysisResolutionOutput values.
// You can construct a concrete instance of `AnalysisResolutionInput` via:
//
//          AnalysisResolutionArgs{...}
type AnalysisResolutionInput interface {
	pulumi.Input

	ToAnalysisResolutionOutput() AnalysisResolutionOutput
	ToAnalysisResolutionOutputWithContext(context.Context) AnalysisResolutionOutput
}

var analysisResolutionPtrType = reflect.TypeOf((**AnalysisResolution)(nil)).Elem()

type AnalysisResolutionPtrInput interface {
	pulumi.Input

	ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput
	ToAnalysisResolutionPtrOutputWithContext(context.Context) AnalysisResolutionPtrOutput
}

type analysisResolutionPtr string

func AnalysisResolutionPtr(v string) AnalysisResolutionPtrInput {
	return (*analysisResolutionPtr)(&v)
}

func (*analysisResolutionPtr) ElementType() reflect.Type {
	return analysisResolutionPtrType
}

func (in *analysisResolutionPtr) ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput {
	return pulumi.ToOutput(in).(AnalysisResolutionPtrOutput)
}

func (in *analysisResolutionPtr) ToAnalysisResolutionPtrOutputWithContext(ctx context.Context) AnalysisResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AnalysisResolutionPtrOutput)
}

// The permissions to set on the SAS URL.
type AssetContainerPermission string

const (
	// The SAS URL will allow read access to the container.
	AssetContainerPermissionRead = AssetContainerPermission("Read")
	// The SAS URL will allow read and write access to the container.
	AssetContainerPermissionReadWrite = AssetContainerPermission("ReadWrite")
	// The SAS URL will allow read, write and delete access to the container.
	AssetContainerPermissionReadWriteDelete = AssetContainerPermission("ReadWriteDelete")
)

func (AssetContainerPermission) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetContainerPermission)(nil)).Elem()
}

func (e AssetContainerPermission) ToAssetContainerPermissionOutput() AssetContainerPermissionOutput {
	return pulumi.ToOutput(e).(AssetContainerPermissionOutput)
}

func (e AssetContainerPermission) ToAssetContainerPermissionOutputWithContext(ctx context.Context) AssetContainerPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AssetContainerPermissionOutput)
}

func (e AssetContainerPermission) ToAssetContainerPermissionPtrOutput() AssetContainerPermissionPtrOutput {
	return e.ToAssetContainerPermissionPtrOutputWithContext(context.Background())
}

func (e AssetContainerPermission) ToAssetContainerPermissionPtrOutputWithContext(ctx context.Context) AssetContainerPermissionPtrOutput {
	return AssetContainerPermission(e).ToAssetContainerPermissionOutputWithContext(ctx).ToAssetContainerPermissionPtrOutputWithContext(ctx)
}

func (e AssetContainerPermission) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssetContainerPermission) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssetContainerPermission) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AssetContainerPermission) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AssetContainerPermissionOutput struct{ *pulumi.OutputState }

func (AssetContainerPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetContainerPermission)(nil)).Elem()
}

func (o AssetContainerPermissionOutput) ToAssetContainerPermissionOutput() AssetContainerPermissionOutput {
	return o
}

func (o AssetContainerPermissionOutput) ToAssetContainerPermissionOutputWithContext(ctx context.Context) AssetContainerPermissionOutput {
	return o
}

func (o AssetContainerPermissionOutput) ToAssetContainerPermissionPtrOutput() AssetContainerPermissionPtrOutput {
	return o.ToAssetContainerPermissionPtrOutputWithContext(context.Background())
}

func (o AssetContainerPermissionOutput) ToAssetContainerPermissionPtrOutputWithContext(ctx context.Context) AssetContainerPermissionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssetContainerPermission) *AssetContainerPermission {
		return &v
	}).(AssetContainerPermissionPtrOutput)
}

func (o AssetContainerPermissionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AssetContainerPermissionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssetContainerPermission) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AssetContainerPermissionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssetContainerPermissionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssetContainerPermission) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AssetContainerPermissionPtrOutput struct{ *pulumi.OutputState }

func (AssetContainerPermissionPtrOutput) ElementType() reflect.Type {
	return assetContainerPermissionPtrType
}

func (o AssetContainerPermissionPtrOutput) ToAssetContainerPermissionPtrOutput() AssetContainerPermissionPtrOutput {
	return o
}

func (o AssetContainerPermissionPtrOutput) ToAssetContainerPermissionPtrOutputWithContext(ctx context.Context) AssetContainerPermissionPtrOutput {
	return o
}

func (o AssetContainerPermissionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssetContainerPermissionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AssetContainerPermission) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AssetContainerPermissionPtrOutput) Elem() AssetContainerPermissionOutput {
	return o.ApplyT(func(v *AssetContainerPermission) AssetContainerPermission {
		var ret AssetContainerPermission
		if v != nil {
			ret = *v
		}
		return ret
	}).(AssetContainerPermissionOutput)
}

// AssetContainerPermissionInput is an input type that accepts AssetContainerPermissionArgs and AssetContainerPermissionOutput values.
// You can construct a concrete instance of `AssetContainerPermissionInput` via:
//
//          AssetContainerPermissionArgs{...}
type AssetContainerPermissionInput interface {
	pulumi.Input

	ToAssetContainerPermissionOutput() AssetContainerPermissionOutput
	ToAssetContainerPermissionOutputWithContext(context.Context) AssetContainerPermissionOutput
}

var assetContainerPermissionPtrType = reflect.TypeOf((**AssetContainerPermission)(nil)).Elem()

type AssetContainerPermissionPtrInput interface {
	pulumi.Input

	ToAssetContainerPermissionPtrOutput() AssetContainerPermissionPtrOutput
	ToAssetContainerPermissionPtrOutputWithContext(context.Context) AssetContainerPermissionPtrOutput
}

type assetContainerPermissionPtr string

func AssetContainerPermissionPtr(v string) AssetContainerPermissionPtrInput {
	return (*assetContainerPermissionPtr)(&v)
}

func (*assetContainerPermissionPtr) ElementType() reflect.Type {
	return assetContainerPermissionPtrType
}

func (in *assetContainerPermissionPtr) ToAssetContainerPermissionPtrOutput() AssetContainerPermissionPtrOutput {
	return pulumi.ToOutput(in).(AssetContainerPermissionPtrOutput)
}

func (in *assetContainerPermissionPtr) ToAssetContainerPermissionPtrOutputWithContext(ctx context.Context) AssetContainerPermissionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AssetContainerPermissionPtrOutput)
}

// The type of AttributeFilter to apply to the TrackAttribute in order to select the tracks.
type AttributeFilter string

const (
	// All tracks will be included.
	AttributeFilterAll = AttributeFilter("All")
	// The first track will be included when the attribute is sorted in descending order.  Generally used to select the largest bitrate.
	AttributeFilterTop = AttributeFilter("Top")
	// The first track will be included when the attribute is sorted in ascending order.  Generally used to select the smallest bitrate.
	AttributeFilterBottom = AttributeFilter("Bottom")
	// Any tracks that have an attribute equal to the value given will be included.
	AttributeFilterValueEquals = AttributeFilter("ValueEquals")
)

func (AttributeFilter) ElementType() reflect.Type {
	return reflect.TypeOf((*AttributeFilter)(nil)).Elem()
}

func (e AttributeFilter) ToAttributeFilterOutput() AttributeFilterOutput {
	return pulumi.ToOutput(e).(AttributeFilterOutput)
}

func (e AttributeFilter) ToAttributeFilterOutputWithContext(ctx context.Context) AttributeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AttributeFilterOutput)
}

func (e AttributeFilter) ToAttributeFilterPtrOutput() AttributeFilterPtrOutput {
	return e.ToAttributeFilterPtrOutputWithContext(context.Background())
}

func (e AttributeFilter) ToAttributeFilterPtrOutputWithContext(ctx context.Context) AttributeFilterPtrOutput {
	return AttributeFilter(e).ToAttributeFilterOutputWithContext(ctx).ToAttributeFilterPtrOutputWithContext(ctx)
}

func (e AttributeFilter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttributeFilter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttributeFilter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttributeFilter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AttributeFilterOutput struct{ *pulumi.OutputState }

func (AttributeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttributeFilter)(nil)).Elem()
}

func (o AttributeFilterOutput) ToAttributeFilterOutput() AttributeFilterOutput {
	return o
}

func (o AttributeFilterOutput) ToAttributeFilterOutputWithContext(ctx context.Context) AttributeFilterOutput {
	return o
}

func (o AttributeFilterOutput) ToAttributeFilterPtrOutput() AttributeFilterPtrOutput {
	return o.ToAttributeFilterPtrOutputWithContext(context.Background())
}

func (o AttributeFilterOutput) ToAttributeFilterPtrOutputWithContext(ctx context.Context) AttributeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttributeFilter) *AttributeFilter {
		return &v
	}).(AttributeFilterPtrOutput)
}

func (o AttributeFilterOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AttributeFilterOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AttributeFilter) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AttributeFilterOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AttributeFilterOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AttributeFilter) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AttributeFilterPtrOutput struct{ *pulumi.OutputState }

func (AttributeFilterPtrOutput) ElementType() reflect.Type {
	return attributeFilterPtrType
}

func (o AttributeFilterPtrOutput) ToAttributeFilterPtrOutput() AttributeFilterPtrOutput {
	return o
}

func (o AttributeFilterPtrOutput) ToAttributeFilterPtrOutputWithContext(ctx context.Context) AttributeFilterPtrOutput {
	return o
}

func (o AttributeFilterPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AttributeFilterPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AttributeFilter) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AttributeFilterPtrOutput) Elem() AttributeFilterOutput {
	return o.ApplyT(func(v *AttributeFilter) AttributeFilter {
		var ret AttributeFilter
		if v != nil {
			ret = *v
		}
		return ret
	}).(AttributeFilterOutput)
}

// AttributeFilterInput is an input type that accepts AttributeFilterArgs and AttributeFilterOutput values.
// You can construct a concrete instance of `AttributeFilterInput` via:
//
//          AttributeFilterArgs{...}
type AttributeFilterInput interface {
	pulumi.Input

	ToAttributeFilterOutput() AttributeFilterOutput
	ToAttributeFilterOutputWithContext(context.Context) AttributeFilterOutput
}

var attributeFilterPtrType = reflect.TypeOf((**AttributeFilter)(nil)).Elem()

type AttributeFilterPtrInput interface {
	pulumi.Input

	ToAttributeFilterPtrOutput() AttributeFilterPtrOutput
	ToAttributeFilterPtrOutputWithContext(context.Context) AttributeFilterPtrOutput
}

type attributeFilterPtr string

func AttributeFilterPtr(v string) AttributeFilterPtrInput {
	return (*attributeFilterPtr)(&v)
}

func (*attributeFilterPtr) ElementType() reflect.Type {
	return attributeFilterPtrType
}

func (in *attributeFilterPtr) ToAttributeFilterPtrOutput() AttributeFilterPtrOutput {
	return pulumi.ToOutput(in).(AttributeFilterPtrOutput)
}

func (in *attributeFilterPtr) ToAttributeFilterPtrOutputWithContext(ctx context.Context) AttributeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AttributeFilterPtrOutput)
}

// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
type AudioAnalysisMode string

const (
	// Performs all operations included in the Basic mode, additionally performing language detection and speaker diarization.
	AudioAnalysisModeStandard = AudioAnalysisMode("Standard")
	// This mode performs speech-to-text transcription and generation of a VTT subtitle/caption file. The output of this mode includes an Insights JSON file including only the keywords, transcription,and timing information. Automatic language detection and speaker diarization are not included in this mode.
	AudioAnalysisModeBasic = AudioAnalysisMode("Basic")
)

func (AudioAnalysisMode) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAnalysisMode)(nil)).Elem()
}

func (e AudioAnalysisMode) ToAudioAnalysisModeOutput() AudioAnalysisModeOutput {
	return pulumi.ToOutput(e).(AudioAnalysisModeOutput)
}

func (e AudioAnalysisMode) ToAudioAnalysisModeOutputWithContext(ctx context.Context) AudioAnalysisModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AudioAnalysisModeOutput)
}

func (e AudioAnalysisMode) ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput {
	return e.ToAudioAnalysisModePtrOutputWithContext(context.Background())
}

func (e AudioAnalysisMode) ToAudioAnalysisModePtrOutputWithContext(ctx context.Context) AudioAnalysisModePtrOutput {
	return AudioAnalysisMode(e).ToAudioAnalysisModeOutputWithContext(ctx).ToAudioAnalysisModePtrOutputWithContext(ctx)
}

func (e AudioAnalysisMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AudioAnalysisMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AudioAnalysisMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AudioAnalysisMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AudioAnalysisModeOutput struct{ *pulumi.OutputState }

func (AudioAnalysisModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAnalysisMode)(nil)).Elem()
}

func (o AudioAnalysisModeOutput) ToAudioAnalysisModeOutput() AudioAnalysisModeOutput {
	return o
}

func (o AudioAnalysisModeOutput) ToAudioAnalysisModeOutputWithContext(ctx context.Context) AudioAnalysisModeOutput {
	return o
}

func (o AudioAnalysisModeOutput) ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput {
	return o.ToAudioAnalysisModePtrOutputWithContext(context.Background())
}

func (o AudioAnalysisModeOutput) ToAudioAnalysisModePtrOutputWithContext(ctx context.Context) AudioAnalysisModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AudioAnalysisMode) *AudioAnalysisMode {
		return &v
	}).(AudioAnalysisModePtrOutput)
}

func (o AudioAnalysisModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AudioAnalysisModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AudioAnalysisMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AudioAnalysisModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AudioAnalysisModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AudioAnalysisMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AudioAnalysisModePtrOutput struct{ *pulumi.OutputState }

func (AudioAnalysisModePtrOutput) ElementType() reflect.Type {
	return audioAnalysisModePtrType
}

func (o AudioAnalysisModePtrOutput) ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput {
	return o
}

func (o AudioAnalysisModePtrOutput) ToAudioAnalysisModePtrOutputWithContext(ctx context.Context) AudioAnalysisModePtrOutput {
	return o
}

func (o AudioAnalysisModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AudioAnalysisModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AudioAnalysisMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AudioAnalysisModePtrOutput) Elem() AudioAnalysisModeOutput {
	return o.ApplyT(func(v *AudioAnalysisMode) AudioAnalysisMode {
		var ret AudioAnalysisMode
		if v != nil {
			ret = *v
		}
		return ret
	}).(AudioAnalysisModeOutput)
}

// AudioAnalysisModeInput is an input type that accepts AudioAnalysisModeArgs and AudioAnalysisModeOutput values.
// You can construct a concrete instance of `AudioAnalysisModeInput` via:
//
//          AudioAnalysisModeArgs{...}
type AudioAnalysisModeInput interface {
	pulumi.Input

	ToAudioAnalysisModeOutput() AudioAnalysisModeOutput
	ToAudioAnalysisModeOutputWithContext(context.Context) AudioAnalysisModeOutput
}

var audioAnalysisModePtrType = reflect.TypeOf((**AudioAnalysisMode)(nil)).Elem()

type AudioAnalysisModePtrInput interface {
	pulumi.Input

	ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput
	ToAudioAnalysisModePtrOutputWithContext(context.Context) AudioAnalysisModePtrOutput
}

type audioAnalysisModePtr string

func AudioAnalysisModePtr(v string) AudioAnalysisModePtrInput {
	return (*audioAnalysisModePtr)(&v)
}

func (*audioAnalysisModePtr) ElementType() reflect.Type {
	return audioAnalysisModePtrType
}

func (in *audioAnalysisModePtr) ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput {
	return pulumi.ToOutput(in).(AudioAnalysisModePtrOutput)
}

func (in *audioAnalysisModePtr) ToAudioAnalysisModePtrOutputWithContext(ctx context.Context) AudioAnalysisModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AudioAnalysisModePtrOutput)
}

// Blur type
type BlurType string

const (
	// Box: debug filter, bounding box only
	BlurTypeBox = BlurType("Box")
	// Low: box-car blur filter
	BlurTypeLow = BlurType("Low")
	// Med: Gaussian blur filter
	BlurTypeMed = BlurType("Med")
	// High: Confuse blur filter
	BlurTypeHigh = BlurType("High")
	// Black: Black out filter
	BlurTypeBlack = BlurType("Black")
)

func (BlurType) ElementType() reflect.Type {
	return reflect.TypeOf((*BlurType)(nil)).Elem()
}

func (e BlurType) ToBlurTypeOutput() BlurTypeOutput {
	return pulumi.ToOutput(e).(BlurTypeOutput)
}

func (e BlurType) ToBlurTypeOutputWithContext(ctx context.Context) BlurTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BlurTypeOutput)
}

func (e BlurType) ToBlurTypePtrOutput() BlurTypePtrOutput {
	return e.ToBlurTypePtrOutputWithContext(context.Background())
}

func (e BlurType) ToBlurTypePtrOutputWithContext(ctx context.Context) BlurTypePtrOutput {
	return BlurType(e).ToBlurTypeOutputWithContext(ctx).ToBlurTypePtrOutputWithContext(ctx)
}

func (e BlurType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlurType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlurType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BlurType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BlurTypeOutput struct{ *pulumi.OutputState }

func (BlurTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlurType)(nil)).Elem()
}

func (o BlurTypeOutput) ToBlurTypeOutput() BlurTypeOutput {
	return o
}

func (o BlurTypeOutput) ToBlurTypeOutputWithContext(ctx context.Context) BlurTypeOutput {
	return o
}

func (o BlurTypeOutput) ToBlurTypePtrOutput() BlurTypePtrOutput {
	return o.ToBlurTypePtrOutputWithContext(context.Background())
}

func (o BlurTypeOutput) ToBlurTypePtrOutputWithContext(ctx context.Context) BlurTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlurType) *BlurType {
		return &v
	}).(BlurTypePtrOutput)
}

func (o BlurTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BlurTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlurType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BlurTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlurTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlurType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BlurTypePtrOutput struct{ *pulumi.OutputState }

func (BlurTypePtrOutput) ElementType() reflect.Type {
	return blurTypePtrType
}

func (o BlurTypePtrOutput) ToBlurTypePtrOutput() BlurTypePtrOutput {
	return o
}

func (o BlurTypePtrOutput) ToBlurTypePtrOutputWithContext(ctx context.Context) BlurTypePtrOutput {
	return o
}

func (o BlurTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlurTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BlurType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o BlurTypePtrOutput) Elem() BlurTypeOutput {
	return o.ApplyT(func(v *BlurType) BlurType {
		var ret BlurType
		if v != nil {
			ret = *v
		}
		return ret
	}).(BlurTypeOutput)
}

// BlurTypeInput is an input type that accepts BlurTypeArgs and BlurTypeOutput values.
// You can construct a concrete instance of `BlurTypeInput` via:
//
//          BlurTypeArgs{...}
type BlurTypeInput interface {
	pulumi.Input

	ToBlurTypeOutput() BlurTypeOutput
	ToBlurTypeOutputWithContext(context.Context) BlurTypeOutput
}

var blurTypePtrType = reflect.TypeOf((**BlurType)(nil)).Elem()

type BlurTypePtrInput interface {
	pulumi.Input

	ToBlurTypePtrOutput() BlurTypePtrOutput
	ToBlurTypePtrOutputWithContext(context.Context) BlurTypePtrOutput
}

type blurTypePtr string

func BlurTypePtr(v string) BlurTypePtrInput {
	return (*blurTypePtr)(&v)
}

func (*blurTypePtr) ElementType() reflect.Type {
	return blurTypePtrType
}

func (in *blurTypePtr) ToBlurTypePtrOutput() BlurTypePtrOutput {
	return pulumi.ToOutput(in).(BlurTypePtrOutput)
}

func (in *blurTypePtr) ToBlurTypePtrOutputWithContext(ctx context.Context) BlurTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BlurTypePtrOutput)
}

// Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
type ChannelMapping string

const (
	// The Front Left Channel.
	ChannelMappingFrontLeft = ChannelMapping("FrontLeft")
	// The Front Right Channel.
	ChannelMappingFrontRight = ChannelMapping("FrontRight")
	// The Center Channel.
	ChannelMappingCenter = ChannelMapping("Center")
	// Low Frequency Effects Channel.  Sometimes referred to as the Subwoofer.
	ChannelMappingLowFrequencyEffects = ChannelMapping("LowFrequencyEffects")
	// The Back Left Channel.  Sometimes referred to as the Left Surround Channel.
	ChannelMappingBackLeft = ChannelMapping("BackLeft")
	// The Back Right Channel.  Sometimes referred to as the Right Surround Channel.
	ChannelMappingBackRight = ChannelMapping("BackRight")
	// The Left Stereo channel.  Sometimes referred to as Down Mix Left.
	ChannelMappingStereoLeft = ChannelMapping("StereoLeft")
	// The Right Stereo channel.  Sometimes referred to as Down Mix Right.
	ChannelMappingStereoRight = ChannelMapping("StereoRight")
)

func (ChannelMapping) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelMapping)(nil)).Elem()
}

func (e ChannelMapping) ToChannelMappingOutput() ChannelMappingOutput {
	return pulumi.ToOutput(e).(ChannelMappingOutput)
}

func (e ChannelMapping) ToChannelMappingOutputWithContext(ctx context.Context) ChannelMappingOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ChannelMappingOutput)
}

func (e ChannelMapping) ToChannelMappingPtrOutput() ChannelMappingPtrOutput {
	return e.ToChannelMappingPtrOutputWithContext(context.Background())
}

func (e ChannelMapping) ToChannelMappingPtrOutputWithContext(ctx context.Context) ChannelMappingPtrOutput {
	return ChannelMapping(e).ToChannelMappingOutputWithContext(ctx).ToChannelMappingPtrOutputWithContext(ctx)
}

func (e ChannelMapping) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChannelMapping) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChannelMapping) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ChannelMapping) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ChannelMappingOutput struct{ *pulumi.OutputState }

func (ChannelMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelMapping)(nil)).Elem()
}

func (o ChannelMappingOutput) ToChannelMappingOutput() ChannelMappingOutput {
	return o
}

func (o ChannelMappingOutput) ToChannelMappingOutputWithContext(ctx context.Context) ChannelMappingOutput {
	return o
}

func (o ChannelMappingOutput) ToChannelMappingPtrOutput() ChannelMappingPtrOutput {
	return o.ToChannelMappingPtrOutputWithContext(context.Background())
}

func (o ChannelMappingOutput) ToChannelMappingPtrOutputWithContext(ctx context.Context) ChannelMappingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelMapping) *ChannelMapping {
		return &v
	}).(ChannelMappingPtrOutput)
}

func (o ChannelMappingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ChannelMappingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChannelMapping) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ChannelMappingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChannelMappingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChannelMapping) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ChannelMappingPtrOutput struct{ *pulumi.OutputState }

func (ChannelMappingPtrOutput) ElementType() reflect.Type {
	return channelMappingPtrType
}

func (o ChannelMappingPtrOutput) ToChannelMappingPtrOutput() ChannelMappingPtrOutput {
	return o
}

func (o ChannelMappingPtrOutput) ToChannelMappingPtrOutputWithContext(ctx context.Context) ChannelMappingPtrOutput {
	return o
}

func (o ChannelMappingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChannelMappingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ChannelMapping) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ChannelMappingPtrOutput) Elem() ChannelMappingOutput {
	return o.ApplyT(func(v *ChannelMapping) ChannelMapping {
		var ret ChannelMapping
		if v != nil {
			ret = *v
		}
		return ret
	}).(ChannelMappingOutput)
}

// ChannelMappingInput is an input type that accepts ChannelMappingArgs and ChannelMappingOutput values.
// You can construct a concrete instance of `ChannelMappingInput` via:
//
//          ChannelMappingArgs{...}
type ChannelMappingInput interface {
	pulumi.Input

	ToChannelMappingOutput() ChannelMappingOutput
	ToChannelMappingOutputWithContext(context.Context) ChannelMappingOutput
}

var channelMappingPtrType = reflect.TypeOf((**ChannelMapping)(nil)).Elem()

type ChannelMappingPtrInput interface {
	pulumi.Input

	ToChannelMappingPtrOutput() ChannelMappingPtrOutput
	ToChannelMappingPtrOutputWithContext(context.Context) ChannelMappingPtrOutput
}

type channelMappingPtr string

func ChannelMappingPtr(v string) ChannelMappingPtrInput {
	return (*channelMappingPtr)(&v)
}

func (*channelMappingPtr) ElementType() reflect.Type {
	return channelMappingPtrType
}

func (in *channelMappingPtr) ToChannelMappingPtrOutput() ChannelMappingPtrOutput {
	return pulumi.ToOutput(in).(ChannelMappingPtrOutput)
}

func (in *channelMappingPtr) ToChannelMappingPtrOutputWithContext(ctx context.Context) ChannelMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ChannelMappingPtrOutput)
}

// The rental and lease key type.
type ContentKeyPolicyFairPlayRentalAndLeaseKeyType string

const (
	// Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version.
	ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeUnknown = ContentKeyPolicyFairPlayRentalAndLeaseKeyType("Unknown")
	// Key duration is not specified.
	ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeUndefined = ContentKeyPolicyFairPlayRentalAndLeaseKeyType("Undefined")
	// Dual expiry for offline rental.
	ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeDualExpiry = ContentKeyPolicyFairPlayRentalAndLeaseKeyType("DualExpiry")
	// Content key can be persisted with an unlimited duration
	ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePersistentUnlimited = ContentKeyPolicyFairPlayRentalAndLeaseKeyType("PersistentUnlimited")
	// Content key can be persisted and the valid duration is limited by the Rental Duration value
	ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePersistentLimited = ContentKeyPolicyFairPlayRentalAndLeaseKeyType("PersistentLimited")
)

func (ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayRentalAndLeaseKeyType)(nil)).Elem()
}

func (e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput {
	return pulumi.ToOutput(e).(ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput)
}

func (e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput)
}

func (e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput {
	return e.ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput {
	return ContentKeyPolicyFairPlayRentalAndLeaseKeyType(e).ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutputWithContext(ctx).ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutputWithContext(ctx)
}

func (e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayRentalAndLeaseKeyType)(nil)).Elem()
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput {
	return o
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput {
	return o
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput {
	return o.ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyFairPlayRentalAndLeaseKeyType) *ContentKeyPolicyFairPlayRentalAndLeaseKeyType {
		return &v
	}).(ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput)
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyFairPlayRentalAndLeaseKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput) ElementType() reflect.Type {
	return contentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrType
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput {
	return o
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput {
	return o
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentKeyPolicyFairPlayRentalAndLeaseKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput) Elem() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput {
	return o.ApplyT(func(v *ContentKeyPolicyFairPlayRentalAndLeaseKeyType) ContentKeyPolicyFairPlayRentalAndLeaseKeyType {
		var ret ContentKeyPolicyFairPlayRentalAndLeaseKeyType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput)
}

// ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeInput is an input type that accepts ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeArgs and ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput values.
// You can construct a concrete instance of `ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeInput` via:
//
//          ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeArgs{...}
type ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeInput interface {
	pulumi.Input

	ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput
	ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutputWithContext(context.Context) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput
}

var contentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrType = reflect.TypeOf((**ContentKeyPolicyFairPlayRentalAndLeaseKeyType)(nil)).Elem()

type ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrInput interface {
	pulumi.Input

	ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput
	ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutputWithContext(context.Context) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput
}

type contentKeyPolicyFairPlayRentalAndLeaseKeyTypePtr string

func ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtr(v string) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrInput {
	return (*contentKeyPolicyFairPlayRentalAndLeaseKeyTypePtr)(&v)
}

func (*contentKeyPolicyFairPlayRentalAndLeaseKeyTypePtr) ElementType() reflect.Type {
	return contentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrType
}

func (in *contentKeyPolicyFairPlayRentalAndLeaseKeyTypePtr) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput() ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput {
	return pulumi.ToOutput(in).(ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput)
}

func (in *contentKeyPolicyFairPlayRentalAndLeaseKeyTypePtr) ToContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput)
}

// The PlayReady content type.
type ContentKeyPolicyPlayReadyContentType string

const (
	// Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version.
	ContentKeyPolicyPlayReadyContentTypeUnknown = ContentKeyPolicyPlayReadyContentType("Unknown")
	// Unspecified content type.
	ContentKeyPolicyPlayReadyContentTypeUnspecified = ContentKeyPolicyPlayReadyContentType("Unspecified")
	// Ultraviolet download content type.
	ContentKeyPolicyPlayReadyContentTypeUltraVioletDownload = ContentKeyPolicyPlayReadyContentType("UltraVioletDownload")
	// Ultraviolet streaming content type.
	ContentKeyPolicyPlayReadyContentTypeUltraVioletStreaming = ContentKeyPolicyPlayReadyContentType("UltraVioletStreaming")
)

func (ContentKeyPolicyPlayReadyContentType) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentType)(nil)).Elem()
}

func (e ContentKeyPolicyPlayReadyContentType) ToContentKeyPolicyPlayReadyContentTypeOutput() ContentKeyPolicyPlayReadyContentTypeOutput {
	return pulumi.ToOutput(e).(ContentKeyPolicyPlayReadyContentTypeOutput)
}

func (e ContentKeyPolicyPlayReadyContentType) ToContentKeyPolicyPlayReadyContentTypeOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentKeyPolicyPlayReadyContentTypeOutput)
}

func (e ContentKeyPolicyPlayReadyContentType) ToContentKeyPolicyPlayReadyContentTypePtrOutput() ContentKeyPolicyPlayReadyContentTypePtrOutput {
	return e.ToContentKeyPolicyPlayReadyContentTypePtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyPlayReadyContentType) ToContentKeyPolicyPlayReadyContentTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentTypePtrOutput {
	return ContentKeyPolicyPlayReadyContentType(e).ToContentKeyPolicyPlayReadyContentTypeOutputWithContext(ctx).ToContentKeyPolicyPlayReadyContentTypePtrOutputWithContext(ctx)
}

func (e ContentKeyPolicyPlayReadyContentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyPlayReadyContentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyPlayReadyContentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyPlayReadyContentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentKeyPolicyPlayReadyContentTypeOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyContentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentType)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyContentTypeOutput) ToContentKeyPolicyPlayReadyContentTypeOutput() ContentKeyPolicyPlayReadyContentTypeOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyContentTypeOutput) ToContentKeyPolicyPlayReadyContentTypeOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentTypeOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyContentTypeOutput) ToContentKeyPolicyPlayReadyContentTypePtrOutput() ContentKeyPolicyPlayReadyContentTypePtrOutput {
	return o.ToContentKeyPolicyPlayReadyContentTypePtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyContentTypeOutput) ToContentKeyPolicyPlayReadyContentTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyPlayReadyContentType) *ContentKeyPolicyPlayReadyContentType {
		return &v
	}).(ContentKeyPolicyPlayReadyContentTypePtrOutput)
}

func (o ContentKeyPolicyPlayReadyContentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyContentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyPlayReadyContentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentKeyPolicyPlayReadyContentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyContentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyPlayReadyContentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPlayReadyContentTypePtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyContentTypePtrOutput) ElementType() reflect.Type {
	return contentKeyPolicyPlayReadyContentTypePtrType
}

func (o ContentKeyPolicyPlayReadyContentTypePtrOutput) ToContentKeyPolicyPlayReadyContentTypePtrOutput() ContentKeyPolicyPlayReadyContentTypePtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyContentTypePtrOutput) ToContentKeyPolicyPlayReadyContentTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentTypePtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyContentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyContentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentKeyPolicyPlayReadyContentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ContentKeyPolicyPlayReadyContentTypePtrOutput) Elem() ContentKeyPolicyPlayReadyContentTypeOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyContentType) ContentKeyPolicyPlayReadyContentType {
		var ret ContentKeyPolicyPlayReadyContentType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ContentKeyPolicyPlayReadyContentTypeOutput)
}

// ContentKeyPolicyPlayReadyContentTypeInput is an input type that accepts ContentKeyPolicyPlayReadyContentTypeArgs and ContentKeyPolicyPlayReadyContentTypeOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyContentTypeInput` via:
//
//          ContentKeyPolicyPlayReadyContentTypeArgs{...}
type ContentKeyPolicyPlayReadyContentTypeInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyContentTypeOutput() ContentKeyPolicyPlayReadyContentTypeOutput
	ToContentKeyPolicyPlayReadyContentTypeOutputWithContext(context.Context) ContentKeyPolicyPlayReadyContentTypeOutput
}

var contentKeyPolicyPlayReadyContentTypePtrType = reflect.TypeOf((**ContentKeyPolicyPlayReadyContentType)(nil)).Elem()

type ContentKeyPolicyPlayReadyContentTypePtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyContentTypePtrOutput() ContentKeyPolicyPlayReadyContentTypePtrOutput
	ToContentKeyPolicyPlayReadyContentTypePtrOutputWithContext(context.Context) ContentKeyPolicyPlayReadyContentTypePtrOutput
}

type contentKeyPolicyPlayReadyContentTypePtr string

func ContentKeyPolicyPlayReadyContentTypePtr(v string) ContentKeyPolicyPlayReadyContentTypePtrInput {
	return (*contentKeyPolicyPlayReadyContentTypePtr)(&v)
}

func (*contentKeyPolicyPlayReadyContentTypePtr) ElementType() reflect.Type {
	return contentKeyPolicyPlayReadyContentTypePtrType
}

func (in *contentKeyPolicyPlayReadyContentTypePtr) ToContentKeyPolicyPlayReadyContentTypePtrOutput() ContentKeyPolicyPlayReadyContentTypePtrOutput {
	return pulumi.ToOutput(in).(ContentKeyPolicyPlayReadyContentTypePtrOutput)
}

func (in *contentKeyPolicyPlayReadyContentTypePtr) ToContentKeyPolicyPlayReadyContentTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentKeyPolicyPlayReadyContentTypePtrOutput)
}

// The license type.
type ContentKeyPolicyPlayReadyLicenseType string

const (
	// Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version.
	ContentKeyPolicyPlayReadyLicenseTypeUnknown = ContentKeyPolicyPlayReadyLicenseType("Unknown")
	// Non persistent license.
	ContentKeyPolicyPlayReadyLicenseTypeNonPersistent = ContentKeyPolicyPlayReadyLicenseType("NonPersistent")
	// Persistent license. Allows offline playback.
	ContentKeyPolicyPlayReadyLicenseTypePersistent = ContentKeyPolicyPlayReadyLicenseType("Persistent")
)

func (ContentKeyPolicyPlayReadyLicenseType) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyLicenseType)(nil)).Elem()
}

func (e ContentKeyPolicyPlayReadyLicenseType) ToContentKeyPolicyPlayReadyLicenseTypeOutput() ContentKeyPolicyPlayReadyLicenseTypeOutput {
	return pulumi.ToOutput(e).(ContentKeyPolicyPlayReadyLicenseTypeOutput)
}

func (e ContentKeyPolicyPlayReadyLicenseType) ToContentKeyPolicyPlayReadyLicenseTypeOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentKeyPolicyPlayReadyLicenseTypeOutput)
}

func (e ContentKeyPolicyPlayReadyLicenseType) ToContentKeyPolicyPlayReadyLicenseTypePtrOutput() ContentKeyPolicyPlayReadyLicenseTypePtrOutput {
	return e.ToContentKeyPolicyPlayReadyLicenseTypePtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyPlayReadyLicenseType) ToContentKeyPolicyPlayReadyLicenseTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseTypePtrOutput {
	return ContentKeyPolicyPlayReadyLicenseType(e).ToContentKeyPolicyPlayReadyLicenseTypeOutputWithContext(ctx).ToContentKeyPolicyPlayReadyLicenseTypePtrOutputWithContext(ctx)
}

func (e ContentKeyPolicyPlayReadyLicenseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyPlayReadyLicenseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyPlayReadyLicenseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyPlayReadyLicenseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentKeyPolicyPlayReadyLicenseTypeOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyLicenseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyLicenseType)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyLicenseTypeOutput) ToContentKeyPolicyPlayReadyLicenseTypeOutput() ContentKeyPolicyPlayReadyLicenseTypeOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseTypeOutput) ToContentKeyPolicyPlayReadyLicenseTypeOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseTypeOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseTypeOutput) ToContentKeyPolicyPlayReadyLicenseTypePtrOutput() ContentKeyPolicyPlayReadyLicenseTypePtrOutput {
	return o.ToContentKeyPolicyPlayReadyLicenseTypePtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyLicenseTypeOutput) ToContentKeyPolicyPlayReadyLicenseTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyPlayReadyLicenseType) *ContentKeyPolicyPlayReadyLicenseType {
		return &v
	}).(ContentKeyPolicyPlayReadyLicenseTypePtrOutput)
}

func (o ContentKeyPolicyPlayReadyLicenseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyLicenseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyPlayReadyLicenseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentKeyPolicyPlayReadyLicenseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyLicenseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyPlayReadyLicenseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPlayReadyLicenseTypePtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyLicenseTypePtrOutput) ElementType() reflect.Type {
	return contentKeyPolicyPlayReadyLicenseTypePtrType
}

func (o ContentKeyPolicyPlayReadyLicenseTypePtrOutput) ToContentKeyPolicyPlayReadyLicenseTypePtrOutput() ContentKeyPolicyPlayReadyLicenseTypePtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseTypePtrOutput) ToContentKeyPolicyPlayReadyLicenseTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseTypePtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyLicenseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentKeyPolicyPlayReadyLicenseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ContentKeyPolicyPlayReadyLicenseTypePtrOutput) Elem() ContentKeyPolicyPlayReadyLicenseTypeOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyLicenseType) ContentKeyPolicyPlayReadyLicenseType {
		var ret ContentKeyPolicyPlayReadyLicenseType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ContentKeyPolicyPlayReadyLicenseTypeOutput)
}

// ContentKeyPolicyPlayReadyLicenseTypeInput is an input type that accepts ContentKeyPolicyPlayReadyLicenseTypeArgs and ContentKeyPolicyPlayReadyLicenseTypeOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyLicenseTypeInput` via:
//
//          ContentKeyPolicyPlayReadyLicenseTypeArgs{...}
type ContentKeyPolicyPlayReadyLicenseTypeInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyLicenseTypeOutput() ContentKeyPolicyPlayReadyLicenseTypeOutput
	ToContentKeyPolicyPlayReadyLicenseTypeOutputWithContext(context.Context) ContentKeyPolicyPlayReadyLicenseTypeOutput
}

var contentKeyPolicyPlayReadyLicenseTypePtrType = reflect.TypeOf((**ContentKeyPolicyPlayReadyLicenseType)(nil)).Elem()

type ContentKeyPolicyPlayReadyLicenseTypePtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyLicenseTypePtrOutput() ContentKeyPolicyPlayReadyLicenseTypePtrOutput
	ToContentKeyPolicyPlayReadyLicenseTypePtrOutputWithContext(context.Context) ContentKeyPolicyPlayReadyLicenseTypePtrOutput
}

type contentKeyPolicyPlayReadyLicenseTypePtr string

func ContentKeyPolicyPlayReadyLicenseTypePtr(v string) ContentKeyPolicyPlayReadyLicenseTypePtrInput {
	return (*contentKeyPolicyPlayReadyLicenseTypePtr)(&v)
}

func (*contentKeyPolicyPlayReadyLicenseTypePtr) ElementType() reflect.Type {
	return contentKeyPolicyPlayReadyLicenseTypePtrType
}

func (in *contentKeyPolicyPlayReadyLicenseTypePtr) ToContentKeyPolicyPlayReadyLicenseTypePtrOutput() ContentKeyPolicyPlayReadyLicenseTypePtrOutput {
	return pulumi.ToOutput(in).(ContentKeyPolicyPlayReadyLicenseTypePtrOutput)
}

func (in *contentKeyPolicyPlayReadyLicenseTypePtr) ToContentKeyPolicyPlayReadyLicenseTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentKeyPolicyPlayReadyLicenseTypePtrOutput)
}

// Configures Unknown output handling settings of the license.
type ContentKeyPolicyPlayReadyUnknownOutputPassingOption string

const (
	// Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version.
	ContentKeyPolicyPlayReadyUnknownOutputPassingOptionUnknown = ContentKeyPolicyPlayReadyUnknownOutputPassingOption("Unknown")
	// Passing the video portion of protected content to an Unknown Output is not allowed.
	ContentKeyPolicyPlayReadyUnknownOutputPassingOptionNotAllowed = ContentKeyPolicyPlayReadyUnknownOutputPassingOption("NotAllowed")
	// Passing the video portion of protected content to an Unknown Output is allowed.
	ContentKeyPolicyPlayReadyUnknownOutputPassingOptionAllowed = ContentKeyPolicyPlayReadyUnknownOutputPassingOption("Allowed")
	// Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution.
	ContentKeyPolicyPlayReadyUnknownOutputPassingOptionAllowedWithVideoConstriction = ContentKeyPolicyPlayReadyUnknownOutputPassingOption("AllowedWithVideoConstriction")
)

func (ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyUnknownOutputPassingOption)(nil)).Elem()
}

func (e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput {
	return pulumi.ToOutput(e).(ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput)
}

func (e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput)
}

func (e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput {
	return e.ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput {
	return ContentKeyPolicyPlayReadyUnknownOutputPassingOption(e).ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutputWithContext(ctx).ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutputWithContext(ctx)
}

func (e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyUnknownOutputPassingOption)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput {
	return o.ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyPlayReadyUnknownOutputPassingOption) *ContentKeyPolicyPlayReadyUnknownOutputPassingOption {
		return &v
	}).(ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput)
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyPlayReadyUnknownOutputPassingOption) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput) ElementType() reflect.Type {
	return contentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrType
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentKeyPolicyPlayReadyUnknownOutputPassingOption) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput) Elem() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyUnknownOutputPassingOption) ContentKeyPolicyPlayReadyUnknownOutputPassingOption {
		var ret ContentKeyPolicyPlayReadyUnknownOutputPassingOption
		if v != nil {
			ret = *v
		}
		return ret
	}).(ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput)
}

// ContentKeyPolicyPlayReadyUnknownOutputPassingOptionInput is an input type that accepts ContentKeyPolicyPlayReadyUnknownOutputPassingOptionArgs and ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyUnknownOutputPassingOptionInput` via:
//
//          ContentKeyPolicyPlayReadyUnknownOutputPassingOptionArgs{...}
type ContentKeyPolicyPlayReadyUnknownOutputPassingOptionInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput
	ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutputWithContext(context.Context) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput
}

var contentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrType = reflect.TypeOf((**ContentKeyPolicyPlayReadyUnknownOutputPassingOption)(nil)).Elem()

type ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput
	ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutputWithContext(context.Context) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput
}

type contentKeyPolicyPlayReadyUnknownOutputPassingOptionPtr string

func ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtr(v string) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrInput {
	return (*contentKeyPolicyPlayReadyUnknownOutputPassingOptionPtr)(&v)
}

func (*contentKeyPolicyPlayReadyUnknownOutputPassingOptionPtr) ElementType() reflect.Type {
	return contentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrType
}

func (in *contentKeyPolicyPlayReadyUnknownOutputPassingOptionPtr) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput() ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput {
	return pulumi.ToOutput(in).(ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput)
}

func (in *contentKeyPolicyPlayReadyUnknownOutputPassingOptionPtr) ToContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput)
}

// The type of token.
type ContentKeyPolicyRestrictionTokenType string

const (
	// Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version.
	ContentKeyPolicyRestrictionTokenTypeUnknown = ContentKeyPolicyRestrictionTokenType("Unknown")
	// Simple Web Token.
	ContentKeyPolicyRestrictionTokenTypeSwt = ContentKeyPolicyRestrictionTokenType("Swt")
	// JSON Web Token.
	ContentKeyPolicyRestrictionTokenTypeJwt = ContentKeyPolicyRestrictionTokenType("Jwt")
)

func (ContentKeyPolicyRestrictionTokenType) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRestrictionTokenType)(nil)).Elem()
}

func (e ContentKeyPolicyRestrictionTokenType) ToContentKeyPolicyRestrictionTokenTypeOutput() ContentKeyPolicyRestrictionTokenTypeOutput {
	return pulumi.ToOutput(e).(ContentKeyPolicyRestrictionTokenTypeOutput)
}

func (e ContentKeyPolicyRestrictionTokenType) ToContentKeyPolicyRestrictionTokenTypeOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionTokenTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentKeyPolicyRestrictionTokenTypeOutput)
}

func (e ContentKeyPolicyRestrictionTokenType) ToContentKeyPolicyRestrictionTokenTypePtrOutput() ContentKeyPolicyRestrictionTokenTypePtrOutput {
	return e.ToContentKeyPolicyRestrictionTokenTypePtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyRestrictionTokenType) ToContentKeyPolicyRestrictionTokenTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionTokenTypePtrOutput {
	return ContentKeyPolicyRestrictionTokenType(e).ToContentKeyPolicyRestrictionTokenTypeOutputWithContext(ctx).ToContentKeyPolicyRestrictionTokenTypePtrOutputWithContext(ctx)
}

func (e ContentKeyPolicyRestrictionTokenType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyRestrictionTokenType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentKeyPolicyRestrictionTokenType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentKeyPolicyRestrictionTokenType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentKeyPolicyRestrictionTokenTypeOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyRestrictionTokenTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRestrictionTokenType)(nil)).Elem()
}

func (o ContentKeyPolicyRestrictionTokenTypeOutput) ToContentKeyPolicyRestrictionTokenTypeOutput() ContentKeyPolicyRestrictionTokenTypeOutput {
	return o
}

func (o ContentKeyPolicyRestrictionTokenTypeOutput) ToContentKeyPolicyRestrictionTokenTypeOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionTokenTypeOutput {
	return o
}

func (o ContentKeyPolicyRestrictionTokenTypeOutput) ToContentKeyPolicyRestrictionTokenTypePtrOutput() ContentKeyPolicyRestrictionTokenTypePtrOutput {
	return o.ToContentKeyPolicyRestrictionTokenTypePtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyRestrictionTokenTypeOutput) ToContentKeyPolicyRestrictionTokenTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionTokenTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyRestrictionTokenType) *ContentKeyPolicyRestrictionTokenType {
		return &v
	}).(ContentKeyPolicyRestrictionTokenTypePtrOutput)
}

func (o ContentKeyPolicyRestrictionTokenTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentKeyPolicyRestrictionTokenTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyRestrictionTokenType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentKeyPolicyRestrictionTokenTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyRestrictionTokenTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentKeyPolicyRestrictionTokenType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyRestrictionTokenTypePtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyRestrictionTokenTypePtrOutput) ElementType() reflect.Type {
	return contentKeyPolicyRestrictionTokenTypePtrType
}

func (o ContentKeyPolicyRestrictionTokenTypePtrOutput) ToContentKeyPolicyRestrictionTokenTypePtrOutput() ContentKeyPolicyRestrictionTokenTypePtrOutput {
	return o
}

func (o ContentKeyPolicyRestrictionTokenTypePtrOutput) ToContentKeyPolicyRestrictionTokenTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionTokenTypePtrOutput {
	return o
}

func (o ContentKeyPolicyRestrictionTokenTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyRestrictionTokenTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentKeyPolicyRestrictionTokenType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ContentKeyPolicyRestrictionTokenTypePtrOutput) Elem() ContentKeyPolicyRestrictionTokenTypeOutput {
	return o.ApplyT(func(v *ContentKeyPolicyRestrictionTokenType) ContentKeyPolicyRestrictionTokenType {
		var ret ContentKeyPolicyRestrictionTokenType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ContentKeyPolicyRestrictionTokenTypeOutput)
}

// ContentKeyPolicyRestrictionTokenTypeInput is an input type that accepts ContentKeyPolicyRestrictionTokenTypeArgs and ContentKeyPolicyRestrictionTokenTypeOutput values.
// You can construct a concrete instance of `ContentKeyPolicyRestrictionTokenTypeInput` via:
//
//          ContentKeyPolicyRestrictionTokenTypeArgs{...}
type ContentKeyPolicyRestrictionTokenTypeInput interface {
	pulumi.Input

	ToContentKeyPolicyRestrictionTokenTypeOutput() ContentKeyPolicyRestrictionTokenTypeOutput
	ToContentKeyPolicyRestrictionTokenTypeOutputWithContext(context.Context) ContentKeyPolicyRestrictionTokenTypeOutput
}

var contentKeyPolicyRestrictionTokenTypePtrType = reflect.TypeOf((**ContentKeyPolicyRestrictionTokenType)(nil)).Elem()

type ContentKeyPolicyRestrictionTokenTypePtrInput interface {
	pulumi.Input

	ToContentKeyPolicyRestrictionTokenTypePtrOutput() ContentKeyPolicyRestrictionTokenTypePtrOutput
	ToContentKeyPolicyRestrictionTokenTypePtrOutputWithContext(context.Context) ContentKeyPolicyRestrictionTokenTypePtrOutput
}

type contentKeyPolicyRestrictionTokenTypePtr string

func ContentKeyPolicyRestrictionTokenTypePtr(v string) ContentKeyPolicyRestrictionTokenTypePtrInput {
	return (*contentKeyPolicyRestrictionTokenTypePtr)(&v)
}

func (*contentKeyPolicyRestrictionTokenTypePtr) ElementType() reflect.Type {
	return contentKeyPolicyRestrictionTokenTypePtrType
}

func (in *contentKeyPolicyRestrictionTokenTypePtr) ToContentKeyPolicyRestrictionTokenTypePtrOutput() ContentKeyPolicyRestrictionTokenTypePtrOutput {
	return pulumi.ToOutput(in).(ContentKeyPolicyRestrictionTokenTypePtrOutput)
}

func (in *contentKeyPolicyRestrictionTokenTypePtr) ToContentKeyPolicyRestrictionTokenTypePtrOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionTokenTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentKeyPolicyRestrictionTokenTypePtrOutput)
}

// The deinterlacing mode. Defaults to AutoPixelAdaptive.
type DeinterlaceMode string

const (
	// Disables de-interlacing of the source video.
	DeinterlaceModeOff = DeinterlaceMode("Off")
	// Apply automatic pixel adaptive de-interlacing on each frame in the input video.
	DeinterlaceModeAutoPixelAdaptive = DeinterlaceMode("AutoPixelAdaptive")
)

func (DeinterlaceMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceMode)(nil)).Elem()
}

func (e DeinterlaceMode) ToDeinterlaceModeOutput() DeinterlaceModeOutput {
	return pulumi.ToOutput(e).(DeinterlaceModeOutput)
}

func (e DeinterlaceMode) ToDeinterlaceModeOutputWithContext(ctx context.Context) DeinterlaceModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeinterlaceModeOutput)
}

func (e DeinterlaceMode) ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput {
	return e.ToDeinterlaceModePtrOutputWithContext(context.Background())
}

func (e DeinterlaceMode) ToDeinterlaceModePtrOutputWithContext(ctx context.Context) DeinterlaceModePtrOutput {
	return DeinterlaceMode(e).ToDeinterlaceModeOutputWithContext(ctx).ToDeinterlaceModePtrOutputWithContext(ctx)
}

func (e DeinterlaceMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeinterlaceMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeinterlaceMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeinterlaceMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeinterlaceModeOutput struct{ *pulumi.OutputState }

func (DeinterlaceModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceMode)(nil)).Elem()
}

func (o DeinterlaceModeOutput) ToDeinterlaceModeOutput() DeinterlaceModeOutput {
	return o
}

func (o DeinterlaceModeOutput) ToDeinterlaceModeOutputWithContext(ctx context.Context) DeinterlaceModeOutput {
	return o
}

func (o DeinterlaceModeOutput) ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput {
	return o.ToDeinterlaceModePtrOutputWithContext(context.Background())
}

func (o DeinterlaceModeOutput) ToDeinterlaceModePtrOutputWithContext(ctx context.Context) DeinterlaceModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeinterlaceMode) *DeinterlaceMode {
		return &v
	}).(DeinterlaceModePtrOutput)
}

func (o DeinterlaceModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeinterlaceModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeinterlaceMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeinterlaceModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeinterlaceModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeinterlaceMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeinterlaceModePtrOutput struct{ *pulumi.OutputState }

func (DeinterlaceModePtrOutput) ElementType() reflect.Type {
	return deinterlaceModePtrType
}

func (o DeinterlaceModePtrOutput) ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput {
	return o
}

func (o DeinterlaceModePtrOutput) ToDeinterlaceModePtrOutputWithContext(ctx context.Context) DeinterlaceModePtrOutput {
	return o
}

func (o DeinterlaceModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeinterlaceModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeinterlaceMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o DeinterlaceModePtrOutput) Elem() DeinterlaceModeOutput {
	return o.ApplyT(func(v *DeinterlaceMode) DeinterlaceMode {
		var ret DeinterlaceMode
		if v != nil {
			ret = *v
		}
		return ret
	}).(DeinterlaceModeOutput)
}

// DeinterlaceModeInput is an input type that accepts DeinterlaceModeArgs and DeinterlaceModeOutput values.
// You can construct a concrete instance of `DeinterlaceModeInput` via:
//
//          DeinterlaceModeArgs{...}
type DeinterlaceModeInput interface {
	pulumi.Input

	ToDeinterlaceModeOutput() DeinterlaceModeOutput
	ToDeinterlaceModeOutputWithContext(context.Context) DeinterlaceModeOutput
}

var deinterlaceModePtrType = reflect.TypeOf((**DeinterlaceMode)(nil)).Elem()

type DeinterlaceModePtrInput interface {
	pulumi.Input

	ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput
	ToDeinterlaceModePtrOutputWithContext(context.Context) DeinterlaceModePtrOutput
}

type deinterlaceModePtr string

func DeinterlaceModePtr(v string) DeinterlaceModePtrInput {
	return (*deinterlaceModePtr)(&v)
}

func (*deinterlaceModePtr) ElementType() reflect.Type {
	return deinterlaceModePtrType
}

func (in *deinterlaceModePtr) ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput {
	return pulumi.ToOutput(in).(DeinterlaceModePtrOutput)
}

func (in *deinterlaceModePtr) ToDeinterlaceModePtrOutputWithContext(ctx context.Context) DeinterlaceModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeinterlaceModePtrOutput)
}

// The field parity for de-interlacing, defaults to Auto.
type DeinterlaceParity string

const (
	// Automatically detect the order of fields
	DeinterlaceParityAuto = DeinterlaceParity("Auto")
	// Apply top field first processing of input video.
	DeinterlaceParityTopFieldFirst = DeinterlaceParity("TopFieldFirst")
	// Apply bottom field first processing of input video.
	DeinterlaceParityBottomFieldFirst = DeinterlaceParity("BottomFieldFirst")
)

func (DeinterlaceParity) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceParity)(nil)).Elem()
}

func (e DeinterlaceParity) ToDeinterlaceParityOutput() DeinterlaceParityOutput {
	return pulumi.ToOutput(e).(DeinterlaceParityOutput)
}

func (e DeinterlaceParity) ToDeinterlaceParityOutputWithContext(ctx context.Context) DeinterlaceParityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeinterlaceParityOutput)
}

func (e DeinterlaceParity) ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput {
	return e.ToDeinterlaceParityPtrOutputWithContext(context.Background())
}

func (e DeinterlaceParity) ToDeinterlaceParityPtrOutputWithContext(ctx context.Context) DeinterlaceParityPtrOutput {
	return DeinterlaceParity(e).ToDeinterlaceParityOutputWithContext(ctx).ToDeinterlaceParityPtrOutputWithContext(ctx)
}

func (e DeinterlaceParity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeinterlaceParity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeinterlaceParity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeinterlaceParity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeinterlaceParityOutput struct{ *pulumi.OutputState }

func (DeinterlaceParityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceParity)(nil)).Elem()
}

func (o DeinterlaceParityOutput) ToDeinterlaceParityOutput() DeinterlaceParityOutput {
	return o
}

func (o DeinterlaceParityOutput) ToDeinterlaceParityOutputWithContext(ctx context.Context) DeinterlaceParityOutput {
	return o
}

func (o DeinterlaceParityOutput) ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput {
	return o.ToDeinterlaceParityPtrOutputWithContext(context.Background())
}

func (o DeinterlaceParityOutput) ToDeinterlaceParityPtrOutputWithContext(ctx context.Context) DeinterlaceParityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeinterlaceParity) *DeinterlaceParity {
		return &v
	}).(DeinterlaceParityPtrOutput)
}

func (o DeinterlaceParityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeinterlaceParityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeinterlaceParity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeinterlaceParityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeinterlaceParityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeinterlaceParity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeinterlaceParityPtrOutput struct{ *pulumi.OutputState }

func (DeinterlaceParityPtrOutput) ElementType() reflect.Type {
	return deinterlaceParityPtrType
}

func (o DeinterlaceParityPtrOutput) ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput {
	return o
}

func (o DeinterlaceParityPtrOutput) ToDeinterlaceParityPtrOutputWithContext(ctx context.Context) DeinterlaceParityPtrOutput {
	return o
}

func (o DeinterlaceParityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeinterlaceParityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeinterlaceParity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o DeinterlaceParityPtrOutput) Elem() DeinterlaceParityOutput {
	return o.ApplyT(func(v *DeinterlaceParity) DeinterlaceParity {
		var ret DeinterlaceParity
		if v != nil {
			ret = *v
		}
		return ret
	}).(DeinterlaceParityOutput)
}

// DeinterlaceParityInput is an input type that accepts DeinterlaceParityArgs and DeinterlaceParityOutput values.
// You can construct a concrete instance of `DeinterlaceParityInput` via:
//
//          DeinterlaceParityArgs{...}
type DeinterlaceParityInput interface {
	pulumi.Input

	ToDeinterlaceParityOutput() DeinterlaceParityOutput
	ToDeinterlaceParityOutputWithContext(context.Context) DeinterlaceParityOutput
}

var deinterlaceParityPtrType = reflect.TypeOf((**DeinterlaceParity)(nil)).Elem()

type DeinterlaceParityPtrInput interface {
	pulumi.Input

	ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput
	ToDeinterlaceParityPtrOutputWithContext(context.Context) DeinterlaceParityPtrOutput
}

type deinterlaceParityPtr string

func DeinterlaceParityPtr(v string) DeinterlaceParityPtrInput {
	return (*deinterlaceParityPtr)(&v)
}

func (*deinterlaceParityPtr) ElementType() reflect.Type {
	return deinterlaceParityPtrType
}

func (in *deinterlaceParityPtr) ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput {
	return pulumi.ToOutput(in).(DeinterlaceParityPtrOutput)
}

func (in *deinterlaceParityPtr) ToDeinterlaceParityPtrOutputWithContext(ctx context.Context) DeinterlaceParityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeinterlaceParityPtrOutput)
}

// The built-in preset to be used for encoding videos.
type EncoderNamedPreset string

const (
	// Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH264SingleBitrateSD = EncoderNamedPreset("H264SingleBitrateSD")
	// Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH264SingleBitrate720p = EncoderNamedPreset("H264SingleBitrate720p")
	// Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH264SingleBitrate1080p = EncoderNamedPreset("H264SingleBitrate1080p")
	// Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best.
	EncoderNamedPresetAdaptiveStreaming = EncoderNamedPreset("AdaptiveStreaming")
	// Produces a single MP4 file containing only stereo audio encoded at 192 kbps.
	EncoderNamedPresetAACGoodQualityAudio = EncoderNamedPreset("AACGoodQualityAudio")
	// Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved.
	EncoderNamedPresetContentAwareEncodingExperimental = EncoderNamedPreset("ContentAwareEncodingExperimental")
	// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved.
	EncoderNamedPresetContentAwareEncoding = EncoderNamedPreset("ContentAwareEncoding")
	// Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed.
	EncoderNamedPresetCopyAllBitrateNonInterleaved = EncoderNamedPreset("CopyAllBitrateNonInterleaved")
	// Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 180p.
	EncoderNamedPresetH264MultipleBitrate1080p = EncoderNamedPreset("H264MultipleBitrate1080p")
	// Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 180p.
	EncoderNamedPresetH264MultipleBitrate720p = EncoderNamedPreset("H264MultipleBitrate720p")
	// Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 240p.
	EncoderNamedPresetH264MultipleBitrateSD = EncoderNamedPreset("H264MultipleBitrateSD")
	// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved.
	EncoderNamedPresetH265ContentAwareEncoding = EncoderNamedPreset("H265ContentAwareEncoding")
	// Produces a set of GOP aligned MP4 files with H.265 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best.
	EncoderNamedPresetH265AdaptiveStreaming = EncoderNamedPreset("H265AdaptiveStreaming")
	// Produces an MP4 file where the video is encoded with H.265 codec at 1800 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH265SingleBitrate720p = EncoderNamedPreset("H265SingleBitrate720p")
	// Produces an MP4 file where the video is encoded with H.265 codec at 3500 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH265SingleBitrate1080p = EncoderNamedPreset("H265SingleBitrate1080p")
	// Produces an MP4 file where the video is encoded with H.265 codec at 9500 kbps and a picture height of 2160 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH265SingleBitrate4K = EncoderNamedPreset("H265SingleBitrate4K")
)

func (EncoderNamedPreset) ElementType() reflect.Type {
	return reflect.TypeOf((*EncoderNamedPreset)(nil)).Elem()
}

func (e EncoderNamedPreset) ToEncoderNamedPresetOutput() EncoderNamedPresetOutput {
	return pulumi.ToOutput(e).(EncoderNamedPresetOutput)
}

func (e EncoderNamedPreset) ToEncoderNamedPresetOutputWithContext(ctx context.Context) EncoderNamedPresetOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EncoderNamedPresetOutput)
}

func (e EncoderNamedPreset) ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput {
	return e.ToEncoderNamedPresetPtrOutputWithContext(context.Background())
}

func (e EncoderNamedPreset) ToEncoderNamedPresetPtrOutputWithContext(ctx context.Context) EncoderNamedPresetPtrOutput {
	return EncoderNamedPreset(e).ToEncoderNamedPresetOutputWithContext(ctx).ToEncoderNamedPresetPtrOutputWithContext(ctx)
}

func (e EncoderNamedPreset) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EncoderNamedPreset) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EncoderNamedPreset) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EncoderNamedPreset) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EncoderNamedPresetOutput struct{ *pulumi.OutputState }

func (EncoderNamedPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncoderNamedPreset)(nil)).Elem()
}

func (o EncoderNamedPresetOutput) ToEncoderNamedPresetOutput() EncoderNamedPresetOutput {
	return o
}

func (o EncoderNamedPresetOutput) ToEncoderNamedPresetOutputWithContext(ctx context.Context) EncoderNamedPresetOutput {
	return o
}

func (o EncoderNamedPresetOutput) ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput {
	return o.ToEncoderNamedPresetPtrOutputWithContext(context.Background())
}

func (o EncoderNamedPresetOutput) ToEncoderNamedPresetPtrOutputWithContext(ctx context.Context) EncoderNamedPresetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncoderNamedPreset) *EncoderNamedPreset {
		return &v
	}).(EncoderNamedPresetPtrOutput)
}

func (o EncoderNamedPresetOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EncoderNamedPresetOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EncoderNamedPreset) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EncoderNamedPresetOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EncoderNamedPresetOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EncoderNamedPreset) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EncoderNamedPresetPtrOutput struct{ *pulumi.OutputState }

func (EncoderNamedPresetPtrOutput) ElementType() reflect.Type {
	return encoderNamedPresetPtrType
}

func (o EncoderNamedPresetPtrOutput) ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput {
	return o
}

func (o EncoderNamedPresetPtrOutput) ToEncoderNamedPresetPtrOutputWithContext(ctx context.Context) EncoderNamedPresetPtrOutput {
	return o
}

func (o EncoderNamedPresetPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EncoderNamedPresetPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EncoderNamedPreset) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o EncoderNamedPresetPtrOutput) Elem() EncoderNamedPresetOutput {
	return o.ApplyT(func(v *EncoderNamedPreset) EncoderNamedPreset {
		var ret EncoderNamedPreset
		if v != nil {
			ret = *v
		}
		return ret
	}).(EncoderNamedPresetOutput)
}

// EncoderNamedPresetInput is an input type that accepts EncoderNamedPresetArgs and EncoderNamedPresetOutput values.
// You can construct a concrete instance of `EncoderNamedPresetInput` via:
//
//          EncoderNamedPresetArgs{...}
type EncoderNamedPresetInput interface {
	pulumi.Input

	ToEncoderNamedPresetOutput() EncoderNamedPresetOutput
	ToEncoderNamedPresetOutputWithContext(context.Context) EncoderNamedPresetOutput
}

var encoderNamedPresetPtrType = reflect.TypeOf((**EncoderNamedPreset)(nil)).Elem()

type EncoderNamedPresetPtrInput interface {
	pulumi.Input

	ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput
	ToEncoderNamedPresetPtrOutputWithContext(context.Context) EncoderNamedPresetPtrOutput
}

type encoderNamedPresetPtr string

func EncoderNamedPresetPtr(v string) EncoderNamedPresetPtrInput {
	return (*encoderNamedPresetPtr)(&v)
}

func (*encoderNamedPresetPtr) ElementType() reflect.Type {
	return encoderNamedPresetPtrType
}

func (in *encoderNamedPresetPtr) ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput {
	return pulumi.ToOutput(in).(EncoderNamedPresetPtrOutput)
}

func (in *encoderNamedPresetPtr) ToEncoderNamedPresetPtrOutputWithContext(ctx context.Context) EncoderNamedPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EncoderNamedPresetPtrOutput)
}

// The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
type EntropyMode string

const (
	// Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding.
	EntropyModeCabac = EntropyMode("Cabac")
	// Context Adaptive Variable Length Coder (CAVLC) entropy encoding.
	EntropyModeCavlc = EntropyMode("Cavlc")
)

func (EntropyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*EntropyMode)(nil)).Elem()
}

func (e EntropyMode) ToEntropyModeOutput() EntropyModeOutput {
	return pulumi.ToOutput(e).(EntropyModeOutput)
}

func (e EntropyMode) ToEntropyModeOutputWithContext(ctx context.Context) EntropyModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EntropyModeOutput)
}

func (e EntropyMode) ToEntropyModePtrOutput() EntropyModePtrOutput {
	return e.ToEntropyModePtrOutputWithContext(context.Background())
}

func (e EntropyMode) ToEntropyModePtrOutputWithContext(ctx context.Context) EntropyModePtrOutput {
	return EntropyMode(e).ToEntropyModeOutputWithContext(ctx).ToEntropyModePtrOutputWithContext(ctx)
}

func (e EntropyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntropyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntropyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EntropyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EntropyModeOutput struct{ *pulumi.OutputState }

func (EntropyModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntropyMode)(nil)).Elem()
}

func (o EntropyModeOutput) ToEntropyModeOutput() EntropyModeOutput {
	return o
}

func (o EntropyModeOutput) ToEntropyModeOutputWithContext(ctx context.Context) EntropyModeOutput {
	return o
}

func (o EntropyModeOutput) ToEntropyModePtrOutput() EntropyModePtrOutput {
	return o.ToEntropyModePtrOutputWithContext(context.Background())
}

func (o EntropyModeOutput) ToEntropyModePtrOutputWithContext(ctx context.Context) EntropyModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntropyMode) *EntropyMode {
		return &v
	}).(EntropyModePtrOutput)
}

func (o EntropyModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EntropyModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntropyMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EntropyModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntropyModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntropyMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EntropyModePtrOutput struct{ *pulumi.OutputState }

func (EntropyModePtrOutput) ElementType() reflect.Type {
	return entropyModePtrType
}

func (o EntropyModePtrOutput) ToEntropyModePtrOutput() EntropyModePtrOutput {
	return o
}

func (o EntropyModePtrOutput) ToEntropyModePtrOutputWithContext(ctx context.Context) EntropyModePtrOutput {
	return o
}

func (o EntropyModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntropyModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EntropyMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o EntropyModePtrOutput) Elem() EntropyModeOutput {
	return o.ApplyT(func(v *EntropyMode) EntropyMode {
		var ret EntropyMode
		if v != nil {
			ret = *v
		}
		return ret
	}).(EntropyModeOutput)
}

// EntropyModeInput is an input type that accepts EntropyModeArgs and EntropyModeOutput values.
// You can construct a concrete instance of `EntropyModeInput` via:
//
//          EntropyModeArgs{...}
type EntropyModeInput interface {
	pulumi.Input

	ToEntropyModeOutput() EntropyModeOutput
	ToEntropyModeOutputWithContext(context.Context) EntropyModeOutput
}

var entropyModePtrType = reflect.TypeOf((**EntropyMode)(nil)).Elem()

type EntropyModePtrInput interface {
	pulumi.Input

	ToEntropyModePtrOutput() EntropyModePtrOutput
	ToEntropyModePtrOutputWithContext(context.Context) EntropyModePtrOutput
}

type entropyModePtr string

func EntropyModePtr(v string) EntropyModePtrInput {
	return (*entropyModePtr)(&v)
}

func (*entropyModePtr) ElementType() reflect.Type {
	return entropyModePtrType
}

func (in *entropyModePtr) ToEntropyModePtrOutput() EntropyModePtrOutput {
	return pulumi.ToOutput(in).(EntropyModePtrOutput)
}

func (in *entropyModePtr) ToEntropyModePtrOutputWithContext(ctx context.Context) EntropyModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EntropyModePtrOutput)
}

// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction.
type FaceRedactorMode string

const (
	// Analyze mode detects faces and outputs a metadata file with the results. Allows editing of the metadata file before faces are blurred with Redact mode.
	FaceRedactorModeAnalyze = FaceRedactorMode("Analyze")
	// Redact mode consumes the metadata file from Analyze mode and redacts the faces found.
	FaceRedactorModeRedact = FaceRedactorMode("Redact")
	// Combined mode does the Analyze and Redact steps in one pass when editing the analyzed faces is not desired.
	FaceRedactorModeCombined = FaceRedactorMode("Combined")
)

func (FaceRedactorMode) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceRedactorMode)(nil)).Elem()
}

func (e FaceRedactorMode) ToFaceRedactorModeOutput() FaceRedactorModeOutput {
	return pulumi.ToOutput(e).(FaceRedactorModeOutput)
}

func (e FaceRedactorMode) ToFaceRedactorModeOutputWithContext(ctx context.Context) FaceRedactorModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FaceRedactorModeOutput)
}

func (e FaceRedactorMode) ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput {
	return e.ToFaceRedactorModePtrOutputWithContext(context.Background())
}

func (e FaceRedactorMode) ToFaceRedactorModePtrOutputWithContext(ctx context.Context) FaceRedactorModePtrOutput {
	return FaceRedactorMode(e).ToFaceRedactorModeOutputWithContext(ctx).ToFaceRedactorModePtrOutputWithContext(ctx)
}

func (e FaceRedactorMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FaceRedactorMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FaceRedactorMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FaceRedactorMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FaceRedactorModeOutput struct{ *pulumi.OutputState }

func (FaceRedactorModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceRedactorMode)(nil)).Elem()
}

func (o FaceRedactorModeOutput) ToFaceRedactorModeOutput() FaceRedactorModeOutput {
	return o
}

func (o FaceRedactorModeOutput) ToFaceRedactorModeOutputWithContext(ctx context.Context) FaceRedactorModeOutput {
	return o
}

func (o FaceRedactorModeOutput) ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput {
	return o.ToFaceRedactorModePtrOutputWithContext(context.Background())
}

func (o FaceRedactorModeOutput) ToFaceRedactorModePtrOutputWithContext(ctx context.Context) FaceRedactorModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FaceRedactorMode) *FaceRedactorMode {
		return &v
	}).(FaceRedactorModePtrOutput)
}

func (o FaceRedactorModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FaceRedactorModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FaceRedactorMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FaceRedactorModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FaceRedactorModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FaceRedactorMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FaceRedactorModePtrOutput struct{ *pulumi.OutputState }

func (FaceRedactorModePtrOutput) ElementType() reflect.Type {
	return faceRedactorModePtrType
}

func (o FaceRedactorModePtrOutput) ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput {
	return o
}

func (o FaceRedactorModePtrOutput) ToFaceRedactorModePtrOutputWithContext(ctx context.Context) FaceRedactorModePtrOutput {
	return o
}

func (o FaceRedactorModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FaceRedactorModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FaceRedactorMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o FaceRedactorModePtrOutput) Elem() FaceRedactorModeOutput {
	return o.ApplyT(func(v *FaceRedactorMode) FaceRedactorMode {
		var ret FaceRedactorMode
		if v != nil {
			ret = *v
		}
		return ret
	}).(FaceRedactorModeOutput)
}

// FaceRedactorModeInput is an input type that accepts FaceRedactorModeArgs and FaceRedactorModeOutput values.
// You can construct a concrete instance of `FaceRedactorModeInput` via:
//
//          FaceRedactorModeArgs{...}
type FaceRedactorModeInput interface {
	pulumi.Input

	ToFaceRedactorModeOutput() FaceRedactorModeOutput
	ToFaceRedactorModeOutputWithContext(context.Context) FaceRedactorModeOutput
}

var faceRedactorModePtrType = reflect.TypeOf((**FaceRedactorMode)(nil)).Elem()

type FaceRedactorModePtrInput interface {
	pulumi.Input

	ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput
	ToFaceRedactorModePtrOutputWithContext(context.Context) FaceRedactorModePtrOutput
}

type faceRedactorModePtr string

func FaceRedactorModePtr(v string) FaceRedactorModePtrInput {
	return (*faceRedactorModePtr)(&v)
}

func (*faceRedactorModePtr) ElementType() reflect.Type {
	return faceRedactorModePtrType
}

func (in *faceRedactorModePtr) ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput {
	return pulumi.ToOutput(in).(FaceRedactorModePtrOutput)
}

func (in *faceRedactorModePtr) ToFaceRedactorModePtrOutputWithContext(ctx context.Context) FaceRedactorModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FaceRedactorModePtrOutput)
}

// The track property condition operation.
type FilterTrackPropertyCompareOperation string

const (
	// The equal operation.
	FilterTrackPropertyCompareOperationEqual = FilterTrackPropertyCompareOperation("Equal")
	// The not equal operation.
	FilterTrackPropertyCompareOperationNotEqual = FilterTrackPropertyCompareOperation("NotEqual")
)

func (FilterTrackPropertyCompareOperation) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyCompareOperation)(nil)).Elem()
}

func (e FilterTrackPropertyCompareOperation) ToFilterTrackPropertyCompareOperationOutput() FilterTrackPropertyCompareOperationOutput {
	return pulumi.ToOutput(e).(FilterTrackPropertyCompareOperationOutput)
}

func (e FilterTrackPropertyCompareOperation) ToFilterTrackPropertyCompareOperationOutputWithContext(ctx context.Context) FilterTrackPropertyCompareOperationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FilterTrackPropertyCompareOperationOutput)
}

func (e FilterTrackPropertyCompareOperation) ToFilterTrackPropertyCompareOperationPtrOutput() FilterTrackPropertyCompareOperationPtrOutput {
	return e.ToFilterTrackPropertyCompareOperationPtrOutputWithContext(context.Background())
}

func (e FilterTrackPropertyCompareOperation) ToFilterTrackPropertyCompareOperationPtrOutputWithContext(ctx context.Context) FilterTrackPropertyCompareOperationPtrOutput {
	return FilterTrackPropertyCompareOperation(e).ToFilterTrackPropertyCompareOperationOutputWithContext(ctx).ToFilterTrackPropertyCompareOperationPtrOutputWithContext(ctx)
}

func (e FilterTrackPropertyCompareOperation) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FilterTrackPropertyCompareOperation) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FilterTrackPropertyCompareOperation) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FilterTrackPropertyCompareOperation) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FilterTrackPropertyCompareOperationOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyCompareOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyCompareOperation)(nil)).Elem()
}

func (o FilterTrackPropertyCompareOperationOutput) ToFilterTrackPropertyCompareOperationOutput() FilterTrackPropertyCompareOperationOutput {
	return o
}

func (o FilterTrackPropertyCompareOperationOutput) ToFilterTrackPropertyCompareOperationOutputWithContext(ctx context.Context) FilterTrackPropertyCompareOperationOutput {
	return o
}

func (o FilterTrackPropertyCompareOperationOutput) ToFilterTrackPropertyCompareOperationPtrOutput() FilterTrackPropertyCompareOperationPtrOutput {
	return o.ToFilterTrackPropertyCompareOperationPtrOutputWithContext(context.Background())
}

func (o FilterTrackPropertyCompareOperationOutput) ToFilterTrackPropertyCompareOperationPtrOutputWithContext(ctx context.Context) FilterTrackPropertyCompareOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FilterTrackPropertyCompareOperation) *FilterTrackPropertyCompareOperation {
		return &v
	}).(FilterTrackPropertyCompareOperationPtrOutput)
}

func (o FilterTrackPropertyCompareOperationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FilterTrackPropertyCompareOperationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FilterTrackPropertyCompareOperation) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FilterTrackPropertyCompareOperationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FilterTrackPropertyCompareOperationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FilterTrackPropertyCompareOperation) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FilterTrackPropertyCompareOperationPtrOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyCompareOperationPtrOutput) ElementType() reflect.Type {
	return filterTrackPropertyCompareOperationPtrType
}

func (o FilterTrackPropertyCompareOperationPtrOutput) ToFilterTrackPropertyCompareOperationPtrOutput() FilterTrackPropertyCompareOperationPtrOutput {
	return o
}

func (o FilterTrackPropertyCompareOperationPtrOutput) ToFilterTrackPropertyCompareOperationPtrOutputWithContext(ctx context.Context) FilterTrackPropertyCompareOperationPtrOutput {
	return o
}

func (o FilterTrackPropertyCompareOperationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FilterTrackPropertyCompareOperationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FilterTrackPropertyCompareOperation) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o FilterTrackPropertyCompareOperationPtrOutput) Elem() FilterTrackPropertyCompareOperationOutput {
	return o.ApplyT(func(v *FilterTrackPropertyCompareOperation) FilterTrackPropertyCompareOperation {
		var ret FilterTrackPropertyCompareOperation
		if v != nil {
			ret = *v
		}
		return ret
	}).(FilterTrackPropertyCompareOperationOutput)
}

// FilterTrackPropertyCompareOperationInput is an input type that accepts FilterTrackPropertyCompareOperationArgs and FilterTrackPropertyCompareOperationOutput values.
// You can construct a concrete instance of `FilterTrackPropertyCompareOperationInput` via:
//
//          FilterTrackPropertyCompareOperationArgs{...}
type FilterTrackPropertyCompareOperationInput interface {
	pulumi.Input

	ToFilterTrackPropertyCompareOperationOutput() FilterTrackPropertyCompareOperationOutput
	ToFilterTrackPropertyCompareOperationOutputWithContext(context.Context) FilterTrackPropertyCompareOperationOutput
}

var filterTrackPropertyCompareOperationPtrType = reflect.TypeOf((**FilterTrackPropertyCompareOperation)(nil)).Elem()

type FilterTrackPropertyCompareOperationPtrInput interface {
	pulumi.Input

	ToFilterTrackPropertyCompareOperationPtrOutput() FilterTrackPropertyCompareOperationPtrOutput
	ToFilterTrackPropertyCompareOperationPtrOutputWithContext(context.Context) FilterTrackPropertyCompareOperationPtrOutput
}

type filterTrackPropertyCompareOperationPtr string

func FilterTrackPropertyCompareOperationPtr(v string) FilterTrackPropertyCompareOperationPtrInput {
	return (*filterTrackPropertyCompareOperationPtr)(&v)
}

func (*filterTrackPropertyCompareOperationPtr) ElementType() reflect.Type {
	return filterTrackPropertyCompareOperationPtrType
}

func (in *filterTrackPropertyCompareOperationPtr) ToFilterTrackPropertyCompareOperationPtrOutput() FilterTrackPropertyCompareOperationPtrOutput {
	return pulumi.ToOutput(in).(FilterTrackPropertyCompareOperationPtrOutput)
}

func (in *filterTrackPropertyCompareOperationPtr) ToFilterTrackPropertyCompareOperationPtrOutputWithContext(ctx context.Context) FilterTrackPropertyCompareOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FilterTrackPropertyCompareOperationPtrOutput)
}

// The track property type.
type FilterTrackPropertyType string

const (
	// The unknown track property type.
	FilterTrackPropertyTypeUnknown = FilterTrackPropertyType("Unknown")
	// The type.
	FilterTrackPropertyTypeType = FilterTrackPropertyType("Type")
	// The name.
	FilterTrackPropertyTypeName = FilterTrackPropertyType("Name")
	// The language.
	FilterTrackPropertyTypeLanguage = FilterTrackPropertyType("Language")
	// The fourCC.
	FilterTrackPropertyTypeFourCC = FilterTrackPropertyType("FourCC")
	// The bitrate.
	FilterTrackPropertyTypeBitrate = FilterTrackPropertyType("Bitrate")
)

func (FilterTrackPropertyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyType)(nil)).Elem()
}

func (e FilterTrackPropertyType) ToFilterTrackPropertyTypeOutput() FilterTrackPropertyTypeOutput {
	return pulumi.ToOutput(e).(FilterTrackPropertyTypeOutput)
}

func (e FilterTrackPropertyType) ToFilterTrackPropertyTypeOutputWithContext(ctx context.Context) FilterTrackPropertyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FilterTrackPropertyTypeOutput)
}

func (e FilterTrackPropertyType) ToFilterTrackPropertyTypePtrOutput() FilterTrackPropertyTypePtrOutput {
	return e.ToFilterTrackPropertyTypePtrOutputWithContext(context.Background())
}

func (e FilterTrackPropertyType) ToFilterTrackPropertyTypePtrOutputWithContext(ctx context.Context) FilterTrackPropertyTypePtrOutput {
	return FilterTrackPropertyType(e).ToFilterTrackPropertyTypeOutputWithContext(ctx).ToFilterTrackPropertyTypePtrOutputWithContext(ctx)
}

func (e FilterTrackPropertyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FilterTrackPropertyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FilterTrackPropertyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FilterTrackPropertyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FilterTrackPropertyTypeOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyType)(nil)).Elem()
}

func (o FilterTrackPropertyTypeOutput) ToFilterTrackPropertyTypeOutput() FilterTrackPropertyTypeOutput {
	return o
}

func (o FilterTrackPropertyTypeOutput) ToFilterTrackPropertyTypeOutputWithContext(ctx context.Context) FilterTrackPropertyTypeOutput {
	return o
}

func (o FilterTrackPropertyTypeOutput) ToFilterTrackPropertyTypePtrOutput() FilterTrackPropertyTypePtrOutput {
	return o.ToFilterTrackPropertyTypePtrOutputWithContext(context.Background())
}

func (o FilterTrackPropertyTypeOutput) ToFilterTrackPropertyTypePtrOutputWithContext(ctx context.Context) FilterTrackPropertyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FilterTrackPropertyType) *FilterTrackPropertyType {
		return &v
	}).(FilterTrackPropertyTypePtrOutput)
}

func (o FilterTrackPropertyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FilterTrackPropertyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FilterTrackPropertyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FilterTrackPropertyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FilterTrackPropertyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FilterTrackPropertyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FilterTrackPropertyTypePtrOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyTypePtrOutput) ElementType() reflect.Type {
	return filterTrackPropertyTypePtrType
}

func (o FilterTrackPropertyTypePtrOutput) ToFilterTrackPropertyTypePtrOutput() FilterTrackPropertyTypePtrOutput {
	return o
}

func (o FilterTrackPropertyTypePtrOutput) ToFilterTrackPropertyTypePtrOutputWithContext(ctx context.Context) FilterTrackPropertyTypePtrOutput {
	return o
}

func (o FilterTrackPropertyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FilterTrackPropertyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FilterTrackPropertyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o FilterTrackPropertyTypePtrOutput) Elem() FilterTrackPropertyTypeOutput {
	return o.ApplyT(func(v *FilterTrackPropertyType) FilterTrackPropertyType {
		var ret FilterTrackPropertyType
		if v != nil {
			ret = *v
		}
		return ret
	}).(FilterTrackPropertyTypeOutput)
}

// FilterTrackPropertyTypeInput is an input type that accepts FilterTrackPropertyTypeArgs and FilterTrackPropertyTypeOutput values.
// You can construct a concrete instance of `FilterTrackPropertyTypeInput` via:
//
//          FilterTrackPropertyTypeArgs{...}
type FilterTrackPropertyTypeInput interface {
	pulumi.Input

	ToFilterTrackPropertyTypeOutput() FilterTrackPropertyTypeOutput
	ToFilterTrackPropertyTypeOutputWithContext(context.Context) FilterTrackPropertyTypeOutput
}

var filterTrackPropertyTypePtrType = reflect.TypeOf((**FilterTrackPropertyType)(nil)).Elem()

type FilterTrackPropertyTypePtrInput interface {
	pulumi.Input

	ToFilterTrackPropertyTypePtrOutput() FilterTrackPropertyTypePtrOutput
	ToFilterTrackPropertyTypePtrOutputWithContext(context.Context) FilterTrackPropertyTypePtrOutput
}

type filterTrackPropertyTypePtr string

func FilterTrackPropertyTypePtr(v string) FilterTrackPropertyTypePtrInput {
	return (*filterTrackPropertyTypePtr)(&v)
}

func (*filterTrackPropertyTypePtr) ElementType() reflect.Type {
	return filterTrackPropertyTypePtrType
}

func (in *filterTrackPropertyTypePtr) ToFilterTrackPropertyTypePtrOutput() FilterTrackPropertyTypePtrOutput {
	return pulumi.ToOutput(in).(FilterTrackPropertyTypePtrOutput)
}

func (in *filterTrackPropertyTypePtr) ToFilterTrackPropertyTypePtrOutputWithContext(ctx context.Context) FilterTrackPropertyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FilterTrackPropertyTypePtrOutput)
}

// Tells the encoder how to choose its encoding settings. The default value is Balanced.
type H264Complexity string

const (
	// Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time.
	H264ComplexitySpeed = H264Complexity("Speed")
	// Tells the encoder to use settings that achieve a balance between speed and quality.
	H264ComplexityBalanced = H264Complexity("Balanced")
	// Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
	H264ComplexityQuality = H264Complexity("Quality")
)

func (H264Complexity) ElementType() reflect.Type {
	return reflect.TypeOf((*H264Complexity)(nil)).Elem()
}

func (e H264Complexity) ToH264ComplexityOutput() H264ComplexityOutput {
	return pulumi.ToOutput(e).(H264ComplexityOutput)
}

func (e H264Complexity) ToH264ComplexityOutputWithContext(ctx context.Context) H264ComplexityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H264ComplexityOutput)
}

func (e H264Complexity) ToH264ComplexityPtrOutput() H264ComplexityPtrOutput {
	return e.ToH264ComplexityPtrOutputWithContext(context.Background())
}

func (e H264Complexity) ToH264ComplexityPtrOutputWithContext(ctx context.Context) H264ComplexityPtrOutput {
	return H264Complexity(e).ToH264ComplexityOutputWithContext(ctx).ToH264ComplexityPtrOutputWithContext(ctx)
}

func (e H264Complexity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264Complexity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264Complexity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H264Complexity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H264ComplexityOutput struct{ *pulumi.OutputState }

func (H264ComplexityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H264Complexity)(nil)).Elem()
}

func (o H264ComplexityOutput) ToH264ComplexityOutput() H264ComplexityOutput {
	return o
}

func (o H264ComplexityOutput) ToH264ComplexityOutputWithContext(ctx context.Context) H264ComplexityOutput {
	return o
}

func (o H264ComplexityOutput) ToH264ComplexityPtrOutput() H264ComplexityPtrOutput {
	return o.ToH264ComplexityPtrOutputWithContext(context.Background())
}

func (o H264ComplexityOutput) ToH264ComplexityPtrOutputWithContext(ctx context.Context) H264ComplexityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H264Complexity) *H264Complexity {
		return &v
	}).(H264ComplexityPtrOutput)
}

func (o H264ComplexityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H264ComplexityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264Complexity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H264ComplexityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264ComplexityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264Complexity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H264ComplexityPtrOutput struct{ *pulumi.OutputState }

func (H264ComplexityPtrOutput) ElementType() reflect.Type {
	return h264complexityPtrType
}

func (o H264ComplexityPtrOutput) ToH264ComplexityPtrOutput() H264ComplexityPtrOutput {
	return o
}

func (o H264ComplexityPtrOutput) ToH264ComplexityPtrOutputWithContext(ctx context.Context) H264ComplexityPtrOutput {
	return o
}

func (o H264ComplexityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264ComplexityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H264Complexity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o H264ComplexityPtrOutput) Elem() H264ComplexityOutput {
	return o.ApplyT(func(v *H264Complexity) H264Complexity {
		var ret H264Complexity
		if v != nil {
			ret = *v
		}
		return ret
	}).(H264ComplexityOutput)
}

// H264ComplexityInput is an input type that accepts H264ComplexityArgs and H264ComplexityOutput values.
// You can construct a concrete instance of `H264ComplexityInput` via:
//
//          H264ComplexityArgs{...}
type H264ComplexityInput interface {
	pulumi.Input

	ToH264ComplexityOutput() H264ComplexityOutput
	ToH264ComplexityOutputWithContext(context.Context) H264ComplexityOutput
}

var h264complexityPtrType = reflect.TypeOf((**H264Complexity)(nil)).Elem()

type H264ComplexityPtrInput interface {
	pulumi.Input

	ToH264ComplexityPtrOutput() H264ComplexityPtrOutput
	ToH264ComplexityPtrOutputWithContext(context.Context) H264ComplexityPtrOutput
}

type h264complexityPtr string

func H264ComplexityPtr(v string) H264ComplexityPtrInput {
	return (*h264complexityPtr)(&v)
}

func (*h264complexityPtr) ElementType() reflect.Type {
	return h264complexityPtrType
}

func (in *h264complexityPtr) ToH264ComplexityPtrOutput() H264ComplexityPtrOutput {
	return pulumi.ToOutput(in).(H264ComplexityPtrOutput)
}

func (in *h264complexityPtr) ToH264ComplexityPtrOutputWithContext(ctx context.Context) H264ComplexityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H264ComplexityPtrOutput)
}

// We currently support Baseline, Main, High, High422, High444. Default is Auto.
type H264VideoProfile string

const (
	// Tells the encoder to automatically determine the appropriate H.264 profile.
	H264VideoProfileAuto = H264VideoProfile("Auto")
	// Baseline profile
	H264VideoProfileBaseline = H264VideoProfile("Baseline")
	// Main profile
	H264VideoProfileMain = H264VideoProfile("Main")
	// High profile.
	H264VideoProfileHigh = H264VideoProfile("High")
	// High 4:2:2 profile.
	H264VideoProfileHigh422 = H264VideoProfile("High422")
	// High 4:4:4 predictive profile.
	H264VideoProfileHigh444 = H264VideoProfile("High444")
)

func (H264VideoProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*H264VideoProfile)(nil)).Elem()
}

func (e H264VideoProfile) ToH264VideoProfileOutput() H264VideoProfileOutput {
	return pulumi.ToOutput(e).(H264VideoProfileOutput)
}

func (e H264VideoProfile) ToH264VideoProfileOutputWithContext(ctx context.Context) H264VideoProfileOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H264VideoProfileOutput)
}

func (e H264VideoProfile) ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput {
	return e.ToH264VideoProfilePtrOutputWithContext(context.Background())
}

func (e H264VideoProfile) ToH264VideoProfilePtrOutputWithContext(ctx context.Context) H264VideoProfilePtrOutput {
	return H264VideoProfile(e).ToH264VideoProfileOutputWithContext(ctx).ToH264VideoProfilePtrOutputWithContext(ctx)
}

func (e H264VideoProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264VideoProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264VideoProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H264VideoProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H264VideoProfileOutput struct{ *pulumi.OutputState }

func (H264VideoProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H264VideoProfile)(nil)).Elem()
}

func (o H264VideoProfileOutput) ToH264VideoProfileOutput() H264VideoProfileOutput {
	return o
}

func (o H264VideoProfileOutput) ToH264VideoProfileOutputWithContext(ctx context.Context) H264VideoProfileOutput {
	return o
}

func (o H264VideoProfileOutput) ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput {
	return o.ToH264VideoProfilePtrOutputWithContext(context.Background())
}

func (o H264VideoProfileOutput) ToH264VideoProfilePtrOutputWithContext(ctx context.Context) H264VideoProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H264VideoProfile) *H264VideoProfile {
		return &v
	}).(H264VideoProfilePtrOutput)
}

func (o H264VideoProfileOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H264VideoProfileOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264VideoProfile) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H264VideoProfileOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264VideoProfileOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264VideoProfile) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H264VideoProfilePtrOutput struct{ *pulumi.OutputState }

func (H264VideoProfilePtrOutput) ElementType() reflect.Type {
	return h264videoProfilePtrType
}

func (o H264VideoProfilePtrOutput) ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput {
	return o
}

func (o H264VideoProfilePtrOutput) ToH264VideoProfilePtrOutputWithContext(ctx context.Context) H264VideoProfilePtrOutput {
	return o
}

func (o H264VideoProfilePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264VideoProfilePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H264VideoProfile) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o H264VideoProfilePtrOutput) Elem() H264VideoProfileOutput {
	return o.ApplyT(func(v *H264VideoProfile) H264VideoProfile {
		var ret H264VideoProfile
		if v != nil {
			ret = *v
		}
		return ret
	}).(H264VideoProfileOutput)
}

// H264VideoProfileInput is an input type that accepts H264VideoProfileArgs and H264VideoProfileOutput values.
// You can construct a concrete instance of `H264VideoProfileInput` via:
//
//          H264VideoProfileArgs{...}
type H264VideoProfileInput interface {
	pulumi.Input

	ToH264VideoProfileOutput() H264VideoProfileOutput
	ToH264VideoProfileOutputWithContext(context.Context) H264VideoProfileOutput
}

var h264videoProfilePtrType = reflect.TypeOf((**H264VideoProfile)(nil)).Elem()

type H264VideoProfilePtrInput interface {
	pulumi.Input

	ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput
	ToH264VideoProfilePtrOutputWithContext(context.Context) H264VideoProfilePtrOutput
}

type h264videoProfilePtr string

func H264VideoProfilePtr(v string) H264VideoProfilePtrInput {
	return (*h264videoProfilePtr)(&v)
}

func (*h264videoProfilePtr) ElementType() reflect.Type {
	return h264videoProfilePtrType
}

func (in *h264videoProfilePtr) ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput {
	return pulumi.ToOutput(in).(H264VideoProfilePtrOutput)
}

func (in *h264videoProfilePtr) ToH264VideoProfilePtrOutputWithContext(ctx context.Context) H264VideoProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H264VideoProfilePtrOutput)
}

// Tells the encoder how to choose its encoding settings.  Quality will provide for a higher compression ratio but at a higher cost and longer compute time.  Speed will produce a relatively larger file but is faster and more economical. The default value is Balanced.
type H265Complexity string

const (
	// Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time.
	H265ComplexitySpeed = H265Complexity("Speed")
	// Tells the encoder to use settings that achieve a balance between speed and quality.
	H265ComplexityBalanced = H265Complexity("Balanced")
	// Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
	H265ComplexityQuality = H265Complexity("Quality")
)

func (H265Complexity) ElementType() reflect.Type {
	return reflect.TypeOf((*H265Complexity)(nil)).Elem()
}

func (e H265Complexity) ToH265ComplexityOutput() H265ComplexityOutput {
	return pulumi.ToOutput(e).(H265ComplexityOutput)
}

func (e H265Complexity) ToH265ComplexityOutputWithContext(ctx context.Context) H265ComplexityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H265ComplexityOutput)
}

func (e H265Complexity) ToH265ComplexityPtrOutput() H265ComplexityPtrOutput {
	return e.ToH265ComplexityPtrOutputWithContext(context.Background())
}

func (e H265Complexity) ToH265ComplexityPtrOutputWithContext(ctx context.Context) H265ComplexityPtrOutput {
	return H265Complexity(e).ToH265ComplexityOutputWithContext(ctx).ToH265ComplexityPtrOutputWithContext(ctx)
}

func (e H265Complexity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H265Complexity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H265Complexity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H265Complexity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H265ComplexityOutput struct{ *pulumi.OutputState }

func (H265ComplexityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H265Complexity)(nil)).Elem()
}

func (o H265ComplexityOutput) ToH265ComplexityOutput() H265ComplexityOutput {
	return o
}

func (o H265ComplexityOutput) ToH265ComplexityOutputWithContext(ctx context.Context) H265ComplexityOutput {
	return o
}

func (o H265ComplexityOutput) ToH265ComplexityPtrOutput() H265ComplexityPtrOutput {
	return o.ToH265ComplexityPtrOutputWithContext(context.Background())
}

func (o H265ComplexityOutput) ToH265ComplexityPtrOutputWithContext(ctx context.Context) H265ComplexityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H265Complexity) *H265Complexity {
		return &v
	}).(H265ComplexityPtrOutput)
}

func (o H265ComplexityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H265ComplexityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H265Complexity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H265ComplexityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H265ComplexityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H265Complexity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H265ComplexityPtrOutput struct{ *pulumi.OutputState }

func (H265ComplexityPtrOutput) ElementType() reflect.Type {
	return h265complexityPtrType
}

func (o H265ComplexityPtrOutput) ToH265ComplexityPtrOutput() H265ComplexityPtrOutput {
	return o
}

func (o H265ComplexityPtrOutput) ToH265ComplexityPtrOutputWithContext(ctx context.Context) H265ComplexityPtrOutput {
	return o
}

func (o H265ComplexityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H265ComplexityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H265Complexity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o H265ComplexityPtrOutput) Elem() H265ComplexityOutput {
	return o.ApplyT(func(v *H265Complexity) H265Complexity {
		var ret H265Complexity
		if v != nil {
			ret = *v
		}
		return ret
	}).(H265ComplexityOutput)
}

// H265ComplexityInput is an input type that accepts H265ComplexityArgs and H265ComplexityOutput values.
// You can construct a concrete instance of `H265ComplexityInput` via:
//
//          H265ComplexityArgs{...}
type H265ComplexityInput interface {
	pulumi.Input

	ToH265ComplexityOutput() H265ComplexityOutput
	ToH265ComplexityOutputWithContext(context.Context) H265ComplexityOutput
}

var h265complexityPtrType = reflect.TypeOf((**H265Complexity)(nil)).Elem()

type H265ComplexityPtrInput interface {
	pulumi.Input

	ToH265ComplexityPtrOutput() H265ComplexityPtrOutput
	ToH265ComplexityPtrOutputWithContext(context.Context) H265ComplexityPtrOutput
}

type h265complexityPtr string

func H265ComplexityPtr(v string) H265ComplexityPtrInput {
	return (*h265complexityPtr)(&v)
}

func (*h265complexityPtr) ElementType() reflect.Type {
	return h265complexityPtrType
}

func (in *h265complexityPtr) ToH265ComplexityPtrOutput() H265ComplexityPtrOutput {
	return pulumi.ToOutput(in).(H265ComplexityPtrOutput)
}

func (in *h265complexityPtr) ToH265ComplexityPtrOutputWithContext(ctx context.Context) H265ComplexityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H265ComplexityPtrOutput)
}

// We currently support Main. Default is Auto.
type H265VideoProfile string

const (
	// Tells the encoder to automatically determine the appropriate H.265 profile.
	H265VideoProfileAuto = H265VideoProfile("Auto")
	// Main profile (https://x265.readthedocs.io/en/default/cli.html?highlight=profile#profile-level-tier)
	H265VideoProfileMain = H265VideoProfile("Main")
)

func (H265VideoProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*H265VideoProfile)(nil)).Elem()
}

func (e H265VideoProfile) ToH265VideoProfileOutput() H265VideoProfileOutput {
	return pulumi.ToOutput(e).(H265VideoProfileOutput)
}

func (e H265VideoProfile) ToH265VideoProfileOutputWithContext(ctx context.Context) H265VideoProfileOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H265VideoProfileOutput)
}

func (e H265VideoProfile) ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput {
	return e.ToH265VideoProfilePtrOutputWithContext(context.Background())
}

func (e H265VideoProfile) ToH265VideoProfilePtrOutputWithContext(ctx context.Context) H265VideoProfilePtrOutput {
	return H265VideoProfile(e).ToH265VideoProfileOutputWithContext(ctx).ToH265VideoProfilePtrOutputWithContext(ctx)
}

func (e H265VideoProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H265VideoProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H265VideoProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H265VideoProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H265VideoProfileOutput struct{ *pulumi.OutputState }

func (H265VideoProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H265VideoProfile)(nil)).Elem()
}

func (o H265VideoProfileOutput) ToH265VideoProfileOutput() H265VideoProfileOutput {
	return o
}

func (o H265VideoProfileOutput) ToH265VideoProfileOutputWithContext(ctx context.Context) H265VideoProfileOutput {
	return o
}

func (o H265VideoProfileOutput) ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput {
	return o.ToH265VideoProfilePtrOutputWithContext(context.Background())
}

func (o H265VideoProfileOutput) ToH265VideoProfilePtrOutputWithContext(ctx context.Context) H265VideoProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H265VideoProfile) *H265VideoProfile {
		return &v
	}).(H265VideoProfilePtrOutput)
}

func (o H265VideoProfileOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H265VideoProfileOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H265VideoProfile) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H265VideoProfileOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H265VideoProfileOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H265VideoProfile) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H265VideoProfilePtrOutput struct{ *pulumi.OutputState }

func (H265VideoProfilePtrOutput) ElementType() reflect.Type {
	return h265videoProfilePtrType
}

func (o H265VideoProfilePtrOutput) ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput {
	return o
}

func (o H265VideoProfilePtrOutput) ToH265VideoProfilePtrOutputWithContext(ctx context.Context) H265VideoProfilePtrOutput {
	return o
}

func (o H265VideoProfilePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H265VideoProfilePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H265VideoProfile) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o H265VideoProfilePtrOutput) Elem() H265VideoProfileOutput {
	return o.ApplyT(func(v *H265VideoProfile) H265VideoProfile {
		var ret H265VideoProfile
		if v != nil {
			ret = *v
		}
		return ret
	}).(H265VideoProfileOutput)
}

// H265VideoProfileInput is an input type that accepts H265VideoProfileArgs and H265VideoProfileOutput values.
// You can construct a concrete instance of `H265VideoProfileInput` via:
//
//          H265VideoProfileArgs{...}
type H265VideoProfileInput interface {
	pulumi.Input

	ToH265VideoProfileOutput() H265VideoProfileOutput
	ToH265VideoProfileOutputWithContext(context.Context) H265VideoProfileOutput
}

var h265videoProfilePtrType = reflect.TypeOf((**H265VideoProfile)(nil)).Elem()

type H265VideoProfilePtrInput interface {
	pulumi.Input

	ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput
	ToH265VideoProfilePtrOutputWithContext(context.Context) H265VideoProfilePtrOutput
}

type h265videoProfilePtr string

func H265VideoProfilePtr(v string) H265VideoProfilePtrInput {
	return (*h265videoProfilePtr)(&v)
}

func (*h265videoProfilePtr) ElementType() reflect.Type {
	return h265videoProfilePtrType
}

func (in *h265videoProfilePtr) ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput {
	return pulumi.ToOutput(in).(H265VideoProfilePtrOutput)
}

func (in *h265videoProfilePtr) ToH265VideoProfilePtrOutputWithContext(ctx context.Context) H265VideoProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H265VideoProfilePtrOutput)
}

// Defines the type of insights that you want the service to generate. The allowed values are 'AudioInsightsOnly', 'VideoInsightsOnly', and 'AllInsights'. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
type InsightsType string

const (
	// Generate audio only insights. Ignore video even if present. Fails if no audio is present.
	InsightsTypeAudioInsightsOnly = InsightsType("AudioInsightsOnly")
	// Generate video only insights. Ignore audio if present. Fails if no video is present.
	InsightsTypeVideoInsightsOnly = InsightsType("VideoInsightsOnly")
	// Generate both audio and video insights. Fails if either audio or video Insights fail.
	InsightsTypeAllInsights = InsightsType("AllInsights")
)

func (InsightsType) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsType)(nil)).Elem()
}

func (e InsightsType) ToInsightsTypeOutput() InsightsTypeOutput {
	return pulumi.ToOutput(e).(InsightsTypeOutput)
}

func (e InsightsType) ToInsightsTypeOutputWithContext(ctx context.Context) InsightsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InsightsTypeOutput)
}

func (e InsightsType) ToInsightsTypePtrOutput() InsightsTypePtrOutput {
	return e.ToInsightsTypePtrOutputWithContext(context.Background())
}

func (e InsightsType) ToInsightsTypePtrOutputWithContext(ctx context.Context) InsightsTypePtrOutput {
	return InsightsType(e).ToInsightsTypeOutputWithContext(ctx).ToInsightsTypePtrOutputWithContext(ctx)
}

func (e InsightsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InsightsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InsightsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InsightsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InsightsTypeOutput struct{ *pulumi.OutputState }

func (InsightsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsType)(nil)).Elem()
}

func (o InsightsTypeOutput) ToInsightsTypeOutput() InsightsTypeOutput {
	return o
}

func (o InsightsTypeOutput) ToInsightsTypeOutputWithContext(ctx context.Context) InsightsTypeOutput {
	return o
}

func (o InsightsTypeOutput) ToInsightsTypePtrOutput() InsightsTypePtrOutput {
	return o.ToInsightsTypePtrOutputWithContext(context.Background())
}

func (o InsightsTypeOutput) ToInsightsTypePtrOutputWithContext(ctx context.Context) InsightsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InsightsType) *InsightsType {
		return &v
	}).(InsightsTypePtrOutput)
}

func (o InsightsTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InsightsTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InsightsType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InsightsTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InsightsTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InsightsType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InsightsTypePtrOutput struct{ *pulumi.OutputState }

func (InsightsTypePtrOutput) ElementType() reflect.Type {
	return insightsTypePtrType
}

func (o InsightsTypePtrOutput) ToInsightsTypePtrOutput() InsightsTypePtrOutput {
	return o
}

func (o InsightsTypePtrOutput) ToInsightsTypePtrOutputWithContext(ctx context.Context) InsightsTypePtrOutput {
	return o
}

func (o InsightsTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InsightsTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InsightsType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o InsightsTypePtrOutput) Elem() InsightsTypeOutput {
	return o.ApplyT(func(v *InsightsType) InsightsType {
		var ret InsightsType
		if v != nil {
			ret = *v
		}
		return ret
	}).(InsightsTypeOutput)
}

// InsightsTypeInput is an input type that accepts InsightsTypeArgs and InsightsTypeOutput values.
// You can construct a concrete instance of `InsightsTypeInput` via:
//
//          InsightsTypeArgs{...}
type InsightsTypeInput interface {
	pulumi.Input

	ToInsightsTypeOutput() InsightsTypeOutput
	ToInsightsTypeOutputWithContext(context.Context) InsightsTypeOutput
}

var insightsTypePtrType = reflect.TypeOf((**InsightsType)(nil)).Elem()

type InsightsTypePtrInput interface {
	pulumi.Input

	ToInsightsTypePtrOutput() InsightsTypePtrOutput
	ToInsightsTypePtrOutputWithContext(context.Context) InsightsTypePtrOutput
}

type insightsTypePtr string

func InsightsTypePtr(v string) InsightsTypePtrInput {
	return (*insightsTypePtr)(&v)
}

func (*insightsTypePtr) ElementType() reflect.Type {
	return insightsTypePtrType
}

func (in *insightsTypePtr) ToInsightsTypePtrOutput() InsightsTypePtrOutput {
	return pulumi.ToOutput(in).(InsightsTypePtrOutput)
}

func (in *insightsTypePtr) ToInsightsTypePtrOutputWithContext(ctx context.Context) InsightsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InsightsTypePtrOutput)
}

// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
type LiveEventEncodingType string

const (
	// A contribution live encoder sends a multiple bitrate stream. The ingested stream passes through the live event without any further processing. It is also called the pass-through mode.
	LiveEventEncodingTypeNone = LiveEventEncodingType("None")
	// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution.
	LiveEventEncodingTypeStandard = LiveEventEncodingType("Standard")
	// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution.
	LiveEventEncodingTypePremium1080p = LiveEventEncodingType("Premium1080p")
)

func (LiveEventEncodingType) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncodingType)(nil)).Elem()
}

func (e LiveEventEncodingType) ToLiveEventEncodingTypeOutput() LiveEventEncodingTypeOutput {
	return pulumi.ToOutput(e).(LiveEventEncodingTypeOutput)
}

func (e LiveEventEncodingType) ToLiveEventEncodingTypeOutputWithContext(ctx context.Context) LiveEventEncodingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LiveEventEncodingTypeOutput)
}

func (e LiveEventEncodingType) ToLiveEventEncodingTypePtrOutput() LiveEventEncodingTypePtrOutput {
	return e.ToLiveEventEncodingTypePtrOutputWithContext(context.Background())
}

func (e LiveEventEncodingType) ToLiveEventEncodingTypePtrOutputWithContext(ctx context.Context) LiveEventEncodingTypePtrOutput {
	return LiveEventEncodingType(e).ToLiveEventEncodingTypeOutputWithContext(ctx).ToLiveEventEncodingTypePtrOutputWithContext(ctx)
}

func (e LiveEventEncodingType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LiveEventEncodingType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LiveEventEncodingType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LiveEventEncodingType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LiveEventEncodingTypeOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncodingType)(nil)).Elem()
}

func (o LiveEventEncodingTypeOutput) ToLiveEventEncodingTypeOutput() LiveEventEncodingTypeOutput {
	return o
}

func (o LiveEventEncodingTypeOutput) ToLiveEventEncodingTypeOutputWithContext(ctx context.Context) LiveEventEncodingTypeOutput {
	return o
}

func (o LiveEventEncodingTypeOutput) ToLiveEventEncodingTypePtrOutput() LiveEventEncodingTypePtrOutput {
	return o.ToLiveEventEncodingTypePtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingTypeOutput) ToLiveEventEncodingTypePtrOutputWithContext(ctx context.Context) LiveEventEncodingTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventEncodingType) *LiveEventEncodingType {
		return &v
	}).(LiveEventEncodingTypePtrOutput)
}

func (o LiveEventEncodingTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LiveEventEncodingTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LiveEventEncodingType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LiveEventEncodingTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LiveEventEncodingType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LiveEventEncodingTypePtrOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingTypePtrOutput) ElementType() reflect.Type {
	return liveEventEncodingTypePtrType
}

func (o LiveEventEncodingTypePtrOutput) ToLiveEventEncodingTypePtrOutput() LiveEventEncodingTypePtrOutput {
	return o
}

func (o LiveEventEncodingTypePtrOutput) ToLiveEventEncodingTypePtrOutputWithContext(ctx context.Context) LiveEventEncodingTypePtrOutput {
	return o
}

func (o LiveEventEncodingTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LiveEventEncodingType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o LiveEventEncodingTypePtrOutput) Elem() LiveEventEncodingTypeOutput {
	return o.ApplyT(func(v *LiveEventEncodingType) LiveEventEncodingType {
		var ret LiveEventEncodingType
		if v != nil {
			ret = *v
		}
		return ret
	}).(LiveEventEncodingTypeOutput)
}

// LiveEventEncodingTypeInput is an input type that accepts LiveEventEncodingTypeArgs and LiveEventEncodingTypeOutput values.
// You can construct a concrete instance of `LiveEventEncodingTypeInput` via:
//
//          LiveEventEncodingTypeArgs{...}
type LiveEventEncodingTypeInput interface {
	pulumi.Input

	ToLiveEventEncodingTypeOutput() LiveEventEncodingTypeOutput
	ToLiveEventEncodingTypeOutputWithContext(context.Context) LiveEventEncodingTypeOutput
}

var liveEventEncodingTypePtrType = reflect.TypeOf((**LiveEventEncodingType)(nil)).Elem()

type LiveEventEncodingTypePtrInput interface {
	pulumi.Input

	ToLiveEventEncodingTypePtrOutput() LiveEventEncodingTypePtrOutput
	ToLiveEventEncodingTypePtrOutputWithContext(context.Context) LiveEventEncodingTypePtrOutput
}

type liveEventEncodingTypePtr string

func LiveEventEncodingTypePtr(v string) LiveEventEncodingTypePtrInput {
	return (*liveEventEncodingTypePtr)(&v)
}

func (*liveEventEncodingTypePtr) ElementType() reflect.Type {
	return liveEventEncodingTypePtrType
}

func (in *liveEventEncodingTypePtr) ToLiveEventEncodingTypePtrOutput() LiveEventEncodingTypePtrOutput {
	return pulumi.ToOutput(in).(LiveEventEncodingTypePtrOutput)
}

func (in *liveEventEncodingTypePtr) ToLiveEventEncodingTypePtrOutputWithContext(ctx context.Context) LiveEventEncodingTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LiveEventEncodingTypePtrOutput)
}

// The input protocol for the live event. This is specified at creation time and cannot be updated.
type LiveEventInputProtocol string

const (
	// Smooth Streaming input will be sent by the contribution encoder to the live event.
	LiveEventInputProtocolFragmentedMP4 = LiveEventInputProtocol("FragmentedMP4")
	// RTMP input will be sent by the contribution encoder to the live event.
	LiveEventInputProtocolRTMP = LiveEventInputProtocol("RTMP")
)

func (LiveEventInputProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputProtocol)(nil)).Elem()
}

func (e LiveEventInputProtocol) ToLiveEventInputProtocolOutput() LiveEventInputProtocolOutput {
	return pulumi.ToOutput(e).(LiveEventInputProtocolOutput)
}

func (e LiveEventInputProtocol) ToLiveEventInputProtocolOutputWithContext(ctx context.Context) LiveEventInputProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LiveEventInputProtocolOutput)
}

func (e LiveEventInputProtocol) ToLiveEventInputProtocolPtrOutput() LiveEventInputProtocolPtrOutput {
	return e.ToLiveEventInputProtocolPtrOutputWithContext(context.Background())
}

func (e LiveEventInputProtocol) ToLiveEventInputProtocolPtrOutputWithContext(ctx context.Context) LiveEventInputProtocolPtrOutput {
	return LiveEventInputProtocol(e).ToLiveEventInputProtocolOutputWithContext(ctx).ToLiveEventInputProtocolPtrOutputWithContext(ctx)
}

func (e LiveEventInputProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LiveEventInputProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LiveEventInputProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LiveEventInputProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LiveEventInputProtocolOutput struct{ *pulumi.OutputState }

func (LiveEventInputProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputProtocol)(nil)).Elem()
}

func (o LiveEventInputProtocolOutput) ToLiveEventInputProtocolOutput() LiveEventInputProtocolOutput {
	return o
}

func (o LiveEventInputProtocolOutput) ToLiveEventInputProtocolOutputWithContext(ctx context.Context) LiveEventInputProtocolOutput {
	return o
}

func (o LiveEventInputProtocolOutput) ToLiveEventInputProtocolPtrOutput() LiveEventInputProtocolPtrOutput {
	return o.ToLiveEventInputProtocolPtrOutputWithContext(context.Background())
}

func (o LiveEventInputProtocolOutput) ToLiveEventInputProtocolPtrOutputWithContext(ctx context.Context) LiveEventInputProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventInputProtocol) *LiveEventInputProtocol {
		return &v
	}).(LiveEventInputProtocolPtrOutput)
}

func (o LiveEventInputProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LiveEventInputProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LiveEventInputProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LiveEventInputProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LiveEventInputProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LiveEventInputProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LiveEventInputProtocolPtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputProtocolPtrOutput) ElementType() reflect.Type {
	return liveEventInputProtocolPtrType
}

func (o LiveEventInputProtocolPtrOutput) ToLiveEventInputProtocolPtrOutput() LiveEventInputProtocolPtrOutput {
	return o
}

func (o LiveEventInputProtocolPtrOutput) ToLiveEventInputProtocolPtrOutputWithContext(ctx context.Context) LiveEventInputProtocolPtrOutput {
	return o
}

func (o LiveEventInputProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LiveEventInputProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LiveEventInputProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o LiveEventInputProtocolPtrOutput) Elem() LiveEventInputProtocolOutput {
	return o.ApplyT(func(v *LiveEventInputProtocol) LiveEventInputProtocol {
		var ret LiveEventInputProtocol
		if v != nil {
			ret = *v
		}
		return ret
	}).(LiveEventInputProtocolOutput)
}

// LiveEventInputProtocolInput is an input type that accepts LiveEventInputProtocolArgs and LiveEventInputProtocolOutput values.
// You can construct a concrete instance of `LiveEventInputProtocolInput` via:
//
//          LiveEventInputProtocolArgs{...}
type LiveEventInputProtocolInput interface {
	pulumi.Input

	ToLiveEventInputProtocolOutput() LiveEventInputProtocolOutput
	ToLiveEventInputProtocolOutputWithContext(context.Context) LiveEventInputProtocolOutput
}

var liveEventInputProtocolPtrType = reflect.TypeOf((**LiveEventInputProtocol)(nil)).Elem()

type LiveEventInputProtocolPtrInput interface {
	pulumi.Input

	ToLiveEventInputProtocolPtrOutput() LiveEventInputProtocolPtrOutput
	ToLiveEventInputProtocolPtrOutputWithContext(context.Context) LiveEventInputProtocolPtrOutput
}

type liveEventInputProtocolPtr string

func LiveEventInputProtocolPtr(v string) LiveEventInputProtocolPtrInput {
	return (*liveEventInputProtocolPtr)(&v)
}

func (*liveEventInputProtocolPtr) ElementType() reflect.Type {
	return liveEventInputProtocolPtrType
}

func (in *liveEventInputProtocolPtr) ToLiveEventInputProtocolPtrOutput() LiveEventInputProtocolPtrOutput {
	return pulumi.ToOutput(in).(LiveEventInputProtocolPtrOutput)
}

func (in *liveEventInputProtocolPtr) ToLiveEventInputProtocolPtrOutputWithContext(ctx context.Context) LiveEventInputProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LiveEventInputProtocolPtrOutput)
}

// The identity type.
type ManagedIdentityType string

const (
	// A system-assigned managed identity.
	ManagedIdentityTypeSystemAssigned = ManagedIdentityType("SystemAssigned")
	// No managed identity.
	ManagedIdentityTypeNone = ManagedIdentityType("None")
)

func (ManagedIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityType)(nil)).Elem()
}

func (e ManagedIdentityType) ToManagedIdentityTypeOutput() ManagedIdentityTypeOutput {
	return pulumi.ToOutput(e).(ManagedIdentityTypeOutput)
}

func (e ManagedIdentityType) ToManagedIdentityTypeOutputWithContext(ctx context.Context) ManagedIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedIdentityTypeOutput)
}

func (e ManagedIdentityType) ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput {
	return e.ToManagedIdentityTypePtrOutputWithContext(context.Background())
}

func (e ManagedIdentityType) ToManagedIdentityTypePtrOutputWithContext(ctx context.Context) ManagedIdentityTypePtrOutput {
	return ManagedIdentityType(e).ToManagedIdentityTypeOutputWithContext(ctx).ToManagedIdentityTypePtrOutputWithContext(ctx)
}

func (e ManagedIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedIdentityTypeOutput struct{ *pulumi.OutputState }

func (ManagedIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityType)(nil)).Elem()
}

func (o ManagedIdentityTypeOutput) ToManagedIdentityTypeOutput() ManagedIdentityTypeOutput {
	return o
}

func (o ManagedIdentityTypeOutput) ToManagedIdentityTypeOutputWithContext(ctx context.Context) ManagedIdentityTypeOutput {
	return o
}

func (o ManagedIdentityTypeOutput) ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput {
	return o.ToManagedIdentityTypePtrOutputWithContext(context.Background())
}

func (o ManagedIdentityTypeOutput) ToManagedIdentityTypePtrOutputWithContext(ctx context.Context) ManagedIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentityType) *ManagedIdentityType {
		return &v
	}).(ManagedIdentityTypePtrOutput)
}

func (o ManagedIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityTypePtrOutput) ElementType() reflect.Type {
	return managedIdentityTypePtrType
}

func (o ManagedIdentityTypePtrOutput) ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput {
	return o
}

func (o ManagedIdentityTypePtrOutput) ToManagedIdentityTypePtrOutputWithContext(ctx context.Context) ManagedIdentityTypePtrOutput {
	return o
}

func (o ManagedIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ManagedIdentityTypePtrOutput) Elem() ManagedIdentityTypeOutput {
	return o.ApplyT(func(v *ManagedIdentityType) ManagedIdentityType {
		var ret ManagedIdentityType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ManagedIdentityTypeOutput)
}

// ManagedIdentityTypeInput is an input type that accepts ManagedIdentityTypeArgs and ManagedIdentityTypeOutput values.
// You can construct a concrete instance of `ManagedIdentityTypeInput` via:
//
//          ManagedIdentityTypeArgs{...}
type ManagedIdentityTypeInput interface {
	pulumi.Input

	ToManagedIdentityTypeOutput() ManagedIdentityTypeOutput
	ToManagedIdentityTypeOutputWithContext(context.Context) ManagedIdentityTypeOutput
}

var managedIdentityTypePtrType = reflect.TypeOf((**ManagedIdentityType)(nil)).Elem()

type ManagedIdentityTypePtrInput interface {
	pulumi.Input

	ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput
	ToManagedIdentityTypePtrOutputWithContext(context.Context) ManagedIdentityTypePtrOutput
}

type managedIdentityTypePtr string

func ManagedIdentityTypePtr(v string) ManagedIdentityTypePtrInput {
	return (*managedIdentityTypePtr)(&v)
}

func (*managedIdentityTypePtr) ElementType() reflect.Type {
	return managedIdentityTypePtrType
}

func (in *managedIdentityTypePtr) ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedIdentityTypePtrOutput)
}

func (in *managedIdentityTypePtr) ToManagedIdentityTypePtrOutputWithContext(ctx context.Context) ManagedIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedIdentityTypePtrOutput)
}

// Underlying RTSP transport. This can be used to enable or disable HTTP tunneling.
type MediaGraphRtspTransport string

const (
	// HTTP/HTTPS transport. This should be used when HTTP tunneling is desired.
	MediaGraphRtspTransportHttp = MediaGraphRtspTransport("Http")
	// TCP transport. This should be used when HTTP tunneling is not desired.
	MediaGraphRtspTransportTcp = MediaGraphRtspTransport("Tcp")
)

func (MediaGraphRtspTransport) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphRtspTransport)(nil)).Elem()
}

func (e MediaGraphRtspTransport) ToMediaGraphRtspTransportOutput() MediaGraphRtspTransportOutput {
	return pulumi.ToOutput(e).(MediaGraphRtspTransportOutput)
}

func (e MediaGraphRtspTransport) ToMediaGraphRtspTransportOutputWithContext(ctx context.Context) MediaGraphRtspTransportOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MediaGraphRtspTransportOutput)
}

func (e MediaGraphRtspTransport) ToMediaGraphRtspTransportPtrOutput() MediaGraphRtspTransportPtrOutput {
	return e.ToMediaGraphRtspTransportPtrOutputWithContext(context.Background())
}

func (e MediaGraphRtspTransport) ToMediaGraphRtspTransportPtrOutputWithContext(ctx context.Context) MediaGraphRtspTransportPtrOutput {
	return MediaGraphRtspTransport(e).ToMediaGraphRtspTransportOutputWithContext(ctx).ToMediaGraphRtspTransportPtrOutputWithContext(ctx)
}

func (e MediaGraphRtspTransport) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MediaGraphRtspTransport) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MediaGraphRtspTransport) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MediaGraphRtspTransport) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MediaGraphRtspTransportOutput struct{ *pulumi.OutputState }

func (MediaGraphRtspTransportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphRtspTransport)(nil)).Elem()
}

func (o MediaGraphRtspTransportOutput) ToMediaGraphRtspTransportOutput() MediaGraphRtspTransportOutput {
	return o
}

func (o MediaGraphRtspTransportOutput) ToMediaGraphRtspTransportOutputWithContext(ctx context.Context) MediaGraphRtspTransportOutput {
	return o
}

func (o MediaGraphRtspTransportOutput) ToMediaGraphRtspTransportPtrOutput() MediaGraphRtspTransportPtrOutput {
	return o.ToMediaGraphRtspTransportPtrOutputWithContext(context.Background())
}

func (o MediaGraphRtspTransportOutput) ToMediaGraphRtspTransportPtrOutputWithContext(ctx context.Context) MediaGraphRtspTransportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaGraphRtspTransport) *MediaGraphRtspTransport {
		return &v
	}).(MediaGraphRtspTransportPtrOutput)
}

func (o MediaGraphRtspTransportOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MediaGraphRtspTransportOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MediaGraphRtspTransport) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MediaGraphRtspTransportOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MediaGraphRtspTransportOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MediaGraphRtspTransport) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MediaGraphRtspTransportPtrOutput struct{ *pulumi.OutputState }

func (MediaGraphRtspTransportPtrOutput) ElementType() reflect.Type {
	return mediaGraphRtspTransportPtrType
}

func (o MediaGraphRtspTransportPtrOutput) ToMediaGraphRtspTransportPtrOutput() MediaGraphRtspTransportPtrOutput {
	return o
}

func (o MediaGraphRtspTransportPtrOutput) ToMediaGraphRtspTransportPtrOutputWithContext(ctx context.Context) MediaGraphRtspTransportPtrOutput {
	return o
}

func (o MediaGraphRtspTransportPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MediaGraphRtspTransportPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MediaGraphRtspTransport) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o MediaGraphRtspTransportPtrOutput) Elem() MediaGraphRtspTransportOutput {
	return o.ApplyT(func(v *MediaGraphRtspTransport) MediaGraphRtspTransport {
		var ret MediaGraphRtspTransport
		if v != nil {
			ret = *v
		}
		return ret
	}).(MediaGraphRtspTransportOutput)
}

// MediaGraphRtspTransportInput is an input type that accepts MediaGraphRtspTransportArgs and MediaGraphRtspTransportOutput values.
// You can construct a concrete instance of `MediaGraphRtspTransportInput` via:
//
//          MediaGraphRtspTransportArgs{...}
type MediaGraphRtspTransportInput interface {
	pulumi.Input

	ToMediaGraphRtspTransportOutput() MediaGraphRtspTransportOutput
	ToMediaGraphRtspTransportOutputWithContext(context.Context) MediaGraphRtspTransportOutput
}

var mediaGraphRtspTransportPtrType = reflect.TypeOf((**MediaGraphRtspTransport)(nil)).Elem()

type MediaGraphRtspTransportPtrInput interface {
	pulumi.Input

	ToMediaGraphRtspTransportPtrOutput() MediaGraphRtspTransportPtrOutput
	ToMediaGraphRtspTransportPtrOutputWithContext(context.Context) MediaGraphRtspTransportPtrOutput
}

type mediaGraphRtspTransportPtr string

func MediaGraphRtspTransportPtr(v string) MediaGraphRtspTransportPtrInput {
	return (*mediaGraphRtspTransportPtr)(&v)
}

func (*mediaGraphRtspTransportPtr) ElementType() reflect.Type {
	return mediaGraphRtspTransportPtrType
}

func (in *mediaGraphRtspTransportPtr) ToMediaGraphRtspTransportPtrOutput() MediaGraphRtspTransportPtrOutput {
	return pulumi.ToOutput(in).(MediaGraphRtspTransportPtrOutput)
}

func (in *mediaGraphRtspTransportPtr) ToMediaGraphRtspTransportPtrOutputWithContext(ctx context.Context) MediaGraphRtspTransportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MediaGraphRtspTransportPtrOutput)
}

// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
type OnErrorType string

const (
	// Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped.
	OnErrorTypeStopProcessingJob = OnErrorType("StopProcessingJob")
	// Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue.
	OnErrorTypeContinueJob = OnErrorType("ContinueJob")
)

func (OnErrorType) ElementType() reflect.Type {
	return reflect.TypeOf((*OnErrorType)(nil)).Elem()
}

func (e OnErrorType) ToOnErrorTypeOutput() OnErrorTypeOutput {
	return pulumi.ToOutput(e).(OnErrorTypeOutput)
}

func (e OnErrorType) ToOnErrorTypeOutputWithContext(ctx context.Context) OnErrorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OnErrorTypeOutput)
}

func (e OnErrorType) ToOnErrorTypePtrOutput() OnErrorTypePtrOutput {
	return e.ToOnErrorTypePtrOutputWithContext(context.Background())
}

func (e OnErrorType) ToOnErrorTypePtrOutputWithContext(ctx context.Context) OnErrorTypePtrOutput {
	return OnErrorType(e).ToOnErrorTypeOutputWithContext(ctx).ToOnErrorTypePtrOutputWithContext(ctx)
}

func (e OnErrorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnErrorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnErrorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OnErrorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OnErrorTypeOutput struct{ *pulumi.OutputState }

func (OnErrorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnErrorType)(nil)).Elem()
}

func (o OnErrorTypeOutput) ToOnErrorTypeOutput() OnErrorTypeOutput {
	return o
}

func (o OnErrorTypeOutput) ToOnErrorTypeOutputWithContext(ctx context.Context) OnErrorTypeOutput {
	return o
}

func (o OnErrorTypeOutput) ToOnErrorTypePtrOutput() OnErrorTypePtrOutput {
	return o.ToOnErrorTypePtrOutputWithContext(context.Background())
}

func (o OnErrorTypeOutput) ToOnErrorTypePtrOutputWithContext(ctx context.Context) OnErrorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnErrorType) *OnErrorType {
		return &v
	}).(OnErrorTypePtrOutput)
}

func (o OnErrorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OnErrorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnErrorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OnErrorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnErrorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnErrorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OnErrorTypePtrOutput struct{ *pulumi.OutputState }

func (OnErrorTypePtrOutput) ElementType() reflect.Type {
	return onErrorTypePtrType
}

func (o OnErrorTypePtrOutput) ToOnErrorTypePtrOutput() OnErrorTypePtrOutput {
	return o
}

func (o OnErrorTypePtrOutput) ToOnErrorTypePtrOutputWithContext(ctx context.Context) OnErrorTypePtrOutput {
	return o
}

func (o OnErrorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnErrorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OnErrorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o OnErrorTypePtrOutput) Elem() OnErrorTypeOutput {
	return o.ApplyT(func(v *OnErrorType) OnErrorType {
		var ret OnErrorType
		if v != nil {
			ret = *v
		}
		return ret
	}).(OnErrorTypeOutput)
}

// OnErrorTypeInput is an input type that accepts OnErrorTypeArgs and OnErrorTypeOutput values.
// You can construct a concrete instance of `OnErrorTypeInput` via:
//
//          OnErrorTypeArgs{...}
type OnErrorTypeInput interface {
	pulumi.Input

	ToOnErrorTypeOutput() OnErrorTypeOutput
	ToOnErrorTypeOutputWithContext(context.Context) OnErrorTypeOutput
}

var onErrorTypePtrType = reflect.TypeOf((**OnErrorType)(nil)).Elem()

type OnErrorTypePtrInput interface {
	pulumi.Input

	ToOnErrorTypePtrOutput() OnErrorTypePtrOutput
	ToOnErrorTypePtrOutputWithContext(context.Context) OnErrorTypePtrOutput
}

type onErrorTypePtr string

func OnErrorTypePtr(v string) OnErrorTypePtrInput {
	return (*onErrorTypePtr)(&v)
}

func (*onErrorTypePtr) ElementType() reflect.Type {
	return onErrorTypePtrType
}

func (in *onErrorTypePtr) ToOnErrorTypePtrOutput() OnErrorTypePtrOutput {
	return pulumi.ToOutput(in).(OnErrorTypePtrOutput)
}

func (in *onErrorTypePtr) ToOnErrorTypePtrOutputWithContext(ctx context.Context) OnErrorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OnErrorTypePtrOutput)
}

// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
type Priority string

const (
	// Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs.
	PriorityLow = Priority("Low")
	// Used for TransformOutputs that can be generated at Normal priority.
	PriorityNormal = Priority("Normal")
	// Used for TransformOutputs that should take precedence over others.
	PriorityHigh = Priority("High")
)

func (Priority) ElementType() reflect.Type {
	return reflect.TypeOf((*Priority)(nil)).Elem()
}

func (e Priority) ToPriorityOutput() PriorityOutput {
	return pulumi.ToOutput(e).(PriorityOutput)
}

func (e Priority) ToPriorityOutputWithContext(ctx context.Context) PriorityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PriorityOutput)
}

func (e Priority) ToPriorityPtrOutput() PriorityPtrOutput {
	return e.ToPriorityPtrOutputWithContext(context.Background())
}

func (e Priority) ToPriorityPtrOutputWithContext(ctx context.Context) PriorityPtrOutput {
	return Priority(e).ToPriorityOutputWithContext(ctx).ToPriorityPtrOutputWithContext(ctx)
}

func (e Priority) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Priority) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Priority) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Priority) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PriorityOutput struct{ *pulumi.OutputState }

func (PriorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Priority)(nil)).Elem()
}

func (o PriorityOutput) ToPriorityOutput() PriorityOutput {
	return o
}

func (o PriorityOutput) ToPriorityOutputWithContext(ctx context.Context) PriorityOutput {
	return o
}

func (o PriorityOutput) ToPriorityPtrOutput() PriorityPtrOutput {
	return o.ToPriorityPtrOutputWithContext(context.Background())
}

func (o PriorityOutput) ToPriorityPtrOutputWithContext(ctx context.Context) PriorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Priority) *Priority {
		return &v
	}).(PriorityPtrOutput)
}

func (o PriorityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PriorityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Priority) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PriorityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PriorityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Priority) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PriorityPtrOutput struct{ *pulumi.OutputState }

func (PriorityPtrOutput) ElementType() reflect.Type {
	return priorityPtrType
}

func (o PriorityPtrOutput) ToPriorityPtrOutput() PriorityPtrOutput {
	return o
}

func (o PriorityPtrOutput) ToPriorityPtrOutputWithContext(ctx context.Context) PriorityPtrOutput {
	return o
}

func (o PriorityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PriorityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Priority) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o PriorityPtrOutput) Elem() PriorityOutput {
	return o.ApplyT(func(v *Priority) Priority {
		var ret Priority
		if v != nil {
			ret = *v
		}
		return ret
	}).(PriorityOutput)
}

// PriorityInput is an input type that accepts PriorityArgs and PriorityOutput values.
// You can construct a concrete instance of `PriorityInput` via:
//
//          PriorityArgs{...}
type PriorityInput interface {
	pulumi.Input

	ToPriorityOutput() PriorityOutput
	ToPriorityOutputWithContext(context.Context) PriorityOutput
}

var priorityPtrType = reflect.TypeOf((**Priority)(nil)).Elem()

type PriorityPtrInput interface {
	pulumi.Input

	ToPriorityPtrOutput() PriorityPtrOutput
	ToPriorityPtrOutputWithContext(context.Context) PriorityPtrOutput
}

type priorityPtr string

func PriorityPtr(v string) PriorityPtrInput {
	return (*priorityPtr)(&v)
}

func (*priorityPtr) ElementType() reflect.Type {
	return priorityPtrType
}

func (in *priorityPtr) ToPriorityPtrOutput() PriorityPtrOutput {
	return pulumi.ToOutput(in).(PriorityPtrOutput)
}

func (in *priorityPtr) ToPriorityPtrOutputWithContext(ctx context.Context) PriorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PriorityPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
type PrivateEndpointServiceConnectionStatus string

const (
	PrivateEndpointServiceConnectionStatusPending  = PrivateEndpointServiceConnectionStatus("Pending")
	PrivateEndpointServiceConnectionStatusApproved = PrivateEndpointServiceConnectionStatus("Approved")
	PrivateEndpointServiceConnectionStatusRejected = PrivateEndpointServiceConnectionStatus("Rejected")
)

func (PrivateEndpointServiceConnectionStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointServiceConnectionStatus)(nil)).Elem()
}

func (e PrivateEndpointServiceConnectionStatus) ToPrivateEndpointServiceConnectionStatusOutput() PrivateEndpointServiceConnectionStatusOutput {
	return pulumi.ToOutput(e).(PrivateEndpointServiceConnectionStatusOutput)
}

func (e PrivateEndpointServiceConnectionStatus) ToPrivateEndpointServiceConnectionStatusOutputWithContext(ctx context.Context) PrivateEndpointServiceConnectionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PrivateEndpointServiceConnectionStatusOutput)
}

func (e PrivateEndpointServiceConnectionStatus) ToPrivateEndpointServiceConnectionStatusPtrOutput() PrivateEndpointServiceConnectionStatusPtrOutput {
	return e.ToPrivateEndpointServiceConnectionStatusPtrOutputWithContext(context.Background())
}

func (e PrivateEndpointServiceConnectionStatus) ToPrivateEndpointServiceConnectionStatusPtrOutputWithContext(ctx context.Context) PrivateEndpointServiceConnectionStatusPtrOutput {
	return PrivateEndpointServiceConnectionStatus(e).ToPrivateEndpointServiceConnectionStatusOutputWithContext(ctx).ToPrivateEndpointServiceConnectionStatusPtrOutputWithContext(ctx)
}

func (e PrivateEndpointServiceConnectionStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateEndpointServiceConnectionStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateEndpointServiceConnectionStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PrivateEndpointServiceConnectionStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PrivateEndpointServiceConnectionStatusOutput struct{ *pulumi.OutputState }

func (PrivateEndpointServiceConnectionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointServiceConnectionStatus)(nil)).Elem()
}

func (o PrivateEndpointServiceConnectionStatusOutput) ToPrivateEndpointServiceConnectionStatusOutput() PrivateEndpointServiceConnectionStatusOutput {
	return o
}

func (o PrivateEndpointServiceConnectionStatusOutput) ToPrivateEndpointServiceConnectionStatusOutputWithContext(ctx context.Context) PrivateEndpointServiceConnectionStatusOutput {
	return o
}

func (o PrivateEndpointServiceConnectionStatusOutput) ToPrivateEndpointServiceConnectionStatusPtrOutput() PrivateEndpointServiceConnectionStatusPtrOutput {
	return o.ToPrivateEndpointServiceConnectionStatusPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointServiceConnectionStatusOutput) ToPrivateEndpointServiceConnectionStatusPtrOutputWithContext(ctx context.Context) PrivateEndpointServiceConnectionStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpointServiceConnectionStatus) *PrivateEndpointServiceConnectionStatus {
		return &v
	}).(PrivateEndpointServiceConnectionStatusPtrOutput)
}

func (o PrivateEndpointServiceConnectionStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PrivateEndpointServiceConnectionStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateEndpointServiceConnectionStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PrivateEndpointServiceConnectionStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointServiceConnectionStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateEndpointServiceConnectionStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PrivateEndpointServiceConnectionStatusPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointServiceConnectionStatusPtrOutput) ElementType() reflect.Type {
	return privateEndpointServiceConnectionStatusPtrType
}

func (o PrivateEndpointServiceConnectionStatusPtrOutput) ToPrivateEndpointServiceConnectionStatusPtrOutput() PrivateEndpointServiceConnectionStatusPtrOutput {
	return o
}

func (o PrivateEndpointServiceConnectionStatusPtrOutput) ToPrivateEndpointServiceConnectionStatusPtrOutputWithContext(ctx context.Context) PrivateEndpointServiceConnectionStatusPtrOutput {
	return o
}

func (o PrivateEndpointServiceConnectionStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointServiceConnectionStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PrivateEndpointServiceConnectionStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointServiceConnectionStatusPtrOutput) Elem() PrivateEndpointServiceConnectionStatusOutput {
	return o.ApplyT(func(v *PrivateEndpointServiceConnectionStatus) PrivateEndpointServiceConnectionStatus {
		var ret PrivateEndpointServiceConnectionStatus
		if v != nil {
			ret = *v
		}
		return ret
	}).(PrivateEndpointServiceConnectionStatusOutput)
}

// PrivateEndpointServiceConnectionStatusInput is an input type that accepts PrivateEndpointServiceConnectionStatusArgs and PrivateEndpointServiceConnectionStatusOutput values.
// You can construct a concrete instance of `PrivateEndpointServiceConnectionStatusInput` via:
//
//          PrivateEndpointServiceConnectionStatusArgs{...}
type PrivateEndpointServiceConnectionStatusInput interface {
	pulumi.Input

	ToPrivateEndpointServiceConnectionStatusOutput() PrivateEndpointServiceConnectionStatusOutput
	ToPrivateEndpointServiceConnectionStatusOutputWithContext(context.Context) PrivateEndpointServiceConnectionStatusOutput
}

var privateEndpointServiceConnectionStatusPtrType = reflect.TypeOf((**PrivateEndpointServiceConnectionStatus)(nil)).Elem()

type PrivateEndpointServiceConnectionStatusPtrInput interface {
	pulumi.Input

	ToPrivateEndpointServiceConnectionStatusPtrOutput() PrivateEndpointServiceConnectionStatusPtrOutput
	ToPrivateEndpointServiceConnectionStatusPtrOutputWithContext(context.Context) PrivateEndpointServiceConnectionStatusPtrOutput
}

type privateEndpointServiceConnectionStatusPtr string

func PrivateEndpointServiceConnectionStatusPtr(v string) PrivateEndpointServiceConnectionStatusPtrInput {
	return (*privateEndpointServiceConnectionStatusPtr)(&v)
}

func (*privateEndpointServiceConnectionStatusPtr) ElementType() reflect.Type {
	return privateEndpointServiceConnectionStatusPtrType
}

func (in *privateEndpointServiceConnectionStatusPtr) ToPrivateEndpointServiceConnectionStatusPtrOutput() PrivateEndpointServiceConnectionStatusPtrOutput {
	return pulumi.ToOutput(in).(PrivateEndpointServiceConnectionStatusPtrOutput)
}

func (in *privateEndpointServiceConnectionStatusPtr) ToPrivateEndpointServiceConnectionStatusPtrOutputWithContext(ctx context.Context) PrivateEndpointServiceConnectionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PrivateEndpointServiceConnectionStatusPtrOutput)
}

// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
type Rotation string

const (
	// Automatically detect and rotate as needed.
	RotationAuto = Rotation("Auto")
	// Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact.
	RotationNone = Rotation("None")
	// Do not rotate the video but remove any metadata about the rotation.
	RotationRotate0 = Rotation("Rotate0")
	// Rotate 90 degrees clockwise.
	RotationRotate90 = Rotation("Rotate90")
	// Rotate 180 degrees clockwise.
	RotationRotate180 = Rotation("Rotate180")
	// Rotate 270 degrees clockwise.
	RotationRotate270 = Rotation("Rotate270")
)

func (Rotation) ElementType() reflect.Type {
	return reflect.TypeOf((*Rotation)(nil)).Elem()
}

func (e Rotation) ToRotationOutput() RotationOutput {
	return pulumi.ToOutput(e).(RotationOutput)
}

func (e Rotation) ToRotationOutputWithContext(ctx context.Context) RotationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RotationOutput)
}

func (e Rotation) ToRotationPtrOutput() RotationPtrOutput {
	return e.ToRotationPtrOutputWithContext(context.Background())
}

func (e Rotation) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return Rotation(e).ToRotationOutputWithContext(ctx).ToRotationPtrOutputWithContext(ctx)
}

func (e Rotation) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Rotation) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Rotation) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Rotation) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RotationOutput struct{ *pulumi.OutputState }

func (RotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rotation)(nil)).Elem()
}

func (o RotationOutput) ToRotationOutput() RotationOutput {
	return o
}

func (o RotationOutput) ToRotationOutputWithContext(ctx context.Context) RotationOutput {
	return o
}

func (o RotationOutput) ToRotationPtrOutput() RotationPtrOutput {
	return o.ToRotationPtrOutputWithContext(context.Background())
}

func (o RotationOutput) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Rotation) *Rotation {
		return &v
	}).(RotationPtrOutput)
}

func (o RotationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RotationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Rotation) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RotationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RotationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Rotation) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RotationPtrOutput struct{ *pulumi.OutputState }

func (RotationPtrOutput) ElementType() reflect.Type {
	return rotationPtrType
}

func (o RotationPtrOutput) ToRotationPtrOutput() RotationPtrOutput {
	return o
}

func (o RotationPtrOutput) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return o
}

func (o RotationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RotationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Rotation) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o RotationPtrOutput) Elem() RotationOutput {
	return o.ApplyT(func(v *Rotation) Rotation {
		var ret Rotation
		if v != nil {
			ret = *v
		}
		return ret
	}).(RotationOutput)
}

// RotationInput is an input type that accepts RotationArgs and RotationOutput values.
// You can construct a concrete instance of `RotationInput` via:
//
//          RotationArgs{...}
type RotationInput interface {
	pulumi.Input

	ToRotationOutput() RotationOutput
	ToRotationOutputWithContext(context.Context) RotationOutput
}

var rotationPtrType = reflect.TypeOf((**Rotation)(nil)).Elem()

type RotationPtrInput interface {
	pulumi.Input

	ToRotationPtrOutput() RotationPtrOutput
	ToRotationPtrOutputWithContext(context.Context) RotationPtrOutput
}

type rotationPtr string

func RotationPtr(v string) RotationPtrInput {
	return (*rotationPtr)(&v)
}

func (*rotationPtr) ElementType() reflect.Type {
	return rotationPtrType
}

func (in *rotationPtr) ToRotationPtrOutput() RotationPtrOutput {
	return pulumi.ToOutput(in).(RotationPtrOutput)
}

func (in *rotationPtr) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RotationPtrOutput)
}

// The type of the storage account.
type StorageAccountType string

const (
	// The primary storage account for the Media Services account.
	StorageAccountTypePrimary = StorageAccountType("Primary")
	// A secondary storage account for the Media Services account.
	StorageAccountTypeSecondary = StorageAccountType("Secondary")
)

func (StorageAccountType) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountType)(nil)).Elem()
}

func (e StorageAccountType) ToStorageAccountTypeOutput() StorageAccountTypeOutput {
	return pulumi.ToOutput(e).(StorageAccountTypeOutput)
}

func (e StorageAccountType) ToStorageAccountTypeOutputWithContext(ctx context.Context) StorageAccountTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StorageAccountTypeOutput)
}

func (e StorageAccountType) ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput {
	return e.ToStorageAccountTypePtrOutputWithContext(context.Background())
}

func (e StorageAccountType) ToStorageAccountTypePtrOutputWithContext(ctx context.Context) StorageAccountTypePtrOutput {
	return StorageAccountType(e).ToStorageAccountTypeOutputWithContext(ctx).ToStorageAccountTypePtrOutputWithContext(ctx)
}

func (e StorageAccountType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageAccountType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageAccountType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StorageAccountType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StorageAccountTypeOutput struct{ *pulumi.OutputState }

func (StorageAccountTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountType)(nil)).Elem()
}

func (o StorageAccountTypeOutput) ToStorageAccountTypeOutput() StorageAccountTypeOutput {
	return o
}

func (o StorageAccountTypeOutput) ToStorageAccountTypeOutputWithContext(ctx context.Context) StorageAccountTypeOutput {
	return o
}

func (o StorageAccountTypeOutput) ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput {
	return o.ToStorageAccountTypePtrOutputWithContext(context.Background())
}

func (o StorageAccountTypeOutput) ToStorageAccountTypePtrOutputWithContext(ctx context.Context) StorageAccountTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageAccountType) *StorageAccountType {
		return &v
	}).(StorageAccountTypePtrOutput)
}

func (o StorageAccountTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StorageAccountTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StorageAccountType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StorageAccountTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StorageAccountTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StorageAccountType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StorageAccountTypePtrOutput struct{ *pulumi.OutputState }

func (StorageAccountTypePtrOutput) ElementType() reflect.Type {
	return storageAccountTypePtrType
}

func (o StorageAccountTypePtrOutput) ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput {
	return o
}

func (o StorageAccountTypePtrOutput) ToStorageAccountTypePtrOutputWithContext(ctx context.Context) StorageAccountTypePtrOutput {
	return o
}

func (o StorageAccountTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StorageAccountTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StorageAccountType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o StorageAccountTypePtrOutput) Elem() StorageAccountTypeOutput {
	return o.ApplyT(func(v *StorageAccountType) StorageAccountType {
		var ret StorageAccountType
		if v != nil {
			ret = *v
		}
		return ret
	}).(StorageAccountTypeOutput)
}

// StorageAccountTypeInput is an input type that accepts StorageAccountTypeArgs and StorageAccountTypeOutput values.
// You can construct a concrete instance of `StorageAccountTypeInput` via:
//
//          StorageAccountTypeArgs{...}
type StorageAccountTypeInput interface {
	pulumi.Input

	ToStorageAccountTypeOutput() StorageAccountTypeOutput
	ToStorageAccountTypeOutputWithContext(context.Context) StorageAccountTypeOutput
}

var storageAccountTypePtrType = reflect.TypeOf((**StorageAccountType)(nil)).Elem()

type StorageAccountTypePtrInput interface {
	pulumi.Input

	ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput
	ToStorageAccountTypePtrOutputWithContext(context.Context) StorageAccountTypePtrOutput
}

type storageAccountTypePtr string

func StorageAccountTypePtr(v string) StorageAccountTypePtrInput {
	return (*storageAccountTypePtr)(&v)
}

func (*storageAccountTypePtr) ElementType() reflect.Type {
	return storageAccountTypePtrType
}

func (in *storageAccountTypePtr) ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput {
	return pulumi.ToOutput(in).(StorageAccountTypePtrOutput)
}

func (in *storageAccountTypePtr) ToStorageAccountTypePtrOutputWithContext(ctx context.Context) StorageAccountTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StorageAccountTypePtrOutput)
}

type StorageAuthentication string

const (
	// System authentication.
	StorageAuthenticationSystem = StorageAuthentication("System")
	// Managed Identity authentication.
	StorageAuthenticationManagedIdentity = StorageAuthentication("ManagedIdentity")
)

func (StorageAuthentication) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAuthentication)(nil)).Elem()
}

func (e StorageAuthentication) ToStorageAuthenticationOutput() StorageAuthenticationOutput {
	return pulumi.ToOutput(e).(StorageAuthenticationOutput)
}

func (e StorageAuthentication) ToStorageAuthenticationOutputWithContext(ctx context.Context) StorageAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StorageAuthenticationOutput)
}

func (e StorageAuthentication) ToStorageAuthenticationPtrOutput() StorageAuthenticationPtrOutput {
	return e.ToStorageAuthenticationPtrOutputWithContext(context.Background())
}

func (e StorageAuthentication) ToStorageAuthenticationPtrOutputWithContext(ctx context.Context) StorageAuthenticationPtrOutput {
	return StorageAuthentication(e).ToStorageAuthenticationOutputWithContext(ctx).ToStorageAuthenticationPtrOutputWithContext(ctx)
}

func (e StorageAuthentication) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageAuthentication) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageAuthentication) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StorageAuthentication) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StorageAuthenticationOutput struct{ *pulumi.OutputState }

func (StorageAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAuthentication)(nil)).Elem()
}

func (o StorageAuthenticationOutput) ToStorageAuthenticationOutput() StorageAuthenticationOutput {
	return o
}

func (o StorageAuthenticationOutput) ToStorageAuthenticationOutputWithContext(ctx context.Context) StorageAuthenticationOutput {
	return o
}

func (o StorageAuthenticationOutput) ToStorageAuthenticationPtrOutput() StorageAuthenticationPtrOutput {
	return o.ToStorageAuthenticationPtrOutputWithContext(context.Background())
}

func (o StorageAuthenticationOutput) ToStorageAuthenticationPtrOutputWithContext(ctx context.Context) StorageAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageAuthentication) *StorageAuthentication {
		return &v
	}).(StorageAuthenticationPtrOutput)
}

func (o StorageAuthenticationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StorageAuthenticationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StorageAuthentication) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StorageAuthenticationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StorageAuthenticationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StorageAuthentication) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StorageAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (StorageAuthenticationPtrOutput) ElementType() reflect.Type {
	return storageAuthenticationPtrType
}

func (o StorageAuthenticationPtrOutput) ToStorageAuthenticationPtrOutput() StorageAuthenticationPtrOutput {
	return o
}

func (o StorageAuthenticationPtrOutput) ToStorageAuthenticationPtrOutputWithContext(ctx context.Context) StorageAuthenticationPtrOutput {
	return o
}

func (o StorageAuthenticationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StorageAuthenticationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StorageAuthentication) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o StorageAuthenticationPtrOutput) Elem() StorageAuthenticationOutput {
	return o.ApplyT(func(v *StorageAuthentication) StorageAuthentication {
		var ret StorageAuthentication
		if v != nil {
			ret = *v
		}
		return ret
	}).(StorageAuthenticationOutput)
}

// StorageAuthenticationInput is an input type that accepts StorageAuthenticationArgs and StorageAuthenticationOutput values.
// You can construct a concrete instance of `StorageAuthenticationInput` via:
//
//          StorageAuthenticationArgs{...}
type StorageAuthenticationInput interface {
	pulumi.Input

	ToStorageAuthenticationOutput() StorageAuthenticationOutput
	ToStorageAuthenticationOutputWithContext(context.Context) StorageAuthenticationOutput
}

var storageAuthenticationPtrType = reflect.TypeOf((**StorageAuthentication)(nil)).Elem()

type StorageAuthenticationPtrInput interface {
	pulumi.Input

	ToStorageAuthenticationPtrOutput() StorageAuthenticationPtrOutput
	ToStorageAuthenticationPtrOutputWithContext(context.Context) StorageAuthenticationPtrOutput
}

type storageAuthenticationPtr string

func StorageAuthenticationPtr(v string) StorageAuthenticationPtrInput {
	return (*storageAuthenticationPtr)(&v)
}

func (*storageAuthenticationPtr) ElementType() reflect.Type {
	return storageAuthenticationPtrType
}

func (in *storageAuthenticationPtr) ToStorageAuthenticationPtrOutput() StorageAuthenticationPtrOutput {
	return pulumi.ToOutput(in).(StorageAuthenticationPtrOutput)
}

func (in *storageAuthenticationPtr) ToStorageAuthenticationPtrOutputWithContext(ctx context.Context) StorageAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StorageAuthenticationPtrOutput)
}

type StreamOptionsFlag string

const (
	// Live streaming with no special latency optimizations.
	StreamOptionsFlagDefault = StreamOptionsFlag("Default")
	// The live event provides lower end to end latency by reducing its internal buffers. This could result in more client buffering during playback if network bandwidth is low.
	StreamOptionsFlagLowLatency = StreamOptionsFlag("LowLatency")
)

func (StreamOptionsFlag) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamOptionsFlag)(nil)).Elem()
}

func (e StreamOptionsFlag) ToStreamOptionsFlagOutput() StreamOptionsFlagOutput {
	return pulumi.ToOutput(e).(StreamOptionsFlagOutput)
}

func (e StreamOptionsFlag) ToStreamOptionsFlagOutputWithContext(ctx context.Context) StreamOptionsFlagOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StreamOptionsFlagOutput)
}

func (e StreamOptionsFlag) ToStreamOptionsFlagPtrOutput() StreamOptionsFlagPtrOutput {
	return e.ToStreamOptionsFlagPtrOutputWithContext(context.Background())
}

func (e StreamOptionsFlag) ToStreamOptionsFlagPtrOutputWithContext(ctx context.Context) StreamOptionsFlagPtrOutput {
	return StreamOptionsFlag(e).ToStreamOptionsFlagOutputWithContext(ctx).ToStreamOptionsFlagPtrOutputWithContext(ctx)
}

func (e StreamOptionsFlag) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StreamOptionsFlag) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StreamOptionsFlag) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StreamOptionsFlag) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StreamOptionsFlagOutput struct{ *pulumi.OutputState }

func (StreamOptionsFlagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamOptionsFlag)(nil)).Elem()
}

func (o StreamOptionsFlagOutput) ToStreamOptionsFlagOutput() StreamOptionsFlagOutput {
	return o
}

func (o StreamOptionsFlagOutput) ToStreamOptionsFlagOutputWithContext(ctx context.Context) StreamOptionsFlagOutput {
	return o
}

func (o StreamOptionsFlagOutput) ToStreamOptionsFlagPtrOutput() StreamOptionsFlagPtrOutput {
	return o.ToStreamOptionsFlagPtrOutputWithContext(context.Background())
}

func (o StreamOptionsFlagOutput) ToStreamOptionsFlagPtrOutputWithContext(ctx context.Context) StreamOptionsFlagPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamOptionsFlag) *StreamOptionsFlag {
		return &v
	}).(StreamOptionsFlagPtrOutput)
}

func (o StreamOptionsFlagOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StreamOptionsFlagOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StreamOptionsFlag) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StreamOptionsFlagOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StreamOptionsFlagOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StreamOptionsFlag) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StreamOptionsFlagPtrOutput struct{ *pulumi.OutputState }

func (StreamOptionsFlagPtrOutput) ElementType() reflect.Type {
	return streamOptionsFlagPtrType
}

func (o StreamOptionsFlagPtrOutput) ToStreamOptionsFlagPtrOutput() StreamOptionsFlagPtrOutput {
	return o
}

func (o StreamOptionsFlagPtrOutput) ToStreamOptionsFlagPtrOutputWithContext(ctx context.Context) StreamOptionsFlagPtrOutput {
	return o
}

func (o StreamOptionsFlagPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StreamOptionsFlagPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StreamOptionsFlag) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o StreamOptionsFlagPtrOutput) Elem() StreamOptionsFlagOutput {
	return o.ApplyT(func(v *StreamOptionsFlag) StreamOptionsFlag {
		var ret StreamOptionsFlag
		if v != nil {
			ret = *v
		}
		return ret
	}).(StreamOptionsFlagOutput)
}

// StreamOptionsFlagInput is an input type that accepts StreamOptionsFlagArgs and StreamOptionsFlagOutput values.
// You can construct a concrete instance of `StreamOptionsFlagInput` via:
//
//          StreamOptionsFlagArgs{...}
type StreamOptionsFlagInput interface {
	pulumi.Input

	ToStreamOptionsFlagOutput() StreamOptionsFlagOutput
	ToStreamOptionsFlagOutputWithContext(context.Context) StreamOptionsFlagOutput
}

var streamOptionsFlagPtrType = reflect.TypeOf((**StreamOptionsFlag)(nil)).Elem()

type StreamOptionsFlagPtrInput interface {
	pulumi.Input

	ToStreamOptionsFlagPtrOutput() StreamOptionsFlagPtrOutput
	ToStreamOptionsFlagPtrOutputWithContext(context.Context) StreamOptionsFlagPtrOutput
}

type streamOptionsFlagPtr string

func StreamOptionsFlagPtr(v string) StreamOptionsFlagPtrInput {
	return (*streamOptionsFlagPtr)(&v)
}

func (*streamOptionsFlagPtr) ElementType() reflect.Type {
	return streamOptionsFlagPtrType
}

func (in *streamOptionsFlagPtr) ToStreamOptionsFlagPtrOutput() StreamOptionsFlagPtrOutput {
	return pulumi.ToOutput(in).(StreamOptionsFlagPtrOutput)
}

func (in *streamOptionsFlagPtr) ToStreamOptionsFlagPtrOutputWithContext(ctx context.Context) StreamOptionsFlagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StreamOptionsFlagPtrOutput)
}

// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
type StretchMode string

const (
	// Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video.
	StretchModeNone = StretchMode("None")
	// Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9.
	StretchModeAutoSize = StretchMode("AutoSize")
	// Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
	StretchModeAutoFit = StretchMode("AutoFit")
)

func (StretchMode) ElementType() reflect.Type {
	return reflect.TypeOf((*StretchMode)(nil)).Elem()
}

func (e StretchMode) ToStretchModeOutput() StretchModeOutput {
	return pulumi.ToOutput(e).(StretchModeOutput)
}

func (e StretchMode) ToStretchModeOutputWithContext(ctx context.Context) StretchModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StretchModeOutput)
}

func (e StretchMode) ToStretchModePtrOutput() StretchModePtrOutput {
	return e.ToStretchModePtrOutputWithContext(context.Background())
}

func (e StretchMode) ToStretchModePtrOutputWithContext(ctx context.Context) StretchModePtrOutput {
	return StretchMode(e).ToStretchModeOutputWithContext(ctx).ToStretchModePtrOutputWithContext(ctx)
}

func (e StretchMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StretchMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StretchMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StretchMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StretchModeOutput struct{ *pulumi.OutputState }

func (StretchModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StretchMode)(nil)).Elem()
}

func (o StretchModeOutput) ToStretchModeOutput() StretchModeOutput {
	return o
}

func (o StretchModeOutput) ToStretchModeOutputWithContext(ctx context.Context) StretchModeOutput {
	return o
}

func (o StretchModeOutput) ToStretchModePtrOutput() StretchModePtrOutput {
	return o.ToStretchModePtrOutputWithContext(context.Background())
}

func (o StretchModeOutput) ToStretchModePtrOutputWithContext(ctx context.Context) StretchModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StretchMode) *StretchMode {
		return &v
	}).(StretchModePtrOutput)
}

func (o StretchModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StretchModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StretchMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StretchModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StretchModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StretchMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StretchModePtrOutput struct{ *pulumi.OutputState }

func (StretchModePtrOutput) ElementType() reflect.Type {
	return stretchModePtrType
}

func (o StretchModePtrOutput) ToStretchModePtrOutput() StretchModePtrOutput {
	return o
}

func (o StretchModePtrOutput) ToStretchModePtrOutputWithContext(ctx context.Context) StretchModePtrOutput {
	return o
}

func (o StretchModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StretchModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StretchMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o StretchModePtrOutput) Elem() StretchModeOutput {
	return o.ApplyT(func(v *StretchMode) StretchMode {
		var ret StretchMode
		if v != nil {
			ret = *v
		}
		return ret
	}).(StretchModeOutput)
}

// StretchModeInput is an input type that accepts StretchModeArgs and StretchModeOutput values.
// You can construct a concrete instance of `StretchModeInput` via:
//
//          StretchModeArgs{...}
type StretchModeInput interface {
	pulumi.Input

	ToStretchModeOutput() StretchModeOutput
	ToStretchModeOutputWithContext(context.Context) StretchModeOutput
}

var stretchModePtrType = reflect.TypeOf((**StretchMode)(nil)).Elem()

type StretchModePtrInput interface {
	pulumi.Input

	ToStretchModePtrOutput() StretchModePtrOutput
	ToStretchModePtrOutputWithContext(context.Context) StretchModePtrOutput
}

type stretchModePtr string

func StretchModePtr(v string) StretchModePtrInput {
	return (*stretchModePtr)(&v)
}

func (*stretchModePtr) ElementType() reflect.Type {
	return stretchModePtrType
}

func (in *stretchModePtr) ToStretchModePtrOutput() StretchModePtrOutput {
	return pulumi.ToOutput(in).(StretchModePtrOutput)
}

func (in *stretchModePtr) ToStretchModePtrOutputWithContext(ctx context.Context) StretchModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StretchModePtrOutput)
}

// The TrackAttribute to filter the tracks by.
type TrackAttribute string

const (
	// The bitrate of the track.
	TrackAttributeBitrate = TrackAttribute("Bitrate")
	// The language of the track.
	TrackAttributeLanguage = TrackAttribute("Language")
)

func (TrackAttribute) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackAttribute)(nil)).Elem()
}

func (e TrackAttribute) ToTrackAttributeOutput() TrackAttributeOutput {
	return pulumi.ToOutput(e).(TrackAttributeOutput)
}

func (e TrackAttribute) ToTrackAttributeOutputWithContext(ctx context.Context) TrackAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TrackAttributeOutput)
}

func (e TrackAttribute) ToTrackAttributePtrOutput() TrackAttributePtrOutput {
	return e.ToTrackAttributePtrOutputWithContext(context.Background())
}

func (e TrackAttribute) ToTrackAttributePtrOutputWithContext(ctx context.Context) TrackAttributePtrOutput {
	return TrackAttribute(e).ToTrackAttributeOutputWithContext(ctx).ToTrackAttributePtrOutputWithContext(ctx)
}

func (e TrackAttribute) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrackAttribute) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrackAttribute) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TrackAttribute) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TrackAttributeOutput struct{ *pulumi.OutputState }

func (TrackAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackAttribute)(nil)).Elem()
}

func (o TrackAttributeOutput) ToTrackAttributeOutput() TrackAttributeOutput {
	return o
}

func (o TrackAttributeOutput) ToTrackAttributeOutputWithContext(ctx context.Context) TrackAttributeOutput {
	return o
}

func (o TrackAttributeOutput) ToTrackAttributePtrOutput() TrackAttributePtrOutput {
	return o.ToTrackAttributePtrOutputWithContext(context.Background())
}

func (o TrackAttributeOutput) ToTrackAttributePtrOutputWithContext(ctx context.Context) TrackAttributePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrackAttribute) *TrackAttribute {
		return &v
	}).(TrackAttributePtrOutput)
}

func (o TrackAttributeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrackAttributeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrackAttribute) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrackAttributeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrackAttributeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrackAttribute) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrackAttributePtrOutput struct{ *pulumi.OutputState }

func (TrackAttributePtrOutput) ElementType() reflect.Type {
	return trackAttributePtrType
}

func (o TrackAttributePtrOutput) ToTrackAttributePtrOutput() TrackAttributePtrOutput {
	return o
}

func (o TrackAttributePtrOutput) ToTrackAttributePtrOutputWithContext(ctx context.Context) TrackAttributePtrOutput {
	return o
}

func (o TrackAttributePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrackAttributePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrackAttribute) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o TrackAttributePtrOutput) Elem() TrackAttributeOutput {
	return o.ApplyT(func(v *TrackAttribute) TrackAttribute {
		var ret TrackAttribute
		if v != nil {
			ret = *v
		}
		return ret
	}).(TrackAttributeOutput)
}

// TrackAttributeInput is an input type that accepts TrackAttributeArgs and TrackAttributeOutput values.
// You can construct a concrete instance of `TrackAttributeInput` via:
//
//          TrackAttributeArgs{...}
type TrackAttributeInput interface {
	pulumi.Input

	ToTrackAttributeOutput() TrackAttributeOutput
	ToTrackAttributeOutputWithContext(context.Context) TrackAttributeOutput
}

var trackAttributePtrType = reflect.TypeOf((**TrackAttribute)(nil)).Elem()

type TrackAttributePtrInput interface {
	pulumi.Input

	ToTrackAttributePtrOutput() TrackAttributePtrOutput
	ToTrackAttributePtrOutputWithContext(context.Context) TrackAttributePtrOutput
}

type trackAttributePtr string

func TrackAttributePtr(v string) TrackAttributePtrInput {
	return (*trackAttributePtr)(&v)
}

func (*trackAttributePtr) ElementType() reflect.Type {
	return trackAttributePtrType
}

func (in *trackAttributePtr) ToTrackAttributePtrOutput() TrackAttributePtrOutput {
	return pulumi.ToOutput(in).(TrackAttributePtrOutput)
}

func (in *trackAttributePtr) ToTrackAttributePtrOutputWithContext(ctx context.Context) TrackAttributePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TrackAttributePtrOutput)
}

// Track property condition operation
type TrackPropertyCompareOperation string

const (
	// Unknown track property compare operation
	TrackPropertyCompareOperationUnknown = TrackPropertyCompareOperation("Unknown")
	// Equal operation
	TrackPropertyCompareOperationEqual = TrackPropertyCompareOperation("Equal")
)

func (TrackPropertyCompareOperation) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyCompareOperation)(nil)).Elem()
}

func (e TrackPropertyCompareOperation) ToTrackPropertyCompareOperationOutput() TrackPropertyCompareOperationOutput {
	return pulumi.ToOutput(e).(TrackPropertyCompareOperationOutput)
}

func (e TrackPropertyCompareOperation) ToTrackPropertyCompareOperationOutputWithContext(ctx context.Context) TrackPropertyCompareOperationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TrackPropertyCompareOperationOutput)
}

func (e TrackPropertyCompareOperation) ToTrackPropertyCompareOperationPtrOutput() TrackPropertyCompareOperationPtrOutput {
	return e.ToTrackPropertyCompareOperationPtrOutputWithContext(context.Background())
}

func (e TrackPropertyCompareOperation) ToTrackPropertyCompareOperationPtrOutputWithContext(ctx context.Context) TrackPropertyCompareOperationPtrOutput {
	return TrackPropertyCompareOperation(e).ToTrackPropertyCompareOperationOutputWithContext(ctx).ToTrackPropertyCompareOperationPtrOutputWithContext(ctx)
}

func (e TrackPropertyCompareOperation) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrackPropertyCompareOperation) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrackPropertyCompareOperation) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TrackPropertyCompareOperation) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TrackPropertyCompareOperationOutput struct{ *pulumi.OutputState }

func (TrackPropertyCompareOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyCompareOperation)(nil)).Elem()
}

func (o TrackPropertyCompareOperationOutput) ToTrackPropertyCompareOperationOutput() TrackPropertyCompareOperationOutput {
	return o
}

func (o TrackPropertyCompareOperationOutput) ToTrackPropertyCompareOperationOutputWithContext(ctx context.Context) TrackPropertyCompareOperationOutput {
	return o
}

func (o TrackPropertyCompareOperationOutput) ToTrackPropertyCompareOperationPtrOutput() TrackPropertyCompareOperationPtrOutput {
	return o.ToTrackPropertyCompareOperationPtrOutputWithContext(context.Background())
}

func (o TrackPropertyCompareOperationOutput) ToTrackPropertyCompareOperationPtrOutputWithContext(ctx context.Context) TrackPropertyCompareOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrackPropertyCompareOperation) *TrackPropertyCompareOperation {
		return &v
	}).(TrackPropertyCompareOperationPtrOutput)
}

func (o TrackPropertyCompareOperationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrackPropertyCompareOperationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrackPropertyCompareOperation) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrackPropertyCompareOperationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrackPropertyCompareOperationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrackPropertyCompareOperation) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrackPropertyCompareOperationPtrOutput struct{ *pulumi.OutputState }

func (TrackPropertyCompareOperationPtrOutput) ElementType() reflect.Type {
	return trackPropertyCompareOperationPtrType
}

func (o TrackPropertyCompareOperationPtrOutput) ToTrackPropertyCompareOperationPtrOutput() TrackPropertyCompareOperationPtrOutput {
	return o
}

func (o TrackPropertyCompareOperationPtrOutput) ToTrackPropertyCompareOperationPtrOutputWithContext(ctx context.Context) TrackPropertyCompareOperationPtrOutput {
	return o
}

func (o TrackPropertyCompareOperationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrackPropertyCompareOperationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrackPropertyCompareOperation) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o TrackPropertyCompareOperationPtrOutput) Elem() TrackPropertyCompareOperationOutput {
	return o.ApplyT(func(v *TrackPropertyCompareOperation) TrackPropertyCompareOperation {
		var ret TrackPropertyCompareOperation
		if v != nil {
			ret = *v
		}
		return ret
	}).(TrackPropertyCompareOperationOutput)
}

// TrackPropertyCompareOperationInput is an input type that accepts TrackPropertyCompareOperationArgs and TrackPropertyCompareOperationOutput values.
// You can construct a concrete instance of `TrackPropertyCompareOperationInput` via:
//
//          TrackPropertyCompareOperationArgs{...}
type TrackPropertyCompareOperationInput interface {
	pulumi.Input

	ToTrackPropertyCompareOperationOutput() TrackPropertyCompareOperationOutput
	ToTrackPropertyCompareOperationOutputWithContext(context.Context) TrackPropertyCompareOperationOutput
}

var trackPropertyCompareOperationPtrType = reflect.TypeOf((**TrackPropertyCompareOperation)(nil)).Elem()

type TrackPropertyCompareOperationPtrInput interface {
	pulumi.Input

	ToTrackPropertyCompareOperationPtrOutput() TrackPropertyCompareOperationPtrOutput
	ToTrackPropertyCompareOperationPtrOutputWithContext(context.Context) TrackPropertyCompareOperationPtrOutput
}

type trackPropertyCompareOperationPtr string

func TrackPropertyCompareOperationPtr(v string) TrackPropertyCompareOperationPtrInput {
	return (*trackPropertyCompareOperationPtr)(&v)
}

func (*trackPropertyCompareOperationPtr) ElementType() reflect.Type {
	return trackPropertyCompareOperationPtrType
}

func (in *trackPropertyCompareOperationPtr) ToTrackPropertyCompareOperationPtrOutput() TrackPropertyCompareOperationPtrOutput {
	return pulumi.ToOutput(in).(TrackPropertyCompareOperationPtrOutput)
}

func (in *trackPropertyCompareOperationPtr) ToTrackPropertyCompareOperationPtrOutputWithContext(ctx context.Context) TrackPropertyCompareOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TrackPropertyCompareOperationPtrOutput)
}

// Track property type
type TrackPropertyType string

const (
	// Unknown track property
	TrackPropertyTypeUnknown = TrackPropertyType("Unknown")
	// Track FourCC
	TrackPropertyTypeFourCC = TrackPropertyType("FourCC")
)

func (TrackPropertyType) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyType)(nil)).Elem()
}

func (e TrackPropertyType) ToTrackPropertyTypeOutput() TrackPropertyTypeOutput {
	return pulumi.ToOutput(e).(TrackPropertyTypeOutput)
}

func (e TrackPropertyType) ToTrackPropertyTypeOutputWithContext(ctx context.Context) TrackPropertyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TrackPropertyTypeOutput)
}

func (e TrackPropertyType) ToTrackPropertyTypePtrOutput() TrackPropertyTypePtrOutput {
	return e.ToTrackPropertyTypePtrOutputWithContext(context.Background())
}

func (e TrackPropertyType) ToTrackPropertyTypePtrOutputWithContext(ctx context.Context) TrackPropertyTypePtrOutput {
	return TrackPropertyType(e).ToTrackPropertyTypeOutputWithContext(ctx).ToTrackPropertyTypePtrOutputWithContext(ctx)
}

func (e TrackPropertyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrackPropertyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrackPropertyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TrackPropertyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TrackPropertyTypeOutput struct{ *pulumi.OutputState }

func (TrackPropertyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyType)(nil)).Elem()
}

func (o TrackPropertyTypeOutput) ToTrackPropertyTypeOutput() TrackPropertyTypeOutput {
	return o
}

func (o TrackPropertyTypeOutput) ToTrackPropertyTypeOutputWithContext(ctx context.Context) TrackPropertyTypeOutput {
	return o
}

func (o TrackPropertyTypeOutput) ToTrackPropertyTypePtrOutput() TrackPropertyTypePtrOutput {
	return o.ToTrackPropertyTypePtrOutputWithContext(context.Background())
}

func (o TrackPropertyTypeOutput) ToTrackPropertyTypePtrOutputWithContext(ctx context.Context) TrackPropertyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrackPropertyType) *TrackPropertyType {
		return &v
	}).(TrackPropertyTypePtrOutput)
}

func (o TrackPropertyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrackPropertyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrackPropertyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrackPropertyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrackPropertyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrackPropertyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrackPropertyTypePtrOutput struct{ *pulumi.OutputState }

func (TrackPropertyTypePtrOutput) ElementType() reflect.Type {
	return trackPropertyTypePtrType
}

func (o TrackPropertyTypePtrOutput) ToTrackPropertyTypePtrOutput() TrackPropertyTypePtrOutput {
	return o
}

func (o TrackPropertyTypePtrOutput) ToTrackPropertyTypePtrOutputWithContext(ctx context.Context) TrackPropertyTypePtrOutput {
	return o
}

func (o TrackPropertyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrackPropertyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrackPropertyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o TrackPropertyTypePtrOutput) Elem() TrackPropertyTypeOutput {
	return o.ApplyT(func(v *TrackPropertyType) TrackPropertyType {
		var ret TrackPropertyType
		if v != nil {
			ret = *v
		}
		return ret
	}).(TrackPropertyTypeOutput)
}

// TrackPropertyTypeInput is an input type that accepts TrackPropertyTypeArgs and TrackPropertyTypeOutput values.
// You can construct a concrete instance of `TrackPropertyTypeInput` via:
//
//          TrackPropertyTypeArgs{...}
type TrackPropertyTypeInput interface {
	pulumi.Input

	ToTrackPropertyTypeOutput() TrackPropertyTypeOutput
	ToTrackPropertyTypeOutputWithContext(context.Context) TrackPropertyTypeOutput
}

var trackPropertyTypePtrType = reflect.TypeOf((**TrackPropertyType)(nil)).Elem()

type TrackPropertyTypePtrInput interface {
	pulumi.Input

	ToTrackPropertyTypePtrOutput() TrackPropertyTypePtrOutput
	ToTrackPropertyTypePtrOutputWithContext(context.Context) TrackPropertyTypePtrOutput
}

type trackPropertyTypePtr string

func TrackPropertyTypePtr(v string) TrackPropertyTypePtrInput {
	return (*trackPropertyTypePtr)(&v)
}

func (*trackPropertyTypePtr) ElementType() reflect.Type {
	return trackPropertyTypePtrType
}

func (in *trackPropertyTypePtr) ToTrackPropertyTypePtrOutput() TrackPropertyTypePtrOutput {
	return pulumi.ToOutput(in).(TrackPropertyTypePtrOutput)
}

func (in *trackPropertyTypePtr) ToTrackPropertyTypePtrOutputWithContext(ctx context.Context) TrackPropertyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TrackPropertyTypePtrOutput)
}

// The Video Sync Mode
type VideoSyncMode string

const (
	// This is the default method. Chooses between Cfr and Vfr depending on muxer capabilities. For output format MP4, the default mode is Cfr.
	VideoSyncModeAuto = VideoSyncMode("Auto")
	// The presentation timestamps on frames are passed through from the input file to the output file writer. Recommended when the input source has variable frame rate, and are attempting to produce multiple layers for adaptive streaming in the output which have aligned GOP boundaries. Note: if two or more frames in the input have duplicate timestamps, then the output will also have the same behavior
	VideoSyncModePassthrough = VideoSyncMode("Passthrough")
	// Input frames will be repeated and/or dropped as needed to achieve exactly the requested constant frame rate. Recommended when the output frame rate is explicitly set at a specified value
	VideoSyncModeCfr = VideoSyncMode("Cfr")
	// Similar to the Passthrough mode, but if the input has frames that have duplicate timestamps, then only one frame is passed through to the output, and others are dropped. Recommended when the number of output frames is expected to be equal to the number of input frames. For example, the output is used to calculate a quality metric like PSNR against the input
	VideoSyncModeVfr = VideoSyncMode("Vfr")
)

func (VideoSyncMode) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoSyncMode)(nil)).Elem()
}

func (e VideoSyncMode) ToVideoSyncModeOutput() VideoSyncModeOutput {
	return pulumi.ToOutput(e).(VideoSyncModeOutput)
}

func (e VideoSyncMode) ToVideoSyncModeOutputWithContext(ctx context.Context) VideoSyncModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VideoSyncModeOutput)
}

func (e VideoSyncMode) ToVideoSyncModePtrOutput() VideoSyncModePtrOutput {
	return e.ToVideoSyncModePtrOutputWithContext(context.Background())
}

func (e VideoSyncMode) ToVideoSyncModePtrOutputWithContext(ctx context.Context) VideoSyncModePtrOutput {
	return VideoSyncMode(e).ToVideoSyncModeOutputWithContext(ctx).ToVideoSyncModePtrOutputWithContext(ctx)
}

func (e VideoSyncMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VideoSyncMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VideoSyncMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VideoSyncMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VideoSyncModeOutput struct{ *pulumi.OutputState }

func (VideoSyncModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoSyncMode)(nil)).Elem()
}

func (o VideoSyncModeOutput) ToVideoSyncModeOutput() VideoSyncModeOutput {
	return o
}

func (o VideoSyncModeOutput) ToVideoSyncModeOutputWithContext(ctx context.Context) VideoSyncModeOutput {
	return o
}

func (o VideoSyncModeOutput) ToVideoSyncModePtrOutput() VideoSyncModePtrOutput {
	return o.ToVideoSyncModePtrOutputWithContext(context.Background())
}

func (o VideoSyncModeOutput) ToVideoSyncModePtrOutputWithContext(ctx context.Context) VideoSyncModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VideoSyncMode) *VideoSyncMode {
		return &v
	}).(VideoSyncModePtrOutput)
}

func (o VideoSyncModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VideoSyncModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VideoSyncMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VideoSyncModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VideoSyncModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VideoSyncMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VideoSyncModePtrOutput struct{ *pulumi.OutputState }

func (VideoSyncModePtrOutput) ElementType() reflect.Type {
	return videoSyncModePtrType
}

func (o VideoSyncModePtrOutput) ToVideoSyncModePtrOutput() VideoSyncModePtrOutput {
	return o
}

func (o VideoSyncModePtrOutput) ToVideoSyncModePtrOutputWithContext(ctx context.Context) VideoSyncModePtrOutput {
	return o
}

func (o VideoSyncModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VideoSyncModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VideoSyncMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o VideoSyncModePtrOutput) Elem() VideoSyncModeOutput {
	return o.ApplyT(func(v *VideoSyncMode) VideoSyncMode {
		var ret VideoSyncMode
		if v != nil {
			ret = *v
		}
		return ret
	}).(VideoSyncModeOutput)
}

// VideoSyncModeInput is an input type that accepts VideoSyncModeArgs and VideoSyncModeOutput values.
// You can construct a concrete instance of `VideoSyncModeInput` via:
//
//          VideoSyncModeArgs{...}
type VideoSyncModeInput interface {
	pulumi.Input

	ToVideoSyncModeOutput() VideoSyncModeOutput
	ToVideoSyncModeOutputWithContext(context.Context) VideoSyncModeOutput
}

var videoSyncModePtrType = reflect.TypeOf((**VideoSyncMode)(nil)).Elem()

type VideoSyncModePtrInput interface {
	pulumi.Input

	ToVideoSyncModePtrOutput() VideoSyncModePtrOutput
	ToVideoSyncModePtrOutputWithContext(context.Context) VideoSyncModePtrOutput
}

type videoSyncModePtr string

func VideoSyncModePtr(v string) VideoSyncModePtrInput {
	return (*videoSyncModePtr)(&v)
}

func (*videoSyncModePtr) ElementType() reflect.Type {
	return videoSyncModePtrType
}

func (in *videoSyncModePtr) ToVideoSyncModePtrOutput() VideoSyncModePtrOutput {
	return pulumi.ToOutput(in).(VideoSyncModePtrOutput)
}

func (in *videoSyncModePtr) ToVideoSyncModePtrOutputWithContext(ctx context.Context) VideoSyncModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VideoSyncModePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AacAudioProfileOutput{})
	pulumi.RegisterOutputType(AacAudioProfilePtrOutput{})
	pulumi.RegisterOutputType(AccountEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(AccountEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(AnalysisResolutionOutput{})
	pulumi.RegisterOutputType(AnalysisResolutionPtrOutput{})
	pulumi.RegisterOutputType(AssetContainerPermissionOutput{})
	pulumi.RegisterOutputType(AssetContainerPermissionPtrOutput{})
	pulumi.RegisterOutputType(AttributeFilterOutput{})
	pulumi.RegisterOutputType(AttributeFilterPtrOutput{})
	pulumi.RegisterOutputType(AudioAnalysisModeOutput{})
	pulumi.RegisterOutputType(AudioAnalysisModePtrOutput{})
	pulumi.RegisterOutputType(BlurTypeOutput{})
	pulumi.RegisterOutputType(BlurTypePtrOutput{})
	pulumi.RegisterOutputType(ChannelMappingOutput{})
	pulumi.RegisterOutputType(ChannelMappingPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyFairPlayRentalAndLeaseKeyTypeOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyFairPlayRentalAndLeaseKeyTypePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyContentTypeOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyContentTypePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyLicenseTypeOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyLicenseTypePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyUnknownOutputPassingOptionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyUnknownOutputPassingOptionPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyRestrictionTokenTypeOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyRestrictionTokenTypePtrOutput{})
	pulumi.RegisterOutputType(DeinterlaceModeOutput{})
	pulumi.RegisterOutputType(DeinterlaceModePtrOutput{})
	pulumi.RegisterOutputType(DeinterlaceParityOutput{})
	pulumi.RegisterOutputType(DeinterlaceParityPtrOutput{})
	pulumi.RegisterOutputType(EncoderNamedPresetOutput{})
	pulumi.RegisterOutputType(EncoderNamedPresetPtrOutput{})
	pulumi.RegisterOutputType(EntropyModeOutput{})
	pulumi.RegisterOutputType(EntropyModePtrOutput{})
	pulumi.RegisterOutputType(FaceRedactorModeOutput{})
	pulumi.RegisterOutputType(FaceRedactorModePtrOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyCompareOperationOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyCompareOperationPtrOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyTypeOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyTypePtrOutput{})
	pulumi.RegisterOutputType(H264ComplexityOutput{})
	pulumi.RegisterOutputType(H264ComplexityPtrOutput{})
	pulumi.RegisterOutputType(H264VideoProfileOutput{})
	pulumi.RegisterOutputType(H264VideoProfilePtrOutput{})
	pulumi.RegisterOutputType(H265ComplexityOutput{})
	pulumi.RegisterOutputType(H265ComplexityPtrOutput{})
	pulumi.RegisterOutputType(H265VideoProfileOutput{})
	pulumi.RegisterOutputType(H265VideoProfilePtrOutput{})
	pulumi.RegisterOutputType(InsightsTypeOutput{})
	pulumi.RegisterOutputType(InsightsTypePtrOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingTypeOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingTypePtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputProtocolOutput{})
	pulumi.RegisterOutputType(LiveEventInputProtocolPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityTypeOutput{})
	pulumi.RegisterOutputType(ManagedIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(MediaGraphRtspTransportOutput{})
	pulumi.RegisterOutputType(MediaGraphRtspTransportPtrOutput{})
	pulumi.RegisterOutputType(OnErrorTypeOutput{})
	pulumi.RegisterOutputType(OnErrorTypePtrOutput{})
	pulumi.RegisterOutputType(PriorityOutput{})
	pulumi.RegisterOutputType(PriorityPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointServiceConnectionStatusOutput{})
	pulumi.RegisterOutputType(PrivateEndpointServiceConnectionStatusPtrOutput{})
	pulumi.RegisterOutputType(RotationOutput{})
	pulumi.RegisterOutputType(RotationPtrOutput{})
	pulumi.RegisterOutputType(StorageAccountTypeOutput{})
	pulumi.RegisterOutputType(StorageAccountTypePtrOutput{})
	pulumi.RegisterOutputType(StorageAuthenticationOutput{})
	pulumi.RegisterOutputType(StorageAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(StreamOptionsFlagOutput{})
	pulumi.RegisterOutputType(StreamOptionsFlagPtrOutput{})
	pulumi.RegisterOutputType(StretchModeOutput{})
	pulumi.RegisterOutputType(StretchModePtrOutput{})
	pulumi.RegisterOutputType(TrackAttributeOutput{})
	pulumi.RegisterOutputType(TrackAttributePtrOutput{})
	pulumi.RegisterOutputType(TrackPropertyCompareOperationOutput{})
	pulumi.RegisterOutputType(TrackPropertyCompareOperationPtrOutput{})
	pulumi.RegisterOutputType(TrackPropertyTypeOutput{})
	pulumi.RegisterOutputType(TrackPropertyTypePtrOutput{})
	pulumi.RegisterOutputType(VideoSyncModeOutput{})
	pulumi.RegisterOutputType(VideoSyncModePtrOutput{})
}
