// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20151001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The properties for a Media Services REST API endpoint.
type ApiEndpointInvokeResponse struct {
	// The Media Services REST endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// The version of Media Services REST API.
	MajorVersion *string `pulumi:"majorVersion"`
}

// ApiEndpointInvokeResponseInput is an input type that accepts ApiEndpointInvokeResponseArgs and ApiEndpointInvokeResponseOutput values.
// You can construct a concrete instance of `ApiEndpointInvokeResponseInput` via:
//
//          ApiEndpointInvokeResponseArgs{...}
type ApiEndpointInvokeResponseInput interface {
	pulumi.Input

	ToApiEndpointInvokeResponseOutput() ApiEndpointInvokeResponseOutput
	ToApiEndpointInvokeResponseOutputWithContext(context.Context) ApiEndpointInvokeResponseOutput
}

// The properties for a Media Services REST API endpoint.
type ApiEndpointInvokeResponseArgs struct {
	// The Media Services REST endpoint.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The version of Media Services REST API.
	MajorVersion pulumi.StringPtrInput `pulumi:"majorVersion"`
}

func (ApiEndpointInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEndpointInvokeResponse)(nil)).Elem()
}

func (i ApiEndpointInvokeResponseArgs) ToApiEndpointInvokeResponseOutput() ApiEndpointInvokeResponseOutput {
	return i.ToApiEndpointInvokeResponseOutputWithContext(context.Background())
}

func (i ApiEndpointInvokeResponseArgs) ToApiEndpointInvokeResponseOutputWithContext(ctx context.Context) ApiEndpointInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEndpointInvokeResponseOutput)
}

// ApiEndpointInvokeResponseArrayInput is an input type that accepts ApiEndpointInvokeResponseArray and ApiEndpointInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ApiEndpointInvokeResponseArrayInput` via:
//
//          ApiEndpointInvokeResponseArray{ ApiEndpointInvokeResponseArgs{...} }
type ApiEndpointInvokeResponseArrayInput interface {
	pulumi.Input

	ToApiEndpointInvokeResponseArrayOutput() ApiEndpointInvokeResponseArrayOutput
	ToApiEndpointInvokeResponseArrayOutputWithContext(context.Context) ApiEndpointInvokeResponseArrayOutput
}

type ApiEndpointInvokeResponseArray []ApiEndpointInvokeResponseInput

func (ApiEndpointInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiEndpointInvokeResponse)(nil)).Elem()
}

func (i ApiEndpointInvokeResponseArray) ToApiEndpointInvokeResponseArrayOutput() ApiEndpointInvokeResponseArrayOutput {
	return i.ToApiEndpointInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ApiEndpointInvokeResponseArray) ToApiEndpointInvokeResponseArrayOutputWithContext(ctx context.Context) ApiEndpointInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEndpointInvokeResponseArrayOutput)
}

// The properties for a Media Services REST API endpoint.
type ApiEndpointInvokeResponseOutput struct{ *pulumi.OutputState }

func (ApiEndpointInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEndpointInvokeResponse)(nil)).Elem()
}

func (o ApiEndpointInvokeResponseOutput) ToApiEndpointInvokeResponseOutput() ApiEndpointInvokeResponseOutput {
	return o
}

func (o ApiEndpointInvokeResponseOutput) ToApiEndpointInvokeResponseOutputWithContext(ctx context.Context) ApiEndpointInvokeResponseOutput {
	return o
}

// The Media Services REST endpoint.
func (o ApiEndpointInvokeResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiEndpointInvokeResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The version of Media Services REST API.
func (o ApiEndpointInvokeResponseOutput) MajorVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiEndpointInvokeResponse) *string { return v.MajorVersion }).(pulumi.StringPtrOutput)
}

type ApiEndpointInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ApiEndpointInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiEndpointInvokeResponse)(nil)).Elem()
}

func (o ApiEndpointInvokeResponseArrayOutput) ToApiEndpointInvokeResponseArrayOutput() ApiEndpointInvokeResponseArrayOutput {
	return o
}

func (o ApiEndpointInvokeResponseArrayOutput) ToApiEndpointInvokeResponseArrayOutputWithContext(ctx context.Context) ApiEndpointInvokeResponseArrayOutput {
	return o
}

func (o ApiEndpointInvokeResponseArrayOutput) Index(i pulumi.IntInput) ApiEndpointInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiEndpointInvokeResponse {
		return vs[0].([]ApiEndpointInvokeResponse)[vs[1].(int)]
	}).(ApiEndpointInvokeResponseOutput)
}

// The properties for a Media Services REST API endpoint.
type ApiEndpointResponse struct {
	// The Media Services REST endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// The version of Media Services REST API.
	MajorVersion *string `pulumi:"majorVersion"`
}

// ApiEndpointResponseInput is an input type that accepts ApiEndpointResponseArgs and ApiEndpointResponseOutput values.
// You can construct a concrete instance of `ApiEndpointResponseInput` via:
//
//          ApiEndpointResponseArgs{...}
type ApiEndpointResponseInput interface {
	pulumi.Input

	ToApiEndpointResponseOutput() ApiEndpointResponseOutput
	ToApiEndpointResponseOutputWithContext(context.Context) ApiEndpointResponseOutput
}

// The properties for a Media Services REST API endpoint.
type ApiEndpointResponseArgs struct {
	// The Media Services REST endpoint.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The version of Media Services REST API.
	MajorVersion pulumi.StringPtrInput `pulumi:"majorVersion"`
}

func (ApiEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEndpointResponse)(nil)).Elem()
}

func (i ApiEndpointResponseArgs) ToApiEndpointResponseOutput() ApiEndpointResponseOutput {
	return i.ToApiEndpointResponseOutputWithContext(context.Background())
}

func (i ApiEndpointResponseArgs) ToApiEndpointResponseOutputWithContext(ctx context.Context) ApiEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEndpointResponseOutput)
}

// ApiEndpointResponseArrayInput is an input type that accepts ApiEndpointResponseArray and ApiEndpointResponseArrayOutput values.
// You can construct a concrete instance of `ApiEndpointResponseArrayInput` via:
//
//          ApiEndpointResponseArray{ ApiEndpointResponseArgs{...} }
type ApiEndpointResponseArrayInput interface {
	pulumi.Input

	ToApiEndpointResponseArrayOutput() ApiEndpointResponseArrayOutput
	ToApiEndpointResponseArrayOutputWithContext(context.Context) ApiEndpointResponseArrayOutput
}

type ApiEndpointResponseArray []ApiEndpointResponseInput

func (ApiEndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiEndpointResponse)(nil)).Elem()
}

func (i ApiEndpointResponseArray) ToApiEndpointResponseArrayOutput() ApiEndpointResponseArrayOutput {
	return i.ToApiEndpointResponseArrayOutputWithContext(context.Background())
}

func (i ApiEndpointResponseArray) ToApiEndpointResponseArrayOutputWithContext(ctx context.Context) ApiEndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEndpointResponseArrayOutput)
}

// The properties for a Media Services REST API endpoint.
type ApiEndpointResponseOutput struct{ *pulumi.OutputState }

func (ApiEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEndpointResponse)(nil)).Elem()
}

func (o ApiEndpointResponseOutput) ToApiEndpointResponseOutput() ApiEndpointResponseOutput {
	return o
}

func (o ApiEndpointResponseOutput) ToApiEndpointResponseOutputWithContext(ctx context.Context) ApiEndpointResponseOutput {
	return o
}

// The Media Services REST endpoint.
func (o ApiEndpointResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiEndpointResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The version of Media Services REST API.
func (o ApiEndpointResponseOutput) MajorVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiEndpointResponse) *string { return v.MajorVersion }).(pulumi.StringPtrOutput)
}

type ApiEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (ApiEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiEndpointResponse)(nil)).Elem()
}

func (o ApiEndpointResponseArrayOutput) ToApiEndpointResponseArrayOutput() ApiEndpointResponseArrayOutput {
	return o
}

func (o ApiEndpointResponseArrayOutput) ToApiEndpointResponseArrayOutputWithContext(ctx context.Context) ApiEndpointResponseArrayOutput {
	return o
}

func (o ApiEndpointResponseArrayOutput) Index(i pulumi.IntInput) ApiEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiEndpointResponse {
		return vs[0].([]ApiEndpointResponse)[vs[1].(int)]
	}).(ApiEndpointResponseOutput)
}

// The properties of a storage account associated with this resource.
type StorageAccount struct {
	// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
	Id string `pulumi:"id"`
	// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
	IsPrimary bool `pulumi:"isPrimary"`
}

// StorageAccountInput is an input type that accepts StorageAccountArgs and StorageAccountOutput values.
// You can construct a concrete instance of `StorageAccountInput` via:
//
//          StorageAccountArgs{...}
type StorageAccountInput interface {
	pulumi.Input

	ToStorageAccountOutput() StorageAccountOutput
	ToStorageAccountOutputWithContext(context.Context) StorageAccountOutput
}

// The properties of a storage account associated with this resource.
type StorageAccountArgs struct {
	// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
	Id pulumi.StringInput `pulumi:"id"`
	// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
}

func (StorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (i StorageAccountArgs) ToStorageAccountOutput() StorageAccountOutput {
	return i.ToStorageAccountOutputWithContext(context.Background())
}

func (i StorageAccountArgs) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountOutput)
}

// StorageAccountArrayInput is an input type that accepts StorageAccountArray and StorageAccountArrayOutput values.
// You can construct a concrete instance of `StorageAccountArrayInput` via:
//
//          StorageAccountArray{ StorageAccountArgs{...} }
type StorageAccountArrayInput interface {
	pulumi.Input

	ToStorageAccountArrayOutput() StorageAccountArrayOutput
	ToStorageAccountArrayOutputWithContext(context.Context) StorageAccountArrayOutput
}

type StorageAccountArray []StorageAccountInput

func (StorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (i StorageAccountArray) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return i.ToStorageAccountArrayOutputWithContext(context.Background())
}

func (i StorageAccountArray) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountArrayOutput)
}

// The properties of a storage account associated with this resource.
type StorageAccountOutput struct{ *pulumi.OutputState }

func (StorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (o StorageAccountOutput) ToStorageAccountOutput() StorageAccountOutput {
	return o
}

func (o StorageAccountOutput) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return o
}

// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
func (o StorageAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccount) string { return v.Id }).(pulumi.StringOutput)
}

// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
func (o StorageAccountOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v StorageAccount) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

type StorageAccountArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) Index(i pulumi.IntInput) StorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccount {
		return vs[0].([]StorageAccount)[vs[1].(int)]
	}).(StorageAccountOutput)
}

// The properties of a storage account associated with this resource.
type StorageAccountInvokeResponse struct {
	// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
	Id string `pulumi:"id"`
	// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
	IsPrimary bool `pulumi:"isPrimary"`
}

// StorageAccountInvokeResponseInput is an input type that accepts StorageAccountInvokeResponseArgs and StorageAccountInvokeResponseOutput values.
// You can construct a concrete instance of `StorageAccountInvokeResponseInput` via:
//
//          StorageAccountInvokeResponseArgs{...}
type StorageAccountInvokeResponseInput interface {
	pulumi.Input

	ToStorageAccountInvokeResponseOutput() StorageAccountInvokeResponseOutput
	ToStorageAccountInvokeResponseOutputWithContext(context.Context) StorageAccountInvokeResponseOutput
}

// The properties of a storage account associated with this resource.
type StorageAccountInvokeResponseArgs struct {
	// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
	Id pulumi.StringInput `pulumi:"id"`
	// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
}

func (StorageAccountInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountInvokeResponse)(nil)).Elem()
}

func (i StorageAccountInvokeResponseArgs) ToStorageAccountInvokeResponseOutput() StorageAccountInvokeResponseOutput {
	return i.ToStorageAccountInvokeResponseOutputWithContext(context.Background())
}

func (i StorageAccountInvokeResponseArgs) ToStorageAccountInvokeResponseOutputWithContext(ctx context.Context) StorageAccountInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountInvokeResponseOutput)
}

// StorageAccountInvokeResponseArrayInput is an input type that accepts StorageAccountInvokeResponseArray and StorageAccountInvokeResponseArrayOutput values.
// You can construct a concrete instance of `StorageAccountInvokeResponseArrayInput` via:
//
//          StorageAccountInvokeResponseArray{ StorageAccountInvokeResponseArgs{...} }
type StorageAccountInvokeResponseArrayInput interface {
	pulumi.Input

	ToStorageAccountInvokeResponseArrayOutput() StorageAccountInvokeResponseArrayOutput
	ToStorageAccountInvokeResponseArrayOutputWithContext(context.Context) StorageAccountInvokeResponseArrayOutput
}

type StorageAccountInvokeResponseArray []StorageAccountInvokeResponseInput

func (StorageAccountInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountInvokeResponse)(nil)).Elem()
}

func (i StorageAccountInvokeResponseArray) ToStorageAccountInvokeResponseArrayOutput() StorageAccountInvokeResponseArrayOutput {
	return i.ToStorageAccountInvokeResponseArrayOutputWithContext(context.Background())
}

func (i StorageAccountInvokeResponseArray) ToStorageAccountInvokeResponseArrayOutputWithContext(ctx context.Context) StorageAccountInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountInvokeResponseArrayOutput)
}

// The properties of a storage account associated with this resource.
type StorageAccountInvokeResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountInvokeResponse)(nil)).Elem()
}

func (o StorageAccountInvokeResponseOutput) ToStorageAccountInvokeResponseOutput() StorageAccountInvokeResponseOutput {
	return o
}

func (o StorageAccountInvokeResponseOutput) ToStorageAccountInvokeResponseOutputWithContext(ctx context.Context) StorageAccountInvokeResponseOutput {
	return o
}

// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
func (o StorageAccountInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccountInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
func (o StorageAccountInvokeResponseOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v StorageAccountInvokeResponse) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

type StorageAccountInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountInvokeResponse)(nil)).Elem()
}

func (o StorageAccountInvokeResponseArrayOutput) ToStorageAccountInvokeResponseArrayOutput() StorageAccountInvokeResponseArrayOutput {
	return o
}

func (o StorageAccountInvokeResponseArrayOutput) ToStorageAccountInvokeResponseArrayOutputWithContext(ctx context.Context) StorageAccountInvokeResponseArrayOutput {
	return o
}

func (o StorageAccountInvokeResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountInvokeResponse {
		return vs[0].([]StorageAccountInvokeResponse)[vs[1].(int)]
	}).(StorageAccountInvokeResponseOutput)
}

// The properties of a storage account associated with this resource.
type StorageAccountResponse struct {
	// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
	Id string `pulumi:"id"`
	// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
	IsPrimary bool `pulumi:"isPrimary"`
}

// StorageAccountResponseInput is an input type that accepts StorageAccountResponseArgs and StorageAccountResponseOutput values.
// You can construct a concrete instance of `StorageAccountResponseInput` via:
//
//          StorageAccountResponseArgs{...}
type StorageAccountResponseInput interface {
	pulumi.Input

	ToStorageAccountResponseOutput() StorageAccountResponseOutput
	ToStorageAccountResponseOutputWithContext(context.Context) StorageAccountResponseOutput
}

// The properties of a storage account associated with this resource.
type StorageAccountResponseArgs struct {
	// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
	Id pulumi.StringInput `pulumi:"id"`
	// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
}

func (StorageAccountResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountResponse)(nil)).Elem()
}

func (i StorageAccountResponseArgs) ToStorageAccountResponseOutput() StorageAccountResponseOutput {
	return i.ToStorageAccountResponseOutputWithContext(context.Background())
}

func (i StorageAccountResponseArgs) ToStorageAccountResponseOutputWithContext(ctx context.Context) StorageAccountResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountResponseOutput)
}

// StorageAccountResponseArrayInput is an input type that accepts StorageAccountResponseArray and StorageAccountResponseArrayOutput values.
// You can construct a concrete instance of `StorageAccountResponseArrayInput` via:
//
//          StorageAccountResponseArray{ StorageAccountResponseArgs{...} }
type StorageAccountResponseArrayInput interface {
	pulumi.Input

	ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput
	ToStorageAccountResponseArrayOutputWithContext(context.Context) StorageAccountResponseArrayOutput
}

type StorageAccountResponseArray []StorageAccountResponseInput

func (StorageAccountResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountResponse)(nil)).Elem()
}

func (i StorageAccountResponseArray) ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput {
	return i.ToStorageAccountResponseArrayOutputWithContext(context.Background())
}

func (i StorageAccountResponseArray) ToStorageAccountResponseArrayOutputWithContext(ctx context.Context) StorageAccountResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountResponseArrayOutput)
}

// The properties of a storage account associated with this resource.
type StorageAccountResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutput() StorageAccountResponseOutput {
	return o
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutputWithContext(ctx context.Context) StorageAccountResponseOutput {
	return o
}

// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
func (o StorageAccountResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccountResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
func (o StorageAccountResponseOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v StorageAccountResponse) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

type StorageAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutputWithContext(ctx context.Context) StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountResponse {
		return vs[0].([]StorageAccountResponse)[vs[1].(int)]
	}).(StorageAccountResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ApiEndpointInvokeResponseOutput{})
	pulumi.RegisterOutputType(ApiEndpointInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ApiEndpointResponseOutput{})
	pulumi.RegisterOutputType(ApiEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountOutput{})
	pulumi.RegisterOutputType(StorageAccountArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountInvokeResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseArrayOutput{})
}
