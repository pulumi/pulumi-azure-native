// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Identity for the resource.
type Identity struct {
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type *string `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//          IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type ResourceIdentityType `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//          IdentityArgs{...}
//
//  or:
//
//          nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyT(func(v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Identity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity { return *v }).(IdentityOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type IdentityInvokeResponse struct {
	// The principal ID of the resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type *string `pulumi:"type"`
}

// IdentityInvokeResponseInput is an input type that accepts IdentityInvokeResponseArgs and IdentityInvokeResponseOutput values.
// You can construct a concrete instance of `IdentityInvokeResponseInput` via:
//
//          IdentityInvokeResponseArgs{...}
type IdentityInvokeResponseInput interface {
	pulumi.Input

	ToIdentityInvokeResponseOutput() IdentityInvokeResponseOutput
	ToIdentityInvokeResponseOutputWithContext(context.Context) IdentityInvokeResponseOutput
}

// Identity for the resource.
type IdentityInvokeResponseArgs struct {
	// The principal ID of the resource identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityInvokeResponse)(nil)).Elem()
}

func (i IdentityInvokeResponseArgs) ToIdentityInvokeResponseOutput() IdentityInvokeResponseOutput {
	return i.ToIdentityInvokeResponseOutputWithContext(context.Background())
}

func (i IdentityInvokeResponseArgs) ToIdentityInvokeResponseOutputWithContext(ctx context.Context) IdentityInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityInvokeResponseOutput)
}

// Identity for the resource.
type IdentityInvokeResponseOutput struct{ *pulumi.OutputState }

func (IdentityInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityInvokeResponse)(nil)).Elem()
}

func (o IdentityInvokeResponseOutput) ToIdentityInvokeResponseOutput() IdentityInvokeResponseOutput {
	return o
}

func (o IdentityInvokeResponseOutput) ToIdentityInvokeResponseOutputWithContext(ctx context.Context) IdentityInvokeResponseOutput {
	return o
}

// The principal ID of the resource identity.
func (o IdentityInvokeResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityInvokeResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the resource identity.
func (o IdentityInvokeResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityInvokeResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityInvokeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityInvokeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of the resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type *string `pulumi:"type"`
}

// IdentityResponseInput is an input type that accepts IdentityResponseArgs and IdentityResponseOutput values.
// You can construct a concrete instance of `IdentityResponseInput` via:
//
//          IdentityResponseArgs{...}
type IdentityResponseInput interface {
	pulumi.Input

	ToIdentityResponseOutput() IdentityResponseOutput
	ToIdentityResponseOutputWithContext(context.Context) IdentityResponseOutput
}

// Identity for the resource.
type IdentityResponseArgs struct {
	// The principal ID of the resource identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (i IdentityResponseArgs) ToIdentityResponseOutput() IdentityResponseOutput {
	return i.ToIdentityResponseOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput)
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput).ToIdentityResponsePtrOutputWithContext(ctx)
}

// IdentityResponsePtrInput is an input type that accepts IdentityResponseArgs, IdentityResponsePtr and IdentityResponsePtrOutput values.
// You can construct a concrete instance of `IdentityResponsePtrInput` via:
//
//          IdentityResponseArgs{...}
//
//  or:
//
//          nil
type IdentityResponsePtrInput interface {
	pulumi.Input

	ToIdentityResponsePtrOutput() IdentityResponsePtrOutput
	ToIdentityResponsePtrOutputWithContext(context.Context) IdentityResponsePtrOutput
}

type identityResponsePtrType IdentityResponseArgs

func IdentityResponsePtr(v *IdentityResponseArgs) IdentityResponsePtrInput {
	return (*identityResponsePtrType)(v)
}

func (*identityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponsePtrOutput)
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o.ApplyT(func(v IdentityResponse) *IdentityResponse {
		return &v
	}).(IdentityResponsePtrOutput)
}

// The principal ID of the resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the resource identity.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse { return *v }).(IdentityResponseOutput)
}

// The principal ID of the resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the resource identity.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessage struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message string `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// NonComplianceMessageInput is an input type that accepts NonComplianceMessageArgs and NonComplianceMessageOutput values.
// You can construct a concrete instance of `NonComplianceMessageInput` via:
//
//          NonComplianceMessageArgs{...}
type NonComplianceMessageInput interface {
	pulumi.Input

	ToNonComplianceMessageOutput() NonComplianceMessageOutput
	ToNonComplianceMessageOutputWithContext(context.Context) NonComplianceMessageOutput
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageArgs struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message pulumi.StringInput `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (NonComplianceMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessage)(nil)).Elem()
}

func (i NonComplianceMessageArgs) ToNonComplianceMessageOutput() NonComplianceMessageOutput {
	return i.ToNonComplianceMessageOutputWithContext(context.Background())
}

func (i NonComplianceMessageArgs) ToNonComplianceMessageOutputWithContext(ctx context.Context) NonComplianceMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageOutput)
}

// NonComplianceMessageArrayInput is an input type that accepts NonComplianceMessageArray and NonComplianceMessageArrayOutput values.
// You can construct a concrete instance of `NonComplianceMessageArrayInput` via:
//
//          NonComplianceMessageArray{ NonComplianceMessageArgs{...} }
type NonComplianceMessageArrayInput interface {
	pulumi.Input

	ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput
	ToNonComplianceMessageArrayOutputWithContext(context.Context) NonComplianceMessageArrayOutput
}

type NonComplianceMessageArray []NonComplianceMessageInput

func (NonComplianceMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessage)(nil)).Elem()
}

func (i NonComplianceMessageArray) ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput {
	return i.ToNonComplianceMessageArrayOutputWithContext(context.Background())
}

func (i NonComplianceMessageArray) ToNonComplianceMessageArrayOutputWithContext(ctx context.Context) NonComplianceMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageArrayOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessage)(nil)).Elem()
}

func (o NonComplianceMessageOutput) ToNonComplianceMessageOutput() NonComplianceMessageOutput {
	return o
}

func (o NonComplianceMessageOutput) ToNonComplianceMessageOutputWithContext(ctx context.Context) NonComplianceMessageOutput {
	return o
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
func (o NonComplianceMessageOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v NonComplianceMessage) string { return v.Message }).(pulumi.StringOutput)
}

// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
func (o NonComplianceMessageOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonComplianceMessage) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type NonComplianceMessageArrayOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessage)(nil)).Elem()
}

func (o NonComplianceMessageArrayOutput) ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput {
	return o
}

func (o NonComplianceMessageArrayOutput) ToNonComplianceMessageArrayOutputWithContext(ctx context.Context) NonComplianceMessageArrayOutput {
	return o
}

func (o NonComplianceMessageArrayOutput) Index(i pulumi.IntInput) NonComplianceMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonComplianceMessage {
		return vs[0].([]NonComplianceMessage)[vs[1].(int)]
	}).(NonComplianceMessageOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageInvokeResponse struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message string `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// NonComplianceMessageInvokeResponseInput is an input type that accepts NonComplianceMessageInvokeResponseArgs and NonComplianceMessageInvokeResponseOutput values.
// You can construct a concrete instance of `NonComplianceMessageInvokeResponseInput` via:
//
//          NonComplianceMessageInvokeResponseArgs{...}
type NonComplianceMessageInvokeResponseInput interface {
	pulumi.Input

	ToNonComplianceMessageInvokeResponseOutput() NonComplianceMessageInvokeResponseOutput
	ToNonComplianceMessageInvokeResponseOutputWithContext(context.Context) NonComplianceMessageInvokeResponseOutput
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageInvokeResponseArgs struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message pulumi.StringInput `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (NonComplianceMessageInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessageInvokeResponse)(nil)).Elem()
}

func (i NonComplianceMessageInvokeResponseArgs) ToNonComplianceMessageInvokeResponseOutput() NonComplianceMessageInvokeResponseOutput {
	return i.ToNonComplianceMessageInvokeResponseOutputWithContext(context.Background())
}

func (i NonComplianceMessageInvokeResponseArgs) ToNonComplianceMessageInvokeResponseOutputWithContext(ctx context.Context) NonComplianceMessageInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageInvokeResponseOutput)
}

// NonComplianceMessageInvokeResponseArrayInput is an input type that accepts NonComplianceMessageInvokeResponseArray and NonComplianceMessageInvokeResponseArrayOutput values.
// You can construct a concrete instance of `NonComplianceMessageInvokeResponseArrayInput` via:
//
//          NonComplianceMessageInvokeResponseArray{ NonComplianceMessageInvokeResponseArgs{...} }
type NonComplianceMessageInvokeResponseArrayInput interface {
	pulumi.Input

	ToNonComplianceMessageInvokeResponseArrayOutput() NonComplianceMessageInvokeResponseArrayOutput
	ToNonComplianceMessageInvokeResponseArrayOutputWithContext(context.Context) NonComplianceMessageInvokeResponseArrayOutput
}

type NonComplianceMessageInvokeResponseArray []NonComplianceMessageInvokeResponseInput

func (NonComplianceMessageInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessageInvokeResponse)(nil)).Elem()
}

func (i NonComplianceMessageInvokeResponseArray) ToNonComplianceMessageInvokeResponseArrayOutput() NonComplianceMessageInvokeResponseArrayOutput {
	return i.ToNonComplianceMessageInvokeResponseArrayOutputWithContext(context.Background())
}

func (i NonComplianceMessageInvokeResponseArray) ToNonComplianceMessageInvokeResponseArrayOutputWithContext(ctx context.Context) NonComplianceMessageInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageInvokeResponseArrayOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageInvokeResponseOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessageInvokeResponse)(nil)).Elem()
}

func (o NonComplianceMessageInvokeResponseOutput) ToNonComplianceMessageInvokeResponseOutput() NonComplianceMessageInvokeResponseOutput {
	return o
}

func (o NonComplianceMessageInvokeResponseOutput) ToNonComplianceMessageInvokeResponseOutputWithContext(ctx context.Context) NonComplianceMessageInvokeResponseOutput {
	return o
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
func (o NonComplianceMessageInvokeResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v NonComplianceMessageInvokeResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
func (o NonComplianceMessageInvokeResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonComplianceMessageInvokeResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type NonComplianceMessageInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessageInvokeResponse)(nil)).Elem()
}

func (o NonComplianceMessageInvokeResponseArrayOutput) ToNonComplianceMessageInvokeResponseArrayOutput() NonComplianceMessageInvokeResponseArrayOutput {
	return o
}

func (o NonComplianceMessageInvokeResponseArrayOutput) ToNonComplianceMessageInvokeResponseArrayOutputWithContext(ctx context.Context) NonComplianceMessageInvokeResponseArrayOutput {
	return o
}

func (o NonComplianceMessageInvokeResponseArrayOutput) Index(i pulumi.IntInput) NonComplianceMessageInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonComplianceMessageInvokeResponse {
		return vs[0].([]NonComplianceMessageInvokeResponse)[vs[1].(int)]
	}).(NonComplianceMessageInvokeResponseOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageResponse struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message string `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// NonComplianceMessageResponseInput is an input type that accepts NonComplianceMessageResponseArgs and NonComplianceMessageResponseOutput values.
// You can construct a concrete instance of `NonComplianceMessageResponseInput` via:
//
//          NonComplianceMessageResponseArgs{...}
type NonComplianceMessageResponseInput interface {
	pulumi.Input

	ToNonComplianceMessageResponseOutput() NonComplianceMessageResponseOutput
	ToNonComplianceMessageResponseOutputWithContext(context.Context) NonComplianceMessageResponseOutput
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageResponseArgs struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message pulumi.StringInput `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (NonComplianceMessageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessageResponse)(nil)).Elem()
}

func (i NonComplianceMessageResponseArgs) ToNonComplianceMessageResponseOutput() NonComplianceMessageResponseOutput {
	return i.ToNonComplianceMessageResponseOutputWithContext(context.Background())
}

func (i NonComplianceMessageResponseArgs) ToNonComplianceMessageResponseOutputWithContext(ctx context.Context) NonComplianceMessageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageResponseOutput)
}

// NonComplianceMessageResponseArrayInput is an input type that accepts NonComplianceMessageResponseArray and NonComplianceMessageResponseArrayOutput values.
// You can construct a concrete instance of `NonComplianceMessageResponseArrayInput` via:
//
//          NonComplianceMessageResponseArray{ NonComplianceMessageResponseArgs{...} }
type NonComplianceMessageResponseArrayInput interface {
	pulumi.Input

	ToNonComplianceMessageResponseArrayOutput() NonComplianceMessageResponseArrayOutput
	ToNonComplianceMessageResponseArrayOutputWithContext(context.Context) NonComplianceMessageResponseArrayOutput
}

type NonComplianceMessageResponseArray []NonComplianceMessageResponseInput

func (NonComplianceMessageResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessageResponse)(nil)).Elem()
}

func (i NonComplianceMessageResponseArray) ToNonComplianceMessageResponseArrayOutput() NonComplianceMessageResponseArrayOutput {
	return i.ToNonComplianceMessageResponseArrayOutputWithContext(context.Background())
}

func (i NonComplianceMessageResponseArray) ToNonComplianceMessageResponseArrayOutputWithContext(ctx context.Context) NonComplianceMessageResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageResponseArrayOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageResponseOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessageResponse)(nil)).Elem()
}

func (o NonComplianceMessageResponseOutput) ToNonComplianceMessageResponseOutput() NonComplianceMessageResponseOutput {
	return o
}

func (o NonComplianceMessageResponseOutput) ToNonComplianceMessageResponseOutputWithContext(ctx context.Context) NonComplianceMessageResponseOutput {
	return o
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
func (o NonComplianceMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v NonComplianceMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
func (o NonComplianceMessageResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonComplianceMessageResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type NonComplianceMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessageResponse)(nil)).Elem()
}

func (o NonComplianceMessageResponseArrayOutput) ToNonComplianceMessageResponseArrayOutput() NonComplianceMessageResponseArrayOutput {
	return o
}

func (o NonComplianceMessageResponseArrayOutput) ToNonComplianceMessageResponseArrayOutputWithContext(ctx context.Context) NonComplianceMessageResponseArrayOutput {
	return o
}

func (o NonComplianceMessageResponseArrayOutput) Index(i pulumi.IntInput) NonComplianceMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonComplianceMessageResponse {
		return vs[0].([]NonComplianceMessageResponse)[vs[1].(int)]
	}).(NonComplianceMessageResponseOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValue struct {
	// The allowed values for the parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueMetadata `pulumi:"metadata"`
	// The data type of the parameter.
	Type *string `pulumi:"type"`
}

// ParameterDefinitionsValueInput is an input type that accepts ParameterDefinitionsValueArgs and ParameterDefinitionsValueOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueInput` via:
//
//          ParameterDefinitionsValueArgs{...}
type ParameterDefinitionsValueInput interface {
	pulumi.Input

	ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput
	ToParameterDefinitionsValueOutputWithContext(context.Context) ParameterDefinitionsValueOutput
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueArgs struct {
	// The allowed values for the parameter.
	AllowedValues pulumi.ArrayInput `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata ParameterDefinitionsValueMetadataPtrInput `pulumi:"metadata"`
	// The data type of the parameter.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ParameterDefinitionsValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValue)(nil)).Elem()
}

func (i ParameterDefinitionsValueArgs) ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput {
	return i.ToParameterDefinitionsValueOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueArgs) ToParameterDefinitionsValueOutputWithContext(ctx context.Context) ParameterDefinitionsValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueOutput)
}

// ParameterDefinitionsValueMapInput is an input type that accepts ParameterDefinitionsValueMap and ParameterDefinitionsValueMapOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMapInput` via:
//
//          ParameterDefinitionsValueMap{ "key": ParameterDefinitionsValueArgs{...} }
type ParameterDefinitionsValueMapInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput
	ToParameterDefinitionsValueMapOutputWithContext(context.Context) ParameterDefinitionsValueMapOutput
}

type ParameterDefinitionsValueMap map[string]ParameterDefinitionsValueInput

func (ParameterDefinitionsValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValue)(nil)).Elem()
}

func (i ParameterDefinitionsValueMap) ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput {
	return i.ToParameterDefinitionsValueMapOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMap) ToParameterDefinitionsValueMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMapOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValue)(nil)).Elem()
}

func (o ParameterDefinitionsValueOutput) ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput {
	return o
}

func (o ParameterDefinitionsValueOutput) ToParameterDefinitionsValueOutputWithContext(ctx context.Context) ParameterDefinitionsValueOutput {
	return o
}

// The allowed values for the parameter.
func (o ParameterDefinitionsValueOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// The default value for the parameter if no value is provided.
func (o ParameterDefinitionsValueOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// General metadata for the parameter.
func (o ParameterDefinitionsValueOutput) Metadata() ParameterDefinitionsValueMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) *ParameterDefinitionsValueMetadata { return v.Metadata }).(ParameterDefinitionsValueMetadataPtrOutput)
}

// The data type of the parameter.
func (o ParameterDefinitionsValueOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValue)(nil)).Elem()
}

func (o ParameterDefinitionsValueMapOutput) ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput {
	return o
}

func (o ParameterDefinitionsValueMapOutput) ToParameterDefinitionsValueMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueMapOutput {
	return o
}

func (o ParameterDefinitionsValueMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionsValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinitionsValue {
		return vs[0].(map[string]ParameterDefinitionsValue)[vs[1].(string)]
	}).(ParameterDefinitionsValueOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueInvokeResponse struct {
	// The allowed values for the parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueInvokeResponseMetadata `pulumi:"metadata"`
	// The data type of the parameter.
	Type *string `pulumi:"type"`
}

// ParameterDefinitionsValueInvokeResponseInput is an input type that accepts ParameterDefinitionsValueInvokeResponseArgs and ParameterDefinitionsValueInvokeResponseOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueInvokeResponseInput` via:
//
//          ParameterDefinitionsValueInvokeResponseArgs{...}
type ParameterDefinitionsValueInvokeResponseInput interface {
	pulumi.Input

	ToParameterDefinitionsValueInvokeResponseOutput() ParameterDefinitionsValueInvokeResponseOutput
	ToParameterDefinitionsValueInvokeResponseOutputWithContext(context.Context) ParameterDefinitionsValueInvokeResponseOutput
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueInvokeResponseArgs struct {
	// The allowed values for the parameter.
	AllowedValues pulumi.ArrayInput `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata ParameterDefinitionsValueInvokeResponseMetadataPtrInput `pulumi:"metadata"`
	// The data type of the parameter.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ParameterDefinitionsValueInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueInvokeResponse)(nil)).Elem()
}

func (i ParameterDefinitionsValueInvokeResponseArgs) ToParameterDefinitionsValueInvokeResponseOutput() ParameterDefinitionsValueInvokeResponseOutput {
	return i.ToParameterDefinitionsValueInvokeResponseOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueInvokeResponseArgs) ToParameterDefinitionsValueInvokeResponseOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueInvokeResponseOutput)
}

// ParameterDefinitionsValueInvokeResponseMapInput is an input type that accepts ParameterDefinitionsValueInvokeResponseMap and ParameterDefinitionsValueInvokeResponseMapOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueInvokeResponseMapInput` via:
//
//          ParameterDefinitionsValueInvokeResponseMap{ "key": ParameterDefinitionsValueInvokeResponseArgs{...} }
type ParameterDefinitionsValueInvokeResponseMapInput interface {
	pulumi.Input

	ToParameterDefinitionsValueInvokeResponseMapOutput() ParameterDefinitionsValueInvokeResponseMapOutput
	ToParameterDefinitionsValueInvokeResponseMapOutputWithContext(context.Context) ParameterDefinitionsValueInvokeResponseMapOutput
}

type ParameterDefinitionsValueInvokeResponseMap map[string]ParameterDefinitionsValueInvokeResponseInput

func (ParameterDefinitionsValueInvokeResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValueInvokeResponse)(nil)).Elem()
}

func (i ParameterDefinitionsValueInvokeResponseMap) ToParameterDefinitionsValueInvokeResponseMapOutput() ParameterDefinitionsValueInvokeResponseMapOutput {
	return i.ToParameterDefinitionsValueInvokeResponseMapOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueInvokeResponseMap) ToParameterDefinitionsValueInvokeResponseMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueInvokeResponseMapOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueInvokeResponseOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueInvokeResponse)(nil)).Elem()
}

func (o ParameterDefinitionsValueInvokeResponseOutput) ToParameterDefinitionsValueInvokeResponseOutput() ParameterDefinitionsValueInvokeResponseOutput {
	return o
}

func (o ParameterDefinitionsValueInvokeResponseOutput) ToParameterDefinitionsValueInvokeResponseOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseOutput {
	return o
}

// The allowed values for the parameter.
func (o ParameterDefinitionsValueInvokeResponseOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponse) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// The default value for the parameter if no value is provided.
func (o ParameterDefinitionsValueInvokeResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// General metadata for the parameter.
func (o ParameterDefinitionsValueInvokeResponseOutput) Metadata() ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponse) *ParameterDefinitionsValueInvokeResponseMetadata {
		return v.Metadata
	}).(ParameterDefinitionsValueInvokeResponseMetadataPtrOutput)
}

// The data type of the parameter.
func (o ParameterDefinitionsValueInvokeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueInvokeResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueInvokeResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValueInvokeResponse)(nil)).Elem()
}

func (o ParameterDefinitionsValueInvokeResponseMapOutput) ToParameterDefinitionsValueInvokeResponseMapOutput() ParameterDefinitionsValueInvokeResponseMapOutput {
	return o
}

func (o ParameterDefinitionsValueInvokeResponseMapOutput) ToParameterDefinitionsValueInvokeResponseMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseMapOutput {
	return o
}

func (o ParameterDefinitionsValueInvokeResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionsValueInvokeResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinitionsValueInvokeResponse {
		return vs[0].(map[string]ParameterDefinitionsValueInvokeResponse)[vs[1].(string)]
	}).(ParameterDefinitionsValueInvokeResponseOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueInvokeResponseMetadata struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions *bool `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description *string `pulumi:"description"`
	// The display name for the parameter.
	DisplayName *string `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType *string `pulumi:"strongType"`
}

// ParameterDefinitionsValueInvokeResponseMetadataInput is an input type that accepts ParameterDefinitionsValueInvokeResponseMetadataArgs and ParameterDefinitionsValueInvokeResponseMetadataOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueInvokeResponseMetadataInput` via:
//
//          ParameterDefinitionsValueInvokeResponseMetadataArgs{...}
type ParameterDefinitionsValueInvokeResponseMetadataInput interface {
	pulumi.Input

	ToParameterDefinitionsValueInvokeResponseMetadataOutput() ParameterDefinitionsValueInvokeResponseMetadataOutput
	ToParameterDefinitionsValueInvokeResponseMetadataOutputWithContext(context.Context) ParameterDefinitionsValueInvokeResponseMetadataOutput
}

// General metadata for the parameter.
type ParameterDefinitionsValueInvokeResponseMetadataArgs struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions pulumi.BoolPtrInput `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name for the parameter.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType pulumi.StringPtrInput `pulumi:"strongType"`
}

func (ParameterDefinitionsValueInvokeResponseMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueInvokeResponseMetadata)(nil)).Elem()
}

func (i ParameterDefinitionsValueInvokeResponseMetadataArgs) ToParameterDefinitionsValueInvokeResponseMetadataOutput() ParameterDefinitionsValueInvokeResponseMetadataOutput {
	return i.ToParameterDefinitionsValueInvokeResponseMetadataOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueInvokeResponseMetadataArgs) ToParameterDefinitionsValueInvokeResponseMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueInvokeResponseMetadataOutput)
}

func (i ParameterDefinitionsValueInvokeResponseMetadataArgs) ToParameterDefinitionsValueInvokeResponseMetadataPtrOutput() ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return i.ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueInvokeResponseMetadataArgs) ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueInvokeResponseMetadataOutput).ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(ctx)
}

// ParameterDefinitionsValueInvokeResponseMetadataPtrInput is an input type that accepts ParameterDefinitionsValueInvokeResponseMetadataArgs, ParameterDefinitionsValueInvokeResponseMetadataPtr and ParameterDefinitionsValueInvokeResponseMetadataPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueInvokeResponseMetadataPtrInput` via:
//
//          ParameterDefinitionsValueInvokeResponseMetadataArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsValueInvokeResponseMetadataPtrInput interface {
	pulumi.Input

	ToParameterDefinitionsValueInvokeResponseMetadataPtrOutput() ParameterDefinitionsValueInvokeResponseMetadataPtrOutput
	ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(context.Context) ParameterDefinitionsValueInvokeResponseMetadataPtrOutput
}

type parameterDefinitionsValueInvokeResponseMetadataPtrType ParameterDefinitionsValueInvokeResponseMetadataArgs

func ParameterDefinitionsValueInvokeResponseMetadataPtr(v *ParameterDefinitionsValueInvokeResponseMetadataArgs) ParameterDefinitionsValueInvokeResponseMetadataPtrInput {
	return (*parameterDefinitionsValueInvokeResponseMetadataPtrType)(v)
}

func (*parameterDefinitionsValueInvokeResponseMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueInvokeResponseMetadata)(nil)).Elem()
}

func (i *parameterDefinitionsValueInvokeResponseMetadataPtrType) ToParameterDefinitionsValueInvokeResponseMetadataPtrOutput() ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return i.ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsValueInvokeResponseMetadataPtrType) ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueInvokeResponseMetadataPtrOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueInvokeResponseMetadataOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueInvokeResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueInvokeResponseMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueInvokeResponseMetadataOutput) ToParameterDefinitionsValueInvokeResponseMetadataOutput() ParameterDefinitionsValueInvokeResponseMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueInvokeResponseMetadataOutput) ToParameterDefinitionsValueInvokeResponseMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueInvokeResponseMetadataOutput) ToParameterDefinitionsValueInvokeResponseMetadataPtrOutput() ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return o.ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsValueInvokeResponseMetadataOutput) ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponseMetadata) *ParameterDefinitionsValueInvokeResponseMetadata {
		return &v
	}).(ParameterDefinitionsValueInvokeResponseMetadataPtrOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueInvokeResponseMetadataOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponseMetadata) *bool { return v.AssignPermissions }).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueInvokeResponseMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponseMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueInvokeResponseMetadataOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponseMetadata) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueInvokeResponseMetadataOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueInvokeResponseMetadata) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueInvokeResponseMetadataPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueInvokeResponseMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueInvokeResponseMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueInvokeResponseMetadataPtrOutput) ToParameterDefinitionsValueInvokeResponseMetadataPtrOutput() ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueInvokeResponseMetadataPtrOutput) ToParameterDefinitionsValueInvokeResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueInvokeResponseMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueInvokeResponseMetadataPtrOutput) Elem() ParameterDefinitionsValueInvokeResponseMetadataOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueInvokeResponseMetadata) ParameterDefinitionsValueInvokeResponseMetadata {
		return *v
	}).(ParameterDefinitionsValueInvokeResponseMetadataOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueInvokeResponseMetadataPtrOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueInvokeResponseMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPermissions
	}).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueInvokeResponseMetadataPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueInvokeResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueInvokeResponseMetadataPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueInvokeResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueInvokeResponseMetadataPtrOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueInvokeResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StrongType
	}).(pulumi.StringPtrOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadata struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions *bool `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description *string `pulumi:"description"`
	// The display name for the parameter.
	DisplayName *string `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType *string `pulumi:"strongType"`
}

// ParameterDefinitionsValueMetadataInput is an input type that accepts ParameterDefinitionsValueMetadataArgs and ParameterDefinitionsValueMetadataOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMetadataInput` via:
//
//          ParameterDefinitionsValueMetadataArgs{...}
type ParameterDefinitionsValueMetadataInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput
	ToParameterDefinitionsValueMetadataOutputWithContext(context.Context) ParameterDefinitionsValueMetadataOutput
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadataArgs struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions pulumi.BoolPtrInput `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name for the parameter.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType pulumi.StringPtrInput `pulumi:"strongType"`
}

func (ParameterDefinitionsValueMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput {
	return i.ToParameterDefinitionsValueMetadataOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataOutput)
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return i.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataOutput).ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx)
}

// ParameterDefinitionsValueMetadataPtrInput is an input type that accepts ParameterDefinitionsValueMetadataArgs, ParameterDefinitionsValueMetadataPtr and ParameterDefinitionsValueMetadataPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMetadataPtrInput` via:
//
//          ParameterDefinitionsValueMetadataArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsValueMetadataPtrInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput
	ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Context) ParameterDefinitionsValueMetadataPtrOutput
}

type parameterDefinitionsValueMetadataPtrType ParameterDefinitionsValueMetadataArgs

func ParameterDefinitionsValueMetadataPtr(v *ParameterDefinitionsValueMetadataArgs) ParameterDefinitionsValueMetadataPtrInput {
	return (*parameterDefinitionsValueMetadataPtrType)(v)
}

func (*parameterDefinitionsValueMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (i *parameterDefinitionsValueMetadataPtrType) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return i.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsValueMetadataPtrType) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataPtrOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadataOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return o.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *ParameterDefinitionsValueMetadata {
		return &v
	}).(ParameterDefinitionsValueMetadataPtrOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueMetadataOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *bool { return v.AssignPermissions }).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueMetadataOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueMetadataOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueMetadataPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueMetadataPtrOutput) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataPtrOutput) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataPtrOutput) Elem() ParameterDefinitionsValueMetadataOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) ParameterDefinitionsValueMetadata { return *v }).(ParameterDefinitionsValueMetadataOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueMetadataPtrOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPermissions
	}).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueMetadataPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueMetadataPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueMetadataPtrOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StrongType
	}).(pulumi.StringPtrOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueResponse struct {
	// The allowed values for the parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueResponseMetadata `pulumi:"metadata"`
	// The data type of the parameter.
	Type *string `pulumi:"type"`
}

// ParameterDefinitionsValueResponseInput is an input type that accepts ParameterDefinitionsValueResponseArgs and ParameterDefinitionsValueResponseOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueResponseInput` via:
//
//          ParameterDefinitionsValueResponseArgs{...}
type ParameterDefinitionsValueResponseInput interface {
	pulumi.Input

	ToParameterDefinitionsValueResponseOutput() ParameterDefinitionsValueResponseOutput
	ToParameterDefinitionsValueResponseOutputWithContext(context.Context) ParameterDefinitionsValueResponseOutput
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueResponseArgs struct {
	// The allowed values for the parameter.
	AllowedValues pulumi.ArrayInput `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata ParameterDefinitionsValueResponseMetadataPtrInput `pulumi:"metadata"`
	// The data type of the parameter.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ParameterDefinitionsValueResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (i ParameterDefinitionsValueResponseArgs) ToParameterDefinitionsValueResponseOutput() ParameterDefinitionsValueResponseOutput {
	return i.ToParameterDefinitionsValueResponseOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueResponseArgs) ToParameterDefinitionsValueResponseOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseOutput)
}

// ParameterDefinitionsValueResponseMapInput is an input type that accepts ParameterDefinitionsValueResponseMap and ParameterDefinitionsValueResponseMapOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueResponseMapInput` via:
//
//          ParameterDefinitionsValueResponseMap{ "key": ParameterDefinitionsValueResponseArgs{...} }
type ParameterDefinitionsValueResponseMapInput interface {
	pulumi.Input

	ToParameterDefinitionsValueResponseMapOutput() ParameterDefinitionsValueResponseMapOutput
	ToParameterDefinitionsValueResponseMapOutputWithContext(context.Context) ParameterDefinitionsValueResponseMapOutput
}

type ParameterDefinitionsValueResponseMap map[string]ParameterDefinitionsValueResponseInput

func (ParameterDefinitionsValueResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (i ParameterDefinitionsValueResponseMap) ToParameterDefinitionsValueResponseMapOutput() ParameterDefinitionsValueResponseMapOutput {
	return i.ToParameterDefinitionsValueResponseMapOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueResponseMap) ToParameterDefinitionsValueResponseMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseMapOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueResponseOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseOutput) ToParameterDefinitionsValueResponseOutput() ParameterDefinitionsValueResponseOutput {
	return o
}

func (o ParameterDefinitionsValueResponseOutput) ToParameterDefinitionsValueResponseOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseOutput {
	return o
}

// The allowed values for the parameter.
func (o ParameterDefinitionsValueResponseOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// The default value for the parameter if no value is provided.
func (o ParameterDefinitionsValueResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// General metadata for the parameter.
func (o ParameterDefinitionsValueResponseOutput) Metadata() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) *ParameterDefinitionsValueResponseMetadata {
		return v.Metadata
	}).(ParameterDefinitionsValueResponseMetadataPtrOutput)
}

// The data type of the parameter.
func (o ParameterDefinitionsValueResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMapOutput) ToParameterDefinitionsValueResponseMapOutput() ParameterDefinitionsValueResponseMapOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMapOutput) ToParameterDefinitionsValueResponseMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMapOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionsValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinitionsValueResponse {
		return vs[0].(map[string]ParameterDefinitionsValueResponse)[vs[1].(string)]
	}).(ParameterDefinitionsValueResponseOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueResponseMetadata struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions *bool `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description *string `pulumi:"description"`
	// The display name for the parameter.
	DisplayName *string `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType *string `pulumi:"strongType"`
}

// ParameterDefinitionsValueResponseMetadataInput is an input type that accepts ParameterDefinitionsValueResponseMetadataArgs and ParameterDefinitionsValueResponseMetadataOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueResponseMetadataInput` via:
//
//          ParameterDefinitionsValueResponseMetadataArgs{...}
type ParameterDefinitionsValueResponseMetadataInput interface {
	pulumi.Input

	ToParameterDefinitionsValueResponseMetadataOutput() ParameterDefinitionsValueResponseMetadataOutput
	ToParameterDefinitionsValueResponseMetadataOutputWithContext(context.Context) ParameterDefinitionsValueResponseMetadataOutput
}

// General metadata for the parameter.
type ParameterDefinitionsValueResponseMetadataArgs struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions pulumi.BoolPtrInput `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name for the parameter.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType pulumi.StringPtrInput `pulumi:"strongType"`
}

func (ParameterDefinitionsValueResponseMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (i ParameterDefinitionsValueResponseMetadataArgs) ToParameterDefinitionsValueResponseMetadataOutput() ParameterDefinitionsValueResponseMetadataOutput {
	return i.ToParameterDefinitionsValueResponseMetadataOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueResponseMetadataArgs) ToParameterDefinitionsValueResponseMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseMetadataOutput)
}

func (i ParameterDefinitionsValueResponseMetadataArgs) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return i.ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueResponseMetadataArgs) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseMetadataOutput).ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx)
}

// ParameterDefinitionsValueResponseMetadataPtrInput is an input type that accepts ParameterDefinitionsValueResponseMetadataArgs, ParameterDefinitionsValueResponseMetadataPtr and ParameterDefinitionsValueResponseMetadataPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueResponseMetadataPtrInput` via:
//
//          ParameterDefinitionsValueResponseMetadataArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsValueResponseMetadataPtrInput interface {
	pulumi.Input

	ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput
	ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput
}

type parameterDefinitionsValueResponseMetadataPtrType ParameterDefinitionsValueResponseMetadataArgs

func ParameterDefinitionsValueResponseMetadataPtr(v *ParameterDefinitionsValueResponseMetadataArgs) ParameterDefinitionsValueResponseMetadataPtrInput {
	return (*parameterDefinitionsValueResponseMetadataPtrType)(v)
}

func (*parameterDefinitionsValueResponseMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (i *parameterDefinitionsValueResponseMetadataPtrType) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return i.ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsValueResponseMetadataPtrType) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseMetadataPtrOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueResponseMetadataOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataOutput() ParameterDefinitionsValueResponseMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o.ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *ParameterDefinitionsValueResponseMetadata {
		return &v
	}).(ParameterDefinitionsValueResponseMetadataPtrOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueResponseMetadataOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *bool { return v.AssignPermissions }).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueResponseMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueResponseMetadataOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueResponseMetadataOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueResponseMetadataPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) Elem() ParameterDefinitionsValueResponseMetadataOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) ParameterDefinitionsValueResponseMetadata {
		return *v
	}).(ParameterDefinitionsValueResponseMetadataOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPermissions
	}).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StrongType
	}).(pulumi.StringPtrOutput)
}

// The value of a parameter.
type ParameterValuesValue struct {
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// ParameterValuesValueInput is an input type that accepts ParameterValuesValueArgs and ParameterValuesValueOutput values.
// You can construct a concrete instance of `ParameterValuesValueInput` via:
//
//          ParameterValuesValueArgs{...}
type ParameterValuesValueInput interface {
	pulumi.Input

	ToParameterValuesValueOutput() ParameterValuesValueOutput
	ToParameterValuesValueOutputWithContext(context.Context) ParameterValuesValueOutput
}

// The value of a parameter.
type ParameterValuesValueArgs struct {
	// The value of the parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (ParameterValuesValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValue)(nil)).Elem()
}

func (i ParameterValuesValueArgs) ToParameterValuesValueOutput() ParameterValuesValueOutput {
	return i.ToParameterValuesValueOutputWithContext(context.Background())
}

func (i ParameterValuesValueArgs) ToParameterValuesValueOutputWithContext(ctx context.Context) ParameterValuesValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueOutput)
}

// ParameterValuesValueMapInput is an input type that accepts ParameterValuesValueMap and ParameterValuesValueMapOutput values.
// You can construct a concrete instance of `ParameterValuesValueMapInput` via:
//
//          ParameterValuesValueMap{ "key": ParameterValuesValueArgs{...} }
type ParameterValuesValueMapInput interface {
	pulumi.Input

	ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput
	ToParameterValuesValueMapOutputWithContext(context.Context) ParameterValuesValueMapOutput
}

type ParameterValuesValueMap map[string]ParameterValuesValueInput

func (ParameterValuesValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValue)(nil)).Elem()
}

func (i ParameterValuesValueMap) ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput {
	return i.ToParameterValuesValueMapOutputWithContext(context.Background())
}

func (i ParameterValuesValueMap) ToParameterValuesValueMapOutputWithContext(ctx context.Context) ParameterValuesValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueMapOutput)
}

// The value of a parameter.
type ParameterValuesValueOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValue)(nil)).Elem()
}

func (o ParameterValuesValueOutput) ToParameterValuesValueOutput() ParameterValuesValueOutput {
	return o
}

func (o ParameterValuesValueOutput) ToParameterValuesValueOutputWithContext(ctx context.Context) ParameterValuesValueOutput {
	return o
}

// The value of the parameter.
func (o ParameterValuesValueOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValuesValue) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValuesValueMapOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValue)(nil)).Elem()
}

func (o ParameterValuesValueMapOutput) ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput {
	return o
}

func (o ParameterValuesValueMapOutput) ToParameterValuesValueMapOutputWithContext(ctx context.Context) ParameterValuesValueMapOutput {
	return o
}

func (o ParameterValuesValueMapOutput) MapIndex(k pulumi.StringInput) ParameterValuesValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValuesValue {
		return vs[0].(map[string]ParameterValuesValue)[vs[1].(string)]
	}).(ParameterValuesValueOutput)
}

// The value of a parameter.
type ParameterValuesValueInvokeResponse struct {
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// ParameterValuesValueInvokeResponseInput is an input type that accepts ParameterValuesValueInvokeResponseArgs and ParameterValuesValueInvokeResponseOutput values.
// You can construct a concrete instance of `ParameterValuesValueInvokeResponseInput` via:
//
//          ParameterValuesValueInvokeResponseArgs{...}
type ParameterValuesValueInvokeResponseInput interface {
	pulumi.Input

	ToParameterValuesValueInvokeResponseOutput() ParameterValuesValueInvokeResponseOutput
	ToParameterValuesValueInvokeResponseOutputWithContext(context.Context) ParameterValuesValueInvokeResponseOutput
}

// The value of a parameter.
type ParameterValuesValueInvokeResponseArgs struct {
	// The value of the parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (ParameterValuesValueInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValueInvokeResponse)(nil)).Elem()
}

func (i ParameterValuesValueInvokeResponseArgs) ToParameterValuesValueInvokeResponseOutput() ParameterValuesValueInvokeResponseOutput {
	return i.ToParameterValuesValueInvokeResponseOutputWithContext(context.Background())
}

func (i ParameterValuesValueInvokeResponseArgs) ToParameterValuesValueInvokeResponseOutputWithContext(ctx context.Context) ParameterValuesValueInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueInvokeResponseOutput)
}

// ParameterValuesValueInvokeResponseMapInput is an input type that accepts ParameterValuesValueInvokeResponseMap and ParameterValuesValueInvokeResponseMapOutput values.
// You can construct a concrete instance of `ParameterValuesValueInvokeResponseMapInput` via:
//
//          ParameterValuesValueInvokeResponseMap{ "key": ParameterValuesValueInvokeResponseArgs{...} }
type ParameterValuesValueInvokeResponseMapInput interface {
	pulumi.Input

	ToParameterValuesValueInvokeResponseMapOutput() ParameterValuesValueInvokeResponseMapOutput
	ToParameterValuesValueInvokeResponseMapOutputWithContext(context.Context) ParameterValuesValueInvokeResponseMapOutput
}

type ParameterValuesValueInvokeResponseMap map[string]ParameterValuesValueInvokeResponseInput

func (ParameterValuesValueInvokeResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValueInvokeResponse)(nil)).Elem()
}

func (i ParameterValuesValueInvokeResponseMap) ToParameterValuesValueInvokeResponseMapOutput() ParameterValuesValueInvokeResponseMapOutput {
	return i.ToParameterValuesValueInvokeResponseMapOutputWithContext(context.Background())
}

func (i ParameterValuesValueInvokeResponseMap) ToParameterValuesValueInvokeResponseMapOutputWithContext(ctx context.Context) ParameterValuesValueInvokeResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueInvokeResponseMapOutput)
}

// The value of a parameter.
type ParameterValuesValueInvokeResponseOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValueInvokeResponse)(nil)).Elem()
}

func (o ParameterValuesValueInvokeResponseOutput) ToParameterValuesValueInvokeResponseOutput() ParameterValuesValueInvokeResponseOutput {
	return o
}

func (o ParameterValuesValueInvokeResponseOutput) ToParameterValuesValueInvokeResponseOutputWithContext(ctx context.Context) ParameterValuesValueInvokeResponseOutput {
	return o
}

// The value of the parameter.
func (o ParameterValuesValueInvokeResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValuesValueInvokeResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValuesValueInvokeResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueInvokeResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValueInvokeResponse)(nil)).Elem()
}

func (o ParameterValuesValueInvokeResponseMapOutput) ToParameterValuesValueInvokeResponseMapOutput() ParameterValuesValueInvokeResponseMapOutput {
	return o
}

func (o ParameterValuesValueInvokeResponseMapOutput) ToParameterValuesValueInvokeResponseMapOutputWithContext(ctx context.Context) ParameterValuesValueInvokeResponseMapOutput {
	return o
}

func (o ParameterValuesValueInvokeResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterValuesValueInvokeResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValuesValueInvokeResponse {
		return vs[0].(map[string]ParameterValuesValueInvokeResponse)[vs[1].(string)]
	}).(ParameterValuesValueInvokeResponseOutput)
}

// The value of a parameter.
type ParameterValuesValueResponse struct {
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// ParameterValuesValueResponseInput is an input type that accepts ParameterValuesValueResponseArgs and ParameterValuesValueResponseOutput values.
// You can construct a concrete instance of `ParameterValuesValueResponseInput` via:
//
//          ParameterValuesValueResponseArgs{...}
type ParameterValuesValueResponseInput interface {
	pulumi.Input

	ToParameterValuesValueResponseOutput() ParameterValuesValueResponseOutput
	ToParameterValuesValueResponseOutputWithContext(context.Context) ParameterValuesValueResponseOutput
}

// The value of a parameter.
type ParameterValuesValueResponseArgs struct {
	// The value of the parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (ParameterValuesValueResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValueResponse)(nil)).Elem()
}

func (i ParameterValuesValueResponseArgs) ToParameterValuesValueResponseOutput() ParameterValuesValueResponseOutput {
	return i.ToParameterValuesValueResponseOutputWithContext(context.Background())
}

func (i ParameterValuesValueResponseArgs) ToParameterValuesValueResponseOutputWithContext(ctx context.Context) ParameterValuesValueResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueResponseOutput)
}

// ParameterValuesValueResponseMapInput is an input type that accepts ParameterValuesValueResponseMap and ParameterValuesValueResponseMapOutput values.
// You can construct a concrete instance of `ParameterValuesValueResponseMapInput` via:
//
//          ParameterValuesValueResponseMap{ "key": ParameterValuesValueResponseArgs{...} }
type ParameterValuesValueResponseMapInput interface {
	pulumi.Input

	ToParameterValuesValueResponseMapOutput() ParameterValuesValueResponseMapOutput
	ToParameterValuesValueResponseMapOutputWithContext(context.Context) ParameterValuesValueResponseMapOutput
}

type ParameterValuesValueResponseMap map[string]ParameterValuesValueResponseInput

func (ParameterValuesValueResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValueResponse)(nil)).Elem()
}

func (i ParameterValuesValueResponseMap) ToParameterValuesValueResponseMapOutput() ParameterValuesValueResponseMapOutput {
	return i.ToParameterValuesValueResponseMapOutputWithContext(context.Background())
}

func (i ParameterValuesValueResponseMap) ToParameterValuesValueResponseMapOutputWithContext(ctx context.Context) ParameterValuesValueResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueResponseMapOutput)
}

// The value of a parameter.
type ParameterValuesValueResponseOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValueResponse)(nil)).Elem()
}

func (o ParameterValuesValueResponseOutput) ToParameterValuesValueResponseOutput() ParameterValuesValueResponseOutput {
	return o
}

func (o ParameterValuesValueResponseOutput) ToParameterValuesValueResponseOutputWithContext(ctx context.Context) ParameterValuesValueResponseOutput {
	return o
}

// The value of the parameter.
func (o ParameterValuesValueResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValuesValueResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValuesValueResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValueResponse)(nil)).Elem()
}

func (o ParameterValuesValueResponseMapOutput) ToParameterValuesValueResponseMapOutput() ParameterValuesValueResponseMapOutput {
	return o
}

func (o ParameterValuesValueResponseMapOutput) ToParameterValuesValueResponseMapOutputWithContext(ctx context.Context) ParameterValuesValueResponseMapOutput {
	return o
}

func (o ParameterValuesValueResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterValuesValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValuesValueResponse {
		return vs[0].(map[string]ParameterValuesValueResponse)[vs[1].(string)]
	}).(ParameterValuesValueResponseOutput)
}

// The policy definition group.
type PolicyDefinitionGroup struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupInput is an input type that accepts PolicyDefinitionGroupArgs and PolicyDefinitionGroupOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupInput` via:
//
//          PolicyDefinitionGroupArgs{...}
type PolicyDefinitionGroupInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput
	ToPolicyDefinitionGroupOutputWithContext(context.Context) PolicyDefinitionGroupOutput
}

// The policy definition group.
type PolicyDefinitionGroupArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return i.ToPolicyDefinitionGroupOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupOutput)
}

// PolicyDefinitionGroupArrayInput is an input type that accepts PolicyDefinitionGroupArray and PolicyDefinitionGroupArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupArrayInput` via:
//
//          PolicyDefinitionGroupArray{ PolicyDefinitionGroupArgs{...} }
type PolicyDefinitionGroupArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput
	ToPolicyDefinitionGroupArrayOutputWithContext(context.Context) PolicyDefinitionGroupArrayOutput
}

type PolicyDefinitionGroupArray []PolicyDefinitionGroupInput

func (PolicyDefinitionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return i.ToPolicyDefinitionGroupArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return o
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroup {
		return vs[0].([]PolicyDefinitionGroup)[vs[1].(int)]
	}).(PolicyDefinitionGroupOutput)
}

// The policy definition group.
type PolicyDefinitionGroupInvokeResponse struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupInvokeResponseInput is an input type that accepts PolicyDefinitionGroupInvokeResponseArgs and PolicyDefinitionGroupInvokeResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupInvokeResponseInput` via:
//
//          PolicyDefinitionGroupInvokeResponseArgs{...}
type PolicyDefinitionGroupInvokeResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupInvokeResponseOutput() PolicyDefinitionGroupInvokeResponseOutput
	ToPolicyDefinitionGroupInvokeResponseOutputWithContext(context.Context) PolicyDefinitionGroupInvokeResponseOutput
}

// The policy definition group.
type PolicyDefinitionGroupInvokeResponseArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupInvokeResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupInvokeResponseArgs) ToPolicyDefinitionGroupInvokeResponseOutput() PolicyDefinitionGroupInvokeResponseOutput {
	return i.ToPolicyDefinitionGroupInvokeResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupInvokeResponseArgs) ToPolicyDefinitionGroupInvokeResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupInvokeResponseOutput)
}

// PolicyDefinitionGroupInvokeResponseArrayInput is an input type that accepts PolicyDefinitionGroupInvokeResponseArray and PolicyDefinitionGroupInvokeResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupInvokeResponseArrayInput` via:
//
//          PolicyDefinitionGroupInvokeResponseArray{ PolicyDefinitionGroupInvokeResponseArgs{...} }
type PolicyDefinitionGroupInvokeResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupInvokeResponseArrayOutput() PolicyDefinitionGroupInvokeResponseArrayOutput
	ToPolicyDefinitionGroupInvokeResponseArrayOutputWithContext(context.Context) PolicyDefinitionGroupInvokeResponseArrayOutput
}

type PolicyDefinitionGroupInvokeResponseArray []PolicyDefinitionGroupInvokeResponseInput

func (PolicyDefinitionGroupInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupInvokeResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupInvokeResponseArray) ToPolicyDefinitionGroupInvokeResponseArrayOutput() PolicyDefinitionGroupInvokeResponseArrayOutput {
	return i.ToPolicyDefinitionGroupInvokeResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupInvokeResponseArray) ToPolicyDefinitionGroupInvokeResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupInvokeResponseArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupInvokeResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupInvokeResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupInvokeResponseOutput) ToPolicyDefinitionGroupInvokeResponseOutput() PolicyDefinitionGroupInvokeResponseOutput {
	return o
}

func (o PolicyDefinitionGroupInvokeResponseOutput) ToPolicyDefinitionGroupInvokeResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupInvokeResponseOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupInvokeResponseOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupInvokeResponse) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupInvokeResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupInvokeResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupInvokeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupInvokeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupInvokeResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupInvokeResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupInvokeResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupInvokeResponseArrayOutput) ToPolicyDefinitionGroupInvokeResponseArrayOutput() PolicyDefinitionGroupInvokeResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupInvokeResponseArrayOutput) ToPolicyDefinitionGroupInvokeResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupInvokeResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupInvokeResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroupInvokeResponse {
		return vs[0].([]PolicyDefinitionGroupInvokeResponse)[vs[1].(int)]
	}).(PolicyDefinitionGroupInvokeResponseOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponse struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupResponseInput is an input type that accepts PolicyDefinitionGroupResponseArgs and PolicyDefinitionGroupResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupResponseInput` via:
//
//          PolicyDefinitionGroupResponseArgs{...}
type PolicyDefinitionGroupResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput
	ToPolicyDefinitionGroupResponseOutputWithContext(context.Context) PolicyDefinitionGroupResponseOutput
}

// The policy definition group.
type PolicyDefinitionGroupResponseArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupResponseArgs) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return i.ToPolicyDefinitionGroupResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupResponseArgs) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupResponseOutput)
}

// PolicyDefinitionGroupResponseArrayInput is an input type that accepts PolicyDefinitionGroupResponseArray and PolicyDefinitionGroupResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupResponseArrayInput` via:
//
//          PolicyDefinitionGroupResponseArray{ PolicyDefinitionGroupResponseArgs{...} }
type PolicyDefinitionGroupResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput
	ToPolicyDefinitionGroupResponseArrayOutputWithContext(context.Context) PolicyDefinitionGroupResponseArrayOutput
}

type PolicyDefinitionGroupResponseArray []PolicyDefinitionGroupResponseInput

func (PolicyDefinitionGroupResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupResponseArray) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return i.ToPolicyDefinitionGroupResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupResponseArray) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupResponseArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return o
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupResponseOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroupResponse {
		return vs[0].([]PolicyDefinitionGroupResponse)[vs[1].(int)]
	}).(PolicyDefinitionGroupResponseOutput)
}

// The policy definition reference.
type PolicyDefinitionReference struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValue `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceInput is an input type that accepts PolicyDefinitionReferenceArgs and PolicyDefinitionReferenceOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceInput` via:
//
//          PolicyDefinitionReferenceArgs{...}
type PolicyDefinitionReferenceInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput
	ToPolicyDefinitionReferenceOutputWithContext(context.Context) PolicyDefinitionReferenceOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueMapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return i.ToPolicyDefinitionReferenceOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceOutput)
}

// PolicyDefinitionReferenceArrayInput is an input type that accepts PolicyDefinitionReferenceArray and PolicyDefinitionReferenceArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceArrayInput` via:
//
//          PolicyDefinitionReferenceArray{ PolicyDefinitionReferenceArgs{...} }
type PolicyDefinitionReferenceArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput
	ToPolicyDefinitionReferenceArrayOutputWithContext(context.Context) PolicyDefinitionReferenceArrayOutput
}

type PolicyDefinitionReferenceArray []PolicyDefinitionReferenceInput

func (PolicyDefinitionReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return i.ToPolicyDefinitionReferenceArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return o
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceOutput) Parameters() ParameterValuesValueMapOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) map[string]ParameterValuesValue { return v.Parameters }).(ParameterValuesValueMapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReference {
		return vs[0].([]PolicyDefinitionReference)[vs[1].(int)]
	}).(PolicyDefinitionReferenceOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceInvokeResponse struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValueInvokeResponse `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceInvokeResponseInput is an input type that accepts PolicyDefinitionReferenceInvokeResponseArgs and PolicyDefinitionReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceInvokeResponseInput` via:
//
//          PolicyDefinitionReferenceInvokeResponseArgs{...}
type PolicyDefinitionReferenceInvokeResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceInvokeResponseOutput() PolicyDefinitionReferenceInvokeResponseOutput
	ToPolicyDefinitionReferenceInvokeResponseOutputWithContext(context.Context) PolicyDefinitionReferenceInvokeResponseOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceInvokeResponseArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueInvokeResponseMapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceInvokeResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceInvokeResponseArgs) ToPolicyDefinitionReferenceInvokeResponseOutput() PolicyDefinitionReferenceInvokeResponseOutput {
	return i.ToPolicyDefinitionReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceInvokeResponseArgs) ToPolicyDefinitionReferenceInvokeResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceInvokeResponseOutput)
}

// PolicyDefinitionReferenceInvokeResponseArrayInput is an input type that accepts PolicyDefinitionReferenceInvokeResponseArray and PolicyDefinitionReferenceInvokeResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceInvokeResponseArrayInput` via:
//
//          PolicyDefinitionReferenceInvokeResponseArray{ PolicyDefinitionReferenceInvokeResponseArgs{...} }
type PolicyDefinitionReferenceInvokeResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceInvokeResponseArrayOutput() PolicyDefinitionReferenceInvokeResponseArrayOutput
	ToPolicyDefinitionReferenceInvokeResponseArrayOutputWithContext(context.Context) PolicyDefinitionReferenceInvokeResponseArrayOutput
}

type PolicyDefinitionReferenceInvokeResponseArray []PolicyDefinitionReferenceInvokeResponseInput

func (PolicyDefinitionReferenceInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceInvokeResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceInvokeResponseArray) ToPolicyDefinitionReferenceInvokeResponseArrayOutput() PolicyDefinitionReferenceInvokeResponseArrayOutput {
	return i.ToPolicyDefinitionReferenceInvokeResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceInvokeResponseArray) ToPolicyDefinitionReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceInvokeResponseArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceInvokeResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceInvokeResponseOutput) ToPolicyDefinitionReferenceInvokeResponseOutput() PolicyDefinitionReferenceInvokeResponseOutput {
	return o
}

func (o PolicyDefinitionReferenceInvokeResponseOutput) ToPolicyDefinitionReferenceInvokeResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceInvokeResponseOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceInvokeResponseOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceInvokeResponse) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceInvokeResponseOutput) Parameters() ParameterValuesValueInvokeResponseMapOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceInvokeResponse) map[string]ParameterValuesValueInvokeResponse {
		return v.Parameters
	}).(ParameterValuesValueInvokeResponseMapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceInvokeResponseOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceInvokeResponse) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceInvokeResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceInvokeResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceInvokeResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceInvokeResponseArrayOutput) ToPolicyDefinitionReferenceInvokeResponseArrayOutput() PolicyDefinitionReferenceInvokeResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceInvokeResponseArrayOutput) ToPolicyDefinitionReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceInvokeResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceInvokeResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReferenceInvokeResponse {
		return vs[0].([]PolicyDefinitionReferenceInvokeResponse)[vs[1].(int)]
	}).(PolicyDefinitionReferenceInvokeResponseOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponse struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValueResponse `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceResponseInput is an input type that accepts PolicyDefinitionReferenceResponseArgs and PolicyDefinitionReferenceResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseInput` via:
//
//          PolicyDefinitionReferenceResponseArgs{...}
type PolicyDefinitionReferenceResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput
	ToPolicyDefinitionReferenceResponseOutputWithContext(context.Context) PolicyDefinitionReferenceResponseOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueResponseMapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return i.ToPolicyDefinitionReferenceResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseOutput)
}

// PolicyDefinitionReferenceResponseArrayInput is an input type that accepts PolicyDefinitionReferenceResponseArray and PolicyDefinitionReferenceResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseArrayInput` via:
//
//          PolicyDefinitionReferenceResponseArray{ PolicyDefinitionReferenceResponseArgs{...} }
type PolicyDefinitionReferenceResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput
	ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Context) PolicyDefinitionReferenceResponseArrayOutput
}

type PolicyDefinitionReferenceResponseArray []PolicyDefinitionReferenceResponseInput

func (PolicyDefinitionReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return i.ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceResponseOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceResponseOutput) Parameters() ParameterValuesValueResponseMapOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) map[string]ParameterValuesValueResponse { return v.Parameters }).(ParameterValuesValueResponseMapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReferenceResponse {
		return vs[0].([]PolicyDefinitionReferenceResponse)[vs[1].(int)]
	}).(PolicyDefinitionReferenceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityInvokeResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageArrayOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageInvokeResponseOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageResponseOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMapOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueInvokeResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueInvokeResponseMapOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueInvokeResponseMetadataOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueInvokeResponseMetadataPtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMetadataOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMetadataPtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMapOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMetadataOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMetadataPtrOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueMapOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueInvokeResponseOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueInvokeResponseMapOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueResponseOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueResponseMapOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupInvokeResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseArrayOutput{})
}
