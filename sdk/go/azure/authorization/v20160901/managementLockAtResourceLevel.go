// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160901

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The lock information.
type ManagementLockAtResourceLevel struct {
	pulumi.CustomResourceState

	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringOutput `pulumi:"level"`
	// The name of the lock.
	Name pulumi.StringOutput `pulumi:"name"`
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The owners of the lock.
	Owners ManagementLockOwnerResponseArrayOutput `pulumi:"owners"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagementLockAtResourceLevel registers a new resource with the given unique name, arguments, and options.
func NewManagementLockAtResourceLevel(ctx *pulumi.Context,
	name string, args *ManagementLockAtResourceLevelArgs, opts ...pulumi.ResourceOption) (*ManagementLockAtResourceLevel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Level == nil {
		return nil, errors.New("invalid value for required argument 'Level'")
	}
	if args.LockName == nil {
		return nil, errors.New("invalid value for required argument 'LockName'")
	}
	if args.ParentResourcePath == nil {
		return nil, errors.New("invalid value for required argument 'ParentResourcePath'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.ResourceProviderNamespace == nil {
		return nil, errors.New("invalid value for required argument 'ResourceProviderNamespace'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:authorization/latest:ManagementLockAtResourceLevel"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagementLockAtResourceLevel
	err := ctx.RegisterResource("azure-nextgen:authorization/v20160901:ManagementLockAtResourceLevel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementLockAtResourceLevel gets an existing ManagementLockAtResourceLevel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementLockAtResourceLevel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementLockAtResourceLevelState, opts ...pulumi.ResourceOption) (*ManagementLockAtResourceLevel, error) {
	var resource ManagementLockAtResourceLevel
	err := ctx.ReadResource("azure-nextgen:authorization/v20160901:ManagementLockAtResourceLevel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementLockAtResourceLevel resources.
type managementLockAtResourceLevelState struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level *string `pulumi:"level"`
	// The name of the lock.
	Name *string `pulumi:"name"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwnerResponse `pulumi:"owners"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type *string `pulumi:"type"`
}

type ManagementLockAtResourceLevelState struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringPtrInput
	// The name of the lock.
	Name pulumi.StringPtrInput
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput
	// The owners of the lock.
	Owners ManagementLockOwnerResponseArrayInput
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringPtrInput
}

func (ManagementLockAtResourceLevelState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockAtResourceLevelState)(nil)).Elem()
}

type managementLockAtResourceLevelArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level string `pulumi:"level"`
	// The name of lock. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control characters.
	LockName string `pulumi:"lockName"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwner `pulumi:"owners"`
	// The parent resource identity.
	ParentResourcePath string `pulumi:"parentResourcePath"`
	// The name of the resource group containing the resource to lock.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the resource to lock.
	ResourceName string `pulumi:"resourceName"`
	// The resource provider namespace of the resource to lock.
	ResourceProviderNamespace string `pulumi:"resourceProviderNamespace"`
	// The resource type of the resource to lock.
	ResourceType string `pulumi:"resourceType"`
}

// The set of arguments for constructing a ManagementLockAtResourceLevel resource.
type ManagementLockAtResourceLevelArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringInput
	// The name of lock. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control characters.
	LockName pulumi.StringInput
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput
	// The owners of the lock.
	Owners ManagementLockOwnerArrayInput
	// The parent resource identity.
	ParentResourcePath pulumi.StringInput
	// The name of the resource group containing the resource to lock.
	ResourceGroupName pulumi.StringInput
	// The name of the resource to lock.
	ResourceName pulumi.StringInput
	// The resource provider namespace of the resource to lock.
	ResourceProviderNamespace pulumi.StringInput
	// The resource type of the resource to lock.
	ResourceType pulumi.StringInput
}

func (ManagementLockAtResourceLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockAtResourceLevelArgs)(nil)).Elem()
}

type ManagementLockAtResourceLevelInput interface {
	pulumi.Input

	ToManagementLockAtResourceLevelOutput() ManagementLockAtResourceLevelOutput
	ToManagementLockAtResourceLevelOutputWithContext(ctx context.Context) ManagementLockAtResourceLevelOutput
}

func (*ManagementLockAtResourceLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockAtResourceLevel)(nil))
}

func (i *ManagementLockAtResourceLevel) ToManagementLockAtResourceLevelOutput() ManagementLockAtResourceLevelOutput {
	return i.ToManagementLockAtResourceLevelOutputWithContext(context.Background())
}

func (i *ManagementLockAtResourceLevel) ToManagementLockAtResourceLevelOutputWithContext(ctx context.Context) ManagementLockAtResourceLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockAtResourceLevelOutput)
}

type ManagementLockAtResourceLevelOutput struct {
	*pulumi.OutputState
}

func (ManagementLockAtResourceLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockAtResourceLevel)(nil))
}

func (o ManagementLockAtResourceLevelOutput) ToManagementLockAtResourceLevelOutput() ManagementLockAtResourceLevelOutput {
	return o
}

func (o ManagementLockAtResourceLevelOutput) ToManagementLockAtResourceLevelOutputWithContext(ctx context.Context) ManagementLockAtResourceLevelOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ManagementLockAtResourceLevelOutput{})
}
