// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The lock information.
type ManagementLockAtSubscriptionLevel struct {
	pulumi.CustomResourceState

	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringOutput `pulumi:"level"`
	// The name of the lock.
	Name pulumi.StringOutput `pulumi:"name"`
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The owners of the lock.
	Owners ManagementLockOwnerResponseArrayOutput `pulumi:"owners"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagementLockAtSubscriptionLevel registers a new resource with the given unique name, arguments, and options.
func NewManagementLockAtSubscriptionLevel(ctx *pulumi.Context,
	name string, args *ManagementLockAtSubscriptionLevelArgs, opts ...pulumi.ResourceOption) (*ManagementLockAtSubscriptionLevel, error) {
	if args == nil || args.Level == nil {
		return nil, errors.New("missing required argument 'Level'")
	}
	if args == nil || args.LockName == nil {
		return nil, errors.New("missing required argument 'LockName'")
	}
	if args == nil {
		args = &ManagementLockAtSubscriptionLevelArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:authorization/v20150101:ManagementLockAtSubscriptionLevel"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20160901:ManagementLockAtSubscriptionLevel"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagementLockAtSubscriptionLevel
	err := ctx.RegisterResource("azure-nextgen:authorization/latest:ManagementLockAtSubscriptionLevel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementLockAtSubscriptionLevel gets an existing ManagementLockAtSubscriptionLevel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementLockAtSubscriptionLevel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementLockAtSubscriptionLevelState, opts ...pulumi.ResourceOption) (*ManagementLockAtSubscriptionLevel, error) {
	var resource ManagementLockAtSubscriptionLevel
	err := ctx.ReadResource("azure-nextgen:authorization/latest:ManagementLockAtSubscriptionLevel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementLockAtSubscriptionLevel resources.
type managementLockAtSubscriptionLevelState struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level *string `pulumi:"level"`
	// The name of the lock.
	Name *string `pulumi:"name"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwnerResponse `pulumi:"owners"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type *string `pulumi:"type"`
}

type ManagementLockAtSubscriptionLevelState struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringPtrInput
	// The name of the lock.
	Name pulumi.StringPtrInput
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput
	// The owners of the lock.
	Owners ManagementLockOwnerResponseArrayInput
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringPtrInput
}

func (ManagementLockAtSubscriptionLevelState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockAtSubscriptionLevelState)(nil)).Elem()
}

type managementLockAtSubscriptionLevelArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level string `pulumi:"level"`
	// The name of lock. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control characters.
	LockName string `pulumi:"lockName"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwner `pulumi:"owners"`
}

// The set of arguments for constructing a ManagementLockAtSubscriptionLevel resource.
type ManagementLockAtSubscriptionLevelArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringInput
	// The name of lock. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control characters.
	LockName pulumi.StringInput
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput
	// The owners of the lock.
	Owners ManagementLockOwnerArrayInput
}

func (ManagementLockAtSubscriptionLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockAtSubscriptionLevelArgs)(nil)).Elem()
}
