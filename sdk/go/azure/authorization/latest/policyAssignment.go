// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The policy assignment.
type PolicyAssignment struct {
	pulumi.CustomResourceState

	// This message will be part of response in case of policy violation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode pulumi.StringPtrOutput `pulumi:"enforcementMode"`
	// The managed identity associated with the policy assignment.
	Identity IdentityResponsePtrOutput `pulumi:"identity"`
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.AnyOutput `pulumi:"metadata"`
	// The name of the policy assignment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy's excluded scopes.
	NotScopes pulumi.StringArrayOutput `pulumi:"notScopes"`
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueResponseMapOutput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId pulumi.StringPtrOutput `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku PolicySkuResponsePtrOutput `pulumi:"sku"`
	// The type of the policy assignment.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewPolicyAssignment(ctx *pulumi.Context,
	name string, args *PolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*PolicyAssignment, error) {
	if args == nil || args.PolicyAssignmentName == nil {
		return nil, errors.New("missing required argument 'PolicyAssignmentName'")
	}
	if args == nil || args.Scope == nil {
		return nil, errors.New("missing required argument 'Scope'")
	}
	if args == nil {
		args = &PolicyAssignmentArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:authorization/v20151001preview:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20151101:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20160401:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20161201:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20170601preview:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20180301:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20180501:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20190101:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20190601:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20190901:PolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20200301:PolicyAssignment"),
		},
	})
	opts = append(opts, aliases)
	var resource PolicyAssignment
	err := ctx.RegisterResource("azure-nextgen:authorization/latest:PolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAssignment gets an existing PolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAssignmentState, opts ...pulumi.ResourceOption) (*PolicyAssignment, error) {
	var resource PolicyAssignment
	err := ctx.ReadResource("azure-nextgen:authorization/latest:PolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAssignment resources.
type policyAssignmentState struct {
	// This message will be part of response in case of policy violation.
	Description *string `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName *string `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode *string `pulumi:"enforcementMode"`
	// The managed identity associated with the policy assignment.
	Identity *IdentityResponse `pulumi:"identity"`
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location *string `pulumi:"location"`
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `pulumi:"metadata"`
	// The name of the policy assignment.
	Name *string `pulumi:"name"`
	// The policy's excluded scopes.
	NotScopes []string `pulumi:"notScopes"`
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValueResponse `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope *string `pulumi:"scope"`
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku *PolicySkuResponse `pulumi:"sku"`
	// The type of the policy assignment.
	Type *string `pulumi:"type"`
}

type PolicyAssignmentState struct {
	// This message will be part of response in case of policy violation.
	Description pulumi.StringPtrInput
	// The display name of the policy assignment.
	DisplayName pulumi.StringPtrInput
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode pulumi.StringPtrInput
	// The managed identity associated with the policy assignment.
	Identity IdentityResponsePtrInput
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location pulumi.StringPtrInput
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.Input
	// The name of the policy assignment.
	Name pulumi.StringPtrInput
	// The policy's excluded scopes.
	NotScopes pulumi.StringArrayInput
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueResponseMapInput
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId pulumi.StringPtrInput
	// The scope for the policy assignment.
	Scope pulumi.StringPtrInput
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku PolicySkuResponsePtrInput
	// The type of the policy assignment.
	Type pulumi.StringPtrInput
}

func (PolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAssignmentState)(nil)).Elem()
}

type policyAssignmentArgs struct {
	// This message will be part of response in case of policy violation.
	Description *string `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName *string `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode *string `pulumi:"enforcementMode"`
	// The managed identity associated with the policy assignment.
	Identity *Identity `pulumi:"identity"`
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location *string `pulumi:"location"`
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `pulumi:"metadata"`
	// The policy's excluded scopes.
	NotScopes []string `pulumi:"notScopes"`
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValue `pulumi:"parameters"`
	// The name of the policy assignment.
	PolicyAssignmentName string `pulumi:"policyAssignmentName"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope string `pulumi:"scope"`
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku *PolicySku `pulumi:"sku"`
}

// The set of arguments for constructing a PolicyAssignment resource.
type PolicyAssignmentArgs struct {
	// This message will be part of response in case of policy violation.
	Description pulumi.StringPtrInput
	// The display name of the policy assignment.
	DisplayName pulumi.StringPtrInput
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode pulumi.StringPtrInput
	// The managed identity associated with the policy assignment.
	Identity IdentityPtrInput
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location pulumi.StringPtrInput
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.Input
	// The policy's excluded scopes.
	NotScopes pulumi.StringArrayInput
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueMapInput
	// The name of the policy assignment.
	PolicyAssignmentName pulumi.StringInput
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId pulumi.StringPtrInput
	// The scope for the policy assignment.
	Scope pulumi.StringInput
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku PolicySkuPtrInput
}

func (PolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAssignmentArgs)(nil)).Elem()
}
