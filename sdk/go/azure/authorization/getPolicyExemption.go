// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The policy exemption.
// API Version: 2020-07-01-preview.
func LookupPolicyExemption(ctx *pulumi.Context, args *LookupPolicyExemptionArgs, opts ...pulumi.InvokeOption) (*LookupPolicyExemptionResult, error) {
	var rv LookupPolicyExemptionResult
	err := ctx.Invoke("azure-native:authorization:getPolicyExemption", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPolicyExemptionArgs struct {
	// The name of the policy exemption to delete.
	PolicyExemptionName string `pulumi:"policyExemptionName"`
	// The scope of the policy exemption. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
	Scope string `pulumi:"scope"`
}

// The policy exemption.
type LookupPolicyExemptionResult struct {
	// The description of the policy exemption.
	Description *string `pulumi:"description"`
	// The display name of the policy exemption.
	DisplayName *string `pulumi:"displayName"`
	// The policy exemption category. Possible values are Waiver and Mitigated.
	ExemptionCategory string `pulumi:"exemptionCategory"`
	// The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The ID of the policy exemption.
	Id string `pulumi:"id"`
	// The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `pulumi:"metadata"`
	// The name of the policy exemption.
	Name string `pulumi:"name"`
	// The ID of the policy assignment that is being exempted.
	PolicyAssignmentId string `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []string `pulumi:"policyDefinitionReferenceIds"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource (Microsoft.Authorization/policyExemptions).
	Type string `pulumi:"type"`
}

func LookupPolicyExemptionOutput(ctx *pulumi.Context, args LookupPolicyExemptionOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyExemptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyExemptionResult, error) {
			args := v.(LookupPolicyExemptionArgs)
			r, err := LookupPolicyExemption(ctx, &args, opts...)
			var s LookupPolicyExemptionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicyExemptionResultOutput)
}

type LookupPolicyExemptionOutputArgs struct {
	// The name of the policy exemption to delete.
	PolicyExemptionName pulumi.StringInput `pulumi:"policyExemptionName"`
	// The scope of the policy exemption. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupPolicyExemptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyExemptionArgs)(nil)).Elem()
}

// The policy exemption.
type LookupPolicyExemptionResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyExemptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyExemptionResult)(nil)).Elem()
}

func (o LookupPolicyExemptionResultOutput) ToLookupPolicyExemptionResultOutput() LookupPolicyExemptionResultOutput {
	return o
}

func (o LookupPolicyExemptionResultOutput) ToLookupPolicyExemptionResultOutputWithContext(ctx context.Context) LookupPolicyExemptionResultOutput {
	return o
}

// The description of the policy exemption.
func (o LookupPolicyExemptionResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy exemption.
func (o LookupPolicyExemptionResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy exemption category. Possible values are Waiver and Mitigated.
func (o LookupPolicyExemptionResultOutput) ExemptionCategory() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) string { return v.ExemptionCategory }).(pulumi.StringOutput)
}

// The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
func (o LookupPolicyExemptionResultOutput) ExpiresOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) *string { return v.ExpiresOn }).(pulumi.StringPtrOutput)
}

// The ID of the policy exemption.
func (o LookupPolicyExemptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs.
func (o LookupPolicyExemptionResultOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The name of the policy exemption.
func (o LookupPolicyExemptionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the policy assignment that is being exempted.
func (o LookupPolicyExemptionResultOutput) PolicyAssignmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) string { return v.PolicyAssignmentId }).(pulumi.StringOutput)
}

// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
func (o LookupPolicyExemptionResultOutput) PolicyDefinitionReferenceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) []string { return v.PolicyDefinitionReferenceIds }).(pulumi.StringArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupPolicyExemptionResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policyExemptions).
func (o LookupPolicyExemptionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyExemptionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyExemptionResultOutput{})
}
