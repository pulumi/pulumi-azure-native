// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The lock information.
func LookupManagementLockByScope(ctx *pulumi.Context, args *LookupManagementLockByScopeArgs, opts ...pulumi.InvokeOption) (*LookupManagementLockByScopeResult, error) {
	var rv LookupManagementLockByScopeResult
	err := ctx.Invoke("azure-native:authorization/v20200501:getManagementLockByScope", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupManagementLockByScopeArgs struct {
	// The name of lock.
	LockName string `pulumi:"lockName"`
	// The scope for the lock.
	Scope string `pulumi:"scope"`
}

// The lock information.
type LookupManagementLockByScopeResult struct {
	// The resource ID of the lock.
	Id string `pulumi:"id"`
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level string `pulumi:"level"`
	// The name of the lock.
	Name string `pulumi:"name"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwnerResponse `pulumi:"owners"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type string `pulumi:"type"`
}

func LookupManagementLockByScopeOutput(ctx *pulumi.Context, args LookupManagementLockByScopeOutputArgs, opts ...pulumi.InvokeOption) LookupManagementLockByScopeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagementLockByScopeResult, error) {
			args := v.(LookupManagementLockByScopeArgs)
			r, err := LookupManagementLockByScope(ctx, &args, opts...)
			var s LookupManagementLockByScopeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupManagementLockByScopeResultOutput)
}

type LookupManagementLockByScopeOutputArgs struct {
	// The name of lock.
	LockName pulumi.StringInput `pulumi:"lockName"`
	// The scope for the lock.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupManagementLockByScopeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagementLockByScopeArgs)(nil)).Elem()
}

// The lock information.
type LookupManagementLockByScopeResultOutput struct{ *pulumi.OutputState }

func (LookupManagementLockByScopeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagementLockByScopeResult)(nil)).Elem()
}

func (o LookupManagementLockByScopeResultOutput) ToLookupManagementLockByScopeResultOutput() LookupManagementLockByScopeResultOutput {
	return o
}

func (o LookupManagementLockByScopeResultOutput) ToLookupManagementLockByScopeResultOutputWithContext(ctx context.Context) LookupManagementLockByScopeResultOutput {
	return o
}

// The resource ID of the lock.
func (o LookupManagementLockByScopeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementLockByScopeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o LookupManagementLockByScopeResultOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementLockByScopeResult) string { return v.Level }).(pulumi.StringOutput)
}

// The name of the lock.
func (o LookupManagementLockByScopeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementLockByScopeResult) string { return v.Name }).(pulumi.StringOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o LookupManagementLockByScopeResultOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupManagementLockByScopeResult) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o LookupManagementLockByScopeResultOutput) Owners() ManagementLockOwnerResponseArrayOutput {
	return o.ApplyT(func(v LookupManagementLockByScopeResult) []ManagementLockOwnerResponse { return v.Owners }).(ManagementLockOwnerResponseArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o LookupManagementLockByScopeResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupManagementLockByScopeResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The resource type of the lock - Microsoft.Authorization/locks.
func (o LookupManagementLockByScopeResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementLockByScopeResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagementLockByScopeResultOutput{})
}
