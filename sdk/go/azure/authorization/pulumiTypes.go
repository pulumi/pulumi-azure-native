// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Access Review Instance.
type AccessReviewInstance struct {
	// The DateTime when the review instance is scheduled to end.
	EndDateTime *string `pulumi:"endDateTime"`
	// The DateTime when the review instance is scheduled to be start.
	StartDateTime *string `pulumi:"startDateTime"`
}

// AccessReviewInstanceInput is an input type that accepts AccessReviewInstanceArgs and AccessReviewInstanceOutput values.
// You can construct a concrete instance of `AccessReviewInstanceInput` via:
//
//          AccessReviewInstanceArgs{...}
type AccessReviewInstanceInput interface {
	pulumi.Input

	ToAccessReviewInstanceOutput() AccessReviewInstanceOutput
	ToAccessReviewInstanceOutputWithContext(context.Context) AccessReviewInstanceOutput
}

// Access Review Instance.
type AccessReviewInstanceArgs struct {
	// The DateTime when the review instance is scheduled to end.
	EndDateTime pulumi.StringPtrInput `pulumi:"endDateTime"`
	// The DateTime when the review instance is scheduled to be start.
	StartDateTime pulumi.StringPtrInput `pulumi:"startDateTime"`
}

func (AccessReviewInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewInstance)(nil)).Elem()
}

func (i AccessReviewInstanceArgs) ToAccessReviewInstanceOutput() AccessReviewInstanceOutput {
	return i.ToAccessReviewInstanceOutputWithContext(context.Background())
}

func (i AccessReviewInstanceArgs) ToAccessReviewInstanceOutputWithContext(ctx context.Context) AccessReviewInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewInstanceOutput)
}

// AccessReviewInstanceArrayInput is an input type that accepts AccessReviewInstanceArray and AccessReviewInstanceArrayOutput values.
// You can construct a concrete instance of `AccessReviewInstanceArrayInput` via:
//
//          AccessReviewInstanceArray{ AccessReviewInstanceArgs{...} }
type AccessReviewInstanceArrayInput interface {
	pulumi.Input

	ToAccessReviewInstanceArrayOutput() AccessReviewInstanceArrayOutput
	ToAccessReviewInstanceArrayOutputWithContext(context.Context) AccessReviewInstanceArrayOutput
}

type AccessReviewInstanceArray []AccessReviewInstanceInput

func (AccessReviewInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewInstance)(nil)).Elem()
}

func (i AccessReviewInstanceArray) ToAccessReviewInstanceArrayOutput() AccessReviewInstanceArrayOutput {
	return i.ToAccessReviewInstanceArrayOutputWithContext(context.Background())
}

func (i AccessReviewInstanceArray) ToAccessReviewInstanceArrayOutputWithContext(ctx context.Context) AccessReviewInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewInstanceArrayOutput)
}

// Access Review Instance.
type AccessReviewInstanceOutput struct{ *pulumi.OutputState }

func (AccessReviewInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewInstance)(nil)).Elem()
}

func (o AccessReviewInstanceOutput) ToAccessReviewInstanceOutput() AccessReviewInstanceOutput {
	return o
}

func (o AccessReviewInstanceOutput) ToAccessReviewInstanceOutputWithContext(ctx context.Context) AccessReviewInstanceOutput {
	return o
}

// The DateTime when the review instance is scheduled to end.
func (o AccessReviewInstanceOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewInstance) *string { return v.EndDateTime }).(pulumi.StringPtrOutput)
}

// The DateTime when the review instance is scheduled to be start.
func (o AccessReviewInstanceOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewInstance) *string { return v.StartDateTime }).(pulumi.StringPtrOutput)
}

type AccessReviewInstanceArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewInstance)(nil)).Elem()
}

func (o AccessReviewInstanceArrayOutput) ToAccessReviewInstanceArrayOutput() AccessReviewInstanceArrayOutput {
	return o
}

func (o AccessReviewInstanceArrayOutput) ToAccessReviewInstanceArrayOutputWithContext(ctx context.Context) AccessReviewInstanceArrayOutput {
	return o
}

func (o AccessReviewInstanceArrayOutput) Index(i pulumi.IntInput) AccessReviewInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewInstance {
		return vs[0].([]AccessReviewInstance)[vs[1].(int)]
	}).(AccessReviewInstanceOutput)
}

// Access Review Instance.
type AccessReviewInstanceResponse struct {
	// The DateTime when the review instance is scheduled to end.
	EndDateTime *string `pulumi:"endDateTime"`
	// The access review instance id.
	Id string `pulumi:"id"`
	// The access review instance name.
	Name string `pulumi:"name"`
	// The DateTime when the review instance is scheduled to be start.
	StartDateTime *string `pulumi:"startDateTime"`
	// This read-only field specifies the status of an access review instance.
	Status string `pulumi:"status"`
	// The resource type.
	Type string `pulumi:"type"`
}

// AccessReviewInstanceResponseInput is an input type that accepts AccessReviewInstanceResponseArgs and AccessReviewInstanceResponseOutput values.
// You can construct a concrete instance of `AccessReviewInstanceResponseInput` via:
//
//          AccessReviewInstanceResponseArgs{...}
type AccessReviewInstanceResponseInput interface {
	pulumi.Input

	ToAccessReviewInstanceResponseOutput() AccessReviewInstanceResponseOutput
	ToAccessReviewInstanceResponseOutputWithContext(context.Context) AccessReviewInstanceResponseOutput
}

// Access Review Instance.
type AccessReviewInstanceResponseArgs struct {
	// The DateTime when the review instance is scheduled to end.
	EndDateTime pulumi.StringPtrInput `pulumi:"endDateTime"`
	// The access review instance id.
	Id pulumi.StringInput `pulumi:"id"`
	// The access review instance name.
	Name pulumi.StringInput `pulumi:"name"`
	// The DateTime when the review instance is scheduled to be start.
	StartDateTime pulumi.StringPtrInput `pulumi:"startDateTime"`
	// This read-only field specifies the status of an access review instance.
	Status pulumi.StringInput `pulumi:"status"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccessReviewInstanceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewInstanceResponse)(nil)).Elem()
}

func (i AccessReviewInstanceResponseArgs) ToAccessReviewInstanceResponseOutput() AccessReviewInstanceResponseOutput {
	return i.ToAccessReviewInstanceResponseOutputWithContext(context.Background())
}

func (i AccessReviewInstanceResponseArgs) ToAccessReviewInstanceResponseOutputWithContext(ctx context.Context) AccessReviewInstanceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewInstanceResponseOutput)
}

// AccessReviewInstanceResponseArrayInput is an input type that accepts AccessReviewInstanceResponseArray and AccessReviewInstanceResponseArrayOutput values.
// You can construct a concrete instance of `AccessReviewInstanceResponseArrayInput` via:
//
//          AccessReviewInstanceResponseArray{ AccessReviewInstanceResponseArgs{...} }
type AccessReviewInstanceResponseArrayInput interface {
	pulumi.Input

	ToAccessReviewInstanceResponseArrayOutput() AccessReviewInstanceResponseArrayOutput
	ToAccessReviewInstanceResponseArrayOutputWithContext(context.Context) AccessReviewInstanceResponseArrayOutput
}

type AccessReviewInstanceResponseArray []AccessReviewInstanceResponseInput

func (AccessReviewInstanceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewInstanceResponse)(nil)).Elem()
}

func (i AccessReviewInstanceResponseArray) ToAccessReviewInstanceResponseArrayOutput() AccessReviewInstanceResponseArrayOutput {
	return i.ToAccessReviewInstanceResponseArrayOutputWithContext(context.Background())
}

func (i AccessReviewInstanceResponseArray) ToAccessReviewInstanceResponseArrayOutputWithContext(ctx context.Context) AccessReviewInstanceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewInstanceResponseArrayOutput)
}

// Access Review Instance.
type AccessReviewInstanceResponseOutput struct{ *pulumi.OutputState }

func (AccessReviewInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewInstanceResponse)(nil)).Elem()
}

func (o AccessReviewInstanceResponseOutput) ToAccessReviewInstanceResponseOutput() AccessReviewInstanceResponseOutput {
	return o
}

func (o AccessReviewInstanceResponseOutput) ToAccessReviewInstanceResponseOutputWithContext(ctx context.Context) AccessReviewInstanceResponseOutput {
	return o
}

// The DateTime when the review instance is scheduled to end.
func (o AccessReviewInstanceResponseOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) *string { return v.EndDateTime }).(pulumi.StringPtrOutput)
}

// The access review instance id.
func (o AccessReviewInstanceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The access review instance name.
func (o AccessReviewInstanceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The DateTime when the review instance is scheduled to be start.
func (o AccessReviewInstanceResponseOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) *string { return v.StartDateTime }).(pulumi.StringPtrOutput)
}

// This read-only field specifies the status of an access review instance.
func (o AccessReviewInstanceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The resource type.
func (o AccessReviewInstanceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AccessReviewInstanceResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewInstanceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewInstanceResponse)(nil)).Elem()
}

func (o AccessReviewInstanceResponseArrayOutput) ToAccessReviewInstanceResponseArrayOutput() AccessReviewInstanceResponseArrayOutput {
	return o
}

func (o AccessReviewInstanceResponseArrayOutput) ToAccessReviewInstanceResponseArrayOutputWithContext(ctx context.Context) AccessReviewInstanceResponseArrayOutput {
	return o
}

func (o AccessReviewInstanceResponseArrayOutput) Index(i pulumi.IntInput) AccessReviewInstanceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewInstanceResponse {
		return vs[0].([]AccessReviewInstanceResponse)[vs[1].(int)]
	}).(AccessReviewInstanceResponseOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewer struct {
	// The id of the reviewer(user/servicePrincipal)
	PrincipalId *string `pulumi:"principalId"`
}

// AccessReviewReviewerInput is an input type that accepts AccessReviewReviewerArgs and AccessReviewReviewerOutput values.
// You can construct a concrete instance of `AccessReviewReviewerInput` via:
//
//          AccessReviewReviewerArgs{...}
type AccessReviewReviewerInput interface {
	pulumi.Input

	ToAccessReviewReviewerOutput() AccessReviewReviewerOutput
	ToAccessReviewReviewerOutputWithContext(context.Context) AccessReviewReviewerOutput
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerArgs struct {
	// The id of the reviewer(user/servicePrincipal)
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (AccessReviewReviewerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewReviewer)(nil)).Elem()
}

func (i AccessReviewReviewerArgs) ToAccessReviewReviewerOutput() AccessReviewReviewerOutput {
	return i.ToAccessReviewReviewerOutputWithContext(context.Background())
}

func (i AccessReviewReviewerArgs) ToAccessReviewReviewerOutputWithContext(ctx context.Context) AccessReviewReviewerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewReviewerOutput)
}

// AccessReviewReviewerArrayInput is an input type that accepts AccessReviewReviewerArray and AccessReviewReviewerArrayOutput values.
// You can construct a concrete instance of `AccessReviewReviewerArrayInput` via:
//
//          AccessReviewReviewerArray{ AccessReviewReviewerArgs{...} }
type AccessReviewReviewerArrayInput interface {
	pulumi.Input

	ToAccessReviewReviewerArrayOutput() AccessReviewReviewerArrayOutput
	ToAccessReviewReviewerArrayOutputWithContext(context.Context) AccessReviewReviewerArrayOutput
}

type AccessReviewReviewerArray []AccessReviewReviewerInput

func (AccessReviewReviewerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewReviewer)(nil)).Elem()
}

func (i AccessReviewReviewerArray) ToAccessReviewReviewerArrayOutput() AccessReviewReviewerArrayOutput {
	return i.ToAccessReviewReviewerArrayOutputWithContext(context.Background())
}

func (i AccessReviewReviewerArray) ToAccessReviewReviewerArrayOutputWithContext(ctx context.Context) AccessReviewReviewerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewReviewerArrayOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerOutput struct{ *pulumi.OutputState }

func (AccessReviewReviewerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewReviewer)(nil)).Elem()
}

func (o AccessReviewReviewerOutput) ToAccessReviewReviewerOutput() AccessReviewReviewerOutput {
	return o
}

func (o AccessReviewReviewerOutput) ToAccessReviewReviewerOutputWithContext(ctx context.Context) AccessReviewReviewerOutput {
	return o
}

// The id of the reviewer(user/servicePrincipal)
func (o AccessReviewReviewerOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewReviewer) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type AccessReviewReviewerArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewReviewerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewReviewer)(nil)).Elem()
}

func (o AccessReviewReviewerArrayOutput) ToAccessReviewReviewerArrayOutput() AccessReviewReviewerArrayOutput {
	return o
}

func (o AccessReviewReviewerArrayOutput) ToAccessReviewReviewerArrayOutputWithContext(ctx context.Context) AccessReviewReviewerArrayOutput {
	return o
}

func (o AccessReviewReviewerArrayOutput) Index(i pulumi.IntInput) AccessReviewReviewerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewReviewer {
		return vs[0].([]AccessReviewReviewer)[vs[1].(int)]
	}).(AccessReviewReviewerOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerResponse struct {
	// The id of the reviewer(user/servicePrincipal)
	PrincipalId *string `pulumi:"principalId"`
	// The identity type : user/servicePrincipal
	PrincipalType string `pulumi:"principalType"`
}

// AccessReviewReviewerResponseInput is an input type that accepts AccessReviewReviewerResponseArgs and AccessReviewReviewerResponseOutput values.
// You can construct a concrete instance of `AccessReviewReviewerResponseInput` via:
//
//          AccessReviewReviewerResponseArgs{...}
type AccessReviewReviewerResponseInput interface {
	pulumi.Input

	ToAccessReviewReviewerResponseOutput() AccessReviewReviewerResponseOutput
	ToAccessReviewReviewerResponseOutputWithContext(context.Context) AccessReviewReviewerResponseOutput
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerResponseArgs struct {
	// The id of the reviewer(user/servicePrincipal)
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The identity type : user/servicePrincipal
	PrincipalType pulumi.StringInput `pulumi:"principalType"`
}

func (AccessReviewReviewerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewReviewerResponse)(nil)).Elem()
}

func (i AccessReviewReviewerResponseArgs) ToAccessReviewReviewerResponseOutput() AccessReviewReviewerResponseOutput {
	return i.ToAccessReviewReviewerResponseOutputWithContext(context.Background())
}

func (i AccessReviewReviewerResponseArgs) ToAccessReviewReviewerResponseOutputWithContext(ctx context.Context) AccessReviewReviewerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewReviewerResponseOutput)
}

// AccessReviewReviewerResponseArrayInput is an input type that accepts AccessReviewReviewerResponseArray and AccessReviewReviewerResponseArrayOutput values.
// You can construct a concrete instance of `AccessReviewReviewerResponseArrayInput` via:
//
//          AccessReviewReviewerResponseArray{ AccessReviewReviewerResponseArgs{...} }
type AccessReviewReviewerResponseArrayInput interface {
	pulumi.Input

	ToAccessReviewReviewerResponseArrayOutput() AccessReviewReviewerResponseArrayOutput
	ToAccessReviewReviewerResponseArrayOutputWithContext(context.Context) AccessReviewReviewerResponseArrayOutput
}

type AccessReviewReviewerResponseArray []AccessReviewReviewerResponseInput

func (AccessReviewReviewerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewReviewerResponse)(nil)).Elem()
}

func (i AccessReviewReviewerResponseArray) ToAccessReviewReviewerResponseArrayOutput() AccessReviewReviewerResponseArrayOutput {
	return i.ToAccessReviewReviewerResponseArrayOutputWithContext(context.Background())
}

func (i AccessReviewReviewerResponseArray) ToAccessReviewReviewerResponseArrayOutputWithContext(ctx context.Context) AccessReviewReviewerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewReviewerResponseArrayOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerResponseOutput struct{ *pulumi.OutputState }

func (AccessReviewReviewerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewReviewerResponse)(nil)).Elem()
}

func (o AccessReviewReviewerResponseOutput) ToAccessReviewReviewerResponseOutput() AccessReviewReviewerResponseOutput {
	return o
}

func (o AccessReviewReviewerResponseOutput) ToAccessReviewReviewerResponseOutputWithContext(ctx context.Context) AccessReviewReviewerResponseOutput {
	return o
}

// The id of the reviewer(user/servicePrincipal)
func (o AccessReviewReviewerResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewReviewerResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The identity type : user/servicePrincipal
func (o AccessReviewReviewerResponseOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewReviewerResponse) string { return v.PrincipalType }).(pulumi.StringOutput)
}

type AccessReviewReviewerResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewReviewerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewReviewerResponse)(nil)).Elem()
}

func (o AccessReviewReviewerResponseArrayOutput) ToAccessReviewReviewerResponseArrayOutput() AccessReviewReviewerResponseArrayOutput {
	return o
}

func (o AccessReviewReviewerResponseArrayOutput) ToAccessReviewReviewerResponseArrayOutputWithContext(ctx context.Context) AccessReviewReviewerResponseArrayOutput {
	return o
}

func (o AccessReviewReviewerResponseArrayOutput) Index(i pulumi.IntInput) AccessReviewReviewerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewReviewerResponse {
		return vs[0].([]AccessReviewReviewerResponse)[vs[1].(int)]
	}).(AccessReviewReviewerResponseOutput)
}

// The approval settings.
type ApprovalSettings struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStage `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// ApprovalSettingsInput is an input type that accepts ApprovalSettingsArgs and ApprovalSettingsOutput values.
// You can construct a concrete instance of `ApprovalSettingsInput` via:
//
//          ApprovalSettingsArgs{...}
type ApprovalSettingsInput interface {
	pulumi.Input

	ToApprovalSettingsOutput() ApprovalSettingsOutput
	ToApprovalSettingsOutputWithContext(context.Context) ApprovalSettingsOutput
}

// The approval settings.
type ApprovalSettingsArgs struct {
	// The type of rule
	ApprovalMode pulumi.StringPtrInput `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages ApprovalStageArrayInput `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired pulumi.BoolPtrInput `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension pulumi.BoolPtrInput `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired pulumi.BoolPtrInput `pulumi:"isRequestorJustificationRequired"`
}

func (ApprovalSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettings)(nil)).Elem()
}

func (i ApprovalSettingsArgs) ToApprovalSettingsOutput() ApprovalSettingsOutput {
	return i.ToApprovalSettingsOutputWithContext(context.Background())
}

func (i ApprovalSettingsArgs) ToApprovalSettingsOutputWithContext(ctx context.Context) ApprovalSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsOutput)
}

func (i ApprovalSettingsArgs) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return i.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (i ApprovalSettingsArgs) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsOutput).ToApprovalSettingsPtrOutputWithContext(ctx)
}

// ApprovalSettingsPtrInput is an input type that accepts ApprovalSettingsArgs, ApprovalSettingsPtr and ApprovalSettingsPtrOutput values.
// You can construct a concrete instance of `ApprovalSettingsPtrInput` via:
//
//          ApprovalSettingsArgs{...}
//
//  or:
//
//          nil
type ApprovalSettingsPtrInput interface {
	pulumi.Input

	ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput
	ToApprovalSettingsPtrOutputWithContext(context.Context) ApprovalSettingsPtrOutput
}

type approvalSettingsPtrType ApprovalSettingsArgs

func ApprovalSettingsPtr(v *ApprovalSettingsArgs) ApprovalSettingsPtrInput {
	return (*approvalSettingsPtrType)(v)
}

func (*approvalSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettings)(nil)).Elem()
}

func (i *approvalSettingsPtrType) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return i.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (i *approvalSettingsPtrType) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsPtrOutput)
}

// The approval settings.
type ApprovalSettingsOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettings)(nil)).Elem()
}

func (o ApprovalSettingsOutput) ToApprovalSettingsOutput() ApprovalSettingsOutput {
	return o
}

func (o ApprovalSettingsOutput) ToApprovalSettingsOutputWithContext(ctx context.Context) ApprovalSettingsOutput {
	return o
}

func (o ApprovalSettingsOutput) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return o.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (o ApprovalSettingsOutput) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *ApprovalSettings {
		return &v
	}).(ApprovalSettingsPtrOutput)
}

// The type of rule
func (o ApprovalSettingsOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsOutput) ApprovalStages() ApprovalStageArrayOutput {
	return o.ApplyT(func(v ApprovalSettings) []ApprovalStage { return v.ApprovalStages }).(ApprovalStageArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsPtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettings)(nil)).Elem()
}

func (o ApprovalSettingsPtrOutput) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return o
}

func (o ApprovalSettingsPtrOutput) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return o
}

func (o ApprovalSettingsPtrOutput) Elem() ApprovalSettingsOutput {
	return o.ApplyT(func(v *ApprovalSettings) ApprovalSettings { return *v }).(ApprovalSettingsOutput)
}

// The type of rule
func (o ApprovalSettingsPtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsPtrOutput) ApprovalStages() ApprovalStageArrayOutput {
	return o.ApplyT(func(v *ApprovalSettings) []ApprovalStage {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsPtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsPtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsPtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval settings.
type ApprovalSettingsResponse struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStageResponse `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// ApprovalSettingsResponseInput is an input type that accepts ApprovalSettingsResponseArgs and ApprovalSettingsResponseOutput values.
// You can construct a concrete instance of `ApprovalSettingsResponseInput` via:
//
//          ApprovalSettingsResponseArgs{...}
type ApprovalSettingsResponseInput interface {
	pulumi.Input

	ToApprovalSettingsResponseOutput() ApprovalSettingsResponseOutput
	ToApprovalSettingsResponseOutputWithContext(context.Context) ApprovalSettingsResponseOutput
}

// The approval settings.
type ApprovalSettingsResponseArgs struct {
	// The type of rule
	ApprovalMode pulumi.StringPtrInput `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages ApprovalStageResponseArrayInput `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired pulumi.BoolPtrInput `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension pulumi.BoolPtrInput `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired pulumi.BoolPtrInput `pulumi:"isRequestorJustificationRequired"`
}

func (ApprovalSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettingsResponse)(nil)).Elem()
}

func (i ApprovalSettingsResponseArgs) ToApprovalSettingsResponseOutput() ApprovalSettingsResponseOutput {
	return i.ToApprovalSettingsResponseOutputWithContext(context.Background())
}

func (i ApprovalSettingsResponseArgs) ToApprovalSettingsResponseOutputWithContext(ctx context.Context) ApprovalSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsResponseOutput)
}

func (i ApprovalSettingsResponseArgs) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return i.ToApprovalSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ApprovalSettingsResponseArgs) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsResponseOutput).ToApprovalSettingsResponsePtrOutputWithContext(ctx)
}

// ApprovalSettingsResponsePtrInput is an input type that accepts ApprovalSettingsResponseArgs, ApprovalSettingsResponsePtr and ApprovalSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ApprovalSettingsResponsePtrInput` via:
//
//          ApprovalSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ApprovalSettingsResponsePtrInput interface {
	pulumi.Input

	ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput
	ToApprovalSettingsResponsePtrOutputWithContext(context.Context) ApprovalSettingsResponsePtrOutput
}

type approvalSettingsResponsePtrType ApprovalSettingsResponseArgs

func ApprovalSettingsResponsePtr(v *ApprovalSettingsResponseArgs) ApprovalSettingsResponsePtrInput {
	return (*approvalSettingsResponsePtrType)(v)
}

func (*approvalSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettingsResponse)(nil)).Elem()
}

func (i *approvalSettingsResponsePtrType) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return i.ToApprovalSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *approvalSettingsResponsePtrType) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsResponsePtrOutput)
}

// The approval settings.
type ApprovalSettingsResponseOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettingsResponse)(nil)).Elem()
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponseOutput() ApprovalSettingsResponseOutput {
	return o
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponseOutputWithContext(ctx context.Context) ApprovalSettingsResponseOutput {
	return o
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return o.ToApprovalSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *ApprovalSettingsResponse {
		return &v
	}).(ApprovalSettingsResponsePtrOutput)
}

// The type of rule
func (o ApprovalSettingsResponseOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsResponseOutput) ApprovalStages() ApprovalStageResponseArrayOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) []ApprovalStageResponse { return v.ApprovalStages }).(ApprovalStageResponseArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsResponseOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsResponseOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsResponseOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettingsResponse)(nil)).Elem()
}

func (o ApprovalSettingsResponsePtrOutput) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return o
}

func (o ApprovalSettingsResponsePtrOutput) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return o
}

func (o ApprovalSettingsResponsePtrOutput) Elem() ApprovalSettingsResponseOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) ApprovalSettingsResponse { return *v }).(ApprovalSettingsResponseOutput)
}

// The type of rule
func (o ApprovalSettingsResponsePtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsResponsePtrOutput) ApprovalStages() ApprovalStageResponseArrayOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) []ApprovalStageResponse {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageResponseArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsResponsePtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsResponsePtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsResponsePtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval stage.
type ApprovalStage struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []SingleUser `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []SingleUser `pulumi:"primaryApprovers"`
}

// ApprovalStageInput is an input type that accepts ApprovalStageArgs and ApprovalStageOutput values.
// You can construct a concrete instance of `ApprovalStageInput` via:
//
//          ApprovalStageArgs{...}
type ApprovalStageInput interface {
	pulumi.Input

	ToApprovalStageOutput() ApprovalStageOutput
	ToApprovalStageOutputWithContext(context.Context) ApprovalStageOutput
}

// The approval stage.
type ApprovalStageArgs struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays pulumi.IntPtrInput `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers SingleUserArrayInput `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes pulumi.IntPtrInput `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired pulumi.BoolPtrInput `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled pulumi.BoolPtrInput `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers SingleUserArrayInput `pulumi:"primaryApprovers"`
}

func (ApprovalStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStage)(nil)).Elem()
}

func (i ApprovalStageArgs) ToApprovalStageOutput() ApprovalStageOutput {
	return i.ToApprovalStageOutputWithContext(context.Background())
}

func (i ApprovalStageArgs) ToApprovalStageOutputWithContext(ctx context.Context) ApprovalStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageOutput)
}

// ApprovalStageArrayInput is an input type that accepts ApprovalStageArray and ApprovalStageArrayOutput values.
// You can construct a concrete instance of `ApprovalStageArrayInput` via:
//
//          ApprovalStageArray{ ApprovalStageArgs{...} }
type ApprovalStageArrayInput interface {
	pulumi.Input

	ToApprovalStageArrayOutput() ApprovalStageArrayOutput
	ToApprovalStageArrayOutputWithContext(context.Context) ApprovalStageArrayOutput
}

type ApprovalStageArray []ApprovalStageInput

func (ApprovalStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStage)(nil)).Elem()
}

func (i ApprovalStageArray) ToApprovalStageArrayOutput() ApprovalStageArrayOutput {
	return i.ToApprovalStageArrayOutputWithContext(context.Background())
}

func (i ApprovalStageArray) ToApprovalStageArrayOutputWithContext(ctx context.Context) ApprovalStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageArrayOutput)
}

// The approval stage.
type ApprovalStageOutput struct{ *pulumi.OutputState }

func (ApprovalStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStage)(nil)).Elem()
}

func (o ApprovalStageOutput) ToApprovalStageOutput() ApprovalStageOutput {
	return o
}

func (o ApprovalStageOutput) ToApprovalStageOutputWithContext(ctx context.Context) ApprovalStageOutput {
	return o
}

// The time in days when approval request would be timed out.
func (o ApprovalStageOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageOutput) EscalationApprovers() SingleUserArrayOutput {
	return o.ApplyT(func(v ApprovalStage) []SingleUser { return v.EscalationApprovers }).(SingleUserArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approves.
func (o ApprovalStageOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determine whether approver need to provide justification for his decision.
func (o ApprovalStageOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageOutput) PrimaryApprovers() SingleUserArrayOutput {
	return o.ApplyT(func(v ApprovalStage) []SingleUser { return v.PrimaryApprovers }).(SingleUserArrayOutput)
}

type ApprovalStageArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStage)(nil)).Elem()
}

func (o ApprovalStageArrayOutput) ToApprovalStageArrayOutput() ApprovalStageArrayOutput {
	return o
}

func (o ApprovalStageArrayOutput) ToApprovalStageArrayOutputWithContext(ctx context.Context) ApprovalStageArrayOutput {
	return o
}

func (o ApprovalStageArrayOutput) Index(i pulumi.IntInput) ApprovalStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStage {
		return vs[0].([]ApprovalStage)[vs[1].(int)]
	}).(ApprovalStageOutput)
}

// The approval stage.
type ApprovalStageResponse struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []SingleUserResponse `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []SingleUserResponse `pulumi:"primaryApprovers"`
}

// ApprovalStageResponseInput is an input type that accepts ApprovalStageResponseArgs and ApprovalStageResponseOutput values.
// You can construct a concrete instance of `ApprovalStageResponseInput` via:
//
//          ApprovalStageResponseArgs{...}
type ApprovalStageResponseInput interface {
	pulumi.Input

	ToApprovalStageResponseOutput() ApprovalStageResponseOutput
	ToApprovalStageResponseOutputWithContext(context.Context) ApprovalStageResponseOutput
}

// The approval stage.
type ApprovalStageResponseArgs struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays pulumi.IntPtrInput `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers SingleUserResponseArrayInput `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes pulumi.IntPtrInput `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired pulumi.BoolPtrInput `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled pulumi.BoolPtrInput `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers SingleUserResponseArrayInput `pulumi:"primaryApprovers"`
}

func (ApprovalStageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStageResponse)(nil)).Elem()
}

func (i ApprovalStageResponseArgs) ToApprovalStageResponseOutput() ApprovalStageResponseOutput {
	return i.ToApprovalStageResponseOutputWithContext(context.Background())
}

func (i ApprovalStageResponseArgs) ToApprovalStageResponseOutputWithContext(ctx context.Context) ApprovalStageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageResponseOutput)
}

// ApprovalStageResponseArrayInput is an input type that accepts ApprovalStageResponseArray and ApprovalStageResponseArrayOutput values.
// You can construct a concrete instance of `ApprovalStageResponseArrayInput` via:
//
//          ApprovalStageResponseArray{ ApprovalStageResponseArgs{...} }
type ApprovalStageResponseArrayInput interface {
	pulumi.Input

	ToApprovalStageResponseArrayOutput() ApprovalStageResponseArrayOutput
	ToApprovalStageResponseArrayOutputWithContext(context.Context) ApprovalStageResponseArrayOutput
}

type ApprovalStageResponseArray []ApprovalStageResponseInput

func (ApprovalStageResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStageResponse)(nil)).Elem()
}

func (i ApprovalStageResponseArray) ToApprovalStageResponseArrayOutput() ApprovalStageResponseArrayOutput {
	return i.ToApprovalStageResponseArrayOutputWithContext(context.Background())
}

func (i ApprovalStageResponseArray) ToApprovalStageResponseArrayOutputWithContext(ctx context.Context) ApprovalStageResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageResponseArrayOutput)
}

// The approval stage.
type ApprovalStageResponseOutput struct{ *pulumi.OutputState }

func (ApprovalStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStageResponse)(nil)).Elem()
}

func (o ApprovalStageResponseOutput) ToApprovalStageResponseOutput() ApprovalStageResponseOutput {
	return o
}

func (o ApprovalStageResponseOutput) ToApprovalStageResponseOutputWithContext(ctx context.Context) ApprovalStageResponseOutput {
	return o
}

// The time in days when approval request would be timed out.
func (o ApprovalStageResponseOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageResponseOutput) EscalationApprovers() SingleUserResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageResponse) []SingleUserResponse { return v.EscalationApprovers }).(SingleUserResponseArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approves.
func (o ApprovalStageResponseOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determine whether approver need to provide justification for his decision.
func (o ApprovalStageResponseOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageResponseOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageResponseOutput) PrimaryApprovers() SingleUserResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageResponse) []SingleUserResponse { return v.PrimaryApprovers }).(SingleUserResponseArrayOutput)
}

type ApprovalStageResponseArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStageResponse)(nil)).Elem()
}

func (o ApprovalStageResponseArrayOutput) ToApprovalStageResponseArrayOutput() ApprovalStageResponseArrayOutput {
	return o
}

func (o ApprovalStageResponseArrayOutput) ToApprovalStageResponseArrayOutputWithContext(ctx context.Context) ApprovalStageResponseArrayOutput {
	return o
}

func (o ApprovalStageResponseArrayOutput) Index(i pulumi.IntInput) ApprovalStageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStageResponse {
		return vs[0].([]ApprovalStageResponse)[vs[1].(int)]
	}).(ApprovalStageResponseOutput)
}

// Identity for the resource.
type Identity struct {
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type *string `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//          IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type *ResourceIdentityType `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//          IdentityArgs{...}
//
//  or:
//
//          nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyT(func(v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Identity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity { return *v }).(IdentityOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of the resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type *string `pulumi:"type"`
}

// IdentityResponseInput is an input type that accepts IdentityResponseArgs and IdentityResponseOutput values.
// You can construct a concrete instance of `IdentityResponseInput` via:
//
//          IdentityResponseArgs{...}
type IdentityResponseInput interface {
	pulumi.Input

	ToIdentityResponseOutput() IdentityResponseOutput
	ToIdentityResponseOutputWithContext(context.Context) IdentityResponseOutput
}

// Identity for the resource.
type IdentityResponseArgs struct {
	// The principal ID of the resource identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (i IdentityResponseArgs) ToIdentityResponseOutput() IdentityResponseOutput {
	return i.ToIdentityResponseOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput)
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput).ToIdentityResponsePtrOutputWithContext(ctx)
}

// IdentityResponsePtrInput is an input type that accepts IdentityResponseArgs, IdentityResponsePtr and IdentityResponsePtrOutput values.
// You can construct a concrete instance of `IdentityResponsePtrInput` via:
//
//          IdentityResponseArgs{...}
//
//  or:
//
//          nil
type IdentityResponsePtrInput interface {
	pulumi.Input

	ToIdentityResponsePtrOutput() IdentityResponsePtrOutput
	ToIdentityResponsePtrOutputWithContext(context.Context) IdentityResponsePtrOutput
}

type identityResponsePtrType IdentityResponseArgs

func IdentityResponsePtr(v *IdentityResponseArgs) IdentityResponsePtrInput {
	return (*identityResponsePtrType)(v)
}

func (*identityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponsePtrOutput)
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o.ApplyT(func(v IdentityResponse) *IdentityResponse {
		return &v
	}).(IdentityResponsePtrOutput)
}

// The principal ID of the resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the resource identity.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse { return *v }).(IdentityResponseOutput)
}

// The principal ID of the resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the resource identity.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Lock owner properties.
type ManagementLockOwner struct {
	// The application ID of the lock owner.
	ApplicationId *string `pulumi:"applicationId"`
}

// ManagementLockOwnerInput is an input type that accepts ManagementLockOwnerArgs and ManagementLockOwnerOutput values.
// You can construct a concrete instance of `ManagementLockOwnerInput` via:
//
//          ManagementLockOwnerArgs{...}
type ManagementLockOwnerInput interface {
	pulumi.Input

	ToManagementLockOwnerOutput() ManagementLockOwnerOutput
	ToManagementLockOwnerOutputWithContext(context.Context) ManagementLockOwnerOutput
}

// Lock owner properties.
type ManagementLockOwnerArgs struct {
	// The application ID of the lock owner.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
}

func (ManagementLockOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwner)(nil)).Elem()
}

func (i ManagementLockOwnerArgs) ToManagementLockOwnerOutput() ManagementLockOwnerOutput {
	return i.ToManagementLockOwnerOutputWithContext(context.Background())
}

func (i ManagementLockOwnerArgs) ToManagementLockOwnerOutputWithContext(ctx context.Context) ManagementLockOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerOutput)
}

// ManagementLockOwnerArrayInput is an input type that accepts ManagementLockOwnerArray and ManagementLockOwnerArrayOutput values.
// You can construct a concrete instance of `ManagementLockOwnerArrayInput` via:
//
//          ManagementLockOwnerArray{ ManagementLockOwnerArgs{...} }
type ManagementLockOwnerArrayInput interface {
	pulumi.Input

	ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput
	ToManagementLockOwnerArrayOutputWithContext(context.Context) ManagementLockOwnerArrayOutput
}

type ManagementLockOwnerArray []ManagementLockOwnerInput

func (ManagementLockOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwner)(nil)).Elem()
}

func (i ManagementLockOwnerArray) ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput {
	return i.ToManagementLockOwnerArrayOutputWithContext(context.Background())
}

func (i ManagementLockOwnerArray) ToManagementLockOwnerArrayOutputWithContext(ctx context.Context) ManagementLockOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerArrayOutput)
}

// Lock owner properties.
type ManagementLockOwnerOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwner)(nil)).Elem()
}

func (o ManagementLockOwnerOutput) ToManagementLockOwnerOutput() ManagementLockOwnerOutput {
	return o
}

func (o ManagementLockOwnerOutput) ToManagementLockOwnerOutputWithContext(ctx context.Context) ManagementLockOwnerOutput {
	return o
}

// The application ID of the lock owner.
func (o ManagementLockOwnerOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockOwner) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

type ManagementLockOwnerArrayOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwner)(nil)).Elem()
}

func (o ManagementLockOwnerArrayOutput) ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput {
	return o
}

func (o ManagementLockOwnerArrayOutput) ToManagementLockOwnerArrayOutputWithContext(ctx context.Context) ManagementLockOwnerArrayOutput {
	return o
}

func (o ManagementLockOwnerArrayOutput) Index(i pulumi.IntInput) ManagementLockOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementLockOwner {
		return vs[0].([]ManagementLockOwner)[vs[1].(int)]
	}).(ManagementLockOwnerOutput)
}

// Lock owner properties.
type ManagementLockOwnerResponse struct {
	// The application ID of the lock owner.
	ApplicationId *string `pulumi:"applicationId"`
}

// ManagementLockOwnerResponseInput is an input type that accepts ManagementLockOwnerResponseArgs and ManagementLockOwnerResponseOutput values.
// You can construct a concrete instance of `ManagementLockOwnerResponseInput` via:
//
//          ManagementLockOwnerResponseArgs{...}
type ManagementLockOwnerResponseInput interface {
	pulumi.Input

	ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput
	ToManagementLockOwnerResponseOutputWithContext(context.Context) ManagementLockOwnerResponseOutput
}

// Lock owner properties.
type ManagementLockOwnerResponseArgs struct {
	// The application ID of the lock owner.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
}

func (ManagementLockOwnerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwnerResponse)(nil)).Elem()
}

func (i ManagementLockOwnerResponseArgs) ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput {
	return i.ToManagementLockOwnerResponseOutputWithContext(context.Background())
}

func (i ManagementLockOwnerResponseArgs) ToManagementLockOwnerResponseOutputWithContext(ctx context.Context) ManagementLockOwnerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerResponseOutput)
}

// ManagementLockOwnerResponseArrayInput is an input type that accepts ManagementLockOwnerResponseArray and ManagementLockOwnerResponseArrayOutput values.
// You can construct a concrete instance of `ManagementLockOwnerResponseArrayInput` via:
//
//          ManagementLockOwnerResponseArray{ ManagementLockOwnerResponseArgs{...} }
type ManagementLockOwnerResponseArrayInput interface {
	pulumi.Input

	ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput
	ToManagementLockOwnerResponseArrayOutputWithContext(context.Context) ManagementLockOwnerResponseArrayOutput
}

type ManagementLockOwnerResponseArray []ManagementLockOwnerResponseInput

func (ManagementLockOwnerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwnerResponse)(nil)).Elem()
}

func (i ManagementLockOwnerResponseArray) ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput {
	return i.ToManagementLockOwnerResponseArrayOutputWithContext(context.Background())
}

func (i ManagementLockOwnerResponseArray) ToManagementLockOwnerResponseArrayOutputWithContext(ctx context.Context) ManagementLockOwnerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerResponseArrayOutput)
}

// Lock owner properties.
type ManagementLockOwnerResponseOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwnerResponse)(nil)).Elem()
}

func (o ManagementLockOwnerResponseOutput) ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput {
	return o
}

func (o ManagementLockOwnerResponseOutput) ToManagementLockOwnerResponseOutputWithContext(ctx context.Context) ManagementLockOwnerResponseOutput {
	return o
}

// The application ID of the lock owner.
func (o ManagementLockOwnerResponseOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockOwnerResponse) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

type ManagementLockOwnerResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwnerResponse)(nil)).Elem()
}

func (o ManagementLockOwnerResponseArrayOutput) ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput {
	return o
}

func (o ManagementLockOwnerResponseArrayOutput) ToManagementLockOwnerResponseArrayOutputWithContext(ctx context.Context) ManagementLockOwnerResponseArrayOutput {
	return o
}

func (o ManagementLockOwnerResponseArrayOutput) Index(i pulumi.IntInput) ManagementLockOwnerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementLockOwnerResponse {
		return vs[0].([]ManagementLockOwnerResponse)[vs[1].(int)]
	}).(ManagementLockOwnerResponseOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessage struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message string `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// NonComplianceMessageInput is an input type that accepts NonComplianceMessageArgs and NonComplianceMessageOutput values.
// You can construct a concrete instance of `NonComplianceMessageInput` via:
//
//          NonComplianceMessageArgs{...}
type NonComplianceMessageInput interface {
	pulumi.Input

	ToNonComplianceMessageOutput() NonComplianceMessageOutput
	ToNonComplianceMessageOutputWithContext(context.Context) NonComplianceMessageOutput
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageArgs struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message pulumi.StringInput `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (NonComplianceMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessage)(nil)).Elem()
}

func (i NonComplianceMessageArgs) ToNonComplianceMessageOutput() NonComplianceMessageOutput {
	return i.ToNonComplianceMessageOutputWithContext(context.Background())
}

func (i NonComplianceMessageArgs) ToNonComplianceMessageOutputWithContext(ctx context.Context) NonComplianceMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageOutput)
}

// NonComplianceMessageArrayInput is an input type that accepts NonComplianceMessageArray and NonComplianceMessageArrayOutput values.
// You can construct a concrete instance of `NonComplianceMessageArrayInput` via:
//
//          NonComplianceMessageArray{ NonComplianceMessageArgs{...} }
type NonComplianceMessageArrayInput interface {
	pulumi.Input

	ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput
	ToNonComplianceMessageArrayOutputWithContext(context.Context) NonComplianceMessageArrayOutput
}

type NonComplianceMessageArray []NonComplianceMessageInput

func (NonComplianceMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessage)(nil)).Elem()
}

func (i NonComplianceMessageArray) ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput {
	return i.ToNonComplianceMessageArrayOutputWithContext(context.Background())
}

func (i NonComplianceMessageArray) ToNonComplianceMessageArrayOutputWithContext(ctx context.Context) NonComplianceMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageArrayOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessage)(nil)).Elem()
}

func (o NonComplianceMessageOutput) ToNonComplianceMessageOutput() NonComplianceMessageOutput {
	return o
}

func (o NonComplianceMessageOutput) ToNonComplianceMessageOutputWithContext(ctx context.Context) NonComplianceMessageOutput {
	return o
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
func (o NonComplianceMessageOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v NonComplianceMessage) string { return v.Message }).(pulumi.StringOutput)
}

// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
func (o NonComplianceMessageOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonComplianceMessage) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type NonComplianceMessageArrayOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessage)(nil)).Elem()
}

func (o NonComplianceMessageArrayOutput) ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput {
	return o
}

func (o NonComplianceMessageArrayOutput) ToNonComplianceMessageArrayOutputWithContext(ctx context.Context) NonComplianceMessageArrayOutput {
	return o
}

func (o NonComplianceMessageArrayOutput) Index(i pulumi.IntInput) NonComplianceMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonComplianceMessage {
		return vs[0].([]NonComplianceMessage)[vs[1].(int)]
	}).(NonComplianceMessageOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageResponse struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message string `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// NonComplianceMessageResponseInput is an input type that accepts NonComplianceMessageResponseArgs and NonComplianceMessageResponseOutput values.
// You can construct a concrete instance of `NonComplianceMessageResponseInput` via:
//
//          NonComplianceMessageResponseArgs{...}
type NonComplianceMessageResponseInput interface {
	pulumi.Input

	ToNonComplianceMessageResponseOutput() NonComplianceMessageResponseOutput
	ToNonComplianceMessageResponseOutputWithContext(context.Context) NonComplianceMessageResponseOutput
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageResponseArgs struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message pulumi.StringInput `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (NonComplianceMessageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessageResponse)(nil)).Elem()
}

func (i NonComplianceMessageResponseArgs) ToNonComplianceMessageResponseOutput() NonComplianceMessageResponseOutput {
	return i.ToNonComplianceMessageResponseOutputWithContext(context.Background())
}

func (i NonComplianceMessageResponseArgs) ToNonComplianceMessageResponseOutputWithContext(ctx context.Context) NonComplianceMessageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageResponseOutput)
}

// NonComplianceMessageResponseArrayInput is an input type that accepts NonComplianceMessageResponseArray and NonComplianceMessageResponseArrayOutput values.
// You can construct a concrete instance of `NonComplianceMessageResponseArrayInput` via:
//
//          NonComplianceMessageResponseArray{ NonComplianceMessageResponseArgs{...} }
type NonComplianceMessageResponseArrayInput interface {
	pulumi.Input

	ToNonComplianceMessageResponseArrayOutput() NonComplianceMessageResponseArrayOutput
	ToNonComplianceMessageResponseArrayOutputWithContext(context.Context) NonComplianceMessageResponseArrayOutput
}

type NonComplianceMessageResponseArray []NonComplianceMessageResponseInput

func (NonComplianceMessageResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessageResponse)(nil)).Elem()
}

func (i NonComplianceMessageResponseArray) ToNonComplianceMessageResponseArrayOutput() NonComplianceMessageResponseArrayOutput {
	return i.ToNonComplianceMessageResponseArrayOutputWithContext(context.Background())
}

func (i NonComplianceMessageResponseArray) ToNonComplianceMessageResponseArrayOutputWithContext(ctx context.Context) NonComplianceMessageResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageResponseArrayOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageResponseOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessageResponse)(nil)).Elem()
}

func (o NonComplianceMessageResponseOutput) ToNonComplianceMessageResponseOutput() NonComplianceMessageResponseOutput {
	return o
}

func (o NonComplianceMessageResponseOutput) ToNonComplianceMessageResponseOutputWithContext(ctx context.Context) NonComplianceMessageResponseOutput {
	return o
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
func (o NonComplianceMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v NonComplianceMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
func (o NonComplianceMessageResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonComplianceMessageResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type NonComplianceMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessageResponse)(nil)).Elem()
}

func (o NonComplianceMessageResponseArrayOutput) ToNonComplianceMessageResponseArrayOutput() NonComplianceMessageResponseArrayOutput {
	return o
}

func (o NonComplianceMessageResponseArrayOutput) ToNonComplianceMessageResponseArrayOutputWithContext(ctx context.Context) NonComplianceMessageResponseArrayOutput {
	return o
}

func (o NonComplianceMessageResponseArrayOutput) Index(i pulumi.IntInput) NonComplianceMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonComplianceMessageResponse {
		return vs[0].([]NonComplianceMessageResponse)[vs[1].(int)]
	}).(NonComplianceMessageResponseOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValue struct {
	// The allowed values for the parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueMetadata `pulumi:"metadata"`
	// The data type of the parameter.
	Type *string `pulumi:"type"`
}

// ParameterDefinitionsValueInput is an input type that accepts ParameterDefinitionsValueArgs and ParameterDefinitionsValueOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueInput` via:
//
//          ParameterDefinitionsValueArgs{...}
type ParameterDefinitionsValueInput interface {
	pulumi.Input

	ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput
	ToParameterDefinitionsValueOutputWithContext(context.Context) ParameterDefinitionsValueOutput
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueArgs struct {
	// The allowed values for the parameter.
	AllowedValues pulumi.ArrayInput `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata ParameterDefinitionsValueMetadataPtrInput `pulumi:"metadata"`
	// The data type of the parameter.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ParameterDefinitionsValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValue)(nil)).Elem()
}

func (i ParameterDefinitionsValueArgs) ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput {
	return i.ToParameterDefinitionsValueOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueArgs) ToParameterDefinitionsValueOutputWithContext(ctx context.Context) ParameterDefinitionsValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueOutput)
}

// ParameterDefinitionsValueMapInput is an input type that accepts ParameterDefinitionsValueMap and ParameterDefinitionsValueMapOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMapInput` via:
//
//          ParameterDefinitionsValueMap{ "key": ParameterDefinitionsValueArgs{...} }
type ParameterDefinitionsValueMapInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput
	ToParameterDefinitionsValueMapOutputWithContext(context.Context) ParameterDefinitionsValueMapOutput
}

type ParameterDefinitionsValueMap map[string]ParameterDefinitionsValueInput

func (ParameterDefinitionsValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValue)(nil)).Elem()
}

func (i ParameterDefinitionsValueMap) ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput {
	return i.ToParameterDefinitionsValueMapOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMap) ToParameterDefinitionsValueMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMapOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValue)(nil)).Elem()
}

func (o ParameterDefinitionsValueOutput) ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput {
	return o
}

func (o ParameterDefinitionsValueOutput) ToParameterDefinitionsValueOutputWithContext(ctx context.Context) ParameterDefinitionsValueOutput {
	return o
}

// The allowed values for the parameter.
func (o ParameterDefinitionsValueOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// The default value for the parameter if no value is provided.
func (o ParameterDefinitionsValueOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// General metadata for the parameter.
func (o ParameterDefinitionsValueOutput) Metadata() ParameterDefinitionsValueMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) *ParameterDefinitionsValueMetadata { return v.Metadata }).(ParameterDefinitionsValueMetadataPtrOutput)
}

// The data type of the parameter.
func (o ParameterDefinitionsValueOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValue)(nil)).Elem()
}

func (o ParameterDefinitionsValueMapOutput) ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput {
	return o
}

func (o ParameterDefinitionsValueMapOutput) ToParameterDefinitionsValueMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueMapOutput {
	return o
}

func (o ParameterDefinitionsValueMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionsValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinitionsValue {
		return vs[0].(map[string]ParameterDefinitionsValue)[vs[1].(string)]
	}).(ParameterDefinitionsValueOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadata struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions *bool `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description *string `pulumi:"description"`
	// The display name for the parameter.
	DisplayName *string `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType *string `pulumi:"strongType"`
}

// ParameterDefinitionsValueMetadataInput is an input type that accepts ParameterDefinitionsValueMetadataArgs and ParameterDefinitionsValueMetadataOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMetadataInput` via:
//
//          ParameterDefinitionsValueMetadataArgs{...}
type ParameterDefinitionsValueMetadataInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput
	ToParameterDefinitionsValueMetadataOutputWithContext(context.Context) ParameterDefinitionsValueMetadataOutput
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadataArgs struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions pulumi.BoolPtrInput `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name for the parameter.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType pulumi.StringPtrInput `pulumi:"strongType"`
}

func (ParameterDefinitionsValueMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput {
	return i.ToParameterDefinitionsValueMetadataOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataOutput)
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return i.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataOutput).ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx)
}

// ParameterDefinitionsValueMetadataPtrInput is an input type that accepts ParameterDefinitionsValueMetadataArgs, ParameterDefinitionsValueMetadataPtr and ParameterDefinitionsValueMetadataPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMetadataPtrInput` via:
//
//          ParameterDefinitionsValueMetadataArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsValueMetadataPtrInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput
	ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Context) ParameterDefinitionsValueMetadataPtrOutput
}

type parameterDefinitionsValueMetadataPtrType ParameterDefinitionsValueMetadataArgs

func ParameterDefinitionsValueMetadataPtr(v *ParameterDefinitionsValueMetadataArgs) ParameterDefinitionsValueMetadataPtrInput {
	return (*parameterDefinitionsValueMetadataPtrType)(v)
}

func (*parameterDefinitionsValueMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (i *parameterDefinitionsValueMetadataPtrType) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return i.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsValueMetadataPtrType) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataPtrOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadataOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return o.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *ParameterDefinitionsValueMetadata {
		return &v
	}).(ParameterDefinitionsValueMetadataPtrOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueMetadataOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *bool { return v.AssignPermissions }).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueMetadataOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueMetadataOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueMetadataPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueMetadataPtrOutput) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataPtrOutput) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataPtrOutput) Elem() ParameterDefinitionsValueMetadataOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) ParameterDefinitionsValueMetadata { return *v }).(ParameterDefinitionsValueMetadataOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueMetadataPtrOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPermissions
	}).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueMetadataPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueMetadataPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueMetadataPtrOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StrongType
	}).(pulumi.StringPtrOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueResponse struct {
	// The allowed values for the parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueResponseMetadata `pulumi:"metadata"`
	// The data type of the parameter.
	Type *string `pulumi:"type"`
}

// ParameterDefinitionsValueResponseInput is an input type that accepts ParameterDefinitionsValueResponseArgs and ParameterDefinitionsValueResponseOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueResponseInput` via:
//
//          ParameterDefinitionsValueResponseArgs{...}
type ParameterDefinitionsValueResponseInput interface {
	pulumi.Input

	ToParameterDefinitionsValueResponseOutput() ParameterDefinitionsValueResponseOutput
	ToParameterDefinitionsValueResponseOutputWithContext(context.Context) ParameterDefinitionsValueResponseOutput
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueResponseArgs struct {
	// The allowed values for the parameter.
	AllowedValues pulumi.ArrayInput `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata ParameterDefinitionsValueResponseMetadataPtrInput `pulumi:"metadata"`
	// The data type of the parameter.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ParameterDefinitionsValueResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (i ParameterDefinitionsValueResponseArgs) ToParameterDefinitionsValueResponseOutput() ParameterDefinitionsValueResponseOutput {
	return i.ToParameterDefinitionsValueResponseOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueResponseArgs) ToParameterDefinitionsValueResponseOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseOutput)
}

// ParameterDefinitionsValueResponseMapInput is an input type that accepts ParameterDefinitionsValueResponseMap and ParameterDefinitionsValueResponseMapOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueResponseMapInput` via:
//
//          ParameterDefinitionsValueResponseMap{ "key": ParameterDefinitionsValueResponseArgs{...} }
type ParameterDefinitionsValueResponseMapInput interface {
	pulumi.Input

	ToParameterDefinitionsValueResponseMapOutput() ParameterDefinitionsValueResponseMapOutput
	ToParameterDefinitionsValueResponseMapOutputWithContext(context.Context) ParameterDefinitionsValueResponseMapOutput
}

type ParameterDefinitionsValueResponseMap map[string]ParameterDefinitionsValueResponseInput

func (ParameterDefinitionsValueResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (i ParameterDefinitionsValueResponseMap) ToParameterDefinitionsValueResponseMapOutput() ParameterDefinitionsValueResponseMapOutput {
	return i.ToParameterDefinitionsValueResponseMapOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueResponseMap) ToParameterDefinitionsValueResponseMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseMapOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueResponseOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseOutput) ToParameterDefinitionsValueResponseOutput() ParameterDefinitionsValueResponseOutput {
	return o
}

func (o ParameterDefinitionsValueResponseOutput) ToParameterDefinitionsValueResponseOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseOutput {
	return o
}

// The allowed values for the parameter.
func (o ParameterDefinitionsValueResponseOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// The default value for the parameter if no value is provided.
func (o ParameterDefinitionsValueResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// General metadata for the parameter.
func (o ParameterDefinitionsValueResponseOutput) Metadata() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) *ParameterDefinitionsValueResponseMetadata {
		return v.Metadata
	}).(ParameterDefinitionsValueResponseMetadataPtrOutput)
}

// The data type of the parameter.
func (o ParameterDefinitionsValueResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMapOutput) ToParameterDefinitionsValueResponseMapOutput() ParameterDefinitionsValueResponseMapOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMapOutput) ToParameterDefinitionsValueResponseMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMapOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionsValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinitionsValueResponse {
		return vs[0].(map[string]ParameterDefinitionsValueResponse)[vs[1].(string)]
	}).(ParameterDefinitionsValueResponseOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueResponseMetadata struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions *bool `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description *string `pulumi:"description"`
	// The display name for the parameter.
	DisplayName *string `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType *string `pulumi:"strongType"`
}

// ParameterDefinitionsValueResponseMetadataInput is an input type that accepts ParameterDefinitionsValueResponseMetadataArgs and ParameterDefinitionsValueResponseMetadataOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueResponseMetadataInput` via:
//
//          ParameterDefinitionsValueResponseMetadataArgs{...}
type ParameterDefinitionsValueResponseMetadataInput interface {
	pulumi.Input

	ToParameterDefinitionsValueResponseMetadataOutput() ParameterDefinitionsValueResponseMetadataOutput
	ToParameterDefinitionsValueResponseMetadataOutputWithContext(context.Context) ParameterDefinitionsValueResponseMetadataOutput
}

// General metadata for the parameter.
type ParameterDefinitionsValueResponseMetadataArgs struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions pulumi.BoolPtrInput `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name for the parameter.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType pulumi.StringPtrInput `pulumi:"strongType"`
}

func (ParameterDefinitionsValueResponseMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (i ParameterDefinitionsValueResponseMetadataArgs) ToParameterDefinitionsValueResponseMetadataOutput() ParameterDefinitionsValueResponseMetadataOutput {
	return i.ToParameterDefinitionsValueResponseMetadataOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueResponseMetadataArgs) ToParameterDefinitionsValueResponseMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseMetadataOutput)
}

func (i ParameterDefinitionsValueResponseMetadataArgs) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return i.ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueResponseMetadataArgs) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseMetadataOutput).ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx)
}

// ParameterDefinitionsValueResponseMetadataPtrInput is an input type that accepts ParameterDefinitionsValueResponseMetadataArgs, ParameterDefinitionsValueResponseMetadataPtr and ParameterDefinitionsValueResponseMetadataPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueResponseMetadataPtrInput` via:
//
//          ParameterDefinitionsValueResponseMetadataArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsValueResponseMetadataPtrInput interface {
	pulumi.Input

	ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput
	ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput
}

type parameterDefinitionsValueResponseMetadataPtrType ParameterDefinitionsValueResponseMetadataArgs

func ParameterDefinitionsValueResponseMetadataPtr(v *ParameterDefinitionsValueResponseMetadataArgs) ParameterDefinitionsValueResponseMetadataPtrInput {
	return (*parameterDefinitionsValueResponseMetadataPtrType)(v)
}

func (*parameterDefinitionsValueResponseMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (i *parameterDefinitionsValueResponseMetadataPtrType) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return i.ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsValueResponseMetadataPtrType) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueResponseMetadataPtrOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueResponseMetadataOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataOutput() ParameterDefinitionsValueResponseMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o.ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *ParameterDefinitionsValueResponseMetadata {
		return &v
	}).(ParameterDefinitionsValueResponseMetadataPtrOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueResponseMetadataOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *bool { return v.AssignPermissions }).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueResponseMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueResponseMetadataOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueResponseMetadataOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueResponseMetadataPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) Elem() ParameterDefinitionsValueResponseMetadataOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) ParameterDefinitionsValueResponseMetadata {
		return *v
	}).(ParameterDefinitionsValueResponseMetadataOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPermissions
	}).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StrongType
	}).(pulumi.StringPtrOutput)
}

// The value of a parameter.
type ParameterValuesValue struct {
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// ParameterValuesValueInput is an input type that accepts ParameterValuesValueArgs and ParameterValuesValueOutput values.
// You can construct a concrete instance of `ParameterValuesValueInput` via:
//
//          ParameterValuesValueArgs{...}
type ParameterValuesValueInput interface {
	pulumi.Input

	ToParameterValuesValueOutput() ParameterValuesValueOutput
	ToParameterValuesValueOutputWithContext(context.Context) ParameterValuesValueOutput
}

// The value of a parameter.
type ParameterValuesValueArgs struct {
	// The value of the parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (ParameterValuesValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValue)(nil)).Elem()
}

func (i ParameterValuesValueArgs) ToParameterValuesValueOutput() ParameterValuesValueOutput {
	return i.ToParameterValuesValueOutputWithContext(context.Background())
}

func (i ParameterValuesValueArgs) ToParameterValuesValueOutputWithContext(ctx context.Context) ParameterValuesValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueOutput)
}

// ParameterValuesValueMapInput is an input type that accepts ParameterValuesValueMap and ParameterValuesValueMapOutput values.
// You can construct a concrete instance of `ParameterValuesValueMapInput` via:
//
//          ParameterValuesValueMap{ "key": ParameterValuesValueArgs{...} }
type ParameterValuesValueMapInput interface {
	pulumi.Input

	ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput
	ToParameterValuesValueMapOutputWithContext(context.Context) ParameterValuesValueMapOutput
}

type ParameterValuesValueMap map[string]ParameterValuesValueInput

func (ParameterValuesValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValue)(nil)).Elem()
}

func (i ParameterValuesValueMap) ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput {
	return i.ToParameterValuesValueMapOutputWithContext(context.Background())
}

func (i ParameterValuesValueMap) ToParameterValuesValueMapOutputWithContext(ctx context.Context) ParameterValuesValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueMapOutput)
}

// The value of a parameter.
type ParameterValuesValueOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValue)(nil)).Elem()
}

func (o ParameterValuesValueOutput) ToParameterValuesValueOutput() ParameterValuesValueOutput {
	return o
}

func (o ParameterValuesValueOutput) ToParameterValuesValueOutputWithContext(ctx context.Context) ParameterValuesValueOutput {
	return o
}

// The value of the parameter.
func (o ParameterValuesValueOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValuesValue) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValuesValueMapOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValue)(nil)).Elem()
}

func (o ParameterValuesValueMapOutput) ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput {
	return o
}

func (o ParameterValuesValueMapOutput) ToParameterValuesValueMapOutputWithContext(ctx context.Context) ParameterValuesValueMapOutput {
	return o
}

func (o ParameterValuesValueMapOutput) MapIndex(k pulumi.StringInput) ParameterValuesValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValuesValue {
		return vs[0].(map[string]ParameterValuesValue)[vs[1].(string)]
	}).(ParameterValuesValueOutput)
}

// The value of a parameter.
type ParameterValuesValueResponse struct {
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// ParameterValuesValueResponseInput is an input type that accepts ParameterValuesValueResponseArgs and ParameterValuesValueResponseOutput values.
// You can construct a concrete instance of `ParameterValuesValueResponseInput` via:
//
//          ParameterValuesValueResponseArgs{...}
type ParameterValuesValueResponseInput interface {
	pulumi.Input

	ToParameterValuesValueResponseOutput() ParameterValuesValueResponseOutput
	ToParameterValuesValueResponseOutputWithContext(context.Context) ParameterValuesValueResponseOutput
}

// The value of a parameter.
type ParameterValuesValueResponseArgs struct {
	// The value of the parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (ParameterValuesValueResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValueResponse)(nil)).Elem()
}

func (i ParameterValuesValueResponseArgs) ToParameterValuesValueResponseOutput() ParameterValuesValueResponseOutput {
	return i.ToParameterValuesValueResponseOutputWithContext(context.Background())
}

func (i ParameterValuesValueResponseArgs) ToParameterValuesValueResponseOutputWithContext(ctx context.Context) ParameterValuesValueResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueResponseOutput)
}

// ParameterValuesValueResponseMapInput is an input type that accepts ParameterValuesValueResponseMap and ParameterValuesValueResponseMapOutput values.
// You can construct a concrete instance of `ParameterValuesValueResponseMapInput` via:
//
//          ParameterValuesValueResponseMap{ "key": ParameterValuesValueResponseArgs{...} }
type ParameterValuesValueResponseMapInput interface {
	pulumi.Input

	ToParameterValuesValueResponseMapOutput() ParameterValuesValueResponseMapOutput
	ToParameterValuesValueResponseMapOutputWithContext(context.Context) ParameterValuesValueResponseMapOutput
}

type ParameterValuesValueResponseMap map[string]ParameterValuesValueResponseInput

func (ParameterValuesValueResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValueResponse)(nil)).Elem()
}

func (i ParameterValuesValueResponseMap) ToParameterValuesValueResponseMapOutput() ParameterValuesValueResponseMapOutput {
	return i.ToParameterValuesValueResponseMapOutputWithContext(context.Background())
}

func (i ParameterValuesValueResponseMap) ToParameterValuesValueResponseMapOutputWithContext(ctx context.Context) ParameterValuesValueResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueResponseMapOutput)
}

// The value of a parameter.
type ParameterValuesValueResponseOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValueResponse)(nil)).Elem()
}

func (o ParameterValuesValueResponseOutput) ToParameterValuesValueResponseOutput() ParameterValuesValueResponseOutput {
	return o
}

func (o ParameterValuesValueResponseOutput) ToParameterValuesValueResponseOutputWithContext(ctx context.Context) ParameterValuesValueResponseOutput {
	return o
}

// The value of the parameter.
func (o ParameterValuesValueResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValuesValueResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValuesValueResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValueResponse)(nil)).Elem()
}

func (o ParameterValuesValueResponseMapOutput) ToParameterValuesValueResponseMapOutput() ParameterValuesValueResponseMapOutput {
	return o
}

func (o ParameterValuesValueResponseMapOutput) ToParameterValuesValueResponseMapOutputWithContext(ctx context.Context) ParameterValuesValueResponseMapOutput {
	return o
}

func (o ParameterValuesValueResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterValuesValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValuesValueResponse {
		return vs[0].(map[string]ParameterValuesValueResponse)[vs[1].(string)]
	}).(ParameterValuesValueResponseOutput)
}

// Role definition permissions.
type Permission struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Allowed Data actions.
	DataActions []string `pulumi:"dataActions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions []string `pulumi:"notDataActions"`
}

// PermissionInput is an input type that accepts PermissionArgs and PermissionOutput values.
// You can construct a concrete instance of `PermissionInput` via:
//
//          PermissionArgs{...}
type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(context.Context) PermissionOutput
}

// Role definition permissions.
type PermissionArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Allowed Data actions.
	DataActions pulumi.StringArrayInput `pulumi:"dataActions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions pulumi.StringArrayInput `pulumi:"notDataActions"`
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (i PermissionArgs) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i PermissionArgs) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//          PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// Role definition permissions.
type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// Allowed actions.
func (o PermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Allowed Data actions.
func (o PermissionOutput) DataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.DataActions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// Denied Data actions.
func (o PermissionOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.NotDataActions }).(pulumi.StringArrayOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Permission {
		return vs[0].([]Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

// Role definition permissions.
type PermissionResponse struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Allowed Data actions.
	DataActions []string `pulumi:"dataActions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions []string `pulumi:"notDataActions"`
}

// PermissionResponseInput is an input type that accepts PermissionResponseArgs and PermissionResponseOutput values.
// You can construct a concrete instance of `PermissionResponseInput` via:
//
//          PermissionResponseArgs{...}
type PermissionResponseInput interface {
	pulumi.Input

	ToPermissionResponseOutput() PermissionResponseOutput
	ToPermissionResponseOutputWithContext(context.Context) PermissionResponseOutput
}

// Role definition permissions.
type PermissionResponseArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Allowed Data actions.
	DataActions pulumi.StringArrayInput `pulumi:"dataActions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions pulumi.StringArrayInput `pulumi:"notDataActions"`
}

func (PermissionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (i PermissionResponseArgs) ToPermissionResponseOutput() PermissionResponseOutput {
	return i.ToPermissionResponseOutputWithContext(context.Background())
}

func (i PermissionResponseArgs) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionResponseOutput)
}

// PermissionResponseArrayInput is an input type that accepts PermissionResponseArray and PermissionResponseArrayOutput values.
// You can construct a concrete instance of `PermissionResponseArrayInput` via:
//
//          PermissionResponseArray{ PermissionResponseArgs{...} }
type PermissionResponseArrayInput interface {
	pulumi.Input

	ToPermissionResponseArrayOutput() PermissionResponseArrayOutput
	ToPermissionResponseArrayOutputWithContext(context.Context) PermissionResponseArrayOutput
}

type PermissionResponseArray []PermissionResponseInput

func (PermissionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (i PermissionResponseArray) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return i.ToPermissionResponseArrayOutputWithContext(context.Background())
}

func (i PermissionResponseArray) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionResponseArrayOutput)
}

// Role definition permissions.
type PermissionResponseOutput struct{ *pulumi.OutputState }

func (PermissionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseOutput) ToPermissionResponseOutput() PermissionResponseOutput {
	return o
}

func (o PermissionResponseOutput) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return o
}

// Allowed actions.
func (o PermissionResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Allowed Data actions.
func (o PermissionResponseOutput) DataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.DataActions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionResponseOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// Denied Data actions.
func (o PermissionResponseOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.NotDataActions }).(pulumi.StringArrayOutput)
}

type PermissionResponseArrayOutput struct{ *pulumi.OutputState }

func (PermissionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) Index(i pulumi.IntInput) PermissionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionResponse {
		return vs[0].([]PermissionResponse)[vs[1].(int)]
	}).(PermissionResponseOutput)
}

// The policy definition group.
type PolicyDefinitionGroup struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupInput is an input type that accepts PolicyDefinitionGroupArgs and PolicyDefinitionGroupOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupInput` via:
//
//          PolicyDefinitionGroupArgs{...}
type PolicyDefinitionGroupInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput
	ToPolicyDefinitionGroupOutputWithContext(context.Context) PolicyDefinitionGroupOutput
}

// The policy definition group.
type PolicyDefinitionGroupArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return i.ToPolicyDefinitionGroupOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupOutput)
}

// PolicyDefinitionGroupArrayInput is an input type that accepts PolicyDefinitionGroupArray and PolicyDefinitionGroupArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupArrayInput` via:
//
//          PolicyDefinitionGroupArray{ PolicyDefinitionGroupArgs{...} }
type PolicyDefinitionGroupArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput
	ToPolicyDefinitionGroupArrayOutputWithContext(context.Context) PolicyDefinitionGroupArrayOutput
}

type PolicyDefinitionGroupArray []PolicyDefinitionGroupInput

func (PolicyDefinitionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return i.ToPolicyDefinitionGroupArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return o
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroup {
		return vs[0].([]PolicyDefinitionGroup)[vs[1].(int)]
	}).(PolicyDefinitionGroupOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponse struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupResponseInput is an input type that accepts PolicyDefinitionGroupResponseArgs and PolicyDefinitionGroupResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupResponseInput` via:
//
//          PolicyDefinitionGroupResponseArgs{...}
type PolicyDefinitionGroupResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput
	ToPolicyDefinitionGroupResponseOutputWithContext(context.Context) PolicyDefinitionGroupResponseOutput
}

// The policy definition group.
type PolicyDefinitionGroupResponseArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupResponseArgs) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return i.ToPolicyDefinitionGroupResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupResponseArgs) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupResponseOutput)
}

// PolicyDefinitionGroupResponseArrayInput is an input type that accepts PolicyDefinitionGroupResponseArray and PolicyDefinitionGroupResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupResponseArrayInput` via:
//
//          PolicyDefinitionGroupResponseArray{ PolicyDefinitionGroupResponseArgs{...} }
type PolicyDefinitionGroupResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput
	ToPolicyDefinitionGroupResponseArrayOutputWithContext(context.Context) PolicyDefinitionGroupResponseArrayOutput
}

type PolicyDefinitionGroupResponseArray []PolicyDefinitionGroupResponseInput

func (PolicyDefinitionGroupResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupResponseArray) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return i.ToPolicyDefinitionGroupResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupResponseArray) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupResponseArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return o
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupResponseOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroupResponse {
		return vs[0].([]PolicyDefinitionGroupResponse)[vs[1].(int)]
	}).(PolicyDefinitionGroupResponseOutput)
}

// The policy definition reference.
type PolicyDefinitionReference struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValue `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceInput is an input type that accepts PolicyDefinitionReferenceArgs and PolicyDefinitionReferenceOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceInput` via:
//
//          PolicyDefinitionReferenceArgs{...}
type PolicyDefinitionReferenceInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput
	ToPolicyDefinitionReferenceOutputWithContext(context.Context) PolicyDefinitionReferenceOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueMapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return i.ToPolicyDefinitionReferenceOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceOutput)
}

// PolicyDefinitionReferenceArrayInput is an input type that accepts PolicyDefinitionReferenceArray and PolicyDefinitionReferenceArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceArrayInput` via:
//
//          PolicyDefinitionReferenceArray{ PolicyDefinitionReferenceArgs{...} }
type PolicyDefinitionReferenceArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput
	ToPolicyDefinitionReferenceArrayOutputWithContext(context.Context) PolicyDefinitionReferenceArrayOutput
}

type PolicyDefinitionReferenceArray []PolicyDefinitionReferenceInput

func (PolicyDefinitionReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return i.ToPolicyDefinitionReferenceArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return o
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceOutput) Parameters() ParameterValuesValueMapOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) map[string]ParameterValuesValue { return v.Parameters }).(ParameterValuesValueMapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReference {
		return vs[0].([]PolicyDefinitionReference)[vs[1].(int)]
	}).(PolicyDefinitionReferenceOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponse struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValueResponse `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceResponseInput is an input type that accepts PolicyDefinitionReferenceResponseArgs and PolicyDefinitionReferenceResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseInput` via:
//
//          PolicyDefinitionReferenceResponseArgs{...}
type PolicyDefinitionReferenceResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput
	ToPolicyDefinitionReferenceResponseOutputWithContext(context.Context) PolicyDefinitionReferenceResponseOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueResponseMapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return i.ToPolicyDefinitionReferenceResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseOutput)
}

// PolicyDefinitionReferenceResponseArrayInput is an input type that accepts PolicyDefinitionReferenceResponseArray and PolicyDefinitionReferenceResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseArrayInput` via:
//
//          PolicyDefinitionReferenceResponseArray{ PolicyDefinitionReferenceResponseArgs{...} }
type PolicyDefinitionReferenceResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput
	ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Context) PolicyDefinitionReferenceResponseArrayOutput
}

type PolicyDefinitionReferenceResponseArray []PolicyDefinitionReferenceResponseInput

func (PolicyDefinitionReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return i.ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceResponseOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceResponseOutput) Parameters() ParameterValuesValueResponseMapOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) map[string]ParameterValuesValueResponse { return v.Parameters }).(ParameterValuesValueResponseMapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReferenceResponse {
		return vs[0].([]PolicyDefinitionReferenceResponse)[vs[1].(int)]
	}).(PolicyDefinitionReferenceResponseOutput)
}

// Deny assignment principal.
type Principal struct {
	// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Id *string `pulumi:"id"`
	// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Type *string `pulumi:"type"`
}

// PrincipalInput is an input type that accepts PrincipalArgs and PrincipalOutput values.
// You can construct a concrete instance of `PrincipalInput` via:
//
//          PrincipalArgs{...}
type PrincipalInput interface {
	pulumi.Input

	ToPrincipalOutput() PrincipalOutput
	ToPrincipalOutputWithContext(context.Context) PrincipalOutput
}

// Deny assignment principal.
type PrincipalArgs struct {
	// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Principal)(nil)).Elem()
}

func (i PrincipalArgs) ToPrincipalOutput() PrincipalOutput {
	return i.ToPrincipalOutputWithContext(context.Background())
}

func (i PrincipalArgs) ToPrincipalOutputWithContext(ctx context.Context) PrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalOutput)
}

// PrincipalArrayInput is an input type that accepts PrincipalArray and PrincipalArrayOutput values.
// You can construct a concrete instance of `PrincipalArrayInput` via:
//
//          PrincipalArray{ PrincipalArgs{...} }
type PrincipalArrayInput interface {
	pulumi.Input

	ToPrincipalArrayOutput() PrincipalArrayOutput
	ToPrincipalArrayOutputWithContext(context.Context) PrincipalArrayOutput
}

type PrincipalArray []PrincipalInput

func (PrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Principal)(nil)).Elem()
}

func (i PrincipalArray) ToPrincipalArrayOutput() PrincipalArrayOutput {
	return i.ToPrincipalArrayOutputWithContext(context.Background())
}

func (i PrincipalArray) ToPrincipalArrayOutputWithContext(ctx context.Context) PrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalArrayOutput)
}

// Deny assignment principal.
type PrincipalOutput struct{ *pulumi.OutputState }

func (PrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Principal)(nil)).Elem()
}

func (o PrincipalOutput) ToPrincipalOutput() PrincipalOutput {
	return o
}

func (o PrincipalOutput) ToPrincipalOutputWithContext(ctx context.Context) PrincipalOutput {
	return o
}

// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
func (o PrincipalOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Principal) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
func (o PrincipalOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Principal) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PrincipalArrayOutput struct{ *pulumi.OutputState }

func (PrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Principal)(nil)).Elem()
}

func (o PrincipalArrayOutput) ToPrincipalArrayOutput() PrincipalArrayOutput {
	return o
}

func (o PrincipalArrayOutput) ToPrincipalArrayOutputWithContext(ctx context.Context) PrincipalArrayOutput {
	return o
}

func (o PrincipalArrayOutput) Index(i pulumi.IntInput) PrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Principal {
		return vs[0].([]Principal)[vs[1].(int)]
	}).(PrincipalOutput)
}

// Deny assignment principal.
type PrincipalResponse struct {
	// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Id *string `pulumi:"id"`
	// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Type *string `pulumi:"type"`
}

// PrincipalResponseInput is an input type that accepts PrincipalResponseArgs and PrincipalResponseOutput values.
// You can construct a concrete instance of `PrincipalResponseInput` via:
//
//          PrincipalResponseArgs{...}
type PrincipalResponseInput interface {
	pulumi.Input

	ToPrincipalResponseOutput() PrincipalResponseOutput
	ToPrincipalResponseOutputWithContext(context.Context) PrincipalResponseOutput
}

// Deny assignment principal.
type PrincipalResponseArgs struct {
	// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PrincipalResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalResponse)(nil)).Elem()
}

func (i PrincipalResponseArgs) ToPrincipalResponseOutput() PrincipalResponseOutput {
	return i.ToPrincipalResponseOutputWithContext(context.Background())
}

func (i PrincipalResponseArgs) ToPrincipalResponseOutputWithContext(ctx context.Context) PrincipalResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalResponseOutput)
}

// PrincipalResponseArrayInput is an input type that accepts PrincipalResponseArray and PrincipalResponseArrayOutput values.
// You can construct a concrete instance of `PrincipalResponseArrayInput` via:
//
//          PrincipalResponseArray{ PrincipalResponseArgs{...} }
type PrincipalResponseArrayInput interface {
	pulumi.Input

	ToPrincipalResponseArrayOutput() PrincipalResponseArrayOutput
	ToPrincipalResponseArrayOutputWithContext(context.Context) PrincipalResponseArrayOutput
}

type PrincipalResponseArray []PrincipalResponseInput

func (PrincipalResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrincipalResponse)(nil)).Elem()
}

func (i PrincipalResponseArray) ToPrincipalResponseArrayOutput() PrincipalResponseArrayOutput {
	return i.ToPrincipalResponseArrayOutputWithContext(context.Background())
}

func (i PrincipalResponseArray) ToPrincipalResponseArrayOutputWithContext(ctx context.Context) PrincipalResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalResponseArrayOutput)
}

// Deny assignment principal.
type PrincipalResponseOutput struct{ *pulumi.OutputState }

func (PrincipalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalResponse)(nil)).Elem()
}

func (o PrincipalResponseOutput) ToPrincipalResponseOutput() PrincipalResponseOutput {
	return o
}

func (o PrincipalResponseOutput) ToPrincipalResponseOutputWithContext(ctx context.Context) PrincipalResponseOutput {
	return o
}

// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
func (o PrincipalResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
func (o PrincipalResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PrincipalResponseArrayOutput struct{ *pulumi.OutputState }

func (PrincipalResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrincipalResponse)(nil)).Elem()
}

func (o PrincipalResponseArrayOutput) ToPrincipalResponseArrayOutput() PrincipalResponseArrayOutput {
	return o
}

func (o PrincipalResponseArrayOutput) ToPrincipalResponseArrayOutputWithContext(ctx context.Context) PrincipalResponseArrayOutput {
	return o
}

func (o PrincipalResponseArrayOutput) Index(i pulumi.IntInput) PrincipalResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrincipalResponse {
		return vs[0].([]PrincipalResponse)[vs[1].(int)]
	}).(PrincipalResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettings `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyApprovalRuleInput is an input type that accepts RoleManagementPolicyApprovalRuleArgs and RoleManagementPolicyApprovalRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyApprovalRuleInput` via:
//
//          RoleManagementPolicyApprovalRuleArgs{...}
type RoleManagementPolicyApprovalRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput
	ToRoleManagementPolicyApprovalRuleOutputWithContext(context.Context) RoleManagementPolicyApprovalRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The approval setting
	Setting ApprovalSettingsPtrInput `pulumi:"setting"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRule)(nil)).Elem()
}

func (i RoleManagementPolicyApprovalRuleArgs) ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput {
	return i.ToRoleManagementPolicyApprovalRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyApprovalRuleArgs) ToRoleManagementPolicyApprovalRuleOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyApprovalRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRule)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleOutput) ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleOutput) ToRoleManagementPolicyApprovalRuleOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleOutput) Setting() ApprovalSettingsPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *ApprovalSettings { return v.Setting }).(ApprovalSettingsPtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettingsResponse `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyApprovalRuleResponseInput is an input type that accepts RoleManagementPolicyApprovalRuleResponseArgs and RoleManagementPolicyApprovalRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyApprovalRuleResponseInput` via:
//
//          RoleManagementPolicyApprovalRuleResponseArgs{...}
type RoleManagementPolicyApprovalRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyApprovalRuleResponseOutput() RoleManagementPolicyApprovalRuleResponseOutput
	ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(context.Context) RoleManagementPolicyApprovalRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The approval setting
	Setting ApprovalSettingsResponsePtrInput `pulumi:"setting"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyApprovalRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyApprovalRuleResponseArgs) ToRoleManagementPolicyApprovalRuleResponseOutput() RoleManagementPolicyApprovalRuleResponseOutput {
	return i.ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyApprovalRuleResponseArgs) ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyApprovalRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleResponseOutput) ToRoleManagementPolicyApprovalRuleResponseOutput() RoleManagementPolicyApprovalRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleResponseOutput) ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleResponseOutput) Setting() ApprovalSettingsResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *ApprovalSettingsResponse { return v.Setting }).(ApprovalSettingsResponsePtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRule struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyAuthenticationContextRuleInput is an input type that accepts RoleManagementPolicyAuthenticationContextRuleArgs and RoleManagementPolicyAuthenticationContextRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyAuthenticationContextRuleInput` via:
//
//          RoleManagementPolicyAuthenticationContextRuleArgs{...}
type RoleManagementPolicyAuthenticationContextRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput
	ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(context.Context) RoleManagementPolicyAuthenticationContextRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleArgs struct {
	// The claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyAuthenticationContextRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRule)(nil)).Elem()
}

func (i RoleManagementPolicyAuthenticationContextRuleArgs) ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput {
	return i.ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyAuthenticationContextRuleArgs) ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyAuthenticationContextRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRule)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleOutput) ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleOutput) ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleResponse struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyAuthenticationContextRuleResponseInput is an input type that accepts RoleManagementPolicyAuthenticationContextRuleResponseArgs and RoleManagementPolicyAuthenticationContextRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyAuthenticationContextRuleResponseInput` via:
//
//          RoleManagementPolicyAuthenticationContextRuleResponseArgs{...}
type RoleManagementPolicyAuthenticationContextRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyAuthenticationContextRuleResponseOutput() RoleManagementPolicyAuthenticationContextRuleResponseOutput
	ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(context.Context) RoleManagementPolicyAuthenticationContextRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleResponseArgs struct {
	// The claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyAuthenticationContextRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyAuthenticationContextRuleResponseArgs) ToRoleManagementPolicyAuthenticationContextRuleResponseOutput() RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return i.ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyAuthenticationContextRuleResponseArgs) ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyAuthenticationContextRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleResponseOutput() RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRule struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyEnablementRuleInput is an input type that accepts RoleManagementPolicyEnablementRuleArgs and RoleManagementPolicyEnablementRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyEnablementRuleInput` via:
//
//          RoleManagementPolicyEnablementRuleArgs{...}
type RoleManagementPolicyEnablementRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput
	ToRoleManagementPolicyEnablementRuleOutputWithContext(context.Context) RoleManagementPolicyEnablementRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleArgs struct {
	// The list of enabled rules.
	EnabledRules pulumi.StringArrayInput `pulumi:"enabledRules"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyEnablementRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRule)(nil)).Elem()
}

func (i RoleManagementPolicyEnablementRuleArgs) ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput {
	return i.ToRoleManagementPolicyEnablementRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyEnablementRuleArgs) ToRoleManagementPolicyEnablementRuleOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyEnablementRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRule)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleOutput) ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleOutput) ToRoleManagementPolicyEnablementRuleOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleResponse struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyEnablementRuleResponseInput is an input type that accepts RoleManagementPolicyEnablementRuleResponseArgs and RoleManagementPolicyEnablementRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyEnablementRuleResponseInput` via:
//
//          RoleManagementPolicyEnablementRuleResponseArgs{...}
type RoleManagementPolicyEnablementRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyEnablementRuleResponseOutput() RoleManagementPolicyEnablementRuleResponseOutput
	ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(context.Context) RoleManagementPolicyEnablementRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleResponseArgs struct {
	// The list of enabled rules.
	EnabledRules pulumi.StringArrayInput `pulumi:"enabledRules"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyEnablementRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyEnablementRuleResponseArgs) ToRoleManagementPolicyEnablementRuleResponseOutput() RoleManagementPolicyEnablementRuleResponseOutput {
	return i.ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyEnablementRuleResponseArgs) ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyEnablementRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleResponseOutput) ToRoleManagementPolicyEnablementRuleResponseOutput() RoleManagementPolicyEnablementRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleResponseOutput) ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleResponseOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleResponseOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyExpirationRuleInput is an input type that accepts RoleManagementPolicyExpirationRuleArgs and RoleManagementPolicyExpirationRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyExpirationRuleInput` via:
//
//          RoleManagementPolicyExpirationRuleArgs{...}
type RoleManagementPolicyExpirationRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput
	ToRoleManagementPolicyExpirationRuleOutputWithContext(context.Context) RoleManagementPolicyExpirationRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired pulumi.BoolPtrInput `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration pulumi.StringPtrInput `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyExpirationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRule)(nil)).Elem()
}

func (i RoleManagementPolicyExpirationRuleArgs) ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput {
	return i.ToRoleManagementPolicyExpirationRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyExpirationRuleArgs) ToRoleManagementPolicyExpirationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyExpirationRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRule)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleOutput) ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleOutput) ToRoleManagementPolicyExpirationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyExpirationRuleResponseInput is an input type that accepts RoleManagementPolicyExpirationRuleResponseArgs and RoleManagementPolicyExpirationRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyExpirationRuleResponseInput` via:
//
//          RoleManagementPolicyExpirationRuleResponseArgs{...}
type RoleManagementPolicyExpirationRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyExpirationRuleResponseOutput() RoleManagementPolicyExpirationRuleResponseOutput
	ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(context.Context) RoleManagementPolicyExpirationRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired pulumi.BoolPtrInput `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration pulumi.StringPtrInput `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyExpirationRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyExpirationRuleResponseArgs) ToRoleManagementPolicyExpirationRuleResponseOutput() RoleManagementPolicyExpirationRuleResponseOutput {
	return i.ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyExpirationRuleResponseArgs) ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyExpirationRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleResponseOutput) ToRoleManagementPolicyExpirationRuleResponseOutput() RoleManagementPolicyExpirationRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleResponseOutput) ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleResponseOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleResponseOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyNotificationRuleInput is an input type that accepts RoleManagementPolicyNotificationRuleArgs and RoleManagementPolicyNotificationRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyNotificationRuleInput` via:
//
//          RoleManagementPolicyNotificationRuleArgs{...}
type RoleManagementPolicyNotificationRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput
	ToRoleManagementPolicyNotificationRuleOutputWithContext(context.Context) RoleManagementPolicyNotificationRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The notification level.
	NotificationLevel pulumi.StringPtrInput `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients pulumi.StringArrayInput `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType pulumi.StringPtrInput `pulumi:"notificationType"`
	// The recipient type.
	RecipientType pulumi.StringPtrInput `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRule)(nil)).Elem()
}

func (i RoleManagementPolicyNotificationRuleArgs) ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput {
	return i.ToRoleManagementPolicyNotificationRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyNotificationRuleArgs) ToRoleManagementPolicyNotificationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyNotificationRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRule)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleOutput) ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleOutput) ToRoleManagementPolicyNotificationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list notification recipients.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyNotificationRuleResponseInput is an input type that accepts RoleManagementPolicyNotificationRuleResponseArgs and RoleManagementPolicyNotificationRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyNotificationRuleResponseInput` via:
//
//          RoleManagementPolicyNotificationRuleResponseArgs{...}
type RoleManagementPolicyNotificationRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyNotificationRuleResponseOutput() RoleManagementPolicyNotificationRuleResponseOutput
	ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(context.Context) RoleManagementPolicyNotificationRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The notification level.
	NotificationLevel pulumi.StringPtrInput `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients pulumi.StringArrayInput `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType pulumi.StringPtrInput `pulumi:"notificationType"`
	// The recipient type.
	RecipientType pulumi.StringPtrInput `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyNotificationRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyNotificationRuleResponseArgs) ToRoleManagementPolicyNotificationRuleResponseOutput() RoleManagementPolicyNotificationRuleResponseOutput {
	return i.ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyNotificationRuleResponseArgs) ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyNotificationRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleResponseOutput) ToRoleManagementPolicyNotificationRuleResponseOutput() RoleManagementPolicyNotificationRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleResponseOutput) ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list notification recipients.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleResponseOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTarget struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// RoleManagementPolicyRuleTargetInput is an input type that accepts RoleManagementPolicyRuleTargetArgs and RoleManagementPolicyRuleTargetOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetInput` via:
//
//          RoleManagementPolicyRuleTargetArgs{...}
type RoleManagementPolicyRuleTargetInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput
	ToRoleManagementPolicyRuleTargetOutputWithContext(context.Context) RoleManagementPolicyRuleTargetOutput
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetArgs struct {
	// The caller of the setting.
	Caller pulumi.StringPtrInput `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings pulumi.StringArrayInput `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings pulumi.StringArrayInput `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The type of operation.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// The list of target objects.
	TargetObjects pulumi.StringArrayInput `pulumi:"targetObjects"`
}

func (RoleManagementPolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput {
	return i.ToRoleManagementPolicyRuleTargetOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetOutput)
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return i.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetOutput).ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx)
}

// RoleManagementPolicyRuleTargetPtrInput is an input type that accepts RoleManagementPolicyRuleTargetArgs, RoleManagementPolicyRuleTargetPtr and RoleManagementPolicyRuleTargetPtrOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetPtrInput` via:
//
//          RoleManagementPolicyRuleTargetArgs{...}
//
//  or:
//
//          nil
type RoleManagementPolicyRuleTargetPtrInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput
	ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Context) RoleManagementPolicyRuleTargetPtrOutput
}

type roleManagementPolicyRuleTargetPtrType RoleManagementPolicyRuleTargetArgs

func RoleManagementPolicyRuleTargetPtr(v *RoleManagementPolicyRuleTargetArgs) RoleManagementPolicyRuleTargetPtrInput {
	return (*roleManagementPolicyRuleTargetPtrType)(v)
}

func (*roleManagementPolicyRuleTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (i *roleManagementPolicyRuleTargetPtrType) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return i.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (i *roleManagementPolicyRuleTargetPtrType) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *RoleManagementPolicyRuleTarget {
		return &v
	}).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetPtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetPtrOutput) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetPtrOutput) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetPtrOutput) Elem() RoleManagementPolicyRuleTargetOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) RoleManagementPolicyRuleTarget { return *v }).(RoleManagementPolicyRuleTargetOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetPtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetPtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetPtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetPtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetPtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponse struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// RoleManagementPolicyRuleTargetResponseInput is an input type that accepts RoleManagementPolicyRuleTargetResponseArgs and RoleManagementPolicyRuleTargetResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetResponseInput` via:
//
//          RoleManagementPolicyRuleTargetResponseArgs{...}
type RoleManagementPolicyRuleTargetResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetResponseOutput() RoleManagementPolicyRuleTargetResponseOutput
	ToRoleManagementPolicyRuleTargetResponseOutputWithContext(context.Context) RoleManagementPolicyRuleTargetResponseOutput
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponseArgs struct {
	// The caller of the setting.
	Caller pulumi.StringPtrInput `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings pulumi.StringArrayInput `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings pulumi.StringArrayInput `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The type of operation.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// The list of target objects.
	TargetObjects pulumi.StringArrayInput `pulumi:"targetObjects"`
}

func (RoleManagementPolicyRuleTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (i RoleManagementPolicyRuleTargetResponseArgs) ToRoleManagementPolicyRuleTargetResponseOutput() RoleManagementPolicyRuleTargetResponseOutput {
	return i.ToRoleManagementPolicyRuleTargetResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetResponseArgs) ToRoleManagementPolicyRuleTargetResponseOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetResponseOutput)
}

func (i RoleManagementPolicyRuleTargetResponseArgs) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return i.ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetResponseArgs) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetResponseOutput).ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx)
}

// RoleManagementPolicyRuleTargetResponsePtrInput is an input type that accepts RoleManagementPolicyRuleTargetResponseArgs, RoleManagementPolicyRuleTargetResponsePtr and RoleManagementPolicyRuleTargetResponsePtrOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetResponsePtrInput` via:
//
//          RoleManagementPolicyRuleTargetResponseArgs{...}
//
//  or:
//
//          nil
type RoleManagementPolicyRuleTargetResponsePtrInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput
	ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput
}

type roleManagementPolicyRuleTargetResponsePtrType RoleManagementPolicyRuleTargetResponseArgs

func RoleManagementPolicyRuleTargetResponsePtr(v *RoleManagementPolicyRuleTargetResponseArgs) RoleManagementPolicyRuleTargetResponsePtrInput {
	return (*roleManagementPolicyRuleTargetResponsePtrType)(v)
}

func (*roleManagementPolicyRuleTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (i *roleManagementPolicyRuleTargetResponsePtrType) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return i.ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(context.Background())
}

func (i *roleManagementPolicyRuleTargetResponsePtrType) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponseOutput() RoleManagementPolicyRuleTargetResponseOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponseOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponseOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(context.Background())
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *RoleManagementPolicyRuleTargetResponse {
		return &v
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetResponseOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetResponseOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetResponseOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetResponseOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetResponseOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Elem() RoleManagementPolicyRuleTargetResponseOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) RoleManagementPolicyRuleTargetResponse { return *v }).(RoleManagementPolicyRuleTargetResponseOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The detail of a user.
type SingleUser struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType string `pulumi:"userType"`
}

// SingleUserInput is an input type that accepts SingleUserArgs and SingleUserOutput values.
// You can construct a concrete instance of `SingleUserInput` via:
//
//          SingleUserArgs{...}
type SingleUserInput interface {
	pulumi.Input

	ToSingleUserOutput() SingleUserOutput
	ToSingleUserOutputWithContext(context.Context) SingleUserOutput
}

// The detail of a user.
type SingleUserArgs struct {
	// The description of the user.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The object id of the user.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup pulumi.BoolPtrInput `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType pulumi.StringInput `pulumi:"userType"`
}

func (SingleUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUser)(nil)).Elem()
}

func (i SingleUserArgs) ToSingleUserOutput() SingleUserOutput {
	return i.ToSingleUserOutputWithContext(context.Background())
}

func (i SingleUserArgs) ToSingleUserOutputWithContext(ctx context.Context) SingleUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserOutput)
}

// SingleUserArrayInput is an input type that accepts SingleUserArray and SingleUserArrayOutput values.
// You can construct a concrete instance of `SingleUserArrayInput` via:
//
//          SingleUserArray{ SingleUserArgs{...} }
type SingleUserArrayInput interface {
	pulumi.Input

	ToSingleUserArrayOutput() SingleUserArrayOutput
	ToSingleUserArrayOutputWithContext(context.Context) SingleUserArrayOutput
}

type SingleUserArray []SingleUserInput

func (SingleUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUser)(nil)).Elem()
}

func (i SingleUserArray) ToSingleUserArrayOutput() SingleUserArrayOutput {
	return i.ToSingleUserArrayOutputWithContext(context.Background())
}

func (i SingleUserArray) ToSingleUserArrayOutputWithContext(ctx context.Context) SingleUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserArrayOutput)
}

// The detail of a user.
type SingleUserOutput struct{ *pulumi.OutputState }

func (SingleUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUser)(nil)).Elem()
}

func (o SingleUserOutput) ToSingleUserOutput() SingleUserOutput {
	return o
}

func (o SingleUserOutput) ToSingleUserOutputWithContext(ctx context.Context) SingleUserOutput {
	return o
}

// The description of the user.
func (o SingleUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUser) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o SingleUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o SingleUserOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleUser) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The object id of the user.
// Expected value is 'SingleUser'.
func (o SingleUserOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleUser) string { return v.UserType }).(pulumi.StringOutput)
}

type SingleUserArrayOutput struct{ *pulumi.OutputState }

func (SingleUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUser)(nil)).Elem()
}

func (o SingleUserArrayOutput) ToSingleUserArrayOutput() SingleUserArrayOutput {
	return o
}

func (o SingleUserArrayOutput) ToSingleUserArrayOutputWithContext(ctx context.Context) SingleUserArrayOutput {
	return o
}

func (o SingleUserArrayOutput) Index(i pulumi.IntInput) SingleUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleUser {
		return vs[0].([]SingleUser)[vs[1].(int)]
	}).(SingleUserOutput)
}

// The detail of a user.
type SingleUserResponse struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType string `pulumi:"userType"`
}

// SingleUserResponseInput is an input type that accepts SingleUserResponseArgs and SingleUserResponseOutput values.
// You can construct a concrete instance of `SingleUserResponseInput` via:
//
//          SingleUserResponseArgs{...}
type SingleUserResponseInput interface {
	pulumi.Input

	ToSingleUserResponseOutput() SingleUserResponseOutput
	ToSingleUserResponseOutputWithContext(context.Context) SingleUserResponseOutput
}

// The detail of a user.
type SingleUserResponseArgs struct {
	// The description of the user.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The object id of the user.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup pulumi.BoolPtrInput `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType pulumi.StringInput `pulumi:"userType"`
}

func (SingleUserResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUserResponse)(nil)).Elem()
}

func (i SingleUserResponseArgs) ToSingleUserResponseOutput() SingleUserResponseOutput {
	return i.ToSingleUserResponseOutputWithContext(context.Background())
}

func (i SingleUserResponseArgs) ToSingleUserResponseOutputWithContext(ctx context.Context) SingleUserResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserResponseOutput)
}

// SingleUserResponseArrayInput is an input type that accepts SingleUserResponseArray and SingleUserResponseArrayOutput values.
// You can construct a concrete instance of `SingleUserResponseArrayInput` via:
//
//          SingleUserResponseArray{ SingleUserResponseArgs{...} }
type SingleUserResponseArrayInput interface {
	pulumi.Input

	ToSingleUserResponseArrayOutput() SingleUserResponseArrayOutput
	ToSingleUserResponseArrayOutputWithContext(context.Context) SingleUserResponseArrayOutput
}

type SingleUserResponseArray []SingleUserResponseInput

func (SingleUserResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUserResponse)(nil)).Elem()
}

func (i SingleUserResponseArray) ToSingleUserResponseArrayOutput() SingleUserResponseArrayOutput {
	return i.ToSingleUserResponseArrayOutputWithContext(context.Background())
}

func (i SingleUserResponseArray) ToSingleUserResponseArrayOutputWithContext(ctx context.Context) SingleUserResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserResponseArrayOutput)
}

// The detail of a user.
type SingleUserResponseOutput struct{ *pulumi.OutputState }

func (SingleUserResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUserResponse)(nil)).Elem()
}

func (o SingleUserResponseOutput) ToSingleUserResponseOutput() SingleUserResponseOutput {
	return o
}

func (o SingleUserResponseOutput) ToSingleUserResponseOutputWithContext(ctx context.Context) SingleUserResponseOutput {
	return o
}

// The description of the user.
func (o SingleUserResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUserResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o SingleUserResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUserResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o SingleUserResponseOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleUserResponse) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The object id of the user.
// Expected value is 'SingleUser'.
func (o SingleUserResponseOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleUserResponse) string { return v.UserType }).(pulumi.StringOutput)
}

type SingleUserResponseArrayOutput struct{ *pulumi.OutputState }

func (SingleUserResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUserResponse)(nil)).Elem()
}

func (o SingleUserResponseArrayOutput) ToSingleUserResponseArrayOutput() SingleUserResponseArrayOutput {
	return o
}

func (o SingleUserResponseArrayOutput) ToSingleUserResponseArrayOutputWithContext(ctx context.Context) SingleUserResponseArrayOutput {
	return o
}

func (o SingleUserResponseArrayOutput) Index(i pulumi.IntInput) SingleUserResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleUserResponse {
		return vs[0].([]SingleUserResponse)[vs[1].(int)]
	}).(SingleUserResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// SystemDataResponseInput is an input type that accepts SystemDataResponseArgs and SystemDataResponseOutput values.
// You can construct a concrete instance of `SystemDataResponseInput` via:
//
//          SystemDataResponseArgs{...}
type SystemDataResponseInput interface {
	pulumi.Input

	ToSystemDataResponseOutput() SystemDataResponseOutput
	ToSystemDataResponseOutputWithContext(context.Context) SystemDataResponseOutput
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseArgs struct {
	// The timestamp of resource creation (UTC).
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy pulumi.StringPtrInput `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType pulumi.StringPtrInput `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt pulumi.StringPtrInput `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy pulumi.StringPtrInput `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType pulumi.StringPtrInput `pulumi:"lastModifiedByType"`
}

func (SystemDataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (i SystemDataResponseArgs) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return i.ToSystemDataResponseOutputWithContext(context.Background())
}

func (i SystemDataResponseArgs) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponseOutput)
}

func (i SystemDataResponseArgs) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return i.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (i SystemDataResponseArgs) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponseOutput).ToSystemDataResponsePtrOutputWithContext(ctx)
}

// SystemDataResponsePtrInput is an input type that accepts SystemDataResponseArgs, SystemDataResponsePtr and SystemDataResponsePtrOutput values.
// You can construct a concrete instance of `SystemDataResponsePtrInput` via:
//
//          SystemDataResponseArgs{...}
//
//  or:
//
//          nil
type SystemDataResponsePtrInput interface {
	pulumi.Input

	ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput
	ToSystemDataResponsePtrOutputWithContext(context.Context) SystemDataResponsePtrOutput
}

type systemDataResponsePtrType SystemDataResponseArgs

func SystemDataResponsePtr(v *SystemDataResponseArgs) SystemDataResponsePtrInput {
	return (*systemDataResponsePtrType)(v)
}

func (*systemDataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDataResponse)(nil)).Elem()
}

func (i *systemDataResponsePtrType) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return i.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (i *systemDataResponsePtrType) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponsePtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return o.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (o SystemDataResponseOutput) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *SystemDataResponse {
		return &v
	}).(SystemDataResponsePtrOutput)
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

type SystemDataResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) Elem() SystemDataResponseOutput {
	return o.ApplyT(func(v *SystemDataResponse) SystemDataResponse { return *v }).(SystemDataResponseOutput)
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedByType
	}).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponsePtrOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedByType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessReviewInstanceOutput{})
	pulumi.RegisterOutputType(AccessReviewInstanceArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewInstanceResponseOutput{})
	pulumi.RegisterOutputType(AccessReviewInstanceResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewReviewerOutput{})
	pulumi.RegisterOutputType(AccessReviewReviewerArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewReviewerResponseOutput{})
	pulumi.RegisterOutputType(AccessReviewReviewerResponseArrayOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsPtrOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsResponseOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ApprovalStageOutput{})
	pulumi.RegisterOutputType(ApprovalStageArrayOutput{})
	pulumi.RegisterOutputType(ApprovalStageResponseOutput{})
	pulumi.RegisterOutputType(ApprovalStageResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerArrayOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerResponseOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerResponseArrayOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageArrayOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageResponseOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMapOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMetadataOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMetadataPtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMapOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMetadataOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMetadataPtrOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueMapOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueResponseOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueResponseMapOutput{})
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionResponseOutput{})
	pulumi.RegisterOutputType(PermissionResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(PrincipalOutput{})
	pulumi.RegisterOutputType(PrincipalArrayOutput{})
	pulumi.RegisterOutputType(PrincipalResponseOutput{})
	pulumi.RegisterOutputType(PrincipalResponseArrayOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetPtrOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(SingleUserOutput{})
	pulumi.RegisterOutputType(SingleUserArrayOutput{})
	pulumi.RegisterOutputType(SingleUserResponseOutput{})
	pulumi.RegisterOutputType(SingleUserResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponsePtrOutput{})
}
