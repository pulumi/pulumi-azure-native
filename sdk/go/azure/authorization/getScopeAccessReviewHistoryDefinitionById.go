// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Access Review History Definition.
// API Version: 2021-12-01-preview.
func LookupScopeAccessReviewHistoryDefinitionById(ctx *pulumi.Context, args *LookupScopeAccessReviewHistoryDefinitionByIdArgs, opts ...pulumi.InvokeOption) (*LookupScopeAccessReviewHistoryDefinitionByIdResult, error) {
	var rv LookupScopeAccessReviewHistoryDefinitionByIdResult
	err := ctx.Invoke("azure-native:authorization:getScopeAccessReviewHistoryDefinitionById", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScopeAccessReviewHistoryDefinitionByIdArgs struct {
	// The id of the access review history definition.
	HistoryDefinitionId string `pulumi:"historyDefinitionId"`
	// The scope of the resource.
	Scope string `pulumi:"scope"`
}

// Access Review History Definition.
type LookupScopeAccessReviewHistoryDefinitionByIdResult struct {
	// Date time when history definition was created
	CreatedDateTime string `pulumi:"createdDateTime"`
	// Collection of review decisions which the history data should be filtered on. For example if Approve and Deny are supplied the data will only contain review results in which the decision maker approved or denied a review request.
	Decisions []string `pulumi:"decisions"`
	// The display name for the history definition.
	DisplayName *string `pulumi:"displayName"`
	// The DateTime when the review is scheduled to end. Required if type is endDate
	EndDate *string `pulumi:"endDate"`
	// The access review history definition id.
	Id string `pulumi:"id"`
	// Set of access review history instances for this history definition.
	Instances []AccessReviewHistoryInstanceResponse `pulumi:"instances"`
	// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
	Interval *int `pulumi:"interval"`
	// The access review history definition unique id.
	Name string `pulumi:"name"`
	// The number of times to repeat the access review. Required and must be positive if type is numbered.
	NumberOfOccurrences *int `pulumi:"numberOfOccurrences"`
	// The identity id
	PrincipalId string `pulumi:"principalId"`
	// The identity display name
	PrincipalName string `pulumi:"principalName"`
	// The identity type : user/servicePrincipal
	PrincipalType string `pulumi:"principalType"`
	// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
	ReviewHistoryPeriodEndDateTime string `pulumi:"reviewHistoryPeriodEndDateTime"`
	// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
	ReviewHistoryPeriodStartDateTime string `pulumi:"reviewHistoryPeriodStartDateTime"`
	// A collection of scopes used when selecting review history data
	Scopes []AccessReviewScopeResponse `pulumi:"scopes"`
	// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
	StartDate *string `pulumi:"startDate"`
	// This read-only field specifies the of the requested review history data. This is either requested, in-progress, done or error.
	Status string `pulumi:"status"`
	// The resource type.
	Type string `pulumi:"type"`
	// The user principal name(if valid)
	UserPrincipalName string `pulumi:"userPrincipalName"`
}

func LookupScopeAccessReviewHistoryDefinitionByIdOutput(ctx *pulumi.Context, args LookupScopeAccessReviewHistoryDefinitionByIdOutputArgs, opts ...pulumi.InvokeOption) LookupScopeAccessReviewHistoryDefinitionByIdResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScopeAccessReviewHistoryDefinitionByIdResult, error) {
			args := v.(LookupScopeAccessReviewHistoryDefinitionByIdArgs)
			r, err := LookupScopeAccessReviewHistoryDefinitionById(ctx, &args, opts...)
			var s LookupScopeAccessReviewHistoryDefinitionByIdResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScopeAccessReviewHistoryDefinitionByIdResultOutput)
}

type LookupScopeAccessReviewHistoryDefinitionByIdOutputArgs struct {
	// The id of the access review history definition.
	HistoryDefinitionId pulumi.StringInput `pulumi:"historyDefinitionId"`
	// The scope of the resource.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupScopeAccessReviewHistoryDefinitionByIdOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeAccessReviewHistoryDefinitionByIdArgs)(nil)).Elem()
}

// Access Review History Definition.
type LookupScopeAccessReviewHistoryDefinitionByIdResultOutput struct{ *pulumi.OutputState }

func (LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeAccessReviewHistoryDefinitionByIdResult)(nil)).Elem()
}

func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) ToLookupScopeAccessReviewHistoryDefinitionByIdResultOutput() LookupScopeAccessReviewHistoryDefinitionByIdResultOutput {
	return o
}

func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) ToLookupScopeAccessReviewHistoryDefinitionByIdResultOutputWithContext(ctx context.Context) LookupScopeAccessReviewHistoryDefinitionByIdResultOutput {
	return o
}

// Date time when history definition was created
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) CreatedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.CreatedDateTime }).(pulumi.StringOutput)
}

// Collection of review decisions which the history data should be filtered on. For example if Approve and Deny are supplied the data will only contain review results in which the decision maker approved or denied a review request.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) Decisions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) []string { return v.Decisions }).(pulumi.StringArrayOutput)
}

// The display name for the history definition.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The DateTime when the review is scheduled to end. Required if type is endDate
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The access review history definition id.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.Id }).(pulumi.StringOutput)
}

// Set of access review history instances for this history definition.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) Instances() AccessReviewHistoryInstanceResponseArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) []AccessReviewHistoryInstanceResponse {
		return v.Instances
	}).(AccessReviewHistoryInstanceResponseArrayOutput)
}

// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The access review history definition unique id.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of times to repeat the access review. Required and must be positive if type is numbered.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) NumberOfOccurrences() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) *int { return v.NumberOfOccurrences }).(pulumi.IntPtrOutput)
}

// The identity id
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The identity display name
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) PrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.PrincipalName }).(pulumi.StringOutput)
}

// The identity type : user/servicePrincipal
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.PrincipalType }).(pulumi.StringOutput)
}

// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) ReviewHistoryPeriodEndDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string {
		return v.ReviewHistoryPeriodEndDateTime
	}).(pulumi.StringOutput)
}

// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) ReviewHistoryPeriodStartDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string {
		return v.ReviewHistoryPeriodStartDateTime
	}).(pulumi.StringOutput)
}

// A collection of scopes used when selecting review history data
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) Scopes() AccessReviewScopeResponseArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) []AccessReviewScopeResponse {
		return v.Scopes
	}).(AccessReviewScopeResponseArrayOutput)
}

// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// This read-only field specifies the of the requested review history data. This is either requested, in-progress, done or error.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.Status }).(pulumi.StringOutput)
}

// The resource type.
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.Type }).(pulumi.StringOutput)
}

// The user principal name(if valid)
func (o LookupScopeAccessReviewHistoryDefinitionByIdResultOutput) UserPrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewHistoryDefinitionByIdResult) string { return v.UserPrincipalName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScopeAccessReviewHistoryDefinitionByIdResultOutput{})
}
