// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150101

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Management lock information.
type ManagementLock struct {
	pulumi.CustomResourceState

	// The lock level of the management lock.
	Level pulumi.StringPtrOutput `pulumi:"level"`
	// The name of the lock.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The notes of the management lock.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The type of the lock.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagementLock registers a new resource with the given unique name, arguments, and options.
func NewManagementLock(ctx *pulumi.Context,
	name string, args *ManagementLockArgs, opts ...pulumi.ResourceOption) (*ManagementLock, error) {
	if args == nil || args.LockName == nil {
		return nil, errors.New("missing required argument 'LockName'")
	}
	if args == nil {
		args = &ManagementLockArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:authorization/latest:ManagementLock"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20160901:ManagementLock"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagementLock
	err := ctx.RegisterResource("azure-nextgen:authorization/v20150101:ManagementLock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementLock gets an existing ManagementLock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementLock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementLockState, opts ...pulumi.ResourceOption) (*ManagementLock, error) {
	var resource ManagementLock
	err := ctx.ReadResource("azure-nextgen:authorization/v20150101:ManagementLock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementLock resources.
type managementLockState struct {
	// The lock level of the management lock.
	Level *string `pulumi:"level"`
	// The name of the lock.
	Name *string `pulumi:"name"`
	// The notes of the management lock.
	Notes *string `pulumi:"notes"`
	// The type of the lock.
	Type *string `pulumi:"type"`
}

type ManagementLockState struct {
	// The lock level of the management lock.
	Level pulumi.StringPtrInput
	// The name of the lock.
	Name pulumi.StringPtrInput
	// The notes of the management lock.
	Notes pulumi.StringPtrInput
	// The type of the lock.
	Type pulumi.StringPtrInput
}

func (ManagementLockState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockState)(nil)).Elem()
}

type managementLockArgs struct {
	// The lock level of the management lock.
	Level *string `pulumi:"level"`
	// The name of lock.
	LockName string `pulumi:"lockName"`
	// The name of the lock.
	Name *string `pulumi:"name"`
	// The notes of the management lock.
	Notes *string `pulumi:"notes"`
}

// The set of arguments for constructing a ManagementLock resource.
type ManagementLockArgs struct {
	// The lock level of the management lock.
	Level pulumi.StringPtrInput
	// The name of lock.
	LockName pulumi.StringInput
	// The name of the lock.
	Name pulumi.StringPtrInput
	// The notes of the management lock.
	Notes pulumi.StringPtrInput
}

func (ManagementLockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockArgs)(nil)).Elem()
}
