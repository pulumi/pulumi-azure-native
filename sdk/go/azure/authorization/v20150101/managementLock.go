// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Management lock information.
//
// Deprecated: Version 2015-01-01 will be removed in v2 of the provider.
type ManagementLock struct {
	pulumi.CustomResourceState

	// The lock level of the management lock.
	Level pulumi.StringPtrOutput `pulumi:"level"`
	// The name of the lock.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The notes of the management lock.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The type of the lock.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagementLock registers a new resource with the given unique name, arguments, and options.
func NewManagementLock(ctx *pulumi.Context,
	name string, args *ManagementLockArgs, opts ...pulumi.ResourceOption) (*ManagementLock, error) {
	if args == nil {
		args = &ManagementLockArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:authorization:ManagementLock"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20160901:ManagementLock"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20170401:ManagementLock"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20200501:ManagementLock"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagementLock
	err := ctx.RegisterResource("azure-native:authorization/v20150101:ManagementLock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementLock gets an existing ManagementLock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementLock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementLockState, opts ...pulumi.ResourceOption) (*ManagementLock, error) {
	var resource ManagementLock
	err := ctx.ReadResource("azure-native:authorization/v20150101:ManagementLock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementLock resources.
type managementLockState struct {
}

type ManagementLockState struct {
}

func (ManagementLockState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockState)(nil)).Elem()
}

type managementLockArgs struct {
	// The lock level of the management lock.
	Level *string `pulumi:"level"`
	// The name of lock.
	LockName *string `pulumi:"lockName"`
	// The name of the lock.
	Name *string `pulumi:"name"`
	// The notes of the management lock.
	Notes *string `pulumi:"notes"`
}

// The set of arguments for constructing a ManagementLock resource.
type ManagementLockArgs struct {
	// The lock level of the management lock.
	Level pulumi.StringPtrInput
	// The name of lock.
	LockName pulumi.StringPtrInput
	// The name of the lock.
	Name pulumi.StringPtrInput
	// The notes of the management lock.
	Notes pulumi.StringPtrInput
}

func (ManagementLockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockArgs)(nil)).Elem()
}

type ManagementLockInput interface {
	pulumi.Input

	ToManagementLockOutput() ManagementLockOutput
	ToManagementLockOutputWithContext(ctx context.Context) ManagementLockOutput
}

func (*ManagementLock) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLock)(nil)).Elem()
}

func (i *ManagementLock) ToManagementLockOutput() ManagementLockOutput {
	return i.ToManagementLockOutputWithContext(context.Background())
}

func (i *ManagementLock) ToManagementLockOutputWithContext(ctx context.Context) ManagementLockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOutput)
}

type ManagementLockOutput struct{ *pulumi.OutputState }

func (ManagementLockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLock)(nil)).Elem()
}

func (o ManagementLockOutput) ToManagementLockOutput() ManagementLockOutput {
	return o
}

func (o ManagementLockOutput) ToManagementLockOutputWithContext(ctx context.Context) ManagementLockOutput {
	return o
}

// The lock level of the management lock.
func (o ManagementLockOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLock) pulumi.StringPtrOutput { return v.Level }).(pulumi.StringPtrOutput)
}

// The name of the lock.
func (o ManagementLockOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLock) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The notes of the management lock.
func (o ManagementLockOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLock) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// The type of the lock.
func (o ManagementLockOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagementLock) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagementLockOutput{})
}
