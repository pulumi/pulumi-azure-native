// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Management lock information.
//
// Deprecated: Version v20150101 will be removed in the next major version of the provider. Upgrade to version v20170401 or later.
func LookupManagementLock(ctx *pulumi.Context, args *LookupManagementLockArgs, opts ...pulumi.InvokeOption) (*LookupManagementLockResult, error) {
	var rv LookupManagementLockResult
	err := ctx.Invoke("azure-native:authorization/v20150101:getManagementLock", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupManagementLockArgs struct {
	// Name of the management lock.
	LockName string `pulumi:"lockName"`
}

// Management lock information.
type LookupManagementLockResult struct {
	// The Id of the lock.
	Id string `pulumi:"id"`
	// The lock level of the management lock.
	Level *string `pulumi:"level"`
	// The name of the lock.
	Name *string `pulumi:"name"`
	// The notes of the management lock.
	Notes *string `pulumi:"notes"`
	// The type of the lock.
	Type string `pulumi:"type"`
}

func LookupManagementLockOutput(ctx *pulumi.Context, args LookupManagementLockOutputArgs, opts ...pulumi.InvokeOption) LookupManagementLockResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagementLockResult, error) {
			args := v.(LookupManagementLockArgs)
			r, err := LookupManagementLock(ctx, &args, opts...)
			return *r, err
		}).(LookupManagementLockResultOutput)
}

type LookupManagementLockOutputArgs struct {
	// Name of the management lock.
	LockName pulumi.StringInput `pulumi:"lockName"`
}

func (LookupManagementLockOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagementLockArgs)(nil)).Elem()
}

// Management lock information.
type LookupManagementLockResultOutput struct{ *pulumi.OutputState }

func (LookupManagementLockResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagementLockResult)(nil)).Elem()
}

func (o LookupManagementLockResultOutput) ToLookupManagementLockResultOutput() LookupManagementLockResultOutput {
	return o
}

func (o LookupManagementLockResultOutput) ToLookupManagementLockResultOutputWithContext(ctx context.Context) LookupManagementLockResultOutput {
	return o
}

// The Id of the lock.
func (o LookupManagementLockResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementLockResult) string { return v.Id }).(pulumi.StringOutput)
}

// The lock level of the management lock.
func (o LookupManagementLockResultOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupManagementLockResult) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The name of the lock.
func (o LookupManagementLockResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupManagementLockResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The notes of the management lock.
func (o LookupManagementLockResultOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupManagementLockResult) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// The type of the lock.
func (o LookupManagementLockResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementLockResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagementLockResultOutput{})
}
