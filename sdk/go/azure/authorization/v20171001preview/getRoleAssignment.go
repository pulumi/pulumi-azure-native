// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20171001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Role Assignments
func LookupRoleAssignment(ctx *pulumi.Context, args *LookupRoleAssignmentArgs, opts ...pulumi.InvokeOption) (*LookupRoleAssignmentResult, error) {
	var rv LookupRoleAssignmentResult
	err := ctx.Invoke("azure-native:authorization/v20171001preview:getRoleAssignment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRoleAssignmentArgs struct {
	// The name of the role assignment to get.
	RoleAssignmentName string `pulumi:"roleAssignmentName"`
	// The scope of the role assignment.
	Scope string `pulumi:"scope"`
}

// Role Assignments
type LookupRoleAssignmentResult struct {
	// The Delegation flag for the role assignment
	CanDelegate *bool `pulumi:"canDelegate"`
	// The role assignment ID.
	Id string `pulumi:"id"`
	// The role assignment name.
	Name string `pulumi:"name"`
	// The principal ID.
	PrincipalId *string `pulumi:"principalId"`
	// The role definition ID.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The role assignment scope.
	Scope *string `pulumi:"scope"`
	// The role assignment type.
	Type string `pulumi:"type"`
}

func LookupRoleAssignmentOutput(ctx *pulumi.Context, args LookupRoleAssignmentOutputArgs, opts ...pulumi.InvokeOption) LookupRoleAssignmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRoleAssignmentResult, error) {
			args := v.(LookupRoleAssignmentArgs)
			r, err := LookupRoleAssignment(ctx, &args, opts...)
			var s LookupRoleAssignmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRoleAssignmentResultOutput)
}

type LookupRoleAssignmentOutputArgs struct {
	// The name of the role assignment to get.
	RoleAssignmentName pulumi.StringInput `pulumi:"roleAssignmentName"`
	// The scope of the role assignment.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupRoleAssignmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleAssignmentArgs)(nil)).Elem()
}

// Role Assignments
type LookupRoleAssignmentResultOutput struct{ *pulumi.OutputState }

func (LookupRoleAssignmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleAssignmentResult)(nil)).Elem()
}

func (o LookupRoleAssignmentResultOutput) ToLookupRoleAssignmentResultOutput() LookupRoleAssignmentResultOutput {
	return o
}

func (o LookupRoleAssignmentResultOutput) ToLookupRoleAssignmentResultOutputWithContext(ctx context.Context) LookupRoleAssignmentResultOutput {
	return o
}

// The Delegation flag for the role assignment
func (o LookupRoleAssignmentResultOutput) CanDelegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRoleAssignmentResult) *bool { return v.CanDelegate }).(pulumi.BoolPtrOutput)
}

// The role assignment ID.
func (o LookupRoleAssignmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleAssignmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The role assignment name.
func (o LookupRoleAssignmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleAssignmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The principal ID.
func (o LookupRoleAssignmentResultOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRoleAssignmentResult) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The role definition ID.
func (o LookupRoleAssignmentResultOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRoleAssignmentResult) *string { return v.RoleDefinitionId }).(pulumi.StringPtrOutput)
}

// The role assignment scope.
func (o LookupRoleAssignmentResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRoleAssignmentResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The role assignment type.
func (o LookupRoleAssignmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleAssignmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRoleAssignmentResultOutput{})
}
