// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Role management policy
type RoleManagementPolicyAssignment struct {
	pulumi.CustomResourceState

	// The role management policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy id role management policy assignment.
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// The role definition of management policy assignment.
	RoleDefinitionId pulumi.StringPtrOutput `pulumi:"roleDefinitionId"`
	// The role management policy scope.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The role management policy type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRoleManagementPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewRoleManagementPolicyAssignment(ctx *pulumi.Context,
	name string, args *RoleManagementPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*RoleManagementPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleManagementPolicyAssignmentName == nil {
		return nil, errors.New("invalid value for required argument 'RoleManagementPolicyAssignmentName'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	var resource RoleManagementPolicyAssignment
	err := ctx.RegisterResource("azure-nextgen:authorization/v20201001preview:roleManagementPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleManagementPolicyAssignment gets an existing RoleManagementPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleManagementPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleManagementPolicyAssignmentState, opts ...pulumi.ResourceOption) (*RoleManagementPolicyAssignment, error) {
	var resource RoleManagementPolicyAssignment
	err := ctx.ReadResource("azure-nextgen:authorization/v20201001preview:roleManagementPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleManagementPolicyAssignment resources.
type roleManagementPolicyAssignmentState struct {
	// The role management policy name.
	Name *string `pulumi:"name"`
	// The policy id role management policy assignment.
	PolicyId *string `pulumi:"policyId"`
	// The role definition of management policy assignment.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The role management policy scope.
	Scope *string `pulumi:"scope"`
	// The role management policy type.
	Type *string `pulumi:"type"`
}

type RoleManagementPolicyAssignmentState struct {
	// The role management policy name.
	Name pulumi.StringPtrInput
	// The policy id role management policy assignment.
	PolicyId pulumi.StringPtrInput
	// The role definition of management policy assignment.
	RoleDefinitionId pulumi.StringPtrInput
	// The role management policy scope.
	Scope pulumi.StringPtrInput
	// The role management policy type.
	Type pulumi.StringPtrInput
}

func (RoleManagementPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleManagementPolicyAssignmentState)(nil)).Elem()
}

type roleManagementPolicyAssignmentArgs struct {
	// The policy id role management policy assignment.
	PolicyId *string `pulumi:"policyId"`
	// The role definition of management policy assignment.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The name of format {guid_guid} the role management policy assignment to upsert.
	RoleManagementPolicyAssignmentName string `pulumi:"roleManagementPolicyAssignmentName"`
	// The role management policy scope.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a RoleManagementPolicyAssignment resource.
type RoleManagementPolicyAssignmentArgs struct {
	// The policy id role management policy assignment.
	PolicyId pulumi.StringPtrInput
	// The role definition of management policy assignment.
	RoleDefinitionId pulumi.StringPtrInput
	// The name of format {guid_guid} the role management policy assignment to upsert.
	RoleManagementPolicyAssignmentName pulumi.StringInput
	// The role management policy scope.
	Scope pulumi.StringInput
}

func (RoleManagementPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleManagementPolicyAssignmentArgs)(nil)).Elem()
}

type RoleManagementPolicyAssignmentInput interface {
	pulumi.Input

	ToRoleManagementPolicyAssignmentOutput() RoleManagementPolicyAssignmentOutput
	ToRoleManagementPolicyAssignmentOutputWithContext(ctx context.Context) RoleManagementPolicyAssignmentOutput
}

func (*RoleManagementPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAssignment)(nil))
}

func (i *RoleManagementPolicyAssignment) ToRoleManagementPolicyAssignmentOutput() RoleManagementPolicyAssignmentOutput {
	return i.ToRoleManagementPolicyAssignmentOutputWithContext(context.Background())
}

func (i *RoleManagementPolicyAssignment) ToRoleManagementPolicyAssignmentOutputWithContext(ctx context.Context) RoleManagementPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyAssignmentOutput)
}

type RoleManagementPolicyAssignmentOutput struct {
	*pulumi.OutputState
}

func (RoleManagementPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAssignment)(nil))
}

func (o RoleManagementPolicyAssignmentOutput) ToRoleManagementPolicyAssignmentOutput() RoleManagementPolicyAssignmentOutput {
	return o
}

func (o RoleManagementPolicyAssignmentOutput) ToRoleManagementPolicyAssignmentOutputWithContext(ctx context.Context) RoleManagementPolicyAssignmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RoleManagementPolicyAssignmentOutput{})
}
