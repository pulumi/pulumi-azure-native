// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The approval settings.
type ApprovalSettings struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStage `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// ApprovalSettingsInput is an input type that accepts ApprovalSettingsArgs and ApprovalSettingsOutput values.
// You can construct a concrete instance of `ApprovalSettingsInput` via:
//
//          ApprovalSettingsArgs{...}
type ApprovalSettingsInput interface {
	pulumi.Input

	ToApprovalSettingsOutput() ApprovalSettingsOutput
	ToApprovalSettingsOutputWithContext(context.Context) ApprovalSettingsOutput
}

// The approval settings.
type ApprovalSettingsArgs struct {
	// The type of rule
	ApprovalMode pulumi.StringPtrInput `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages ApprovalStageArrayInput `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired pulumi.BoolPtrInput `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension pulumi.BoolPtrInput `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired pulumi.BoolPtrInput `pulumi:"isRequestorJustificationRequired"`
}

func (ApprovalSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettings)(nil)).Elem()
}

func (i ApprovalSettingsArgs) ToApprovalSettingsOutput() ApprovalSettingsOutput {
	return i.ToApprovalSettingsOutputWithContext(context.Background())
}

func (i ApprovalSettingsArgs) ToApprovalSettingsOutputWithContext(ctx context.Context) ApprovalSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsOutput)
}

func (i ApprovalSettingsArgs) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return i.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (i ApprovalSettingsArgs) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsOutput).ToApprovalSettingsPtrOutputWithContext(ctx)
}

// ApprovalSettingsPtrInput is an input type that accepts ApprovalSettingsArgs, ApprovalSettingsPtr and ApprovalSettingsPtrOutput values.
// You can construct a concrete instance of `ApprovalSettingsPtrInput` via:
//
//          ApprovalSettingsArgs{...}
//
//  or:
//
//          nil
type ApprovalSettingsPtrInput interface {
	pulumi.Input

	ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput
	ToApprovalSettingsPtrOutputWithContext(context.Context) ApprovalSettingsPtrOutput
}

type approvalSettingsPtrType ApprovalSettingsArgs

func ApprovalSettingsPtr(v *ApprovalSettingsArgs) ApprovalSettingsPtrInput {
	return (*approvalSettingsPtrType)(v)
}

func (*approvalSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettings)(nil)).Elem()
}

func (i *approvalSettingsPtrType) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return i.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (i *approvalSettingsPtrType) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsPtrOutput)
}

// The approval settings.
type ApprovalSettingsOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettings)(nil)).Elem()
}

func (o ApprovalSettingsOutput) ToApprovalSettingsOutput() ApprovalSettingsOutput {
	return o
}

func (o ApprovalSettingsOutput) ToApprovalSettingsOutputWithContext(ctx context.Context) ApprovalSettingsOutput {
	return o
}

func (o ApprovalSettingsOutput) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return o.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (o ApprovalSettingsOutput) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *ApprovalSettings {
		return &v
	}).(ApprovalSettingsPtrOutput)
}

// The type of rule
func (o ApprovalSettingsOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsOutput) ApprovalStages() ApprovalStageArrayOutput {
	return o.ApplyT(func(v ApprovalSettings) []ApprovalStage { return v.ApprovalStages }).(ApprovalStageArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsPtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettings)(nil)).Elem()
}

func (o ApprovalSettingsPtrOutput) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return o
}

func (o ApprovalSettingsPtrOutput) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return o
}

func (o ApprovalSettingsPtrOutput) Elem() ApprovalSettingsOutput {
	return o.ApplyT(func(v *ApprovalSettings) ApprovalSettings { return *v }).(ApprovalSettingsOutput)
}

// The type of rule
func (o ApprovalSettingsPtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsPtrOutput) ApprovalStages() ApprovalStageArrayOutput {
	return o.ApplyT(func(v *ApprovalSettings) []ApprovalStage {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsPtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsPtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsPtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval settings.
type ApprovalSettingsInvokeResponse struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStageInvokeResponse `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// ApprovalSettingsInvokeResponseInput is an input type that accepts ApprovalSettingsInvokeResponseArgs and ApprovalSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `ApprovalSettingsInvokeResponseInput` via:
//
//          ApprovalSettingsInvokeResponseArgs{...}
type ApprovalSettingsInvokeResponseInput interface {
	pulumi.Input

	ToApprovalSettingsInvokeResponseOutput() ApprovalSettingsInvokeResponseOutput
	ToApprovalSettingsInvokeResponseOutputWithContext(context.Context) ApprovalSettingsInvokeResponseOutput
}

// The approval settings.
type ApprovalSettingsInvokeResponseArgs struct {
	// The type of rule
	ApprovalMode pulumi.StringPtrInput `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages ApprovalStageInvokeResponseArrayInput `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired pulumi.BoolPtrInput `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension pulumi.BoolPtrInput `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired pulumi.BoolPtrInput `pulumi:"isRequestorJustificationRequired"`
}

func (ApprovalSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettingsInvokeResponse)(nil)).Elem()
}

func (i ApprovalSettingsInvokeResponseArgs) ToApprovalSettingsInvokeResponseOutput() ApprovalSettingsInvokeResponseOutput {
	return i.ToApprovalSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i ApprovalSettingsInvokeResponseArgs) ToApprovalSettingsInvokeResponseOutputWithContext(ctx context.Context) ApprovalSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsInvokeResponseOutput)
}

func (i ApprovalSettingsInvokeResponseArgs) ToApprovalSettingsInvokeResponsePtrOutput() ApprovalSettingsInvokeResponsePtrOutput {
	return i.ToApprovalSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ApprovalSettingsInvokeResponseArgs) ToApprovalSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsInvokeResponseOutput).ToApprovalSettingsInvokeResponsePtrOutputWithContext(ctx)
}

// ApprovalSettingsInvokeResponsePtrInput is an input type that accepts ApprovalSettingsInvokeResponseArgs, ApprovalSettingsInvokeResponsePtr and ApprovalSettingsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ApprovalSettingsInvokeResponsePtrInput` via:
//
//          ApprovalSettingsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ApprovalSettingsInvokeResponsePtrInput interface {
	pulumi.Input

	ToApprovalSettingsInvokeResponsePtrOutput() ApprovalSettingsInvokeResponsePtrOutput
	ToApprovalSettingsInvokeResponsePtrOutputWithContext(context.Context) ApprovalSettingsInvokeResponsePtrOutput
}

type approvalSettingsInvokeResponsePtrType ApprovalSettingsInvokeResponseArgs

func ApprovalSettingsInvokeResponsePtr(v *ApprovalSettingsInvokeResponseArgs) ApprovalSettingsInvokeResponsePtrInput {
	return (*approvalSettingsInvokeResponsePtrType)(v)
}

func (*approvalSettingsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettingsInvokeResponse)(nil)).Elem()
}

func (i *approvalSettingsInvokeResponsePtrType) ToApprovalSettingsInvokeResponsePtrOutput() ApprovalSettingsInvokeResponsePtrOutput {
	return i.ToApprovalSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *approvalSettingsInvokeResponsePtrType) ToApprovalSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsInvokeResponsePtrOutput)
}

// The approval settings.
type ApprovalSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettingsInvokeResponse)(nil)).Elem()
}

func (o ApprovalSettingsInvokeResponseOutput) ToApprovalSettingsInvokeResponseOutput() ApprovalSettingsInvokeResponseOutput {
	return o
}

func (o ApprovalSettingsInvokeResponseOutput) ToApprovalSettingsInvokeResponseOutputWithContext(ctx context.Context) ApprovalSettingsInvokeResponseOutput {
	return o
}

func (o ApprovalSettingsInvokeResponseOutput) ToApprovalSettingsInvokeResponsePtrOutput() ApprovalSettingsInvokeResponsePtrOutput {
	return o.ToApprovalSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ApprovalSettingsInvokeResponseOutput) ToApprovalSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ApprovalSettingsInvokeResponse) *ApprovalSettingsInvokeResponse {
		return &v
	}).(ApprovalSettingsInvokeResponsePtrOutput)
}

// The type of rule
func (o ApprovalSettingsInvokeResponseOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsInvokeResponse) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsInvokeResponseOutput) ApprovalStages() ApprovalStageInvokeResponseArrayOutput {
	return o.ApplyT(func(v ApprovalSettingsInvokeResponse) []ApprovalStageInvokeResponse { return v.ApprovalStages }).(ApprovalStageInvokeResponseArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsInvokeResponseOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsInvokeResponse) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsInvokeResponseOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsInvokeResponse) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsInvokeResponseOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsInvokeResponse) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettingsInvokeResponse)(nil)).Elem()
}

func (o ApprovalSettingsInvokeResponsePtrOutput) ToApprovalSettingsInvokeResponsePtrOutput() ApprovalSettingsInvokeResponsePtrOutput {
	return o
}

func (o ApprovalSettingsInvokeResponsePtrOutput) ToApprovalSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsInvokeResponsePtrOutput {
	return o
}

func (o ApprovalSettingsInvokeResponsePtrOutput) Elem() ApprovalSettingsInvokeResponseOutput {
	return o.ApplyT(func(v *ApprovalSettingsInvokeResponse) ApprovalSettingsInvokeResponse { return *v }).(ApprovalSettingsInvokeResponseOutput)
}

// The type of rule
func (o ApprovalSettingsInvokeResponsePtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsInvokeResponsePtrOutput) ApprovalStages() ApprovalStageInvokeResponseArrayOutput {
	return o.ApplyT(func(v *ApprovalSettingsInvokeResponse) []ApprovalStageInvokeResponse {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageInvokeResponseArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsInvokeResponsePtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsInvokeResponsePtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsInvokeResponsePtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval settings.
type ApprovalSettingsResponse struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStageResponse `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// ApprovalSettingsResponseInput is an input type that accepts ApprovalSettingsResponseArgs and ApprovalSettingsResponseOutput values.
// You can construct a concrete instance of `ApprovalSettingsResponseInput` via:
//
//          ApprovalSettingsResponseArgs{...}
type ApprovalSettingsResponseInput interface {
	pulumi.Input

	ToApprovalSettingsResponseOutput() ApprovalSettingsResponseOutput
	ToApprovalSettingsResponseOutputWithContext(context.Context) ApprovalSettingsResponseOutput
}

// The approval settings.
type ApprovalSettingsResponseArgs struct {
	// The type of rule
	ApprovalMode pulumi.StringPtrInput `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages ApprovalStageResponseArrayInput `pulumi:"approvalStages"`
	// Determine whether approval is required or not.
	IsApprovalRequired pulumi.BoolPtrInput `pulumi:"isApprovalRequired"`
	// Determine whether approval is required for assignment extension.
	IsApprovalRequiredForExtension pulumi.BoolPtrInput `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification required.
	IsRequestorJustificationRequired pulumi.BoolPtrInput `pulumi:"isRequestorJustificationRequired"`
}

func (ApprovalSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettingsResponse)(nil)).Elem()
}

func (i ApprovalSettingsResponseArgs) ToApprovalSettingsResponseOutput() ApprovalSettingsResponseOutput {
	return i.ToApprovalSettingsResponseOutputWithContext(context.Background())
}

func (i ApprovalSettingsResponseArgs) ToApprovalSettingsResponseOutputWithContext(ctx context.Context) ApprovalSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsResponseOutput)
}

func (i ApprovalSettingsResponseArgs) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return i.ToApprovalSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ApprovalSettingsResponseArgs) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsResponseOutput).ToApprovalSettingsResponsePtrOutputWithContext(ctx)
}

// ApprovalSettingsResponsePtrInput is an input type that accepts ApprovalSettingsResponseArgs, ApprovalSettingsResponsePtr and ApprovalSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ApprovalSettingsResponsePtrInput` via:
//
//          ApprovalSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ApprovalSettingsResponsePtrInput interface {
	pulumi.Input

	ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput
	ToApprovalSettingsResponsePtrOutputWithContext(context.Context) ApprovalSettingsResponsePtrOutput
}

type approvalSettingsResponsePtrType ApprovalSettingsResponseArgs

func ApprovalSettingsResponsePtr(v *ApprovalSettingsResponseArgs) ApprovalSettingsResponsePtrInput {
	return (*approvalSettingsResponsePtrType)(v)
}

func (*approvalSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettingsResponse)(nil)).Elem()
}

func (i *approvalSettingsResponsePtrType) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return i.ToApprovalSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *approvalSettingsResponsePtrType) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsResponsePtrOutput)
}

// The approval settings.
type ApprovalSettingsResponseOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettingsResponse)(nil)).Elem()
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponseOutput() ApprovalSettingsResponseOutput {
	return o
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponseOutputWithContext(ctx context.Context) ApprovalSettingsResponseOutput {
	return o
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return o.ToApprovalSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *ApprovalSettingsResponse {
		return &v
	}).(ApprovalSettingsResponsePtrOutput)
}

// The type of rule
func (o ApprovalSettingsResponseOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsResponseOutput) ApprovalStages() ApprovalStageResponseArrayOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) []ApprovalStageResponse { return v.ApprovalStages }).(ApprovalStageResponseArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsResponseOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsResponseOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsResponseOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettingsResponse)(nil)).Elem()
}

func (o ApprovalSettingsResponsePtrOutput) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return o
}

func (o ApprovalSettingsResponsePtrOutput) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return o
}

func (o ApprovalSettingsResponsePtrOutput) Elem() ApprovalSettingsResponseOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) ApprovalSettingsResponse { return *v }).(ApprovalSettingsResponseOutput)
}

// The type of rule
func (o ApprovalSettingsResponsePtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsResponsePtrOutput) ApprovalStages() ApprovalStageResponseArrayOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) []ApprovalStageResponse {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageResponseArrayOutput)
}

// Determine whether approval is required or not.
func (o ApprovalSettingsResponsePtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determine whether approval is required for assignment extension.
func (o ApprovalSettingsResponsePtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification required.
func (o ApprovalSettingsResponsePtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval stage.
type ApprovalStage struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []SingleUser `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []SingleUser `pulumi:"primaryApprovers"`
}

// ApprovalStageInput is an input type that accepts ApprovalStageArgs and ApprovalStageOutput values.
// You can construct a concrete instance of `ApprovalStageInput` via:
//
//          ApprovalStageArgs{...}
type ApprovalStageInput interface {
	pulumi.Input

	ToApprovalStageOutput() ApprovalStageOutput
	ToApprovalStageOutputWithContext(context.Context) ApprovalStageOutput
}

// The approval stage.
type ApprovalStageArgs struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays pulumi.IntPtrInput `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers SingleUserArrayInput `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes pulumi.IntPtrInput `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired pulumi.BoolPtrInput `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled pulumi.BoolPtrInput `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers SingleUserArrayInput `pulumi:"primaryApprovers"`
}

func (ApprovalStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStage)(nil)).Elem()
}

func (i ApprovalStageArgs) ToApprovalStageOutput() ApprovalStageOutput {
	return i.ToApprovalStageOutputWithContext(context.Background())
}

func (i ApprovalStageArgs) ToApprovalStageOutputWithContext(ctx context.Context) ApprovalStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageOutput)
}

// ApprovalStageArrayInput is an input type that accepts ApprovalStageArray and ApprovalStageArrayOutput values.
// You can construct a concrete instance of `ApprovalStageArrayInput` via:
//
//          ApprovalStageArray{ ApprovalStageArgs{...} }
type ApprovalStageArrayInput interface {
	pulumi.Input

	ToApprovalStageArrayOutput() ApprovalStageArrayOutput
	ToApprovalStageArrayOutputWithContext(context.Context) ApprovalStageArrayOutput
}

type ApprovalStageArray []ApprovalStageInput

func (ApprovalStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStage)(nil)).Elem()
}

func (i ApprovalStageArray) ToApprovalStageArrayOutput() ApprovalStageArrayOutput {
	return i.ToApprovalStageArrayOutputWithContext(context.Background())
}

func (i ApprovalStageArray) ToApprovalStageArrayOutputWithContext(ctx context.Context) ApprovalStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageArrayOutput)
}

// The approval stage.
type ApprovalStageOutput struct{ *pulumi.OutputState }

func (ApprovalStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStage)(nil)).Elem()
}

func (o ApprovalStageOutput) ToApprovalStageOutput() ApprovalStageOutput {
	return o
}

func (o ApprovalStageOutput) ToApprovalStageOutputWithContext(ctx context.Context) ApprovalStageOutput {
	return o
}

// The time in days when approval request would be timed out.
func (o ApprovalStageOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageOutput) EscalationApprovers() SingleUserArrayOutput {
	return o.ApplyT(func(v ApprovalStage) []SingleUser { return v.EscalationApprovers }).(SingleUserArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approves.
func (o ApprovalStageOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determine whether approver need to provide justification for his decision.
func (o ApprovalStageOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageOutput) PrimaryApprovers() SingleUserArrayOutput {
	return o.ApplyT(func(v ApprovalStage) []SingleUser { return v.PrimaryApprovers }).(SingleUserArrayOutput)
}

type ApprovalStageArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStage)(nil)).Elem()
}

func (o ApprovalStageArrayOutput) ToApprovalStageArrayOutput() ApprovalStageArrayOutput {
	return o
}

func (o ApprovalStageArrayOutput) ToApprovalStageArrayOutputWithContext(ctx context.Context) ApprovalStageArrayOutput {
	return o
}

func (o ApprovalStageArrayOutput) Index(i pulumi.IntInput) ApprovalStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStage {
		return vs[0].([]ApprovalStage)[vs[1].(int)]
	}).(ApprovalStageOutput)
}

// The approval stage.
type ApprovalStageInvokeResponse struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []SingleUserInvokeResponse `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []SingleUserInvokeResponse `pulumi:"primaryApprovers"`
}

// ApprovalStageInvokeResponseInput is an input type that accepts ApprovalStageInvokeResponseArgs and ApprovalStageInvokeResponseOutput values.
// You can construct a concrete instance of `ApprovalStageInvokeResponseInput` via:
//
//          ApprovalStageInvokeResponseArgs{...}
type ApprovalStageInvokeResponseInput interface {
	pulumi.Input

	ToApprovalStageInvokeResponseOutput() ApprovalStageInvokeResponseOutput
	ToApprovalStageInvokeResponseOutputWithContext(context.Context) ApprovalStageInvokeResponseOutput
}

// The approval stage.
type ApprovalStageInvokeResponseArgs struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays pulumi.IntPtrInput `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers SingleUserInvokeResponseArrayInput `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes pulumi.IntPtrInput `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired pulumi.BoolPtrInput `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled pulumi.BoolPtrInput `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers SingleUserInvokeResponseArrayInput `pulumi:"primaryApprovers"`
}

func (ApprovalStageInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStageInvokeResponse)(nil)).Elem()
}

func (i ApprovalStageInvokeResponseArgs) ToApprovalStageInvokeResponseOutput() ApprovalStageInvokeResponseOutput {
	return i.ToApprovalStageInvokeResponseOutputWithContext(context.Background())
}

func (i ApprovalStageInvokeResponseArgs) ToApprovalStageInvokeResponseOutputWithContext(ctx context.Context) ApprovalStageInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageInvokeResponseOutput)
}

// ApprovalStageInvokeResponseArrayInput is an input type that accepts ApprovalStageInvokeResponseArray and ApprovalStageInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ApprovalStageInvokeResponseArrayInput` via:
//
//          ApprovalStageInvokeResponseArray{ ApprovalStageInvokeResponseArgs{...} }
type ApprovalStageInvokeResponseArrayInput interface {
	pulumi.Input

	ToApprovalStageInvokeResponseArrayOutput() ApprovalStageInvokeResponseArrayOutput
	ToApprovalStageInvokeResponseArrayOutputWithContext(context.Context) ApprovalStageInvokeResponseArrayOutput
}

type ApprovalStageInvokeResponseArray []ApprovalStageInvokeResponseInput

func (ApprovalStageInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStageInvokeResponse)(nil)).Elem()
}

func (i ApprovalStageInvokeResponseArray) ToApprovalStageInvokeResponseArrayOutput() ApprovalStageInvokeResponseArrayOutput {
	return i.ToApprovalStageInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ApprovalStageInvokeResponseArray) ToApprovalStageInvokeResponseArrayOutputWithContext(ctx context.Context) ApprovalStageInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageInvokeResponseArrayOutput)
}

// The approval stage.
type ApprovalStageInvokeResponseOutput struct{ *pulumi.OutputState }

func (ApprovalStageInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStageInvokeResponse)(nil)).Elem()
}

func (o ApprovalStageInvokeResponseOutput) ToApprovalStageInvokeResponseOutput() ApprovalStageInvokeResponseOutput {
	return o
}

func (o ApprovalStageInvokeResponseOutput) ToApprovalStageInvokeResponseOutputWithContext(ctx context.Context) ApprovalStageInvokeResponseOutput {
	return o
}

// The time in days when approval request would be timed out.
func (o ApprovalStageInvokeResponseOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageInvokeResponse) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageInvokeResponseOutput) EscalationApprovers() SingleUserInvokeResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageInvokeResponse) []SingleUserInvokeResponse { return v.EscalationApprovers }).(SingleUserInvokeResponseArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approves.
func (o ApprovalStageInvokeResponseOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageInvokeResponse) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determine whether approver need to provide justification for his decision.
func (o ApprovalStageInvokeResponseOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageInvokeResponse) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageInvokeResponseOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageInvokeResponse) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageInvokeResponseOutput) PrimaryApprovers() SingleUserInvokeResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageInvokeResponse) []SingleUserInvokeResponse { return v.PrimaryApprovers }).(SingleUserInvokeResponseArrayOutput)
}

type ApprovalStageInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStageInvokeResponse)(nil)).Elem()
}

func (o ApprovalStageInvokeResponseArrayOutput) ToApprovalStageInvokeResponseArrayOutput() ApprovalStageInvokeResponseArrayOutput {
	return o
}

func (o ApprovalStageInvokeResponseArrayOutput) ToApprovalStageInvokeResponseArrayOutputWithContext(ctx context.Context) ApprovalStageInvokeResponseArrayOutput {
	return o
}

func (o ApprovalStageInvokeResponseArrayOutput) Index(i pulumi.IntInput) ApprovalStageInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStageInvokeResponse {
		return vs[0].([]ApprovalStageInvokeResponse)[vs[1].(int)]
	}).(ApprovalStageInvokeResponseOutput)
}

// The approval stage.
type ApprovalStageResponse struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []SingleUserResponse `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []SingleUserResponse `pulumi:"primaryApprovers"`
}

// ApprovalStageResponseInput is an input type that accepts ApprovalStageResponseArgs and ApprovalStageResponseOutput values.
// You can construct a concrete instance of `ApprovalStageResponseInput` via:
//
//          ApprovalStageResponseArgs{...}
type ApprovalStageResponseInput interface {
	pulumi.Input

	ToApprovalStageResponseOutput() ApprovalStageResponseOutput
	ToApprovalStageResponseOutputWithContext(context.Context) ApprovalStageResponseOutput
}

// The approval stage.
type ApprovalStageResponseArgs struct {
	// The time in days when approval request would be timed out.
	ApprovalStageTimeOutInDays pulumi.IntPtrInput `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers SingleUserResponseArrayInput `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approves.
	EscalationTimeInMinutes pulumi.IntPtrInput `pulumi:"escalationTimeInMinutes"`
	// Determine whether approver need to provide justification for his decision.
	IsApproverJustificationRequired pulumi.BoolPtrInput `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled pulumi.BoolPtrInput `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers SingleUserResponseArrayInput `pulumi:"primaryApprovers"`
}

func (ApprovalStageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStageResponse)(nil)).Elem()
}

func (i ApprovalStageResponseArgs) ToApprovalStageResponseOutput() ApprovalStageResponseOutput {
	return i.ToApprovalStageResponseOutputWithContext(context.Background())
}

func (i ApprovalStageResponseArgs) ToApprovalStageResponseOutputWithContext(ctx context.Context) ApprovalStageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageResponseOutput)
}

// ApprovalStageResponseArrayInput is an input type that accepts ApprovalStageResponseArray and ApprovalStageResponseArrayOutput values.
// You can construct a concrete instance of `ApprovalStageResponseArrayInput` via:
//
//          ApprovalStageResponseArray{ ApprovalStageResponseArgs{...} }
type ApprovalStageResponseArrayInput interface {
	pulumi.Input

	ToApprovalStageResponseArrayOutput() ApprovalStageResponseArrayOutput
	ToApprovalStageResponseArrayOutputWithContext(context.Context) ApprovalStageResponseArrayOutput
}

type ApprovalStageResponseArray []ApprovalStageResponseInput

func (ApprovalStageResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStageResponse)(nil)).Elem()
}

func (i ApprovalStageResponseArray) ToApprovalStageResponseArrayOutput() ApprovalStageResponseArrayOutput {
	return i.ToApprovalStageResponseArrayOutputWithContext(context.Background())
}

func (i ApprovalStageResponseArray) ToApprovalStageResponseArrayOutputWithContext(ctx context.Context) ApprovalStageResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageResponseArrayOutput)
}

// The approval stage.
type ApprovalStageResponseOutput struct{ *pulumi.OutputState }

func (ApprovalStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStageResponse)(nil)).Elem()
}

func (o ApprovalStageResponseOutput) ToApprovalStageResponseOutput() ApprovalStageResponseOutput {
	return o
}

func (o ApprovalStageResponseOutput) ToApprovalStageResponseOutputWithContext(ctx context.Context) ApprovalStageResponseOutput {
	return o
}

// The time in days when approval request would be timed out.
func (o ApprovalStageResponseOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageResponseOutput) EscalationApprovers() SingleUserResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageResponse) []SingleUserResponse { return v.EscalationApprovers }).(SingleUserResponseArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approves.
func (o ApprovalStageResponseOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determine whether approver need to provide justification for his decision.
func (o ApprovalStageResponseOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageResponseOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageResponseOutput) PrimaryApprovers() SingleUserResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageResponse) []SingleUserResponse { return v.PrimaryApprovers }).(SingleUserResponseArrayOutput)
}

type ApprovalStageResponseArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStageResponse)(nil)).Elem()
}

func (o ApprovalStageResponseArrayOutput) ToApprovalStageResponseArrayOutput() ApprovalStageResponseArrayOutput {
	return o
}

func (o ApprovalStageResponseArrayOutput) ToApprovalStageResponseArrayOutputWithContext(ctx context.Context) ApprovalStageResponseArrayOutput {
	return o
}

func (o ApprovalStageResponseArrayOutput) Index(i pulumi.IntInput) ApprovalStageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStageResponse {
		return vs[0].([]ApprovalStageResponse)[vs[1].(int)]
	}).(ApprovalStageResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettings `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyApprovalRuleInput is an input type that accepts RoleManagementPolicyApprovalRuleArgs and RoleManagementPolicyApprovalRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyApprovalRuleInput` via:
//
//          RoleManagementPolicyApprovalRuleArgs{...}
type RoleManagementPolicyApprovalRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput
	ToRoleManagementPolicyApprovalRuleOutputWithContext(context.Context) RoleManagementPolicyApprovalRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The approval setting
	Setting ApprovalSettingsPtrInput `pulumi:"setting"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRule)(nil)).Elem()
}

func (i RoleManagementPolicyApprovalRuleArgs) ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput {
	return i.ToRoleManagementPolicyApprovalRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyApprovalRuleArgs) ToRoleManagementPolicyApprovalRuleOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyApprovalRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRule)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleOutput) ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleOutput) ToRoleManagementPolicyApprovalRuleOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleOutput) Setting() ApprovalSettingsPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *ApprovalSettings { return v.Setting }).(ApprovalSettingsPtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleInvokeResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettingsInvokeResponse `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetInvokeResponse `pulumi:"target"`
}

// RoleManagementPolicyApprovalRuleInvokeResponseInput is an input type that accepts RoleManagementPolicyApprovalRuleInvokeResponseArgs and RoleManagementPolicyApprovalRuleInvokeResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyApprovalRuleInvokeResponseInput` via:
//
//          RoleManagementPolicyApprovalRuleInvokeResponseArgs{...}
type RoleManagementPolicyApprovalRuleInvokeResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyApprovalRuleInvokeResponseOutput() RoleManagementPolicyApprovalRuleInvokeResponseOutput
	ToRoleManagementPolicyApprovalRuleInvokeResponseOutputWithContext(context.Context) RoleManagementPolicyApprovalRuleInvokeResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleInvokeResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The approval setting
	Setting ApprovalSettingsInvokeResponsePtrInput `pulumi:"setting"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetInvokeResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyApprovalRuleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRuleInvokeResponse)(nil)).Elem()
}

func (i RoleManagementPolicyApprovalRuleInvokeResponseArgs) ToRoleManagementPolicyApprovalRuleInvokeResponseOutput() RoleManagementPolicyApprovalRuleInvokeResponseOutput {
	return i.ToRoleManagementPolicyApprovalRuleInvokeResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyApprovalRuleInvokeResponseArgs) ToRoleManagementPolicyApprovalRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyApprovalRuleInvokeResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleInvokeResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRuleInvokeResponse)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleInvokeResponseOutput) ToRoleManagementPolicyApprovalRuleInvokeResponseOutput() RoleManagementPolicyApprovalRuleInvokeResponseOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleInvokeResponseOutput) ToRoleManagementPolicyApprovalRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleInvokeResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleInvokeResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleInvokeResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleInvokeResponseOutput) Setting() ApprovalSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleInvokeResponse) *ApprovalSettingsInvokeResponse {
		return v.Setting
	}).(ApprovalSettingsInvokeResponsePtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleInvokeResponseOutput) Target() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleInvokeResponse) *RoleManagementPolicyRuleTargetInvokeResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetInvokeResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettingsResponse `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyApprovalRuleResponseInput is an input type that accepts RoleManagementPolicyApprovalRuleResponseArgs and RoleManagementPolicyApprovalRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyApprovalRuleResponseInput` via:
//
//          RoleManagementPolicyApprovalRuleResponseArgs{...}
type RoleManagementPolicyApprovalRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyApprovalRuleResponseOutput() RoleManagementPolicyApprovalRuleResponseOutput
	ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(context.Context) RoleManagementPolicyApprovalRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The approval setting
	Setting ApprovalSettingsResponsePtrInput `pulumi:"setting"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyApprovalRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyApprovalRuleResponseArgs) ToRoleManagementPolicyApprovalRuleResponseOutput() RoleManagementPolicyApprovalRuleResponseOutput {
	return i.ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyApprovalRuleResponseArgs) ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyApprovalRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyApprovalRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleResponseOutput) ToRoleManagementPolicyApprovalRuleResponseOutput() RoleManagementPolicyApprovalRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleResponseOutput) ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleResponseOutput) Setting() ApprovalSettingsResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *ApprovalSettingsResponse { return v.Setting }).(ApprovalSettingsResponsePtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRule struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyAuthenticationContextRuleInput is an input type that accepts RoleManagementPolicyAuthenticationContextRuleArgs and RoleManagementPolicyAuthenticationContextRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyAuthenticationContextRuleInput` via:
//
//          RoleManagementPolicyAuthenticationContextRuleArgs{...}
type RoleManagementPolicyAuthenticationContextRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput
	ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(context.Context) RoleManagementPolicyAuthenticationContextRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleArgs struct {
	// The claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyAuthenticationContextRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRule)(nil)).Elem()
}

func (i RoleManagementPolicyAuthenticationContextRuleArgs) ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput {
	return i.ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyAuthenticationContextRuleArgs) ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyAuthenticationContextRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRule)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleOutput) ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleOutput) ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleInvokeResponse struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetInvokeResponse `pulumi:"target"`
}

// RoleManagementPolicyAuthenticationContextRuleInvokeResponseInput is an input type that accepts RoleManagementPolicyAuthenticationContextRuleInvokeResponseArgs and RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyAuthenticationContextRuleInvokeResponseInput` via:
//
//          RoleManagementPolicyAuthenticationContextRuleInvokeResponseArgs{...}
type RoleManagementPolicyAuthenticationContextRuleInvokeResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput() RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput
	ToRoleManagementPolicyAuthenticationContextRuleInvokeResponseOutputWithContext(context.Context) RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleInvokeResponseArgs struct {
	// The claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetInvokeResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyAuthenticationContextRuleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRuleInvokeResponse)(nil)).Elem()
}

func (i RoleManagementPolicyAuthenticationContextRuleInvokeResponseArgs) ToRoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput() RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput {
	return i.ToRoleManagementPolicyAuthenticationContextRuleInvokeResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyAuthenticationContextRuleInvokeResponseArgs) ToRoleManagementPolicyAuthenticationContextRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRuleInvokeResponse)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput() RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleInvokeResponse) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleInvokeResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleInvokeResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput) Target() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleInvokeResponse) *RoleManagementPolicyRuleTargetInvokeResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetInvokeResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleResponse struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyAuthenticationContextRuleResponseInput is an input type that accepts RoleManagementPolicyAuthenticationContextRuleResponseArgs and RoleManagementPolicyAuthenticationContextRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyAuthenticationContextRuleResponseInput` via:
//
//          RoleManagementPolicyAuthenticationContextRuleResponseArgs{...}
type RoleManagementPolicyAuthenticationContextRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyAuthenticationContextRuleResponseOutput() RoleManagementPolicyAuthenticationContextRuleResponseOutput
	ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(context.Context) RoleManagementPolicyAuthenticationContextRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleResponseArgs struct {
	// The claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyAuthenticationContextRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyAuthenticationContextRuleResponseArgs) ToRoleManagementPolicyAuthenticationContextRuleResponseOutput() RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return i.ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyAuthenticationContextRuleResponseArgs) ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyAuthenticationContextRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyAuthenticationContextRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleResponseOutput() RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRule struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyEnablementRuleInput is an input type that accepts RoleManagementPolicyEnablementRuleArgs and RoleManagementPolicyEnablementRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyEnablementRuleInput` via:
//
//          RoleManagementPolicyEnablementRuleArgs{...}
type RoleManagementPolicyEnablementRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput
	ToRoleManagementPolicyEnablementRuleOutputWithContext(context.Context) RoleManagementPolicyEnablementRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleArgs struct {
	// The list of enabled rules.
	EnabledRules pulumi.StringArrayInput `pulumi:"enabledRules"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyEnablementRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRule)(nil)).Elem()
}

func (i RoleManagementPolicyEnablementRuleArgs) ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput {
	return i.ToRoleManagementPolicyEnablementRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyEnablementRuleArgs) ToRoleManagementPolicyEnablementRuleOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyEnablementRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRule)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleOutput) ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleOutput) ToRoleManagementPolicyEnablementRuleOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleInvokeResponse struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetInvokeResponse `pulumi:"target"`
}

// RoleManagementPolicyEnablementRuleInvokeResponseInput is an input type that accepts RoleManagementPolicyEnablementRuleInvokeResponseArgs and RoleManagementPolicyEnablementRuleInvokeResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyEnablementRuleInvokeResponseInput` via:
//
//          RoleManagementPolicyEnablementRuleInvokeResponseArgs{...}
type RoleManagementPolicyEnablementRuleInvokeResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyEnablementRuleInvokeResponseOutput() RoleManagementPolicyEnablementRuleInvokeResponseOutput
	ToRoleManagementPolicyEnablementRuleInvokeResponseOutputWithContext(context.Context) RoleManagementPolicyEnablementRuleInvokeResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleInvokeResponseArgs struct {
	// The list of enabled rules.
	EnabledRules pulumi.StringArrayInput `pulumi:"enabledRules"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetInvokeResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyEnablementRuleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRuleInvokeResponse)(nil)).Elem()
}

func (i RoleManagementPolicyEnablementRuleInvokeResponseArgs) ToRoleManagementPolicyEnablementRuleInvokeResponseOutput() RoleManagementPolicyEnablementRuleInvokeResponseOutput {
	return i.ToRoleManagementPolicyEnablementRuleInvokeResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyEnablementRuleInvokeResponseArgs) ToRoleManagementPolicyEnablementRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyEnablementRuleInvokeResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleInvokeResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRuleInvokeResponse)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleInvokeResponseOutput) ToRoleManagementPolicyEnablementRuleInvokeResponseOutput() RoleManagementPolicyEnablementRuleInvokeResponseOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleInvokeResponseOutput) ToRoleManagementPolicyEnablementRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleInvokeResponseOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleInvokeResponseOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleInvokeResponse) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleInvokeResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleInvokeResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleInvokeResponseOutput) Target() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleInvokeResponse) *RoleManagementPolicyRuleTargetInvokeResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetInvokeResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleResponse struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyEnablementRuleResponseInput is an input type that accepts RoleManagementPolicyEnablementRuleResponseArgs and RoleManagementPolicyEnablementRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyEnablementRuleResponseInput` via:
//
//          RoleManagementPolicyEnablementRuleResponseArgs{...}
type RoleManagementPolicyEnablementRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyEnablementRuleResponseOutput() RoleManagementPolicyEnablementRuleResponseOutput
	ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(context.Context) RoleManagementPolicyEnablementRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleResponseArgs struct {
	// The list of enabled rules.
	EnabledRules pulumi.StringArrayInput `pulumi:"enabledRules"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyEnablementRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyEnablementRuleResponseArgs) ToRoleManagementPolicyEnablementRuleResponseOutput() RoleManagementPolicyEnablementRuleResponseOutput {
	return i.ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyEnablementRuleResponseArgs) ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyEnablementRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyEnablementRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleResponseOutput) ToRoleManagementPolicyEnablementRuleResponseOutput() RoleManagementPolicyEnablementRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleResponseOutput) ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleResponseOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleResponseOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyExpirationRuleInput is an input type that accepts RoleManagementPolicyExpirationRuleArgs and RoleManagementPolicyExpirationRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyExpirationRuleInput` via:
//
//          RoleManagementPolicyExpirationRuleArgs{...}
type RoleManagementPolicyExpirationRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput
	ToRoleManagementPolicyExpirationRuleOutputWithContext(context.Context) RoleManagementPolicyExpirationRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired pulumi.BoolPtrInput `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration pulumi.StringPtrInput `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyExpirationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRule)(nil)).Elem()
}

func (i RoleManagementPolicyExpirationRuleArgs) ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput {
	return i.ToRoleManagementPolicyExpirationRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyExpirationRuleArgs) ToRoleManagementPolicyExpirationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyExpirationRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRule)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleOutput) ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleOutput) ToRoleManagementPolicyExpirationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleInvokeResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetInvokeResponse `pulumi:"target"`
}

// RoleManagementPolicyExpirationRuleInvokeResponseInput is an input type that accepts RoleManagementPolicyExpirationRuleInvokeResponseArgs and RoleManagementPolicyExpirationRuleInvokeResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyExpirationRuleInvokeResponseInput` via:
//
//          RoleManagementPolicyExpirationRuleInvokeResponseArgs{...}
type RoleManagementPolicyExpirationRuleInvokeResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyExpirationRuleInvokeResponseOutput() RoleManagementPolicyExpirationRuleInvokeResponseOutput
	ToRoleManagementPolicyExpirationRuleInvokeResponseOutputWithContext(context.Context) RoleManagementPolicyExpirationRuleInvokeResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleInvokeResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired pulumi.BoolPtrInput `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration pulumi.StringPtrInput `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetInvokeResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyExpirationRuleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRuleInvokeResponse)(nil)).Elem()
}

func (i RoleManagementPolicyExpirationRuleInvokeResponseArgs) ToRoleManagementPolicyExpirationRuleInvokeResponseOutput() RoleManagementPolicyExpirationRuleInvokeResponseOutput {
	return i.ToRoleManagementPolicyExpirationRuleInvokeResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyExpirationRuleInvokeResponseArgs) ToRoleManagementPolicyExpirationRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyExpirationRuleInvokeResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleInvokeResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRuleInvokeResponse)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleInvokeResponseOutput) ToRoleManagementPolicyExpirationRuleInvokeResponseOutput() RoleManagementPolicyExpirationRuleInvokeResponseOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleInvokeResponseOutput) ToRoleManagementPolicyExpirationRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleInvokeResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleInvokeResponseOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleInvokeResponse) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleInvokeResponseOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleInvokeResponse) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleInvokeResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleInvokeResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleInvokeResponseOutput) Target() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleInvokeResponse) *RoleManagementPolicyRuleTargetInvokeResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetInvokeResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyExpirationRuleResponseInput is an input type that accepts RoleManagementPolicyExpirationRuleResponseArgs and RoleManagementPolicyExpirationRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyExpirationRuleResponseInput` via:
//
//          RoleManagementPolicyExpirationRuleResponseArgs{...}
type RoleManagementPolicyExpirationRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyExpirationRuleResponseOutput() RoleManagementPolicyExpirationRuleResponseOutput
	ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(context.Context) RoleManagementPolicyExpirationRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired pulumi.BoolPtrInput `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration pulumi.StringPtrInput `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyExpirationRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyExpirationRuleResponseArgs) ToRoleManagementPolicyExpirationRuleResponseOutput() RoleManagementPolicyExpirationRuleResponseOutput {
	return i.ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyExpirationRuleResponseArgs) ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyExpirationRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyExpirationRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleResponseOutput) ToRoleManagementPolicyExpirationRuleResponseOutput() RoleManagementPolicyExpirationRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleResponseOutput) ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleResponseOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleResponseOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyNotificationRuleInput is an input type that accepts RoleManagementPolicyNotificationRuleArgs and RoleManagementPolicyNotificationRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyNotificationRuleInput` via:
//
//          RoleManagementPolicyNotificationRuleArgs{...}
type RoleManagementPolicyNotificationRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput
	ToRoleManagementPolicyNotificationRuleOutputWithContext(context.Context) RoleManagementPolicyNotificationRuleOutput
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The notification level.
	NotificationLevel pulumi.StringPtrInput `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients pulumi.StringArrayInput `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType pulumi.StringPtrInput `pulumi:"notificationType"`
	// The recipient type.
	RecipientType pulumi.StringPtrInput `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRule)(nil)).Elem()
}

func (i RoleManagementPolicyNotificationRuleArgs) ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput {
	return i.ToRoleManagementPolicyNotificationRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyNotificationRuleArgs) ToRoleManagementPolicyNotificationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyNotificationRuleOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRule)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleOutput) ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleOutput) ToRoleManagementPolicyNotificationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list notification recipients.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleInvokeResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetInvokeResponse `pulumi:"target"`
}

// RoleManagementPolicyNotificationRuleInvokeResponseInput is an input type that accepts RoleManagementPolicyNotificationRuleInvokeResponseArgs and RoleManagementPolicyNotificationRuleInvokeResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyNotificationRuleInvokeResponseInput` via:
//
//          RoleManagementPolicyNotificationRuleInvokeResponseArgs{...}
type RoleManagementPolicyNotificationRuleInvokeResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyNotificationRuleInvokeResponseOutput() RoleManagementPolicyNotificationRuleInvokeResponseOutput
	ToRoleManagementPolicyNotificationRuleInvokeResponseOutputWithContext(context.Context) RoleManagementPolicyNotificationRuleInvokeResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleInvokeResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The notification level.
	NotificationLevel pulumi.StringPtrInput `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients pulumi.StringArrayInput `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType pulumi.StringPtrInput `pulumi:"notificationType"`
	// The recipient type.
	RecipientType pulumi.StringPtrInput `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetInvokeResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyNotificationRuleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRuleInvokeResponse)(nil)).Elem()
}

func (i RoleManagementPolicyNotificationRuleInvokeResponseArgs) ToRoleManagementPolicyNotificationRuleInvokeResponseOutput() RoleManagementPolicyNotificationRuleInvokeResponseOutput {
	return i.ToRoleManagementPolicyNotificationRuleInvokeResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyNotificationRuleInvokeResponseArgs) ToRoleManagementPolicyNotificationRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyNotificationRuleInvokeResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleInvokeResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRuleInvokeResponse)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) ToRoleManagementPolicyNotificationRuleInvokeResponseOutput() RoleManagementPolicyNotificationRuleInvokeResponseOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) ToRoleManagementPolicyNotificationRuleInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleInvokeResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleInvokeResponse) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list notification recipients.
func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleInvokeResponse) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleInvokeResponse) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleInvokeResponse) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleInvokeResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleInvokeResponseOutput) Target() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleInvokeResponse) *RoleManagementPolicyRuleTargetInvokeResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetInvokeResponsePtrOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// RoleManagementPolicyNotificationRuleResponseInput is an input type that accepts RoleManagementPolicyNotificationRuleResponseArgs and RoleManagementPolicyNotificationRuleResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyNotificationRuleResponseInput` via:
//
//          RoleManagementPolicyNotificationRuleResponseArgs{...}
type RoleManagementPolicyNotificationRuleResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyNotificationRuleResponseOutput() RoleManagementPolicyNotificationRuleResponseOutput
	ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(context.Context) RoleManagementPolicyNotificationRuleResponseOutput
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleResponseArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The notification level.
	NotificationLevel pulumi.StringPtrInput `pulumi:"notificationLevel"`
	// The list notification recipients.
	NotificationRecipients pulumi.StringArrayInput `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType pulumi.StringPtrInput `pulumi:"notificationType"`
	// The recipient type.
	RecipientType pulumi.StringPtrInput `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetResponsePtrInput `pulumi:"target"`
}

func (RoleManagementPolicyNotificationRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRuleResponse)(nil)).Elem()
}

func (i RoleManagementPolicyNotificationRuleResponseArgs) ToRoleManagementPolicyNotificationRuleResponseOutput() RoleManagementPolicyNotificationRuleResponseOutput {
	return i.ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyNotificationRuleResponseArgs) ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyNotificationRuleResponseOutput)
}

// The role management policy rule.
type RoleManagementPolicyNotificationRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleResponseOutput) ToRoleManagementPolicyNotificationRuleResponseOutput() RoleManagementPolicyNotificationRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleResponseOutput) ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list notification recipients.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleResponseOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTarget struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// RoleManagementPolicyRuleTargetInput is an input type that accepts RoleManagementPolicyRuleTargetArgs and RoleManagementPolicyRuleTargetOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetInput` via:
//
//          RoleManagementPolicyRuleTargetArgs{...}
type RoleManagementPolicyRuleTargetInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput
	ToRoleManagementPolicyRuleTargetOutputWithContext(context.Context) RoleManagementPolicyRuleTargetOutput
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetArgs struct {
	// The caller of the setting.
	Caller pulumi.StringPtrInput `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings pulumi.StringArrayInput `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings pulumi.StringArrayInput `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The type of operation.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// The list of target objects.
	TargetObjects pulumi.StringArrayInput `pulumi:"targetObjects"`
}

func (RoleManagementPolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput {
	return i.ToRoleManagementPolicyRuleTargetOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetOutput)
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return i.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetOutput).ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx)
}

// RoleManagementPolicyRuleTargetPtrInput is an input type that accepts RoleManagementPolicyRuleTargetArgs, RoleManagementPolicyRuleTargetPtr and RoleManagementPolicyRuleTargetPtrOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetPtrInput` via:
//
//          RoleManagementPolicyRuleTargetArgs{...}
//
//  or:
//
//          nil
type RoleManagementPolicyRuleTargetPtrInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput
	ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Context) RoleManagementPolicyRuleTargetPtrOutput
}

type roleManagementPolicyRuleTargetPtrType RoleManagementPolicyRuleTargetArgs

func RoleManagementPolicyRuleTargetPtr(v *RoleManagementPolicyRuleTargetArgs) RoleManagementPolicyRuleTargetPtrInput {
	return (*roleManagementPolicyRuleTargetPtrType)(v)
}

func (*roleManagementPolicyRuleTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (i *roleManagementPolicyRuleTargetPtrType) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return i.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (i *roleManagementPolicyRuleTargetPtrType) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *RoleManagementPolicyRuleTarget {
		return &v
	}).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetPtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetPtrOutput) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetPtrOutput) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetPtrOutput) Elem() RoleManagementPolicyRuleTargetOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) RoleManagementPolicyRuleTarget { return *v }).(RoleManagementPolicyRuleTargetOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetPtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetPtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetPtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetPtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetPtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetInvokeResponse struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// RoleManagementPolicyRuleTargetInvokeResponseInput is an input type that accepts RoleManagementPolicyRuleTargetInvokeResponseArgs and RoleManagementPolicyRuleTargetInvokeResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetInvokeResponseInput` via:
//
//          RoleManagementPolicyRuleTargetInvokeResponseArgs{...}
type RoleManagementPolicyRuleTargetInvokeResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetInvokeResponseOutput() RoleManagementPolicyRuleTargetInvokeResponseOutput
	ToRoleManagementPolicyRuleTargetInvokeResponseOutputWithContext(context.Context) RoleManagementPolicyRuleTargetInvokeResponseOutput
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetInvokeResponseArgs struct {
	// The caller of the setting.
	Caller pulumi.StringPtrInput `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings pulumi.StringArrayInput `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings pulumi.StringArrayInput `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The type of operation.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// The list of target objects.
	TargetObjects pulumi.StringArrayInput `pulumi:"targetObjects"`
}

func (RoleManagementPolicyRuleTargetInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTargetInvokeResponse)(nil)).Elem()
}

func (i RoleManagementPolicyRuleTargetInvokeResponseArgs) ToRoleManagementPolicyRuleTargetInvokeResponseOutput() RoleManagementPolicyRuleTargetInvokeResponseOutput {
	return i.ToRoleManagementPolicyRuleTargetInvokeResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetInvokeResponseArgs) ToRoleManagementPolicyRuleTargetInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetInvokeResponseOutput)
}

func (i RoleManagementPolicyRuleTargetInvokeResponseArgs) ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutput() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return i.ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetInvokeResponseArgs) ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetInvokeResponseOutput).ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(ctx)
}

// RoleManagementPolicyRuleTargetInvokeResponsePtrInput is an input type that accepts RoleManagementPolicyRuleTargetInvokeResponseArgs, RoleManagementPolicyRuleTargetInvokeResponsePtr and RoleManagementPolicyRuleTargetInvokeResponsePtrOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetInvokeResponsePtrInput` via:
//
//          RoleManagementPolicyRuleTargetInvokeResponseArgs{...}
//
//  or:
//
//          nil
type RoleManagementPolicyRuleTargetInvokeResponsePtrInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutput() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput
	ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(context.Context) RoleManagementPolicyRuleTargetInvokeResponsePtrOutput
}

type roleManagementPolicyRuleTargetInvokeResponsePtrType RoleManagementPolicyRuleTargetInvokeResponseArgs

func RoleManagementPolicyRuleTargetInvokeResponsePtr(v *RoleManagementPolicyRuleTargetInvokeResponseArgs) RoleManagementPolicyRuleTargetInvokeResponsePtrInput {
	return (*roleManagementPolicyRuleTargetInvokeResponsePtrType)(v)
}

func (*roleManagementPolicyRuleTargetInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTargetInvokeResponse)(nil)).Elem()
}

func (i *roleManagementPolicyRuleTargetInvokeResponsePtrType) ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutput() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return i.ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *roleManagementPolicyRuleTargetInvokeResponsePtrType) ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetInvokeResponsePtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetInvokeResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTargetInvokeResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) ToRoleManagementPolicyRuleTargetInvokeResponseOutput() RoleManagementPolicyRuleTargetInvokeResponseOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) ToRoleManagementPolicyRuleTargetInvokeResponseOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetInvokeResponseOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutput() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o.ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(context.Background())
}

func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetInvokeResponse) *RoleManagementPolicyRuleTargetInvokeResponse {
		return &v
	}).(RoleManagementPolicyRuleTargetInvokeResponsePtrOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetInvokeResponse) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetInvokeResponse) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetInvokeResponse) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetInvokeResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetInvokeResponse) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetInvokeResponseOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetInvokeResponse) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTargetInvokeResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutput() RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) ToRoleManagementPolicyRuleTargetInvokeResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetInvokeResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) Elem() RoleManagementPolicyRuleTargetInvokeResponseOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetInvokeResponse) RoleManagementPolicyRuleTargetInvokeResponse {
		return *v
	}).(RoleManagementPolicyRuleTargetInvokeResponseOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetInvokeResponsePtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponse struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// RoleManagementPolicyRuleTargetResponseInput is an input type that accepts RoleManagementPolicyRuleTargetResponseArgs and RoleManagementPolicyRuleTargetResponseOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetResponseInput` via:
//
//          RoleManagementPolicyRuleTargetResponseArgs{...}
type RoleManagementPolicyRuleTargetResponseInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetResponseOutput() RoleManagementPolicyRuleTargetResponseOutput
	ToRoleManagementPolicyRuleTargetResponseOutputWithContext(context.Context) RoleManagementPolicyRuleTargetResponseOutput
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponseArgs struct {
	// The caller of the setting.
	Caller pulumi.StringPtrInput `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings pulumi.StringArrayInput `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings pulumi.StringArrayInput `pulumi:"inheritableSettings"`
	// The assignment level to which it is applied.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The type of operation.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// The list of target objects.
	TargetObjects pulumi.StringArrayInput `pulumi:"targetObjects"`
}

func (RoleManagementPolicyRuleTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (i RoleManagementPolicyRuleTargetResponseArgs) ToRoleManagementPolicyRuleTargetResponseOutput() RoleManagementPolicyRuleTargetResponseOutput {
	return i.ToRoleManagementPolicyRuleTargetResponseOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetResponseArgs) ToRoleManagementPolicyRuleTargetResponseOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetResponseOutput)
}

func (i RoleManagementPolicyRuleTargetResponseArgs) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return i.ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetResponseArgs) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetResponseOutput).ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx)
}

// RoleManagementPolicyRuleTargetResponsePtrInput is an input type that accepts RoleManagementPolicyRuleTargetResponseArgs, RoleManagementPolicyRuleTargetResponsePtr and RoleManagementPolicyRuleTargetResponsePtrOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetResponsePtrInput` via:
//
//          RoleManagementPolicyRuleTargetResponseArgs{...}
//
//  or:
//
//          nil
type RoleManagementPolicyRuleTargetResponsePtrInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput
	ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput
}

type roleManagementPolicyRuleTargetResponsePtrType RoleManagementPolicyRuleTargetResponseArgs

func RoleManagementPolicyRuleTargetResponsePtr(v *RoleManagementPolicyRuleTargetResponseArgs) RoleManagementPolicyRuleTargetResponsePtrInput {
	return (*roleManagementPolicyRuleTargetResponsePtrType)(v)
}

func (*roleManagementPolicyRuleTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (i *roleManagementPolicyRuleTargetResponsePtrType) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return i.ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(context.Background())
}

func (i *roleManagementPolicyRuleTargetResponsePtrType) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponseOutput() RoleManagementPolicyRuleTargetResponseOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponseOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponseOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(context.Background())
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *RoleManagementPolicyRuleTargetResponse {
		return &v
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetResponseOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetResponseOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetResponseOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetResponseOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetResponseOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Elem() RoleManagementPolicyRuleTargetResponseOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) RoleManagementPolicyRuleTargetResponse { return *v }).(RoleManagementPolicyRuleTargetResponseOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which it is applied.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The detail of a user.
type SingleUser struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType string `pulumi:"userType"`
}

// SingleUserInput is an input type that accepts SingleUserArgs and SingleUserOutput values.
// You can construct a concrete instance of `SingleUserInput` via:
//
//          SingleUserArgs{...}
type SingleUserInput interface {
	pulumi.Input

	ToSingleUserOutput() SingleUserOutput
	ToSingleUserOutputWithContext(context.Context) SingleUserOutput
}

// The detail of a user.
type SingleUserArgs struct {
	// The description of the user.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The object id of the user.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup pulumi.BoolPtrInput `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType pulumi.StringInput `pulumi:"userType"`
}

func (SingleUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUser)(nil)).Elem()
}

func (i SingleUserArgs) ToSingleUserOutput() SingleUserOutput {
	return i.ToSingleUserOutputWithContext(context.Background())
}

func (i SingleUserArgs) ToSingleUserOutputWithContext(ctx context.Context) SingleUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserOutput)
}

// SingleUserArrayInput is an input type that accepts SingleUserArray and SingleUserArrayOutput values.
// You can construct a concrete instance of `SingleUserArrayInput` via:
//
//          SingleUserArray{ SingleUserArgs{...} }
type SingleUserArrayInput interface {
	pulumi.Input

	ToSingleUserArrayOutput() SingleUserArrayOutput
	ToSingleUserArrayOutputWithContext(context.Context) SingleUserArrayOutput
}

type SingleUserArray []SingleUserInput

func (SingleUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUser)(nil)).Elem()
}

func (i SingleUserArray) ToSingleUserArrayOutput() SingleUserArrayOutput {
	return i.ToSingleUserArrayOutputWithContext(context.Background())
}

func (i SingleUserArray) ToSingleUserArrayOutputWithContext(ctx context.Context) SingleUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserArrayOutput)
}

// The detail of a user.
type SingleUserOutput struct{ *pulumi.OutputState }

func (SingleUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUser)(nil)).Elem()
}

func (o SingleUserOutput) ToSingleUserOutput() SingleUserOutput {
	return o
}

func (o SingleUserOutput) ToSingleUserOutputWithContext(ctx context.Context) SingleUserOutput {
	return o
}

// The description of the user.
func (o SingleUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUser) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o SingleUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o SingleUserOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleUser) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The object id of the user.
// Expected value is 'SingleUser'.
func (o SingleUserOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleUser) string { return v.UserType }).(pulumi.StringOutput)
}

type SingleUserArrayOutput struct{ *pulumi.OutputState }

func (SingleUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUser)(nil)).Elem()
}

func (o SingleUserArrayOutput) ToSingleUserArrayOutput() SingleUserArrayOutput {
	return o
}

func (o SingleUserArrayOutput) ToSingleUserArrayOutputWithContext(ctx context.Context) SingleUserArrayOutput {
	return o
}

func (o SingleUserArrayOutput) Index(i pulumi.IntInput) SingleUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleUser {
		return vs[0].([]SingleUser)[vs[1].(int)]
	}).(SingleUserOutput)
}

// The detail of a user.
type SingleUserInvokeResponse struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType string `pulumi:"userType"`
}

// SingleUserInvokeResponseInput is an input type that accepts SingleUserInvokeResponseArgs and SingleUserInvokeResponseOutput values.
// You can construct a concrete instance of `SingleUserInvokeResponseInput` via:
//
//          SingleUserInvokeResponseArgs{...}
type SingleUserInvokeResponseInput interface {
	pulumi.Input

	ToSingleUserInvokeResponseOutput() SingleUserInvokeResponseOutput
	ToSingleUserInvokeResponseOutputWithContext(context.Context) SingleUserInvokeResponseOutput
}

// The detail of a user.
type SingleUserInvokeResponseArgs struct {
	// The description of the user.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The object id of the user.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup pulumi.BoolPtrInput `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType pulumi.StringInput `pulumi:"userType"`
}

func (SingleUserInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUserInvokeResponse)(nil)).Elem()
}

func (i SingleUserInvokeResponseArgs) ToSingleUserInvokeResponseOutput() SingleUserInvokeResponseOutput {
	return i.ToSingleUserInvokeResponseOutputWithContext(context.Background())
}

func (i SingleUserInvokeResponseArgs) ToSingleUserInvokeResponseOutputWithContext(ctx context.Context) SingleUserInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserInvokeResponseOutput)
}

// SingleUserInvokeResponseArrayInput is an input type that accepts SingleUserInvokeResponseArray and SingleUserInvokeResponseArrayOutput values.
// You can construct a concrete instance of `SingleUserInvokeResponseArrayInput` via:
//
//          SingleUserInvokeResponseArray{ SingleUserInvokeResponseArgs{...} }
type SingleUserInvokeResponseArrayInput interface {
	pulumi.Input

	ToSingleUserInvokeResponseArrayOutput() SingleUserInvokeResponseArrayOutput
	ToSingleUserInvokeResponseArrayOutputWithContext(context.Context) SingleUserInvokeResponseArrayOutput
}

type SingleUserInvokeResponseArray []SingleUserInvokeResponseInput

func (SingleUserInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUserInvokeResponse)(nil)).Elem()
}

func (i SingleUserInvokeResponseArray) ToSingleUserInvokeResponseArrayOutput() SingleUserInvokeResponseArrayOutput {
	return i.ToSingleUserInvokeResponseArrayOutputWithContext(context.Background())
}

func (i SingleUserInvokeResponseArray) ToSingleUserInvokeResponseArrayOutputWithContext(ctx context.Context) SingleUserInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserInvokeResponseArrayOutput)
}

// The detail of a user.
type SingleUserInvokeResponseOutput struct{ *pulumi.OutputState }

func (SingleUserInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUserInvokeResponse)(nil)).Elem()
}

func (o SingleUserInvokeResponseOutput) ToSingleUserInvokeResponseOutput() SingleUserInvokeResponseOutput {
	return o
}

func (o SingleUserInvokeResponseOutput) ToSingleUserInvokeResponseOutputWithContext(ctx context.Context) SingleUserInvokeResponseOutput {
	return o
}

// The description of the user.
func (o SingleUserInvokeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUserInvokeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o SingleUserInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUserInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o SingleUserInvokeResponseOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleUserInvokeResponse) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The object id of the user.
// Expected value is 'SingleUser'.
func (o SingleUserInvokeResponseOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleUserInvokeResponse) string { return v.UserType }).(pulumi.StringOutput)
}

type SingleUserInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (SingleUserInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUserInvokeResponse)(nil)).Elem()
}

func (o SingleUserInvokeResponseArrayOutput) ToSingleUserInvokeResponseArrayOutput() SingleUserInvokeResponseArrayOutput {
	return o
}

func (o SingleUserInvokeResponseArrayOutput) ToSingleUserInvokeResponseArrayOutputWithContext(ctx context.Context) SingleUserInvokeResponseArrayOutput {
	return o
}

func (o SingleUserInvokeResponseArrayOutput) Index(i pulumi.IntInput) SingleUserInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleUserInvokeResponse {
		return vs[0].([]SingleUserInvokeResponse)[vs[1].(int)]
	}).(SingleUserInvokeResponseOutput)
}

// The detail of a user.
type SingleUserResponse struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType string `pulumi:"userType"`
}

// SingleUserResponseInput is an input type that accepts SingleUserResponseArgs and SingleUserResponseOutput values.
// You can construct a concrete instance of `SingleUserResponseInput` via:
//
//          SingleUserResponseArgs{...}
type SingleUserResponseInput interface {
	pulumi.Input

	ToSingleUserResponseOutput() SingleUserResponseOutput
	ToSingleUserResponseOutputWithContext(context.Context) SingleUserResponseOutput
}

// The detail of a user.
type SingleUserResponseArgs struct {
	// The description of the user.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The object id of the user.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup pulumi.BoolPtrInput `pulumi:"isBackup"`
	// The object id of the user.
	// Expected value is 'SingleUser'.
	UserType pulumi.StringInput `pulumi:"userType"`
}

func (SingleUserResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUserResponse)(nil)).Elem()
}

func (i SingleUserResponseArgs) ToSingleUserResponseOutput() SingleUserResponseOutput {
	return i.ToSingleUserResponseOutputWithContext(context.Background())
}

func (i SingleUserResponseArgs) ToSingleUserResponseOutputWithContext(ctx context.Context) SingleUserResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserResponseOutput)
}

// SingleUserResponseArrayInput is an input type that accepts SingleUserResponseArray and SingleUserResponseArrayOutput values.
// You can construct a concrete instance of `SingleUserResponseArrayInput` via:
//
//          SingleUserResponseArray{ SingleUserResponseArgs{...} }
type SingleUserResponseArrayInput interface {
	pulumi.Input

	ToSingleUserResponseArrayOutput() SingleUserResponseArrayOutput
	ToSingleUserResponseArrayOutputWithContext(context.Context) SingleUserResponseArrayOutput
}

type SingleUserResponseArray []SingleUserResponseInput

func (SingleUserResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUserResponse)(nil)).Elem()
}

func (i SingleUserResponseArray) ToSingleUserResponseArrayOutput() SingleUserResponseArrayOutput {
	return i.ToSingleUserResponseArrayOutputWithContext(context.Background())
}

func (i SingleUserResponseArray) ToSingleUserResponseArrayOutputWithContext(ctx context.Context) SingleUserResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleUserResponseArrayOutput)
}

// The detail of a user.
type SingleUserResponseOutput struct{ *pulumi.OutputState }

func (SingleUserResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleUserResponse)(nil)).Elem()
}

func (o SingleUserResponseOutput) ToSingleUserResponseOutput() SingleUserResponseOutput {
	return o
}

func (o SingleUserResponseOutput) ToSingleUserResponseOutputWithContext(ctx context.Context) SingleUserResponseOutput {
	return o
}

// The description of the user.
func (o SingleUserResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUserResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o SingleUserResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleUserResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o SingleUserResponseOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleUserResponse) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The object id of the user.
// Expected value is 'SingleUser'.
func (o SingleUserResponseOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleUserResponse) string { return v.UserType }).(pulumi.StringOutput)
}

type SingleUserResponseArrayOutput struct{ *pulumi.OutputState }

func (SingleUserResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleUserResponse)(nil)).Elem()
}

func (o SingleUserResponseArrayOutput) ToSingleUserResponseArrayOutput() SingleUserResponseArrayOutput {
	return o
}

func (o SingleUserResponseArrayOutput) ToSingleUserResponseArrayOutputWithContext(ctx context.Context) SingleUserResponseArrayOutput {
	return o
}

func (o SingleUserResponseArrayOutput) Index(i pulumi.IntInput) SingleUserResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleUserResponse {
		return vs[0].([]SingleUserResponse)[vs[1].(int)]
	}).(SingleUserResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ApprovalSettingsOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsPtrOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsResponseOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ApprovalStageOutput{})
	pulumi.RegisterOutputType(ApprovalStageArrayOutput{})
	pulumi.RegisterOutputType(ApprovalStageInvokeResponseOutput{})
	pulumi.RegisterOutputType(ApprovalStageInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ApprovalStageResponseOutput{})
	pulumi.RegisterOutputType(ApprovalStageResponseArrayOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleInvokeResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleInvokeResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleInvokeResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleInvokeResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleInvokeResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetPtrOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetInvokeResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(SingleUserOutput{})
	pulumi.RegisterOutputType(SingleUserArrayOutput{})
	pulumi.RegisterOutputType(SingleUserInvokeResponseOutput{})
	pulumi.RegisterOutputType(SingleUserInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(SingleUserResponseOutput{})
	pulumi.RegisterOutputType(SingleUserResponseArrayOutput{})
}
