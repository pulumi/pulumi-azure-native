// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Access Review Schedule Definition.
// API Version: 2021-03-01-preview.
func LookupAccessReviewScheduleDefinitionById(ctx *pulumi.Context, args *LookupAccessReviewScheduleDefinitionByIdArgs, opts ...pulumi.InvokeOption) (*LookupAccessReviewScheduleDefinitionByIdResult, error) {
	var rv LookupAccessReviewScheduleDefinitionByIdResult
	err := ctx.Invoke("azure-native:authorization:getAccessReviewScheduleDefinitionById", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAccessReviewScheduleDefinitionByIdArgs struct {
	// The id of the access review schedule definition.
	ScheduleDefinitionId string `pulumi:"scheduleDefinitionId"`
}

// Access Review Schedule Definition.
type LookupAccessReviewScheduleDefinitionByIdResult struct {
	// The role assignment state eligible/active to review
	AssignmentState string `pulumi:"assignmentState"`
	// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
	AutoApplyDecisionsEnabled *bool `pulumi:"autoApplyDecisionsEnabled"`
	// This is the collection of backup reviewers.
	BackupReviewers []AccessReviewReviewerResponse `pulumi:"backupReviewers"`
	// This specifies the behavior for the autoReview feature when an access review completes.
	DefaultDecision *string `pulumi:"defaultDecision"`
	// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
	DefaultDecisionEnabled *bool `pulumi:"defaultDecisionEnabled"`
	// The description provided by the access review creator and visible to admins.
	DescriptionForAdmins *string `pulumi:"descriptionForAdmins"`
	// The description provided by the access review creator to be shown to reviewers.
	DescriptionForReviewers *string `pulumi:"descriptionForReviewers"`
	// The display name for the schedule definition.
	DisplayName *string `pulumi:"displayName"`
	// The DateTime when the review is scheduled to end. Required if type is endDate
	EndDate *string `pulumi:"endDate"`
	// The access review schedule definition id.
	Id string `pulumi:"id"`
	// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	InactiveDuration *string `pulumi:"inactiveDuration"`
	// The duration in days for an instance.
	InstanceDurationInDays *int `pulumi:"instanceDurationInDays"`
	// This is the collection of instances returned when one does an expand on it.
	Instances []AccessReviewInstanceResponse `pulumi:"instances"`
	// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
	Interval *int `pulumi:"interval"`
	// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
	JustificationRequiredOnApproval *bool `pulumi:"justificationRequiredOnApproval"`
	// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
	MailNotificationsEnabled *bool `pulumi:"mailNotificationsEnabled"`
	// The access review schedule definition unique id.
	Name string `pulumi:"name"`
	// The number of times to repeat the access review. Required and must be positive if type is numbered.
	NumberOfOccurrences *int `pulumi:"numberOfOccurrences"`
	// The identity id
	PrincipalId string `pulumi:"principalId"`
	// The identity display name
	PrincipalName string `pulumi:"principalName"`
	// The identity type user/servicePrincipal to review
	PrincipalType string `pulumi:"principalType"`
	// Flag to indicate whether showing recommendations to reviewers is enabled.
	RecommendationsEnabled *bool `pulumi:"recommendationsEnabled"`
	// Flag to indicate whether sending reminder emails to reviewers are enabled.
	ReminderNotificationsEnabled *bool `pulumi:"reminderNotificationsEnabled"`
	// ResourceId in which this review is getting created
	ResourceId string `pulumi:"resourceId"`
	// This is the collection of reviewers.
	Reviewers []AccessReviewReviewerResponse `pulumi:"reviewers"`
	// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
	ReviewersType string `pulumi:"reviewersType"`
	// This is used to indicate the role being reviewed
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
	// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
	StartDate *string `pulumi:"startDate"`
	// This read-only field specifies the status of an accessReview.
	Status string `pulumi:"status"`
	// The resource type.
	Type string `pulumi:"type"`
	// The user principal name(if valid)
	UserPrincipalName string `pulumi:"userPrincipalName"`
}

func LookupAccessReviewScheduleDefinitionByIdOutput(ctx *pulumi.Context, args LookupAccessReviewScheduleDefinitionByIdOutputArgs, opts ...pulumi.InvokeOption) LookupAccessReviewScheduleDefinitionByIdResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessReviewScheduleDefinitionByIdResult, error) {
			args := v.(LookupAccessReviewScheduleDefinitionByIdArgs)
			r, err := LookupAccessReviewScheduleDefinitionById(ctx, &args, opts...)
			var s LookupAccessReviewScheduleDefinitionByIdResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAccessReviewScheduleDefinitionByIdResultOutput)
}

type LookupAccessReviewScheduleDefinitionByIdOutputArgs struct {
	// The id of the access review schedule definition.
	ScheduleDefinitionId pulumi.StringInput `pulumi:"scheduleDefinitionId"`
}

func (LookupAccessReviewScheduleDefinitionByIdOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessReviewScheduleDefinitionByIdArgs)(nil)).Elem()
}

// Access Review Schedule Definition.
type LookupAccessReviewScheduleDefinitionByIdResultOutput struct{ *pulumi.OutputState }

func (LookupAccessReviewScheduleDefinitionByIdResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessReviewScheduleDefinitionByIdResult)(nil)).Elem()
}

func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) ToLookupAccessReviewScheduleDefinitionByIdResultOutput() LookupAccessReviewScheduleDefinitionByIdResultOutput {
	return o
}

func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) ToLookupAccessReviewScheduleDefinitionByIdResultOutputWithContext(ctx context.Context) LookupAccessReviewScheduleDefinitionByIdResultOutput {
	return o
}

// The role assignment state eligible/active to review
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) AssignmentState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.AssignmentState }).(pulumi.StringOutput)
}

// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) AutoApplyDecisionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *bool { return v.AutoApplyDecisionsEnabled }).(pulumi.BoolPtrOutput)
}

// This is the collection of backup reviewers.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) BackupReviewers() AccessReviewReviewerResponseArrayOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) []AccessReviewReviewerResponse {
		return v.BackupReviewers
	}).(AccessReviewReviewerResponseArrayOutput)
}

// This specifies the behavior for the autoReview feature when an access review completes.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) DefaultDecision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *string { return v.DefaultDecision }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) DefaultDecisionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *bool { return v.DefaultDecisionEnabled }).(pulumi.BoolPtrOutput)
}

// The description provided by the access review creator and visible to admins.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) DescriptionForAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *string { return v.DescriptionForAdmins }).(pulumi.StringPtrOutput)
}

// The description provided by the access review creator to be shown to reviewers.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) DescriptionForReviewers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *string { return v.DescriptionForReviewers }).(pulumi.StringPtrOutput)
}

// The display name for the schedule definition.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The DateTime when the review is scheduled to end. Required if type is endDate
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The access review schedule definition id.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.Id }).(pulumi.StringOutput)
}

// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) InactiveDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *string { return v.InactiveDuration }).(pulumi.StringPtrOutput)
}

// The duration in days for an instance.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) InstanceDurationInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *int { return v.InstanceDurationInDays }).(pulumi.IntPtrOutput)
}

// This is the collection of instances returned when one does an expand on it.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) Instances() AccessReviewInstanceResponseArrayOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) []AccessReviewInstanceResponse {
		return v.Instances
	}).(AccessReviewInstanceResponseArrayOutput)
}

// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) JustificationRequiredOnApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *bool { return v.JustificationRequiredOnApproval }).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) MailNotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *bool { return v.MailNotificationsEnabled }).(pulumi.BoolPtrOutput)
}

// The access review schedule definition unique id.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of times to repeat the access review. Required and must be positive if type is numbered.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) NumberOfOccurrences() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *int { return v.NumberOfOccurrences }).(pulumi.IntPtrOutput)
}

// The identity id
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The identity display name
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) PrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalName }).(pulumi.StringOutput)
}

// The identity type user/servicePrincipal to review
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalType }).(pulumi.StringOutput)
}

// Flag to indicate whether showing recommendations to reviewers is enabled.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) RecommendationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *bool { return v.RecommendationsEnabled }).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether sending reminder emails to reviewers are enabled.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) ReminderNotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *bool { return v.ReminderNotificationsEnabled }).(pulumi.BoolPtrOutput)
}

// ResourceId in which this review is getting created
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.ResourceId }).(pulumi.StringOutput)
}

// This is the collection of reviewers.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) Reviewers() AccessReviewReviewerResponseArrayOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) []AccessReviewReviewerResponse {
		return v.Reviewers
	}).(AccessReviewReviewerResponseArrayOutput)
}

// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) ReviewersType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.ReviewersType }).(pulumi.StringOutput)
}

// This is used to indicate the role being reviewed
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// This read-only field specifies the status of an accessReview.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.Status }).(pulumi.StringOutput)
}

// The resource type.
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.Type }).(pulumi.StringOutput)
}

// The user principal name(if valid)
func (o LookupAccessReviewScheduleDefinitionByIdResultOutput) UserPrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessReviewScheduleDefinitionByIdResult) string { return v.UserPrincipalName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessReviewScheduleDefinitionByIdResultOutput{})
}
