// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Role definition permissions.
type Permission struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Allowed Data actions.
	DataActions []string `pulumi:"dataActions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions []string `pulumi:"notDataActions"`
}

// PermissionInput is an input type that accepts PermissionArgs and PermissionOutput values.
// You can construct a concrete instance of `PermissionInput` via:
//
//          PermissionArgs{...}
type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(context.Context) PermissionOutput
}

// Role definition permissions.
type PermissionArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Allowed Data actions.
	DataActions pulumi.StringArrayInput `pulumi:"dataActions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions pulumi.StringArrayInput `pulumi:"notDataActions"`
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (i PermissionArgs) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i PermissionArgs) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//          PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// Role definition permissions.
type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// Allowed actions.
func (o PermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Allowed Data actions.
func (o PermissionOutput) DataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.DataActions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// Denied Data actions.
func (o PermissionOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.NotDataActions }).(pulumi.StringArrayOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Permission {
		return vs[0].([]Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

// Role definition permissions.
type PermissionResponse struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Allowed Data actions.
	DataActions []string `pulumi:"dataActions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions []string `pulumi:"notDataActions"`
}

// PermissionResponseInput is an input type that accepts PermissionResponseArgs and PermissionResponseOutput values.
// You can construct a concrete instance of `PermissionResponseInput` via:
//
//          PermissionResponseArgs{...}
type PermissionResponseInput interface {
	pulumi.Input

	ToPermissionResponseOutput() PermissionResponseOutput
	ToPermissionResponseOutputWithContext(context.Context) PermissionResponseOutput
}

// Role definition permissions.
type PermissionResponseArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Allowed Data actions.
	DataActions pulumi.StringArrayInput `pulumi:"dataActions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions pulumi.StringArrayInput `pulumi:"notDataActions"`
}

func (PermissionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (i PermissionResponseArgs) ToPermissionResponseOutput() PermissionResponseOutput {
	return i.ToPermissionResponseOutputWithContext(context.Background())
}

func (i PermissionResponseArgs) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionResponseOutput)
}

// PermissionResponseArrayInput is an input type that accepts PermissionResponseArray and PermissionResponseArrayOutput values.
// You can construct a concrete instance of `PermissionResponseArrayInput` via:
//
//          PermissionResponseArray{ PermissionResponseArgs{...} }
type PermissionResponseArrayInput interface {
	pulumi.Input

	ToPermissionResponseArrayOutput() PermissionResponseArrayOutput
	ToPermissionResponseArrayOutputWithContext(context.Context) PermissionResponseArrayOutput
}

type PermissionResponseArray []PermissionResponseInput

func (PermissionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (i PermissionResponseArray) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return i.ToPermissionResponseArrayOutputWithContext(context.Background())
}

func (i PermissionResponseArray) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionResponseArrayOutput)
}

// Role definition permissions.
type PermissionResponseOutput struct{ *pulumi.OutputState }

func (PermissionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseOutput) ToPermissionResponseOutput() PermissionResponseOutput {
	return o
}

func (o PermissionResponseOutput) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return o
}

// Allowed actions.
func (o PermissionResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Allowed Data actions.
func (o PermissionResponseOutput) DataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.DataActions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionResponseOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// Denied Data actions.
func (o PermissionResponseOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.NotDataActions }).(pulumi.StringArrayOutput)
}

type PermissionResponseArrayOutput struct{ *pulumi.OutputState }

func (PermissionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) Index(i pulumi.IntInput) PermissionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionResponse {
		return vs[0].([]PermissionResponse)[vs[1].(int)]
	}).(PermissionResponseOutput)
}

// Deny assignment principal.
type Principal struct {
	// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Id *string `pulumi:"id"`
	// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Type *string `pulumi:"type"`
}

// PrincipalInput is an input type that accepts PrincipalArgs and PrincipalOutput values.
// You can construct a concrete instance of `PrincipalInput` via:
//
//          PrincipalArgs{...}
type PrincipalInput interface {
	pulumi.Input

	ToPrincipalOutput() PrincipalOutput
	ToPrincipalOutputWithContext(context.Context) PrincipalOutput
}

// Deny assignment principal.
type PrincipalArgs struct {
	// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Principal)(nil)).Elem()
}

func (i PrincipalArgs) ToPrincipalOutput() PrincipalOutput {
	return i.ToPrincipalOutputWithContext(context.Background())
}

func (i PrincipalArgs) ToPrincipalOutputWithContext(ctx context.Context) PrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalOutput)
}

// PrincipalArrayInput is an input type that accepts PrincipalArray and PrincipalArrayOutput values.
// You can construct a concrete instance of `PrincipalArrayInput` via:
//
//          PrincipalArray{ PrincipalArgs{...} }
type PrincipalArrayInput interface {
	pulumi.Input

	ToPrincipalArrayOutput() PrincipalArrayOutput
	ToPrincipalArrayOutputWithContext(context.Context) PrincipalArrayOutput
}

type PrincipalArray []PrincipalInput

func (PrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Principal)(nil)).Elem()
}

func (i PrincipalArray) ToPrincipalArrayOutput() PrincipalArrayOutput {
	return i.ToPrincipalArrayOutputWithContext(context.Background())
}

func (i PrincipalArray) ToPrincipalArrayOutputWithContext(ctx context.Context) PrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalArrayOutput)
}

// Deny assignment principal.
type PrincipalOutput struct{ *pulumi.OutputState }

func (PrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Principal)(nil)).Elem()
}

func (o PrincipalOutput) ToPrincipalOutput() PrincipalOutput {
	return o
}

func (o PrincipalOutput) ToPrincipalOutputWithContext(ctx context.Context) PrincipalOutput {
	return o
}

// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
func (o PrincipalOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Principal) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
func (o PrincipalOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Principal) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PrincipalArrayOutput struct{ *pulumi.OutputState }

func (PrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Principal)(nil)).Elem()
}

func (o PrincipalArrayOutput) ToPrincipalArrayOutput() PrincipalArrayOutput {
	return o
}

func (o PrincipalArrayOutput) ToPrincipalArrayOutputWithContext(ctx context.Context) PrincipalArrayOutput {
	return o
}

func (o PrincipalArrayOutput) Index(i pulumi.IntInput) PrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Principal {
		return vs[0].([]Principal)[vs[1].(int)]
	}).(PrincipalOutput)
}

// Deny assignment principal.
type PrincipalResponse struct {
	// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Id *string `pulumi:"id"`
	// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Type *string `pulumi:"type"`
}

// PrincipalResponseInput is an input type that accepts PrincipalResponseArgs and PrincipalResponseOutput values.
// You can construct a concrete instance of `PrincipalResponseInput` via:
//
//          PrincipalResponseArgs{...}
type PrincipalResponseInput interface {
	pulumi.Input

	ToPrincipalResponseOutput() PrincipalResponseOutput
	ToPrincipalResponseOutputWithContext(context.Context) PrincipalResponseOutput
}

// Deny assignment principal.
type PrincipalResponseArgs struct {
	// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PrincipalResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalResponse)(nil)).Elem()
}

func (i PrincipalResponseArgs) ToPrincipalResponseOutput() PrincipalResponseOutput {
	return i.ToPrincipalResponseOutputWithContext(context.Background())
}

func (i PrincipalResponseArgs) ToPrincipalResponseOutputWithContext(ctx context.Context) PrincipalResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalResponseOutput)
}

// PrincipalResponseArrayInput is an input type that accepts PrincipalResponseArray and PrincipalResponseArrayOutput values.
// You can construct a concrete instance of `PrincipalResponseArrayInput` via:
//
//          PrincipalResponseArray{ PrincipalResponseArgs{...} }
type PrincipalResponseArrayInput interface {
	pulumi.Input

	ToPrincipalResponseArrayOutput() PrincipalResponseArrayOutput
	ToPrincipalResponseArrayOutputWithContext(context.Context) PrincipalResponseArrayOutput
}

type PrincipalResponseArray []PrincipalResponseInput

func (PrincipalResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrincipalResponse)(nil)).Elem()
}

func (i PrincipalResponseArray) ToPrincipalResponseArrayOutput() PrincipalResponseArrayOutput {
	return i.ToPrincipalResponseArrayOutputWithContext(context.Background())
}

func (i PrincipalResponseArray) ToPrincipalResponseArrayOutputWithContext(ctx context.Context) PrincipalResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalResponseArrayOutput)
}

// Deny assignment principal.
type PrincipalResponseOutput struct{ *pulumi.OutputState }

func (PrincipalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalResponse)(nil)).Elem()
}

func (o PrincipalResponseOutput) ToPrincipalResponseOutput() PrincipalResponseOutput {
	return o
}

func (o PrincipalResponseOutput) ToPrincipalResponseOutputWithContext(ctx context.Context) PrincipalResponseOutput {
	return o
}

// Object ID of the Azure AD principal (user, group, or service principal) to which the deny assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
func (o PrincipalResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of object represented by principal id (user, group, or service principal). An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all users, groups and service principals.
func (o PrincipalResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PrincipalResponseArrayOutput struct{ *pulumi.OutputState }

func (PrincipalResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrincipalResponse)(nil)).Elem()
}

func (o PrincipalResponseArrayOutput) ToPrincipalResponseArrayOutput() PrincipalResponseArrayOutput {
	return o
}

func (o PrincipalResponseArrayOutput) ToPrincipalResponseArrayOutputWithContext(ctx context.Context) PrincipalResponseArrayOutput {
	return o
}

func (o PrincipalResponseArrayOutput) Index(i pulumi.IntInput) PrincipalResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrincipalResponse {
		return vs[0].([]PrincipalResponse)[vs[1].(int)]
	}).(PrincipalResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionResponseOutput{})
	pulumi.RegisterOutputType(PermissionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrincipalOutput{})
	pulumi.RegisterOutputType(PrincipalArrayOutput{})
	pulumi.RegisterOutputType(PrincipalResponseOutput{})
	pulumi.RegisterOutputType(PrincipalResponseArrayOutput{})
}
