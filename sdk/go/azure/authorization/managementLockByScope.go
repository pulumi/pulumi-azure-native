// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The lock information.
// API Version: 2016-09-01.
type ManagementLockByScope struct {
	pulumi.CustomResourceState

	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringOutput `pulumi:"level"`
	// The name of the lock.
	Name pulumi.StringOutput `pulumi:"name"`
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The owners of the lock.
	Owners ManagementLockOwnerResponseArrayOutput `pulumi:"owners"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagementLockByScope registers a new resource with the given unique name, arguments, and options.
func NewManagementLockByScope(ctx *pulumi.Context,
	name string, args *ManagementLockByScopeArgs, opts ...pulumi.ResourceOption) (*ManagementLockByScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Level == nil {
		return nil, errors.New("invalid value for required argument 'Level'")
	}
	if args.LockName == nil {
		return nil, errors.New("invalid value for required argument 'LockName'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:authorization/latest:ManagementLockByScope"),
		},
		{
			Type: pulumi.String("azure-nextgen:authorization/v20160901:ManagementLockByScope"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagementLockByScope
	err := ctx.RegisterResource("azure-nextgen:authorization:ManagementLockByScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementLockByScope gets an existing ManagementLockByScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementLockByScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementLockByScopeState, opts ...pulumi.ResourceOption) (*ManagementLockByScope, error) {
	var resource ManagementLockByScope
	err := ctx.ReadResource("azure-nextgen:authorization:ManagementLockByScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementLockByScope resources.
type managementLockByScopeState struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level *string `pulumi:"level"`
	// The name of the lock.
	Name *string `pulumi:"name"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwnerResponse `pulumi:"owners"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type *string `pulumi:"type"`
}

type ManagementLockByScopeState struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringPtrInput
	// The name of the lock.
	Name pulumi.StringPtrInput
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput
	// The owners of the lock.
	Owners ManagementLockOwnerResponseArrayInput
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringPtrInput
}

func (ManagementLockByScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockByScopeState)(nil)).Elem()
}

type managementLockByScopeArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level string `pulumi:"level"`
	// The name of lock.
	LockName string `pulumi:"lockName"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwner `pulumi:"owners"`
	// The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a ManagementLockByScope resource.
type ManagementLockByScopeArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringInput
	// The name of lock.
	LockName pulumi.StringInput
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput
	// The owners of the lock.
	Owners ManagementLockOwnerArrayInput
	// The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources.
	Scope pulumi.StringInput
}

func (ManagementLockByScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementLockByScopeArgs)(nil)).Elem()
}

type ManagementLockByScopeInput interface {
	pulumi.Input

	ToManagementLockByScopeOutput() ManagementLockByScopeOutput
	ToManagementLockByScopeOutputWithContext(ctx context.Context) ManagementLockByScopeOutput
}

func (*ManagementLockByScope) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockByScope)(nil))
}

func (i *ManagementLockByScope) ToManagementLockByScopeOutput() ManagementLockByScopeOutput {
	return i.ToManagementLockByScopeOutputWithContext(context.Background())
}

func (i *ManagementLockByScope) ToManagementLockByScopeOutputWithContext(ctx context.Context) ManagementLockByScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockByScopeOutput)
}

type ManagementLockByScopeOutput struct {
	*pulumi.OutputState
}

func (ManagementLockByScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockByScope)(nil))
}

func (o ManagementLockByScopeOutput) ToManagementLockByScopeOutput() ManagementLockByScopeOutput {
	return o
}

func (o ManagementLockByScopeOutput) ToManagementLockByScopeOutputWithContext(ctx context.Context) ManagementLockByScopeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ManagementLockByScopeOutput{})
}
