// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Access Review Schedule Definition.
// API Version: 2021-12-01-preview.
func LookupScopeAccessReviewScheduleDefinitionById(ctx *pulumi.Context, args *LookupScopeAccessReviewScheduleDefinitionByIdArgs, opts ...pulumi.InvokeOption) (*LookupScopeAccessReviewScheduleDefinitionByIdResult, error) {
	var rv LookupScopeAccessReviewScheduleDefinitionByIdResult
	err := ctx.Invoke("azure-native:authorization:getScopeAccessReviewScheduleDefinitionById", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScopeAccessReviewScheduleDefinitionByIdArgs struct {
	// The id of the access review schedule definition.
	ScheduleDefinitionId string `pulumi:"scheduleDefinitionId"`
	// The scope of the resource.
	Scope string `pulumi:"scope"`
}

// Access Review Schedule Definition.
type LookupScopeAccessReviewScheduleDefinitionByIdResult struct {
	// The role assignment state eligible/active to review
	AssignmentState string `pulumi:"assignmentState"`
	// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
	AutoApplyDecisionsEnabled *bool `pulumi:"autoApplyDecisionsEnabled"`
	// This is the collection of backup reviewers.
	BackupReviewers []AccessReviewReviewerResponse `pulumi:"backupReviewers"`
	// This specifies the behavior for the autoReview feature when an access review completes.
	DefaultDecision *string `pulumi:"defaultDecision"`
	// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
	DefaultDecisionEnabled *bool `pulumi:"defaultDecisionEnabled"`
	// The description provided by the access review creator and visible to admins.
	DescriptionForAdmins *string `pulumi:"descriptionForAdmins"`
	// The description provided by the access review creator to be shown to reviewers.
	DescriptionForReviewers *string `pulumi:"descriptionForReviewers"`
	// The display name for the schedule definition.
	DisplayName *string `pulumi:"displayName"`
	// The DateTime when the review is scheduled to end. Required if type is endDate
	EndDate *string `pulumi:"endDate"`
	// This is used to indicate the resource id(s) to exclude
	ExcludeResourceId *string `pulumi:"excludeResourceId"`
	// This is used to indicate the role definition id(s) to exclude
	ExcludeRoleDefinitionId *string `pulumi:"excludeRoleDefinitionId"`
	// Flag to indicate whether to expand nested memberships or not.
	ExpandNestedMemberships *bool `pulumi:"expandNestedMemberships"`
	// The access review schedule definition id.
	Id string `pulumi:"id"`
	// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	InactiveDuration *string `pulumi:"inactiveDuration"`
	// Flag to indicate whether to expand nested memberships or not.
	IncludeAccessBelowResource *bool `pulumi:"includeAccessBelowResource"`
	// Flag to indicate whether to expand nested memberships or not.
	IncludeInheritedAccess *bool `pulumi:"includeInheritedAccess"`
	// The duration in days for an instance.
	InstanceDurationInDays *int `pulumi:"instanceDurationInDays"`
	// This is the collection of instances returned when one does an expand on it.
	Instances []AccessReviewInstanceResponse `pulumi:"instances"`
	// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
	Interval *int `pulumi:"interval"`
	// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
	JustificationRequiredOnApproval *bool `pulumi:"justificationRequiredOnApproval"`
	// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
	MailNotificationsEnabled *bool `pulumi:"mailNotificationsEnabled"`
	// The access review schedule definition unique id.
	Name string `pulumi:"name"`
	// The number of times to repeat the access review. Required and must be positive if type is numbered.
	NumberOfOccurrences *int `pulumi:"numberOfOccurrences"`
	// The identity id
	PrincipalId string `pulumi:"principalId"`
	// The identity display name
	PrincipalName string `pulumi:"principalName"`
	// The identity type user/servicePrincipal to review
	PrincipalType string `pulumi:"principalType"`
	// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	RecommendationLookBackDuration *string `pulumi:"recommendationLookBackDuration"`
	// Flag to indicate whether showing recommendations to reviewers is enabled.
	RecommendationsEnabled *bool `pulumi:"recommendationsEnabled"`
	// Flag to indicate whether sending reminder emails to reviewers are enabled.
	ReminderNotificationsEnabled *bool `pulumi:"reminderNotificationsEnabled"`
	// ResourceId in which this review is getting created
	ResourceId string `pulumi:"resourceId"`
	// This is the collection of reviewers.
	Reviewers []AccessReviewReviewerResponse `pulumi:"reviewers"`
	// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
	ReviewersType string `pulumi:"reviewersType"`
	// This is used to indicate the role being reviewed
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
	// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
	StartDate *string `pulumi:"startDate"`
	// This read-only field specifies the status of an accessReview.
	Status string `pulumi:"status"`
	// The resource type.
	Type string `pulumi:"type"`
	// The user principal name(if valid)
	UserPrincipalName string `pulumi:"userPrincipalName"`
}

func LookupScopeAccessReviewScheduleDefinitionByIdOutput(ctx *pulumi.Context, args LookupScopeAccessReviewScheduleDefinitionByIdOutputArgs, opts ...pulumi.InvokeOption) LookupScopeAccessReviewScheduleDefinitionByIdResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScopeAccessReviewScheduleDefinitionByIdResult, error) {
			args := v.(LookupScopeAccessReviewScheduleDefinitionByIdArgs)
			r, err := LookupScopeAccessReviewScheduleDefinitionById(ctx, &args, opts...)
			var s LookupScopeAccessReviewScheduleDefinitionByIdResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScopeAccessReviewScheduleDefinitionByIdResultOutput)
}

type LookupScopeAccessReviewScheduleDefinitionByIdOutputArgs struct {
	// The id of the access review schedule definition.
	ScheduleDefinitionId pulumi.StringInput `pulumi:"scheduleDefinitionId"`
	// The scope of the resource.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupScopeAccessReviewScheduleDefinitionByIdOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeAccessReviewScheduleDefinitionByIdArgs)(nil)).Elem()
}

// Access Review Schedule Definition.
type LookupScopeAccessReviewScheduleDefinitionByIdResultOutput struct{ *pulumi.OutputState }

func (LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeAccessReviewScheduleDefinitionByIdResult)(nil)).Elem()
}

func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ToLookupScopeAccessReviewScheduleDefinitionByIdResultOutput() LookupScopeAccessReviewScheduleDefinitionByIdResultOutput {
	return o
}

func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ToLookupScopeAccessReviewScheduleDefinitionByIdResultOutputWithContext(ctx context.Context) LookupScopeAccessReviewScheduleDefinitionByIdResultOutput {
	return o
}

// The role assignment state eligible/active to review
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) AssignmentState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.AssignmentState }).(pulumi.StringOutput)
}

// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) AutoApplyDecisionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.AutoApplyDecisionsEnabled }).(pulumi.BoolPtrOutput)
}

// This is the collection of backup reviewers.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) BackupReviewers() AccessReviewReviewerResponseArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) []AccessReviewReviewerResponse {
		return v.BackupReviewers
	}).(AccessReviewReviewerResponseArrayOutput)
}

// This specifies the behavior for the autoReview feature when an access review completes.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DefaultDecision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.DefaultDecision }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DefaultDecisionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.DefaultDecisionEnabled }).(pulumi.BoolPtrOutput)
}

// The description provided by the access review creator and visible to admins.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DescriptionForAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.DescriptionForAdmins }).(pulumi.StringPtrOutput)
}

// The description provided by the access review creator to be shown to reviewers.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DescriptionForReviewers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.DescriptionForReviewers }).(pulumi.StringPtrOutput)
}

// The display name for the schedule definition.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The DateTime when the review is scheduled to end. Required if type is endDate
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// This is used to indicate the resource id(s) to exclude
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ExcludeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.ExcludeResourceId }).(pulumi.StringPtrOutput)
}

// This is used to indicate the role definition id(s) to exclude
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ExcludeRoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.ExcludeRoleDefinitionId }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ExpandNestedMemberships() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.ExpandNestedMemberships }).(pulumi.BoolPtrOutput)
}

// The access review schedule definition id.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.Id }).(pulumi.StringOutput)
}

// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) InactiveDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.InactiveDuration }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) IncludeAccessBelowResource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.IncludeAccessBelowResource }).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) IncludeInheritedAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.IncludeInheritedAccess }).(pulumi.BoolPtrOutput)
}

// The duration in days for an instance.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) InstanceDurationInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *int { return v.InstanceDurationInDays }).(pulumi.IntPtrOutput)
}

// This is the collection of instances returned when one does an expand on it.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Instances() AccessReviewInstanceResponseArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) []AccessReviewInstanceResponse {
		return v.Instances
	}).(AccessReviewInstanceResponseArrayOutput)
}

// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) JustificationRequiredOnApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool {
		return v.JustificationRequiredOnApproval
	}).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) MailNotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.MailNotificationsEnabled }).(pulumi.BoolPtrOutput)
}

// The access review schedule definition unique id.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of times to repeat the access review. Required and must be positive if type is numbered.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) NumberOfOccurrences() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *int { return v.NumberOfOccurrences }).(pulumi.IntPtrOutput)
}

// The identity id
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The identity display name
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) PrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalName }).(pulumi.StringOutput)
}

// The identity type user/servicePrincipal to review
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalType }).(pulumi.StringOutput)
}

// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) RecommendationLookBackDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string {
		return v.RecommendationLookBackDuration
	}).(pulumi.StringPtrOutput)
}

// Flag to indicate whether showing recommendations to reviewers is enabled.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) RecommendationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.RecommendationsEnabled }).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether sending reminder emails to reviewers are enabled.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ReminderNotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool {
		return v.ReminderNotificationsEnabled
	}).(pulumi.BoolPtrOutput)
}

// ResourceId in which this review is getting created
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.ResourceId }).(pulumi.StringOutput)
}

// This is the collection of reviewers.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Reviewers() AccessReviewReviewerResponseArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) []AccessReviewReviewerResponse {
		return v.Reviewers
	}).(AccessReviewReviewerResponseArrayOutput)
}

// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ReviewersType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.ReviewersType }).(pulumi.StringOutput)
}

// This is used to indicate the role being reviewed
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// This read-only field specifies the status of an accessReview.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.Status }).(pulumi.StringOutput)
}

// The resource type.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.Type }).(pulumi.StringOutput)
}

// The user principal name(if valid)
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) UserPrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.UserPrincipalName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScopeAccessReviewScheduleDefinitionByIdResultOutput{})
}
