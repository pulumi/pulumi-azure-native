// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Volume resource
type Volume struct {
	pulumi.CustomResourceState

	// UUID v4 or resource identifier used to identify the Backup.
	BackupId pulumi.StringPtrOutput `pulumi:"backupId"`
	// Unique Baremetal Tenant Identifier.
	BaremetalTenantId pulumi.StringOutput `pulumi:"baremetalTenantId"`
	// A unique file path for the volume. Used when creating mount targets
	CreationToken pulumi.StringOutput `pulumi:"creationToken"`
	// DataProtection type volumes include an object containing details of the replication
	DataProtection VolumePropertiesResponseDataProtectionPtrOutput `pulumi:"dataProtection"`
	// Set of export policy rules
	ExportPolicy VolumePropertiesResponseExportPolicyPtrOutput `pulumi:"exportPolicy"`
	// Unique FileSystem Identifier.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// Restoring
	IsRestoring pulumi.BoolPtrOutput `pulumi:"isRestoring"`
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled pulumi.BoolPtrOutput `pulumi:"kerberosEnabled"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// List of mount targets
	MountTargets MountTargetPropertiesResponseArrayOutput `pulumi:"mountTargets"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes pulumi.StringArrayOutput `pulumi:"protocolTypes"`
	// Azure lifecycle management
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The security style of volume, default unix, ntfs for dual protocol or CIFS protocol
	SecurityStyle pulumi.StringPtrOutput `pulumi:"securityStyle"`
	// The service level of the file system
	ServiceLevel pulumi.StringPtrOutput `pulumi:"serviceLevel"`
	// If enabled (true) the volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots (default to true).
	SnapshotDirectoryVisible pulumi.BoolPtrOutput `pulumi:"snapshotDirectoryVisible"`
	// UUID v4 or resource identifier used to identify the Snapshot.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Resource tags
	Tags            pulumi.StringMapOutput  `pulumi:"tags"`
	ThroughputMibps pulumi.Float64PtrOutput `pulumi:"throughputMibps"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
	UsageThreshold pulumi.Float64Output `pulumi:"usageThreshold"`
	// What type of volume is this
	VolumeType pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.CreationToken == nil {
		return nil, errors.New("invalid value for required argument 'CreationToken'")
	}
	if args.PoolName == nil {
		return nil, errors.New("invalid value for required argument 'PoolName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.UsageThreshold == nil {
		return nil, errors.New("invalid value for required argument 'UsageThreshold'")
	}
	if args.KerberosEnabled == nil {
		args.KerberosEnabled = pulumi.BoolPtr(false)
	}
	if args.SecurityStyle == nil {
		args.SecurityStyle = pulumi.StringPtr("unix")
	}
	if args.ServiceLevel == nil {
		args.ServiceLevel = pulumi.StringPtr("Premium")
	}
	if args.SnapshotDirectoryVisible == nil {
		args.SnapshotDirectoryVisible = pulumi.BoolPtr(true)
	}
	if args.ThroughputMibps == nil {
		args.ThroughputMibps = pulumi.Float64Ptr(0)
	}
	if args.UsageThreshold == nil {
		args.UsageThreshold = pulumi.Float64(107374182400)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:netapp:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/latest:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20170815:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20190501:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20190601:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20190701:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20190801:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20191001:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20191101:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20200201:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20200301:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20200501:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20200601:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20200701:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20200901:Volume"),
		},
		{
			Type: pulumi.String("azure-nextgen:netapp/v20201101:Volume"),
		},
	})
	opts = append(opts, aliases)
	var resource Volume
	err := ctx.RegisterResource("azure-nextgen:netapp/v20200801:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("azure-nextgen:netapp/v20200801:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// UUID v4 or resource identifier used to identify the Backup.
	BackupId *string `pulumi:"backupId"`
	// Unique Baremetal Tenant Identifier.
	BaremetalTenantId *string `pulumi:"baremetalTenantId"`
	// A unique file path for the volume. Used when creating mount targets
	CreationToken *string `pulumi:"creationToken"`
	// DataProtection type volumes include an object containing details of the replication
	DataProtection *VolumePropertiesResponseDataProtection `pulumi:"dataProtection"`
	// Set of export policy rules
	ExportPolicy *VolumePropertiesResponseExportPolicy `pulumi:"exportPolicy"`
	// Unique FileSystem Identifier.
	FileSystemId *string `pulumi:"fileSystemId"`
	// Restoring
	IsRestoring *bool `pulumi:"isRestoring"`
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// Resource location
	Location *string `pulumi:"location"`
	// List of mount targets
	MountTargets []MountTargetPropertiesResponse `pulumi:"mountTargets"`
	// Resource name
	Name *string `pulumi:"name"`
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// Azure lifecycle management
	ProvisioningState *string `pulumi:"provisioningState"`
	// The security style of volume, default unix, ntfs for dual protocol or CIFS protocol
	SecurityStyle *string `pulumi:"securityStyle"`
	// The service level of the file system
	ServiceLevel *string `pulumi:"serviceLevel"`
	// If enabled (true) the volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots (default to true).
	SnapshotDirectoryVisible *bool `pulumi:"snapshotDirectoryVisible"`
	// UUID v4 or resource identifier used to identify the Snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId *string `pulumi:"subnetId"`
	// Resource tags
	Tags            map[string]string `pulumi:"tags"`
	ThroughputMibps *float64          `pulumi:"throughputMibps"`
	// Resource type
	Type *string `pulumi:"type"`
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
	UsageThreshold *float64 `pulumi:"usageThreshold"`
	// What type of volume is this
	VolumeType *string `pulumi:"volumeType"`
}

type VolumeState struct {
	// UUID v4 or resource identifier used to identify the Backup.
	BackupId pulumi.StringPtrInput
	// Unique Baremetal Tenant Identifier.
	BaremetalTenantId pulumi.StringPtrInput
	// A unique file path for the volume. Used when creating mount targets
	CreationToken pulumi.StringPtrInput
	// DataProtection type volumes include an object containing details of the replication
	DataProtection VolumePropertiesResponseDataProtectionPtrInput
	// Set of export policy rules
	ExportPolicy VolumePropertiesResponseExportPolicyPtrInput
	// Unique FileSystem Identifier.
	FileSystemId pulumi.StringPtrInput
	// Restoring
	IsRestoring pulumi.BoolPtrInput
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled pulumi.BoolPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// List of mount targets
	MountTargets MountTargetPropertiesResponseArrayInput
	// Resource name
	Name pulumi.StringPtrInput
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes pulumi.StringArrayInput
	// Azure lifecycle management
	ProvisioningState pulumi.StringPtrInput
	// The security style of volume, default unix, ntfs for dual protocol or CIFS protocol
	SecurityStyle pulumi.StringPtrInput
	// The service level of the file system
	ServiceLevel pulumi.StringPtrInput
	// If enabled (true) the volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots (default to true).
	SnapshotDirectoryVisible pulumi.BoolPtrInput
	// UUID v4 or resource identifier used to identify the Snapshot.
	SnapshotId pulumi.StringPtrInput
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId pulumi.StringPtrInput
	// Resource tags
	Tags            pulumi.StringMapInput
	ThroughputMibps pulumi.Float64PtrInput
	// Resource type
	Type pulumi.StringPtrInput
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
	UsageThreshold pulumi.Float64PtrInput
	// What type of volume is this
	VolumeType pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// The name of the NetApp account
	AccountName string `pulumi:"accountName"`
	// UUID v4 or resource identifier used to identify the Backup.
	BackupId *string `pulumi:"backupId"`
	// A unique file path for the volume. Used when creating mount targets
	CreationToken string `pulumi:"creationToken"`
	// DataProtection type volumes include an object containing details of the replication
	DataProtection *VolumePropertiesDataProtection `pulumi:"dataProtection"`
	// Set of export policy rules
	ExportPolicy *VolumePropertiesExportPolicy `pulumi:"exportPolicy"`
	// Restoring
	IsRestoring *bool `pulumi:"isRestoring"`
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// Resource location
	Location *string `pulumi:"location"`
	// The name of the capacity pool
	PoolName string `pulumi:"poolName"`
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The security style of volume, default unix, ntfs for dual protocol or CIFS protocol
	SecurityStyle *string `pulumi:"securityStyle"`
	// The service level of the file system
	ServiceLevel *string `pulumi:"serviceLevel"`
	// If enabled (true) the volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots (default to true).
	SnapshotDirectoryVisible *bool `pulumi:"snapshotDirectoryVisible"`
	// UUID v4 or resource identifier used to identify the Snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId string `pulumi:"subnetId"`
	// Resource tags
	Tags            map[string]string `pulumi:"tags"`
	ThroughputMibps *float64          `pulumi:"throughputMibps"`
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
	UsageThreshold float64 `pulumi:"usageThreshold"`
	// The name of the volume
	VolumeName *string `pulumi:"volumeName"`
	// What type of volume is this
	VolumeType *string `pulumi:"volumeType"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The name of the NetApp account
	AccountName pulumi.StringInput
	// UUID v4 or resource identifier used to identify the Backup.
	BackupId pulumi.StringPtrInput
	// A unique file path for the volume. Used when creating mount targets
	CreationToken pulumi.StringInput
	// DataProtection type volumes include an object containing details of the replication
	DataProtection VolumePropertiesDataProtectionPtrInput
	// Set of export policy rules
	ExportPolicy VolumePropertiesExportPolicyPtrInput
	// Restoring
	IsRestoring pulumi.BoolPtrInput
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled pulumi.BoolPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// The name of the capacity pool
	PoolName pulumi.StringInput
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes pulumi.StringArrayInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The security style of volume, default unix, ntfs for dual protocol or CIFS protocol
	SecurityStyle pulumi.StringPtrInput
	// The service level of the file system
	ServiceLevel pulumi.StringPtrInput
	// If enabled (true) the volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots (default to true).
	SnapshotDirectoryVisible pulumi.BoolPtrInput
	// UUID v4 or resource identifier used to identify the Snapshot.
	SnapshotId pulumi.StringPtrInput
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId pulumi.StringInput
	// Resource tags
	Tags            pulumi.StringMapInput
	ThroughputMibps pulumi.Float64PtrInput
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
	UsageThreshold pulumi.Float64Input
	// The name of the volume
	VolumeName pulumi.StringPtrInput
	// What type of volume is this
	VolumeType pulumi.StringPtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil))
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

type VolumeOutput struct {
	*pulumi.OutputState
}

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil))
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VolumeOutput{})
}
