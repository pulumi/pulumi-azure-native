// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Snapshot policy information
//
// Deprecated: Version v20200801 will be removed in the next major version of the provider. Upgrade to version v20201201 or later.
type SnapshotPolicy struct {
	pulumi.CustomResourceState

	// Schedule for daily snapshots
	DailySchedule DailyScheduleResponsePtrOutput `pulumi:"dailySchedule"`
	// The property to decide policy is enabled or not
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Schedule for hourly snapshots
	HourlySchedule HourlyScheduleResponsePtrOutput `pulumi:"hourlySchedule"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Schedule for monthly snapshots
	MonthlySchedule MonthlyScheduleResponsePtrOutput `pulumi:"monthlySchedule"`
	// Snapshot policy name
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure lifecycle management
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// Schedule for weekly snapshots
	WeeklySchedule WeeklyScheduleResponsePtrOutput `pulumi:"weeklySchedule"`
}

// NewSnapshotPolicy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotPolicy(ctx *pulumi.Context,
	name string, args *SnapshotPolicyArgs, opts ...pulumi.ResourceOption) (*SnapshotPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:netapp:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200501:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200601:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200701:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200901:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20201101:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20201201:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210201:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210401:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210401preview:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210601:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210801:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20211001:SnapshotPolicy"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20220101:SnapshotPolicy"),
		},
	})
	opts = append(opts, aliases)
	var resource SnapshotPolicy
	err := ctx.RegisterResource("azure-native:netapp/v20200801:SnapshotPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotPolicy gets an existing SnapshotPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotPolicyState, opts ...pulumi.ResourceOption) (*SnapshotPolicy, error) {
	var resource SnapshotPolicy
	err := ctx.ReadResource("azure-native:netapp/v20200801:SnapshotPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotPolicy resources.
type snapshotPolicyState struct {
}

type SnapshotPolicyState struct {
}

func (SnapshotPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotPolicyState)(nil)).Elem()
}

type snapshotPolicyArgs struct {
	// The name of the NetApp account
	AccountName string `pulumi:"accountName"`
	// Schedule for daily snapshots
	DailySchedule *DailySchedule `pulumi:"dailySchedule"`
	// The property to decide policy is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// Schedule for hourly snapshots
	HourlySchedule *HourlySchedule `pulumi:"hourlySchedule"`
	// Resource location
	Location *string `pulumi:"location"`
	// Schedule for monthly snapshots
	MonthlySchedule *MonthlySchedule `pulumi:"monthlySchedule"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the snapshot policy
	SnapshotPolicyName *string `pulumi:"snapshotPolicyName"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Schedule for weekly snapshots
	WeeklySchedule *WeeklySchedule `pulumi:"weeklySchedule"`
}

// The set of arguments for constructing a SnapshotPolicy resource.
type SnapshotPolicyArgs struct {
	// The name of the NetApp account
	AccountName pulumi.StringInput
	// Schedule for daily snapshots
	DailySchedule DailySchedulePtrInput
	// The property to decide policy is enabled or not
	Enabled pulumi.BoolPtrInput
	// Schedule for hourly snapshots
	HourlySchedule HourlySchedulePtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// Schedule for monthly snapshots
	MonthlySchedule MonthlySchedulePtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the snapshot policy
	SnapshotPolicyName pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Schedule for weekly snapshots
	WeeklySchedule WeeklySchedulePtrInput
}

func (SnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotPolicyArgs)(nil)).Elem()
}

type SnapshotPolicyInput interface {
	pulumi.Input

	ToSnapshotPolicyOutput() SnapshotPolicyOutput
	ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput
}

func (*SnapshotPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicy)(nil)).Elem()
}

func (i *SnapshotPolicy) ToSnapshotPolicyOutput() SnapshotPolicyOutput {
	return i.ToSnapshotPolicyOutputWithContext(context.Background())
}

func (i *SnapshotPolicy) ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyOutput)
}

type SnapshotPolicyOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicy)(nil)).Elem()
}

func (o SnapshotPolicyOutput) ToSnapshotPolicyOutput() SnapshotPolicyOutput {
	return o
}

func (o SnapshotPolicyOutput) ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput {
	return o
}

// Schedule for daily snapshots
func (o SnapshotPolicyOutput) DailySchedule() DailyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SnapshotPolicy) DailyScheduleResponsePtrOutput { return v.DailySchedule }).(DailyScheduleResponsePtrOutput)
}

// The property to decide policy is enabled or not
func (o SnapshotPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Schedule for hourly snapshots
func (o SnapshotPolicyOutput) HourlySchedule() HourlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SnapshotPolicy) HourlyScheduleResponsePtrOutput { return v.HourlySchedule }).(HourlyScheduleResponsePtrOutput)
}

// Resource location
func (o SnapshotPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Schedule for monthly snapshots
func (o SnapshotPolicyOutput) MonthlySchedule() MonthlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SnapshotPolicy) MonthlyScheduleResponsePtrOutput { return v.MonthlySchedule }).(MonthlyScheduleResponsePtrOutput)
}

// Snapshot policy name
func (o SnapshotPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure lifecycle management
func (o SnapshotPolicyOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource tags
func (o SnapshotPolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o SnapshotPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Schedule for weekly snapshots
func (o SnapshotPolicyOutput) WeeklySchedule() WeeklyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SnapshotPolicy) WeeklyScheduleResponsePtrOutput { return v.WeeklySchedule }).(WeeklyScheduleResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SnapshotPolicyOutput{})
}
