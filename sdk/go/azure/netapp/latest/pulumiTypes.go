// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Active Directory
type ActiveDirectory struct {
	// Id of the Active Directory
	ActiveDirectoryId *string `pulumi:"activeDirectoryId"`
	// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
	AdName *string `pulumi:"adName"`
	// If enabled, AES encryption will be enabled for SMB communication.
	AesEncryption *bool `pulumi:"aesEncryption"`
	// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
	BackupOperators []string `pulumi:"backupOperators"`
	// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
	Dns *string `pulumi:"dns"`
	// Name of the Active Directory domain
	Domain *string `pulumi:"domain"`
	// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
	KdcIP *string `pulumi:"kdcIP"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning *bool `pulumi:"ldapSigning"`
	// The Organizational Unit (OU) within the Windows Active Directory
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// Plain text password of Active Directory domain administrator, value is masked in the response
	Password *string `pulumi:"password"`
	// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
	ServerRootCACertificate *string `pulumi:"serverRootCACertificate"`
	// The Active Directory site the service will limit Domain Controller discovery to
	Site *string `pulumi:"site"`
	// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
	SmbServerName *string `pulumi:"smbServerName"`
	// Username of Active Directory domain administrator
	Username *string `pulumi:"username"`
}

// ActiveDirectoryInput is an input type that accepts ActiveDirectoryArgs and ActiveDirectoryOutput values.
// You can construct a concrete instance of `ActiveDirectoryInput` via:
//
//          ActiveDirectoryArgs{...}
type ActiveDirectoryInput interface {
	pulumi.Input

	ToActiveDirectoryOutput() ActiveDirectoryOutput
	ToActiveDirectoryOutputWithContext(context.Context) ActiveDirectoryOutput
}

// Active Directory
type ActiveDirectoryArgs struct {
	// Id of the Active Directory
	ActiveDirectoryId pulumi.StringPtrInput `pulumi:"activeDirectoryId"`
	// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
	AdName pulumi.StringPtrInput `pulumi:"adName"`
	// If enabled, AES encryption will be enabled for SMB communication.
	AesEncryption pulumi.BoolPtrInput `pulumi:"aesEncryption"`
	// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
	BackupOperators pulumi.StringArrayInput `pulumi:"backupOperators"`
	// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// Name of the Active Directory domain
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
	KdcIP pulumi.StringPtrInput `pulumi:"kdcIP"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrInput `pulumi:"ldapSigning"`
	// The Organizational Unit (OU) within the Windows Active Directory
	OrganizationalUnit pulumi.StringPtrInput `pulumi:"organizationalUnit"`
	// Plain text password of Active Directory domain administrator, value is masked in the response
	Password pulumi.StringPtrInput `pulumi:"password"`
	// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
	ServerRootCACertificate pulumi.StringPtrInput `pulumi:"serverRootCACertificate"`
	// The Active Directory site the service will limit Domain Controller discovery to
	Site pulumi.StringPtrInput `pulumi:"site"`
	// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
	SmbServerName pulumi.StringPtrInput `pulumi:"smbServerName"`
	// Username of Active Directory domain administrator
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectory)(nil)).Elem()
}

func (i ActiveDirectoryArgs) ToActiveDirectoryOutput() ActiveDirectoryOutput {
	return i.ToActiveDirectoryOutputWithContext(context.Background())
}

func (i ActiveDirectoryArgs) ToActiveDirectoryOutputWithContext(ctx context.Context) ActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryOutput)
}

// ActiveDirectoryArrayInput is an input type that accepts ActiveDirectoryArray and ActiveDirectoryArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryArrayInput` via:
//
//          ActiveDirectoryArray{ ActiveDirectoryArgs{...} }
type ActiveDirectoryArrayInput interface {
	pulumi.Input

	ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput
	ToActiveDirectoryArrayOutputWithContext(context.Context) ActiveDirectoryArrayOutput
}

type ActiveDirectoryArray []ActiveDirectoryInput

func (ActiveDirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectory)(nil)).Elem()
}

func (i ActiveDirectoryArray) ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput {
	return i.ToActiveDirectoryArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryArray) ToActiveDirectoryArrayOutputWithContext(ctx context.Context) ActiveDirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryArrayOutput)
}

// Active Directory
type ActiveDirectoryOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectory)(nil)).Elem()
}

func (o ActiveDirectoryOutput) ToActiveDirectoryOutput() ActiveDirectoryOutput {
	return o
}

func (o ActiveDirectoryOutput) ToActiveDirectoryOutputWithContext(ctx context.Context) ActiveDirectoryOutput {
	return o
}

// Id of the Active Directory
func (o ActiveDirectoryOutput) ActiveDirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.ActiveDirectoryId }).(pulumi.StringPtrOutput)
}

// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
func (o ActiveDirectoryOutput) AdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.AdName }).(pulumi.StringPtrOutput)
}

// If enabled, AES encryption will be enabled for SMB communication.
func (o ActiveDirectoryOutput) AesEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *bool { return v.AesEncryption }).(pulumi.BoolPtrOutput)
}

// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
func (o ActiveDirectoryOutput) BackupOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveDirectory) []string { return v.BackupOperators }).(pulumi.StringArrayOutput)
}

// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
func (o ActiveDirectoryOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// Name of the Active Directory domain
func (o ActiveDirectoryOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
func (o ActiveDirectoryOutput) KdcIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.KdcIP }).(pulumi.StringPtrOutput)
}

// Specifies whether or not the LDAP traffic needs to be signed.
func (o ActiveDirectoryOutput) LdapSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *bool { return v.LdapSigning }).(pulumi.BoolPtrOutput)
}

// The Organizational Unit (OU) within the Windows Active Directory
func (o ActiveDirectoryOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// Plain text password of Active Directory domain administrator, value is masked in the response
func (o ActiveDirectoryOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
func (o ActiveDirectoryOutput) ServerRootCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.ServerRootCACertificate }).(pulumi.StringPtrOutput)
}

// The Active Directory site the service will limit Domain Controller discovery to
func (o ActiveDirectoryOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Site }).(pulumi.StringPtrOutput)
}

// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
func (o ActiveDirectoryOutput) SmbServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.SmbServerName }).(pulumi.StringPtrOutput)
}

// Username of Active Directory domain administrator
func (o ActiveDirectoryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ActiveDirectoryArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectory)(nil)).Elem()
}

func (o ActiveDirectoryArrayOutput) ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput {
	return o
}

func (o ActiveDirectoryArrayOutput) ToActiveDirectoryArrayOutputWithContext(ctx context.Context) ActiveDirectoryArrayOutput {
	return o
}

func (o ActiveDirectoryArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectory {
		return vs[0].([]ActiveDirectory)[vs[1].(int)]
	}).(ActiveDirectoryOutput)
}

// Active Directory
type ActiveDirectoryResponse struct {
	// Id of the Active Directory
	ActiveDirectoryId *string `pulumi:"activeDirectoryId"`
	// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
	AdName *string `pulumi:"adName"`
	// If enabled, AES encryption will be enabled for SMB communication.
	AesEncryption *bool `pulumi:"aesEncryption"`
	// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
	BackupOperators []string `pulumi:"backupOperators"`
	// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
	Dns *string `pulumi:"dns"`
	// Name of the Active Directory domain
	Domain *string `pulumi:"domain"`
	// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
	KdcIP *string `pulumi:"kdcIP"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning *bool `pulumi:"ldapSigning"`
	// The Organizational Unit (OU) within the Windows Active Directory
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// Plain text password of Active Directory domain administrator, value is masked in the response
	Password *string `pulumi:"password"`
	// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
	ServerRootCACertificate *string `pulumi:"serverRootCACertificate"`
	// The Active Directory site the service will limit Domain Controller discovery to
	Site *string `pulumi:"site"`
	// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
	SmbServerName *string `pulumi:"smbServerName"`
	// Status of the Active Directory
	Status string `pulumi:"status"`
	// Any details in regards to the Status of the Active Directory
	StatusDetails string `pulumi:"statusDetails"`
	// Username of Active Directory domain administrator
	Username *string `pulumi:"username"`
}

// ActiveDirectoryResponseInput is an input type that accepts ActiveDirectoryResponseArgs and ActiveDirectoryResponseOutput values.
// You can construct a concrete instance of `ActiveDirectoryResponseInput` via:
//
//          ActiveDirectoryResponseArgs{...}
type ActiveDirectoryResponseInput interface {
	pulumi.Input

	ToActiveDirectoryResponseOutput() ActiveDirectoryResponseOutput
	ToActiveDirectoryResponseOutputWithContext(context.Context) ActiveDirectoryResponseOutput
}

// Active Directory
type ActiveDirectoryResponseArgs struct {
	// Id of the Active Directory
	ActiveDirectoryId pulumi.StringPtrInput `pulumi:"activeDirectoryId"`
	// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
	AdName pulumi.StringPtrInput `pulumi:"adName"`
	// If enabled, AES encryption will be enabled for SMB communication.
	AesEncryption pulumi.BoolPtrInput `pulumi:"aesEncryption"`
	// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
	BackupOperators pulumi.StringArrayInput `pulumi:"backupOperators"`
	// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// Name of the Active Directory domain
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
	KdcIP pulumi.StringPtrInput `pulumi:"kdcIP"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrInput `pulumi:"ldapSigning"`
	// The Organizational Unit (OU) within the Windows Active Directory
	OrganizationalUnit pulumi.StringPtrInput `pulumi:"organizationalUnit"`
	// Plain text password of Active Directory domain administrator, value is masked in the response
	Password pulumi.StringPtrInput `pulumi:"password"`
	// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
	ServerRootCACertificate pulumi.StringPtrInput `pulumi:"serverRootCACertificate"`
	// The Active Directory site the service will limit Domain Controller discovery to
	Site pulumi.StringPtrInput `pulumi:"site"`
	// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
	SmbServerName pulumi.StringPtrInput `pulumi:"smbServerName"`
	// Status of the Active Directory
	Status pulumi.StringInput `pulumi:"status"`
	// Any details in regards to the Status of the Active Directory
	StatusDetails pulumi.StringInput `pulumi:"statusDetails"`
	// Username of Active Directory domain administrator
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ActiveDirectoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryResponse)(nil)).Elem()
}

func (i ActiveDirectoryResponseArgs) ToActiveDirectoryResponseOutput() ActiveDirectoryResponseOutput {
	return i.ToActiveDirectoryResponseOutputWithContext(context.Background())
}

func (i ActiveDirectoryResponseArgs) ToActiveDirectoryResponseOutputWithContext(ctx context.Context) ActiveDirectoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryResponseOutput)
}

// ActiveDirectoryResponseArrayInput is an input type that accepts ActiveDirectoryResponseArray and ActiveDirectoryResponseArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryResponseArrayInput` via:
//
//          ActiveDirectoryResponseArray{ ActiveDirectoryResponseArgs{...} }
type ActiveDirectoryResponseArrayInput interface {
	pulumi.Input

	ToActiveDirectoryResponseArrayOutput() ActiveDirectoryResponseArrayOutput
	ToActiveDirectoryResponseArrayOutputWithContext(context.Context) ActiveDirectoryResponseArrayOutput
}

type ActiveDirectoryResponseArray []ActiveDirectoryResponseInput

func (ActiveDirectoryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryResponse)(nil)).Elem()
}

func (i ActiveDirectoryResponseArray) ToActiveDirectoryResponseArrayOutput() ActiveDirectoryResponseArrayOutput {
	return i.ToActiveDirectoryResponseArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryResponseArray) ToActiveDirectoryResponseArrayOutputWithContext(ctx context.Context) ActiveDirectoryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryResponseArrayOutput)
}

// Active Directory
type ActiveDirectoryResponseOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryResponse)(nil)).Elem()
}

func (o ActiveDirectoryResponseOutput) ToActiveDirectoryResponseOutput() ActiveDirectoryResponseOutput {
	return o
}

func (o ActiveDirectoryResponseOutput) ToActiveDirectoryResponseOutputWithContext(ctx context.Context) ActiveDirectoryResponseOutput {
	return o
}

// Id of the Active Directory
func (o ActiveDirectoryResponseOutput) ActiveDirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.ActiveDirectoryId }).(pulumi.StringPtrOutput)
}

// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
func (o ActiveDirectoryResponseOutput) AdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.AdName }).(pulumi.StringPtrOutput)
}

// If enabled, AES encryption will be enabled for SMB communication.
func (o ActiveDirectoryResponseOutput) AesEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *bool { return v.AesEncryption }).(pulumi.BoolPtrOutput)
}

// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
func (o ActiveDirectoryResponseOutput) BackupOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) []string { return v.BackupOperators }).(pulumi.StringArrayOutput)
}

// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
func (o ActiveDirectoryResponseOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// Name of the Active Directory domain
func (o ActiveDirectoryResponseOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
func (o ActiveDirectoryResponseOutput) KdcIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.KdcIP }).(pulumi.StringPtrOutput)
}

// Specifies whether or not the LDAP traffic needs to be signed.
func (o ActiveDirectoryResponseOutput) LdapSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *bool { return v.LdapSigning }).(pulumi.BoolPtrOutput)
}

// The Organizational Unit (OU) within the Windows Active Directory
func (o ActiveDirectoryResponseOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// Plain text password of Active Directory domain administrator, value is masked in the response
func (o ActiveDirectoryResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
func (o ActiveDirectoryResponseOutput) ServerRootCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.ServerRootCACertificate }).(pulumi.StringPtrOutput)
}

// The Active Directory site the service will limit Domain Controller discovery to
func (o ActiveDirectoryResponseOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Site }).(pulumi.StringPtrOutput)
}

// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
func (o ActiveDirectoryResponseOutput) SmbServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.SmbServerName }).(pulumi.StringPtrOutput)
}

// Status of the Active Directory
func (o ActiveDirectoryResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Any details in regards to the Status of the Active Directory
func (o ActiveDirectoryResponseOutput) StatusDetails() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) string { return v.StatusDetails }).(pulumi.StringOutput)
}

// Username of Active Directory domain administrator
func (o ActiveDirectoryResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ActiveDirectoryResponseArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryResponse)(nil)).Elem()
}

func (o ActiveDirectoryResponseArrayOutput) ToActiveDirectoryResponseArrayOutput() ActiveDirectoryResponseArrayOutput {
	return o
}

func (o ActiveDirectoryResponseArrayOutput) ToActiveDirectoryResponseArrayOutputWithContext(ctx context.Context) ActiveDirectoryResponseArrayOutput {
	return o
}

func (o ActiveDirectoryResponseArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectoryResponse {
		return vs[0].([]ActiveDirectoryResponse)[vs[1].(int)]
	}).(ActiveDirectoryResponseOutput)
}

// Daily Schedule properties
type DailySchedule struct {
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour *int `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute *int `pulumi:"minute"`
	// Daily snapshot count to keep
	SnapshotsToKeep *int `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes *int `pulumi:"usedBytes"`
}

// DailyScheduleInput is an input type that accepts DailyScheduleArgs and DailyScheduleOutput values.
// You can construct a concrete instance of `DailyScheduleInput` via:
//
//          DailyScheduleArgs{...}
type DailyScheduleInput interface {
	pulumi.Input

	ToDailyScheduleOutput() DailyScheduleOutput
	ToDailyScheduleOutputWithContext(context.Context) DailyScheduleOutput
}

// Daily Schedule properties
type DailyScheduleArgs struct {
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// Daily snapshot count to keep
	SnapshotsToKeep pulumi.IntPtrInput `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes pulumi.IntPtrInput `pulumi:"usedBytes"`
}

func (DailyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailySchedule)(nil)).Elem()
}

func (i DailyScheduleArgs) ToDailyScheduleOutput() DailyScheduleOutput {
	return i.ToDailyScheduleOutputWithContext(context.Background())
}

func (i DailyScheduleArgs) ToDailyScheduleOutputWithContext(ctx context.Context) DailyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleOutput)
}

func (i DailyScheduleArgs) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return i.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (i DailyScheduleArgs) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleOutput).ToDailySchedulePtrOutputWithContext(ctx)
}

// DailySchedulePtrInput is an input type that accepts DailyScheduleArgs, DailySchedulePtr and DailySchedulePtrOutput values.
// You can construct a concrete instance of `DailySchedulePtrInput` via:
//
//          DailyScheduleArgs{...}
//
//  or:
//
//          nil
type DailySchedulePtrInput interface {
	pulumi.Input

	ToDailySchedulePtrOutput() DailySchedulePtrOutput
	ToDailySchedulePtrOutputWithContext(context.Context) DailySchedulePtrOutput
}

type dailySchedulePtrType DailyScheduleArgs

func DailySchedulePtr(v *DailyScheduleArgs) DailySchedulePtrInput {
	return (*dailySchedulePtrType)(v)
}

func (*dailySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailySchedule)(nil)).Elem()
}

func (i *dailySchedulePtrType) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return i.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (i *dailySchedulePtrType) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailySchedulePtrOutput)
}

// Daily Schedule properties
type DailyScheduleOutput struct{ *pulumi.OutputState }

func (DailyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailySchedule)(nil)).Elem()
}

func (o DailyScheduleOutput) ToDailyScheduleOutput() DailyScheduleOutput {
	return o
}

func (o DailyScheduleOutput) ToDailyScheduleOutputWithContext(ctx context.Context) DailyScheduleOutput {
	return o
}

func (o DailyScheduleOutput) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return o.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (o DailyScheduleOutput) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return o.ApplyT(func(v DailySchedule) *DailySchedule {
		return &v
	}).(DailySchedulePtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o DailyScheduleOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DailySchedule) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o DailyScheduleOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DailySchedule) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// Daily snapshot count to keep
func (o DailyScheduleOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DailySchedule) *int { return v.SnapshotsToKeep }).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o DailyScheduleOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DailySchedule) *int { return v.UsedBytes }).(pulumi.IntPtrOutput)
}

type DailySchedulePtrOutput struct{ *pulumi.OutputState }

func (DailySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailySchedule)(nil)).Elem()
}

func (o DailySchedulePtrOutput) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return o
}

func (o DailySchedulePtrOutput) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return o
}

func (o DailySchedulePtrOutput) Elem() DailyScheduleOutput {
	return o.ApplyT(func(v *DailySchedule) DailySchedule { return *v }).(DailyScheduleOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o DailySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o DailySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// Daily snapshot count to keep
func (o DailySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailySchedule) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o DailySchedulePtrOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailySchedule) *int {
		if v == nil {
			return nil
		}
		return v.UsedBytes
	}).(pulumi.IntPtrOutput)
}

// Daily Schedule properties
type DailyScheduleResponse struct {
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour *int `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute *int `pulumi:"minute"`
	// Daily snapshot count to keep
	SnapshotsToKeep *int `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes *int `pulumi:"usedBytes"`
}

// DailyScheduleResponseInput is an input type that accepts DailyScheduleResponseArgs and DailyScheduleResponseOutput values.
// You can construct a concrete instance of `DailyScheduleResponseInput` via:
//
//          DailyScheduleResponseArgs{...}
type DailyScheduleResponseInput interface {
	pulumi.Input

	ToDailyScheduleResponseOutput() DailyScheduleResponseOutput
	ToDailyScheduleResponseOutputWithContext(context.Context) DailyScheduleResponseOutput
}

// Daily Schedule properties
type DailyScheduleResponseArgs struct {
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// Daily snapshot count to keep
	SnapshotsToKeep pulumi.IntPtrInput `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes pulumi.IntPtrInput `pulumi:"usedBytes"`
}

func (DailyScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyScheduleResponse)(nil)).Elem()
}

func (i DailyScheduleResponseArgs) ToDailyScheduleResponseOutput() DailyScheduleResponseOutput {
	return i.ToDailyScheduleResponseOutputWithContext(context.Background())
}

func (i DailyScheduleResponseArgs) ToDailyScheduleResponseOutputWithContext(ctx context.Context) DailyScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleResponseOutput)
}

func (i DailyScheduleResponseArgs) ToDailyScheduleResponsePtrOutput() DailyScheduleResponsePtrOutput {
	return i.ToDailyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i DailyScheduleResponseArgs) ToDailyScheduleResponsePtrOutputWithContext(ctx context.Context) DailyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleResponseOutput).ToDailyScheduleResponsePtrOutputWithContext(ctx)
}

// DailyScheduleResponsePtrInput is an input type that accepts DailyScheduleResponseArgs, DailyScheduleResponsePtr and DailyScheduleResponsePtrOutput values.
// You can construct a concrete instance of `DailyScheduleResponsePtrInput` via:
//
//          DailyScheduleResponseArgs{...}
//
//  or:
//
//          nil
type DailyScheduleResponsePtrInput interface {
	pulumi.Input

	ToDailyScheduleResponsePtrOutput() DailyScheduleResponsePtrOutput
	ToDailyScheduleResponsePtrOutputWithContext(context.Context) DailyScheduleResponsePtrOutput
}

type dailyScheduleResponsePtrType DailyScheduleResponseArgs

func DailyScheduleResponsePtr(v *DailyScheduleResponseArgs) DailyScheduleResponsePtrInput {
	return (*dailyScheduleResponsePtrType)(v)
}

func (*dailyScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyScheduleResponse)(nil)).Elem()
}

func (i *dailyScheduleResponsePtrType) ToDailyScheduleResponsePtrOutput() DailyScheduleResponsePtrOutput {
	return i.ToDailyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *dailyScheduleResponsePtrType) ToDailyScheduleResponsePtrOutputWithContext(ctx context.Context) DailyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleResponsePtrOutput)
}

// Daily Schedule properties
type DailyScheduleResponseOutput struct{ *pulumi.OutputState }

func (DailyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyScheduleResponse)(nil)).Elem()
}

func (o DailyScheduleResponseOutput) ToDailyScheduleResponseOutput() DailyScheduleResponseOutput {
	return o
}

func (o DailyScheduleResponseOutput) ToDailyScheduleResponseOutputWithContext(ctx context.Context) DailyScheduleResponseOutput {
	return o
}

func (o DailyScheduleResponseOutput) ToDailyScheduleResponsePtrOutput() DailyScheduleResponsePtrOutput {
	return o.ToDailyScheduleResponsePtrOutputWithContext(context.Background())
}

func (o DailyScheduleResponseOutput) ToDailyScheduleResponsePtrOutputWithContext(ctx context.Context) DailyScheduleResponsePtrOutput {
	return o.ApplyT(func(v DailyScheduleResponse) *DailyScheduleResponse {
		return &v
	}).(DailyScheduleResponsePtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o DailyScheduleResponseOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DailyScheduleResponse) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o DailyScheduleResponseOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DailyScheduleResponse) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// Daily snapshot count to keep
func (o DailyScheduleResponseOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DailyScheduleResponse) *int { return v.SnapshotsToKeep }).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o DailyScheduleResponseOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DailyScheduleResponse) *int { return v.UsedBytes }).(pulumi.IntPtrOutput)
}

type DailyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (DailyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyScheduleResponse)(nil)).Elem()
}

func (o DailyScheduleResponsePtrOutput) ToDailyScheduleResponsePtrOutput() DailyScheduleResponsePtrOutput {
	return o
}

func (o DailyScheduleResponsePtrOutput) ToDailyScheduleResponsePtrOutputWithContext(ctx context.Context) DailyScheduleResponsePtrOutput {
	return o
}

func (o DailyScheduleResponsePtrOutput) Elem() DailyScheduleResponseOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) DailyScheduleResponse { return *v }).(DailyScheduleResponseOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o DailyScheduleResponsePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o DailyScheduleResponsePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// Daily snapshot count to keep
func (o DailyScheduleResponsePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o DailyScheduleResponsePtrOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.UsedBytes
	}).(pulumi.IntPtrOutput)
}

// Volume Export Policy Rule
type ExportPolicyRule struct {
	// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
	AllowedClients *string `pulumi:"allowedClients"`
	// Allows CIFS protocol
	Cifs *bool `pulumi:"cifs"`
	// Has root access to volume
	HasRootAccess *bool `pulumi:"hasRootAccess"`
	// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadOnly *bool `pulumi:"kerberos5ReadOnly"`
	// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadWrite *bool `pulumi:"kerberos5ReadWrite"`
	// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadOnly *bool `pulumi:"kerberos5iReadOnly"`
	// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadWrite *bool `pulumi:"kerberos5iReadWrite"`
	// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadOnly *bool `pulumi:"kerberos5pReadOnly"`
	// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadWrite *bool `pulumi:"kerberos5pReadWrite"`
	// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
	Nfsv3 *bool `pulumi:"nfsv3"`
	// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
	Nfsv41 *bool `pulumi:"nfsv41"`
	// Order index
	RuleIndex *int `pulumi:"ruleIndex"`
	// Read only access
	UnixReadOnly *bool `pulumi:"unixReadOnly"`
	// Read and write access
	UnixReadWrite *bool `pulumi:"unixReadWrite"`
}

// ExportPolicyRuleInput is an input type that accepts ExportPolicyRuleArgs and ExportPolicyRuleOutput values.
// You can construct a concrete instance of `ExportPolicyRuleInput` via:
//
//          ExportPolicyRuleArgs{...}
type ExportPolicyRuleInput interface {
	pulumi.Input

	ToExportPolicyRuleOutput() ExportPolicyRuleOutput
	ToExportPolicyRuleOutputWithContext(context.Context) ExportPolicyRuleOutput
}

// Volume Export Policy Rule
type ExportPolicyRuleArgs struct {
	// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
	AllowedClients pulumi.StringPtrInput `pulumi:"allowedClients"`
	// Allows CIFS protocol
	Cifs pulumi.BoolPtrInput `pulumi:"cifs"`
	// Has root access to volume
	HasRootAccess pulumi.BoolPtrInput `pulumi:"hasRootAccess"`
	// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5ReadOnly"`
	// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5ReadWrite"`
	// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5iReadOnly"`
	// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5iReadWrite"`
	// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5pReadOnly"`
	// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5pReadWrite"`
	// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
	Nfsv3 pulumi.BoolPtrInput `pulumi:"nfsv3"`
	// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
	Nfsv41 pulumi.BoolPtrInput `pulumi:"nfsv41"`
	// Order index
	RuleIndex pulumi.IntPtrInput `pulumi:"ruleIndex"`
	// Read only access
	UnixReadOnly pulumi.BoolPtrInput `pulumi:"unixReadOnly"`
	// Read and write access
	UnixReadWrite pulumi.BoolPtrInput `pulumi:"unixReadWrite"`
}

func (ExportPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPolicyRule)(nil)).Elem()
}

func (i ExportPolicyRuleArgs) ToExportPolicyRuleOutput() ExportPolicyRuleOutput {
	return i.ToExportPolicyRuleOutputWithContext(context.Background())
}

func (i ExportPolicyRuleArgs) ToExportPolicyRuleOutputWithContext(ctx context.Context) ExportPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportPolicyRuleOutput)
}

// ExportPolicyRuleArrayInput is an input type that accepts ExportPolicyRuleArray and ExportPolicyRuleArrayOutput values.
// You can construct a concrete instance of `ExportPolicyRuleArrayInput` via:
//
//          ExportPolicyRuleArray{ ExportPolicyRuleArgs{...} }
type ExportPolicyRuleArrayInput interface {
	pulumi.Input

	ToExportPolicyRuleArrayOutput() ExportPolicyRuleArrayOutput
	ToExportPolicyRuleArrayOutputWithContext(context.Context) ExportPolicyRuleArrayOutput
}

type ExportPolicyRuleArray []ExportPolicyRuleInput

func (ExportPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportPolicyRule)(nil)).Elem()
}

func (i ExportPolicyRuleArray) ToExportPolicyRuleArrayOutput() ExportPolicyRuleArrayOutput {
	return i.ToExportPolicyRuleArrayOutputWithContext(context.Background())
}

func (i ExportPolicyRuleArray) ToExportPolicyRuleArrayOutputWithContext(ctx context.Context) ExportPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportPolicyRuleArrayOutput)
}

// Volume Export Policy Rule
type ExportPolicyRuleOutput struct{ *pulumi.OutputState }

func (ExportPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPolicyRule)(nil)).Elem()
}

func (o ExportPolicyRuleOutput) ToExportPolicyRuleOutput() ExportPolicyRuleOutput {
	return o
}

func (o ExportPolicyRuleOutput) ToExportPolicyRuleOutputWithContext(ctx context.Context) ExportPolicyRuleOutput {
	return o
}

// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
func (o ExportPolicyRuleOutput) AllowedClients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *string { return v.AllowedClients }).(pulumi.StringPtrOutput)
}

// Allows CIFS protocol
func (o ExportPolicyRuleOutput) Cifs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Cifs }).(pulumi.BoolPtrOutput)
}

// Has root access to volume
func (o ExportPolicyRuleOutput) HasRootAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.HasRootAccess }).(pulumi.BoolPtrOutput)
}

// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5ReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5ReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5ReadWrite }).(pulumi.BoolPtrOutput)
}

// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5iReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5iReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5iReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5iReadWrite }).(pulumi.BoolPtrOutput)
}

// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5pReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5pReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5pReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5pReadWrite }).(pulumi.BoolPtrOutput)
}

// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
func (o ExportPolicyRuleOutput) Nfsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Nfsv3 }).(pulumi.BoolPtrOutput)
}

// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
func (o ExportPolicyRuleOutput) Nfsv41() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Nfsv41 }).(pulumi.BoolPtrOutput)
}

// Order index
func (o ExportPolicyRuleOutput) RuleIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *int { return v.RuleIndex }).(pulumi.IntPtrOutput)
}

// Read only access
func (o ExportPolicyRuleOutput) UnixReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.UnixReadOnly }).(pulumi.BoolPtrOutput)
}

// Read and write access
func (o ExportPolicyRuleOutput) UnixReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.UnixReadWrite }).(pulumi.BoolPtrOutput)
}

type ExportPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (ExportPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportPolicyRule)(nil)).Elem()
}

func (o ExportPolicyRuleArrayOutput) ToExportPolicyRuleArrayOutput() ExportPolicyRuleArrayOutput {
	return o
}

func (o ExportPolicyRuleArrayOutput) ToExportPolicyRuleArrayOutputWithContext(ctx context.Context) ExportPolicyRuleArrayOutput {
	return o
}

func (o ExportPolicyRuleArrayOutput) Index(i pulumi.IntInput) ExportPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExportPolicyRule {
		return vs[0].([]ExportPolicyRule)[vs[1].(int)]
	}).(ExportPolicyRuleOutput)
}

// Volume Export Policy Rule
type ExportPolicyRuleResponse struct {
	// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
	AllowedClients *string `pulumi:"allowedClients"`
	// Allows CIFS protocol
	Cifs *bool `pulumi:"cifs"`
	// Has root access to volume
	HasRootAccess *bool `pulumi:"hasRootAccess"`
	// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadOnly *bool `pulumi:"kerberos5ReadOnly"`
	// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadWrite *bool `pulumi:"kerberos5ReadWrite"`
	// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadOnly *bool `pulumi:"kerberos5iReadOnly"`
	// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadWrite *bool `pulumi:"kerberos5iReadWrite"`
	// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadOnly *bool `pulumi:"kerberos5pReadOnly"`
	// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadWrite *bool `pulumi:"kerberos5pReadWrite"`
	// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
	Nfsv3 *bool `pulumi:"nfsv3"`
	// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
	Nfsv41 *bool `pulumi:"nfsv41"`
	// Order index
	RuleIndex *int `pulumi:"ruleIndex"`
	// Read only access
	UnixReadOnly *bool `pulumi:"unixReadOnly"`
	// Read and write access
	UnixReadWrite *bool `pulumi:"unixReadWrite"`
}

// ExportPolicyRuleResponseInput is an input type that accepts ExportPolicyRuleResponseArgs and ExportPolicyRuleResponseOutput values.
// You can construct a concrete instance of `ExportPolicyRuleResponseInput` via:
//
//          ExportPolicyRuleResponseArgs{...}
type ExportPolicyRuleResponseInput interface {
	pulumi.Input

	ToExportPolicyRuleResponseOutput() ExportPolicyRuleResponseOutput
	ToExportPolicyRuleResponseOutputWithContext(context.Context) ExportPolicyRuleResponseOutput
}

// Volume Export Policy Rule
type ExportPolicyRuleResponseArgs struct {
	// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
	AllowedClients pulumi.StringPtrInput `pulumi:"allowedClients"`
	// Allows CIFS protocol
	Cifs pulumi.BoolPtrInput `pulumi:"cifs"`
	// Has root access to volume
	HasRootAccess pulumi.BoolPtrInput `pulumi:"hasRootAccess"`
	// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5ReadOnly"`
	// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5ReadWrite"`
	// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5iReadOnly"`
	// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5iReadWrite"`
	// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5pReadOnly"`
	// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5pReadWrite"`
	// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
	Nfsv3 pulumi.BoolPtrInput `pulumi:"nfsv3"`
	// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
	Nfsv41 pulumi.BoolPtrInput `pulumi:"nfsv41"`
	// Order index
	RuleIndex pulumi.IntPtrInput `pulumi:"ruleIndex"`
	// Read only access
	UnixReadOnly pulumi.BoolPtrInput `pulumi:"unixReadOnly"`
	// Read and write access
	UnixReadWrite pulumi.BoolPtrInput `pulumi:"unixReadWrite"`
}

func (ExportPolicyRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPolicyRuleResponse)(nil)).Elem()
}

func (i ExportPolicyRuleResponseArgs) ToExportPolicyRuleResponseOutput() ExportPolicyRuleResponseOutput {
	return i.ToExportPolicyRuleResponseOutputWithContext(context.Background())
}

func (i ExportPolicyRuleResponseArgs) ToExportPolicyRuleResponseOutputWithContext(ctx context.Context) ExportPolicyRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportPolicyRuleResponseOutput)
}

// ExportPolicyRuleResponseArrayInput is an input type that accepts ExportPolicyRuleResponseArray and ExportPolicyRuleResponseArrayOutput values.
// You can construct a concrete instance of `ExportPolicyRuleResponseArrayInput` via:
//
//          ExportPolicyRuleResponseArray{ ExportPolicyRuleResponseArgs{...} }
type ExportPolicyRuleResponseArrayInput interface {
	pulumi.Input

	ToExportPolicyRuleResponseArrayOutput() ExportPolicyRuleResponseArrayOutput
	ToExportPolicyRuleResponseArrayOutputWithContext(context.Context) ExportPolicyRuleResponseArrayOutput
}

type ExportPolicyRuleResponseArray []ExportPolicyRuleResponseInput

func (ExportPolicyRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportPolicyRuleResponse)(nil)).Elem()
}

func (i ExportPolicyRuleResponseArray) ToExportPolicyRuleResponseArrayOutput() ExportPolicyRuleResponseArrayOutput {
	return i.ToExportPolicyRuleResponseArrayOutputWithContext(context.Background())
}

func (i ExportPolicyRuleResponseArray) ToExportPolicyRuleResponseArrayOutputWithContext(ctx context.Context) ExportPolicyRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportPolicyRuleResponseArrayOutput)
}

// Volume Export Policy Rule
type ExportPolicyRuleResponseOutput struct{ *pulumi.OutputState }

func (ExportPolicyRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPolicyRuleResponse)(nil)).Elem()
}

func (o ExportPolicyRuleResponseOutput) ToExportPolicyRuleResponseOutput() ExportPolicyRuleResponseOutput {
	return o
}

func (o ExportPolicyRuleResponseOutput) ToExportPolicyRuleResponseOutputWithContext(ctx context.Context) ExportPolicyRuleResponseOutput {
	return o
}

// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
func (o ExportPolicyRuleResponseOutput) AllowedClients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *string { return v.AllowedClients }).(pulumi.StringPtrOutput)
}

// Allows CIFS protocol
func (o ExportPolicyRuleResponseOutput) Cifs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Cifs }).(pulumi.BoolPtrOutput)
}

// Has root access to volume
func (o ExportPolicyRuleResponseOutput) HasRootAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.HasRootAccess }).(pulumi.BoolPtrOutput)
}

// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5ReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5ReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5ReadWrite }).(pulumi.BoolPtrOutput)
}

// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5iReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5iReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5iReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5iReadWrite }).(pulumi.BoolPtrOutput)
}

// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5pReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5pReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5pReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5pReadWrite }).(pulumi.BoolPtrOutput)
}

// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
func (o ExportPolicyRuleResponseOutput) Nfsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Nfsv3 }).(pulumi.BoolPtrOutput)
}

// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
func (o ExportPolicyRuleResponseOutput) Nfsv41() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Nfsv41 }).(pulumi.BoolPtrOutput)
}

// Order index
func (o ExportPolicyRuleResponseOutput) RuleIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *int { return v.RuleIndex }).(pulumi.IntPtrOutput)
}

// Read only access
func (o ExportPolicyRuleResponseOutput) UnixReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.UnixReadOnly }).(pulumi.BoolPtrOutput)
}

// Read and write access
func (o ExportPolicyRuleResponseOutput) UnixReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.UnixReadWrite }).(pulumi.BoolPtrOutput)
}

type ExportPolicyRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ExportPolicyRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportPolicyRuleResponse)(nil)).Elem()
}

func (o ExportPolicyRuleResponseArrayOutput) ToExportPolicyRuleResponseArrayOutput() ExportPolicyRuleResponseArrayOutput {
	return o
}

func (o ExportPolicyRuleResponseArrayOutput) ToExportPolicyRuleResponseArrayOutputWithContext(ctx context.Context) ExportPolicyRuleResponseArrayOutput {
	return o
}

func (o ExportPolicyRuleResponseArrayOutput) Index(i pulumi.IntInput) ExportPolicyRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExportPolicyRuleResponse {
		return vs[0].([]ExportPolicyRuleResponse)[vs[1].(int)]
	}).(ExportPolicyRuleResponseOutput)
}

// Hourly Schedule properties
type HourlySchedule struct {
	// Indicates which minute snapshot should be taken
	Minute *int `pulumi:"minute"`
	// Hourly snapshot count to keep
	SnapshotsToKeep *int `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes *int `pulumi:"usedBytes"`
}

// HourlyScheduleInput is an input type that accepts HourlyScheduleArgs and HourlyScheduleOutput values.
// You can construct a concrete instance of `HourlyScheduleInput` via:
//
//          HourlyScheduleArgs{...}
type HourlyScheduleInput interface {
	pulumi.Input

	ToHourlyScheduleOutput() HourlyScheduleOutput
	ToHourlyScheduleOutputWithContext(context.Context) HourlyScheduleOutput
}

// Hourly Schedule properties
type HourlyScheduleArgs struct {
	// Indicates which minute snapshot should be taken
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// Hourly snapshot count to keep
	SnapshotsToKeep pulumi.IntPtrInput `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes pulumi.IntPtrInput `pulumi:"usedBytes"`
}

func (HourlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HourlySchedule)(nil)).Elem()
}

func (i HourlyScheduleArgs) ToHourlyScheduleOutput() HourlyScheduleOutput {
	return i.ToHourlyScheduleOutputWithContext(context.Background())
}

func (i HourlyScheduleArgs) ToHourlyScheduleOutputWithContext(ctx context.Context) HourlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlyScheduleOutput)
}

func (i HourlyScheduleArgs) ToHourlySchedulePtrOutput() HourlySchedulePtrOutput {
	return i.ToHourlySchedulePtrOutputWithContext(context.Background())
}

func (i HourlyScheduleArgs) ToHourlySchedulePtrOutputWithContext(ctx context.Context) HourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlyScheduleOutput).ToHourlySchedulePtrOutputWithContext(ctx)
}

// HourlySchedulePtrInput is an input type that accepts HourlyScheduleArgs, HourlySchedulePtr and HourlySchedulePtrOutput values.
// You can construct a concrete instance of `HourlySchedulePtrInput` via:
//
//          HourlyScheduleArgs{...}
//
//  or:
//
//          nil
type HourlySchedulePtrInput interface {
	pulumi.Input

	ToHourlySchedulePtrOutput() HourlySchedulePtrOutput
	ToHourlySchedulePtrOutputWithContext(context.Context) HourlySchedulePtrOutput
}

type hourlySchedulePtrType HourlyScheduleArgs

func HourlySchedulePtr(v *HourlyScheduleArgs) HourlySchedulePtrInput {
	return (*hourlySchedulePtrType)(v)
}

func (*hourlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HourlySchedule)(nil)).Elem()
}

func (i *hourlySchedulePtrType) ToHourlySchedulePtrOutput() HourlySchedulePtrOutput {
	return i.ToHourlySchedulePtrOutputWithContext(context.Background())
}

func (i *hourlySchedulePtrType) ToHourlySchedulePtrOutputWithContext(ctx context.Context) HourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlySchedulePtrOutput)
}

// Hourly Schedule properties
type HourlyScheduleOutput struct{ *pulumi.OutputState }

func (HourlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HourlySchedule)(nil)).Elem()
}

func (o HourlyScheduleOutput) ToHourlyScheduleOutput() HourlyScheduleOutput {
	return o
}

func (o HourlyScheduleOutput) ToHourlyScheduleOutputWithContext(ctx context.Context) HourlyScheduleOutput {
	return o
}

func (o HourlyScheduleOutput) ToHourlySchedulePtrOutput() HourlySchedulePtrOutput {
	return o.ToHourlySchedulePtrOutputWithContext(context.Background())
}

func (o HourlyScheduleOutput) ToHourlySchedulePtrOutputWithContext(ctx context.Context) HourlySchedulePtrOutput {
	return o.ApplyT(func(v HourlySchedule) *HourlySchedule {
		return &v
	}).(HourlySchedulePtrOutput)
}

// Indicates which minute snapshot should be taken
func (o HourlyScheduleOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlySchedule) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// Hourly snapshot count to keep
func (o HourlyScheduleOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlySchedule) *int { return v.SnapshotsToKeep }).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o HourlyScheduleOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlySchedule) *int { return v.UsedBytes }).(pulumi.IntPtrOutput)
}

type HourlySchedulePtrOutput struct{ *pulumi.OutputState }

func (HourlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HourlySchedule)(nil)).Elem()
}

func (o HourlySchedulePtrOutput) ToHourlySchedulePtrOutput() HourlySchedulePtrOutput {
	return o
}

func (o HourlySchedulePtrOutput) ToHourlySchedulePtrOutputWithContext(ctx context.Context) HourlySchedulePtrOutput {
	return o
}

func (o HourlySchedulePtrOutput) Elem() HourlyScheduleOutput {
	return o.ApplyT(func(v *HourlySchedule) HourlySchedule { return *v }).(HourlyScheduleOutput)
}

// Indicates which minute snapshot should be taken
func (o HourlySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// Hourly snapshot count to keep
func (o HourlySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o HourlySchedulePtrOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.UsedBytes
	}).(pulumi.IntPtrOutput)
}

// Hourly Schedule properties
type HourlyScheduleResponse struct {
	// Indicates which minute snapshot should be taken
	Minute *int `pulumi:"minute"`
	// Hourly snapshot count to keep
	SnapshotsToKeep *int `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes *int `pulumi:"usedBytes"`
}

// HourlyScheduleResponseInput is an input type that accepts HourlyScheduleResponseArgs and HourlyScheduleResponseOutput values.
// You can construct a concrete instance of `HourlyScheduleResponseInput` via:
//
//          HourlyScheduleResponseArgs{...}
type HourlyScheduleResponseInput interface {
	pulumi.Input

	ToHourlyScheduleResponseOutput() HourlyScheduleResponseOutput
	ToHourlyScheduleResponseOutputWithContext(context.Context) HourlyScheduleResponseOutput
}

// Hourly Schedule properties
type HourlyScheduleResponseArgs struct {
	// Indicates which minute snapshot should be taken
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// Hourly snapshot count to keep
	SnapshotsToKeep pulumi.IntPtrInput `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes pulumi.IntPtrInput `pulumi:"usedBytes"`
}

func (HourlyScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HourlyScheduleResponse)(nil)).Elem()
}

func (i HourlyScheduleResponseArgs) ToHourlyScheduleResponseOutput() HourlyScheduleResponseOutput {
	return i.ToHourlyScheduleResponseOutputWithContext(context.Background())
}

func (i HourlyScheduleResponseArgs) ToHourlyScheduleResponseOutputWithContext(ctx context.Context) HourlyScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlyScheduleResponseOutput)
}

func (i HourlyScheduleResponseArgs) ToHourlyScheduleResponsePtrOutput() HourlyScheduleResponsePtrOutput {
	return i.ToHourlyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i HourlyScheduleResponseArgs) ToHourlyScheduleResponsePtrOutputWithContext(ctx context.Context) HourlyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlyScheduleResponseOutput).ToHourlyScheduleResponsePtrOutputWithContext(ctx)
}

// HourlyScheduleResponsePtrInput is an input type that accepts HourlyScheduleResponseArgs, HourlyScheduleResponsePtr and HourlyScheduleResponsePtrOutput values.
// You can construct a concrete instance of `HourlyScheduleResponsePtrInput` via:
//
//          HourlyScheduleResponseArgs{...}
//
//  or:
//
//          nil
type HourlyScheduleResponsePtrInput interface {
	pulumi.Input

	ToHourlyScheduleResponsePtrOutput() HourlyScheduleResponsePtrOutput
	ToHourlyScheduleResponsePtrOutputWithContext(context.Context) HourlyScheduleResponsePtrOutput
}

type hourlyScheduleResponsePtrType HourlyScheduleResponseArgs

func HourlyScheduleResponsePtr(v *HourlyScheduleResponseArgs) HourlyScheduleResponsePtrInput {
	return (*hourlyScheduleResponsePtrType)(v)
}

func (*hourlyScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HourlyScheduleResponse)(nil)).Elem()
}

func (i *hourlyScheduleResponsePtrType) ToHourlyScheduleResponsePtrOutput() HourlyScheduleResponsePtrOutput {
	return i.ToHourlyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *hourlyScheduleResponsePtrType) ToHourlyScheduleResponsePtrOutputWithContext(ctx context.Context) HourlyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlyScheduleResponsePtrOutput)
}

// Hourly Schedule properties
type HourlyScheduleResponseOutput struct{ *pulumi.OutputState }

func (HourlyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HourlyScheduleResponse)(nil)).Elem()
}

func (o HourlyScheduleResponseOutput) ToHourlyScheduleResponseOutput() HourlyScheduleResponseOutput {
	return o
}

func (o HourlyScheduleResponseOutput) ToHourlyScheduleResponseOutputWithContext(ctx context.Context) HourlyScheduleResponseOutput {
	return o
}

func (o HourlyScheduleResponseOutput) ToHourlyScheduleResponsePtrOutput() HourlyScheduleResponsePtrOutput {
	return o.ToHourlyScheduleResponsePtrOutputWithContext(context.Background())
}

func (o HourlyScheduleResponseOutput) ToHourlyScheduleResponsePtrOutputWithContext(ctx context.Context) HourlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v HourlyScheduleResponse) *HourlyScheduleResponse {
		return &v
	}).(HourlyScheduleResponsePtrOutput)
}

// Indicates which minute snapshot should be taken
func (o HourlyScheduleResponseOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlyScheduleResponse) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// Hourly snapshot count to keep
func (o HourlyScheduleResponseOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlyScheduleResponse) *int { return v.SnapshotsToKeep }).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o HourlyScheduleResponseOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlyScheduleResponse) *int { return v.UsedBytes }).(pulumi.IntPtrOutput)
}

type HourlyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (HourlyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HourlyScheduleResponse)(nil)).Elem()
}

func (o HourlyScheduleResponsePtrOutput) ToHourlyScheduleResponsePtrOutput() HourlyScheduleResponsePtrOutput {
	return o
}

func (o HourlyScheduleResponsePtrOutput) ToHourlyScheduleResponsePtrOutputWithContext(ctx context.Context) HourlyScheduleResponsePtrOutput {
	return o
}

func (o HourlyScheduleResponsePtrOutput) Elem() HourlyScheduleResponseOutput {
	return o.ApplyT(func(v *HourlyScheduleResponse) HourlyScheduleResponse { return *v }).(HourlyScheduleResponseOutput)
}

// Indicates which minute snapshot should be taken
func (o HourlyScheduleResponsePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// Hourly snapshot count to keep
func (o HourlyScheduleResponsePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o HourlyScheduleResponsePtrOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.UsedBytes
	}).(pulumi.IntPtrOutput)
}

// Monthly Schedule properties
type MonthlySchedule struct {
	// Indicates which days of the month snapshot should be taken. A comma delimited string.
	DaysOfMonth *string `pulumi:"daysOfMonth"`
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour *int `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute *int `pulumi:"minute"`
	// Monthly snapshot count to keep
	SnapshotsToKeep *int `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes *int `pulumi:"usedBytes"`
}

// MonthlyScheduleInput is an input type that accepts MonthlyScheduleArgs and MonthlyScheduleOutput values.
// You can construct a concrete instance of `MonthlyScheduleInput` via:
//
//          MonthlyScheduleArgs{...}
type MonthlyScheduleInput interface {
	pulumi.Input

	ToMonthlyScheduleOutput() MonthlyScheduleOutput
	ToMonthlyScheduleOutputWithContext(context.Context) MonthlyScheduleOutput
}

// Monthly Schedule properties
type MonthlyScheduleArgs struct {
	// Indicates which days of the month snapshot should be taken. A comma delimited string.
	DaysOfMonth pulumi.StringPtrInput `pulumi:"daysOfMonth"`
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// Monthly snapshot count to keep
	SnapshotsToKeep pulumi.IntPtrInput `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes pulumi.IntPtrInput `pulumi:"usedBytes"`
}

func (MonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlySchedule)(nil)).Elem()
}

func (i MonthlyScheduleArgs) ToMonthlyScheduleOutput() MonthlyScheduleOutput {
	return i.ToMonthlyScheduleOutputWithContext(context.Background())
}

func (i MonthlyScheduleArgs) ToMonthlyScheduleOutputWithContext(ctx context.Context) MonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleOutput)
}

func (i MonthlyScheduleArgs) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return i.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i MonthlyScheduleArgs) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleOutput).ToMonthlySchedulePtrOutputWithContext(ctx)
}

// MonthlySchedulePtrInput is an input type that accepts MonthlyScheduleArgs, MonthlySchedulePtr and MonthlySchedulePtrOutput values.
// You can construct a concrete instance of `MonthlySchedulePtrInput` via:
//
//          MonthlyScheduleArgs{...}
//
//  or:
//
//          nil
type MonthlySchedulePtrInput interface {
	pulumi.Input

	ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput
	ToMonthlySchedulePtrOutputWithContext(context.Context) MonthlySchedulePtrOutput
}

type monthlySchedulePtrType MonthlyScheduleArgs

func MonthlySchedulePtr(v *MonthlyScheduleArgs) MonthlySchedulePtrInput {
	return (*monthlySchedulePtrType)(v)
}

func (*monthlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlySchedule)(nil)).Elem()
}

func (i *monthlySchedulePtrType) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return i.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i *monthlySchedulePtrType) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlySchedulePtrOutput)
}

// Monthly Schedule properties
type MonthlyScheduleOutput struct{ *pulumi.OutputState }

func (MonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlySchedule)(nil)).Elem()
}

func (o MonthlyScheduleOutput) ToMonthlyScheduleOutput() MonthlyScheduleOutput {
	return o
}

func (o MonthlyScheduleOutput) ToMonthlyScheduleOutputWithContext(ctx context.Context) MonthlyScheduleOutput {
	return o
}

func (o MonthlyScheduleOutput) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return o.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (o MonthlyScheduleOutput) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *MonthlySchedule {
		return &v
	}).(MonthlySchedulePtrOutput)
}

// Indicates which days of the month snapshot should be taken. A comma delimited string.
func (o MonthlyScheduleOutput) DaysOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *string { return v.DaysOfMonth }).(pulumi.StringPtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o MonthlyScheduleOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o MonthlyScheduleOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// Monthly snapshot count to keep
func (o MonthlyScheduleOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *int { return v.SnapshotsToKeep }).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o MonthlyScheduleOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *int { return v.UsedBytes }).(pulumi.IntPtrOutput)
}

type MonthlySchedulePtrOutput struct{ *pulumi.OutputState }

func (MonthlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlySchedule)(nil)).Elem()
}

func (o MonthlySchedulePtrOutput) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return o
}

func (o MonthlySchedulePtrOutput) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return o
}

func (o MonthlySchedulePtrOutput) Elem() MonthlyScheduleOutput {
	return o.ApplyT(func(v *MonthlySchedule) MonthlySchedule { return *v }).(MonthlyScheduleOutput)
}

// Indicates which days of the month snapshot should be taken. A comma delimited string.
func (o MonthlySchedulePtrOutput) DaysOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *string {
		if v == nil {
			return nil
		}
		return v.DaysOfMonth
	}).(pulumi.StringPtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o MonthlySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o MonthlySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// Monthly snapshot count to keep
func (o MonthlySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o MonthlySchedulePtrOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.UsedBytes
	}).(pulumi.IntPtrOutput)
}

// Monthly Schedule properties
type MonthlyScheduleResponse struct {
	// Indicates which days of the month snapshot should be taken. A comma delimited string.
	DaysOfMonth *string `pulumi:"daysOfMonth"`
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour *int `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute *int `pulumi:"minute"`
	// Monthly snapshot count to keep
	SnapshotsToKeep *int `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes *int `pulumi:"usedBytes"`
}

// MonthlyScheduleResponseInput is an input type that accepts MonthlyScheduleResponseArgs and MonthlyScheduleResponseOutput values.
// You can construct a concrete instance of `MonthlyScheduleResponseInput` via:
//
//          MonthlyScheduleResponseArgs{...}
type MonthlyScheduleResponseInput interface {
	pulumi.Input

	ToMonthlyScheduleResponseOutput() MonthlyScheduleResponseOutput
	ToMonthlyScheduleResponseOutputWithContext(context.Context) MonthlyScheduleResponseOutput
}

// Monthly Schedule properties
type MonthlyScheduleResponseArgs struct {
	// Indicates which days of the month snapshot should be taken. A comma delimited string.
	DaysOfMonth pulumi.StringPtrInput `pulumi:"daysOfMonth"`
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// Monthly snapshot count to keep
	SnapshotsToKeep pulumi.IntPtrInput `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes pulumi.IntPtrInput `pulumi:"usedBytes"`
}

func (MonthlyScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyScheduleResponse)(nil)).Elem()
}

func (i MonthlyScheduleResponseArgs) ToMonthlyScheduleResponseOutput() MonthlyScheduleResponseOutput {
	return i.ToMonthlyScheduleResponseOutputWithContext(context.Background())
}

func (i MonthlyScheduleResponseArgs) ToMonthlyScheduleResponseOutputWithContext(ctx context.Context) MonthlyScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleResponseOutput)
}

func (i MonthlyScheduleResponseArgs) ToMonthlyScheduleResponsePtrOutput() MonthlyScheduleResponsePtrOutput {
	return i.ToMonthlyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i MonthlyScheduleResponseArgs) ToMonthlyScheduleResponsePtrOutputWithContext(ctx context.Context) MonthlyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleResponseOutput).ToMonthlyScheduleResponsePtrOutputWithContext(ctx)
}

// MonthlyScheduleResponsePtrInput is an input type that accepts MonthlyScheduleResponseArgs, MonthlyScheduleResponsePtr and MonthlyScheduleResponsePtrOutput values.
// You can construct a concrete instance of `MonthlyScheduleResponsePtrInput` via:
//
//          MonthlyScheduleResponseArgs{...}
//
//  or:
//
//          nil
type MonthlyScheduleResponsePtrInput interface {
	pulumi.Input

	ToMonthlyScheduleResponsePtrOutput() MonthlyScheduleResponsePtrOutput
	ToMonthlyScheduleResponsePtrOutputWithContext(context.Context) MonthlyScheduleResponsePtrOutput
}

type monthlyScheduleResponsePtrType MonthlyScheduleResponseArgs

func MonthlyScheduleResponsePtr(v *MonthlyScheduleResponseArgs) MonthlyScheduleResponsePtrInput {
	return (*monthlyScheduleResponsePtrType)(v)
}

func (*monthlyScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlyScheduleResponse)(nil)).Elem()
}

func (i *monthlyScheduleResponsePtrType) ToMonthlyScheduleResponsePtrOutput() MonthlyScheduleResponsePtrOutput {
	return i.ToMonthlyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *monthlyScheduleResponsePtrType) ToMonthlyScheduleResponsePtrOutputWithContext(ctx context.Context) MonthlyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleResponsePtrOutput)
}

// Monthly Schedule properties
type MonthlyScheduleResponseOutput struct{ *pulumi.OutputState }

func (MonthlyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyScheduleResponse)(nil)).Elem()
}

func (o MonthlyScheduleResponseOutput) ToMonthlyScheduleResponseOutput() MonthlyScheduleResponseOutput {
	return o
}

func (o MonthlyScheduleResponseOutput) ToMonthlyScheduleResponseOutputWithContext(ctx context.Context) MonthlyScheduleResponseOutput {
	return o
}

func (o MonthlyScheduleResponseOutput) ToMonthlyScheduleResponsePtrOutput() MonthlyScheduleResponsePtrOutput {
	return o.ToMonthlyScheduleResponsePtrOutputWithContext(context.Background())
}

func (o MonthlyScheduleResponseOutput) ToMonthlyScheduleResponsePtrOutputWithContext(ctx context.Context) MonthlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v MonthlyScheduleResponse) *MonthlyScheduleResponse {
		return &v
	}).(MonthlyScheduleResponsePtrOutput)
}

// Indicates which days of the month snapshot should be taken. A comma delimited string.
func (o MonthlyScheduleResponseOutput) DaysOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonthlyScheduleResponse) *string { return v.DaysOfMonth }).(pulumi.StringPtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o MonthlyScheduleResponseOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlyScheduleResponse) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o MonthlyScheduleResponseOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlyScheduleResponse) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// Monthly snapshot count to keep
func (o MonthlyScheduleResponseOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlyScheduleResponse) *int { return v.SnapshotsToKeep }).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o MonthlyScheduleResponseOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlyScheduleResponse) *int { return v.UsedBytes }).(pulumi.IntPtrOutput)
}

type MonthlyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (MonthlyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlyScheduleResponse)(nil)).Elem()
}

func (o MonthlyScheduleResponsePtrOutput) ToMonthlyScheduleResponsePtrOutput() MonthlyScheduleResponsePtrOutput {
	return o
}

func (o MonthlyScheduleResponsePtrOutput) ToMonthlyScheduleResponsePtrOutputWithContext(ctx context.Context) MonthlyScheduleResponsePtrOutput {
	return o
}

func (o MonthlyScheduleResponsePtrOutput) Elem() MonthlyScheduleResponseOutput {
	return o.ApplyT(func(v *MonthlyScheduleResponse) MonthlyScheduleResponse { return *v }).(MonthlyScheduleResponseOutput)
}

// Indicates which days of the month snapshot should be taken. A comma delimited string.
func (o MonthlyScheduleResponsePtrOutput) DaysOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonthlyScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.DaysOfMonth
	}).(pulumi.StringPtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o MonthlyScheduleResponsePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o MonthlyScheduleResponsePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// Monthly snapshot count to keep
func (o MonthlyScheduleResponsePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o MonthlyScheduleResponsePtrOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.UsedBytes
	}).(pulumi.IntPtrOutput)
}

// Mount target properties
type MountTargetProperties struct {
	// UUID v4 used to identify the MountTarget
	FileSystemId string `pulumi:"fileSystemId"`
	// The SMB server's Fully Qualified Domain Name, FQDN
	SmbServerFqdn *string `pulumi:"smbServerFqdn"`
}

// MountTargetPropertiesInput is an input type that accepts MountTargetPropertiesArgs and MountTargetPropertiesOutput values.
// You can construct a concrete instance of `MountTargetPropertiesInput` via:
//
//          MountTargetPropertiesArgs{...}
type MountTargetPropertiesInput interface {
	pulumi.Input

	ToMountTargetPropertiesOutput() MountTargetPropertiesOutput
	ToMountTargetPropertiesOutputWithContext(context.Context) MountTargetPropertiesOutput
}

// Mount target properties
type MountTargetPropertiesArgs struct {
	// UUID v4 used to identify the MountTarget
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The SMB server's Fully Qualified Domain Name, FQDN
	SmbServerFqdn pulumi.StringPtrInput `pulumi:"smbServerFqdn"`
}

func (MountTargetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountTargetProperties)(nil)).Elem()
}

func (i MountTargetPropertiesArgs) ToMountTargetPropertiesOutput() MountTargetPropertiesOutput {
	return i.ToMountTargetPropertiesOutputWithContext(context.Background())
}

func (i MountTargetPropertiesArgs) ToMountTargetPropertiesOutputWithContext(ctx context.Context) MountTargetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountTargetPropertiesOutput)
}

// MountTargetPropertiesArrayInput is an input type that accepts MountTargetPropertiesArray and MountTargetPropertiesArrayOutput values.
// You can construct a concrete instance of `MountTargetPropertiesArrayInput` via:
//
//          MountTargetPropertiesArray{ MountTargetPropertiesArgs{...} }
type MountTargetPropertiesArrayInput interface {
	pulumi.Input

	ToMountTargetPropertiesArrayOutput() MountTargetPropertiesArrayOutput
	ToMountTargetPropertiesArrayOutputWithContext(context.Context) MountTargetPropertiesArrayOutput
}

type MountTargetPropertiesArray []MountTargetPropertiesInput

func (MountTargetPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountTargetProperties)(nil)).Elem()
}

func (i MountTargetPropertiesArray) ToMountTargetPropertiesArrayOutput() MountTargetPropertiesArrayOutput {
	return i.ToMountTargetPropertiesArrayOutputWithContext(context.Background())
}

func (i MountTargetPropertiesArray) ToMountTargetPropertiesArrayOutputWithContext(ctx context.Context) MountTargetPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountTargetPropertiesArrayOutput)
}

// Mount target properties
type MountTargetPropertiesOutput struct{ *pulumi.OutputState }

func (MountTargetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountTargetProperties)(nil)).Elem()
}

func (o MountTargetPropertiesOutput) ToMountTargetPropertiesOutput() MountTargetPropertiesOutput {
	return o
}

func (o MountTargetPropertiesOutput) ToMountTargetPropertiesOutputWithContext(ctx context.Context) MountTargetPropertiesOutput {
	return o
}

// UUID v4 used to identify the MountTarget
func (o MountTargetPropertiesOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v MountTargetProperties) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The SMB server's Fully Qualified Domain Name, FQDN
func (o MountTargetPropertiesOutput) SmbServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountTargetProperties) *string { return v.SmbServerFqdn }).(pulumi.StringPtrOutput)
}

type MountTargetPropertiesArrayOutput struct{ *pulumi.OutputState }

func (MountTargetPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountTargetProperties)(nil)).Elem()
}

func (o MountTargetPropertiesArrayOutput) ToMountTargetPropertiesArrayOutput() MountTargetPropertiesArrayOutput {
	return o
}

func (o MountTargetPropertiesArrayOutput) ToMountTargetPropertiesArrayOutputWithContext(ctx context.Context) MountTargetPropertiesArrayOutput {
	return o
}

func (o MountTargetPropertiesArrayOutput) Index(i pulumi.IntInput) MountTargetPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MountTargetProperties {
		return vs[0].([]MountTargetProperties)[vs[1].(int)]
	}).(MountTargetPropertiesOutput)
}

// Mount target properties
type MountTargetPropertiesResponse struct {
	// UUID v4 used to identify the MountTarget
	FileSystemId string `pulumi:"fileSystemId"`
	// The mount target's IPv4 address
	IpAddress string `pulumi:"ipAddress"`
	// UUID v4 used to identify the MountTarget
	MountTargetId string `pulumi:"mountTargetId"`
	// The SMB server's Fully Qualified Domain Name, FQDN
	SmbServerFqdn *string `pulumi:"smbServerFqdn"`
}

// MountTargetPropertiesResponseInput is an input type that accepts MountTargetPropertiesResponseArgs and MountTargetPropertiesResponseOutput values.
// You can construct a concrete instance of `MountTargetPropertiesResponseInput` via:
//
//          MountTargetPropertiesResponseArgs{...}
type MountTargetPropertiesResponseInput interface {
	pulumi.Input

	ToMountTargetPropertiesResponseOutput() MountTargetPropertiesResponseOutput
	ToMountTargetPropertiesResponseOutputWithContext(context.Context) MountTargetPropertiesResponseOutput
}

// Mount target properties
type MountTargetPropertiesResponseArgs struct {
	// UUID v4 used to identify the MountTarget
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The mount target's IPv4 address
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// UUID v4 used to identify the MountTarget
	MountTargetId pulumi.StringInput `pulumi:"mountTargetId"`
	// The SMB server's Fully Qualified Domain Name, FQDN
	SmbServerFqdn pulumi.StringPtrInput `pulumi:"smbServerFqdn"`
}

func (MountTargetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountTargetPropertiesResponse)(nil)).Elem()
}

func (i MountTargetPropertiesResponseArgs) ToMountTargetPropertiesResponseOutput() MountTargetPropertiesResponseOutput {
	return i.ToMountTargetPropertiesResponseOutputWithContext(context.Background())
}

func (i MountTargetPropertiesResponseArgs) ToMountTargetPropertiesResponseOutputWithContext(ctx context.Context) MountTargetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountTargetPropertiesResponseOutput)
}

// MountTargetPropertiesResponseArrayInput is an input type that accepts MountTargetPropertiesResponseArray and MountTargetPropertiesResponseArrayOutput values.
// You can construct a concrete instance of `MountTargetPropertiesResponseArrayInput` via:
//
//          MountTargetPropertiesResponseArray{ MountTargetPropertiesResponseArgs{...} }
type MountTargetPropertiesResponseArrayInput interface {
	pulumi.Input

	ToMountTargetPropertiesResponseArrayOutput() MountTargetPropertiesResponseArrayOutput
	ToMountTargetPropertiesResponseArrayOutputWithContext(context.Context) MountTargetPropertiesResponseArrayOutput
}

type MountTargetPropertiesResponseArray []MountTargetPropertiesResponseInput

func (MountTargetPropertiesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountTargetPropertiesResponse)(nil)).Elem()
}

func (i MountTargetPropertiesResponseArray) ToMountTargetPropertiesResponseArrayOutput() MountTargetPropertiesResponseArrayOutput {
	return i.ToMountTargetPropertiesResponseArrayOutputWithContext(context.Background())
}

func (i MountTargetPropertiesResponseArray) ToMountTargetPropertiesResponseArrayOutputWithContext(ctx context.Context) MountTargetPropertiesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountTargetPropertiesResponseArrayOutput)
}

// Mount target properties
type MountTargetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MountTargetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountTargetPropertiesResponse)(nil)).Elem()
}

func (o MountTargetPropertiesResponseOutput) ToMountTargetPropertiesResponseOutput() MountTargetPropertiesResponseOutput {
	return o
}

func (o MountTargetPropertiesResponseOutput) ToMountTargetPropertiesResponseOutputWithContext(ctx context.Context) MountTargetPropertiesResponseOutput {
	return o
}

// UUID v4 used to identify the MountTarget
func (o MountTargetPropertiesResponseOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v MountTargetPropertiesResponse) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The mount target's IPv4 address
func (o MountTargetPropertiesResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v MountTargetPropertiesResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// UUID v4 used to identify the MountTarget
func (o MountTargetPropertiesResponseOutput) MountTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v MountTargetPropertiesResponse) string { return v.MountTargetId }).(pulumi.StringOutput)
}

// The SMB server's Fully Qualified Domain Name, FQDN
func (o MountTargetPropertiesResponseOutput) SmbServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountTargetPropertiesResponse) *string { return v.SmbServerFqdn }).(pulumi.StringPtrOutput)
}

type MountTargetPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (MountTargetPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountTargetPropertiesResponse)(nil)).Elem()
}

func (o MountTargetPropertiesResponseArrayOutput) ToMountTargetPropertiesResponseArrayOutput() MountTargetPropertiesResponseArrayOutput {
	return o
}

func (o MountTargetPropertiesResponseArrayOutput) ToMountTargetPropertiesResponseArrayOutputWithContext(ctx context.Context) MountTargetPropertiesResponseArrayOutput {
	return o
}

func (o MountTargetPropertiesResponseArrayOutput) Index(i pulumi.IntInput) MountTargetPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MountTargetPropertiesResponse {
		return vs[0].([]MountTargetPropertiesResponse)[vs[1].(int)]
	}).(MountTargetPropertiesResponseOutput)
}

// Replication properties
type ReplicationObject struct {
	// Indicates whether the local volume is the source or destination for the Volume Replication
	EndpointType *string `pulumi:"endpointType"`
	// The remote region for the other end of the Volume Replication.
	RemoteVolumeRegion *string `pulumi:"remoteVolumeRegion"`
	// The resource ID of the remote volume.
	RemoteVolumeResourceId string `pulumi:"remoteVolumeResourceId"`
	// Id
	ReplicationId *string `pulumi:"replicationId"`
	// Schedule
	ReplicationSchedule string `pulumi:"replicationSchedule"`
}

// ReplicationObjectInput is an input type that accepts ReplicationObjectArgs and ReplicationObjectOutput values.
// You can construct a concrete instance of `ReplicationObjectInput` via:
//
//          ReplicationObjectArgs{...}
type ReplicationObjectInput interface {
	pulumi.Input

	ToReplicationObjectOutput() ReplicationObjectOutput
	ToReplicationObjectOutputWithContext(context.Context) ReplicationObjectOutput
}

// Replication properties
type ReplicationObjectArgs struct {
	// Indicates whether the local volume is the source or destination for the Volume Replication
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The remote region for the other end of the Volume Replication.
	RemoteVolumeRegion pulumi.StringPtrInput `pulumi:"remoteVolumeRegion"`
	// The resource ID of the remote volume.
	RemoteVolumeResourceId pulumi.StringInput `pulumi:"remoteVolumeResourceId"`
	// Id
	ReplicationId pulumi.StringPtrInput `pulumi:"replicationId"`
	// Schedule
	ReplicationSchedule pulumi.StringInput `pulumi:"replicationSchedule"`
}

func (ReplicationObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationObject)(nil)).Elem()
}

func (i ReplicationObjectArgs) ToReplicationObjectOutput() ReplicationObjectOutput {
	return i.ToReplicationObjectOutputWithContext(context.Background())
}

func (i ReplicationObjectArgs) ToReplicationObjectOutputWithContext(ctx context.Context) ReplicationObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectOutput)
}

func (i ReplicationObjectArgs) ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput {
	return i.ToReplicationObjectPtrOutputWithContext(context.Background())
}

func (i ReplicationObjectArgs) ToReplicationObjectPtrOutputWithContext(ctx context.Context) ReplicationObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectOutput).ToReplicationObjectPtrOutputWithContext(ctx)
}

// ReplicationObjectPtrInput is an input type that accepts ReplicationObjectArgs, ReplicationObjectPtr and ReplicationObjectPtrOutput values.
// You can construct a concrete instance of `ReplicationObjectPtrInput` via:
//
//          ReplicationObjectArgs{...}
//
//  or:
//
//          nil
type ReplicationObjectPtrInput interface {
	pulumi.Input

	ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput
	ToReplicationObjectPtrOutputWithContext(context.Context) ReplicationObjectPtrOutput
}

type replicationObjectPtrType ReplicationObjectArgs

func ReplicationObjectPtr(v *ReplicationObjectArgs) ReplicationObjectPtrInput {
	return (*replicationObjectPtrType)(v)
}

func (*replicationObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationObject)(nil)).Elem()
}

func (i *replicationObjectPtrType) ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput {
	return i.ToReplicationObjectPtrOutputWithContext(context.Background())
}

func (i *replicationObjectPtrType) ToReplicationObjectPtrOutputWithContext(ctx context.Context) ReplicationObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectPtrOutput)
}

// Replication properties
type ReplicationObjectOutput struct{ *pulumi.OutputState }

func (ReplicationObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationObject)(nil)).Elem()
}

func (o ReplicationObjectOutput) ToReplicationObjectOutput() ReplicationObjectOutput {
	return o
}

func (o ReplicationObjectOutput) ToReplicationObjectOutputWithContext(ctx context.Context) ReplicationObjectOutput {
	return o
}

func (o ReplicationObjectOutput) ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput {
	return o.ToReplicationObjectPtrOutputWithContext(context.Background())
}

func (o ReplicationObjectOutput) ToReplicationObjectPtrOutputWithContext(ctx context.Context) ReplicationObjectPtrOutput {
	return o.ApplyT(func(v ReplicationObject) *ReplicationObject {
		return &v
	}).(ReplicationObjectPtrOutput)
}

// Indicates whether the local volume is the source or destination for the Volume Replication
func (o ReplicationObjectOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObject) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The remote region for the other end of the Volume Replication.
func (o ReplicationObjectOutput) RemoteVolumeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObject) *string { return v.RemoteVolumeRegion }).(pulumi.StringPtrOutput)
}

// The resource ID of the remote volume.
func (o ReplicationObjectOutput) RemoteVolumeResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationObject) string { return v.RemoteVolumeResourceId }).(pulumi.StringOutput)
}

// Id
func (o ReplicationObjectOutput) ReplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObject) *string { return v.ReplicationId }).(pulumi.StringPtrOutput)
}

// Schedule
func (o ReplicationObjectOutput) ReplicationSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationObject) string { return v.ReplicationSchedule }).(pulumi.StringOutput)
}

type ReplicationObjectPtrOutput struct{ *pulumi.OutputState }

func (ReplicationObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationObject)(nil)).Elem()
}

func (o ReplicationObjectPtrOutput) ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput {
	return o
}

func (o ReplicationObjectPtrOutput) ToReplicationObjectPtrOutputWithContext(ctx context.Context) ReplicationObjectPtrOutput {
	return o
}

func (o ReplicationObjectPtrOutput) Elem() ReplicationObjectOutput {
	return o.ApplyT(func(v *ReplicationObject) ReplicationObject { return *v }).(ReplicationObjectOutput)
}

// Indicates whether the local volume is the source or destination for the Volume Replication
func (o ReplicationObjectPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The remote region for the other end of the Volume Replication.
func (o ReplicationObjectPtrOutput) RemoteVolumeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return v.RemoteVolumeRegion
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the remote volume.
func (o ReplicationObjectPtrOutput) RemoteVolumeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteVolumeResourceId
	}).(pulumi.StringPtrOutput)
}

// Id
func (o ReplicationObjectPtrOutput) ReplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationId
	}).(pulumi.StringPtrOutput)
}

// Schedule
func (o ReplicationObjectPtrOutput) ReplicationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicationSchedule
	}).(pulumi.StringPtrOutput)
}

// Replication properties
type ReplicationObjectResponse struct {
	// Indicates whether the local volume is the source or destination for the Volume Replication
	EndpointType *string `pulumi:"endpointType"`
	// The remote region for the other end of the Volume Replication.
	RemoteVolumeRegion *string `pulumi:"remoteVolumeRegion"`
	// The resource ID of the remote volume.
	RemoteVolumeResourceId string `pulumi:"remoteVolumeResourceId"`
	// Id
	ReplicationId *string `pulumi:"replicationId"`
	// Schedule
	ReplicationSchedule string `pulumi:"replicationSchedule"`
}

// ReplicationObjectResponseInput is an input type that accepts ReplicationObjectResponseArgs and ReplicationObjectResponseOutput values.
// You can construct a concrete instance of `ReplicationObjectResponseInput` via:
//
//          ReplicationObjectResponseArgs{...}
type ReplicationObjectResponseInput interface {
	pulumi.Input

	ToReplicationObjectResponseOutput() ReplicationObjectResponseOutput
	ToReplicationObjectResponseOutputWithContext(context.Context) ReplicationObjectResponseOutput
}

// Replication properties
type ReplicationObjectResponseArgs struct {
	// Indicates whether the local volume is the source or destination for the Volume Replication
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The remote region for the other end of the Volume Replication.
	RemoteVolumeRegion pulumi.StringPtrInput `pulumi:"remoteVolumeRegion"`
	// The resource ID of the remote volume.
	RemoteVolumeResourceId pulumi.StringInput `pulumi:"remoteVolumeResourceId"`
	// Id
	ReplicationId pulumi.StringPtrInput `pulumi:"replicationId"`
	// Schedule
	ReplicationSchedule pulumi.StringInput `pulumi:"replicationSchedule"`
}

func (ReplicationObjectResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationObjectResponse)(nil)).Elem()
}

func (i ReplicationObjectResponseArgs) ToReplicationObjectResponseOutput() ReplicationObjectResponseOutput {
	return i.ToReplicationObjectResponseOutputWithContext(context.Background())
}

func (i ReplicationObjectResponseArgs) ToReplicationObjectResponseOutputWithContext(ctx context.Context) ReplicationObjectResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectResponseOutput)
}

func (i ReplicationObjectResponseArgs) ToReplicationObjectResponsePtrOutput() ReplicationObjectResponsePtrOutput {
	return i.ToReplicationObjectResponsePtrOutputWithContext(context.Background())
}

func (i ReplicationObjectResponseArgs) ToReplicationObjectResponsePtrOutputWithContext(ctx context.Context) ReplicationObjectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectResponseOutput).ToReplicationObjectResponsePtrOutputWithContext(ctx)
}

// ReplicationObjectResponsePtrInput is an input type that accepts ReplicationObjectResponseArgs, ReplicationObjectResponsePtr and ReplicationObjectResponsePtrOutput values.
// You can construct a concrete instance of `ReplicationObjectResponsePtrInput` via:
//
//          ReplicationObjectResponseArgs{...}
//
//  or:
//
//          nil
type ReplicationObjectResponsePtrInput interface {
	pulumi.Input

	ToReplicationObjectResponsePtrOutput() ReplicationObjectResponsePtrOutput
	ToReplicationObjectResponsePtrOutputWithContext(context.Context) ReplicationObjectResponsePtrOutput
}

type replicationObjectResponsePtrType ReplicationObjectResponseArgs

func ReplicationObjectResponsePtr(v *ReplicationObjectResponseArgs) ReplicationObjectResponsePtrInput {
	return (*replicationObjectResponsePtrType)(v)
}

func (*replicationObjectResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationObjectResponse)(nil)).Elem()
}

func (i *replicationObjectResponsePtrType) ToReplicationObjectResponsePtrOutput() ReplicationObjectResponsePtrOutput {
	return i.ToReplicationObjectResponsePtrOutputWithContext(context.Background())
}

func (i *replicationObjectResponsePtrType) ToReplicationObjectResponsePtrOutputWithContext(ctx context.Context) ReplicationObjectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectResponsePtrOutput)
}

// Replication properties
type ReplicationObjectResponseOutput struct{ *pulumi.OutputState }

func (ReplicationObjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationObjectResponse)(nil)).Elem()
}

func (o ReplicationObjectResponseOutput) ToReplicationObjectResponseOutput() ReplicationObjectResponseOutput {
	return o
}

func (o ReplicationObjectResponseOutput) ToReplicationObjectResponseOutputWithContext(ctx context.Context) ReplicationObjectResponseOutput {
	return o
}

func (o ReplicationObjectResponseOutput) ToReplicationObjectResponsePtrOutput() ReplicationObjectResponsePtrOutput {
	return o.ToReplicationObjectResponsePtrOutputWithContext(context.Background())
}

func (o ReplicationObjectResponseOutput) ToReplicationObjectResponsePtrOutputWithContext(ctx context.Context) ReplicationObjectResponsePtrOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) *ReplicationObjectResponse {
		return &v
	}).(ReplicationObjectResponsePtrOutput)
}

// Indicates whether the local volume is the source or destination for the Volume Replication
func (o ReplicationObjectResponseOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The remote region for the other end of the Volume Replication.
func (o ReplicationObjectResponseOutput) RemoteVolumeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) *string { return v.RemoteVolumeRegion }).(pulumi.StringPtrOutput)
}

// The resource ID of the remote volume.
func (o ReplicationObjectResponseOutput) RemoteVolumeResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) string { return v.RemoteVolumeResourceId }).(pulumi.StringOutput)
}

// Id
func (o ReplicationObjectResponseOutput) ReplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) *string { return v.ReplicationId }).(pulumi.StringPtrOutput)
}

// Schedule
func (o ReplicationObjectResponseOutput) ReplicationSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) string { return v.ReplicationSchedule }).(pulumi.StringOutput)
}

type ReplicationObjectResponsePtrOutput struct{ *pulumi.OutputState }

func (ReplicationObjectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationObjectResponse)(nil)).Elem()
}

func (o ReplicationObjectResponsePtrOutput) ToReplicationObjectResponsePtrOutput() ReplicationObjectResponsePtrOutput {
	return o
}

func (o ReplicationObjectResponsePtrOutput) ToReplicationObjectResponsePtrOutputWithContext(ctx context.Context) ReplicationObjectResponsePtrOutput {
	return o
}

func (o ReplicationObjectResponsePtrOutput) Elem() ReplicationObjectResponseOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) ReplicationObjectResponse { return *v }).(ReplicationObjectResponseOutput)
}

// Indicates whether the local volume is the source or destination for the Volume Replication
func (o ReplicationObjectResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The remote region for the other end of the Volume Replication.
func (o ReplicationObjectResponsePtrOutput) RemoteVolumeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.RemoteVolumeRegion
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the remote volume.
func (o ReplicationObjectResponsePtrOutput) RemoteVolumeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteVolumeResourceId
	}).(pulumi.StringPtrOutput)
}

// Id
func (o ReplicationObjectResponsePtrOutput) ReplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationId
	}).(pulumi.StringPtrOutput)
}

// Schedule
func (o ReplicationObjectResponsePtrOutput) ReplicationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicationSchedule
	}).(pulumi.StringPtrOutput)
}

// Volume Backup Properties
type VolumeBackupProperties struct {
	// Backup Enabled
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Backup Policy Resource ID
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// Policy Enforced
	PolicyEnforced *bool `pulumi:"policyEnforced"`
	// Vault Resource ID
	VaultId *string `pulumi:"vaultId"`
}

// VolumeBackupPropertiesInput is an input type that accepts VolumeBackupPropertiesArgs and VolumeBackupPropertiesOutput values.
// You can construct a concrete instance of `VolumeBackupPropertiesInput` via:
//
//          VolumeBackupPropertiesArgs{...}
type VolumeBackupPropertiesInput interface {
	pulumi.Input

	ToVolumeBackupPropertiesOutput() VolumeBackupPropertiesOutput
	ToVolumeBackupPropertiesOutputWithContext(context.Context) VolumeBackupPropertiesOutput
}

// Volume Backup Properties
type VolumeBackupPropertiesArgs struct {
	// Backup Enabled
	BackupEnabled pulumi.BoolPtrInput `pulumi:"backupEnabled"`
	// Backup Policy Resource ID
	BackupPolicyId pulumi.StringPtrInput `pulumi:"backupPolicyId"`
	// Policy Enforced
	PolicyEnforced pulumi.BoolPtrInput `pulumi:"policyEnforced"`
	// Vault Resource ID
	VaultId pulumi.StringPtrInput `pulumi:"vaultId"`
}

func (VolumeBackupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupProperties)(nil)).Elem()
}

func (i VolumeBackupPropertiesArgs) ToVolumeBackupPropertiesOutput() VolumeBackupPropertiesOutput {
	return i.ToVolumeBackupPropertiesOutputWithContext(context.Background())
}

func (i VolumeBackupPropertiesArgs) ToVolumeBackupPropertiesOutputWithContext(ctx context.Context) VolumeBackupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesOutput)
}

func (i VolumeBackupPropertiesArgs) ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput {
	return i.ToVolumeBackupPropertiesPtrOutputWithContext(context.Background())
}

func (i VolumeBackupPropertiesArgs) ToVolumeBackupPropertiesPtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesOutput).ToVolumeBackupPropertiesPtrOutputWithContext(ctx)
}

// VolumeBackupPropertiesPtrInput is an input type that accepts VolumeBackupPropertiesArgs, VolumeBackupPropertiesPtr and VolumeBackupPropertiesPtrOutput values.
// You can construct a concrete instance of `VolumeBackupPropertiesPtrInput` via:
//
//          VolumeBackupPropertiesArgs{...}
//
//  or:
//
//          nil
type VolumeBackupPropertiesPtrInput interface {
	pulumi.Input

	ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput
	ToVolumeBackupPropertiesPtrOutputWithContext(context.Context) VolumeBackupPropertiesPtrOutput
}

type volumeBackupPropertiesPtrType VolumeBackupPropertiesArgs

func VolumeBackupPropertiesPtr(v *VolumeBackupPropertiesArgs) VolumeBackupPropertiesPtrInput {
	return (*volumeBackupPropertiesPtrType)(v)
}

func (*volumeBackupPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupProperties)(nil)).Elem()
}

func (i *volumeBackupPropertiesPtrType) ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput {
	return i.ToVolumeBackupPropertiesPtrOutputWithContext(context.Background())
}

func (i *volumeBackupPropertiesPtrType) ToVolumeBackupPropertiesPtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesPtrOutput)
}

// Volume Backup Properties
type VolumeBackupPropertiesOutput struct{ *pulumi.OutputState }

func (VolumeBackupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupProperties)(nil)).Elem()
}

func (o VolumeBackupPropertiesOutput) ToVolumeBackupPropertiesOutput() VolumeBackupPropertiesOutput {
	return o
}

func (o VolumeBackupPropertiesOutput) ToVolumeBackupPropertiesOutputWithContext(ctx context.Context) VolumeBackupPropertiesOutput {
	return o
}

func (o VolumeBackupPropertiesOutput) ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput {
	return o.ToVolumeBackupPropertiesPtrOutputWithContext(context.Background())
}

func (o VolumeBackupPropertiesOutput) ToVolumeBackupPropertiesPtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *VolumeBackupProperties {
		return &v
	}).(VolumeBackupPropertiesPtrOutput)
}

// Backup Enabled
func (o VolumeBackupPropertiesOutput) BackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *bool { return v.BackupEnabled }).(pulumi.BoolPtrOutput)
}

// Backup Policy Resource ID
func (o VolumeBackupPropertiesOutput) BackupPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *string { return v.BackupPolicyId }).(pulumi.StringPtrOutput)
}

// Policy Enforced
func (o VolumeBackupPropertiesOutput) PolicyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *bool { return v.PolicyEnforced }).(pulumi.BoolPtrOutput)
}

// Vault Resource ID
func (o VolumeBackupPropertiesOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *string { return v.VaultId }).(pulumi.StringPtrOutput)
}

type VolumeBackupPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VolumeBackupPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupProperties)(nil)).Elem()
}

func (o VolumeBackupPropertiesPtrOutput) ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput {
	return o
}

func (o VolumeBackupPropertiesPtrOutput) ToVolumeBackupPropertiesPtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesPtrOutput {
	return o
}

func (o VolumeBackupPropertiesPtrOutput) Elem() VolumeBackupPropertiesOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) VolumeBackupProperties { return *v }).(VolumeBackupPropertiesOutput)
}

// Backup Enabled
func (o VolumeBackupPropertiesPtrOutput) BackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) *bool {
		if v == nil {
			return nil
		}
		return v.BackupEnabled
	}).(pulumi.BoolPtrOutput)
}

// Backup Policy Resource ID
func (o VolumeBackupPropertiesPtrOutput) BackupPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) *string {
		if v == nil {
			return nil
		}
		return v.BackupPolicyId
	}).(pulumi.StringPtrOutput)
}

// Policy Enforced
func (o VolumeBackupPropertiesPtrOutput) PolicyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) *bool {
		if v == nil {
			return nil
		}
		return v.PolicyEnforced
	}).(pulumi.BoolPtrOutput)
}

// Vault Resource ID
func (o VolumeBackupPropertiesPtrOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) *string {
		if v == nil {
			return nil
		}
		return v.VaultId
	}).(pulumi.StringPtrOutput)
}

// Volume Backup Properties
type VolumeBackupPropertiesResponse struct {
	// Backup Enabled
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Backup Policy Resource ID
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// Policy Enforced
	PolicyEnforced *bool `pulumi:"policyEnforced"`
	// Vault Resource ID
	VaultId *string `pulumi:"vaultId"`
}

// VolumeBackupPropertiesResponseInput is an input type that accepts VolumeBackupPropertiesResponseArgs and VolumeBackupPropertiesResponseOutput values.
// You can construct a concrete instance of `VolumeBackupPropertiesResponseInput` via:
//
//          VolumeBackupPropertiesResponseArgs{...}
type VolumeBackupPropertiesResponseInput interface {
	pulumi.Input

	ToVolumeBackupPropertiesResponseOutput() VolumeBackupPropertiesResponseOutput
	ToVolumeBackupPropertiesResponseOutputWithContext(context.Context) VolumeBackupPropertiesResponseOutput
}

// Volume Backup Properties
type VolumeBackupPropertiesResponseArgs struct {
	// Backup Enabled
	BackupEnabled pulumi.BoolPtrInput `pulumi:"backupEnabled"`
	// Backup Policy Resource ID
	BackupPolicyId pulumi.StringPtrInput `pulumi:"backupPolicyId"`
	// Policy Enforced
	PolicyEnforced pulumi.BoolPtrInput `pulumi:"policyEnforced"`
	// Vault Resource ID
	VaultId pulumi.StringPtrInput `pulumi:"vaultId"`
}

func (VolumeBackupPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupPropertiesResponse)(nil)).Elem()
}

func (i VolumeBackupPropertiesResponseArgs) ToVolumeBackupPropertiesResponseOutput() VolumeBackupPropertiesResponseOutput {
	return i.ToVolumeBackupPropertiesResponseOutputWithContext(context.Background())
}

func (i VolumeBackupPropertiesResponseArgs) ToVolumeBackupPropertiesResponseOutputWithContext(ctx context.Context) VolumeBackupPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesResponseOutput)
}

func (i VolumeBackupPropertiesResponseArgs) ToVolumeBackupPropertiesResponsePtrOutput() VolumeBackupPropertiesResponsePtrOutput {
	return i.ToVolumeBackupPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i VolumeBackupPropertiesResponseArgs) ToVolumeBackupPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesResponseOutput).ToVolumeBackupPropertiesResponsePtrOutputWithContext(ctx)
}

// VolumeBackupPropertiesResponsePtrInput is an input type that accepts VolumeBackupPropertiesResponseArgs, VolumeBackupPropertiesResponsePtr and VolumeBackupPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `VolumeBackupPropertiesResponsePtrInput` via:
//
//          VolumeBackupPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type VolumeBackupPropertiesResponsePtrInput interface {
	pulumi.Input

	ToVolumeBackupPropertiesResponsePtrOutput() VolumeBackupPropertiesResponsePtrOutput
	ToVolumeBackupPropertiesResponsePtrOutputWithContext(context.Context) VolumeBackupPropertiesResponsePtrOutput
}

type volumeBackupPropertiesResponsePtrType VolumeBackupPropertiesResponseArgs

func VolumeBackupPropertiesResponsePtr(v *VolumeBackupPropertiesResponseArgs) VolumeBackupPropertiesResponsePtrInput {
	return (*volumeBackupPropertiesResponsePtrType)(v)
}

func (*volumeBackupPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupPropertiesResponse)(nil)).Elem()
}

func (i *volumeBackupPropertiesResponsePtrType) ToVolumeBackupPropertiesResponsePtrOutput() VolumeBackupPropertiesResponsePtrOutput {
	return i.ToVolumeBackupPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *volumeBackupPropertiesResponsePtrType) ToVolumeBackupPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesResponsePtrOutput)
}

// Volume Backup Properties
type VolumeBackupPropertiesResponseOutput struct{ *pulumi.OutputState }

func (VolumeBackupPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupPropertiesResponse)(nil)).Elem()
}

func (o VolumeBackupPropertiesResponseOutput) ToVolumeBackupPropertiesResponseOutput() VolumeBackupPropertiesResponseOutput {
	return o
}

func (o VolumeBackupPropertiesResponseOutput) ToVolumeBackupPropertiesResponseOutputWithContext(ctx context.Context) VolumeBackupPropertiesResponseOutput {
	return o
}

func (o VolumeBackupPropertiesResponseOutput) ToVolumeBackupPropertiesResponsePtrOutput() VolumeBackupPropertiesResponsePtrOutput {
	return o.ToVolumeBackupPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o VolumeBackupPropertiesResponseOutput) ToVolumeBackupPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesResponsePtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *VolumeBackupPropertiesResponse {
		return &v
	}).(VolumeBackupPropertiesResponsePtrOutput)
}

// Backup Enabled
func (o VolumeBackupPropertiesResponseOutput) BackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *bool { return v.BackupEnabled }).(pulumi.BoolPtrOutput)
}

// Backup Policy Resource ID
func (o VolumeBackupPropertiesResponseOutput) BackupPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *string { return v.BackupPolicyId }).(pulumi.StringPtrOutput)
}

// Policy Enforced
func (o VolumeBackupPropertiesResponseOutput) PolicyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *bool { return v.PolicyEnforced }).(pulumi.BoolPtrOutput)
}

// Vault Resource ID
func (o VolumeBackupPropertiesResponseOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *string { return v.VaultId }).(pulumi.StringPtrOutput)
}

type VolumeBackupPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeBackupPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupPropertiesResponse)(nil)).Elem()
}

func (o VolumeBackupPropertiesResponsePtrOutput) ToVolumeBackupPropertiesResponsePtrOutput() VolumeBackupPropertiesResponsePtrOutput {
	return o
}

func (o VolumeBackupPropertiesResponsePtrOutput) ToVolumeBackupPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesResponsePtrOutput {
	return o
}

func (o VolumeBackupPropertiesResponsePtrOutput) Elem() VolumeBackupPropertiesResponseOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) VolumeBackupPropertiesResponse { return *v }).(VolumeBackupPropertiesResponseOutput)
}

// Backup Enabled
func (o VolumeBackupPropertiesResponsePtrOutput) BackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BackupEnabled
	}).(pulumi.BoolPtrOutput)
}

// Backup Policy Resource ID
func (o VolumeBackupPropertiesResponsePtrOutput) BackupPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackupPolicyId
	}).(pulumi.StringPtrOutput)
}

// Policy Enforced
func (o VolumeBackupPropertiesResponsePtrOutput) PolicyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.PolicyEnforced
	}).(pulumi.BoolPtrOutput)
}

// Vault Resource ID
func (o VolumeBackupPropertiesResponsePtrOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VaultId
	}).(pulumi.StringPtrOutput)
}

// Volume details using the backup policy
type VolumeBackups struct {
	// Total count of backups for volume
	BackupsCount *int `pulumi:"backupsCount"`
	// Policy enabled
	PolicyEnabled *bool `pulumi:"policyEnabled"`
	// Volume name
	VolumeName *string `pulumi:"volumeName"`
}

// VolumeBackupsInput is an input type that accepts VolumeBackupsArgs and VolumeBackupsOutput values.
// You can construct a concrete instance of `VolumeBackupsInput` via:
//
//          VolumeBackupsArgs{...}
type VolumeBackupsInput interface {
	pulumi.Input

	ToVolumeBackupsOutput() VolumeBackupsOutput
	ToVolumeBackupsOutputWithContext(context.Context) VolumeBackupsOutput
}

// Volume details using the backup policy
type VolumeBackupsArgs struct {
	// Total count of backups for volume
	BackupsCount pulumi.IntPtrInput `pulumi:"backupsCount"`
	// Policy enabled
	PolicyEnabled pulumi.BoolPtrInput `pulumi:"policyEnabled"`
	// Volume name
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (VolumeBackupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackups)(nil)).Elem()
}

func (i VolumeBackupsArgs) ToVolumeBackupsOutput() VolumeBackupsOutput {
	return i.ToVolumeBackupsOutputWithContext(context.Background())
}

func (i VolumeBackupsArgs) ToVolumeBackupsOutputWithContext(ctx context.Context) VolumeBackupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupsOutput)
}

// VolumeBackupsArrayInput is an input type that accepts VolumeBackupsArray and VolumeBackupsArrayOutput values.
// You can construct a concrete instance of `VolumeBackupsArrayInput` via:
//
//          VolumeBackupsArray{ VolumeBackupsArgs{...} }
type VolumeBackupsArrayInput interface {
	pulumi.Input

	ToVolumeBackupsArrayOutput() VolumeBackupsArrayOutput
	ToVolumeBackupsArrayOutputWithContext(context.Context) VolumeBackupsArrayOutput
}

type VolumeBackupsArray []VolumeBackupsInput

func (VolumeBackupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeBackups)(nil)).Elem()
}

func (i VolumeBackupsArray) ToVolumeBackupsArrayOutput() VolumeBackupsArrayOutput {
	return i.ToVolumeBackupsArrayOutputWithContext(context.Background())
}

func (i VolumeBackupsArray) ToVolumeBackupsArrayOutputWithContext(ctx context.Context) VolumeBackupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupsArrayOutput)
}

// Volume details using the backup policy
type VolumeBackupsOutput struct{ *pulumi.OutputState }

func (VolumeBackupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackups)(nil)).Elem()
}

func (o VolumeBackupsOutput) ToVolumeBackupsOutput() VolumeBackupsOutput {
	return o
}

func (o VolumeBackupsOutput) ToVolumeBackupsOutputWithContext(ctx context.Context) VolumeBackupsOutput {
	return o
}

// Total count of backups for volume
func (o VolumeBackupsOutput) BackupsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeBackups) *int { return v.BackupsCount }).(pulumi.IntPtrOutput)
}

// Policy enabled
func (o VolumeBackupsOutput) PolicyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackups) *bool { return v.PolicyEnabled }).(pulumi.BoolPtrOutput)
}

// Volume name
func (o VolumeBackupsOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackups) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type VolumeBackupsArrayOutput struct{ *pulumi.OutputState }

func (VolumeBackupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeBackups)(nil)).Elem()
}

func (o VolumeBackupsArrayOutput) ToVolumeBackupsArrayOutput() VolumeBackupsArrayOutput {
	return o
}

func (o VolumeBackupsArrayOutput) ToVolumeBackupsArrayOutputWithContext(ctx context.Context) VolumeBackupsArrayOutput {
	return o
}

func (o VolumeBackupsArrayOutput) Index(i pulumi.IntInput) VolumeBackupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeBackups {
		return vs[0].([]VolumeBackups)[vs[1].(int)]
	}).(VolumeBackupsOutput)
}

// Volume details using the backup policy
type VolumeBackupsResponse struct {
	// Total count of backups for volume
	BackupsCount *int `pulumi:"backupsCount"`
	// Policy enabled
	PolicyEnabled *bool `pulumi:"policyEnabled"`
	// Volume name
	VolumeName *string `pulumi:"volumeName"`
}

// VolumeBackupsResponseInput is an input type that accepts VolumeBackupsResponseArgs and VolumeBackupsResponseOutput values.
// You can construct a concrete instance of `VolumeBackupsResponseInput` via:
//
//          VolumeBackupsResponseArgs{...}
type VolumeBackupsResponseInput interface {
	pulumi.Input

	ToVolumeBackupsResponseOutput() VolumeBackupsResponseOutput
	ToVolumeBackupsResponseOutputWithContext(context.Context) VolumeBackupsResponseOutput
}

// Volume details using the backup policy
type VolumeBackupsResponseArgs struct {
	// Total count of backups for volume
	BackupsCount pulumi.IntPtrInput `pulumi:"backupsCount"`
	// Policy enabled
	PolicyEnabled pulumi.BoolPtrInput `pulumi:"policyEnabled"`
	// Volume name
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (VolumeBackupsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupsResponse)(nil)).Elem()
}

func (i VolumeBackupsResponseArgs) ToVolumeBackupsResponseOutput() VolumeBackupsResponseOutput {
	return i.ToVolumeBackupsResponseOutputWithContext(context.Background())
}

func (i VolumeBackupsResponseArgs) ToVolumeBackupsResponseOutputWithContext(ctx context.Context) VolumeBackupsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupsResponseOutput)
}

// VolumeBackupsResponseArrayInput is an input type that accepts VolumeBackupsResponseArray and VolumeBackupsResponseArrayOutput values.
// You can construct a concrete instance of `VolumeBackupsResponseArrayInput` via:
//
//          VolumeBackupsResponseArray{ VolumeBackupsResponseArgs{...} }
type VolumeBackupsResponseArrayInput interface {
	pulumi.Input

	ToVolumeBackupsResponseArrayOutput() VolumeBackupsResponseArrayOutput
	ToVolumeBackupsResponseArrayOutputWithContext(context.Context) VolumeBackupsResponseArrayOutput
}

type VolumeBackupsResponseArray []VolumeBackupsResponseInput

func (VolumeBackupsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeBackupsResponse)(nil)).Elem()
}

func (i VolumeBackupsResponseArray) ToVolumeBackupsResponseArrayOutput() VolumeBackupsResponseArrayOutput {
	return i.ToVolumeBackupsResponseArrayOutputWithContext(context.Background())
}

func (i VolumeBackupsResponseArray) ToVolumeBackupsResponseArrayOutputWithContext(ctx context.Context) VolumeBackupsResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupsResponseArrayOutput)
}

// Volume details using the backup policy
type VolumeBackupsResponseOutput struct{ *pulumi.OutputState }

func (VolumeBackupsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupsResponse)(nil)).Elem()
}

func (o VolumeBackupsResponseOutput) ToVolumeBackupsResponseOutput() VolumeBackupsResponseOutput {
	return o
}

func (o VolumeBackupsResponseOutput) ToVolumeBackupsResponseOutputWithContext(ctx context.Context) VolumeBackupsResponseOutput {
	return o
}

// Total count of backups for volume
func (o VolumeBackupsResponseOutput) BackupsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeBackupsResponse) *int { return v.BackupsCount }).(pulumi.IntPtrOutput)
}

// Policy enabled
func (o VolumeBackupsResponseOutput) PolicyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupsResponse) *bool { return v.PolicyEnabled }).(pulumi.BoolPtrOutput)
}

// Volume name
func (o VolumeBackupsResponseOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupsResponse) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type VolumeBackupsResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeBackupsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeBackupsResponse)(nil)).Elem()
}

func (o VolumeBackupsResponseArrayOutput) ToVolumeBackupsResponseArrayOutput() VolumeBackupsResponseArrayOutput {
	return o
}

func (o VolumeBackupsResponseArrayOutput) ToVolumeBackupsResponseArrayOutputWithContext(ctx context.Context) VolumeBackupsResponseArrayOutput {
	return o
}

func (o VolumeBackupsResponseArrayOutput) Index(i pulumi.IntInput) VolumeBackupsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeBackupsResponse {
		return vs[0].([]VolumeBackupsResponse)[vs[1].(int)]
	}).(VolumeBackupsResponseOutput)
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesDataProtection struct {
	// Backup Properties
	Backup *VolumeBackupProperties `pulumi:"backup"`
	// Replication properties
	Replication *ReplicationObject `pulumi:"replication"`
	// Snapshot properties.
	Snapshot *VolumeSnapshotProperties `pulumi:"snapshot"`
}

// VolumePropertiesDataProtectionInput is an input type that accepts VolumePropertiesDataProtectionArgs and VolumePropertiesDataProtectionOutput values.
// You can construct a concrete instance of `VolumePropertiesDataProtectionInput` via:
//
//          VolumePropertiesDataProtectionArgs{...}
type VolumePropertiesDataProtectionInput interface {
	pulumi.Input

	ToVolumePropertiesDataProtectionOutput() VolumePropertiesDataProtectionOutput
	ToVolumePropertiesDataProtectionOutputWithContext(context.Context) VolumePropertiesDataProtectionOutput
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesDataProtectionArgs struct {
	// Backup Properties
	Backup VolumeBackupPropertiesPtrInput `pulumi:"backup"`
	// Replication properties
	Replication ReplicationObjectPtrInput `pulumi:"replication"`
	// Snapshot properties.
	Snapshot VolumeSnapshotPropertiesPtrInput `pulumi:"snapshot"`
}

func (VolumePropertiesDataProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesDataProtection)(nil)).Elem()
}

func (i VolumePropertiesDataProtectionArgs) ToVolumePropertiesDataProtectionOutput() VolumePropertiesDataProtectionOutput {
	return i.ToVolumePropertiesDataProtectionOutputWithContext(context.Background())
}

func (i VolumePropertiesDataProtectionArgs) ToVolumePropertiesDataProtectionOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesDataProtectionOutput)
}

func (i VolumePropertiesDataProtectionArgs) ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput {
	return i.ToVolumePropertiesDataProtectionPtrOutputWithContext(context.Background())
}

func (i VolumePropertiesDataProtectionArgs) ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesDataProtectionOutput).ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx)
}

// VolumePropertiesDataProtectionPtrInput is an input type that accepts VolumePropertiesDataProtectionArgs, VolumePropertiesDataProtectionPtr and VolumePropertiesDataProtectionPtrOutput values.
// You can construct a concrete instance of `VolumePropertiesDataProtectionPtrInput` via:
//
//          VolumePropertiesDataProtectionArgs{...}
//
//  or:
//
//          nil
type VolumePropertiesDataProtectionPtrInput interface {
	pulumi.Input

	ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput
	ToVolumePropertiesDataProtectionPtrOutputWithContext(context.Context) VolumePropertiesDataProtectionPtrOutput
}

type volumePropertiesDataProtectionPtrType VolumePropertiesDataProtectionArgs

func VolumePropertiesDataProtectionPtr(v *VolumePropertiesDataProtectionArgs) VolumePropertiesDataProtectionPtrInput {
	return (*volumePropertiesDataProtectionPtrType)(v)
}

func (*volumePropertiesDataProtectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesDataProtection)(nil)).Elem()
}

func (i *volumePropertiesDataProtectionPtrType) ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput {
	return i.ToVolumePropertiesDataProtectionPtrOutputWithContext(context.Background())
}

func (i *volumePropertiesDataProtectionPtrType) ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesDataProtectionPtrOutput)
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesDataProtectionOutput struct{ *pulumi.OutputState }

func (VolumePropertiesDataProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesDataProtection)(nil)).Elem()
}

func (o VolumePropertiesDataProtectionOutput) ToVolumePropertiesDataProtectionOutput() VolumePropertiesDataProtectionOutput {
	return o
}

func (o VolumePropertiesDataProtectionOutput) ToVolumePropertiesDataProtectionOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionOutput {
	return o
}

func (o VolumePropertiesDataProtectionOutput) ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput {
	return o.ToVolumePropertiesDataProtectionPtrOutputWithContext(context.Background())
}

func (o VolumePropertiesDataProtectionOutput) ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionPtrOutput {
	return o.ApplyT(func(v VolumePropertiesDataProtection) *VolumePropertiesDataProtection {
		return &v
	}).(VolumePropertiesDataProtectionPtrOutput)
}

// Backup Properties
func (o VolumePropertiesDataProtectionOutput) Backup() VolumeBackupPropertiesPtrOutput {
	return o.ApplyT(func(v VolumePropertiesDataProtection) *VolumeBackupProperties { return v.Backup }).(VolumeBackupPropertiesPtrOutput)
}

// Replication properties
func (o VolumePropertiesDataProtectionOutput) Replication() ReplicationObjectPtrOutput {
	return o.ApplyT(func(v VolumePropertiesDataProtection) *ReplicationObject { return v.Replication }).(ReplicationObjectPtrOutput)
}

// Snapshot properties.
func (o VolumePropertiesDataProtectionOutput) Snapshot() VolumeSnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v VolumePropertiesDataProtection) *VolumeSnapshotProperties { return v.Snapshot }).(VolumeSnapshotPropertiesPtrOutput)
}

type VolumePropertiesDataProtectionPtrOutput struct{ *pulumi.OutputState }

func (VolumePropertiesDataProtectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesDataProtection)(nil)).Elem()
}

func (o VolumePropertiesDataProtectionPtrOutput) ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput {
	return o
}

func (o VolumePropertiesDataProtectionPtrOutput) ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionPtrOutput {
	return o
}

func (o VolumePropertiesDataProtectionPtrOutput) Elem() VolumePropertiesDataProtectionOutput {
	return o.ApplyT(func(v *VolumePropertiesDataProtection) VolumePropertiesDataProtection { return *v }).(VolumePropertiesDataProtectionOutput)
}

// Backup Properties
func (o VolumePropertiesDataProtectionPtrOutput) Backup() VolumeBackupPropertiesPtrOutput {
	return o.ApplyT(func(v *VolumePropertiesDataProtection) *VolumeBackupProperties {
		if v == nil {
			return nil
		}
		return v.Backup
	}).(VolumeBackupPropertiesPtrOutput)
}

// Replication properties
func (o VolumePropertiesDataProtectionPtrOutput) Replication() ReplicationObjectPtrOutput {
	return o.ApplyT(func(v *VolumePropertiesDataProtection) *ReplicationObject {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(ReplicationObjectPtrOutput)
}

// Snapshot properties.
func (o VolumePropertiesDataProtectionPtrOutput) Snapshot() VolumeSnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v *VolumePropertiesDataProtection) *VolumeSnapshotProperties {
		if v == nil {
			return nil
		}
		return v.Snapshot
	}).(VolumeSnapshotPropertiesPtrOutput)
}

// Set of export policy rules
type VolumePropertiesExportPolicy struct {
	// Export policy rule
	Rules []ExportPolicyRule `pulumi:"rules"`
}

// VolumePropertiesExportPolicyInput is an input type that accepts VolumePropertiesExportPolicyArgs and VolumePropertiesExportPolicyOutput values.
// You can construct a concrete instance of `VolumePropertiesExportPolicyInput` via:
//
//          VolumePropertiesExportPolicyArgs{...}
type VolumePropertiesExportPolicyInput interface {
	pulumi.Input

	ToVolumePropertiesExportPolicyOutput() VolumePropertiesExportPolicyOutput
	ToVolumePropertiesExportPolicyOutputWithContext(context.Context) VolumePropertiesExportPolicyOutput
}

// Set of export policy rules
type VolumePropertiesExportPolicyArgs struct {
	// Export policy rule
	Rules ExportPolicyRuleArrayInput `pulumi:"rules"`
}

func (VolumePropertiesExportPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesExportPolicy)(nil)).Elem()
}

func (i VolumePropertiesExportPolicyArgs) ToVolumePropertiesExportPolicyOutput() VolumePropertiesExportPolicyOutput {
	return i.ToVolumePropertiesExportPolicyOutputWithContext(context.Background())
}

func (i VolumePropertiesExportPolicyArgs) ToVolumePropertiesExportPolicyOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesExportPolicyOutput)
}

func (i VolumePropertiesExportPolicyArgs) ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput {
	return i.ToVolumePropertiesExportPolicyPtrOutputWithContext(context.Background())
}

func (i VolumePropertiesExportPolicyArgs) ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesExportPolicyOutput).ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx)
}

// VolumePropertiesExportPolicyPtrInput is an input type that accepts VolumePropertiesExportPolicyArgs, VolumePropertiesExportPolicyPtr and VolumePropertiesExportPolicyPtrOutput values.
// You can construct a concrete instance of `VolumePropertiesExportPolicyPtrInput` via:
//
//          VolumePropertiesExportPolicyArgs{...}
//
//  or:
//
//          nil
type VolumePropertiesExportPolicyPtrInput interface {
	pulumi.Input

	ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput
	ToVolumePropertiesExportPolicyPtrOutputWithContext(context.Context) VolumePropertiesExportPolicyPtrOutput
}

type volumePropertiesExportPolicyPtrType VolumePropertiesExportPolicyArgs

func VolumePropertiesExportPolicyPtr(v *VolumePropertiesExportPolicyArgs) VolumePropertiesExportPolicyPtrInput {
	return (*volumePropertiesExportPolicyPtrType)(v)
}

func (*volumePropertiesExportPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesExportPolicy)(nil)).Elem()
}

func (i *volumePropertiesExportPolicyPtrType) ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput {
	return i.ToVolumePropertiesExportPolicyPtrOutputWithContext(context.Background())
}

func (i *volumePropertiesExportPolicyPtrType) ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesExportPolicyPtrOutput)
}

// Set of export policy rules
type VolumePropertiesExportPolicyOutput struct{ *pulumi.OutputState }

func (VolumePropertiesExportPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesExportPolicy)(nil)).Elem()
}

func (o VolumePropertiesExportPolicyOutput) ToVolumePropertiesExportPolicyOutput() VolumePropertiesExportPolicyOutput {
	return o
}

func (o VolumePropertiesExportPolicyOutput) ToVolumePropertiesExportPolicyOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyOutput {
	return o
}

func (o VolumePropertiesExportPolicyOutput) ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput {
	return o.ToVolumePropertiesExportPolicyPtrOutputWithContext(context.Background())
}

func (o VolumePropertiesExportPolicyOutput) ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyPtrOutput {
	return o.ApplyT(func(v VolumePropertiesExportPolicy) *VolumePropertiesExportPolicy {
		return &v
	}).(VolumePropertiesExportPolicyPtrOutput)
}

// Export policy rule
func (o VolumePropertiesExportPolicyOutput) Rules() ExportPolicyRuleArrayOutput {
	return o.ApplyT(func(v VolumePropertiesExportPolicy) []ExportPolicyRule { return v.Rules }).(ExportPolicyRuleArrayOutput)
}

type VolumePropertiesExportPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumePropertiesExportPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesExportPolicy)(nil)).Elem()
}

func (o VolumePropertiesExportPolicyPtrOutput) ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput {
	return o
}

func (o VolumePropertiesExportPolicyPtrOutput) ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyPtrOutput {
	return o
}

func (o VolumePropertiesExportPolicyPtrOutput) Elem() VolumePropertiesExportPolicyOutput {
	return o.ApplyT(func(v *VolumePropertiesExportPolicy) VolumePropertiesExportPolicy { return *v }).(VolumePropertiesExportPolicyOutput)
}

// Export policy rule
func (o VolumePropertiesExportPolicyPtrOutput) Rules() ExportPolicyRuleArrayOutput {
	return o.ApplyT(func(v *VolumePropertiesExportPolicy) []ExportPolicyRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(ExportPolicyRuleArrayOutput)
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesResponseDataProtection struct {
	// Backup Properties
	Backup *VolumeBackupPropertiesResponse `pulumi:"backup"`
	// Replication properties
	Replication *ReplicationObjectResponse `pulumi:"replication"`
	// Snapshot properties.
	Snapshot *VolumeSnapshotPropertiesResponse `pulumi:"snapshot"`
}

// VolumePropertiesResponseDataProtectionInput is an input type that accepts VolumePropertiesResponseDataProtectionArgs and VolumePropertiesResponseDataProtectionOutput values.
// You can construct a concrete instance of `VolumePropertiesResponseDataProtectionInput` via:
//
//          VolumePropertiesResponseDataProtectionArgs{...}
type VolumePropertiesResponseDataProtectionInput interface {
	pulumi.Input

	ToVolumePropertiesResponseDataProtectionOutput() VolumePropertiesResponseDataProtectionOutput
	ToVolumePropertiesResponseDataProtectionOutputWithContext(context.Context) VolumePropertiesResponseDataProtectionOutput
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesResponseDataProtectionArgs struct {
	// Backup Properties
	Backup VolumeBackupPropertiesResponsePtrInput `pulumi:"backup"`
	// Replication properties
	Replication ReplicationObjectResponsePtrInput `pulumi:"replication"`
	// Snapshot properties.
	Snapshot VolumeSnapshotPropertiesResponsePtrInput `pulumi:"snapshot"`
}

func (VolumePropertiesResponseDataProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesResponseDataProtection)(nil)).Elem()
}

func (i VolumePropertiesResponseDataProtectionArgs) ToVolumePropertiesResponseDataProtectionOutput() VolumePropertiesResponseDataProtectionOutput {
	return i.ToVolumePropertiesResponseDataProtectionOutputWithContext(context.Background())
}

func (i VolumePropertiesResponseDataProtectionArgs) ToVolumePropertiesResponseDataProtectionOutputWithContext(ctx context.Context) VolumePropertiesResponseDataProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesResponseDataProtectionOutput)
}

func (i VolumePropertiesResponseDataProtectionArgs) ToVolumePropertiesResponseDataProtectionPtrOutput() VolumePropertiesResponseDataProtectionPtrOutput {
	return i.ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(context.Background())
}

func (i VolumePropertiesResponseDataProtectionArgs) ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseDataProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesResponseDataProtectionOutput).ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(ctx)
}

// VolumePropertiesResponseDataProtectionPtrInput is an input type that accepts VolumePropertiesResponseDataProtectionArgs, VolumePropertiesResponseDataProtectionPtr and VolumePropertiesResponseDataProtectionPtrOutput values.
// You can construct a concrete instance of `VolumePropertiesResponseDataProtectionPtrInput` via:
//
//          VolumePropertiesResponseDataProtectionArgs{...}
//
//  or:
//
//          nil
type VolumePropertiesResponseDataProtectionPtrInput interface {
	pulumi.Input

	ToVolumePropertiesResponseDataProtectionPtrOutput() VolumePropertiesResponseDataProtectionPtrOutput
	ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(context.Context) VolumePropertiesResponseDataProtectionPtrOutput
}

type volumePropertiesResponseDataProtectionPtrType VolumePropertiesResponseDataProtectionArgs

func VolumePropertiesResponseDataProtectionPtr(v *VolumePropertiesResponseDataProtectionArgs) VolumePropertiesResponseDataProtectionPtrInput {
	return (*volumePropertiesResponseDataProtectionPtrType)(v)
}

func (*volumePropertiesResponseDataProtectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesResponseDataProtection)(nil)).Elem()
}

func (i *volumePropertiesResponseDataProtectionPtrType) ToVolumePropertiesResponseDataProtectionPtrOutput() VolumePropertiesResponseDataProtectionPtrOutput {
	return i.ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(context.Background())
}

func (i *volumePropertiesResponseDataProtectionPtrType) ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseDataProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesResponseDataProtectionPtrOutput)
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesResponseDataProtectionOutput struct{ *pulumi.OutputState }

func (VolumePropertiesResponseDataProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesResponseDataProtection)(nil)).Elem()
}

func (o VolumePropertiesResponseDataProtectionOutput) ToVolumePropertiesResponseDataProtectionOutput() VolumePropertiesResponseDataProtectionOutput {
	return o
}

func (o VolumePropertiesResponseDataProtectionOutput) ToVolumePropertiesResponseDataProtectionOutputWithContext(ctx context.Context) VolumePropertiesResponseDataProtectionOutput {
	return o
}

func (o VolumePropertiesResponseDataProtectionOutput) ToVolumePropertiesResponseDataProtectionPtrOutput() VolumePropertiesResponseDataProtectionPtrOutput {
	return o.ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(context.Background())
}

func (o VolumePropertiesResponseDataProtectionOutput) ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseDataProtectionPtrOutput {
	return o.ApplyT(func(v VolumePropertiesResponseDataProtection) *VolumePropertiesResponseDataProtection {
		return &v
	}).(VolumePropertiesResponseDataProtectionPtrOutput)
}

// Backup Properties
func (o VolumePropertiesResponseDataProtectionOutput) Backup() VolumeBackupPropertiesResponsePtrOutput {
	return o.ApplyT(func(v VolumePropertiesResponseDataProtection) *VolumeBackupPropertiesResponse { return v.Backup }).(VolumeBackupPropertiesResponsePtrOutput)
}

// Replication properties
func (o VolumePropertiesResponseDataProtectionOutput) Replication() ReplicationObjectResponsePtrOutput {
	return o.ApplyT(func(v VolumePropertiesResponseDataProtection) *ReplicationObjectResponse { return v.Replication }).(ReplicationObjectResponsePtrOutput)
}

// Snapshot properties.
func (o VolumePropertiesResponseDataProtectionOutput) Snapshot() VolumeSnapshotPropertiesResponsePtrOutput {
	return o.ApplyT(func(v VolumePropertiesResponseDataProtection) *VolumeSnapshotPropertiesResponse { return v.Snapshot }).(VolumeSnapshotPropertiesResponsePtrOutput)
}

type VolumePropertiesResponseDataProtectionPtrOutput struct{ *pulumi.OutputState }

func (VolumePropertiesResponseDataProtectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesResponseDataProtection)(nil)).Elem()
}

func (o VolumePropertiesResponseDataProtectionPtrOutput) ToVolumePropertiesResponseDataProtectionPtrOutput() VolumePropertiesResponseDataProtectionPtrOutput {
	return o
}

func (o VolumePropertiesResponseDataProtectionPtrOutput) ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseDataProtectionPtrOutput {
	return o
}

func (o VolumePropertiesResponseDataProtectionPtrOutput) Elem() VolumePropertiesResponseDataProtectionOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseDataProtection) VolumePropertiesResponseDataProtection { return *v }).(VolumePropertiesResponseDataProtectionOutput)
}

// Backup Properties
func (o VolumePropertiesResponseDataProtectionPtrOutput) Backup() VolumeBackupPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseDataProtection) *VolumeBackupPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Backup
	}).(VolumeBackupPropertiesResponsePtrOutput)
}

// Replication properties
func (o VolumePropertiesResponseDataProtectionPtrOutput) Replication() ReplicationObjectResponsePtrOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseDataProtection) *ReplicationObjectResponse {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(ReplicationObjectResponsePtrOutput)
}

// Snapshot properties.
func (o VolumePropertiesResponseDataProtectionPtrOutput) Snapshot() VolumeSnapshotPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseDataProtection) *VolumeSnapshotPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Snapshot
	}).(VolumeSnapshotPropertiesResponsePtrOutput)
}

// Set of export policy rules
type VolumePropertiesResponseExportPolicy struct {
	// Export policy rule
	Rules []ExportPolicyRuleResponse `pulumi:"rules"`
}

// VolumePropertiesResponseExportPolicyInput is an input type that accepts VolumePropertiesResponseExportPolicyArgs and VolumePropertiesResponseExportPolicyOutput values.
// You can construct a concrete instance of `VolumePropertiesResponseExportPolicyInput` via:
//
//          VolumePropertiesResponseExportPolicyArgs{...}
type VolumePropertiesResponseExportPolicyInput interface {
	pulumi.Input

	ToVolumePropertiesResponseExportPolicyOutput() VolumePropertiesResponseExportPolicyOutput
	ToVolumePropertiesResponseExportPolicyOutputWithContext(context.Context) VolumePropertiesResponseExportPolicyOutput
}

// Set of export policy rules
type VolumePropertiesResponseExportPolicyArgs struct {
	// Export policy rule
	Rules ExportPolicyRuleResponseArrayInput `pulumi:"rules"`
}

func (VolumePropertiesResponseExportPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesResponseExportPolicy)(nil)).Elem()
}

func (i VolumePropertiesResponseExportPolicyArgs) ToVolumePropertiesResponseExportPolicyOutput() VolumePropertiesResponseExportPolicyOutput {
	return i.ToVolumePropertiesResponseExportPolicyOutputWithContext(context.Background())
}

func (i VolumePropertiesResponseExportPolicyArgs) ToVolumePropertiesResponseExportPolicyOutputWithContext(ctx context.Context) VolumePropertiesResponseExportPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesResponseExportPolicyOutput)
}

func (i VolumePropertiesResponseExportPolicyArgs) ToVolumePropertiesResponseExportPolicyPtrOutput() VolumePropertiesResponseExportPolicyPtrOutput {
	return i.ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(context.Background())
}

func (i VolumePropertiesResponseExportPolicyArgs) ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesResponseExportPolicyOutput).ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(ctx)
}

// VolumePropertiesResponseExportPolicyPtrInput is an input type that accepts VolumePropertiesResponseExportPolicyArgs, VolumePropertiesResponseExportPolicyPtr and VolumePropertiesResponseExportPolicyPtrOutput values.
// You can construct a concrete instance of `VolumePropertiesResponseExportPolicyPtrInput` via:
//
//          VolumePropertiesResponseExportPolicyArgs{...}
//
//  or:
//
//          nil
type VolumePropertiesResponseExportPolicyPtrInput interface {
	pulumi.Input

	ToVolumePropertiesResponseExportPolicyPtrOutput() VolumePropertiesResponseExportPolicyPtrOutput
	ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(context.Context) VolumePropertiesResponseExportPolicyPtrOutput
}

type volumePropertiesResponseExportPolicyPtrType VolumePropertiesResponseExportPolicyArgs

func VolumePropertiesResponseExportPolicyPtr(v *VolumePropertiesResponseExportPolicyArgs) VolumePropertiesResponseExportPolicyPtrInput {
	return (*volumePropertiesResponseExportPolicyPtrType)(v)
}

func (*volumePropertiesResponseExportPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesResponseExportPolicy)(nil)).Elem()
}

func (i *volumePropertiesResponseExportPolicyPtrType) ToVolumePropertiesResponseExportPolicyPtrOutput() VolumePropertiesResponseExportPolicyPtrOutput {
	return i.ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(context.Background())
}

func (i *volumePropertiesResponseExportPolicyPtrType) ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesResponseExportPolicyPtrOutput)
}

// Set of export policy rules
type VolumePropertiesResponseExportPolicyOutput struct{ *pulumi.OutputState }

func (VolumePropertiesResponseExportPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesResponseExportPolicy)(nil)).Elem()
}

func (o VolumePropertiesResponseExportPolicyOutput) ToVolumePropertiesResponseExportPolicyOutput() VolumePropertiesResponseExportPolicyOutput {
	return o
}

func (o VolumePropertiesResponseExportPolicyOutput) ToVolumePropertiesResponseExportPolicyOutputWithContext(ctx context.Context) VolumePropertiesResponseExportPolicyOutput {
	return o
}

func (o VolumePropertiesResponseExportPolicyOutput) ToVolumePropertiesResponseExportPolicyPtrOutput() VolumePropertiesResponseExportPolicyPtrOutput {
	return o.ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(context.Background())
}

func (o VolumePropertiesResponseExportPolicyOutput) ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseExportPolicyPtrOutput {
	return o.ApplyT(func(v VolumePropertiesResponseExportPolicy) *VolumePropertiesResponseExportPolicy {
		return &v
	}).(VolumePropertiesResponseExportPolicyPtrOutput)
}

// Export policy rule
func (o VolumePropertiesResponseExportPolicyOutput) Rules() ExportPolicyRuleResponseArrayOutput {
	return o.ApplyT(func(v VolumePropertiesResponseExportPolicy) []ExportPolicyRuleResponse { return v.Rules }).(ExportPolicyRuleResponseArrayOutput)
}

type VolumePropertiesResponseExportPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumePropertiesResponseExportPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesResponseExportPolicy)(nil)).Elem()
}

func (o VolumePropertiesResponseExportPolicyPtrOutput) ToVolumePropertiesResponseExportPolicyPtrOutput() VolumePropertiesResponseExportPolicyPtrOutput {
	return o
}

func (o VolumePropertiesResponseExportPolicyPtrOutput) ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseExportPolicyPtrOutput {
	return o
}

func (o VolumePropertiesResponseExportPolicyPtrOutput) Elem() VolumePropertiesResponseExportPolicyOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseExportPolicy) VolumePropertiesResponseExportPolicy { return *v }).(VolumePropertiesResponseExportPolicyOutput)
}

// Export policy rule
func (o VolumePropertiesResponseExportPolicyPtrOutput) Rules() ExportPolicyRuleResponseArrayOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseExportPolicy) []ExportPolicyRuleResponse {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(ExportPolicyRuleResponseArrayOutput)
}

// Volume Snapshot Properties
type VolumeSnapshotProperties struct {
	// Snapshot Policy ResourceId
	SnapshotPolicyId *string `pulumi:"snapshotPolicyId"`
}

// VolumeSnapshotPropertiesInput is an input type that accepts VolumeSnapshotPropertiesArgs and VolumeSnapshotPropertiesOutput values.
// You can construct a concrete instance of `VolumeSnapshotPropertiesInput` via:
//
//          VolumeSnapshotPropertiesArgs{...}
type VolumeSnapshotPropertiesInput interface {
	pulumi.Input

	ToVolumeSnapshotPropertiesOutput() VolumeSnapshotPropertiesOutput
	ToVolumeSnapshotPropertiesOutputWithContext(context.Context) VolumeSnapshotPropertiesOutput
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesArgs struct {
	// Snapshot Policy ResourceId
	SnapshotPolicyId pulumi.StringPtrInput `pulumi:"snapshotPolicyId"`
}

func (VolumeSnapshotPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotProperties)(nil)).Elem()
}

func (i VolumeSnapshotPropertiesArgs) ToVolumeSnapshotPropertiesOutput() VolumeSnapshotPropertiesOutput {
	return i.ToVolumeSnapshotPropertiesOutputWithContext(context.Background())
}

func (i VolumeSnapshotPropertiesArgs) ToVolumeSnapshotPropertiesOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesOutput)
}

func (i VolumeSnapshotPropertiesArgs) ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput {
	return i.ToVolumeSnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotPropertiesArgs) ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesOutput).ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx)
}

// VolumeSnapshotPropertiesPtrInput is an input type that accepts VolumeSnapshotPropertiesArgs, VolumeSnapshotPropertiesPtr and VolumeSnapshotPropertiesPtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotPropertiesPtrInput` via:
//
//          VolumeSnapshotPropertiesArgs{...}
//
//  or:
//
//          nil
type VolumeSnapshotPropertiesPtrInput interface {
	pulumi.Input

	ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput
	ToVolumeSnapshotPropertiesPtrOutputWithContext(context.Context) VolumeSnapshotPropertiesPtrOutput
}

type volumeSnapshotPropertiesPtrType VolumeSnapshotPropertiesArgs

func VolumeSnapshotPropertiesPtr(v *VolumeSnapshotPropertiesArgs) VolumeSnapshotPropertiesPtrInput {
	return (*volumeSnapshotPropertiesPtrType)(v)
}

func (*volumeSnapshotPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotProperties)(nil)).Elem()
}

func (i *volumeSnapshotPropertiesPtrType) ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput {
	return i.ToVolumeSnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotPropertiesPtrType) ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesPtrOutput)
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotProperties)(nil)).Elem()
}

func (o VolumeSnapshotPropertiesOutput) ToVolumeSnapshotPropertiesOutput() VolumeSnapshotPropertiesOutput {
	return o
}

func (o VolumeSnapshotPropertiesOutput) ToVolumeSnapshotPropertiesOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesOutput {
	return o
}

func (o VolumeSnapshotPropertiesOutput) ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput {
	return o.ToVolumeSnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotPropertiesOutput) ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotProperties) *VolumeSnapshotProperties {
		return &v
	}).(VolumeSnapshotPropertiesPtrOutput)
}

// Snapshot Policy ResourceId
func (o VolumeSnapshotPropertiesOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotProperties) *string { return v.SnapshotPolicyId }).(pulumi.StringPtrOutput)
}

type VolumeSnapshotPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotProperties)(nil)).Elem()
}

func (o VolumeSnapshotPropertiesPtrOutput) ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput {
	return o
}

func (o VolumeSnapshotPropertiesPtrOutput) ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesPtrOutput {
	return o
}

func (o VolumeSnapshotPropertiesPtrOutput) Elem() VolumeSnapshotPropertiesOutput {
	return o.ApplyT(func(v *VolumeSnapshotProperties) VolumeSnapshotProperties { return *v }).(VolumeSnapshotPropertiesOutput)
}

// Snapshot Policy ResourceId
func (o VolumeSnapshotPropertiesPtrOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotProperties) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotPolicyId
	}).(pulumi.StringPtrOutput)
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesResponse struct {
	// Snapshot Policy ResourceId
	SnapshotPolicyId *string `pulumi:"snapshotPolicyId"`
}

// VolumeSnapshotPropertiesResponseInput is an input type that accepts VolumeSnapshotPropertiesResponseArgs and VolumeSnapshotPropertiesResponseOutput values.
// You can construct a concrete instance of `VolumeSnapshotPropertiesResponseInput` via:
//
//          VolumeSnapshotPropertiesResponseArgs{...}
type VolumeSnapshotPropertiesResponseInput interface {
	pulumi.Input

	ToVolumeSnapshotPropertiesResponseOutput() VolumeSnapshotPropertiesResponseOutput
	ToVolumeSnapshotPropertiesResponseOutputWithContext(context.Context) VolumeSnapshotPropertiesResponseOutput
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesResponseArgs struct {
	// Snapshot Policy ResourceId
	SnapshotPolicyId pulumi.StringPtrInput `pulumi:"snapshotPolicyId"`
}

func (VolumeSnapshotPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPropertiesResponse)(nil)).Elem()
}

func (i VolumeSnapshotPropertiesResponseArgs) ToVolumeSnapshotPropertiesResponseOutput() VolumeSnapshotPropertiesResponseOutput {
	return i.ToVolumeSnapshotPropertiesResponseOutputWithContext(context.Background())
}

func (i VolumeSnapshotPropertiesResponseArgs) ToVolumeSnapshotPropertiesResponseOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesResponseOutput)
}

func (i VolumeSnapshotPropertiesResponseArgs) ToVolumeSnapshotPropertiesResponsePtrOutput() VolumeSnapshotPropertiesResponsePtrOutput {
	return i.ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotPropertiesResponseArgs) ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesResponseOutput).ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(ctx)
}

// VolumeSnapshotPropertiesResponsePtrInput is an input type that accepts VolumeSnapshotPropertiesResponseArgs, VolumeSnapshotPropertiesResponsePtr and VolumeSnapshotPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotPropertiesResponsePtrInput` via:
//
//          VolumeSnapshotPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type VolumeSnapshotPropertiesResponsePtrInput interface {
	pulumi.Input

	ToVolumeSnapshotPropertiesResponsePtrOutput() VolumeSnapshotPropertiesResponsePtrOutput
	ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(context.Context) VolumeSnapshotPropertiesResponsePtrOutput
}

type volumeSnapshotPropertiesResponsePtrType VolumeSnapshotPropertiesResponseArgs

func VolumeSnapshotPropertiesResponsePtr(v *VolumeSnapshotPropertiesResponseArgs) VolumeSnapshotPropertiesResponsePtrInput {
	return (*volumeSnapshotPropertiesResponsePtrType)(v)
}

func (*volumeSnapshotPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPropertiesResponse)(nil)).Elem()
}

func (i *volumeSnapshotPropertiesResponsePtrType) ToVolumeSnapshotPropertiesResponsePtrOutput() VolumeSnapshotPropertiesResponsePtrOutput {
	return i.ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotPropertiesResponsePtrType) ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesResponsePtrOutput)
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesResponseOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPropertiesResponse)(nil)).Elem()
}

func (o VolumeSnapshotPropertiesResponseOutput) ToVolumeSnapshotPropertiesResponseOutput() VolumeSnapshotPropertiesResponseOutput {
	return o
}

func (o VolumeSnapshotPropertiesResponseOutput) ToVolumeSnapshotPropertiesResponseOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesResponseOutput {
	return o
}

func (o VolumeSnapshotPropertiesResponseOutput) ToVolumeSnapshotPropertiesResponsePtrOutput() VolumeSnapshotPropertiesResponsePtrOutput {
	return o.ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotPropertiesResponseOutput) ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesResponsePtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPropertiesResponse) *VolumeSnapshotPropertiesResponse {
		return &v
	}).(VolumeSnapshotPropertiesResponsePtrOutput)
}

// Snapshot Policy ResourceId
func (o VolumeSnapshotPropertiesResponseOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPropertiesResponse) *string { return v.SnapshotPolicyId }).(pulumi.StringPtrOutput)
}

type VolumeSnapshotPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPropertiesResponse)(nil)).Elem()
}

func (o VolumeSnapshotPropertiesResponsePtrOutput) ToVolumeSnapshotPropertiesResponsePtrOutput() VolumeSnapshotPropertiesResponsePtrOutput {
	return o
}

func (o VolumeSnapshotPropertiesResponsePtrOutput) ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesResponsePtrOutput {
	return o
}

func (o VolumeSnapshotPropertiesResponsePtrOutput) Elem() VolumeSnapshotPropertiesResponseOutput {
	return o.ApplyT(func(v *VolumeSnapshotPropertiesResponse) VolumeSnapshotPropertiesResponse { return *v }).(VolumeSnapshotPropertiesResponseOutput)
}

// Snapshot Policy ResourceId
func (o VolumeSnapshotPropertiesResponsePtrOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotPolicyId
	}).(pulumi.StringPtrOutput)
}

// Weekly Schedule properties, make a snapshot every week at a specific day or days
type WeeklySchedule struct {
	// Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
	Day *string `pulumi:"day"`
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour *int `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute *int `pulumi:"minute"`
	// Weekly snapshot count to keep
	SnapshotsToKeep *int `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes *int `pulumi:"usedBytes"`
}

// WeeklyScheduleInput is an input type that accepts WeeklyScheduleArgs and WeeklyScheduleOutput values.
// You can construct a concrete instance of `WeeklyScheduleInput` via:
//
//          WeeklyScheduleArgs{...}
type WeeklyScheduleInput interface {
	pulumi.Input

	ToWeeklyScheduleOutput() WeeklyScheduleOutput
	ToWeeklyScheduleOutputWithContext(context.Context) WeeklyScheduleOutput
}

// Weekly Schedule properties, make a snapshot every week at a specific day or days
type WeeklyScheduleArgs struct {
	// Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
	Day pulumi.StringPtrInput `pulumi:"day"`
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// Weekly snapshot count to keep
	SnapshotsToKeep pulumi.IntPtrInput `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes pulumi.IntPtrInput `pulumi:"usedBytes"`
}

func (WeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return i.ToWeeklyScheduleOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput)
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput).ToWeeklySchedulePtrOutputWithContext(ctx)
}

// WeeklySchedulePtrInput is an input type that accepts WeeklyScheduleArgs, WeeklySchedulePtr and WeeklySchedulePtrOutput values.
// You can construct a concrete instance of `WeeklySchedulePtrInput` via:
//
//          WeeklyScheduleArgs{...}
//
//  or:
//
//          nil
type WeeklySchedulePtrInput interface {
	pulumi.Input

	ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput
	ToWeeklySchedulePtrOutputWithContext(context.Context) WeeklySchedulePtrOutput
}

type weeklySchedulePtrType WeeklyScheduleArgs

func WeeklySchedulePtr(v *WeeklyScheduleArgs) WeeklySchedulePtrInput {
	return (*weeklySchedulePtrType)(v)
}

func (*weeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklySchedulePtrOutput)
}

// Weekly Schedule properties, make a snapshot every week at a specific day or days
type WeeklyScheduleOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *WeeklySchedule {
		return &v
	}).(WeeklySchedulePtrOutput)
}

// Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
func (o WeeklyScheduleOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o WeeklyScheduleOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o WeeklyScheduleOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// Weekly snapshot count to keep
func (o WeeklyScheduleOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *int { return v.SnapshotsToKeep }).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o WeeklyScheduleOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *int { return v.UsedBytes }).(pulumi.IntPtrOutput)
}

type WeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (WeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) Elem() WeeklyScheduleOutput {
	return o.ApplyT(func(v *WeeklySchedule) WeeklySchedule { return *v }).(WeeklyScheduleOutput)
}

// Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
func (o WeeklySchedulePtrOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *string {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.StringPtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o WeeklySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o WeeklySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// Weekly snapshot count to keep
func (o WeeklySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o WeeklySchedulePtrOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return v.UsedBytes
	}).(pulumi.IntPtrOutput)
}

// Weekly Schedule properties, make a snapshot every week at a specific day or days
type WeeklyScheduleResponse struct {
	// Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
	Day *string `pulumi:"day"`
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour *int `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute *int `pulumi:"minute"`
	// Weekly snapshot count to keep
	SnapshotsToKeep *int `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes *int `pulumi:"usedBytes"`
}

// WeeklyScheduleResponseInput is an input type that accepts WeeklyScheduleResponseArgs and WeeklyScheduleResponseOutput values.
// You can construct a concrete instance of `WeeklyScheduleResponseInput` via:
//
//          WeeklyScheduleResponseArgs{...}
type WeeklyScheduleResponseInput interface {
	pulumi.Input

	ToWeeklyScheduleResponseOutput() WeeklyScheduleResponseOutput
	ToWeeklyScheduleResponseOutputWithContext(context.Context) WeeklyScheduleResponseOutput
}

// Weekly Schedule properties, make a snapshot every week at a specific day or days
type WeeklyScheduleResponseArgs struct {
	// Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
	Day pulumi.StringPtrInput `pulumi:"day"`
	// Indicates which hour in UTC timezone a snapshot should be taken
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Indicates which minute snapshot should be taken
	Minute pulumi.IntPtrInput `pulumi:"minute"`
	// Weekly snapshot count to keep
	SnapshotsToKeep pulumi.IntPtrInput `pulumi:"snapshotsToKeep"`
	// Resource size in bytes, current storage usage for the volume in bytes
	UsedBytes pulumi.IntPtrInput `pulumi:"usedBytes"`
}

func (WeeklyScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleResponse)(nil)).Elem()
}

func (i WeeklyScheduleResponseArgs) ToWeeklyScheduleResponseOutput() WeeklyScheduleResponseOutput {
	return i.ToWeeklyScheduleResponseOutputWithContext(context.Background())
}

func (i WeeklyScheduleResponseArgs) ToWeeklyScheduleResponseOutputWithContext(ctx context.Context) WeeklyScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleResponseOutput)
}

func (i WeeklyScheduleResponseArgs) ToWeeklyScheduleResponsePtrOutput() WeeklyScheduleResponsePtrOutput {
	return i.ToWeeklyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i WeeklyScheduleResponseArgs) ToWeeklyScheduleResponsePtrOutputWithContext(ctx context.Context) WeeklyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleResponseOutput).ToWeeklyScheduleResponsePtrOutputWithContext(ctx)
}

// WeeklyScheduleResponsePtrInput is an input type that accepts WeeklyScheduleResponseArgs, WeeklyScheduleResponsePtr and WeeklyScheduleResponsePtrOutput values.
// You can construct a concrete instance of `WeeklyScheduleResponsePtrInput` via:
//
//          WeeklyScheduleResponseArgs{...}
//
//  or:
//
//          nil
type WeeklyScheduleResponsePtrInput interface {
	pulumi.Input

	ToWeeklyScheduleResponsePtrOutput() WeeklyScheduleResponsePtrOutput
	ToWeeklyScheduleResponsePtrOutputWithContext(context.Context) WeeklyScheduleResponsePtrOutput
}

type weeklyScheduleResponsePtrType WeeklyScheduleResponseArgs

func WeeklyScheduleResponsePtr(v *WeeklyScheduleResponseArgs) WeeklyScheduleResponsePtrInput {
	return (*weeklyScheduleResponsePtrType)(v)
}

func (*weeklyScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyScheduleResponse)(nil)).Elem()
}

func (i *weeklyScheduleResponsePtrType) ToWeeklyScheduleResponsePtrOutput() WeeklyScheduleResponsePtrOutput {
	return i.ToWeeklyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *weeklyScheduleResponsePtrType) ToWeeklyScheduleResponsePtrOutputWithContext(ctx context.Context) WeeklyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleResponsePtrOutput)
}

// Weekly Schedule properties, make a snapshot every week at a specific day or days
type WeeklyScheduleResponseOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleResponse)(nil)).Elem()
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutput() WeeklyScheduleResponseOutput {
	return o
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutputWithContext(ctx context.Context) WeeklyScheduleResponseOutput {
	return o
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponsePtrOutput() WeeklyScheduleResponsePtrOutput {
	return o.ToWeeklyScheduleResponsePtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponsePtrOutputWithContext(ctx context.Context) WeeklyScheduleResponsePtrOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) *WeeklyScheduleResponse {
		return &v
	}).(WeeklyScheduleResponsePtrOutput)
}

// Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
func (o WeeklyScheduleResponseOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o WeeklyScheduleResponseOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o WeeklyScheduleResponseOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) *int { return v.Minute }).(pulumi.IntPtrOutput)
}

// Weekly snapshot count to keep
func (o WeeklyScheduleResponseOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) *int { return v.SnapshotsToKeep }).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o WeeklyScheduleResponseOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) *int { return v.UsedBytes }).(pulumi.IntPtrOutput)
}

type WeeklyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyScheduleResponse)(nil)).Elem()
}

func (o WeeklyScheduleResponsePtrOutput) ToWeeklyScheduleResponsePtrOutput() WeeklyScheduleResponsePtrOutput {
	return o
}

func (o WeeklyScheduleResponsePtrOutput) ToWeeklyScheduleResponsePtrOutputWithContext(ctx context.Context) WeeklyScheduleResponsePtrOutput {
	return o
}

func (o WeeklyScheduleResponsePtrOutput) Elem() WeeklyScheduleResponseOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) WeeklyScheduleResponse { return *v }).(WeeklyScheduleResponseOutput)
}

// Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
func (o WeeklyScheduleResponsePtrOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.StringPtrOutput)
}

// Indicates which hour in UTC timezone a snapshot should be taken
func (o WeeklyScheduleResponsePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Indicates which minute snapshot should be taken
func (o WeeklyScheduleResponsePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.Minute
	}).(pulumi.IntPtrOutput)
}

// Weekly snapshot count to keep
func (o WeeklyScheduleResponsePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

// Resource size in bytes, current storage usage for the volume in bytes
func (o WeeklyScheduleResponsePtrOutput) UsedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.UsedBytes
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActiveDirectoryOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryArrayOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryResponseOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryResponseArrayOutput{})
	pulumi.RegisterOutputType(DailyScheduleOutput{})
	pulumi.RegisterOutputType(DailySchedulePtrOutput{})
	pulumi.RegisterOutputType(DailyScheduleResponseOutput{})
	pulumi.RegisterOutputType(DailyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportPolicyRuleOutput{})
	pulumi.RegisterOutputType(ExportPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(ExportPolicyRuleResponseOutput{})
	pulumi.RegisterOutputType(ExportPolicyRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(HourlyScheduleOutput{})
	pulumi.RegisterOutputType(HourlySchedulePtrOutput{})
	pulumi.RegisterOutputType(HourlyScheduleResponseOutput{})
	pulumi.RegisterOutputType(HourlyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(MonthlyScheduleOutput{})
	pulumi.RegisterOutputType(MonthlySchedulePtrOutput{})
	pulumi.RegisterOutputType(MonthlyScheduleResponseOutput{})
	pulumi.RegisterOutputType(MonthlyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(MountTargetPropertiesOutput{})
	pulumi.RegisterOutputType(MountTargetPropertiesArrayOutput{})
	pulumi.RegisterOutputType(MountTargetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MountTargetPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ReplicationObjectOutput{})
	pulumi.RegisterOutputType(ReplicationObjectPtrOutput{})
	pulumi.RegisterOutputType(ReplicationObjectResponseOutput{})
	pulumi.RegisterOutputType(ReplicationObjectResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeBackupPropertiesOutput{})
	pulumi.RegisterOutputType(VolumeBackupPropertiesPtrOutput{})
	pulumi.RegisterOutputType(VolumeBackupPropertiesResponseOutput{})
	pulumi.RegisterOutputType(VolumeBackupPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeBackupsOutput{})
	pulumi.RegisterOutputType(VolumeBackupsArrayOutput{})
	pulumi.RegisterOutputType(VolumeBackupsResponseOutput{})
	pulumi.RegisterOutputType(VolumeBackupsResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumePropertiesDataProtectionOutput{})
	pulumi.RegisterOutputType(VolumePropertiesDataProtectionPtrOutput{})
	pulumi.RegisterOutputType(VolumePropertiesExportPolicyOutput{})
	pulumi.RegisterOutputType(VolumePropertiesExportPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumePropertiesResponseDataProtectionOutput{})
	pulumi.RegisterOutputType(VolumePropertiesResponseDataProtectionPtrOutput{})
	pulumi.RegisterOutputType(VolumePropertiesResponseExportPolicyOutput{})
	pulumi.RegisterOutputType(VolumePropertiesResponseExportPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPropertiesOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPropertiesPtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPropertiesResponseOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleOutput{})
	pulumi.RegisterOutputType(WeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleResponseOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleResponsePtrOutput{})
}
