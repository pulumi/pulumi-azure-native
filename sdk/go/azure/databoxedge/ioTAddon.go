// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databoxedge

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IoT Addon.
// API Version: 2020-12-01.
type IoTAddon struct {
	pulumi.CustomResourceState

	// Host OS supported by the IoT addon.
	HostPlatform pulumi.StringOutput `pulumi:"hostPlatform"`
	// Platform where the runtime is hosted.
	HostPlatformType pulumi.StringOutput `pulumi:"hostPlatformType"`
	// IoT device metadata to which appliance needs to be connected.
	IoTDeviceDetails IoTDeviceInfoResponseOutput `pulumi:"ioTDeviceDetails"`
	// IoT edge device to which the IoT Addon needs to be configured.
	IoTEdgeDeviceDetails IoTDeviceInfoResponseOutput `pulumi:"ioTEdgeDeviceDetails"`
	// Addon type.
	// Expected value is 'IotEdge'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The object name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Addon Provisioning State
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Addon type
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The hierarchical type of the object.
	Type pulumi.StringOutput `pulumi:"type"`
	// Version of IoT running on the appliance.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewIoTAddon registers a new resource with the given unique name, arguments, and options.
func NewIoTAddon(ctx *pulumi.Context,
	name string, args *IoTAddonArgs, opts ...pulumi.ResourceOption) (*IoTAddon, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.IoTDeviceDetails == nil {
		return nil, errors.New("invalid value for required argument 'IoTDeviceDetails'")
	}
	if args.IoTEdgeDeviceDetails == nil {
		return nil, errors.New("invalid value for required argument 'IoTEdgeDeviceDetails'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	args.Kind = pulumi.String("IotEdge")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:databoxedge/v20200901:IoTAddon"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20200901preview:IoTAddon"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20201201:IoTAddon"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20210201:IoTAddon"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20210201preview:IoTAddon"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20210601:IoTAddon"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20210601preview:IoTAddon"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20220301:IoTAddon"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20220401preview:IoTAddon"),
		},
	})
	opts = append(opts, aliases)
	var resource IoTAddon
	err := ctx.RegisterResource("azure-native:databoxedge:IoTAddon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIoTAddon gets an existing IoTAddon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIoTAddon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IoTAddonState, opts ...pulumi.ResourceOption) (*IoTAddon, error) {
	var resource IoTAddon
	err := ctx.ReadResource("azure-native:databoxedge:IoTAddon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IoTAddon resources.
type ioTAddonState struct {
}

type IoTAddonState struct {
}

func (IoTAddonState) ElementType() reflect.Type {
	return reflect.TypeOf((*ioTAddonState)(nil)).Elem()
}

type ioTAddonArgs struct {
	// The addon name.
	AddonName *string `pulumi:"addonName"`
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// IoT device metadata to which appliance needs to be connected.
	IoTDeviceDetails IoTDeviceInfo `pulumi:"ioTDeviceDetails"`
	// IoT edge device to which the IoT Addon needs to be configured.
	IoTEdgeDeviceDetails IoTDeviceInfo `pulumi:"ioTEdgeDeviceDetails"`
	// Addon type.
	// Expected value is 'IotEdge'.
	Kind string `pulumi:"kind"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The role name.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a IoTAddon resource.
type IoTAddonArgs struct {
	// The addon name.
	AddonName pulumi.StringPtrInput
	// The device name.
	DeviceName pulumi.StringInput
	// IoT device metadata to which appliance needs to be connected.
	IoTDeviceDetails IoTDeviceInfoInput
	// IoT edge device to which the IoT Addon needs to be configured.
	IoTEdgeDeviceDetails IoTDeviceInfoInput
	// Addon type.
	// Expected value is 'IotEdge'.
	Kind pulumi.StringInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// The role name.
	RoleName pulumi.StringInput
}

func (IoTAddonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ioTAddonArgs)(nil)).Elem()
}

type IoTAddonInput interface {
	pulumi.Input

	ToIoTAddonOutput() IoTAddonOutput
	ToIoTAddonOutputWithContext(ctx context.Context) IoTAddonOutput
}

func (*IoTAddon) ElementType() reflect.Type {
	return reflect.TypeOf((**IoTAddon)(nil)).Elem()
}

func (i *IoTAddon) ToIoTAddonOutput() IoTAddonOutput {
	return i.ToIoTAddonOutputWithContext(context.Background())
}

func (i *IoTAddon) ToIoTAddonOutputWithContext(ctx context.Context) IoTAddonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTAddonOutput)
}

type IoTAddonOutput struct{ *pulumi.OutputState }

func (IoTAddonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IoTAddon)(nil)).Elem()
}

func (o IoTAddonOutput) ToIoTAddonOutput() IoTAddonOutput {
	return o
}

func (o IoTAddonOutput) ToIoTAddonOutputWithContext(ctx context.Context) IoTAddonOutput {
	return o
}

// Host OS supported by the IoT addon.
func (o IoTAddonOutput) HostPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v *IoTAddon) pulumi.StringOutput { return v.HostPlatform }).(pulumi.StringOutput)
}

// Platform where the runtime is hosted.
func (o IoTAddonOutput) HostPlatformType() pulumi.StringOutput {
	return o.ApplyT(func(v *IoTAddon) pulumi.StringOutput { return v.HostPlatformType }).(pulumi.StringOutput)
}

// IoT device metadata to which appliance needs to be connected.
func (o IoTAddonOutput) IoTDeviceDetails() IoTDeviceInfoResponseOutput {
	return o.ApplyT(func(v *IoTAddon) IoTDeviceInfoResponseOutput { return v.IoTDeviceDetails }).(IoTDeviceInfoResponseOutput)
}

// IoT edge device to which the IoT Addon needs to be configured.
func (o IoTAddonOutput) IoTEdgeDeviceDetails() IoTDeviceInfoResponseOutput {
	return o.ApplyT(func(v *IoTAddon) IoTDeviceInfoResponseOutput { return v.IoTEdgeDeviceDetails }).(IoTDeviceInfoResponseOutput)
}

// Addon type.
// Expected value is 'IotEdge'.
func (o IoTAddonOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *IoTAddon) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The object name.
func (o IoTAddonOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IoTAddon) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Addon Provisioning State
func (o IoTAddonOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *IoTAddon) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Addon type
func (o IoTAddonOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *IoTAddon) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The hierarchical type of the object.
func (o IoTAddonOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IoTAddon) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Version of IoT running on the appliance.
func (o IoTAddonOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *IoTAddon) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(IoTAddonOutput{})
}
