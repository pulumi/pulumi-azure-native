// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201201

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Trigger details.
type FileEventTrigger struct {
	pulumi.CustomResourceState

	// A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
	CustomContextTag pulumi.StringPtrOutput `pulumi:"customContextTag"`
	// Trigger Kind.
	// Expected value is 'FileEvent'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The object name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Role sink info.
	SinkInfo RoleSinkInfoResponseOutput `pulumi:"sinkInfo"`
	// File event source details.
	SourceInfo FileSourceInfoResponseOutput `pulumi:"sourceInfo"`
	// Trigger in DataBoxEdge Resource
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The hierarchical type of the object.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFileEventTrigger registers a new resource with the given unique name, arguments, and options.
func NewFileEventTrigger(ctx *pulumi.Context,
	name string, args *FileEventTriggerArgs, opts ...pulumi.ResourceOption) (*FileEventTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SinkInfo == nil {
		return nil, errors.New("invalid value for required argument 'SinkInfo'")
	}
	if args.SourceInfo == nil {
		return nil, errors.New("invalid value for required argument 'SourceInfo'")
	}
	args.Kind = pulumi.String("FileEvent")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:databoxedge:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20190301:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20190701:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20190801:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20200501preview:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20200901:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20200901preview:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20210201:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20210201preview:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20210601:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20210601preview:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20220301:FileEventTrigger"),
		},
		{
			Type: pulumi.String("azure-native:databoxedge/v20220401preview:FileEventTrigger"),
		},
	})
	opts = append(opts, aliases)
	var resource FileEventTrigger
	err := ctx.RegisterResource("azure-native:databoxedge/v20201201:FileEventTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileEventTrigger gets an existing FileEventTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileEventTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileEventTriggerState, opts ...pulumi.ResourceOption) (*FileEventTrigger, error) {
	var resource FileEventTrigger
	err := ctx.ReadResource("azure-native:databoxedge/v20201201:FileEventTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileEventTrigger resources.
type fileEventTriggerState struct {
}

type FileEventTriggerState struct {
}

func (FileEventTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileEventTriggerState)(nil)).Elem()
}

type fileEventTriggerArgs struct {
	// A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
	CustomContextTag *string `pulumi:"customContextTag"`
	// Creates or updates a trigger
	DeviceName string `pulumi:"deviceName"`
	// Trigger Kind.
	// Expected value is 'FileEvent'.
	Kind string `pulumi:"kind"`
	// The trigger name.
	Name *string `pulumi:"name"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Role sink info.
	SinkInfo RoleSinkInfo `pulumi:"sinkInfo"`
	// File event source details.
	SourceInfo FileSourceInfo `pulumi:"sourceInfo"`
}

// The set of arguments for constructing a FileEventTrigger resource.
type FileEventTriggerArgs struct {
	// A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
	CustomContextTag pulumi.StringPtrInput
	// Creates or updates a trigger
	DeviceName pulumi.StringInput
	// Trigger Kind.
	// Expected value is 'FileEvent'.
	Kind pulumi.StringInput
	// The trigger name.
	Name pulumi.StringPtrInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// Role sink info.
	SinkInfo RoleSinkInfoInput
	// File event source details.
	SourceInfo FileSourceInfoInput
}

func (FileEventTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileEventTriggerArgs)(nil)).Elem()
}

type FileEventTriggerInput interface {
	pulumi.Input

	ToFileEventTriggerOutput() FileEventTriggerOutput
	ToFileEventTriggerOutputWithContext(ctx context.Context) FileEventTriggerOutput
}

func (*FileEventTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**FileEventTrigger)(nil)).Elem()
}

func (i *FileEventTrigger) ToFileEventTriggerOutput() FileEventTriggerOutput {
	return i.ToFileEventTriggerOutputWithContext(context.Background())
}

func (i *FileEventTrigger) ToFileEventTriggerOutputWithContext(ctx context.Context) FileEventTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileEventTriggerOutput)
}

type FileEventTriggerOutput struct{ *pulumi.OutputState }

func (FileEventTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileEventTrigger)(nil)).Elem()
}

func (o FileEventTriggerOutput) ToFileEventTriggerOutput() FileEventTriggerOutput {
	return o
}

func (o FileEventTriggerOutput) ToFileEventTriggerOutputWithContext(ctx context.Context) FileEventTriggerOutput {
	return o
}

// A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
func (o FileEventTriggerOutput) CustomContextTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileEventTrigger) pulumi.StringPtrOutput { return v.CustomContextTag }).(pulumi.StringPtrOutput)
}

// Trigger Kind.
// Expected value is 'FileEvent'.
func (o FileEventTriggerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *FileEventTrigger) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The object name.
func (o FileEventTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FileEventTrigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Role sink info.
func (o FileEventTriggerOutput) SinkInfo() RoleSinkInfoResponseOutput {
	return o.ApplyT(func(v *FileEventTrigger) RoleSinkInfoResponseOutput { return v.SinkInfo }).(RoleSinkInfoResponseOutput)
}

// File event source details.
func (o FileEventTriggerOutput) SourceInfo() FileSourceInfoResponseOutput {
	return o.ApplyT(func(v *FileEventTrigger) FileSourceInfoResponseOutput { return v.SourceInfo }).(FileSourceInfoResponseOutput)
}

// Trigger in DataBoxEdge Resource
func (o FileEventTriggerOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *FileEventTrigger) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The hierarchical type of the object.
func (o FileEventTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FileEventTrigger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FileEventTriggerOutput{})
}
