// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190802preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a hybrid machine.
//
// Deprecated: Version 2019-08-02-preview will be removed in v2 of the provider.
type Machine struct {
	pulumi.CustomResourceState

	// The hybrid machine agent full version.
	AgentVersion pulumi.StringOutput `pulumi:"agentVersion"`
	// Public Key that the client provides to be used during initial resource onboarding
	ClientPublicKey pulumi.StringPtrOutput `pulumi:"clientPublicKey"`
	// Specifies the hybrid machine display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Details about the error state.
	ErrorDetails ErrorDetailResponseArrayOutput `pulumi:"errorDetails"`
	// Machine Extensions information
	Extensions MachineExtensionInstanceViewResponseArrayOutput `pulumi:"extensions"`
	// The time of the last status change.
	LastStatusChange pulumi.StringOutput `pulumi:"lastStatusChange"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the hybrid machine FQDN.
	MachineFqdn pulumi.StringOutput `pulumi:"machineFqdn"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// The Operating System running on the hybrid machine.
	OsName pulumi.StringPtrOutput `pulumi:"osName"`
	// Specifies the operating system settings for the hybrid machine.
	OsProfile OSProfileResponseOutput `pulumi:"osProfile"`
	// The version of Operating System running on the hybrid machine.
	OsVersion pulumi.StringPtrOutput `pulumi:"osVersion"`
	// Resource's Physical Location
	PhysicalLocation pulumi.StringPtrOutput `pulumi:"physicalLocation"`
	// The identity's principal id.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The provisioning state, which only appears in the response.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The status of the hybrid machine agent.
	Status pulumi.StringOutput `pulumi:"status"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The identity's tenant id.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the hybrid machine unique ID.
	VmId pulumi.StringOutput `pulumi:"vmId"`
}

// NewMachine registers a new resource with the given unique name, arguments, and options.
func NewMachine(ctx *pulumi.Context,
	name string, args *MachineArgs, opts ...pulumi.ResourceOption) (*Machine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybridcompute:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20190318preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20191212:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20200730preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20200802:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20200815preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20210128preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20210325preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20210422preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20210517preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20210520:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20210610preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20211210preview:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20220310:Machine"),
		},
		{
			Type: pulumi.String("azure-native:hybridcompute/v20220510preview:Machine"),
		},
	})
	opts = append(opts, aliases)
	var resource Machine
	err := ctx.RegisterResource("azure-native:hybridcompute/v20190802preview:Machine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachine gets an existing Machine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineState, opts ...pulumi.ResourceOption) (*Machine, error) {
	var resource Machine
	err := ctx.ReadResource("azure-native:hybridcompute/v20190802preview:Machine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Machine resources.
type machineState struct {
}

type MachineState struct {
}

func (MachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineState)(nil)).Elem()
}

type machineArgs struct {
	// Public Key that the client provides to be used during initial resource onboarding
	ClientPublicKey *string `pulumi:"clientPublicKey"`
	// Machine Extensions information
	Extensions []MachineExtensionInstanceView `pulumi:"extensions"`
	// Resource location
	Location *string `pulumi:"location"`
	// The name of the hybrid machine.
	Name *string `pulumi:"name"`
	// The Operating System running on the hybrid machine.
	OsName *string `pulumi:"osName"`
	// The version of Operating System running on the hybrid machine.
	OsVersion *string `pulumi:"osVersion"`
	// Resource's Physical Location
	PhysicalLocation *string `pulumi:"physicalLocation"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// The identity type.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Machine resource.
type MachineArgs struct {
	// Public Key that the client provides to be used during initial resource onboarding
	ClientPublicKey pulumi.StringPtrInput
	// Machine Extensions information
	Extensions MachineExtensionInstanceViewArrayInput
	// Resource location
	Location pulumi.StringPtrInput
	// The name of the hybrid machine.
	Name pulumi.StringPtrInput
	// The Operating System running on the hybrid machine.
	OsName pulumi.StringPtrInput
	// The version of Operating System running on the hybrid machine.
	OsVersion pulumi.StringPtrInput
	// Resource's Physical Location
	PhysicalLocation pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Resource tags
	Tags pulumi.StringMapInput
	// The identity type.
	Type pulumi.StringPtrInput
}

func (MachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineArgs)(nil)).Elem()
}

type MachineInput interface {
	pulumi.Input

	ToMachineOutput() MachineOutput
	ToMachineOutputWithContext(ctx context.Context) MachineOutput
}

func (*Machine) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (i *Machine) ToMachineOutput() MachineOutput {
	return i.ToMachineOutputWithContext(context.Background())
}

func (i *Machine) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineOutput)
}

type MachineOutput struct{ *pulumi.OutputState }

func (MachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (o MachineOutput) ToMachineOutput() MachineOutput {
	return o
}

func (o MachineOutput) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return o
}

// The hybrid machine agent full version.
func (o MachineOutput) AgentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.AgentVersion }).(pulumi.StringOutput)
}

// Public Key that the client provides to be used during initial resource onboarding
func (o MachineOutput) ClientPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.ClientPublicKey }).(pulumi.StringPtrOutput)
}

// Specifies the hybrid machine display name.
func (o MachineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Details about the error state.
func (o MachineOutput) ErrorDetails() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v *Machine) ErrorDetailResponseArrayOutput { return v.ErrorDetails }).(ErrorDetailResponseArrayOutput)
}

// Machine Extensions information
func (o MachineOutput) Extensions() MachineExtensionInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v *Machine) MachineExtensionInstanceViewResponseArrayOutput { return v.Extensions }).(MachineExtensionInstanceViewResponseArrayOutput)
}

// The time of the last status change.
func (o MachineOutput) LastStatusChange() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.LastStatusChange }).(pulumi.StringOutput)
}

// Resource location
func (o MachineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the hybrid machine FQDN.
func (o MachineOutput) MachineFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.MachineFqdn }).(pulumi.StringOutput)
}

// Resource name
func (o MachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Operating System running on the hybrid machine.
func (o MachineOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.OsName }).(pulumi.StringPtrOutput)
}

// Specifies the operating system settings for the hybrid machine.
func (o MachineOutput) OsProfile() OSProfileResponseOutput {
	return o.ApplyT(func(v *Machine) OSProfileResponseOutput { return v.OsProfile }).(OSProfileResponseOutput)
}

// The version of Operating System running on the hybrid machine.
func (o MachineOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.OsVersion }).(pulumi.StringPtrOutput)
}

// Resource's Physical Location
func (o MachineOutput) PhysicalLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.PhysicalLocation }).(pulumi.StringPtrOutput)
}

// The identity's principal id.
func (o MachineOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The provisioning state, which only appears in the response.
func (o MachineOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The status of the hybrid machine agent.
func (o MachineOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Resource tags
func (o MachineOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The identity's tenant id.
func (o MachineOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Resource type
func (o MachineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the hybrid machine unique ID.
func (o MachineOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MachineOutput{})
}
