// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211210preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a hybrid machine.
func LookupMachine(ctx *pulumi.Context, args *LookupMachineArgs, opts ...pulumi.InvokeOption) (*LookupMachineResult, error) {
	var rv LookupMachineResult
	err := ctx.Invoke("azure-native:hybridcompute/v20211210preview:getMachine", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMachineArgs struct {
	// The expand expression to apply on the operation.
	Expand *string `pulumi:"expand"`
	// The name of the hybrid machine.
	MachineName string `pulumi:"machineName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Describes a hybrid machine.
type LookupMachineResult struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Identity for the resource.
	Identity *IdentityResponse `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Hybrid Compute Machine properties
	Properties MachinePropertiesResponse `pulumi:"properties"`
	// The system meta data relating to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupMachineOutput(ctx *pulumi.Context, args LookupMachineOutputArgs, opts ...pulumi.InvokeOption) LookupMachineResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMachineResult, error) {
			args := v.(LookupMachineArgs)
			r, err := LookupMachine(ctx, &args, opts...)
			var s LookupMachineResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMachineResultOutput)
}

type LookupMachineOutputArgs struct {
	// The expand expression to apply on the operation.
	Expand pulumi.StringPtrInput `pulumi:"expand"`
	// The name of the hybrid machine.
	MachineName pulumi.StringInput `pulumi:"machineName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupMachineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMachineArgs)(nil)).Elem()
}

// Describes a hybrid machine.
type LookupMachineResultOutput struct{ *pulumi.OutputState }

func (LookupMachineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMachineResult)(nil)).Elem()
}

func (o LookupMachineResultOutput) ToLookupMachineResultOutput() LookupMachineResultOutput {
	return o
}

func (o LookupMachineResultOutput) ToLookupMachineResultOutputWithContext(ctx context.Context) LookupMachineResultOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupMachineResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identity for the resource.
func (o LookupMachineResultOutput) Identity() IdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupMachineResult) *IdentityResponse { return v.Identity }).(IdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupMachineResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupMachineResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineResult) string { return v.Name }).(pulumi.StringOutput)
}

// Hybrid Compute Machine properties
func (o LookupMachineResultOutput) Properties() MachinePropertiesResponseOutput {
	return o.ApplyT(func(v LookupMachineResult) MachinePropertiesResponse { return v.Properties }).(MachinePropertiesResponseOutput)
}

// The system meta data relating to this resource.
func (o LookupMachineResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupMachineResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupMachineResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMachineResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupMachineResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMachineResultOutput{})
}
