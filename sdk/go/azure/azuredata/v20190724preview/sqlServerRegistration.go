// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190724preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A SQL server registration.
type SqlServerRegistration struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional Properties as JSON string
	PropertyBag pulumi.StringPtrOutput `pulumi:"propertyBag"`
	// Resource Group Name
	ResourceGroup pulumi.StringPtrOutput `pulumi:"resourceGroup"`
	// Subscription Id
	SubscriptionId pulumi.StringPtrOutput `pulumi:"subscriptionId"`
	// Read only system data
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlServerRegistration registers a new resource with the given unique name, arguments, and options.
func NewSqlServerRegistration(ctx *pulumi.Context,
	name string, args *SqlServerRegistrationArgs, opts ...pulumi.ResourceOption) (*SqlServerRegistration, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SqlServerRegistrationName == nil {
		return nil, errors.New("missing required argument 'SqlServerRegistrationName'")
	}
	if args == nil {
		args = &SqlServerRegistrationArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:azuredata/v20170301preview:SqlServerRegistration"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlServerRegistration
	err := ctx.RegisterResource("azure-nextgen:azuredata/v20190724preview:SqlServerRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlServerRegistration gets an existing SqlServerRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlServerRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlServerRegistrationState, opts ...pulumi.ResourceOption) (*SqlServerRegistration, error) {
	var resource SqlServerRegistration
	err := ctx.ReadResource("azure-nextgen:azuredata/v20190724preview:SqlServerRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlServerRegistration resources.
type sqlServerRegistrationState struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// Optional Properties as JSON string
	PropertyBag *string `pulumi:"propertyBag"`
	// Resource Group Name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Read only system data
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `pulumi:"type"`
}

type SqlServerRegistrationState struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// Optional Properties as JSON string
	PropertyBag pulumi.StringPtrInput
	// Resource Group Name
	ResourceGroup pulumi.StringPtrInput
	// Subscription Id
	SubscriptionId pulumi.StringPtrInput
	// Read only system data
	SystemData SystemDataResponsePtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringPtrInput
}

func (SqlServerRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerRegistrationState)(nil)).Elem()
}

type sqlServerRegistrationArgs struct {
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Optional Properties as JSON string
	PropertyBag *string `pulumi:"propertyBag"`
	// Resource Group Name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the SQL Server registration.
	SqlServerRegistrationName string `pulumi:"sqlServerRegistrationName"`
	// Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SqlServerRegistration resource.
type SqlServerRegistrationArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringInput
	// Optional Properties as JSON string
	PropertyBag pulumi.StringPtrInput
	// Resource Group Name
	ResourceGroup pulumi.StringPtrInput
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// Name of the SQL Server registration.
	SqlServerRegistrationName pulumi.StringInput
	// Subscription Id
	SubscriptionId pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SqlServerRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerRegistrationArgs)(nil)).Elem()
}
