// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190901

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The key resource.
type Key struct {
	pulumi.CustomResourceState

	// The attributes of the key.
	Attributes KeyAttributesResponsePtrOutput `pulumi:"attributes"`
	// The elliptic curve name. For valid values, see JsonWebKeyCurveName.
	CurveName pulumi.StringPtrOutput   `pulumi:"curveName"`
	KeyOps    pulumi.StringArrayOutput `pulumi:"keyOps"`
	// The key size in bits. For example: 2048, 3072, or 4096 for RSA.
	KeySize pulumi.IntPtrOutput `pulumi:"keySize"`
	// The URI to retrieve the current version of the key.
	KeyUri pulumi.StringOutput `pulumi:"keyUri"`
	// The URI to retrieve the specific version of the key.
	KeyUriWithVersion pulumi.StringOutput `pulumi:"keyUriWithVersion"`
	// The type of the key. For valid values, see JsonWebKeyType.
	Kty pulumi.StringPtrOutput `pulumi:"kty"`
	// Azure location of the key vault resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the key vault resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Tags assigned to the key vault resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type of the key vault resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil || args.KeyName == nil {
		return nil, errors.New("missing required argument 'KeyName'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VaultName == nil {
		return nil, errors.New("missing required argument 'VaultName'")
	}
	if args == nil {
		args = &KeyArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:keyvault/latest:Key"),
		},
	})
	opts = append(opts, aliases)
	var resource Key
	err := ctx.RegisterResource("azure-nextgen:keyvault/v20190901:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("azure-nextgen:keyvault/v20190901:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
	// The attributes of the key.
	Attributes *KeyAttributesResponse `pulumi:"attributes"`
	// The elliptic curve name. For valid values, see JsonWebKeyCurveName.
	CurveName *string  `pulumi:"curveName"`
	KeyOps    []string `pulumi:"keyOps"`
	// The key size in bits. For example: 2048, 3072, or 4096 for RSA.
	KeySize *int `pulumi:"keySize"`
	// The URI to retrieve the current version of the key.
	KeyUri *string `pulumi:"keyUri"`
	// The URI to retrieve the specific version of the key.
	KeyUriWithVersion *string `pulumi:"keyUriWithVersion"`
	// The type of the key. For valid values, see JsonWebKeyType.
	Kty *string `pulumi:"kty"`
	// Azure location of the key vault resource.
	Location *string `pulumi:"location"`
	// Name of the key vault resource.
	Name *string `pulumi:"name"`
	// Tags assigned to the key vault resource.
	Tags map[string]string `pulumi:"tags"`
	// Resource type of the key vault resource.
	Type *string `pulumi:"type"`
}

type KeyState struct {
	// The attributes of the key.
	Attributes KeyAttributesResponsePtrInput
	// The elliptic curve name. For valid values, see JsonWebKeyCurveName.
	CurveName pulumi.StringPtrInput
	KeyOps    pulumi.StringArrayInput
	// The key size in bits. For example: 2048, 3072, or 4096 for RSA.
	KeySize pulumi.IntPtrInput
	// The URI to retrieve the current version of the key.
	KeyUri pulumi.StringPtrInput
	// The URI to retrieve the specific version of the key.
	KeyUriWithVersion pulumi.StringPtrInput
	// The type of the key. For valid values, see JsonWebKeyType.
	Kty pulumi.StringPtrInput
	// Azure location of the key vault resource.
	Location pulumi.StringPtrInput
	// Name of the key vault resource.
	Name pulumi.StringPtrInput
	// Tags assigned to the key vault resource.
	Tags pulumi.StringMapInput
	// Resource type of the key vault resource.
	Type pulumi.StringPtrInput
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	// The name of the key to be created.
	KeyName string `pulumi:"keyName"`
	// The properties of the key to be created.
	Properties KeyProperties `pulumi:"properties"`
	// The name of the resource group which contains the specified key vault.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The tags that will be assigned to the key.
	Tags map[string]string `pulumi:"tags"`
	// The name of the key vault which contains the key to be created.
	VaultName string `pulumi:"vaultName"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// The name of the key to be created.
	KeyName pulumi.StringInput
	// The properties of the key to be created.
	Properties KeyPropertiesInput
	// The name of the resource group which contains the specified key vault.
	ResourceGroupName pulumi.StringInput
	// The tags that will be assigned to the key.
	Tags pulumi.StringMapInput
	// The name of the key vault which contains the key to be created.
	VaultName pulumi.StringInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (Key) ElementType() reflect.Type {
	return reflect.TypeOf((*Key)(nil)).Elem()
}

func (i Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

type KeyOutput struct {
	*pulumi.OutputState
}

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyOutput)(nil)).Elem()
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KeyOutput{})
}
