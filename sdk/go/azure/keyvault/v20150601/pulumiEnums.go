// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertificatePermissions string

const (
	CertificatePermissionsAll            = CertificatePermissions("all")
	CertificatePermissionsGet            = CertificatePermissions("get")
	CertificatePermissionsList           = CertificatePermissions("list")
	CertificatePermissionsDelete         = CertificatePermissions("delete")
	CertificatePermissionsCreate         = CertificatePermissions("create")
	CertificatePermissionsImport         = CertificatePermissions("import")
	CertificatePermissionsUpdate         = CertificatePermissions("update")
	CertificatePermissionsManagecontacts = CertificatePermissions("managecontacts")
	CertificatePermissionsGetissuers     = CertificatePermissions("getissuers")
	CertificatePermissionsListissuers    = CertificatePermissions("listissuers")
	CertificatePermissionsSetissuers     = CertificatePermissions("setissuers")
	CertificatePermissionsDeleteissuers  = CertificatePermissions("deleteissuers")
	CertificatePermissionsManageissuers  = CertificatePermissions("manageissuers")
	CertificatePermissionsRecover        = CertificatePermissions("recover")
	CertificatePermissionsPurge          = CertificatePermissions("purge")
)

type KeyPermissions string

const (
	KeyPermissionsAll       = KeyPermissions("all")
	KeyPermissionsEncrypt   = KeyPermissions("encrypt")
	KeyPermissionsDecrypt   = KeyPermissions("decrypt")
	KeyPermissionsWrapKey   = KeyPermissions("wrapKey")
	KeyPermissionsUnwrapKey = KeyPermissions("unwrapKey")
	KeyPermissionsSign      = KeyPermissions("sign")
	KeyPermissionsVerify    = KeyPermissions("verify")
	KeyPermissionsGet       = KeyPermissions("get")
	KeyPermissionsList      = KeyPermissions("list")
	KeyPermissionsCreate    = KeyPermissions("create")
	KeyPermissionsUpdate    = KeyPermissions("update")
	KeyPermissionsImport    = KeyPermissions("import")
	KeyPermissionsDelete    = KeyPermissions("delete")
	KeyPermissionsBackup    = KeyPermissions("backup")
	KeyPermissionsRestore   = KeyPermissions("restore")
	KeyPermissionsRecover   = KeyPermissions("recover")
	KeyPermissionsPurge     = KeyPermissions("purge")
)

type SecretPermissions string

const (
	SecretPermissionsAll     = SecretPermissions("all")
	SecretPermissionsGet     = SecretPermissions("get")
	SecretPermissionsList    = SecretPermissions("list")
	SecretPermissionsSet     = SecretPermissions("set")
	SecretPermissionsDelete  = SecretPermissions("delete")
	SecretPermissionsBackup  = SecretPermissions("backup")
	SecretPermissionsRestore = SecretPermissions("restore")
	SecretPermissionsRecover = SecretPermissions("recover")
	SecretPermissionsPurge   = SecretPermissions("purge")
)

// SKU family name
type SkuFamily string

const (
	SkuFamilyA = SkuFamily("A")
)

// SKU name to specify whether the key vault is a standard vault or a premium vault.
type SkuName string

const (
	SkuNameStandard = SkuName("standard")
	SkuNamePremium  = SkuName("premium")
)

func (SkuName) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuName)(nil)).Elem()
}

func (e SkuName) ToSkuNameOutput() SkuNameOutput {
	return pulumi.ToOutput(e).(SkuNameOutput)
}

func (e SkuName) ToSkuNameOutputWithContext(ctx context.Context) SkuNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SkuNameOutput)
}

func (e SkuName) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return e.ToSkuNamePtrOutputWithContext(context.Background())
}

func (e SkuName) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return SkuName(e).ToSkuNameOutputWithContext(ctx).ToSkuNamePtrOutputWithContext(ctx)
}

func (e SkuName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SkuName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SkuNameOutput struct{ *pulumi.OutputState }

func (SkuNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuName)(nil)).Elem()
}

func (o SkuNameOutput) ToSkuNameOutput() SkuNameOutput {
	return o
}

func (o SkuNameOutput) ToSkuNameOutputWithContext(ctx context.Context) SkuNameOutput {
	return o
}

func (o SkuNameOutput) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return o.ToSkuNamePtrOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkuName) *SkuName {
		return &v
	}).(SkuNamePtrOutput)
}

func (o SkuNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SkuNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SkuNamePtrOutput struct{ *pulumi.OutputState }

func (SkuNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuName)(nil)).Elem()
}

func (o SkuNamePtrOutput) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return o
}

func (o SkuNamePtrOutput) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return o
}

func (o SkuNamePtrOutput) Elem() SkuNameOutput {
	return o.ApplyT(func(v *SkuName) SkuName {
		if v != nil {
			return *v
		}
		var ret SkuName
		return ret
	}).(SkuNameOutput)
}

func (o SkuNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SkuName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SkuNameInput is an input type that accepts SkuNameArgs and SkuNameOutput values.
// You can construct a concrete instance of `SkuNameInput` via:
//
//	SkuNameArgs{...}
type SkuNameInput interface {
	pulumi.Input

	ToSkuNameOutput() SkuNameOutput
	ToSkuNameOutputWithContext(context.Context) SkuNameOutput
}

var skuNamePtrType = reflect.TypeOf((**SkuName)(nil)).Elem()

type SkuNamePtrInput interface {
	pulumi.Input

	ToSkuNamePtrOutput() SkuNamePtrOutput
	ToSkuNamePtrOutputWithContext(context.Context) SkuNamePtrOutput
}

type skuNamePtr string

func SkuNamePtr(v string) SkuNamePtrInput {
	return (*skuNamePtr)(&v)
}

func (*skuNamePtr) ElementType() reflect.Type {
	return skuNamePtrType
}

func (in *skuNamePtr) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return pulumi.ToOutput(in).(SkuNamePtrOutput)
}

func (in *skuNamePtr) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SkuNamePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SkuNameOutput{})
	pulumi.RegisterOutputType(SkuNamePtrOutput{})
}
