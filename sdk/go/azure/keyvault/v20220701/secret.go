// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220701

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource information with extended details.
type Secret struct {
	pulumi.CustomResourceState

	// Azure location of the key vault resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the key vault resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the secret
	Properties SecretPropertiesResponseOutput `pulumi:"properties"`
	// Tags assigned to the key vault resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type of the key vault resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VaultName == nil {
		return nil, errors.New("invalid value for required argument 'VaultName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:keyvault:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20161001:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20180214:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20180214preview:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20190901:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20200401preview:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20210401preview:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20210601preview:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20211001:Secret"),
		},
		{
			Type: pulumi.String("azure-native:keyvault/v20211101preview:Secret"),
		},
	})
	opts = append(opts, aliases)
	var resource Secret
	err := ctx.RegisterResource("azure-native:keyvault/v20220701:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("azure-native:keyvault/v20220701:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
}

type SecretState struct {
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	// Properties of the secret
	Properties SecretProperties `pulumi:"properties"`
	// The name of the Resource Group to which the vault belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the secret
	SecretName *string `pulumi:"secretName"`
	// The tags that will be assigned to the secret.
	Tags map[string]string `pulumi:"tags"`
	// Name of the vault
	VaultName string `pulumi:"vaultName"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// Properties of the secret
	Properties SecretPropertiesInput
	// The name of the Resource Group to which the vault belongs.
	ResourceGroupName pulumi.StringInput
	// Name of the secret
	SecretName pulumi.StringPtrInput
	// The tags that will be assigned to the secret.
	Tags pulumi.StringMapInput
	// Name of the vault
	VaultName pulumi.StringInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (*Secret) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i *Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

// Azure location of the key vault resource.
func (o SecretOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the key vault resource.
func (o SecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of the secret
func (o SecretOutput) Properties() SecretPropertiesResponseOutput {
	return o.ApplyT(func(v *Secret) SecretPropertiesResponseOutput { return v.Properties }).(SecretPropertiesResponseOutput)
}

// Tags assigned to the key vault resource.
func (o SecretOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type of the key vault resource.
func (o SecretOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SecretOutput{})
}
