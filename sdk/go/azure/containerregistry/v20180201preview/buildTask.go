// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The build task that has the resource properties and all build items. The build task will have all information to schedule a build against it.
type BuildTask struct {
	pulumi.CustomResourceState

	// The alternative updatable name for a build task.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// The creation date of build task.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// The location of the resource. This cannot be changed after the resource is created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The platform properties against which the build has to happen.
	Platform PlatformPropertiesResponseOutput `pulumi:"platform"`
	// The provisioning state of the build task.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The properties that describes the source(code) for the build task.
	SourceRepository SourceRepositoryPropertiesResponseOutput `pulumi:"sourceRepository"`
	// The current status of build task.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The tags of the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Build timeout in seconds.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBuildTask registers a new resource with the given unique name, arguments, and options.
func NewBuildTask(ctx *pulumi.Context,
	name string, args *BuildTaskArgs, opts ...pulumi.ResourceOption) (*BuildTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.Platform == nil {
		return nil, errors.New("invalid value for required argument 'Platform'")
	}
	if args.RegistryName == nil {
		return nil, errors.New("invalid value for required argument 'RegistryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceRepository == nil {
		return nil, errors.New("invalid value for required argument 'SourceRepository'")
	}
	args.SourceRepository = args.SourceRepository.ToSourceRepositoryPropertiesOutput().ApplyT(func(v SourceRepositoryProperties) SourceRepositoryProperties { return *v.Defaults() }).(SourceRepositoryPropertiesOutput)
	if isZero(args.Timeout) {
		args.Timeout = pulumi.IntPtr(3600)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerregistry:BuildTask"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20180901:BuildTask"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20190401:BuildTask"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20190601preview:BuildTask"),
		},
	})
	opts = append(opts, aliases)
	var resource BuildTask
	err := ctx.RegisterResource("azure-native:containerregistry/v20180201preview:BuildTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildTask gets an existing BuildTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildTaskState, opts ...pulumi.ResourceOption) (*BuildTask, error) {
	var resource BuildTask
	err := ctx.ReadResource("azure-native:containerregistry/v20180201preview:BuildTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildTask resources.
type buildTaskState struct {
}

type BuildTaskState struct {
}

func (BuildTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildTaskState)(nil)).Elem()
}

type buildTaskArgs struct {
	// The alternative updatable name for a build task.
	Alias string `pulumi:"alias"`
	// The name of the container registry build task.
	BuildTaskName *string `pulumi:"buildTaskName"`
	// The location of the resource. This cannot be changed after the resource is created.
	Location *string `pulumi:"location"`
	// The platform properties against which the build has to happen.
	Platform PlatformProperties `pulumi:"platform"`
	// The name of the container registry.
	RegistryName string `pulumi:"registryName"`
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The properties that describes the source(code) for the build task.
	SourceRepository SourceRepositoryProperties `pulumi:"sourceRepository"`
	// The current status of build task.
	Status *string `pulumi:"status"`
	// The tags of the resource.
	Tags map[string]string `pulumi:"tags"`
	// Build timeout in seconds.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a BuildTask resource.
type BuildTaskArgs struct {
	// The alternative updatable name for a build task.
	Alias pulumi.StringInput
	// The name of the container registry build task.
	BuildTaskName pulumi.StringPtrInput
	// The location of the resource. This cannot be changed after the resource is created.
	Location pulumi.StringPtrInput
	// The platform properties against which the build has to happen.
	Platform PlatformPropertiesInput
	// The name of the container registry.
	RegistryName pulumi.StringInput
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName pulumi.StringInput
	// The properties that describes the source(code) for the build task.
	SourceRepository SourceRepositoryPropertiesInput
	// The current status of build task.
	Status pulumi.StringPtrInput
	// The tags of the resource.
	Tags pulumi.StringMapInput
	// Build timeout in seconds.
	Timeout pulumi.IntPtrInput
}

func (BuildTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildTaskArgs)(nil)).Elem()
}

type BuildTaskInput interface {
	pulumi.Input

	ToBuildTaskOutput() BuildTaskOutput
	ToBuildTaskOutputWithContext(ctx context.Context) BuildTaskOutput
}

func (*BuildTask) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildTask)(nil)).Elem()
}

func (i *BuildTask) ToBuildTaskOutput() BuildTaskOutput {
	return i.ToBuildTaskOutputWithContext(context.Background())
}

func (i *BuildTask) ToBuildTaskOutputWithContext(ctx context.Context) BuildTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTaskOutput)
}

type BuildTaskOutput struct{ *pulumi.OutputState }

func (BuildTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildTask)(nil)).Elem()
}

func (o BuildTaskOutput) ToBuildTaskOutput() BuildTaskOutput {
	return o
}

func (o BuildTaskOutput) ToBuildTaskOutputWithContext(ctx context.Context) BuildTaskOutput {
	return o
}

// The alternative updatable name for a build task.
func (o BuildTaskOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// The creation date of build task.
func (o BuildTaskOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// The location of the resource. This cannot be changed after the resource is created.
func (o BuildTaskOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource.
func (o BuildTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The platform properties against which the build has to happen.
func (o BuildTaskOutput) Platform() PlatformPropertiesResponseOutput {
	return o.ApplyT(func(v *BuildTask) PlatformPropertiesResponseOutput { return v.Platform }).(PlatformPropertiesResponseOutput)
}

// The provisioning state of the build task.
func (o BuildTaskOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The properties that describes the source(code) for the build task.
func (o BuildTaskOutput) SourceRepository() SourceRepositoryPropertiesResponseOutput {
	return o.ApplyT(func(v *BuildTask) SourceRepositoryPropertiesResponseOutput { return v.SourceRepository }).(SourceRepositoryPropertiesResponseOutput)
}

// The current status of build task.
func (o BuildTaskOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The tags of the resource.
func (o BuildTaskOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Build timeout in seconds.
func (o BuildTaskOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The type of the resource.
func (o BuildTaskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildTask) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BuildTaskOutput{})
}
