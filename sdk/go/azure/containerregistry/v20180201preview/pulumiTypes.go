// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Properties that describe a base image dependency.
type BaseImageDependencyInvokeResponse struct {
	// The sha256-based digest of the image manifest.
	Digest *string `pulumi:"digest"`
	// The registry login server.
	Registry *string `pulumi:"registry"`
	// The repository name.
	Repository *string `pulumi:"repository"`
	// The tag name.
	Tag *string `pulumi:"tag"`
	// The type of the base image dependency.
	Type *string `pulumi:"type"`
}

// BaseImageDependencyInvokeResponseInput is an input type that accepts BaseImageDependencyInvokeResponseArgs and BaseImageDependencyInvokeResponseOutput values.
// You can construct a concrete instance of `BaseImageDependencyInvokeResponseInput` via:
//
//          BaseImageDependencyInvokeResponseArgs{...}
type BaseImageDependencyInvokeResponseInput interface {
	pulumi.Input

	ToBaseImageDependencyInvokeResponseOutput() BaseImageDependencyInvokeResponseOutput
	ToBaseImageDependencyInvokeResponseOutputWithContext(context.Context) BaseImageDependencyInvokeResponseOutput
}

// Properties that describe a base image dependency.
type BaseImageDependencyInvokeResponseArgs struct {
	// The sha256-based digest of the image manifest.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// The registry login server.
	Registry pulumi.StringPtrInput `pulumi:"registry"`
	// The repository name.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// The tag name.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The type of the base image dependency.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BaseImageDependencyInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageDependencyInvokeResponse)(nil)).Elem()
}

func (i BaseImageDependencyInvokeResponseArgs) ToBaseImageDependencyInvokeResponseOutput() BaseImageDependencyInvokeResponseOutput {
	return i.ToBaseImageDependencyInvokeResponseOutputWithContext(context.Background())
}

func (i BaseImageDependencyInvokeResponseArgs) ToBaseImageDependencyInvokeResponseOutputWithContext(ctx context.Context) BaseImageDependencyInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageDependencyInvokeResponseOutput)
}

// BaseImageDependencyInvokeResponseArrayInput is an input type that accepts BaseImageDependencyInvokeResponseArray and BaseImageDependencyInvokeResponseArrayOutput values.
// You can construct a concrete instance of `BaseImageDependencyInvokeResponseArrayInput` via:
//
//          BaseImageDependencyInvokeResponseArray{ BaseImageDependencyInvokeResponseArgs{...} }
type BaseImageDependencyInvokeResponseArrayInput interface {
	pulumi.Input

	ToBaseImageDependencyInvokeResponseArrayOutput() BaseImageDependencyInvokeResponseArrayOutput
	ToBaseImageDependencyInvokeResponseArrayOutputWithContext(context.Context) BaseImageDependencyInvokeResponseArrayOutput
}

type BaseImageDependencyInvokeResponseArray []BaseImageDependencyInvokeResponseInput

func (BaseImageDependencyInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaseImageDependencyInvokeResponse)(nil)).Elem()
}

func (i BaseImageDependencyInvokeResponseArray) ToBaseImageDependencyInvokeResponseArrayOutput() BaseImageDependencyInvokeResponseArrayOutput {
	return i.ToBaseImageDependencyInvokeResponseArrayOutputWithContext(context.Background())
}

func (i BaseImageDependencyInvokeResponseArray) ToBaseImageDependencyInvokeResponseArrayOutputWithContext(ctx context.Context) BaseImageDependencyInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageDependencyInvokeResponseArrayOutput)
}

// Properties that describe a base image dependency.
type BaseImageDependencyInvokeResponseOutput struct{ *pulumi.OutputState }

func (BaseImageDependencyInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageDependencyInvokeResponse)(nil)).Elem()
}

func (o BaseImageDependencyInvokeResponseOutput) ToBaseImageDependencyInvokeResponseOutput() BaseImageDependencyInvokeResponseOutput {
	return o
}

func (o BaseImageDependencyInvokeResponseOutput) ToBaseImageDependencyInvokeResponseOutputWithContext(ctx context.Context) BaseImageDependencyInvokeResponseOutput {
	return o
}

// The sha256-based digest of the image manifest.
func (o BaseImageDependencyInvokeResponseOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyInvokeResponse) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The registry login server.
func (o BaseImageDependencyInvokeResponseOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyInvokeResponse) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// The repository name.
func (o BaseImageDependencyInvokeResponseOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyInvokeResponse) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The tag name.
func (o BaseImageDependencyInvokeResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyInvokeResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The type of the base image dependency.
func (o BaseImageDependencyInvokeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyInvokeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BaseImageDependencyInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (BaseImageDependencyInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaseImageDependencyInvokeResponse)(nil)).Elem()
}

func (o BaseImageDependencyInvokeResponseArrayOutput) ToBaseImageDependencyInvokeResponseArrayOutput() BaseImageDependencyInvokeResponseArrayOutput {
	return o
}

func (o BaseImageDependencyInvokeResponseArrayOutput) ToBaseImageDependencyInvokeResponseArrayOutputWithContext(ctx context.Context) BaseImageDependencyInvokeResponseArrayOutput {
	return o
}

func (o BaseImageDependencyInvokeResponseArrayOutput) Index(i pulumi.IntInput) BaseImageDependencyInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaseImageDependencyInvokeResponse {
		return vs[0].([]BaseImageDependencyInvokeResponse)[vs[1].(int)]
	}).(BaseImageDependencyInvokeResponseOutput)
}

// Properties that describe a base image dependency.
type BaseImageDependencyResponse struct {
	// The sha256-based digest of the image manifest.
	Digest *string `pulumi:"digest"`
	// The registry login server.
	Registry *string `pulumi:"registry"`
	// The repository name.
	Repository *string `pulumi:"repository"`
	// The tag name.
	Tag *string `pulumi:"tag"`
	// The type of the base image dependency.
	Type *string `pulumi:"type"`
}

// BaseImageDependencyResponseInput is an input type that accepts BaseImageDependencyResponseArgs and BaseImageDependencyResponseOutput values.
// You can construct a concrete instance of `BaseImageDependencyResponseInput` via:
//
//          BaseImageDependencyResponseArgs{...}
type BaseImageDependencyResponseInput interface {
	pulumi.Input

	ToBaseImageDependencyResponseOutput() BaseImageDependencyResponseOutput
	ToBaseImageDependencyResponseOutputWithContext(context.Context) BaseImageDependencyResponseOutput
}

// Properties that describe a base image dependency.
type BaseImageDependencyResponseArgs struct {
	// The sha256-based digest of the image manifest.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// The registry login server.
	Registry pulumi.StringPtrInput `pulumi:"registry"`
	// The repository name.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// The tag name.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The type of the base image dependency.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BaseImageDependencyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageDependencyResponse)(nil)).Elem()
}

func (i BaseImageDependencyResponseArgs) ToBaseImageDependencyResponseOutput() BaseImageDependencyResponseOutput {
	return i.ToBaseImageDependencyResponseOutputWithContext(context.Background())
}

func (i BaseImageDependencyResponseArgs) ToBaseImageDependencyResponseOutputWithContext(ctx context.Context) BaseImageDependencyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageDependencyResponseOutput)
}

// BaseImageDependencyResponseArrayInput is an input type that accepts BaseImageDependencyResponseArray and BaseImageDependencyResponseArrayOutput values.
// You can construct a concrete instance of `BaseImageDependencyResponseArrayInput` via:
//
//          BaseImageDependencyResponseArray{ BaseImageDependencyResponseArgs{...} }
type BaseImageDependencyResponseArrayInput interface {
	pulumi.Input

	ToBaseImageDependencyResponseArrayOutput() BaseImageDependencyResponseArrayOutput
	ToBaseImageDependencyResponseArrayOutputWithContext(context.Context) BaseImageDependencyResponseArrayOutput
}

type BaseImageDependencyResponseArray []BaseImageDependencyResponseInput

func (BaseImageDependencyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaseImageDependencyResponse)(nil)).Elem()
}

func (i BaseImageDependencyResponseArray) ToBaseImageDependencyResponseArrayOutput() BaseImageDependencyResponseArrayOutput {
	return i.ToBaseImageDependencyResponseArrayOutputWithContext(context.Background())
}

func (i BaseImageDependencyResponseArray) ToBaseImageDependencyResponseArrayOutputWithContext(ctx context.Context) BaseImageDependencyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageDependencyResponseArrayOutput)
}

// Properties that describe a base image dependency.
type BaseImageDependencyResponseOutput struct{ *pulumi.OutputState }

func (BaseImageDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageDependencyResponse)(nil)).Elem()
}

func (o BaseImageDependencyResponseOutput) ToBaseImageDependencyResponseOutput() BaseImageDependencyResponseOutput {
	return o
}

func (o BaseImageDependencyResponseOutput) ToBaseImageDependencyResponseOutputWithContext(ctx context.Context) BaseImageDependencyResponseOutput {
	return o
}

// The sha256-based digest of the image manifest.
func (o BaseImageDependencyResponseOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The registry login server.
func (o BaseImageDependencyResponseOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// The repository name.
func (o BaseImageDependencyResponseOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The tag name.
func (o BaseImageDependencyResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The type of the base image dependency.
func (o BaseImageDependencyResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BaseImageDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (BaseImageDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaseImageDependencyResponse)(nil)).Elem()
}

func (o BaseImageDependencyResponseArrayOutput) ToBaseImageDependencyResponseArrayOutput() BaseImageDependencyResponseArrayOutput {
	return o
}

func (o BaseImageDependencyResponseArrayOutput) ToBaseImageDependencyResponseArrayOutputWithContext(ctx context.Context) BaseImageDependencyResponseArrayOutput {
	return o
}

func (o BaseImageDependencyResponseArrayOutput) Index(i pulumi.IntInput) BaseImageDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaseImageDependencyResponse {
		return vs[0].([]BaseImageDependencyResponse)[vs[1].(int)]
	}).(BaseImageDependencyResponseOutput)
}

// Properties of a build argument.
type BuildArgumentInvokeResponse struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the argument.
	Name string `pulumi:"name"`
	// The type of the argument.
	Type string `pulumi:"type"`
	// The value of the argument.
	Value string `pulumi:"value"`
}

// BuildArgumentInvokeResponseInput is an input type that accepts BuildArgumentInvokeResponseArgs and BuildArgumentInvokeResponseOutput values.
// You can construct a concrete instance of `BuildArgumentInvokeResponseInput` via:
//
//          BuildArgumentInvokeResponseArgs{...}
type BuildArgumentInvokeResponseInput interface {
	pulumi.Input

	ToBuildArgumentInvokeResponseOutput() BuildArgumentInvokeResponseOutput
	ToBuildArgumentInvokeResponseOutputWithContext(context.Context) BuildArgumentInvokeResponseOutput
}

// Properties of a build argument.
type BuildArgumentInvokeResponseArgs struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret pulumi.BoolPtrInput `pulumi:"isSecret"`
	// The name of the argument.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the argument.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the argument.
	Value pulumi.StringInput `pulumi:"value"`
}

func (BuildArgumentInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArgumentInvokeResponse)(nil)).Elem()
}

func (i BuildArgumentInvokeResponseArgs) ToBuildArgumentInvokeResponseOutput() BuildArgumentInvokeResponseOutput {
	return i.ToBuildArgumentInvokeResponseOutputWithContext(context.Background())
}

func (i BuildArgumentInvokeResponseArgs) ToBuildArgumentInvokeResponseOutputWithContext(ctx context.Context) BuildArgumentInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArgumentInvokeResponseOutput)
}

// BuildArgumentInvokeResponseArrayInput is an input type that accepts BuildArgumentInvokeResponseArray and BuildArgumentInvokeResponseArrayOutput values.
// You can construct a concrete instance of `BuildArgumentInvokeResponseArrayInput` via:
//
//          BuildArgumentInvokeResponseArray{ BuildArgumentInvokeResponseArgs{...} }
type BuildArgumentInvokeResponseArrayInput interface {
	pulumi.Input

	ToBuildArgumentInvokeResponseArrayOutput() BuildArgumentInvokeResponseArrayOutput
	ToBuildArgumentInvokeResponseArrayOutputWithContext(context.Context) BuildArgumentInvokeResponseArrayOutput
}

type BuildArgumentInvokeResponseArray []BuildArgumentInvokeResponseInput

func (BuildArgumentInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArgumentInvokeResponse)(nil)).Elem()
}

func (i BuildArgumentInvokeResponseArray) ToBuildArgumentInvokeResponseArrayOutput() BuildArgumentInvokeResponseArrayOutput {
	return i.ToBuildArgumentInvokeResponseArrayOutputWithContext(context.Background())
}

func (i BuildArgumentInvokeResponseArray) ToBuildArgumentInvokeResponseArrayOutputWithContext(ctx context.Context) BuildArgumentInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArgumentInvokeResponseArrayOutput)
}

// Properties of a build argument.
type BuildArgumentInvokeResponseOutput struct{ *pulumi.OutputState }

func (BuildArgumentInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArgumentInvokeResponse)(nil)).Elem()
}

func (o BuildArgumentInvokeResponseOutput) ToBuildArgumentInvokeResponseOutput() BuildArgumentInvokeResponseOutput {
	return o
}

func (o BuildArgumentInvokeResponseOutput) ToBuildArgumentInvokeResponseOutputWithContext(ctx context.Context) BuildArgumentInvokeResponseOutput {
	return o
}

// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
func (o BuildArgumentInvokeResponseOutput) IsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildArgumentInvokeResponse) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the argument.
func (o BuildArgumentInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the argument.
func (o BuildArgumentInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the argument.
func (o BuildArgumentInvokeResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentInvokeResponse) string { return v.Value }).(pulumi.StringOutput)
}

type BuildArgumentInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (BuildArgumentInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArgumentInvokeResponse)(nil)).Elem()
}

func (o BuildArgumentInvokeResponseArrayOutput) ToBuildArgumentInvokeResponseArrayOutput() BuildArgumentInvokeResponseArrayOutput {
	return o
}

func (o BuildArgumentInvokeResponseArrayOutput) ToBuildArgumentInvokeResponseArrayOutputWithContext(ctx context.Context) BuildArgumentInvokeResponseArrayOutput {
	return o
}

func (o BuildArgumentInvokeResponseArrayOutput) Index(i pulumi.IntInput) BuildArgumentInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildArgumentInvokeResponse {
		return vs[0].([]BuildArgumentInvokeResponse)[vs[1].(int)]
	}).(BuildArgumentInvokeResponseOutput)
}

// Properties of a build argument.
type BuildArgumentResponse struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the argument.
	Name string `pulumi:"name"`
	// The type of the argument.
	Type string `pulumi:"type"`
	// The value of the argument.
	Value string `pulumi:"value"`
}

// BuildArgumentResponseInput is an input type that accepts BuildArgumentResponseArgs and BuildArgumentResponseOutput values.
// You can construct a concrete instance of `BuildArgumentResponseInput` via:
//
//          BuildArgumentResponseArgs{...}
type BuildArgumentResponseInput interface {
	pulumi.Input

	ToBuildArgumentResponseOutput() BuildArgumentResponseOutput
	ToBuildArgumentResponseOutputWithContext(context.Context) BuildArgumentResponseOutput
}

// Properties of a build argument.
type BuildArgumentResponseArgs struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret pulumi.BoolPtrInput `pulumi:"isSecret"`
	// The name of the argument.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the argument.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the argument.
	Value pulumi.StringInput `pulumi:"value"`
}

func (BuildArgumentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArgumentResponse)(nil)).Elem()
}

func (i BuildArgumentResponseArgs) ToBuildArgumentResponseOutput() BuildArgumentResponseOutput {
	return i.ToBuildArgumentResponseOutputWithContext(context.Background())
}

func (i BuildArgumentResponseArgs) ToBuildArgumentResponseOutputWithContext(ctx context.Context) BuildArgumentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArgumentResponseOutput)
}

// BuildArgumentResponseArrayInput is an input type that accepts BuildArgumentResponseArray and BuildArgumentResponseArrayOutput values.
// You can construct a concrete instance of `BuildArgumentResponseArrayInput` via:
//
//          BuildArgumentResponseArray{ BuildArgumentResponseArgs{...} }
type BuildArgumentResponseArrayInput interface {
	pulumi.Input

	ToBuildArgumentResponseArrayOutput() BuildArgumentResponseArrayOutput
	ToBuildArgumentResponseArrayOutputWithContext(context.Context) BuildArgumentResponseArrayOutput
}

type BuildArgumentResponseArray []BuildArgumentResponseInput

func (BuildArgumentResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArgumentResponse)(nil)).Elem()
}

func (i BuildArgumentResponseArray) ToBuildArgumentResponseArrayOutput() BuildArgumentResponseArrayOutput {
	return i.ToBuildArgumentResponseArrayOutputWithContext(context.Background())
}

func (i BuildArgumentResponseArray) ToBuildArgumentResponseArrayOutputWithContext(ctx context.Context) BuildArgumentResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArgumentResponseArrayOutput)
}

// Properties of a build argument.
type BuildArgumentResponseOutput struct{ *pulumi.OutputState }

func (BuildArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArgumentResponse)(nil)).Elem()
}

func (o BuildArgumentResponseOutput) ToBuildArgumentResponseOutput() BuildArgumentResponseOutput {
	return o
}

func (o BuildArgumentResponseOutput) ToBuildArgumentResponseOutputWithContext(ctx context.Context) BuildArgumentResponseOutput {
	return o
}

// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
func (o BuildArgumentResponseOutput) IsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildArgumentResponse) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the argument.
func (o BuildArgumentResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the argument.
func (o BuildArgumentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the argument.
func (o BuildArgumentResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Value }).(pulumi.StringOutput)
}

type BuildArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (BuildArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArgumentResponse)(nil)).Elem()
}

func (o BuildArgumentResponseArrayOutput) ToBuildArgumentResponseArrayOutput() BuildArgumentResponseArrayOutput {
	return o
}

func (o BuildArgumentResponseArrayOutput) ToBuildArgumentResponseArrayOutputWithContext(ctx context.Context) BuildArgumentResponseArrayOutput {
	return o
}

func (o BuildArgumentResponseArrayOutput) Index(i pulumi.IntInput) BuildArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildArgumentResponse {
		return vs[0].([]BuildArgumentResponse)[vs[1].(int)]
	}).(BuildArgumentResponseOutput)
}

// The Docker build step.
type DockerBuildStepInvokeResponse struct {
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyInvokeResponse `pulumi:"baseImageDependencies"`
	// The type of the auto trigger for base image dependency updates.
	BaseImageTrigger *string `pulumi:"baseImageTrigger"`
	// The repository branch name.
	Branch *string `pulumi:"branch"`
	// The custom arguments for building this build step.
	BuildArguments []BuildArgumentInvokeResponse `pulumi:"buildArguments"`
	// The relative context path for a docker build in the source.
	ContextPath *string `pulumi:"contextPath"`
	// The Docker file path relative to the source control root.
	DockerFilePath *string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The provisioning state of the build step.
	ProvisioningState string `pulumi:"provisioningState"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type string `pulumi:"type"`
}

// DockerBuildStepInvokeResponseInput is an input type that accepts DockerBuildStepInvokeResponseArgs and DockerBuildStepInvokeResponseOutput values.
// You can construct a concrete instance of `DockerBuildStepInvokeResponseInput` via:
//
//          DockerBuildStepInvokeResponseArgs{...}
type DockerBuildStepInvokeResponseInput interface {
	pulumi.Input

	ToDockerBuildStepInvokeResponseOutput() DockerBuildStepInvokeResponseOutput
	ToDockerBuildStepInvokeResponseOutputWithContext(context.Context) DockerBuildStepInvokeResponseOutput
}

// The Docker build step.
type DockerBuildStepInvokeResponseArgs struct {
	// List of base image dependencies for a step.
	BaseImageDependencies BaseImageDependencyInvokeResponseArrayInput `pulumi:"baseImageDependencies"`
	// The type of the auto trigger for base image dependency updates.
	BaseImageTrigger pulumi.StringPtrInput `pulumi:"baseImageTrigger"`
	// The repository branch name.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The custom arguments for building this build step.
	BuildArguments BuildArgumentInvokeResponseArrayInput `pulumi:"buildArguments"`
	// The relative context path for a docker build in the source.
	ContextPath pulumi.StringPtrInput `pulumi:"contextPath"`
	// The Docker file path relative to the source control root.
	DockerFilePath pulumi.StringPtrInput `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames pulumi.StringArrayInput `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled pulumi.BoolPtrInput `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache pulumi.BoolPtrInput `pulumi:"noCache"`
	// The provisioning state of the build step.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DockerBuildStepInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildStepInvokeResponse)(nil)).Elem()
}

func (i DockerBuildStepInvokeResponseArgs) ToDockerBuildStepInvokeResponseOutput() DockerBuildStepInvokeResponseOutput {
	return i.ToDockerBuildStepInvokeResponseOutputWithContext(context.Background())
}

func (i DockerBuildStepInvokeResponseArgs) ToDockerBuildStepInvokeResponseOutputWithContext(ctx context.Context) DockerBuildStepInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildStepInvokeResponseOutput)
}

// The Docker build step.
type DockerBuildStepInvokeResponseOutput struct{ *pulumi.OutputState }

func (DockerBuildStepInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildStepInvokeResponse)(nil)).Elem()
}

func (o DockerBuildStepInvokeResponseOutput) ToDockerBuildStepInvokeResponseOutput() DockerBuildStepInvokeResponseOutput {
	return o
}

func (o DockerBuildStepInvokeResponseOutput) ToDockerBuildStepInvokeResponseOutputWithContext(ctx context.Context) DockerBuildStepInvokeResponseOutput {
	return o
}

// List of base image dependencies for a step.
func (o DockerBuildStepInvokeResponseOutput) BaseImageDependencies() BaseImageDependencyInvokeResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) []BaseImageDependencyInvokeResponse {
		return v.BaseImageDependencies
	}).(BaseImageDependencyInvokeResponseArrayOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o DockerBuildStepInvokeResponseOutput) BaseImageTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) *string { return v.BaseImageTrigger }).(pulumi.StringPtrOutput)
}

// The repository branch name.
func (o DockerBuildStepInvokeResponseOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The custom arguments for building this build step.
func (o DockerBuildStepInvokeResponseOutput) BuildArguments() BuildArgumentInvokeResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) []BuildArgumentInvokeResponse { return v.BuildArguments }).(BuildArgumentInvokeResponseArrayOutput)
}

// The relative context path for a docker build in the source.
func (o DockerBuildStepInvokeResponseOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source control root.
func (o DockerBuildStepInvokeResponseOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) *string { return v.DockerFilePath }).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepInvokeResponseOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) []string { return v.ImageNames }).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepInvokeResponseOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) *bool { return v.IsPushEnabled }).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepInvokeResponseOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// The provisioning state of the build step.
func (o DockerBuildStepInvokeResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the step.
// Expected value is 'Docker'.
func (o DockerBuildStepInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStepInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Docker build step.
type DockerBuildStepResponse struct {
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyResponse `pulumi:"baseImageDependencies"`
	// The type of the auto trigger for base image dependency updates.
	BaseImageTrigger *string `pulumi:"baseImageTrigger"`
	// The repository branch name.
	Branch *string `pulumi:"branch"`
	// The custom arguments for building this build step.
	BuildArguments []BuildArgumentResponse `pulumi:"buildArguments"`
	// The relative context path for a docker build in the source.
	ContextPath *string `pulumi:"contextPath"`
	// The Docker file path relative to the source control root.
	DockerFilePath *string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The provisioning state of the build step.
	ProvisioningState string `pulumi:"provisioningState"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type string `pulumi:"type"`
}

// DockerBuildStepResponseInput is an input type that accepts DockerBuildStepResponseArgs and DockerBuildStepResponseOutput values.
// You can construct a concrete instance of `DockerBuildStepResponseInput` via:
//
//          DockerBuildStepResponseArgs{...}
type DockerBuildStepResponseInput interface {
	pulumi.Input

	ToDockerBuildStepResponseOutput() DockerBuildStepResponseOutput
	ToDockerBuildStepResponseOutputWithContext(context.Context) DockerBuildStepResponseOutput
}

// The Docker build step.
type DockerBuildStepResponseArgs struct {
	// List of base image dependencies for a step.
	BaseImageDependencies BaseImageDependencyResponseArrayInput `pulumi:"baseImageDependencies"`
	// The type of the auto trigger for base image dependency updates.
	BaseImageTrigger pulumi.StringPtrInput `pulumi:"baseImageTrigger"`
	// The repository branch name.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The custom arguments for building this build step.
	BuildArguments BuildArgumentResponseArrayInput `pulumi:"buildArguments"`
	// The relative context path for a docker build in the source.
	ContextPath pulumi.StringPtrInput `pulumi:"contextPath"`
	// The Docker file path relative to the source control root.
	DockerFilePath pulumi.StringPtrInput `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames pulumi.StringArrayInput `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled pulumi.BoolPtrInput `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache pulumi.BoolPtrInput `pulumi:"noCache"`
	// The provisioning state of the build step.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DockerBuildStepResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildStepResponse)(nil)).Elem()
}

func (i DockerBuildStepResponseArgs) ToDockerBuildStepResponseOutput() DockerBuildStepResponseOutput {
	return i.ToDockerBuildStepResponseOutputWithContext(context.Background())
}

func (i DockerBuildStepResponseArgs) ToDockerBuildStepResponseOutputWithContext(ctx context.Context) DockerBuildStepResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildStepResponseOutput)
}

func (i DockerBuildStepResponseArgs) ToDockerBuildStepResponsePtrOutput() DockerBuildStepResponsePtrOutput {
	return i.ToDockerBuildStepResponsePtrOutputWithContext(context.Background())
}

func (i DockerBuildStepResponseArgs) ToDockerBuildStepResponsePtrOutputWithContext(ctx context.Context) DockerBuildStepResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildStepResponseOutput).ToDockerBuildStepResponsePtrOutputWithContext(ctx)
}

// DockerBuildStepResponsePtrInput is an input type that accepts DockerBuildStepResponseArgs, DockerBuildStepResponsePtr and DockerBuildStepResponsePtrOutput values.
// You can construct a concrete instance of `DockerBuildStepResponsePtrInput` via:
//
//          DockerBuildStepResponseArgs{...}
//
//  or:
//
//          nil
type DockerBuildStepResponsePtrInput interface {
	pulumi.Input

	ToDockerBuildStepResponsePtrOutput() DockerBuildStepResponsePtrOutput
	ToDockerBuildStepResponsePtrOutputWithContext(context.Context) DockerBuildStepResponsePtrOutput
}

type dockerBuildStepResponsePtrType DockerBuildStepResponseArgs

func DockerBuildStepResponsePtr(v *DockerBuildStepResponseArgs) DockerBuildStepResponsePtrInput {
	return (*dockerBuildStepResponsePtrType)(v)
}

func (*dockerBuildStepResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildStepResponse)(nil)).Elem()
}

func (i *dockerBuildStepResponsePtrType) ToDockerBuildStepResponsePtrOutput() DockerBuildStepResponsePtrOutput {
	return i.ToDockerBuildStepResponsePtrOutputWithContext(context.Background())
}

func (i *dockerBuildStepResponsePtrType) ToDockerBuildStepResponsePtrOutputWithContext(ctx context.Context) DockerBuildStepResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildStepResponsePtrOutput)
}

// The Docker build step.
type DockerBuildStepResponseOutput struct{ *pulumi.OutputState }

func (DockerBuildStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildStepResponse)(nil)).Elem()
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponseOutput() DockerBuildStepResponseOutput {
	return o
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponseOutputWithContext(ctx context.Context) DockerBuildStepResponseOutput {
	return o
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponsePtrOutput() DockerBuildStepResponsePtrOutput {
	return o.ToDockerBuildStepResponsePtrOutputWithContext(context.Background())
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponsePtrOutputWithContext(ctx context.Context) DockerBuildStepResponsePtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *DockerBuildStepResponse {
		return &v
	}).(DockerBuildStepResponsePtrOutput)
}

// List of base image dependencies for a step.
func (o DockerBuildStepResponseOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []BaseImageDependencyResponse { return v.BaseImageDependencies }).(BaseImageDependencyResponseArrayOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o DockerBuildStepResponseOutput) BaseImageTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.BaseImageTrigger }).(pulumi.StringPtrOutput)
}

// The repository branch name.
func (o DockerBuildStepResponseOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The custom arguments for building this build step.
func (o DockerBuildStepResponseOutput) BuildArguments() BuildArgumentResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []BuildArgumentResponse { return v.BuildArguments }).(BuildArgumentResponseArrayOutput)
}

// The relative context path for a docker build in the source.
func (o DockerBuildStepResponseOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source control root.
func (o DockerBuildStepResponseOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.DockerFilePath }).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepResponseOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []string { return v.ImageNames }).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepResponseOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *bool { return v.IsPushEnabled }).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepResponseOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// The provisioning state of the build step.
func (o DockerBuildStepResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the step.
// Expected value is 'Docker'.
func (o DockerBuildStepResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DockerBuildStepResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerBuildStepResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildStepResponse)(nil)).Elem()
}

func (o DockerBuildStepResponsePtrOutput) ToDockerBuildStepResponsePtrOutput() DockerBuildStepResponsePtrOutput {
	return o
}

func (o DockerBuildStepResponsePtrOutput) ToDockerBuildStepResponsePtrOutputWithContext(ctx context.Context) DockerBuildStepResponsePtrOutput {
	return o
}

func (o DockerBuildStepResponsePtrOutput) Elem() DockerBuildStepResponseOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) DockerBuildStepResponse { return *v }).(DockerBuildStepResponseOutput)
}

// List of base image dependencies for a step.
func (o DockerBuildStepResponsePtrOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []BaseImageDependencyResponse {
		if v == nil {
			return nil
		}
		return v.BaseImageDependencies
	}).(BaseImageDependencyResponseArrayOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o DockerBuildStepResponsePtrOutput) BaseImageTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.BaseImageTrigger
	}).(pulumi.StringPtrOutput)
}

// The repository branch name.
func (o DockerBuildStepResponsePtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The custom arguments for building this build step.
func (o DockerBuildStepResponsePtrOutput) BuildArguments() BuildArgumentResponseArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []BuildArgumentResponse {
		if v == nil {
			return nil
		}
		return v.BuildArguments
	}).(BuildArgumentResponseArrayOutput)
}

// The relative context path for a docker build in the source.
func (o DockerBuildStepResponsePtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source control root.
func (o DockerBuildStepResponsePtrOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerFilePath
	}).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepResponsePtrOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImageNames
	}).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepResponsePtrOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsPushEnabled
	}).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepResponsePtrOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NoCache
	}).(pulumi.BoolPtrOutput)
}

// The provisioning state of the build step.
func (o DockerBuildStepResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'Docker'.
func (o DockerBuildStepResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the build has to happen.
type PlatformProperties struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu *int `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType string `pulumi:"osType"`
}

// PlatformPropertiesInput is an input type that accepts PlatformPropertiesArgs and PlatformPropertiesOutput values.
// You can construct a concrete instance of `PlatformPropertiesInput` via:
//
//          PlatformPropertiesArgs{...}
type PlatformPropertiesInput interface {
	pulumi.Input

	ToPlatformPropertiesOutput() PlatformPropertiesOutput
	ToPlatformPropertiesOutputWithContext(context.Context) PlatformPropertiesOutput
}

// The platform properties against which the build has to happen.
type PlatformPropertiesArgs struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType pulumi.StringInput `pulumi:"osType"`
}

func (PlatformPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformProperties)(nil)).Elem()
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesOutput() PlatformPropertiesOutput {
	return i.ToPlatformPropertiesOutputWithContext(context.Background())
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesOutputWithContext(ctx context.Context) PlatformPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesOutput)
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return i.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesOutput).ToPlatformPropertiesPtrOutputWithContext(ctx)
}

// PlatformPropertiesPtrInput is an input type that accepts PlatformPropertiesArgs, PlatformPropertiesPtr and PlatformPropertiesPtrOutput values.
// You can construct a concrete instance of `PlatformPropertiesPtrInput` via:
//
//          PlatformPropertiesArgs{...}
//
//  or:
//
//          nil
type PlatformPropertiesPtrInput interface {
	pulumi.Input

	ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput
	ToPlatformPropertiesPtrOutputWithContext(context.Context) PlatformPropertiesPtrOutput
}

type platformPropertiesPtrType PlatformPropertiesArgs

func PlatformPropertiesPtr(v *PlatformPropertiesArgs) PlatformPropertiesPtrInput {
	return (*platformPropertiesPtrType)(v)
}

func (*platformPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformProperties)(nil)).Elem()
}

func (i *platformPropertiesPtrType) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return i.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (i *platformPropertiesPtrType) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesPtrOutput)
}

// The platform properties against which the build has to happen.
type PlatformPropertiesOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformProperties)(nil)).Elem()
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesOutput() PlatformPropertiesOutput {
	return o
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesOutputWithContext(ctx context.Context) PlatformPropertiesOutput {
	return o
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return o.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return o.ApplyT(func(v PlatformProperties) *PlatformProperties {
		return &v
	}).(PlatformPropertiesPtrOutput)
}

// The CPU configuration in terms of number of cores required for the build.
func (o PlatformPropertiesOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlatformProperties) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// The operating system type required for the build.
func (o PlatformPropertiesOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformProperties) string { return v.OsType }).(pulumi.StringOutput)
}

type PlatformPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformProperties)(nil)).Elem()
}

func (o PlatformPropertiesPtrOutput) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return o
}

func (o PlatformPropertiesPtrOutput) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return o
}

func (o PlatformPropertiesPtrOutput) Elem() PlatformPropertiesOutput {
	return o.ApplyT(func(v *PlatformProperties) PlatformProperties { return *v }).(PlatformPropertiesOutput)
}

// The CPU configuration in terms of number of cores required for the build.
func (o PlatformPropertiesPtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlatformProperties) *int {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.IntPtrOutput)
}

// The operating system type required for the build.
func (o PlatformPropertiesPtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformProperties) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the build has to happen.
type PlatformPropertiesInvokeResponse struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu *int `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType string `pulumi:"osType"`
}

// PlatformPropertiesInvokeResponseInput is an input type that accepts PlatformPropertiesInvokeResponseArgs and PlatformPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `PlatformPropertiesInvokeResponseInput` via:
//
//          PlatformPropertiesInvokeResponseArgs{...}
type PlatformPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToPlatformPropertiesInvokeResponseOutput() PlatformPropertiesInvokeResponseOutput
	ToPlatformPropertiesInvokeResponseOutputWithContext(context.Context) PlatformPropertiesInvokeResponseOutput
}

// The platform properties against which the build has to happen.
type PlatformPropertiesInvokeResponseArgs struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType pulumi.StringInput `pulumi:"osType"`
}

func (PlatformPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformPropertiesInvokeResponse)(nil)).Elem()
}

func (i PlatformPropertiesInvokeResponseArgs) ToPlatformPropertiesInvokeResponseOutput() PlatformPropertiesInvokeResponseOutput {
	return i.ToPlatformPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i PlatformPropertiesInvokeResponseArgs) ToPlatformPropertiesInvokeResponseOutputWithContext(ctx context.Context) PlatformPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesInvokeResponseOutput)
}

// The platform properties against which the build has to happen.
type PlatformPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformPropertiesInvokeResponse)(nil)).Elem()
}

func (o PlatformPropertiesInvokeResponseOutput) ToPlatformPropertiesInvokeResponseOutput() PlatformPropertiesInvokeResponseOutput {
	return o
}

func (o PlatformPropertiesInvokeResponseOutput) ToPlatformPropertiesInvokeResponseOutputWithContext(ctx context.Context) PlatformPropertiesInvokeResponseOutput {
	return o
}

// The CPU configuration in terms of number of cores required for the build.
func (o PlatformPropertiesInvokeResponseOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlatformPropertiesInvokeResponse) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// The operating system type required for the build.
func (o PlatformPropertiesInvokeResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformPropertiesInvokeResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// The platform properties against which the build has to happen.
type PlatformPropertiesResponse struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu *int `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType string `pulumi:"osType"`
}

// PlatformPropertiesResponseInput is an input type that accepts PlatformPropertiesResponseArgs and PlatformPropertiesResponseOutput values.
// You can construct a concrete instance of `PlatformPropertiesResponseInput` via:
//
//          PlatformPropertiesResponseArgs{...}
type PlatformPropertiesResponseInput interface {
	pulumi.Input

	ToPlatformPropertiesResponseOutput() PlatformPropertiesResponseOutput
	ToPlatformPropertiesResponseOutputWithContext(context.Context) PlatformPropertiesResponseOutput
}

// The platform properties against which the build has to happen.
type PlatformPropertiesResponseArgs struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType pulumi.StringInput `pulumi:"osType"`
}

func (PlatformPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformPropertiesResponse)(nil)).Elem()
}

func (i PlatformPropertiesResponseArgs) ToPlatformPropertiesResponseOutput() PlatformPropertiesResponseOutput {
	return i.ToPlatformPropertiesResponseOutputWithContext(context.Background())
}

func (i PlatformPropertiesResponseArgs) ToPlatformPropertiesResponseOutputWithContext(ctx context.Context) PlatformPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesResponseOutput)
}

func (i PlatformPropertiesResponseArgs) ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput {
	return i.ToPlatformPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PlatformPropertiesResponseArgs) ToPlatformPropertiesResponsePtrOutputWithContext(ctx context.Context) PlatformPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesResponseOutput).ToPlatformPropertiesResponsePtrOutputWithContext(ctx)
}

// PlatformPropertiesResponsePtrInput is an input type that accepts PlatformPropertiesResponseArgs, PlatformPropertiesResponsePtr and PlatformPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PlatformPropertiesResponsePtrInput` via:
//
//          PlatformPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PlatformPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput
	ToPlatformPropertiesResponsePtrOutputWithContext(context.Context) PlatformPropertiesResponsePtrOutput
}

type platformPropertiesResponsePtrType PlatformPropertiesResponseArgs

func PlatformPropertiesResponsePtr(v *PlatformPropertiesResponseArgs) PlatformPropertiesResponsePtrInput {
	return (*platformPropertiesResponsePtrType)(v)
}

func (*platformPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformPropertiesResponse)(nil)).Elem()
}

func (i *platformPropertiesResponsePtrType) ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput {
	return i.ToPlatformPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *platformPropertiesResponsePtrType) ToPlatformPropertiesResponsePtrOutputWithContext(ctx context.Context) PlatformPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesResponsePtrOutput)
}

// The platform properties against which the build has to happen.
type PlatformPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformPropertiesResponse)(nil)).Elem()
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponseOutput() PlatformPropertiesResponseOutput {
	return o
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponseOutputWithContext(ctx context.Context) PlatformPropertiesResponseOutput {
	return o
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput {
	return o.ToPlatformPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponsePtrOutputWithContext(ctx context.Context) PlatformPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) *PlatformPropertiesResponse {
		return &v
	}).(PlatformPropertiesResponsePtrOutput)
}

// The CPU configuration in terms of number of cores required for the build.
func (o PlatformPropertiesResponseOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// The operating system type required for the build.
func (o PlatformPropertiesResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) string { return v.OsType }).(pulumi.StringOutput)
}

type PlatformPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformPropertiesResponse)(nil)).Elem()
}

func (o PlatformPropertiesResponsePtrOutput) ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput {
	return o
}

func (o PlatformPropertiesResponsePtrOutput) ToPlatformPropertiesResponsePtrOutputWithContext(ctx context.Context) PlatformPropertiesResponsePtrOutput {
	return o
}

func (o PlatformPropertiesResponsePtrOutput) Elem() PlatformPropertiesResponseOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) PlatformPropertiesResponse { return *v }).(PlatformPropertiesResponseOutput)
}

// The CPU configuration in terms of number of cores required for the build.
func (o PlatformPropertiesResponsePtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.IntPtrOutput)
}

// The operating system type required for the build.
func (o PlatformPropertiesResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfo struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType *string `pulumi:"tokenType"`
}

// SourceControlAuthInfoInput is an input type that accepts SourceControlAuthInfoArgs and SourceControlAuthInfoOutput values.
// You can construct a concrete instance of `SourceControlAuthInfoInput` via:
//
//          SourceControlAuthInfoArgs{...}
type SourceControlAuthInfoInput interface {
	pulumi.Input

	ToSourceControlAuthInfoOutput() SourceControlAuthInfoOutput
	ToSourceControlAuthInfoOutputWithContext(context.Context) SourceControlAuthInfoOutput
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoArgs struct {
	// Time in seconds that the token remains valid
	ExpiresIn pulumi.IntPtrInput `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token pulumi.StringInput `pulumi:"token"`
	// The type of Auth token.
	TokenType pulumi.StringPtrInput `pulumi:"tokenType"`
}

func (SourceControlAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfo)(nil)).Elem()
}

func (i SourceControlAuthInfoArgs) ToSourceControlAuthInfoOutput() SourceControlAuthInfoOutput {
	return i.ToSourceControlAuthInfoOutputWithContext(context.Background())
}

func (i SourceControlAuthInfoArgs) ToSourceControlAuthInfoOutputWithContext(ctx context.Context) SourceControlAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoOutput)
}

func (i SourceControlAuthInfoArgs) ToSourceControlAuthInfoPtrOutput() SourceControlAuthInfoPtrOutput {
	return i.ToSourceControlAuthInfoPtrOutputWithContext(context.Background())
}

func (i SourceControlAuthInfoArgs) ToSourceControlAuthInfoPtrOutputWithContext(ctx context.Context) SourceControlAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoOutput).ToSourceControlAuthInfoPtrOutputWithContext(ctx)
}

// SourceControlAuthInfoPtrInput is an input type that accepts SourceControlAuthInfoArgs, SourceControlAuthInfoPtr and SourceControlAuthInfoPtrOutput values.
// You can construct a concrete instance of `SourceControlAuthInfoPtrInput` via:
//
//          SourceControlAuthInfoArgs{...}
//
//  or:
//
//          nil
type SourceControlAuthInfoPtrInput interface {
	pulumi.Input

	ToSourceControlAuthInfoPtrOutput() SourceControlAuthInfoPtrOutput
	ToSourceControlAuthInfoPtrOutputWithContext(context.Context) SourceControlAuthInfoPtrOutput
}

type sourceControlAuthInfoPtrType SourceControlAuthInfoArgs

func SourceControlAuthInfoPtr(v *SourceControlAuthInfoArgs) SourceControlAuthInfoPtrInput {
	return (*sourceControlAuthInfoPtrType)(v)
}

func (*sourceControlAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfo)(nil)).Elem()
}

func (i *sourceControlAuthInfoPtrType) ToSourceControlAuthInfoPtrOutput() SourceControlAuthInfoPtrOutput {
	return i.ToSourceControlAuthInfoPtrOutputWithContext(context.Background())
}

func (i *sourceControlAuthInfoPtrType) ToSourceControlAuthInfoPtrOutputWithContext(ctx context.Context) SourceControlAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoPtrOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfo)(nil)).Elem()
}

func (o SourceControlAuthInfoOutput) ToSourceControlAuthInfoOutput() SourceControlAuthInfoOutput {
	return o
}

func (o SourceControlAuthInfoOutput) ToSourceControlAuthInfoOutputWithContext(ctx context.Context) SourceControlAuthInfoOutput {
	return o
}

func (o SourceControlAuthInfoOutput) ToSourceControlAuthInfoPtrOutput() SourceControlAuthInfoPtrOutput {
	return o.ToSourceControlAuthInfoPtrOutputWithContext(context.Background())
}

func (o SourceControlAuthInfoOutput) ToSourceControlAuthInfoPtrOutputWithContext(ctx context.Context) SourceControlAuthInfoPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfo) *SourceControlAuthInfo {
		return &v
	}).(SourceControlAuthInfoPtrOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfo) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfo) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfo) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v SourceControlAuthInfo) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfo) *string { return v.TokenType }).(pulumi.StringPtrOutput)
}

type SourceControlAuthInfoPtrOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfo)(nil)).Elem()
}

func (o SourceControlAuthInfoPtrOutput) ToSourceControlAuthInfoPtrOutput() SourceControlAuthInfoPtrOutput {
	return o
}

func (o SourceControlAuthInfoPtrOutput) ToSourceControlAuthInfoPtrOutputWithContext(ctx context.Context) SourceControlAuthInfoPtrOutput {
	return o
}

func (o SourceControlAuthInfoPtrOutput) Elem() SourceControlAuthInfoOutput {
	return o.ApplyT(func(v *SourceControlAuthInfo) SourceControlAuthInfo { return *v }).(SourceControlAuthInfoOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoPtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfo) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoPtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoPtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.TokenType
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoInvokeResponse struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType *string `pulumi:"tokenType"`
}

// SourceControlAuthInfoInvokeResponseInput is an input type that accepts SourceControlAuthInfoInvokeResponseArgs and SourceControlAuthInfoInvokeResponseOutput values.
// You can construct a concrete instance of `SourceControlAuthInfoInvokeResponseInput` via:
//
//          SourceControlAuthInfoInvokeResponseArgs{...}
type SourceControlAuthInfoInvokeResponseInput interface {
	pulumi.Input

	ToSourceControlAuthInfoInvokeResponseOutput() SourceControlAuthInfoInvokeResponseOutput
	ToSourceControlAuthInfoInvokeResponseOutputWithContext(context.Context) SourceControlAuthInfoInvokeResponseOutput
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoInvokeResponseArgs struct {
	// Time in seconds that the token remains valid
	ExpiresIn pulumi.IntPtrInput `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token pulumi.StringInput `pulumi:"token"`
	// The type of Auth token.
	TokenType pulumi.StringPtrInput `pulumi:"tokenType"`
}

func (SourceControlAuthInfoInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfoInvokeResponse)(nil)).Elem()
}

func (i SourceControlAuthInfoInvokeResponseArgs) ToSourceControlAuthInfoInvokeResponseOutput() SourceControlAuthInfoInvokeResponseOutput {
	return i.ToSourceControlAuthInfoInvokeResponseOutputWithContext(context.Background())
}

func (i SourceControlAuthInfoInvokeResponseArgs) ToSourceControlAuthInfoInvokeResponseOutputWithContext(ctx context.Context) SourceControlAuthInfoInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoInvokeResponseOutput)
}

func (i SourceControlAuthInfoInvokeResponseArgs) ToSourceControlAuthInfoInvokeResponsePtrOutput() SourceControlAuthInfoInvokeResponsePtrOutput {
	return i.ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(context.Background())
}

func (i SourceControlAuthInfoInvokeResponseArgs) ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoInvokeResponseOutput).ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(ctx)
}

// SourceControlAuthInfoInvokeResponsePtrInput is an input type that accepts SourceControlAuthInfoInvokeResponseArgs, SourceControlAuthInfoInvokeResponsePtr and SourceControlAuthInfoInvokeResponsePtrOutput values.
// You can construct a concrete instance of `SourceControlAuthInfoInvokeResponsePtrInput` via:
//
//          SourceControlAuthInfoInvokeResponseArgs{...}
//
//  or:
//
//          nil
type SourceControlAuthInfoInvokeResponsePtrInput interface {
	pulumi.Input

	ToSourceControlAuthInfoInvokeResponsePtrOutput() SourceControlAuthInfoInvokeResponsePtrOutput
	ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(context.Context) SourceControlAuthInfoInvokeResponsePtrOutput
}

type sourceControlAuthInfoInvokeResponsePtrType SourceControlAuthInfoInvokeResponseArgs

func SourceControlAuthInfoInvokeResponsePtr(v *SourceControlAuthInfoInvokeResponseArgs) SourceControlAuthInfoInvokeResponsePtrInput {
	return (*sourceControlAuthInfoInvokeResponsePtrType)(v)
}

func (*sourceControlAuthInfoInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfoInvokeResponse)(nil)).Elem()
}

func (i *sourceControlAuthInfoInvokeResponsePtrType) ToSourceControlAuthInfoInvokeResponsePtrOutput() SourceControlAuthInfoInvokeResponsePtrOutput {
	return i.ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *sourceControlAuthInfoInvokeResponsePtrType) ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoInvokeResponsePtrOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoInvokeResponseOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfoInvokeResponse)(nil)).Elem()
}

func (o SourceControlAuthInfoInvokeResponseOutput) ToSourceControlAuthInfoInvokeResponseOutput() SourceControlAuthInfoInvokeResponseOutput {
	return o
}

func (o SourceControlAuthInfoInvokeResponseOutput) ToSourceControlAuthInfoInvokeResponseOutputWithContext(ctx context.Context) SourceControlAuthInfoInvokeResponseOutput {
	return o
}

func (o SourceControlAuthInfoInvokeResponseOutput) ToSourceControlAuthInfoInvokeResponsePtrOutput() SourceControlAuthInfoInvokeResponsePtrOutput {
	return o.ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(context.Background())
}

func (o SourceControlAuthInfoInvokeResponseOutput) ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoInvokeResponse) *SourceControlAuthInfoInvokeResponse {
		return &v
	}).(SourceControlAuthInfoInvokeResponsePtrOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoInvokeResponseOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoInvokeResponse) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoInvokeResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoInvokeResponse) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoInvokeResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoInvokeResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoInvokeResponseOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v SourceControlAuthInfoInvokeResponse) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoInvokeResponseOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoInvokeResponse) *string { return v.TokenType }).(pulumi.StringPtrOutput)
}

type SourceControlAuthInfoInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfoInvokeResponse)(nil)).Elem()
}

func (o SourceControlAuthInfoInvokeResponsePtrOutput) ToSourceControlAuthInfoInvokeResponsePtrOutput() SourceControlAuthInfoInvokeResponsePtrOutput {
	return o
}

func (o SourceControlAuthInfoInvokeResponsePtrOutput) ToSourceControlAuthInfoInvokeResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoInvokeResponsePtrOutput {
	return o
}

func (o SourceControlAuthInfoInvokeResponsePtrOutput) Elem() SourceControlAuthInfoInvokeResponseOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoInvokeResponse) SourceControlAuthInfoInvokeResponse { return *v }).(SourceControlAuthInfoInvokeResponseOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoInvokeResponsePtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoInvokeResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoInvokeResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoInvokeResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoInvokeResponsePtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenType
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoResponse struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType *string `pulumi:"tokenType"`
}

// SourceControlAuthInfoResponseInput is an input type that accepts SourceControlAuthInfoResponseArgs and SourceControlAuthInfoResponseOutput values.
// You can construct a concrete instance of `SourceControlAuthInfoResponseInput` via:
//
//          SourceControlAuthInfoResponseArgs{...}
type SourceControlAuthInfoResponseInput interface {
	pulumi.Input

	ToSourceControlAuthInfoResponseOutput() SourceControlAuthInfoResponseOutput
	ToSourceControlAuthInfoResponseOutputWithContext(context.Context) SourceControlAuthInfoResponseOutput
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoResponseArgs struct {
	// Time in seconds that the token remains valid
	ExpiresIn pulumi.IntPtrInput `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token pulumi.StringInput `pulumi:"token"`
	// The type of Auth token.
	TokenType pulumi.StringPtrInput `pulumi:"tokenType"`
}

func (SourceControlAuthInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfoResponse)(nil)).Elem()
}

func (i SourceControlAuthInfoResponseArgs) ToSourceControlAuthInfoResponseOutput() SourceControlAuthInfoResponseOutput {
	return i.ToSourceControlAuthInfoResponseOutputWithContext(context.Background())
}

func (i SourceControlAuthInfoResponseArgs) ToSourceControlAuthInfoResponseOutputWithContext(ctx context.Context) SourceControlAuthInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoResponseOutput)
}

func (i SourceControlAuthInfoResponseArgs) ToSourceControlAuthInfoResponsePtrOutput() SourceControlAuthInfoResponsePtrOutput {
	return i.ToSourceControlAuthInfoResponsePtrOutputWithContext(context.Background())
}

func (i SourceControlAuthInfoResponseArgs) ToSourceControlAuthInfoResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoResponseOutput).ToSourceControlAuthInfoResponsePtrOutputWithContext(ctx)
}

// SourceControlAuthInfoResponsePtrInput is an input type that accepts SourceControlAuthInfoResponseArgs, SourceControlAuthInfoResponsePtr and SourceControlAuthInfoResponsePtrOutput values.
// You can construct a concrete instance of `SourceControlAuthInfoResponsePtrInput` via:
//
//          SourceControlAuthInfoResponseArgs{...}
//
//  or:
//
//          nil
type SourceControlAuthInfoResponsePtrInput interface {
	pulumi.Input

	ToSourceControlAuthInfoResponsePtrOutput() SourceControlAuthInfoResponsePtrOutput
	ToSourceControlAuthInfoResponsePtrOutputWithContext(context.Context) SourceControlAuthInfoResponsePtrOutput
}

type sourceControlAuthInfoResponsePtrType SourceControlAuthInfoResponseArgs

func SourceControlAuthInfoResponsePtr(v *SourceControlAuthInfoResponseArgs) SourceControlAuthInfoResponsePtrInput {
	return (*sourceControlAuthInfoResponsePtrType)(v)
}

func (*sourceControlAuthInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfoResponse)(nil)).Elem()
}

func (i *sourceControlAuthInfoResponsePtrType) ToSourceControlAuthInfoResponsePtrOutput() SourceControlAuthInfoResponsePtrOutput {
	return i.ToSourceControlAuthInfoResponsePtrOutputWithContext(context.Background())
}

func (i *sourceControlAuthInfoResponsePtrType) ToSourceControlAuthInfoResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoResponsePtrOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfoResponse)(nil)).Elem()
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponseOutput() SourceControlAuthInfoResponseOutput {
	return o
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponseOutputWithContext(ctx context.Context) SourceControlAuthInfoResponseOutput {
	return o
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponsePtrOutput() SourceControlAuthInfoResponsePtrOutput {
	return o.ToSourceControlAuthInfoResponsePtrOutputWithContext(context.Background())
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoResponsePtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *SourceControlAuthInfoResponse {
		return &v
	}).(SourceControlAuthInfoResponsePtrOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoResponseOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoResponseOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoResponseOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.TokenType }).(pulumi.StringPtrOutput)
}

type SourceControlAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfoResponse)(nil)).Elem()
}

func (o SourceControlAuthInfoResponsePtrOutput) ToSourceControlAuthInfoResponsePtrOutput() SourceControlAuthInfoResponsePtrOutput {
	return o
}

func (o SourceControlAuthInfoResponsePtrOutput) ToSourceControlAuthInfoResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoResponsePtrOutput {
	return o
}

func (o SourceControlAuthInfoResponsePtrOutput) Elem() SourceControlAuthInfoResponseOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) SourceControlAuthInfoResponse { return *v }).(SourceControlAuthInfoResponseOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoResponsePtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoResponsePtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenType
	}).(pulumi.StringPtrOutput)
}

// The properties of the source code repository.
type SourceRepositoryProperties struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled *bool `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties *SourceControlAuthInfo `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// SourceRepositoryPropertiesInput is an input type that accepts SourceRepositoryPropertiesArgs and SourceRepositoryPropertiesOutput values.
// You can construct a concrete instance of `SourceRepositoryPropertiesInput` via:
//
//          SourceRepositoryPropertiesArgs{...}
type SourceRepositoryPropertiesInput interface {
	pulumi.Input

	ToSourceRepositoryPropertiesOutput() SourceRepositoryPropertiesOutput
	ToSourceRepositoryPropertiesOutputWithContext(context.Context) SourceRepositoryPropertiesOutput
}

// The properties of the source code repository.
type SourceRepositoryPropertiesArgs struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled pulumi.BoolPtrInput `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl pulumi.StringInput `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties SourceControlAuthInfoPtrInput `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType pulumi.StringInput `pulumi:"sourceControlType"`
}

func (SourceRepositoryPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryProperties)(nil)).Elem()
}

func (i SourceRepositoryPropertiesArgs) ToSourceRepositoryPropertiesOutput() SourceRepositoryPropertiesOutput {
	return i.ToSourceRepositoryPropertiesOutputWithContext(context.Background())
}

func (i SourceRepositoryPropertiesArgs) ToSourceRepositoryPropertiesOutputWithContext(ctx context.Context) SourceRepositoryPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesOutput)
}

func (i SourceRepositoryPropertiesArgs) ToSourceRepositoryPropertiesPtrOutput() SourceRepositoryPropertiesPtrOutput {
	return i.ToSourceRepositoryPropertiesPtrOutputWithContext(context.Background())
}

func (i SourceRepositoryPropertiesArgs) ToSourceRepositoryPropertiesPtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesOutput).ToSourceRepositoryPropertiesPtrOutputWithContext(ctx)
}

// SourceRepositoryPropertiesPtrInput is an input type that accepts SourceRepositoryPropertiesArgs, SourceRepositoryPropertiesPtr and SourceRepositoryPropertiesPtrOutput values.
// You can construct a concrete instance of `SourceRepositoryPropertiesPtrInput` via:
//
//          SourceRepositoryPropertiesArgs{...}
//
//  or:
//
//          nil
type SourceRepositoryPropertiesPtrInput interface {
	pulumi.Input

	ToSourceRepositoryPropertiesPtrOutput() SourceRepositoryPropertiesPtrOutput
	ToSourceRepositoryPropertiesPtrOutputWithContext(context.Context) SourceRepositoryPropertiesPtrOutput
}

type sourceRepositoryPropertiesPtrType SourceRepositoryPropertiesArgs

func SourceRepositoryPropertiesPtr(v *SourceRepositoryPropertiesArgs) SourceRepositoryPropertiesPtrInput {
	return (*sourceRepositoryPropertiesPtrType)(v)
}

func (*sourceRepositoryPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepositoryProperties)(nil)).Elem()
}

func (i *sourceRepositoryPropertiesPtrType) ToSourceRepositoryPropertiesPtrOutput() SourceRepositoryPropertiesPtrOutput {
	return i.ToSourceRepositoryPropertiesPtrOutputWithContext(context.Background())
}

func (i *sourceRepositoryPropertiesPtrType) ToSourceRepositoryPropertiesPtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesPtrOutput)
}

// The properties of the source code repository.
type SourceRepositoryPropertiesOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryProperties)(nil)).Elem()
}

func (o SourceRepositoryPropertiesOutput) ToSourceRepositoryPropertiesOutput() SourceRepositoryPropertiesOutput {
	return o
}

func (o SourceRepositoryPropertiesOutput) ToSourceRepositoryPropertiesOutputWithContext(ctx context.Context) SourceRepositoryPropertiesOutput {
	return o
}

func (o SourceRepositoryPropertiesOutput) ToSourceRepositoryPropertiesPtrOutput() SourceRepositoryPropertiesPtrOutput {
	return o.ToSourceRepositoryPropertiesPtrOutputWithContext(context.Background())
}

func (o SourceRepositoryPropertiesOutput) ToSourceRepositoryPropertiesPtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesPtrOutput {
	return o.ApplyT(func(v SourceRepositoryProperties) *SourceRepositoryProperties {
		return &v
	}).(SourceRepositoryPropertiesPtrOutput)
}

// The value of this property indicates whether the source control commit trigger is enabled or not.
func (o SourceRepositoryPropertiesOutput) IsCommitTriggerEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceRepositoryProperties) *bool { return v.IsCommitTriggerEnabled }).(pulumi.BoolPtrOutput)
}

// The full URL to the source code repository
func (o SourceRepositoryPropertiesOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryProperties) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository.
func (o SourceRepositoryPropertiesOutput) SourceControlAuthProperties() SourceControlAuthInfoPtrOutput {
	return o.ApplyT(func(v SourceRepositoryProperties) *SourceControlAuthInfo { return v.SourceControlAuthProperties }).(SourceControlAuthInfoPtrOutput)
}

// The type of source control service.
func (o SourceRepositoryPropertiesOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryProperties) string { return v.SourceControlType }).(pulumi.StringOutput)
}

type SourceRepositoryPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepositoryProperties)(nil)).Elem()
}

func (o SourceRepositoryPropertiesPtrOutput) ToSourceRepositoryPropertiesPtrOutput() SourceRepositoryPropertiesPtrOutput {
	return o
}

func (o SourceRepositoryPropertiesPtrOutput) ToSourceRepositoryPropertiesPtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesPtrOutput {
	return o
}

func (o SourceRepositoryPropertiesPtrOutput) Elem() SourceRepositoryPropertiesOutput {
	return o.ApplyT(func(v *SourceRepositoryProperties) SourceRepositoryProperties { return *v }).(SourceRepositoryPropertiesOutput)
}

// The value of this property indicates whether the source control commit trigger is enabled or not.
func (o SourceRepositoryPropertiesPtrOutput) IsCommitTriggerEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsCommitTriggerEnabled
	}).(pulumi.BoolPtrOutput)
}

// The full URL to the source code repository
func (o SourceRepositoryPropertiesPtrOutput) RepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryProperties) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
func (o SourceRepositoryPropertiesPtrOutput) SourceControlAuthProperties() SourceControlAuthInfoPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryProperties) *SourceControlAuthInfo {
		if v == nil {
			return nil
		}
		return v.SourceControlAuthProperties
	}).(SourceControlAuthInfoPtrOutput)
}

// The type of source control service.
func (o SourceRepositoryPropertiesPtrOutput) SourceControlType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryProperties) *string {
		if v == nil {
			return nil
		}
		return &v.SourceControlType
	}).(pulumi.StringPtrOutput)
}

// The properties of the source code repository.
type SourceRepositoryPropertiesInvokeResponse struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled *bool `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties *SourceControlAuthInfoInvokeResponse `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// SourceRepositoryPropertiesInvokeResponseInput is an input type that accepts SourceRepositoryPropertiesInvokeResponseArgs and SourceRepositoryPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `SourceRepositoryPropertiesInvokeResponseInput` via:
//
//          SourceRepositoryPropertiesInvokeResponseArgs{...}
type SourceRepositoryPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToSourceRepositoryPropertiesInvokeResponseOutput() SourceRepositoryPropertiesInvokeResponseOutput
	ToSourceRepositoryPropertiesInvokeResponseOutputWithContext(context.Context) SourceRepositoryPropertiesInvokeResponseOutput
}

// The properties of the source code repository.
type SourceRepositoryPropertiesInvokeResponseArgs struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled pulumi.BoolPtrInput `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl pulumi.StringInput `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties SourceControlAuthInfoInvokeResponsePtrInput `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType pulumi.StringInput `pulumi:"sourceControlType"`
}

func (SourceRepositoryPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryPropertiesInvokeResponse)(nil)).Elem()
}

func (i SourceRepositoryPropertiesInvokeResponseArgs) ToSourceRepositoryPropertiesInvokeResponseOutput() SourceRepositoryPropertiesInvokeResponseOutput {
	return i.ToSourceRepositoryPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i SourceRepositoryPropertiesInvokeResponseArgs) ToSourceRepositoryPropertiesInvokeResponseOutputWithContext(ctx context.Context) SourceRepositoryPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesInvokeResponseOutput)
}

// The properties of the source code repository.
type SourceRepositoryPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryPropertiesInvokeResponse)(nil)).Elem()
}

func (o SourceRepositoryPropertiesInvokeResponseOutput) ToSourceRepositoryPropertiesInvokeResponseOutput() SourceRepositoryPropertiesInvokeResponseOutput {
	return o
}

func (o SourceRepositoryPropertiesInvokeResponseOutput) ToSourceRepositoryPropertiesInvokeResponseOutputWithContext(ctx context.Context) SourceRepositoryPropertiesInvokeResponseOutput {
	return o
}

// The value of this property indicates whether the source control commit trigger is enabled or not.
func (o SourceRepositoryPropertiesInvokeResponseOutput) IsCommitTriggerEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesInvokeResponse) *bool { return v.IsCommitTriggerEnabled }).(pulumi.BoolPtrOutput)
}

// The full URL to the source code repository
func (o SourceRepositoryPropertiesInvokeResponseOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesInvokeResponse) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository.
func (o SourceRepositoryPropertiesInvokeResponseOutput) SourceControlAuthProperties() SourceControlAuthInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesInvokeResponse) *SourceControlAuthInfoInvokeResponse {
		return v.SourceControlAuthProperties
	}).(SourceControlAuthInfoInvokeResponsePtrOutput)
}

// The type of source control service.
func (o SourceRepositoryPropertiesInvokeResponseOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesInvokeResponse) string { return v.SourceControlType }).(pulumi.StringOutput)
}

// The properties of the source code repository.
type SourceRepositoryPropertiesResponse struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled *bool `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties *SourceControlAuthInfoResponse `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// SourceRepositoryPropertiesResponseInput is an input type that accepts SourceRepositoryPropertiesResponseArgs and SourceRepositoryPropertiesResponseOutput values.
// You can construct a concrete instance of `SourceRepositoryPropertiesResponseInput` via:
//
//          SourceRepositoryPropertiesResponseArgs{...}
type SourceRepositoryPropertiesResponseInput interface {
	pulumi.Input

	ToSourceRepositoryPropertiesResponseOutput() SourceRepositoryPropertiesResponseOutput
	ToSourceRepositoryPropertiesResponseOutputWithContext(context.Context) SourceRepositoryPropertiesResponseOutput
}

// The properties of the source code repository.
type SourceRepositoryPropertiesResponseArgs struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled pulumi.BoolPtrInput `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl pulumi.StringInput `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties SourceControlAuthInfoResponsePtrInput `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType pulumi.StringInput `pulumi:"sourceControlType"`
}

func (SourceRepositoryPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryPropertiesResponse)(nil)).Elem()
}

func (i SourceRepositoryPropertiesResponseArgs) ToSourceRepositoryPropertiesResponseOutput() SourceRepositoryPropertiesResponseOutput {
	return i.ToSourceRepositoryPropertiesResponseOutputWithContext(context.Background())
}

func (i SourceRepositoryPropertiesResponseArgs) ToSourceRepositoryPropertiesResponseOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesResponseOutput)
}

func (i SourceRepositoryPropertiesResponseArgs) ToSourceRepositoryPropertiesResponsePtrOutput() SourceRepositoryPropertiesResponsePtrOutput {
	return i.ToSourceRepositoryPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SourceRepositoryPropertiesResponseArgs) ToSourceRepositoryPropertiesResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesResponseOutput).ToSourceRepositoryPropertiesResponsePtrOutputWithContext(ctx)
}

// SourceRepositoryPropertiesResponsePtrInput is an input type that accepts SourceRepositoryPropertiesResponseArgs, SourceRepositoryPropertiesResponsePtr and SourceRepositoryPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SourceRepositoryPropertiesResponsePtrInput` via:
//
//          SourceRepositoryPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SourceRepositoryPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSourceRepositoryPropertiesResponsePtrOutput() SourceRepositoryPropertiesResponsePtrOutput
	ToSourceRepositoryPropertiesResponsePtrOutputWithContext(context.Context) SourceRepositoryPropertiesResponsePtrOutput
}

type sourceRepositoryPropertiesResponsePtrType SourceRepositoryPropertiesResponseArgs

func SourceRepositoryPropertiesResponsePtr(v *SourceRepositoryPropertiesResponseArgs) SourceRepositoryPropertiesResponsePtrInput {
	return (*sourceRepositoryPropertiesResponsePtrType)(v)
}

func (*sourceRepositoryPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepositoryPropertiesResponse)(nil)).Elem()
}

func (i *sourceRepositoryPropertiesResponsePtrType) ToSourceRepositoryPropertiesResponsePtrOutput() SourceRepositoryPropertiesResponsePtrOutput {
	return i.ToSourceRepositoryPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sourceRepositoryPropertiesResponsePtrType) ToSourceRepositoryPropertiesResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesResponsePtrOutput)
}

// The properties of the source code repository.
type SourceRepositoryPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryPropertiesResponse)(nil)).Elem()
}

func (o SourceRepositoryPropertiesResponseOutput) ToSourceRepositoryPropertiesResponseOutput() SourceRepositoryPropertiesResponseOutput {
	return o
}

func (o SourceRepositoryPropertiesResponseOutput) ToSourceRepositoryPropertiesResponseOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponseOutput {
	return o
}

func (o SourceRepositoryPropertiesResponseOutput) ToSourceRepositoryPropertiesResponsePtrOutput() SourceRepositoryPropertiesResponsePtrOutput {
	return o.ToSourceRepositoryPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SourceRepositoryPropertiesResponseOutput) ToSourceRepositoryPropertiesResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) *SourceRepositoryPropertiesResponse {
		return &v
	}).(SourceRepositoryPropertiesResponsePtrOutput)
}

// The value of this property indicates whether the source control commit trigger is enabled or not.
func (o SourceRepositoryPropertiesResponseOutput) IsCommitTriggerEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) *bool { return v.IsCommitTriggerEnabled }).(pulumi.BoolPtrOutput)
}

// The full URL to the source code repository
func (o SourceRepositoryPropertiesResponseOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository.
func (o SourceRepositoryPropertiesResponseOutput) SourceControlAuthProperties() SourceControlAuthInfoResponsePtrOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) *SourceControlAuthInfoResponse {
		return v.SourceControlAuthProperties
	}).(SourceControlAuthInfoResponsePtrOutput)
}

// The type of source control service.
func (o SourceRepositoryPropertiesResponseOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) string { return v.SourceControlType }).(pulumi.StringOutput)
}

type SourceRepositoryPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepositoryPropertiesResponse)(nil)).Elem()
}

func (o SourceRepositoryPropertiesResponsePtrOutput) ToSourceRepositoryPropertiesResponsePtrOutput() SourceRepositoryPropertiesResponsePtrOutput {
	return o
}

func (o SourceRepositoryPropertiesResponsePtrOutput) ToSourceRepositoryPropertiesResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponsePtrOutput {
	return o
}

func (o SourceRepositoryPropertiesResponsePtrOutput) Elem() SourceRepositoryPropertiesResponseOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) SourceRepositoryPropertiesResponse { return *v }).(SourceRepositoryPropertiesResponseOutput)
}

// The value of this property indicates whether the source control commit trigger is enabled or not.
func (o SourceRepositoryPropertiesResponsePtrOutput) IsCommitTriggerEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCommitTriggerEnabled
	}).(pulumi.BoolPtrOutput)
}

// The full URL to the source code repository
func (o SourceRepositoryPropertiesResponsePtrOutput) RepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
func (o SourceRepositoryPropertiesResponsePtrOutput) SourceControlAuthProperties() SourceControlAuthInfoResponsePtrOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) *SourceControlAuthInfoResponse {
		if v == nil {
			return nil
		}
		return v.SourceControlAuthProperties
	}).(SourceControlAuthInfoResponsePtrOutput)
}

// The type of source control service.
func (o SourceRepositoryPropertiesResponsePtrOutput) SourceControlType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceControlType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BaseImageDependencyInvokeResponseOutput{})
	pulumi.RegisterOutputType(BaseImageDependencyInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(BaseImageDependencyResponseOutput{})
	pulumi.RegisterOutputType(BaseImageDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(BuildArgumentInvokeResponseOutput{})
	pulumi.RegisterOutputType(BuildArgumentInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(BuildArgumentResponseOutput{})
	pulumi.RegisterOutputType(BuildArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(DockerBuildStepInvokeResponseOutput{})
	pulumi.RegisterOutputType(DockerBuildStepResponseOutput{})
	pulumi.RegisterOutputType(DockerBuildStepResponsePtrOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoInvokeResponseOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesResponsePtrOutput{})
}
