// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190501preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An object that represents a token for a container registry.
type Token struct {
	pulumi.CustomResourceState

	// The creation date of scope map.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// The credentials that can be used for authenticating the token.
	Credentials TokenCredentialsPropertiesResponsePtrOutput `pulumi:"credentials"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The resource ID of the scope map to which the token will be associated with.
	ScopeMapId pulumi.StringPtrOutput `pulumi:"scopeMapId"`
	// The status of the token example enabled or disabled.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewToken registers a new resource with the given unique name, arguments, and options.
func NewToken(ctx *pulumi.Context,
	name string, args *TokenArgs, opts ...pulumi.ResourceOption) (*Token, error) {
	if args == nil || args.RegistryName == nil {
		return nil, errors.New("missing required argument 'RegistryName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.TokenName == nil {
		return nil, errors.New("missing required argument 'TokenName'")
	}
	if args == nil {
		args = &TokenArgs{}
	}
	var resource Token
	err := ctx.RegisterResource("azure-nextgen:containerregistry/v20190501preview:Token", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetToken gets an existing Token resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenState, opts ...pulumi.ResourceOption) (*Token, error) {
	var resource Token
	err := ctx.ReadResource("azure-nextgen:containerregistry/v20190501preview:Token", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Token resources.
type tokenState struct {
	// The creation date of scope map.
	CreationDate *string `pulumi:"creationDate"`
	// The credentials that can be used for authenticating the token.
	Credentials *TokenCredentialsPropertiesResponse `pulumi:"credentials"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The resource ID of the scope map to which the token will be associated with.
	ScopeMapId *string `pulumi:"scopeMapId"`
	// The status of the token example enabled or disabled.
	Status *string `pulumi:"status"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type TokenState struct {
	// The creation date of scope map.
	CreationDate pulumi.StringPtrInput
	// The credentials that can be used for authenticating the token.
	Credentials TokenCredentialsPropertiesResponsePtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringPtrInput
	// The resource ID of the scope map to which the token will be associated with.
	ScopeMapId pulumi.StringPtrInput
	// The status of the token example enabled or disabled.
	Status pulumi.StringPtrInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (TokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenState)(nil)).Elem()
}

type tokenArgs struct {
	// The credentials that can be used for authenticating the token.
	Credentials *TokenCredentialsProperties `pulumi:"credentials"`
	// The name of the container registry.
	RegistryName string `pulumi:"registryName"`
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource ID of the scope map to which the token will be associated with.
	ScopeMapId *string `pulumi:"scopeMapId"`
	// The status of the token example enabled or disabled.
	Status *string `pulumi:"status"`
	// The name of the token.
	TokenName string `pulumi:"tokenName"`
}

// The set of arguments for constructing a Token resource.
type TokenArgs struct {
	// The credentials that can be used for authenticating the token.
	Credentials TokenCredentialsPropertiesPtrInput
	// The name of the container registry.
	RegistryName pulumi.StringInput
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName pulumi.StringInput
	// The resource ID of the scope map to which the token will be associated with.
	ScopeMapId pulumi.StringPtrInput
	// The status of the token example enabled or disabled.
	Status pulumi.StringPtrInput
	// The name of the token.
	TokenName pulumi.StringInput
}

func (TokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenArgs)(nil)).Elem()
}
