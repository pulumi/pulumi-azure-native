// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerregistry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Build step resource properties
// API Version: 2018-02-01-preview.
type BuildStep struct {
	pulumi.CustomResourceState

	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties of a build step.
	Properties DockerBuildStepResponseOutput `pulumi:"properties"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBuildStep registers a new resource with the given unique name, arguments, and options.
func NewBuildStep(ctx *pulumi.Context,
	name string, args *BuildStepArgs, opts ...pulumi.ResourceOption) (*BuildStep, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BuildTaskName == nil {
		return nil, errors.New("invalid value for required argument 'BuildTaskName'")
	}
	if args.RegistryName == nil {
		return nil, errors.New("invalid value for required argument 'RegistryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StepName == nil {
		return nil, errors.New("invalid value for required argument 'StepName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:containerregistry/v20180201preview:BuildStep"),
		},
	})
	opts = append(opts, aliases)
	var resource BuildStep
	err := ctx.RegisterResource("azure-nextgen:containerregistry:BuildStep", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildStep gets an existing BuildStep resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildStep(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildStepState, opts ...pulumi.ResourceOption) (*BuildStep, error) {
	var resource BuildStep
	err := ctx.ReadResource("azure-nextgen:containerregistry:BuildStep", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildStep resources.
type buildStepState struct {
	// The name of the resource.
	Name *string `pulumi:"name"`
	// The properties of a build step.
	Properties *DockerBuildStepResponse `pulumi:"properties"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type BuildStepState struct {
	// The name of the resource.
	Name pulumi.StringPtrInput
	// The properties of a build step.
	Properties DockerBuildStepResponsePtrInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (BuildStepState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildStepState)(nil)).Elem()
}

type buildStepArgs struct {
	// The name of the container registry build task.
	BuildTaskName string `pulumi:"buildTaskName"`
	// The name of the container registry.
	RegistryName string `pulumi:"registryName"`
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of a build step for a container registry build task.
	StepName string `pulumi:"stepName"`
}

// The set of arguments for constructing a BuildStep resource.
type BuildStepArgs struct {
	// The name of the container registry build task.
	BuildTaskName pulumi.StringInput
	// The name of the container registry.
	RegistryName pulumi.StringInput
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName pulumi.StringInput
	// The name of a build step for a container registry build task.
	StepName pulumi.StringInput
}

func (BuildStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildStepArgs)(nil)).Elem()
}

type BuildStepInput interface {
	pulumi.Input

	ToBuildStepOutput() BuildStepOutput
	ToBuildStepOutputWithContext(ctx context.Context) BuildStepOutput
}

func (*BuildStep) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStep)(nil))
}

func (i *BuildStep) ToBuildStepOutput() BuildStepOutput {
	return i.ToBuildStepOutputWithContext(context.Background())
}

func (i *BuildStep) ToBuildStepOutputWithContext(ctx context.Context) BuildStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildStepOutput)
}

type BuildStepOutput struct {
	*pulumi.OutputState
}

func (BuildStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStep)(nil))
}

func (o BuildStepOutput) ToBuildStepOutput() BuildStepOutput {
	return o
}

func (o BuildStepOutput) ToBuildStepOutputWithContext(ctx context.Context) BuildStepOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(BuildStepOutput{})
}
