// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The OS architecture.
type Architecture string

const (
	ArchitectureAmd64 = Architecture("amd64")
	ArchitectureX86   = Architecture("x86")
	ArchitectureArm   = Architecture("arm")
)

func (Architecture) ElementType() reflect.Type {
	return reflect.TypeOf((*Architecture)(nil)).Elem()
}

func (e Architecture) ToArchitectureOutput() ArchitectureOutput {
	return pulumi.ToOutput(e).(ArchitectureOutput)
}

func (e Architecture) ToArchitectureOutputWithContext(ctx context.Context) ArchitectureOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ArchitectureOutput)
}

func (e Architecture) ToArchitecturePtrOutput() ArchitecturePtrOutput {
	return e.ToArchitecturePtrOutputWithContext(context.Background())
}

func (e Architecture) ToArchitecturePtrOutputWithContext(ctx context.Context) ArchitecturePtrOutput {
	return Architecture(e).ToArchitectureOutputWithContext(ctx).ToArchitecturePtrOutputWithContext(ctx)
}

func (e Architecture) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Architecture) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Architecture) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Architecture) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ArchitectureOutput struct{ *pulumi.OutputState }

func (ArchitectureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Architecture)(nil)).Elem()
}

func (o ArchitectureOutput) ToArchitectureOutput() ArchitectureOutput {
	return o
}

func (o ArchitectureOutput) ToArchitectureOutputWithContext(ctx context.Context) ArchitectureOutput {
	return o
}

func (o ArchitectureOutput) ToArchitecturePtrOutput() ArchitecturePtrOutput {
	return o.ToArchitecturePtrOutputWithContext(context.Background())
}

func (o ArchitectureOutput) ToArchitecturePtrOutputWithContext(ctx context.Context) ArchitecturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Architecture) *Architecture {
		return &v
	}).(ArchitecturePtrOutput)
}

func (o ArchitectureOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ArchitectureOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Architecture) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ArchitectureOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArchitectureOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Architecture) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ArchitecturePtrOutput struct{ *pulumi.OutputState }

func (ArchitecturePtrOutput) ElementType() reflect.Type {
	return architecturePtrType
}

func (o ArchitecturePtrOutput) ToArchitecturePtrOutput() ArchitecturePtrOutput {
	return o
}

func (o ArchitecturePtrOutput) ToArchitecturePtrOutputWithContext(ctx context.Context) ArchitecturePtrOutput {
	return o
}

func (o ArchitecturePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArchitecturePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Architecture) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ArchitecturePtrOutput) Elem() ArchitectureOutput {
	return o.ApplyT(func(v *Architecture) Architecture {
		var ret Architecture
		if v != nil {
			ret = *v
		}
		return ret
	}).(ArchitectureOutput)
}

// ArchitectureInput is an input type that accepts ArchitectureArgs and ArchitectureOutput values.
// You can construct a concrete instance of `ArchitectureInput` via:
//
//          ArchitectureArgs{...}
type ArchitectureInput interface {
	pulumi.Input

	ToArchitectureOutput() ArchitectureOutput
	ToArchitectureOutputWithContext(context.Context) ArchitectureOutput
}

var architecturePtrType = reflect.TypeOf((**Architecture)(nil)).Elem()

type ArchitecturePtrInput interface {
	pulumi.Input

	ToArchitecturePtrOutput() ArchitecturePtrOutput
	ToArchitecturePtrOutputWithContext(context.Context) ArchitecturePtrOutput
}

type architecturePtr string

func ArchitecturePtr(v string) ArchitecturePtrInput {
	return (*architecturePtr)(&v)
}

func (*architecturePtr) ElementType() reflect.Type {
	return architecturePtrType
}

func (in *architecturePtr) ToArchitecturePtrOutput() ArchitecturePtrOutput {
	return pulumi.ToOutput(in).(ArchitecturePtrOutput)
}

func (in *architecturePtr) ToArchitecturePtrOutputWithContext(ctx context.Context) ArchitecturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ArchitecturePtrOutput)
}

// The type of the auto trigger for base image dependency updates.
type BaseImageTriggerType string

const (
	BaseImageTriggerTypeAll     = BaseImageTriggerType("All")
	BaseImageTriggerTypeRuntime = BaseImageTriggerType("Runtime")
)

func (BaseImageTriggerType) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageTriggerType)(nil)).Elem()
}

func (e BaseImageTriggerType) ToBaseImageTriggerTypeOutput() BaseImageTriggerTypeOutput {
	return pulumi.ToOutput(e).(BaseImageTriggerTypeOutput)
}

func (e BaseImageTriggerType) ToBaseImageTriggerTypeOutputWithContext(ctx context.Context) BaseImageTriggerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BaseImageTriggerTypeOutput)
}

func (e BaseImageTriggerType) ToBaseImageTriggerTypePtrOutput() BaseImageTriggerTypePtrOutput {
	return e.ToBaseImageTriggerTypePtrOutputWithContext(context.Background())
}

func (e BaseImageTriggerType) ToBaseImageTriggerTypePtrOutputWithContext(ctx context.Context) BaseImageTriggerTypePtrOutput {
	return BaseImageTriggerType(e).ToBaseImageTriggerTypeOutputWithContext(ctx).ToBaseImageTriggerTypePtrOutputWithContext(ctx)
}

func (e BaseImageTriggerType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BaseImageTriggerType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BaseImageTriggerType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BaseImageTriggerType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BaseImageTriggerTypeOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageTriggerType)(nil)).Elem()
}

func (o BaseImageTriggerTypeOutput) ToBaseImageTriggerTypeOutput() BaseImageTriggerTypeOutput {
	return o
}

func (o BaseImageTriggerTypeOutput) ToBaseImageTriggerTypeOutputWithContext(ctx context.Context) BaseImageTriggerTypeOutput {
	return o
}

func (o BaseImageTriggerTypeOutput) ToBaseImageTriggerTypePtrOutput() BaseImageTriggerTypePtrOutput {
	return o.ToBaseImageTriggerTypePtrOutputWithContext(context.Background())
}

func (o BaseImageTriggerTypeOutput) ToBaseImageTriggerTypePtrOutputWithContext(ctx context.Context) BaseImageTriggerTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BaseImageTriggerType) *BaseImageTriggerType {
		return &v
	}).(BaseImageTriggerTypePtrOutput)
}

func (o BaseImageTriggerTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BaseImageTriggerTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BaseImageTriggerType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BaseImageTriggerTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BaseImageTriggerTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BaseImageTriggerType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BaseImageTriggerTypePtrOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerTypePtrOutput) ElementType() reflect.Type {
	return baseImageTriggerTypePtrType
}

func (o BaseImageTriggerTypePtrOutput) ToBaseImageTriggerTypePtrOutput() BaseImageTriggerTypePtrOutput {
	return o
}

func (o BaseImageTriggerTypePtrOutput) ToBaseImageTriggerTypePtrOutputWithContext(ctx context.Context) BaseImageTriggerTypePtrOutput {
	return o
}

func (o BaseImageTriggerTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BaseImageTriggerTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BaseImageTriggerType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o BaseImageTriggerTypePtrOutput) Elem() BaseImageTriggerTypeOutput {
	return o.ApplyT(func(v *BaseImageTriggerType) BaseImageTriggerType {
		var ret BaseImageTriggerType
		if v != nil {
			ret = *v
		}
		return ret
	}).(BaseImageTriggerTypeOutput)
}

// BaseImageTriggerTypeInput is an input type that accepts BaseImageTriggerTypeArgs and BaseImageTriggerTypeOutput values.
// You can construct a concrete instance of `BaseImageTriggerTypeInput` via:
//
//          BaseImageTriggerTypeArgs{...}
type BaseImageTriggerTypeInput interface {
	pulumi.Input

	ToBaseImageTriggerTypeOutput() BaseImageTriggerTypeOutput
	ToBaseImageTriggerTypeOutputWithContext(context.Context) BaseImageTriggerTypeOutput
}

var baseImageTriggerTypePtrType = reflect.TypeOf((**BaseImageTriggerType)(nil)).Elem()

type BaseImageTriggerTypePtrInput interface {
	pulumi.Input

	ToBaseImageTriggerTypePtrOutput() BaseImageTriggerTypePtrOutput
	ToBaseImageTriggerTypePtrOutputWithContext(context.Context) BaseImageTriggerTypePtrOutput
}

type baseImageTriggerTypePtr string

func BaseImageTriggerTypePtr(v string) BaseImageTriggerTypePtrInput {
	return (*baseImageTriggerTypePtr)(&v)
}

func (*baseImageTriggerTypePtr) ElementType() reflect.Type {
	return baseImageTriggerTypePtrType
}

func (in *baseImageTriggerTypePtr) ToBaseImageTriggerTypePtrOutput() BaseImageTriggerTypePtrOutput {
	return pulumi.ToOutput(in).(BaseImageTriggerTypePtrOutput)
}

func (in *baseImageTriggerTypePtr) ToBaseImageTriggerTypePtrOutputWithContext(ctx context.Context) BaseImageTriggerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BaseImageTriggerTypePtrOutput)
}

// The operating system type required for the run.
type OS string

const (
	OSWindows = OS("Windows")
	OSLinux   = OS("Linux")
)

func (OS) ElementType() reflect.Type {
	return reflect.TypeOf((*OS)(nil)).Elem()
}

func (e OS) ToOSOutput() OSOutput {
	return pulumi.ToOutput(e).(OSOutput)
}

func (e OS) ToOSOutputWithContext(ctx context.Context) OSOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSOutput)
}

func (e OS) ToOSPtrOutput() OSPtrOutput {
	return e.ToOSPtrOutputWithContext(context.Background())
}

func (e OS) ToOSPtrOutputWithContext(ctx context.Context) OSPtrOutput {
	return OS(e).ToOSOutputWithContext(ctx).ToOSPtrOutputWithContext(ctx)
}

func (e OS) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OS) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OS) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OS) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSOutput struct{ *pulumi.OutputState }

func (OSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OS)(nil)).Elem()
}

func (o OSOutput) ToOSOutput() OSOutput {
	return o
}

func (o OSOutput) ToOSOutputWithContext(ctx context.Context) OSOutput {
	return o
}

func (o OSOutput) ToOSPtrOutput() OSPtrOutput {
	return o.ToOSPtrOutputWithContext(context.Background())
}

func (o OSOutput) ToOSPtrOutputWithContext(ctx context.Context) OSPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OS) *OS {
		return &v
	}).(OSPtrOutput)
}

func (o OSOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OS) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OS) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSPtrOutput struct{ *pulumi.OutputState }

func (OSPtrOutput) ElementType() reflect.Type {
	return osPtrType
}

func (o OSPtrOutput) ToOSPtrOutput() OSPtrOutput {
	return o
}

func (o OSPtrOutput) ToOSPtrOutputWithContext(ctx context.Context) OSPtrOutput {
	return o
}

func (o OSPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OS) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o OSPtrOutput) Elem() OSOutput {
	return o.ApplyT(func(v *OS) OS {
		var ret OS
		if v != nil {
			ret = *v
		}
		return ret
	}).(OSOutput)
}

// OSInput is an input type that accepts OSArgs and OSOutput values.
// You can construct a concrete instance of `OSInput` via:
//
//          OSArgs{...}
type OSInput interface {
	pulumi.Input

	ToOSOutput() OSOutput
	ToOSOutputWithContext(context.Context) OSOutput
}

var osPtrType = reflect.TypeOf((**OS)(nil)).Elem()

type OSPtrInput interface {
	pulumi.Input

	ToOSPtrOutput() OSPtrOutput
	ToOSPtrOutputWithContext(context.Context) OSPtrOutput
}

type osPtr string

func OSPtr(v string) OSPtrInput {
	return (*osPtr)(&v)
}

func (*osPtr) ElementType() reflect.Type {
	return osPtrType
}

func (in *osPtr) ToOSPtrOutput() OSPtrOutput {
	return pulumi.ToOutput(in).(OSPtrOutput)
}

func (in *osPtr) ToOSPtrOutputWithContext(ctx context.Context) OSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSPtrOutput)
}

// The identity type.
type ResourceIdentityType string

const (
	ResourceIdentityTypeSystemAssigned               = ResourceIdentityType("SystemAssigned")
	ResourceIdentityTypeUserAssigned                 = ResourceIdentityType("UserAssigned")
	ResourceIdentityType_SystemAssigned_UserAssigned = ResourceIdentityType("SystemAssigned, UserAssigned")
	ResourceIdentityTypeNone                         = ResourceIdentityType("None")
)

func (ResourceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return e.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return ResourceIdentityType(e).ToResourceIdentityTypeOutputWithContext(ctx).ToResourceIdentityTypePtrOutputWithContext(ctx)
}

func (e ResourceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceIdentityType) *ResourceIdentityType {
		return &v
	}).(ResourceIdentityTypePtrOutput)
}

func (o ResourceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypePtrOutput) ElementType() reflect.Type {
	return resourceIdentityTypePtrType
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ResourceIdentityTypePtrOutput) Elem() ResourceIdentityTypeOutput {
	return o.ApplyT(func(v *ResourceIdentityType) ResourceIdentityType {
		var ret ResourceIdentityType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ResourceIdentityTypeOutput)
}

// ResourceIdentityTypeInput is an input type that accepts ResourceIdentityTypeArgs and ResourceIdentityTypeOutput values.
// You can construct a concrete instance of `ResourceIdentityTypeInput` via:
//
//          ResourceIdentityTypeArgs{...}
type ResourceIdentityTypeInput interface {
	pulumi.Input

	ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput
	ToResourceIdentityTypeOutputWithContext(context.Context) ResourceIdentityTypeOutput
}

var resourceIdentityTypePtrType = reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()

type ResourceIdentityTypePtrInput interface {
	pulumi.Input

	ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput
	ToResourceIdentityTypePtrOutputWithContext(context.Context) ResourceIdentityTypePtrOutput
}

type resourceIdentityTypePtr string

func ResourceIdentityTypePtr(v string) ResourceIdentityTypePtrInput {
	return (*resourceIdentityTypePtr)(&v)
}

func (*resourceIdentityTypePtr) ElementType() reflect.Type {
	return resourceIdentityTypePtrType
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceIdentityTypePtrOutput)
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceIdentityTypePtrOutput)
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
type SecretObjectType string

const (
	SecretObjectTypeOpaque      = SecretObjectType("Opaque")
	SecretObjectTypeVaultsecret = SecretObjectType("Vaultsecret")
)

func (SecretObjectType) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretObjectType)(nil)).Elem()
}

func (e SecretObjectType) ToSecretObjectTypeOutput() SecretObjectTypeOutput {
	return pulumi.ToOutput(e).(SecretObjectTypeOutput)
}

func (e SecretObjectType) ToSecretObjectTypeOutputWithContext(ctx context.Context) SecretObjectTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SecretObjectTypeOutput)
}

func (e SecretObjectType) ToSecretObjectTypePtrOutput() SecretObjectTypePtrOutput {
	return e.ToSecretObjectTypePtrOutputWithContext(context.Background())
}

func (e SecretObjectType) ToSecretObjectTypePtrOutputWithContext(ctx context.Context) SecretObjectTypePtrOutput {
	return SecretObjectType(e).ToSecretObjectTypeOutputWithContext(ctx).ToSecretObjectTypePtrOutputWithContext(ctx)
}

func (e SecretObjectType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecretObjectType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecretObjectType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SecretObjectType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SecretObjectTypeOutput struct{ *pulumi.OutputState }

func (SecretObjectTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretObjectType)(nil)).Elem()
}

func (o SecretObjectTypeOutput) ToSecretObjectTypeOutput() SecretObjectTypeOutput {
	return o
}

func (o SecretObjectTypeOutput) ToSecretObjectTypeOutputWithContext(ctx context.Context) SecretObjectTypeOutput {
	return o
}

func (o SecretObjectTypeOutput) ToSecretObjectTypePtrOutput() SecretObjectTypePtrOutput {
	return o.ToSecretObjectTypePtrOutputWithContext(context.Background())
}

func (o SecretObjectTypeOutput) ToSecretObjectTypePtrOutputWithContext(ctx context.Context) SecretObjectTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretObjectType) *SecretObjectType {
		return &v
	}).(SecretObjectTypePtrOutput)
}

func (o SecretObjectTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SecretObjectTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecretObjectType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SecretObjectTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecretObjectTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecretObjectType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SecretObjectTypePtrOutput struct{ *pulumi.OutputState }

func (SecretObjectTypePtrOutput) ElementType() reflect.Type {
	return secretObjectTypePtrType
}

func (o SecretObjectTypePtrOutput) ToSecretObjectTypePtrOutput() SecretObjectTypePtrOutput {
	return o
}

func (o SecretObjectTypePtrOutput) ToSecretObjectTypePtrOutputWithContext(ctx context.Context) SecretObjectTypePtrOutput {
	return o
}

func (o SecretObjectTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecretObjectTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SecretObjectType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o SecretObjectTypePtrOutput) Elem() SecretObjectTypeOutput {
	return o.ApplyT(func(v *SecretObjectType) SecretObjectType {
		var ret SecretObjectType
		if v != nil {
			ret = *v
		}
		return ret
	}).(SecretObjectTypeOutput)
}

// SecretObjectTypeInput is an input type that accepts SecretObjectTypeArgs and SecretObjectTypeOutput values.
// You can construct a concrete instance of `SecretObjectTypeInput` via:
//
//          SecretObjectTypeArgs{...}
type SecretObjectTypeInput interface {
	pulumi.Input

	ToSecretObjectTypeOutput() SecretObjectTypeOutput
	ToSecretObjectTypeOutputWithContext(context.Context) SecretObjectTypeOutput
}

var secretObjectTypePtrType = reflect.TypeOf((**SecretObjectType)(nil)).Elem()

type SecretObjectTypePtrInput interface {
	pulumi.Input

	ToSecretObjectTypePtrOutput() SecretObjectTypePtrOutput
	ToSecretObjectTypePtrOutputWithContext(context.Context) SecretObjectTypePtrOutput
}

type secretObjectTypePtr string

func SecretObjectTypePtr(v string) SecretObjectTypePtrInput {
	return (*secretObjectTypePtr)(&v)
}

func (*secretObjectTypePtr) ElementType() reflect.Type {
	return secretObjectTypePtrType
}

func (in *secretObjectTypePtr) ToSecretObjectTypePtrOutput() SecretObjectTypePtrOutput {
	return pulumi.ToOutput(in).(SecretObjectTypePtrOutput)
}

func (in *secretObjectTypePtr) ToSecretObjectTypePtrOutputWithContext(ctx context.Context) SecretObjectTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SecretObjectTypePtrOutput)
}

// The type of source control service.
type SourceControlType string

const (
	SourceControlTypeGithub                  = SourceControlType("Github")
	SourceControlTypeVisualStudioTeamService = SourceControlType("VisualStudioTeamService")
)

func (SourceControlType) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlType)(nil)).Elem()
}

func (e SourceControlType) ToSourceControlTypeOutput() SourceControlTypeOutput {
	return pulumi.ToOutput(e).(SourceControlTypeOutput)
}

func (e SourceControlType) ToSourceControlTypeOutputWithContext(ctx context.Context) SourceControlTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SourceControlTypeOutput)
}

func (e SourceControlType) ToSourceControlTypePtrOutput() SourceControlTypePtrOutput {
	return e.ToSourceControlTypePtrOutputWithContext(context.Background())
}

func (e SourceControlType) ToSourceControlTypePtrOutputWithContext(ctx context.Context) SourceControlTypePtrOutput {
	return SourceControlType(e).ToSourceControlTypeOutputWithContext(ctx).ToSourceControlTypePtrOutputWithContext(ctx)
}

func (e SourceControlType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceControlType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceControlType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SourceControlType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SourceControlTypeOutput struct{ *pulumi.OutputState }

func (SourceControlTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlType)(nil)).Elem()
}

func (o SourceControlTypeOutput) ToSourceControlTypeOutput() SourceControlTypeOutput {
	return o
}

func (o SourceControlTypeOutput) ToSourceControlTypeOutputWithContext(ctx context.Context) SourceControlTypeOutput {
	return o
}

func (o SourceControlTypeOutput) ToSourceControlTypePtrOutput() SourceControlTypePtrOutput {
	return o.ToSourceControlTypePtrOutputWithContext(context.Background())
}

func (o SourceControlTypeOutput) ToSourceControlTypePtrOutputWithContext(ctx context.Context) SourceControlTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceControlType) *SourceControlType {
		return &v
	}).(SourceControlTypePtrOutput)
}

func (o SourceControlTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SourceControlTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceControlType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SourceControlTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceControlTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceControlType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SourceControlTypePtrOutput struct{ *pulumi.OutputState }

func (SourceControlTypePtrOutput) ElementType() reflect.Type {
	return sourceControlTypePtrType
}

func (o SourceControlTypePtrOutput) ToSourceControlTypePtrOutput() SourceControlTypePtrOutput {
	return o
}

func (o SourceControlTypePtrOutput) ToSourceControlTypePtrOutputWithContext(ctx context.Context) SourceControlTypePtrOutput {
	return o
}

func (o SourceControlTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceControlTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SourceControlType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o SourceControlTypePtrOutput) Elem() SourceControlTypeOutput {
	return o.ApplyT(func(v *SourceControlType) SourceControlType {
		var ret SourceControlType
		if v != nil {
			ret = *v
		}
		return ret
	}).(SourceControlTypeOutput)
}

// SourceControlTypeInput is an input type that accepts SourceControlTypeArgs and SourceControlTypeOutput values.
// You can construct a concrete instance of `SourceControlTypeInput` via:
//
//          SourceControlTypeArgs{...}
type SourceControlTypeInput interface {
	pulumi.Input

	ToSourceControlTypeOutput() SourceControlTypeOutput
	ToSourceControlTypeOutputWithContext(context.Context) SourceControlTypeOutput
}

var sourceControlTypePtrType = reflect.TypeOf((**SourceControlType)(nil)).Elem()

type SourceControlTypePtrInput interface {
	pulumi.Input

	ToSourceControlTypePtrOutput() SourceControlTypePtrOutput
	ToSourceControlTypePtrOutputWithContext(context.Context) SourceControlTypePtrOutput
}

type sourceControlTypePtr string

func SourceControlTypePtr(v string) SourceControlTypePtrInput {
	return (*sourceControlTypePtr)(&v)
}

func (*sourceControlTypePtr) ElementType() reflect.Type {
	return sourceControlTypePtrType
}

func (in *sourceControlTypePtr) ToSourceControlTypePtrOutput() SourceControlTypePtrOutput {
	return pulumi.ToOutput(in).(SourceControlTypePtrOutput)
}

func (in *sourceControlTypePtr) ToSourceControlTypePtrOutputWithContext(ctx context.Context) SourceControlTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SourceControlTypePtrOutput)
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
type SourceRegistryLoginMode string

const (
	SourceRegistryLoginModeNone    = SourceRegistryLoginMode("None")
	SourceRegistryLoginModeDefault = SourceRegistryLoginMode("Default")
)

func (SourceRegistryLoginMode) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRegistryLoginMode)(nil)).Elem()
}

func (e SourceRegistryLoginMode) ToSourceRegistryLoginModeOutput() SourceRegistryLoginModeOutput {
	return pulumi.ToOutput(e).(SourceRegistryLoginModeOutput)
}

func (e SourceRegistryLoginMode) ToSourceRegistryLoginModeOutputWithContext(ctx context.Context) SourceRegistryLoginModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SourceRegistryLoginModeOutput)
}

func (e SourceRegistryLoginMode) ToSourceRegistryLoginModePtrOutput() SourceRegistryLoginModePtrOutput {
	return e.ToSourceRegistryLoginModePtrOutputWithContext(context.Background())
}

func (e SourceRegistryLoginMode) ToSourceRegistryLoginModePtrOutputWithContext(ctx context.Context) SourceRegistryLoginModePtrOutput {
	return SourceRegistryLoginMode(e).ToSourceRegistryLoginModeOutputWithContext(ctx).ToSourceRegistryLoginModePtrOutputWithContext(ctx)
}

func (e SourceRegistryLoginMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceRegistryLoginMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceRegistryLoginMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SourceRegistryLoginMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SourceRegistryLoginModeOutput struct{ *pulumi.OutputState }

func (SourceRegistryLoginModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRegistryLoginMode)(nil)).Elem()
}

func (o SourceRegistryLoginModeOutput) ToSourceRegistryLoginModeOutput() SourceRegistryLoginModeOutput {
	return o
}

func (o SourceRegistryLoginModeOutput) ToSourceRegistryLoginModeOutputWithContext(ctx context.Context) SourceRegistryLoginModeOutput {
	return o
}

func (o SourceRegistryLoginModeOutput) ToSourceRegistryLoginModePtrOutput() SourceRegistryLoginModePtrOutput {
	return o.ToSourceRegistryLoginModePtrOutputWithContext(context.Background())
}

func (o SourceRegistryLoginModeOutput) ToSourceRegistryLoginModePtrOutputWithContext(ctx context.Context) SourceRegistryLoginModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceRegistryLoginMode) *SourceRegistryLoginMode {
		return &v
	}).(SourceRegistryLoginModePtrOutput)
}

func (o SourceRegistryLoginModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SourceRegistryLoginModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceRegistryLoginMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SourceRegistryLoginModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceRegistryLoginModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceRegistryLoginMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SourceRegistryLoginModePtrOutput struct{ *pulumi.OutputState }

func (SourceRegistryLoginModePtrOutput) ElementType() reflect.Type {
	return sourceRegistryLoginModePtrType
}

func (o SourceRegistryLoginModePtrOutput) ToSourceRegistryLoginModePtrOutput() SourceRegistryLoginModePtrOutput {
	return o
}

func (o SourceRegistryLoginModePtrOutput) ToSourceRegistryLoginModePtrOutputWithContext(ctx context.Context) SourceRegistryLoginModePtrOutput {
	return o
}

func (o SourceRegistryLoginModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceRegistryLoginModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SourceRegistryLoginMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o SourceRegistryLoginModePtrOutput) Elem() SourceRegistryLoginModeOutput {
	return o.ApplyT(func(v *SourceRegistryLoginMode) SourceRegistryLoginMode {
		var ret SourceRegistryLoginMode
		if v != nil {
			ret = *v
		}
		return ret
	}).(SourceRegistryLoginModeOutput)
}

// SourceRegistryLoginModeInput is an input type that accepts SourceRegistryLoginModeArgs and SourceRegistryLoginModeOutput values.
// You can construct a concrete instance of `SourceRegistryLoginModeInput` via:
//
//          SourceRegistryLoginModeArgs{...}
type SourceRegistryLoginModeInput interface {
	pulumi.Input

	ToSourceRegistryLoginModeOutput() SourceRegistryLoginModeOutput
	ToSourceRegistryLoginModeOutputWithContext(context.Context) SourceRegistryLoginModeOutput
}

var sourceRegistryLoginModePtrType = reflect.TypeOf((**SourceRegistryLoginMode)(nil)).Elem()

type SourceRegistryLoginModePtrInput interface {
	pulumi.Input

	ToSourceRegistryLoginModePtrOutput() SourceRegistryLoginModePtrOutput
	ToSourceRegistryLoginModePtrOutputWithContext(context.Context) SourceRegistryLoginModePtrOutput
}

type sourceRegistryLoginModePtr string

func SourceRegistryLoginModePtr(v string) SourceRegistryLoginModePtrInput {
	return (*sourceRegistryLoginModePtr)(&v)
}

func (*sourceRegistryLoginModePtr) ElementType() reflect.Type {
	return sourceRegistryLoginModePtrType
}

func (in *sourceRegistryLoginModePtr) ToSourceRegistryLoginModePtrOutput() SourceRegistryLoginModePtrOutput {
	return pulumi.ToOutput(in).(SourceRegistryLoginModePtrOutput)
}

func (in *sourceRegistryLoginModePtr) ToSourceRegistryLoginModePtrOutputWithContext(ctx context.Context) SourceRegistryLoginModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SourceRegistryLoginModePtrOutput)
}

type SourceTriggerEvent string

const (
	SourceTriggerEventCommit      = SourceTriggerEvent("commit")
	SourceTriggerEventPullrequest = SourceTriggerEvent("pullrequest")
)

func (SourceTriggerEvent) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTriggerEvent)(nil)).Elem()
}

func (e SourceTriggerEvent) ToSourceTriggerEventOutput() SourceTriggerEventOutput {
	return pulumi.ToOutput(e).(SourceTriggerEventOutput)
}

func (e SourceTriggerEvent) ToSourceTriggerEventOutputWithContext(ctx context.Context) SourceTriggerEventOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SourceTriggerEventOutput)
}

func (e SourceTriggerEvent) ToSourceTriggerEventPtrOutput() SourceTriggerEventPtrOutput {
	return e.ToSourceTriggerEventPtrOutputWithContext(context.Background())
}

func (e SourceTriggerEvent) ToSourceTriggerEventPtrOutputWithContext(ctx context.Context) SourceTriggerEventPtrOutput {
	return SourceTriggerEvent(e).ToSourceTriggerEventOutputWithContext(ctx).ToSourceTriggerEventPtrOutputWithContext(ctx)
}

func (e SourceTriggerEvent) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceTriggerEvent) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceTriggerEvent) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SourceTriggerEvent) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SourceTriggerEventOutput struct{ *pulumi.OutputState }

func (SourceTriggerEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTriggerEvent)(nil)).Elem()
}

func (o SourceTriggerEventOutput) ToSourceTriggerEventOutput() SourceTriggerEventOutput {
	return o
}

func (o SourceTriggerEventOutput) ToSourceTriggerEventOutputWithContext(ctx context.Context) SourceTriggerEventOutput {
	return o
}

func (o SourceTriggerEventOutput) ToSourceTriggerEventPtrOutput() SourceTriggerEventPtrOutput {
	return o.ToSourceTriggerEventPtrOutputWithContext(context.Background())
}

func (o SourceTriggerEventOutput) ToSourceTriggerEventPtrOutputWithContext(ctx context.Context) SourceTriggerEventPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceTriggerEvent) *SourceTriggerEvent {
		return &v
	}).(SourceTriggerEventPtrOutput)
}

func (o SourceTriggerEventOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SourceTriggerEventOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceTriggerEvent) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SourceTriggerEventOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceTriggerEventOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceTriggerEvent) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SourceTriggerEventPtrOutput struct{ *pulumi.OutputState }

func (SourceTriggerEventPtrOutput) ElementType() reflect.Type {
	return sourceTriggerEventPtrType
}

func (o SourceTriggerEventPtrOutput) ToSourceTriggerEventPtrOutput() SourceTriggerEventPtrOutput {
	return o
}

func (o SourceTriggerEventPtrOutput) ToSourceTriggerEventPtrOutputWithContext(ctx context.Context) SourceTriggerEventPtrOutput {
	return o
}

func (o SourceTriggerEventPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceTriggerEventPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SourceTriggerEvent) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o SourceTriggerEventPtrOutput) Elem() SourceTriggerEventOutput {
	return o.ApplyT(func(v *SourceTriggerEvent) SourceTriggerEvent {
		var ret SourceTriggerEvent
		if v != nil {
			ret = *v
		}
		return ret
	}).(SourceTriggerEventOutput)
}

// SourceTriggerEventInput is an input type that accepts SourceTriggerEventArgs and SourceTriggerEventOutput values.
// You can construct a concrete instance of `SourceTriggerEventInput` via:
//
//          SourceTriggerEventArgs{...}
type SourceTriggerEventInput interface {
	pulumi.Input

	ToSourceTriggerEventOutput() SourceTriggerEventOutput
	ToSourceTriggerEventOutputWithContext(context.Context) SourceTriggerEventOutput
}

var sourceTriggerEventPtrType = reflect.TypeOf((**SourceTriggerEvent)(nil)).Elem()

type SourceTriggerEventPtrInput interface {
	pulumi.Input

	ToSourceTriggerEventPtrOutput() SourceTriggerEventPtrOutput
	ToSourceTriggerEventPtrOutputWithContext(context.Context) SourceTriggerEventPtrOutput
}

type sourceTriggerEventPtr string

func SourceTriggerEventPtr(v string) SourceTriggerEventPtrInput {
	return (*sourceTriggerEventPtr)(&v)
}

func (*sourceTriggerEventPtr) ElementType() reflect.Type {
	return sourceTriggerEventPtrType
}

func (in *sourceTriggerEventPtr) ToSourceTriggerEventPtrOutput() SourceTriggerEventPtrOutput {
	return pulumi.ToOutput(in).(SourceTriggerEventPtrOutput)
}

func (in *sourceTriggerEventPtr) ToSourceTriggerEventPtrOutputWithContext(ctx context.Context) SourceTriggerEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SourceTriggerEventPtrOutput)
}

// The type of the step.
type StepType string

const (
	StepTypeDocker      = StepType("Docker")
	StepTypeFileTask    = StepType("FileTask")
	StepTypeEncodedTask = StepType("EncodedTask")
)

func (StepType) ElementType() reflect.Type {
	return reflect.TypeOf((*StepType)(nil)).Elem()
}

func (e StepType) ToStepTypeOutput() StepTypeOutput {
	return pulumi.ToOutput(e).(StepTypeOutput)
}

func (e StepType) ToStepTypeOutputWithContext(ctx context.Context) StepTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StepTypeOutput)
}

func (e StepType) ToStepTypePtrOutput() StepTypePtrOutput {
	return e.ToStepTypePtrOutputWithContext(context.Background())
}

func (e StepType) ToStepTypePtrOutputWithContext(ctx context.Context) StepTypePtrOutput {
	return StepType(e).ToStepTypeOutputWithContext(ctx).ToStepTypePtrOutputWithContext(ctx)
}

func (e StepType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StepType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StepType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StepType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StepTypeOutput struct{ *pulumi.OutputState }

func (StepTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepType)(nil)).Elem()
}

func (o StepTypeOutput) ToStepTypeOutput() StepTypeOutput {
	return o
}

func (o StepTypeOutput) ToStepTypeOutputWithContext(ctx context.Context) StepTypeOutput {
	return o
}

func (o StepTypeOutput) ToStepTypePtrOutput() StepTypePtrOutput {
	return o.ToStepTypePtrOutputWithContext(context.Background())
}

func (o StepTypeOutput) ToStepTypePtrOutputWithContext(ctx context.Context) StepTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StepType) *StepType {
		return &v
	}).(StepTypePtrOutput)
}

func (o StepTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StepTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StepType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StepTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StepTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StepType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StepTypePtrOutput struct{ *pulumi.OutputState }

func (StepTypePtrOutput) ElementType() reflect.Type {
	return stepTypePtrType
}

func (o StepTypePtrOutput) ToStepTypePtrOutput() StepTypePtrOutput {
	return o
}

func (o StepTypePtrOutput) ToStepTypePtrOutputWithContext(ctx context.Context) StepTypePtrOutput {
	return o
}

func (o StepTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StepTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StepType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o StepTypePtrOutput) Elem() StepTypeOutput {
	return o.ApplyT(func(v *StepType) StepType {
		var ret StepType
		if v != nil {
			ret = *v
		}
		return ret
	}).(StepTypeOutput)
}

// StepTypeInput is an input type that accepts StepTypeArgs and StepTypeOutput values.
// You can construct a concrete instance of `StepTypeInput` via:
//
//          StepTypeArgs{...}
type StepTypeInput interface {
	pulumi.Input

	ToStepTypeOutput() StepTypeOutput
	ToStepTypeOutputWithContext(context.Context) StepTypeOutput
}

var stepTypePtrType = reflect.TypeOf((**StepType)(nil)).Elem()

type StepTypePtrInput interface {
	pulumi.Input

	ToStepTypePtrOutput() StepTypePtrOutput
	ToStepTypePtrOutputWithContext(context.Context) StepTypePtrOutput
}

type stepTypePtr string

func StepTypePtr(v string) StepTypePtrInput {
	return (*stepTypePtr)(&v)
}

func (*stepTypePtr) ElementType() reflect.Type {
	return stepTypePtrType
}

func (in *stepTypePtr) ToStepTypePtrOutput() StepTypePtrOutput {
	return pulumi.ToOutput(in).(StepTypePtrOutput)
}

func (in *stepTypePtr) ToStepTypePtrOutputWithContext(ctx context.Context) StepTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StepTypePtrOutput)
}

// The current status of task.
type TaskStatus string

const (
	TaskStatusDisabled = TaskStatus("Disabled")
	TaskStatusEnabled  = TaskStatus("Enabled")
)

func (TaskStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskStatus)(nil)).Elem()
}

func (e TaskStatus) ToTaskStatusOutput() TaskStatusOutput {
	return pulumi.ToOutput(e).(TaskStatusOutput)
}

func (e TaskStatus) ToTaskStatusOutputWithContext(ctx context.Context) TaskStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TaskStatusOutput)
}

func (e TaskStatus) ToTaskStatusPtrOutput() TaskStatusPtrOutput {
	return e.ToTaskStatusPtrOutputWithContext(context.Background())
}

func (e TaskStatus) ToTaskStatusPtrOutputWithContext(ctx context.Context) TaskStatusPtrOutput {
	return TaskStatus(e).ToTaskStatusOutputWithContext(ctx).ToTaskStatusPtrOutputWithContext(ctx)
}

func (e TaskStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TaskStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TaskStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TaskStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TaskStatusOutput struct{ *pulumi.OutputState }

func (TaskStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskStatus)(nil)).Elem()
}

func (o TaskStatusOutput) ToTaskStatusOutput() TaskStatusOutput {
	return o
}

func (o TaskStatusOutput) ToTaskStatusOutputWithContext(ctx context.Context) TaskStatusOutput {
	return o
}

func (o TaskStatusOutput) ToTaskStatusPtrOutput() TaskStatusPtrOutput {
	return o.ToTaskStatusPtrOutputWithContext(context.Background())
}

func (o TaskStatusOutput) ToTaskStatusPtrOutputWithContext(ctx context.Context) TaskStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskStatus) *TaskStatus {
		return &v
	}).(TaskStatusPtrOutput)
}

func (o TaskStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TaskStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TaskStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TaskStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TaskStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TaskStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TaskStatusPtrOutput struct{ *pulumi.OutputState }

func (TaskStatusPtrOutput) ElementType() reflect.Type {
	return taskStatusPtrType
}

func (o TaskStatusPtrOutput) ToTaskStatusPtrOutput() TaskStatusPtrOutput {
	return o
}

func (o TaskStatusPtrOutput) ToTaskStatusPtrOutputWithContext(ctx context.Context) TaskStatusPtrOutput {
	return o
}

func (o TaskStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TaskStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TaskStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o TaskStatusPtrOutput) Elem() TaskStatusOutput {
	return o.ApplyT(func(v *TaskStatus) TaskStatus {
		var ret TaskStatus
		if v != nil {
			ret = *v
		}
		return ret
	}).(TaskStatusOutput)
}

// TaskStatusInput is an input type that accepts TaskStatusArgs and TaskStatusOutput values.
// You can construct a concrete instance of `TaskStatusInput` via:
//
//          TaskStatusArgs{...}
type TaskStatusInput interface {
	pulumi.Input

	ToTaskStatusOutput() TaskStatusOutput
	ToTaskStatusOutputWithContext(context.Context) TaskStatusOutput
}

var taskStatusPtrType = reflect.TypeOf((**TaskStatus)(nil)).Elem()

type TaskStatusPtrInput interface {
	pulumi.Input

	ToTaskStatusPtrOutput() TaskStatusPtrOutput
	ToTaskStatusPtrOutputWithContext(context.Context) TaskStatusPtrOutput
}

type taskStatusPtr string

func TaskStatusPtr(v string) TaskStatusPtrInput {
	return (*taskStatusPtr)(&v)
}

func (*taskStatusPtr) ElementType() reflect.Type {
	return taskStatusPtrType
}

func (in *taskStatusPtr) ToTaskStatusPtrOutput() TaskStatusPtrOutput {
	return pulumi.ToOutput(in).(TaskStatusPtrOutput)
}

func (in *taskStatusPtr) ToTaskStatusPtrOutputWithContext(ctx context.Context) TaskStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TaskStatusPtrOutput)
}

// The type of Auth token.
type TokenType string

const (
	TokenTypePAT   = TokenType("PAT")
	TokenTypeOAuth = TokenType("OAuth")
)

func (TokenType) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenType)(nil)).Elem()
}

func (e TokenType) ToTokenTypeOutput() TokenTypeOutput {
	return pulumi.ToOutput(e).(TokenTypeOutput)
}

func (e TokenType) ToTokenTypeOutputWithContext(ctx context.Context) TokenTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TokenTypeOutput)
}

func (e TokenType) ToTokenTypePtrOutput() TokenTypePtrOutput {
	return e.ToTokenTypePtrOutputWithContext(context.Background())
}

func (e TokenType) ToTokenTypePtrOutputWithContext(ctx context.Context) TokenTypePtrOutput {
	return TokenType(e).ToTokenTypeOutputWithContext(ctx).ToTokenTypePtrOutputWithContext(ctx)
}

func (e TokenType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TokenType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TokenType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TokenType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TokenTypeOutput struct{ *pulumi.OutputState }

func (TokenTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenType)(nil)).Elem()
}

func (o TokenTypeOutput) ToTokenTypeOutput() TokenTypeOutput {
	return o
}

func (o TokenTypeOutput) ToTokenTypeOutputWithContext(ctx context.Context) TokenTypeOutput {
	return o
}

func (o TokenTypeOutput) ToTokenTypePtrOutput() TokenTypePtrOutput {
	return o.ToTokenTypePtrOutputWithContext(context.Background())
}

func (o TokenTypeOutput) ToTokenTypePtrOutputWithContext(ctx context.Context) TokenTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenType) *TokenType {
		return &v
	}).(TokenTypePtrOutput)
}

func (o TokenTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TokenTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TokenType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TokenTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TokenTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TokenType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TokenTypePtrOutput struct{ *pulumi.OutputState }

func (TokenTypePtrOutput) ElementType() reflect.Type {
	return tokenTypePtrType
}

func (o TokenTypePtrOutput) ToTokenTypePtrOutput() TokenTypePtrOutput {
	return o
}

func (o TokenTypePtrOutput) ToTokenTypePtrOutputWithContext(ctx context.Context) TokenTypePtrOutput {
	return o
}

func (o TokenTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TokenTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TokenType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o TokenTypePtrOutput) Elem() TokenTypeOutput {
	return o.ApplyT(func(v *TokenType) TokenType {
		var ret TokenType
		if v != nil {
			ret = *v
		}
		return ret
	}).(TokenTypeOutput)
}

// TokenTypeInput is an input type that accepts TokenTypeArgs and TokenTypeOutput values.
// You can construct a concrete instance of `TokenTypeInput` via:
//
//          TokenTypeArgs{...}
type TokenTypeInput interface {
	pulumi.Input

	ToTokenTypeOutput() TokenTypeOutput
	ToTokenTypeOutputWithContext(context.Context) TokenTypeOutput
}

var tokenTypePtrType = reflect.TypeOf((**TokenType)(nil)).Elem()

type TokenTypePtrInput interface {
	pulumi.Input

	ToTokenTypePtrOutput() TokenTypePtrOutput
	ToTokenTypePtrOutputWithContext(context.Context) TokenTypePtrOutput
}

type tokenTypePtr string

func TokenTypePtr(v string) TokenTypePtrInput {
	return (*tokenTypePtr)(&v)
}

func (*tokenTypePtr) ElementType() reflect.Type {
	return tokenTypePtrType
}

func (in *tokenTypePtr) ToTokenTypePtrOutput() TokenTypePtrOutput {
	return pulumi.ToOutput(in).(TokenTypePtrOutput)
}

func (in *tokenTypePtr) ToTokenTypePtrOutputWithContext(ctx context.Context) TokenTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TokenTypePtrOutput)
}

// The current status of trigger.
type TriggerStatus string

const (
	TriggerStatusDisabled = TriggerStatus("Disabled")
	TriggerStatusEnabled  = TriggerStatus("Enabled")
)

func (TriggerStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerStatus)(nil)).Elem()
}

func (e TriggerStatus) ToTriggerStatusOutput() TriggerStatusOutput {
	return pulumi.ToOutput(e).(TriggerStatusOutput)
}

func (e TriggerStatus) ToTriggerStatusOutputWithContext(ctx context.Context) TriggerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TriggerStatusOutput)
}

func (e TriggerStatus) ToTriggerStatusPtrOutput() TriggerStatusPtrOutput {
	return e.ToTriggerStatusPtrOutputWithContext(context.Background())
}

func (e TriggerStatus) ToTriggerStatusPtrOutputWithContext(ctx context.Context) TriggerStatusPtrOutput {
	return TriggerStatus(e).ToTriggerStatusOutputWithContext(ctx).ToTriggerStatusPtrOutputWithContext(ctx)
}

func (e TriggerStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TriggerStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TriggerStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TriggerStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TriggerStatusOutput struct{ *pulumi.OutputState }

func (TriggerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerStatus)(nil)).Elem()
}

func (o TriggerStatusOutput) ToTriggerStatusOutput() TriggerStatusOutput {
	return o
}

func (o TriggerStatusOutput) ToTriggerStatusOutputWithContext(ctx context.Context) TriggerStatusOutput {
	return o
}

func (o TriggerStatusOutput) ToTriggerStatusPtrOutput() TriggerStatusPtrOutput {
	return o.ToTriggerStatusPtrOutputWithContext(context.Background())
}

func (o TriggerStatusOutput) ToTriggerStatusPtrOutputWithContext(ctx context.Context) TriggerStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerStatus) *TriggerStatus {
		return &v
	}).(TriggerStatusPtrOutput)
}

func (o TriggerStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TriggerStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TriggerStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TriggerStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TriggerStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TriggerStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TriggerStatusPtrOutput struct{ *pulumi.OutputState }

func (TriggerStatusPtrOutput) ElementType() reflect.Type {
	return triggerStatusPtrType
}

func (o TriggerStatusPtrOutput) ToTriggerStatusPtrOutput() TriggerStatusPtrOutput {
	return o
}

func (o TriggerStatusPtrOutput) ToTriggerStatusPtrOutputWithContext(ctx context.Context) TriggerStatusPtrOutput {
	return o
}

func (o TriggerStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TriggerStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TriggerStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o TriggerStatusPtrOutput) Elem() TriggerStatusOutput {
	return o.ApplyT(func(v *TriggerStatus) TriggerStatus {
		var ret TriggerStatus
		if v != nil {
			ret = *v
		}
		return ret
	}).(TriggerStatusOutput)
}

// TriggerStatusInput is an input type that accepts TriggerStatusArgs and TriggerStatusOutput values.
// You can construct a concrete instance of `TriggerStatusInput` via:
//
//          TriggerStatusArgs{...}
type TriggerStatusInput interface {
	pulumi.Input

	ToTriggerStatusOutput() TriggerStatusOutput
	ToTriggerStatusOutputWithContext(context.Context) TriggerStatusOutput
}

var triggerStatusPtrType = reflect.TypeOf((**TriggerStatus)(nil)).Elem()

type TriggerStatusPtrInput interface {
	pulumi.Input

	ToTriggerStatusPtrOutput() TriggerStatusPtrOutput
	ToTriggerStatusPtrOutputWithContext(context.Context) TriggerStatusPtrOutput
}

type triggerStatusPtr string

func TriggerStatusPtr(v string) TriggerStatusPtrInput {
	return (*triggerStatusPtr)(&v)
}

func (*triggerStatusPtr) ElementType() reflect.Type {
	return triggerStatusPtrType
}

func (in *triggerStatusPtr) ToTriggerStatusPtrOutput() TriggerStatusPtrOutput {
	return pulumi.ToOutput(in).(TriggerStatusPtrOutput)
}

func (in *triggerStatusPtr) ToTriggerStatusPtrOutputWithContext(ctx context.Context) TriggerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TriggerStatusPtrOutput)
}

// Variant of the CPU.
type Variant string

const (
	VariantV6 = Variant("v6")
	VariantV7 = Variant("v7")
	VariantV8 = Variant("v8")
)

func (Variant) ElementType() reflect.Type {
	return reflect.TypeOf((*Variant)(nil)).Elem()
}

func (e Variant) ToVariantOutput() VariantOutput {
	return pulumi.ToOutput(e).(VariantOutput)
}

func (e Variant) ToVariantOutputWithContext(ctx context.Context) VariantOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VariantOutput)
}

func (e Variant) ToVariantPtrOutput() VariantPtrOutput {
	return e.ToVariantPtrOutputWithContext(context.Background())
}

func (e Variant) ToVariantPtrOutputWithContext(ctx context.Context) VariantPtrOutput {
	return Variant(e).ToVariantOutputWithContext(ctx).ToVariantPtrOutputWithContext(ctx)
}

func (e Variant) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Variant) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Variant) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Variant) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VariantOutput struct{ *pulumi.OutputState }

func (VariantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Variant)(nil)).Elem()
}

func (o VariantOutput) ToVariantOutput() VariantOutput {
	return o
}

func (o VariantOutput) ToVariantOutputWithContext(ctx context.Context) VariantOutput {
	return o
}

func (o VariantOutput) ToVariantPtrOutput() VariantPtrOutput {
	return o.ToVariantPtrOutputWithContext(context.Background())
}

func (o VariantOutput) ToVariantPtrOutputWithContext(ctx context.Context) VariantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Variant) *Variant {
		return &v
	}).(VariantPtrOutput)
}

func (o VariantOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VariantOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Variant) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VariantOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariantOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Variant) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VariantPtrOutput struct{ *pulumi.OutputState }

func (VariantPtrOutput) ElementType() reflect.Type {
	return variantPtrType
}

func (o VariantPtrOutput) ToVariantPtrOutput() VariantPtrOutput {
	return o
}

func (o VariantPtrOutput) ToVariantPtrOutputWithContext(ctx context.Context) VariantPtrOutput {
	return o
}

func (o VariantPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariantPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Variant) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o VariantPtrOutput) Elem() VariantOutput {
	return o.ApplyT(func(v *Variant) Variant {
		var ret Variant
		if v != nil {
			ret = *v
		}
		return ret
	}).(VariantOutput)
}

// VariantInput is an input type that accepts VariantArgs and VariantOutput values.
// You can construct a concrete instance of `VariantInput` via:
//
//          VariantArgs{...}
type VariantInput interface {
	pulumi.Input

	ToVariantOutput() VariantOutput
	ToVariantOutputWithContext(context.Context) VariantOutput
}

var variantPtrType = reflect.TypeOf((**Variant)(nil)).Elem()

type VariantPtrInput interface {
	pulumi.Input

	ToVariantPtrOutput() VariantPtrOutput
	ToVariantPtrOutputWithContext(context.Context) VariantPtrOutput
}

type variantPtr string

func VariantPtr(v string) VariantPtrInput {
	return (*variantPtr)(&v)
}

func (*variantPtr) ElementType() reflect.Type {
	return variantPtrType
}

func (in *variantPtr) ToVariantPtrOutput() VariantPtrOutput {
	return pulumi.ToOutput(in).(VariantPtrOutput)
}

func (in *variantPtr) ToVariantPtrOutputWithContext(ctx context.Context) VariantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VariantPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ArchitectureOutput{})
	pulumi.RegisterOutputType(ArchitecturePtrOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerTypeOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerTypePtrOutput{})
	pulumi.RegisterOutputType(OSOutput{})
	pulumi.RegisterOutputType(OSPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(SecretObjectTypeOutput{})
	pulumi.RegisterOutputType(SecretObjectTypePtrOutput{})
	pulumi.RegisterOutputType(SourceControlTypeOutput{})
	pulumi.RegisterOutputType(SourceControlTypePtrOutput{})
	pulumi.RegisterOutputType(SourceRegistryLoginModeOutput{})
	pulumi.RegisterOutputType(SourceRegistryLoginModePtrOutput{})
	pulumi.RegisterOutputType(SourceTriggerEventOutput{})
	pulumi.RegisterOutputType(SourceTriggerEventPtrOutput{})
	pulumi.RegisterOutputType(StepTypeOutput{})
	pulumi.RegisterOutputType(StepTypePtrOutput{})
	pulumi.RegisterOutputType(TaskStatusOutput{})
	pulumi.RegisterOutputType(TaskStatusPtrOutput{})
	pulumi.RegisterOutputType(TokenTypeOutput{})
	pulumi.RegisterOutputType(TokenTypePtrOutput{})
	pulumi.RegisterOutputType(TriggerStatusOutput{})
	pulumi.RegisterOutputType(TriggerStatusPtrOutput{})
	pulumi.RegisterOutputType(VariantOutput{})
	pulumi.RegisterOutputType(VariantPtrOutput{})
}
