// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The activation properties of the connected registry.
type ActivationPropertiesResponse struct {
	// The activation status of the connected registry.
	Status string `pulumi:"status"`
}

// The activation properties of the connected registry.
type ActivationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ActivationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivationPropertiesResponse)(nil)).Elem()
}

func (o ActivationPropertiesResponseOutput) ToActivationPropertiesResponseOutput() ActivationPropertiesResponseOutput {
	return o
}

func (o ActivationPropertiesResponseOutput) ToActivationPropertiesResponseOutputWithContext(ctx context.Context) ActivationPropertiesResponseOutput {
	return o
}

// The activation status of the connected registry.
func (o ActivationPropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ActivationPropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The agent that initiated the event. For most situations, this could be from the authorization context of the request.
type ActorResponse struct {
	// The subject or username associated with the request context that generated the event.
	Name *string `pulumi:"name"`
}

// The agent that initiated the event. For most situations, this could be from the authorization context of the request.
type ActorResponseOutput struct{ *pulumi.OutputState }

func (ActorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActorResponse)(nil)).Elem()
}

func (o ActorResponseOutput) ToActorResponseOutput() ActorResponseOutput {
	return o
}

func (o ActorResponseOutput) ToActorResponseOutputWithContext(ctx context.Context) ActorResponseOutput {
	return o
}

// The subject or username associated with the request context that generated the event.
func (o ActorResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActorResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ActorResponsePtrOutput struct{ *pulumi.OutputState }

func (ActorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActorResponse)(nil)).Elem()
}

func (o ActorResponsePtrOutput) ToActorResponsePtrOutput() ActorResponsePtrOutput {
	return o
}

func (o ActorResponsePtrOutput) ToActorResponsePtrOutputWithContext(ctx context.Context) ActorResponsePtrOutput {
	return o
}

func (o ActorResponsePtrOutput) Elem() ActorResponseOutput {
	return o.ApplyT(func(v *ActorResponse) ActorResponse {
		if v != nil {
			return *v
		}
		var ret ActorResponse
		return ret
	}).(ActorResponseOutput)
}

// The subject or username associated with the request context that generated the event.
func (o ActorResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The properties that determine the run agent configuration.
type AgentProperties struct {
	// The CPU configuration in terms of number of cores required for the run.
	Cpu *int `pulumi:"cpu"`
}

// AgentPropertiesInput is an input type that accepts AgentPropertiesArgs and AgentPropertiesOutput values.
// You can construct a concrete instance of `AgentPropertiesInput` via:
//
//	AgentPropertiesArgs{...}
type AgentPropertiesInput interface {
	pulumi.Input

	ToAgentPropertiesOutput() AgentPropertiesOutput
	ToAgentPropertiesOutputWithContext(context.Context) AgentPropertiesOutput
}

// The properties that determine the run agent configuration.
type AgentPropertiesArgs struct {
	// The CPU configuration in terms of number of cores required for the run.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
}

func (AgentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentProperties)(nil)).Elem()
}

func (i AgentPropertiesArgs) ToAgentPropertiesOutput() AgentPropertiesOutput {
	return i.ToAgentPropertiesOutputWithContext(context.Background())
}

func (i AgentPropertiesArgs) ToAgentPropertiesOutputWithContext(ctx context.Context) AgentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPropertiesOutput)
}

func (i AgentPropertiesArgs) ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput {
	return i.ToAgentPropertiesPtrOutputWithContext(context.Background())
}

func (i AgentPropertiesArgs) ToAgentPropertiesPtrOutputWithContext(ctx context.Context) AgentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPropertiesOutput).ToAgentPropertiesPtrOutputWithContext(ctx)
}

// AgentPropertiesPtrInput is an input type that accepts AgentPropertiesArgs, AgentPropertiesPtr and AgentPropertiesPtrOutput values.
// You can construct a concrete instance of `AgentPropertiesPtrInput` via:
//
//	        AgentPropertiesArgs{...}
//
//	or:
//
//	        nil
type AgentPropertiesPtrInput interface {
	pulumi.Input

	ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput
	ToAgentPropertiesPtrOutputWithContext(context.Context) AgentPropertiesPtrOutput
}

type agentPropertiesPtrType AgentPropertiesArgs

func AgentPropertiesPtr(v *AgentPropertiesArgs) AgentPropertiesPtrInput {
	return (*agentPropertiesPtrType)(v)
}

func (*agentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentProperties)(nil)).Elem()
}

func (i *agentPropertiesPtrType) ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput {
	return i.ToAgentPropertiesPtrOutputWithContext(context.Background())
}

func (i *agentPropertiesPtrType) ToAgentPropertiesPtrOutputWithContext(ctx context.Context) AgentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPropertiesPtrOutput)
}

// The properties that determine the run agent configuration.
type AgentPropertiesOutput struct{ *pulumi.OutputState }

func (AgentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentProperties)(nil)).Elem()
}

func (o AgentPropertiesOutput) ToAgentPropertiesOutput() AgentPropertiesOutput {
	return o
}

func (o AgentPropertiesOutput) ToAgentPropertiesOutputWithContext(ctx context.Context) AgentPropertiesOutput {
	return o
}

func (o AgentPropertiesOutput) ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput {
	return o.ToAgentPropertiesPtrOutputWithContext(context.Background())
}

func (o AgentPropertiesOutput) ToAgentPropertiesPtrOutputWithContext(ctx context.Context) AgentPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentProperties) *AgentProperties {
		return &v
	}).(AgentPropertiesPtrOutput)
}

// The CPU configuration in terms of number of cores required for the run.
func (o AgentPropertiesOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentProperties) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

type AgentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AgentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentProperties)(nil)).Elem()
}

func (o AgentPropertiesPtrOutput) ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput {
	return o
}

func (o AgentPropertiesPtrOutput) ToAgentPropertiesPtrOutputWithContext(ctx context.Context) AgentPropertiesPtrOutput {
	return o
}

func (o AgentPropertiesPtrOutput) Elem() AgentPropertiesOutput {
	return o.ApplyT(func(v *AgentProperties) AgentProperties {
		if v != nil {
			return *v
		}
		var ret AgentProperties
		return ret
	}).(AgentPropertiesOutput)
}

// The CPU configuration in terms of number of cores required for the run.
func (o AgentPropertiesPtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentProperties) *int {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.IntPtrOutput)
}

// The properties that determine the run agent configuration.
type AgentPropertiesResponse struct {
	// The CPU configuration in terms of number of cores required for the run.
	Cpu *int `pulumi:"cpu"`
}

// The properties that determine the run agent configuration.
type AgentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AgentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPropertiesResponse)(nil)).Elem()
}

func (o AgentPropertiesResponseOutput) ToAgentPropertiesResponseOutput() AgentPropertiesResponseOutput {
	return o
}

func (o AgentPropertiesResponseOutput) ToAgentPropertiesResponseOutputWithContext(ctx context.Context) AgentPropertiesResponseOutput {
	return o
}

// The CPU configuration in terms of number of cores required for the run.
func (o AgentPropertiesResponseOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPropertiesResponse) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

type AgentPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPropertiesResponse)(nil)).Elem()
}

func (o AgentPropertiesResponsePtrOutput) ToAgentPropertiesResponsePtrOutput() AgentPropertiesResponsePtrOutput {
	return o
}

func (o AgentPropertiesResponsePtrOutput) ToAgentPropertiesResponsePtrOutputWithContext(ctx context.Context) AgentPropertiesResponsePtrOutput {
	return o
}

func (o AgentPropertiesResponsePtrOutput) Elem() AgentPropertiesResponseOutput {
	return o.ApplyT(func(v *AgentPropertiesResponse) AgentPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AgentPropertiesResponse
		return ret
	}).(AgentPropertiesResponseOutput)
}

// The CPU configuration in terms of number of cores required for the run.
func (o AgentPropertiesResponsePtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.IntPtrOutput)
}

// The properties of a run argument.
type Argument struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the argument.
	Name string `pulumi:"name"`
	// The value of the argument.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for Argument
func (val *Argument) Defaults() *Argument {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsSecret) {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// The properties of a run argument.
type ArgumentResponse struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the argument.
	Name string `pulumi:"name"`
	// The value of the argument.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for ArgumentResponse
func (val *ArgumentResponse) Defaults() *ArgumentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsSecret) {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// The authorization properties for accessing the source code repository.
type AuthInfo struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType string `pulumi:"tokenType"`
}

// AuthInfoInput is an input type that accepts AuthInfoArgs and AuthInfoOutput values.
// You can construct a concrete instance of `AuthInfoInput` via:
//
//	AuthInfoArgs{...}
type AuthInfoInput interface {
	pulumi.Input

	ToAuthInfoOutput() AuthInfoOutput
	ToAuthInfoOutputWithContext(context.Context) AuthInfoOutput
}

// The authorization properties for accessing the source code repository.
type AuthInfoArgs struct {
	// Time in seconds that the token remains valid
	ExpiresIn pulumi.IntPtrInput `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token pulumi.StringInput `pulumi:"token"`
	// The type of Auth token.
	TokenType pulumi.StringInput `pulumi:"tokenType"`
}

func (AuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthInfo)(nil)).Elem()
}

func (i AuthInfoArgs) ToAuthInfoOutput() AuthInfoOutput {
	return i.ToAuthInfoOutputWithContext(context.Background())
}

func (i AuthInfoArgs) ToAuthInfoOutputWithContext(ctx context.Context) AuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthInfoOutput)
}

func (i AuthInfoArgs) ToAuthInfoPtrOutput() AuthInfoPtrOutput {
	return i.ToAuthInfoPtrOutputWithContext(context.Background())
}

func (i AuthInfoArgs) ToAuthInfoPtrOutputWithContext(ctx context.Context) AuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthInfoOutput).ToAuthInfoPtrOutputWithContext(ctx)
}

// AuthInfoPtrInput is an input type that accepts AuthInfoArgs, AuthInfoPtr and AuthInfoPtrOutput values.
// You can construct a concrete instance of `AuthInfoPtrInput` via:
//
//	        AuthInfoArgs{...}
//
//	or:
//
//	        nil
type AuthInfoPtrInput interface {
	pulumi.Input

	ToAuthInfoPtrOutput() AuthInfoPtrOutput
	ToAuthInfoPtrOutputWithContext(context.Context) AuthInfoPtrOutput
}

type authInfoPtrType AuthInfoArgs

func AuthInfoPtr(v *AuthInfoArgs) AuthInfoPtrInput {
	return (*authInfoPtrType)(v)
}

func (*authInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthInfo)(nil)).Elem()
}

func (i *authInfoPtrType) ToAuthInfoPtrOutput() AuthInfoPtrOutput {
	return i.ToAuthInfoPtrOutputWithContext(context.Background())
}

func (i *authInfoPtrType) ToAuthInfoPtrOutputWithContext(ctx context.Context) AuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthInfoPtrOutput)
}

// The authorization properties for accessing the source code repository.
type AuthInfoOutput struct{ *pulumi.OutputState }

func (AuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthInfo)(nil)).Elem()
}

func (o AuthInfoOutput) ToAuthInfoOutput() AuthInfoOutput {
	return o
}

func (o AuthInfoOutput) ToAuthInfoOutputWithContext(ctx context.Context) AuthInfoOutput {
	return o
}

func (o AuthInfoOutput) ToAuthInfoPtrOutput() AuthInfoPtrOutput {
	return o.ToAuthInfoPtrOutputWithContext(context.Background())
}

func (o AuthInfoOutput) ToAuthInfoPtrOutputWithContext(ctx context.Context) AuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthInfo) *AuthInfo {
		return &v
	}).(AuthInfoPtrOutput)
}

// Time in seconds that the token remains valid
func (o AuthInfoOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AuthInfo) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o AuthInfoOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthInfo) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o AuthInfoOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthInfo) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o AuthInfoOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v AuthInfo) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o AuthInfoOutput) TokenType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthInfo) string { return v.TokenType }).(pulumi.StringOutput)
}

type AuthInfoPtrOutput struct{ *pulumi.OutputState }

func (AuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthInfo)(nil)).Elem()
}

func (o AuthInfoPtrOutput) ToAuthInfoPtrOutput() AuthInfoPtrOutput {
	return o
}

func (o AuthInfoPtrOutput) ToAuthInfoPtrOutputWithContext(ctx context.Context) AuthInfoPtrOutput {
	return o
}

func (o AuthInfoPtrOutput) Elem() AuthInfoOutput {
	return o.ApplyT(func(v *AuthInfo) AuthInfo {
		if v != nil {
			return *v
		}
		var ret AuthInfo
		return ret
	}).(AuthInfoOutput)
}

// Time in seconds that the token remains valid
func (o AuthInfoPtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o AuthInfoPtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o AuthInfoPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o AuthInfoPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o AuthInfoPtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.TokenType
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
type AuthInfoResponse struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType string `pulumi:"tokenType"`
}

// The authorization properties for accessing the source code repository.
type AuthInfoResponseOutput struct{ *pulumi.OutputState }

func (AuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthInfoResponse)(nil)).Elem()
}

func (o AuthInfoResponseOutput) ToAuthInfoResponseOutput() AuthInfoResponseOutput {
	return o
}

func (o AuthInfoResponseOutput) ToAuthInfoResponseOutputWithContext(ctx context.Context) AuthInfoResponseOutput {
	return o
}

// Time in seconds that the token remains valid
func (o AuthInfoResponseOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AuthInfoResponse) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o AuthInfoResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthInfoResponse) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o AuthInfoResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthInfoResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o AuthInfoResponseOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v AuthInfoResponse) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o AuthInfoResponseOutput) TokenType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthInfoResponse) string { return v.TokenType }).(pulumi.StringOutput)
}

type AuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthInfoResponse)(nil)).Elem()
}

func (o AuthInfoResponsePtrOutput) ToAuthInfoResponsePtrOutput() AuthInfoResponsePtrOutput {
	return o
}

func (o AuthInfoResponsePtrOutput) ToAuthInfoResponsePtrOutputWithContext(ctx context.Context) AuthInfoResponsePtrOutput {
	return o
}

func (o AuthInfoResponsePtrOutput) Elem() AuthInfoResponseOutput {
	return o.ApplyT(func(v *AuthInfoResponse) AuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret AuthInfoResponse
		return ret
	}).(AuthInfoResponseOutput)
}

// Time in seconds that the token remains valid
func (o AuthInfoResponsePtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o AuthInfoResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o AuthInfoResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o AuthInfoResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o AuthInfoResponsePtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TokenType
	}).(pulumi.StringPtrOutput)
}

// Properties that describe a base image dependency.
type BaseImageDependencyResponse struct {
	// The sha256-based digest of the image manifest.
	Digest *string `pulumi:"digest"`
	// The registry login server.
	Registry *string `pulumi:"registry"`
	// The repository name.
	Repository *string `pulumi:"repository"`
	// The tag name.
	Tag *string `pulumi:"tag"`
	// The type of the base image dependency.
	Type *string `pulumi:"type"`
}

// The trigger based on base image dependency.
type BaseImageTrigger struct {
	// The type of the auto trigger for base image dependency updates.
	BaseImageTriggerType string `pulumi:"baseImageTriggerType"`
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
	// The endpoint URL for receiving update triggers.
	UpdateTriggerEndpoint *string `pulumi:"updateTriggerEndpoint"`
	// Type of Payload body for Base image update triggers.
	UpdateTriggerPayloadType *string `pulumi:"updateTriggerPayloadType"`
}

// Defaults sets the appropriate defaults for BaseImageTrigger
func (val *BaseImageTrigger) Defaults() *BaseImageTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// BaseImageTriggerInput is an input type that accepts BaseImageTriggerArgs and BaseImageTriggerOutput values.
// You can construct a concrete instance of `BaseImageTriggerInput` via:
//
//	BaseImageTriggerArgs{...}
type BaseImageTriggerInput interface {
	pulumi.Input

	ToBaseImageTriggerOutput() BaseImageTriggerOutput
	ToBaseImageTriggerOutputWithContext(context.Context) BaseImageTriggerOutput
}

// The trigger based on base image dependency.
type BaseImageTriggerArgs struct {
	// The type of the auto trigger for base image dependency updates.
	BaseImageTriggerType pulumi.StringInput `pulumi:"baseImageTriggerType"`
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
	// The current status of trigger.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The endpoint URL for receiving update triggers.
	UpdateTriggerEndpoint pulumi.StringPtrInput `pulumi:"updateTriggerEndpoint"`
	// Type of Payload body for Base image update triggers.
	UpdateTriggerPayloadType pulumi.StringPtrInput `pulumi:"updateTriggerPayloadType"`
}

// Defaults sets the appropriate defaults for BaseImageTriggerArgs
func (val *BaseImageTriggerArgs) Defaults() *BaseImageTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (BaseImageTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageTrigger)(nil)).Elem()
}

func (i BaseImageTriggerArgs) ToBaseImageTriggerOutput() BaseImageTriggerOutput {
	return i.ToBaseImageTriggerOutputWithContext(context.Background())
}

func (i BaseImageTriggerArgs) ToBaseImageTriggerOutputWithContext(ctx context.Context) BaseImageTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageTriggerOutput)
}

func (i BaseImageTriggerArgs) ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput {
	return i.ToBaseImageTriggerPtrOutputWithContext(context.Background())
}

func (i BaseImageTriggerArgs) ToBaseImageTriggerPtrOutputWithContext(ctx context.Context) BaseImageTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageTriggerOutput).ToBaseImageTriggerPtrOutputWithContext(ctx)
}

// BaseImageTriggerPtrInput is an input type that accepts BaseImageTriggerArgs, BaseImageTriggerPtr and BaseImageTriggerPtrOutput values.
// You can construct a concrete instance of `BaseImageTriggerPtrInput` via:
//
//	        BaseImageTriggerArgs{...}
//
//	or:
//
//	        nil
type BaseImageTriggerPtrInput interface {
	pulumi.Input

	ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput
	ToBaseImageTriggerPtrOutputWithContext(context.Context) BaseImageTriggerPtrOutput
}

type baseImageTriggerPtrType BaseImageTriggerArgs

func BaseImageTriggerPtr(v *BaseImageTriggerArgs) BaseImageTriggerPtrInput {
	return (*baseImageTriggerPtrType)(v)
}

func (*baseImageTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseImageTrigger)(nil)).Elem()
}

func (i *baseImageTriggerPtrType) ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput {
	return i.ToBaseImageTriggerPtrOutputWithContext(context.Background())
}

func (i *baseImageTriggerPtrType) ToBaseImageTriggerPtrOutputWithContext(ctx context.Context) BaseImageTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageTriggerPtrOutput)
}

// The trigger based on base image dependency.
type BaseImageTriggerOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageTrigger)(nil)).Elem()
}

func (o BaseImageTriggerOutput) ToBaseImageTriggerOutput() BaseImageTriggerOutput {
	return o
}

func (o BaseImageTriggerOutput) ToBaseImageTriggerOutputWithContext(ctx context.Context) BaseImageTriggerOutput {
	return o
}

func (o BaseImageTriggerOutput) ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput {
	return o.ToBaseImageTriggerPtrOutputWithContext(context.Background())
}

func (o BaseImageTriggerOutput) ToBaseImageTriggerPtrOutputWithContext(ctx context.Context) BaseImageTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BaseImageTrigger) *BaseImageTrigger {
		return &v
	}).(BaseImageTriggerPtrOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o BaseImageTriggerOutput) BaseImageTriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v BaseImageTrigger) string { return v.BaseImageTriggerType }).(pulumi.StringOutput)
}

// The name of the trigger.
func (o BaseImageTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BaseImageTrigger) string { return v.Name }).(pulumi.StringOutput)
}

// The current status of trigger.
func (o BaseImageTriggerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTrigger) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The endpoint URL for receiving update triggers.
func (o BaseImageTriggerOutput) UpdateTriggerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTrigger) *string { return v.UpdateTriggerEndpoint }).(pulumi.StringPtrOutput)
}

// Type of Payload body for Base image update triggers.
func (o BaseImageTriggerOutput) UpdateTriggerPayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTrigger) *string { return v.UpdateTriggerPayloadType }).(pulumi.StringPtrOutput)
}

type BaseImageTriggerPtrOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseImageTrigger)(nil)).Elem()
}

func (o BaseImageTriggerPtrOutput) ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput {
	return o
}

func (o BaseImageTriggerPtrOutput) ToBaseImageTriggerPtrOutputWithContext(ctx context.Context) BaseImageTriggerPtrOutput {
	return o
}

func (o BaseImageTriggerPtrOutput) Elem() BaseImageTriggerOutput {
	return o.ApplyT(func(v *BaseImageTrigger) BaseImageTrigger {
		if v != nil {
			return *v
		}
		var ret BaseImageTrigger
		return ret
	}).(BaseImageTriggerOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o BaseImageTriggerPtrOutput) BaseImageTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.BaseImageTriggerType
	}).(pulumi.StringPtrOutput)
}

// The name of the trigger.
func (o BaseImageTriggerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The current status of trigger.
func (o BaseImageTriggerPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The endpoint URL for receiving update triggers.
func (o BaseImageTriggerPtrOutput) UpdateTriggerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerEndpoint
	}).(pulumi.StringPtrOutput)
}

// Type of Payload body for Base image update triggers.
func (o BaseImageTriggerPtrOutput) UpdateTriggerPayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerPayloadType
	}).(pulumi.StringPtrOutput)
}

// The trigger based on base image dependency.
type BaseImageTriggerResponse struct {
	// The type of the auto trigger for base image dependency updates.
	BaseImageTriggerType string `pulumi:"baseImageTriggerType"`
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
	// The endpoint URL for receiving update triggers.
	UpdateTriggerEndpoint *string `pulumi:"updateTriggerEndpoint"`
	// Type of Payload body for Base image update triggers.
	UpdateTriggerPayloadType *string `pulumi:"updateTriggerPayloadType"`
}

// Defaults sets the appropriate defaults for BaseImageTriggerResponse
func (val *BaseImageTriggerResponse) Defaults() *BaseImageTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// The trigger based on base image dependency.
type BaseImageTriggerResponseOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageTriggerResponse)(nil)).Elem()
}

func (o BaseImageTriggerResponseOutput) ToBaseImageTriggerResponseOutput() BaseImageTriggerResponseOutput {
	return o
}

func (o BaseImageTriggerResponseOutput) ToBaseImageTriggerResponseOutputWithContext(ctx context.Context) BaseImageTriggerResponseOutput {
	return o
}

// The type of the auto trigger for base image dependency updates.
func (o BaseImageTriggerResponseOutput) BaseImageTriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) string { return v.BaseImageTriggerType }).(pulumi.StringOutput)
}

// The name of the trigger.
func (o BaseImageTriggerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The current status of trigger.
func (o BaseImageTriggerResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The endpoint URL for receiving update triggers.
func (o BaseImageTriggerResponseOutput) UpdateTriggerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) *string { return v.UpdateTriggerEndpoint }).(pulumi.StringPtrOutput)
}

// Type of Payload body for Base image update triggers.
func (o BaseImageTriggerResponseOutput) UpdateTriggerPayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) *string { return v.UpdateTriggerPayloadType }).(pulumi.StringPtrOutput)
}

type BaseImageTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseImageTriggerResponse)(nil)).Elem()
}

func (o BaseImageTriggerResponsePtrOutput) ToBaseImageTriggerResponsePtrOutput() BaseImageTriggerResponsePtrOutput {
	return o
}

func (o BaseImageTriggerResponsePtrOutput) ToBaseImageTriggerResponsePtrOutputWithContext(ctx context.Context) BaseImageTriggerResponsePtrOutput {
	return o
}

func (o BaseImageTriggerResponsePtrOutput) Elem() BaseImageTriggerResponseOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) BaseImageTriggerResponse {
		if v != nil {
			return *v
		}
		var ret BaseImageTriggerResponse
		return ret
	}).(BaseImageTriggerResponseOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o BaseImageTriggerResponsePtrOutput) BaseImageTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BaseImageTriggerType
	}).(pulumi.StringPtrOutput)
}

// The name of the trigger.
func (o BaseImageTriggerResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The current status of trigger.
func (o BaseImageTriggerResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The endpoint URL for receiving update triggers.
func (o BaseImageTriggerResponsePtrOutput) UpdateTriggerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerEndpoint
	}).(pulumi.StringPtrOutput)
}

// Type of Payload body for Base image update triggers.
func (o BaseImageTriggerResponsePtrOutput) UpdateTriggerPayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerPayloadType
	}).(pulumi.StringPtrOutput)
}

// Properties of a build argument.
type BuildArgumentResponse struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the argument.
	Name string `pulumi:"name"`
	// The type of the argument.
	Type string `pulumi:"type"`
	// The value of the argument.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for BuildArgumentResponse
func (val *BuildArgumentResponse) Defaults() *BuildArgumentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsSecret) {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// Properties of a build argument.
type BuildArgumentResponseOutput struct{ *pulumi.OutputState }

func (BuildArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArgumentResponse)(nil)).Elem()
}

func (o BuildArgumentResponseOutput) ToBuildArgumentResponseOutput() BuildArgumentResponseOutput {
	return o
}

func (o BuildArgumentResponseOutput) ToBuildArgumentResponseOutputWithContext(ctx context.Context) BuildArgumentResponseOutput {
	return o
}

// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
func (o BuildArgumentResponseOutput) GetIsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildArgumentResponse) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the argument.
func (o BuildArgumentResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the argument.
func (o BuildArgumentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the argument.
func (o BuildArgumentResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Value }).(pulumi.StringOutput)
}

type BuildArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (BuildArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArgumentResponse)(nil)).Elem()
}

func (o BuildArgumentResponseArrayOutput) ToBuildArgumentResponseArrayOutput() BuildArgumentResponseArrayOutput {
	return o
}

func (o BuildArgumentResponseArrayOutput) ToBuildArgumentResponseArrayOutputWithContext(ctx context.Context) BuildArgumentResponseArrayOutput {
	return o
}

func (o BuildArgumentResponseArrayOutput) Index(i pulumi.IntInput) BuildArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildArgumentResponse {
		return vs[0].([]BuildArgumentResponse)[vs[1].(int)]
	}).(BuildArgumentResponseOutput)
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type Credentials struct {
	// Describes the credential parameters for accessing other custom registries. The key
	// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
	// the value of the item will be the registry credentials for accessing the registry.
	CustomRegistries map[string]CustomRegistryCredentials `pulumi:"customRegistries"`
	// Describes the credential parameters for accessing the source registry.
	SourceRegistry *SourceRegistryCredentials `pulumi:"sourceRegistry"`
}

// CredentialsInput is an input type that accepts CredentialsArgs and CredentialsOutput values.
// You can construct a concrete instance of `CredentialsInput` via:
//
//	CredentialsArgs{...}
type CredentialsInput interface {
	pulumi.Input

	ToCredentialsOutput() CredentialsOutput
	ToCredentialsOutputWithContext(context.Context) CredentialsOutput
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type CredentialsArgs struct {
	// Describes the credential parameters for accessing other custom registries. The key
	// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
	// the value of the item will be the registry credentials for accessing the registry.
	CustomRegistries CustomRegistryCredentialsMapInput `pulumi:"customRegistries"`
	// Describes the credential parameters for accessing the source registry.
	SourceRegistry SourceRegistryCredentialsPtrInput `pulumi:"sourceRegistry"`
}

func (CredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Credentials)(nil)).Elem()
}

func (i CredentialsArgs) ToCredentialsOutput() CredentialsOutput {
	return i.ToCredentialsOutputWithContext(context.Background())
}

func (i CredentialsArgs) ToCredentialsOutputWithContext(ctx context.Context) CredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsOutput)
}

func (i CredentialsArgs) ToCredentialsPtrOutput() CredentialsPtrOutput {
	return i.ToCredentialsPtrOutputWithContext(context.Background())
}

func (i CredentialsArgs) ToCredentialsPtrOutputWithContext(ctx context.Context) CredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsOutput).ToCredentialsPtrOutputWithContext(ctx)
}

// CredentialsPtrInput is an input type that accepts CredentialsArgs, CredentialsPtr and CredentialsPtrOutput values.
// You can construct a concrete instance of `CredentialsPtrInput` via:
//
//	        CredentialsArgs{...}
//
//	or:
//
//	        nil
type CredentialsPtrInput interface {
	pulumi.Input

	ToCredentialsPtrOutput() CredentialsPtrOutput
	ToCredentialsPtrOutputWithContext(context.Context) CredentialsPtrOutput
}

type credentialsPtrType CredentialsArgs

func CredentialsPtr(v *CredentialsArgs) CredentialsPtrInput {
	return (*credentialsPtrType)(v)
}

func (*credentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Credentials)(nil)).Elem()
}

func (i *credentialsPtrType) ToCredentialsPtrOutput() CredentialsPtrOutput {
	return i.ToCredentialsPtrOutputWithContext(context.Background())
}

func (i *credentialsPtrType) ToCredentialsPtrOutputWithContext(ctx context.Context) CredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsPtrOutput)
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type CredentialsOutput struct{ *pulumi.OutputState }

func (CredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Credentials)(nil)).Elem()
}

func (o CredentialsOutput) ToCredentialsOutput() CredentialsOutput {
	return o
}

func (o CredentialsOutput) ToCredentialsOutputWithContext(ctx context.Context) CredentialsOutput {
	return o
}

func (o CredentialsOutput) ToCredentialsPtrOutput() CredentialsPtrOutput {
	return o.ToCredentialsPtrOutputWithContext(context.Background())
}

func (o CredentialsOutput) ToCredentialsPtrOutputWithContext(ctx context.Context) CredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Credentials) *Credentials {
		return &v
	}).(CredentialsPtrOutput)
}

// Describes the credential parameters for accessing other custom registries. The key
// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
// the value of the item will be the registry credentials for accessing the registry.
func (o CredentialsOutput) CustomRegistries() CustomRegistryCredentialsMapOutput {
	return o.ApplyT(func(v Credentials) map[string]CustomRegistryCredentials { return v.CustomRegistries }).(CustomRegistryCredentialsMapOutput)
}

// Describes the credential parameters for accessing the source registry.
func (o CredentialsOutput) SourceRegistry() SourceRegistryCredentialsPtrOutput {
	return o.ApplyT(func(v Credentials) *SourceRegistryCredentials { return v.SourceRegistry }).(SourceRegistryCredentialsPtrOutput)
}

type CredentialsPtrOutput struct{ *pulumi.OutputState }

func (CredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Credentials)(nil)).Elem()
}

func (o CredentialsPtrOutput) ToCredentialsPtrOutput() CredentialsPtrOutput {
	return o
}

func (o CredentialsPtrOutput) ToCredentialsPtrOutputWithContext(ctx context.Context) CredentialsPtrOutput {
	return o
}

func (o CredentialsPtrOutput) Elem() CredentialsOutput {
	return o.ApplyT(func(v *Credentials) Credentials {
		if v != nil {
			return *v
		}
		var ret Credentials
		return ret
	}).(CredentialsOutput)
}

// Describes the credential parameters for accessing other custom registries. The key
// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
// the value of the item will be the registry credentials for accessing the registry.
func (o CredentialsPtrOutput) CustomRegistries() CustomRegistryCredentialsMapOutput {
	return o.ApplyT(func(v *Credentials) map[string]CustomRegistryCredentials {
		if v == nil {
			return nil
		}
		return v.CustomRegistries
	}).(CustomRegistryCredentialsMapOutput)
}

// Describes the credential parameters for accessing the source registry.
func (o CredentialsPtrOutput) SourceRegistry() SourceRegistryCredentialsPtrOutput {
	return o.ApplyT(func(v *Credentials) *SourceRegistryCredentials {
		if v == nil {
			return nil
		}
		return v.SourceRegistry
	}).(SourceRegistryCredentialsPtrOutput)
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type CredentialsResponse struct {
	// Describes the credential parameters for accessing other custom registries. The key
	// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
	// the value of the item will be the registry credentials for accessing the registry.
	CustomRegistries map[string]CustomRegistryCredentialsResponse `pulumi:"customRegistries"`
	// Describes the credential parameters for accessing the source registry.
	SourceRegistry *SourceRegistryCredentialsResponse `pulumi:"sourceRegistry"`
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type CredentialsResponseOutput struct{ *pulumi.OutputState }

func (CredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CredentialsResponse)(nil)).Elem()
}

func (o CredentialsResponseOutput) ToCredentialsResponseOutput() CredentialsResponseOutput {
	return o
}

func (o CredentialsResponseOutput) ToCredentialsResponseOutputWithContext(ctx context.Context) CredentialsResponseOutput {
	return o
}

// Describes the credential parameters for accessing other custom registries. The key
// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
// the value of the item will be the registry credentials for accessing the registry.
func (o CredentialsResponseOutput) CustomRegistries() CustomRegistryCredentialsResponseMapOutput {
	return o.ApplyT(func(v CredentialsResponse) map[string]CustomRegistryCredentialsResponse { return v.CustomRegistries }).(CustomRegistryCredentialsResponseMapOutput)
}

// Describes the credential parameters for accessing the source registry.
func (o CredentialsResponseOutput) SourceRegistry() SourceRegistryCredentialsResponsePtrOutput {
	return o.ApplyT(func(v CredentialsResponse) *SourceRegistryCredentialsResponse { return v.SourceRegistry }).(SourceRegistryCredentialsResponsePtrOutput)
}

type CredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (CredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialsResponse)(nil)).Elem()
}

func (o CredentialsResponsePtrOutput) ToCredentialsResponsePtrOutput() CredentialsResponsePtrOutput {
	return o
}

func (o CredentialsResponsePtrOutput) ToCredentialsResponsePtrOutputWithContext(ctx context.Context) CredentialsResponsePtrOutput {
	return o
}

func (o CredentialsResponsePtrOutput) Elem() CredentialsResponseOutput {
	return o.ApplyT(func(v *CredentialsResponse) CredentialsResponse {
		if v != nil {
			return *v
		}
		var ret CredentialsResponse
		return ret
	}).(CredentialsResponseOutput)
}

// Describes the credential parameters for accessing other custom registries. The key
// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
// the value of the item will be the registry credentials for accessing the registry.
func (o CredentialsResponsePtrOutput) CustomRegistries() CustomRegistryCredentialsResponseMapOutput {
	return o.ApplyT(func(v *CredentialsResponse) map[string]CustomRegistryCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.CustomRegistries
	}).(CustomRegistryCredentialsResponseMapOutput)
}

// Describes the credential parameters for accessing the source registry.
func (o CredentialsResponsePtrOutput) SourceRegistry() SourceRegistryCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *CredentialsResponse) *SourceRegistryCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.SourceRegistry
	}).(SourceRegistryCredentialsResponsePtrOutput)
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentials struct {
	// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
	// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
	// the case of a system-assigned identity, the Client ID will be determined by the runner. This
	// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
	// source of authentication used for accessing the registry.
	Identity *string `pulumi:"identity"`
	// The password for logging into the custom registry. The password is a secret
	// object that allows multiple ways of providing the value for it.
	Password *SecretObject `pulumi:"password"`
	// The username for logging into the custom registry.
	UserName *SecretObject `pulumi:"userName"`
}

// CustomRegistryCredentialsInput is an input type that accepts CustomRegistryCredentialsArgs and CustomRegistryCredentialsOutput values.
// You can construct a concrete instance of `CustomRegistryCredentialsInput` via:
//
//	CustomRegistryCredentialsArgs{...}
type CustomRegistryCredentialsInput interface {
	pulumi.Input

	ToCustomRegistryCredentialsOutput() CustomRegistryCredentialsOutput
	ToCustomRegistryCredentialsOutputWithContext(context.Context) CustomRegistryCredentialsOutput
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentialsArgs struct {
	// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
	// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
	// the case of a system-assigned identity, the Client ID will be determined by the runner. This
	// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
	// source of authentication used for accessing the registry.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// The password for logging into the custom registry. The password is a secret
	// object that allows multiple ways of providing the value for it.
	Password SecretObjectPtrInput `pulumi:"password"`
	// The username for logging into the custom registry.
	UserName SecretObjectPtrInput `pulumi:"userName"`
}

func (CustomRegistryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRegistryCredentials)(nil)).Elem()
}

func (i CustomRegistryCredentialsArgs) ToCustomRegistryCredentialsOutput() CustomRegistryCredentialsOutput {
	return i.ToCustomRegistryCredentialsOutputWithContext(context.Background())
}

func (i CustomRegistryCredentialsArgs) ToCustomRegistryCredentialsOutputWithContext(ctx context.Context) CustomRegistryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRegistryCredentialsOutput)
}

// CustomRegistryCredentialsMapInput is an input type that accepts CustomRegistryCredentialsMap and CustomRegistryCredentialsMapOutput values.
// You can construct a concrete instance of `CustomRegistryCredentialsMapInput` via:
//
//	CustomRegistryCredentialsMap{ "key": CustomRegistryCredentialsArgs{...} }
type CustomRegistryCredentialsMapInput interface {
	pulumi.Input

	ToCustomRegistryCredentialsMapOutput() CustomRegistryCredentialsMapOutput
	ToCustomRegistryCredentialsMapOutputWithContext(context.Context) CustomRegistryCredentialsMapOutput
}

type CustomRegistryCredentialsMap map[string]CustomRegistryCredentialsInput

func (CustomRegistryCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomRegistryCredentials)(nil)).Elem()
}

func (i CustomRegistryCredentialsMap) ToCustomRegistryCredentialsMapOutput() CustomRegistryCredentialsMapOutput {
	return i.ToCustomRegistryCredentialsMapOutputWithContext(context.Background())
}

func (i CustomRegistryCredentialsMap) ToCustomRegistryCredentialsMapOutputWithContext(ctx context.Context) CustomRegistryCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRegistryCredentialsMapOutput)
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentialsOutput struct{ *pulumi.OutputState }

func (CustomRegistryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRegistryCredentials)(nil)).Elem()
}

func (o CustomRegistryCredentialsOutput) ToCustomRegistryCredentialsOutput() CustomRegistryCredentialsOutput {
	return o
}

func (o CustomRegistryCredentialsOutput) ToCustomRegistryCredentialsOutputWithContext(ctx context.Context) CustomRegistryCredentialsOutput {
	return o
}

// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
// the case of a system-assigned identity, the Client ID will be determined by the runner. This
// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
// source of authentication used for accessing the registry.
func (o CustomRegistryCredentialsOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentials) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The password for logging into the custom registry. The password is a secret
// object that allows multiple ways of providing the value for it.
func (o CustomRegistryCredentialsOutput) Password() SecretObjectPtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentials) *SecretObject { return v.Password }).(SecretObjectPtrOutput)
}

// The username for logging into the custom registry.
func (o CustomRegistryCredentialsOutput) UserName() SecretObjectPtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentials) *SecretObject { return v.UserName }).(SecretObjectPtrOutput)
}

type CustomRegistryCredentialsMapOutput struct{ *pulumi.OutputState }

func (CustomRegistryCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomRegistryCredentials)(nil)).Elem()
}

func (o CustomRegistryCredentialsMapOutput) ToCustomRegistryCredentialsMapOutput() CustomRegistryCredentialsMapOutput {
	return o
}

func (o CustomRegistryCredentialsMapOutput) ToCustomRegistryCredentialsMapOutputWithContext(ctx context.Context) CustomRegistryCredentialsMapOutput {
	return o
}

func (o CustomRegistryCredentialsMapOutput) MapIndex(k pulumi.StringInput) CustomRegistryCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomRegistryCredentials {
		return vs[0].(map[string]CustomRegistryCredentials)[vs[1].(string)]
	}).(CustomRegistryCredentialsOutput)
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentialsResponse struct {
	// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
	// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
	// the case of a system-assigned identity, the Client ID will be determined by the runner. This
	// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
	// source of authentication used for accessing the registry.
	Identity *string `pulumi:"identity"`
	// The password for logging into the custom registry. The password is a secret
	// object that allows multiple ways of providing the value for it.
	Password *SecretObjectResponse `pulumi:"password"`
	// The username for logging into the custom registry.
	UserName *SecretObjectResponse `pulumi:"userName"`
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentialsResponseOutput struct{ *pulumi.OutputState }

func (CustomRegistryCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRegistryCredentialsResponse)(nil)).Elem()
}

func (o CustomRegistryCredentialsResponseOutput) ToCustomRegistryCredentialsResponseOutput() CustomRegistryCredentialsResponseOutput {
	return o
}

func (o CustomRegistryCredentialsResponseOutput) ToCustomRegistryCredentialsResponseOutputWithContext(ctx context.Context) CustomRegistryCredentialsResponseOutput {
	return o
}

// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
// the case of a system-assigned identity, the Client ID will be determined by the runner. This
// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
// source of authentication used for accessing the registry.
func (o CustomRegistryCredentialsResponseOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentialsResponse) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The password for logging into the custom registry. The password is a secret
// object that allows multiple ways of providing the value for it.
func (o CustomRegistryCredentialsResponseOutput) Password() SecretObjectResponsePtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentialsResponse) *SecretObjectResponse { return v.Password }).(SecretObjectResponsePtrOutput)
}

// The username for logging into the custom registry.
func (o CustomRegistryCredentialsResponseOutput) UserName() SecretObjectResponsePtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentialsResponse) *SecretObjectResponse { return v.UserName }).(SecretObjectResponsePtrOutput)
}

type CustomRegistryCredentialsResponseMapOutput struct{ *pulumi.OutputState }

func (CustomRegistryCredentialsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomRegistryCredentialsResponse)(nil)).Elem()
}

func (o CustomRegistryCredentialsResponseMapOutput) ToCustomRegistryCredentialsResponseMapOutput() CustomRegistryCredentialsResponseMapOutput {
	return o
}

func (o CustomRegistryCredentialsResponseMapOutput) ToCustomRegistryCredentialsResponseMapOutputWithContext(ctx context.Context) CustomRegistryCredentialsResponseMapOutput {
	return o
}

func (o CustomRegistryCredentialsResponseMapOutput) MapIndex(k pulumi.StringInput) CustomRegistryCredentialsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomRegistryCredentialsResponse {
		return vs[0].(map[string]CustomRegistryCredentialsResponse)[vs[1].(string)]
	}).(CustomRegistryCredentialsResponseOutput)
}

// The parameters for a docker quick build.
type DockerBuildRequest struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The collection of override arguments to be used when executing the run.
	Arguments []Argument `pulumi:"arguments"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials `pulumi:"credentials"`
	// The Docker file path relative to the source location.
	DockerFilePath string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The platform properties against which the run has to happen.
	Platform PlatformProperties `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'DockerBuildRequest'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildRequest
func (val *DockerBuildRequest) Defaults() *DockerBuildRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if isZero(tmp.IsPushEnabled) {
		isPushEnabled_ := true
		tmp.IsPushEnabled = &isPushEnabled_
	}
	if isZero(tmp.NoCache) {
		noCache_ := false
		tmp.NoCache = &noCache_
	}
	if isZero(tmp.Timeout) {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The parameters for a docker quick build.
type DockerBuildRequestResponse struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentPropertiesResponse `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The collection of override arguments to be used when executing the run.
	Arguments []ArgumentResponse `pulumi:"arguments"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *CredentialsResponse `pulumi:"credentials"`
	// The Docker file path relative to the source location.
	DockerFilePath string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesResponse `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'DockerBuildRequest'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildRequestResponse
func (val *DockerBuildRequestResponse) Defaults() *DockerBuildRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if isZero(tmp.IsPushEnabled) {
		isPushEnabled_ := true
		tmp.IsPushEnabled = &isPushEnabled_
	}
	if isZero(tmp.NoCache) {
		noCache_ := false
		tmp.NoCache = &noCache_
	}
	if isZero(tmp.Timeout) {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The Docker build step.
type DockerBuildStep struct {
	// The collection of override arguments to be used when executing this build step.
	Arguments []Argument `pulumi:"arguments"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// The Docker file path relative to the source context.
	DockerFilePath string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildStep
func (val *DockerBuildStep) Defaults() *DockerBuildStep {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsPushEnabled) {
		isPushEnabled_ := true
		tmp.IsPushEnabled = &isPushEnabled_
	}
	if isZero(tmp.NoCache) {
		noCache_ := false
		tmp.NoCache = &noCache_
	}
	return &tmp
}

// The Docker build step.
type DockerBuildStepResponse struct {
	// The collection of override arguments to be used when executing this build step.
	Arguments []ArgumentResponse `pulumi:"arguments"`
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyResponse `pulumi:"baseImageDependencies"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// The Docker file path relative to the source context.
	DockerFilePath string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildStepResponse
func (val *DockerBuildStepResponse) Defaults() *DockerBuildStepResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsPushEnabled) {
		isPushEnabled_ := true
		tmp.IsPushEnabled = &isPushEnabled_
	}
	if isZero(tmp.NoCache) {
		noCache_ := false
		tmp.NoCache = &noCache_
	}
	return &tmp
}

// The parameters for a quick task run request.
type EncodedTaskRunRequest struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials `pulumi:"credentials"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent string `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string `pulumi:"encodedValuesContent"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformProperties `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'EncodedTaskRunRequest'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValue `pulumi:"values"`
}

// Defaults sets the appropriate defaults for EncodedTaskRunRequest
func (val *EncodedTaskRunRequest) Defaults() *EncodedTaskRunRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if isZero(tmp.Timeout) {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The parameters for a quick task run request.
type EncodedTaskRunRequestResponse struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentPropertiesResponse `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *CredentialsResponse `pulumi:"credentials"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent string `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string `pulumi:"encodedValuesContent"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesResponse `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'EncodedTaskRunRequest'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValueResponse `pulumi:"values"`
}

// Defaults sets the appropriate defaults for EncodedTaskRunRequestResponse
func (val *EncodedTaskRunRequestResponse) Defaults() *EncodedTaskRunRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if isZero(tmp.Timeout) {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The properties of a encoded task step.
type EncodedTaskStep struct {
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent string `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string `pulumi:"encodedValuesContent"`
	// The type of the step.
	// Expected value is 'EncodedTask'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValue `pulumi:"values"`
}

// The properties of a encoded task step.
type EncodedTaskStepResponse struct {
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyResponse `pulumi:"baseImageDependencies"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent string `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string `pulumi:"encodedValuesContent"`
	// The type of the step.
	// Expected value is 'EncodedTask'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValueResponse `pulumi:"values"`
}

// The content of the event request message.
type EventContentResponse struct {
	// The action that encompasses the provided event.
	Action *string `pulumi:"action"`
	// The agent that initiated the event. For most situations, this could be from the authorization context of the request.
	Actor *ActorResponse `pulumi:"actor"`
	// The event ID.
	Id *string `pulumi:"id"`
	// The request that generated the event.
	Request *RequestResponse `pulumi:"request"`
	// The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
	Source *SourceResponse `pulumi:"source"`
	// The target of the event.
	Target *TargetResponse `pulumi:"target"`
	// The time at which the event occurred.
	Timestamp *string `pulumi:"timestamp"`
}

// The content of the event request message.
type EventContentResponseOutput struct{ *pulumi.OutputState }

func (EventContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventContentResponse)(nil)).Elem()
}

func (o EventContentResponseOutput) ToEventContentResponseOutput() EventContentResponseOutput {
	return o
}

func (o EventContentResponseOutput) ToEventContentResponseOutputWithContext(ctx context.Context) EventContentResponseOutput {
	return o
}

// The action that encompasses the provided event.
func (o EventContentResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventContentResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The agent that initiated the event. For most situations, this could be from the authorization context of the request.
func (o EventContentResponseOutput) Actor() ActorResponsePtrOutput {
	return o.ApplyT(func(v EventContentResponse) *ActorResponse { return v.Actor }).(ActorResponsePtrOutput)
}

// The event ID.
func (o EventContentResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventContentResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The request that generated the event.
func (o EventContentResponseOutput) Request() RequestResponsePtrOutput {
	return o.ApplyT(func(v EventContentResponse) *RequestResponse { return v.Request }).(RequestResponsePtrOutput)
}

// The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
func (o EventContentResponseOutput) Source() SourceResponsePtrOutput {
	return o.ApplyT(func(v EventContentResponse) *SourceResponse { return v.Source }).(SourceResponsePtrOutput)
}

// The target of the event.
func (o EventContentResponseOutput) Target() TargetResponsePtrOutput {
	return o.ApplyT(func(v EventContentResponse) *TargetResponse { return v.Target }).(TargetResponsePtrOutput)
}

// The time at which the event occurred.
func (o EventContentResponseOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventContentResponse) *string { return v.Timestamp }).(pulumi.StringPtrOutput)
}

type EventContentResponsePtrOutput struct{ *pulumi.OutputState }

func (EventContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventContentResponse)(nil)).Elem()
}

func (o EventContentResponsePtrOutput) ToEventContentResponsePtrOutput() EventContentResponsePtrOutput {
	return o
}

func (o EventContentResponsePtrOutput) ToEventContentResponsePtrOutputWithContext(ctx context.Context) EventContentResponsePtrOutput {
	return o
}

func (o EventContentResponsePtrOutput) Elem() EventContentResponseOutput {
	return o.ApplyT(func(v *EventContentResponse) EventContentResponse {
		if v != nil {
			return *v
		}
		var ret EventContentResponse
		return ret
	}).(EventContentResponseOutput)
}

// The action that encompasses the provided event.
func (o EventContentResponsePtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventContentResponse) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// The agent that initiated the event. For most situations, this could be from the authorization context of the request.
func (o EventContentResponsePtrOutput) Actor() ActorResponsePtrOutput {
	return o.ApplyT(func(v *EventContentResponse) *ActorResponse {
		if v == nil {
			return nil
		}
		return v.Actor
	}).(ActorResponsePtrOutput)
}

// The event ID.
func (o EventContentResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventContentResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The request that generated the event.
func (o EventContentResponsePtrOutput) Request() RequestResponsePtrOutput {
	return o.ApplyT(func(v *EventContentResponse) *RequestResponse {
		if v == nil {
			return nil
		}
		return v.Request
	}).(RequestResponsePtrOutput)
}

// The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
func (o EventContentResponsePtrOutput) Source() SourceResponsePtrOutput {
	return o.ApplyT(func(v *EventContentResponse) *SourceResponse {
		if v == nil {
			return nil
		}
		return v.Source
	}).(SourceResponsePtrOutput)
}

// The target of the event.
func (o EventContentResponsePtrOutput) Target() TargetResponsePtrOutput {
	return o.ApplyT(func(v *EventContentResponse) *TargetResponse {
		if v == nil {
			return nil
		}
		return v.Target
	}).(TargetResponsePtrOutput)
}

// The time at which the event occurred.
func (o EventContentResponsePtrOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventContentResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timestamp
	}).(pulumi.StringPtrOutput)
}

// The event request message sent to the service URI.
type EventRequestMessageResponse struct {
	// The content of the event request message.
	Content *EventContentResponse `pulumi:"content"`
	// The headers of the event request message.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method used to send the event request message.
	Method *string `pulumi:"method"`
	// The URI used to send the event request message.
	RequestUri *string `pulumi:"requestUri"`
	// The HTTP message version.
	Version *string `pulumi:"version"`
}

// The event request message sent to the service URI.
type EventRequestMessageResponseOutput struct{ *pulumi.OutputState }

func (EventRequestMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRequestMessageResponse)(nil)).Elem()
}

func (o EventRequestMessageResponseOutput) ToEventRequestMessageResponseOutput() EventRequestMessageResponseOutput {
	return o
}

func (o EventRequestMessageResponseOutput) ToEventRequestMessageResponseOutputWithContext(ctx context.Context) EventRequestMessageResponseOutput {
	return o
}

// The content of the event request message.
func (o EventRequestMessageResponseOutput) Content() EventContentResponsePtrOutput {
	return o.ApplyT(func(v EventRequestMessageResponse) *EventContentResponse { return v.Content }).(EventContentResponsePtrOutput)
}

// The headers of the event request message.
func (o EventRequestMessageResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v EventRequestMessageResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method used to send the event request message.
func (o EventRequestMessageResponseOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventRequestMessageResponse) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The URI used to send the event request message.
func (o EventRequestMessageResponseOutput) RequestUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventRequestMessageResponse) *string { return v.RequestUri }).(pulumi.StringPtrOutput)
}

// The HTTP message version.
func (o EventRequestMessageResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventRequestMessageResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EventRequestMessageResponsePtrOutput struct{ *pulumi.OutputState }

func (EventRequestMessageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRequestMessageResponse)(nil)).Elem()
}

func (o EventRequestMessageResponsePtrOutput) ToEventRequestMessageResponsePtrOutput() EventRequestMessageResponsePtrOutput {
	return o
}

func (o EventRequestMessageResponsePtrOutput) ToEventRequestMessageResponsePtrOutputWithContext(ctx context.Context) EventRequestMessageResponsePtrOutput {
	return o
}

func (o EventRequestMessageResponsePtrOutput) Elem() EventRequestMessageResponseOutput {
	return o.ApplyT(func(v *EventRequestMessageResponse) EventRequestMessageResponse {
		if v != nil {
			return *v
		}
		var ret EventRequestMessageResponse
		return ret
	}).(EventRequestMessageResponseOutput)
}

// The content of the event request message.
func (o EventRequestMessageResponsePtrOutput) Content() EventContentResponsePtrOutput {
	return o.ApplyT(func(v *EventRequestMessageResponse) *EventContentResponse {
		if v == nil {
			return nil
		}
		return v.Content
	}).(EventContentResponsePtrOutput)
}

// The headers of the event request message.
func (o EventRequestMessageResponsePtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventRequestMessageResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The HTTP method used to send the event request message.
func (o EventRequestMessageResponsePtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRequestMessageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The URI used to send the event request message.
func (o EventRequestMessageResponsePtrOutput) RequestUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRequestMessageResponse) *string {
		if v == nil {
			return nil
		}
		return v.RequestUri
	}).(pulumi.StringPtrOutput)
}

// The HTTP message version.
func (o EventRequestMessageResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRequestMessageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The event for a webhook.
type EventResponse struct {
	// The event request message sent to the service URI.
	EventRequestMessage *EventRequestMessageResponse `pulumi:"eventRequestMessage"`
	// The event response message received from the service URI.
	EventResponseMessage *EventResponseMessageResponse `pulumi:"eventResponseMessage"`
	// The event ID.
	Id *string `pulumi:"id"`
}

// The event for a webhook.
type EventResponseOutput struct{ *pulumi.OutputState }

func (EventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventResponse)(nil)).Elem()
}

func (o EventResponseOutput) ToEventResponseOutput() EventResponseOutput {
	return o
}

func (o EventResponseOutput) ToEventResponseOutputWithContext(ctx context.Context) EventResponseOutput {
	return o
}

// The event request message sent to the service URI.
func (o EventResponseOutput) EventRequestMessage() EventRequestMessageResponsePtrOutput {
	return o.ApplyT(func(v EventResponse) *EventRequestMessageResponse { return v.EventRequestMessage }).(EventRequestMessageResponsePtrOutput)
}

// The event response message received from the service URI.
func (o EventResponseOutput) EventResponseMessage() EventResponseMessageResponsePtrOutput {
	return o.ApplyT(func(v EventResponse) *EventResponseMessageResponse { return v.EventResponseMessage }).(EventResponseMessageResponsePtrOutput)
}

// The event ID.
func (o EventResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type EventResponseArrayOutput struct{ *pulumi.OutputState }

func (EventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventResponse)(nil)).Elem()
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutput() EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutputWithContext(ctx context.Context) EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) Index(i pulumi.IntInput) EventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventResponse {
		return vs[0].([]EventResponse)[vs[1].(int)]
	}).(EventResponseOutput)
}

// The event response message received from the service URI.
type EventResponseMessageResponse struct {
	// The content of the event response message.
	Content *string `pulumi:"content"`
	// The headers of the event response message.
	Headers map[string]string `pulumi:"headers"`
	// The reason phrase of the event response message.
	ReasonPhrase *string `pulumi:"reasonPhrase"`
	// The status code of the event response message.
	StatusCode *string `pulumi:"statusCode"`
	// The HTTP message version.
	Version *string `pulumi:"version"`
}

// The event response message received from the service URI.
type EventResponseMessageResponseOutput struct{ *pulumi.OutputState }

func (EventResponseMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventResponseMessageResponse)(nil)).Elem()
}

func (o EventResponseMessageResponseOutput) ToEventResponseMessageResponseOutput() EventResponseMessageResponseOutput {
	return o
}

func (o EventResponseMessageResponseOutput) ToEventResponseMessageResponseOutputWithContext(ctx context.Context) EventResponseMessageResponseOutput {
	return o
}

// The content of the event response message.
func (o EventResponseMessageResponseOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponseMessageResponse) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The headers of the event response message.
func (o EventResponseMessageResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v EventResponseMessageResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The reason phrase of the event response message.
func (o EventResponseMessageResponseOutput) ReasonPhrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponseMessageResponse) *string { return v.ReasonPhrase }).(pulumi.StringPtrOutput)
}

// The status code of the event response message.
func (o EventResponseMessageResponseOutput) StatusCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponseMessageResponse) *string { return v.StatusCode }).(pulumi.StringPtrOutput)
}

// The HTTP message version.
func (o EventResponseMessageResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponseMessageResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EventResponseMessageResponsePtrOutput struct{ *pulumi.OutputState }

func (EventResponseMessageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventResponseMessageResponse)(nil)).Elem()
}

func (o EventResponseMessageResponsePtrOutput) ToEventResponseMessageResponsePtrOutput() EventResponseMessageResponsePtrOutput {
	return o
}

func (o EventResponseMessageResponsePtrOutput) ToEventResponseMessageResponsePtrOutputWithContext(ctx context.Context) EventResponseMessageResponsePtrOutput {
	return o
}

func (o EventResponseMessageResponsePtrOutput) Elem() EventResponseMessageResponseOutput {
	return o.ApplyT(func(v *EventResponseMessageResponse) EventResponseMessageResponse {
		if v != nil {
			return *v
		}
		var ret EventResponseMessageResponse
		return ret
	}).(EventResponseMessageResponseOutput)
}

// The content of the event response message.
func (o EventResponseMessageResponsePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventResponseMessageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// The headers of the event response message.
func (o EventResponseMessageResponsePtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventResponseMessageResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The reason phrase of the event response message.
func (o EventResponseMessageResponsePtrOutput) ReasonPhrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventResponseMessageResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReasonPhrase
	}).(pulumi.StringPtrOutput)
}

// The status code of the event response message.
func (o EventResponseMessageResponsePtrOutput) StatusCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventResponseMessageResponse) *string {
		if v == nil {
			return nil
		}
		return v.StatusCode
	}).(pulumi.StringPtrOutput)
}

// The HTTP message version.
func (o EventResponseMessageResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventResponseMessageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The properties of the export pipeline target.
type ExportPipelineTargetProperties struct {
	// They key vault secret uri to obtain the target storage SAS token.
	KeyVaultUri string `pulumi:"keyVaultUri"`
	// The type of target for the export pipeline.
	Type *string `pulumi:"type"`
	// The target uri of the export pipeline.
	// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
	// When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
	Uri *string `pulumi:"uri"`
}

// ExportPipelineTargetPropertiesInput is an input type that accepts ExportPipelineTargetPropertiesArgs and ExportPipelineTargetPropertiesOutput values.
// You can construct a concrete instance of `ExportPipelineTargetPropertiesInput` via:
//
//	ExportPipelineTargetPropertiesArgs{...}
type ExportPipelineTargetPropertiesInput interface {
	pulumi.Input

	ToExportPipelineTargetPropertiesOutput() ExportPipelineTargetPropertiesOutput
	ToExportPipelineTargetPropertiesOutputWithContext(context.Context) ExportPipelineTargetPropertiesOutput
}

// The properties of the export pipeline target.
type ExportPipelineTargetPropertiesArgs struct {
	// They key vault secret uri to obtain the target storage SAS token.
	KeyVaultUri pulumi.StringInput `pulumi:"keyVaultUri"`
	// The type of target for the export pipeline.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The target uri of the export pipeline.
	// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
	// When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ExportPipelineTargetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPipelineTargetProperties)(nil)).Elem()
}

func (i ExportPipelineTargetPropertiesArgs) ToExportPipelineTargetPropertiesOutput() ExportPipelineTargetPropertiesOutput {
	return i.ToExportPipelineTargetPropertiesOutputWithContext(context.Background())
}

func (i ExportPipelineTargetPropertiesArgs) ToExportPipelineTargetPropertiesOutputWithContext(ctx context.Context) ExportPipelineTargetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportPipelineTargetPropertiesOutput)
}

// The properties of the export pipeline target.
type ExportPipelineTargetPropertiesOutput struct{ *pulumi.OutputState }

func (ExportPipelineTargetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPipelineTargetProperties)(nil)).Elem()
}

func (o ExportPipelineTargetPropertiesOutput) ToExportPipelineTargetPropertiesOutput() ExportPipelineTargetPropertiesOutput {
	return o
}

func (o ExportPipelineTargetPropertiesOutput) ToExportPipelineTargetPropertiesOutputWithContext(ctx context.Context) ExportPipelineTargetPropertiesOutput {
	return o
}

// They key vault secret uri to obtain the target storage SAS token.
func (o ExportPipelineTargetPropertiesOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v ExportPipelineTargetProperties) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

// The type of target for the export pipeline.
func (o ExportPipelineTargetPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPipelineTargetProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The target uri of the export pipeline.
// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
// When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
func (o ExportPipelineTargetPropertiesOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPipelineTargetProperties) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The properties of the export pipeline target.
type ExportPipelineTargetPropertiesResponse struct {
	// They key vault secret uri to obtain the target storage SAS token.
	KeyVaultUri string `pulumi:"keyVaultUri"`
	// The type of target for the export pipeline.
	Type *string `pulumi:"type"`
	// The target uri of the export pipeline.
	// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
	// When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
	Uri *string `pulumi:"uri"`
}

// The properties of the export pipeline target.
type ExportPipelineTargetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ExportPipelineTargetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPipelineTargetPropertiesResponse)(nil)).Elem()
}

func (o ExportPipelineTargetPropertiesResponseOutput) ToExportPipelineTargetPropertiesResponseOutput() ExportPipelineTargetPropertiesResponseOutput {
	return o
}

func (o ExportPipelineTargetPropertiesResponseOutput) ToExportPipelineTargetPropertiesResponseOutputWithContext(ctx context.Context) ExportPipelineTargetPropertiesResponseOutput {
	return o
}

// They key vault secret uri to obtain the target storage SAS token.
func (o ExportPipelineTargetPropertiesResponseOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v ExportPipelineTargetPropertiesResponse) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

// The type of target for the export pipeline.
func (o ExportPipelineTargetPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPipelineTargetPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The target uri of the export pipeline.
// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
// When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
func (o ExportPipelineTargetPropertiesResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPipelineTargetPropertiesResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ExportPipelineTargetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportPipelineTargetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportPipelineTargetPropertiesResponse)(nil)).Elem()
}

func (o ExportPipelineTargetPropertiesResponsePtrOutput) ToExportPipelineTargetPropertiesResponsePtrOutput() ExportPipelineTargetPropertiesResponsePtrOutput {
	return o
}

func (o ExportPipelineTargetPropertiesResponsePtrOutput) ToExportPipelineTargetPropertiesResponsePtrOutputWithContext(ctx context.Context) ExportPipelineTargetPropertiesResponsePtrOutput {
	return o
}

func (o ExportPipelineTargetPropertiesResponsePtrOutput) Elem() ExportPipelineTargetPropertiesResponseOutput {
	return o.ApplyT(func(v *ExportPipelineTargetPropertiesResponse) ExportPipelineTargetPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ExportPipelineTargetPropertiesResponse
		return ret
	}).(ExportPipelineTargetPropertiesResponseOutput)
}

// They key vault secret uri to obtain the target storage SAS token.
func (o ExportPipelineTargetPropertiesResponsePtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportPipelineTargetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// The type of target for the export pipeline.
func (o ExportPipelineTargetPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportPipelineTargetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The target uri of the export pipeline.
// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
// When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
func (o ExportPipelineTargetPropertiesResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportPipelineTargetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The request parameters for a scheduling run against a task file.
type FileTaskRunRequest struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials `pulumi:"credentials"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformProperties `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The template/definition file path relative to the source.
	TaskFilePath string `pulumi:"taskFilePath"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'FileTaskRunRequest'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValue `pulumi:"values"`
	// The values/parameters file path relative to the source.
	ValuesFilePath *string `pulumi:"valuesFilePath"`
}

// Defaults sets the appropriate defaults for FileTaskRunRequest
func (val *FileTaskRunRequest) Defaults() *FileTaskRunRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if isZero(tmp.Timeout) {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The request parameters for a scheduling run against a task file.
type FileTaskRunRequestResponse struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentPropertiesResponse `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *CredentialsResponse `pulumi:"credentials"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesResponse `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The template/definition file path relative to the source.
	TaskFilePath string `pulumi:"taskFilePath"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'FileTaskRunRequest'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValueResponse `pulumi:"values"`
	// The values/parameters file path relative to the source.
	ValuesFilePath *string `pulumi:"valuesFilePath"`
}

// Defaults sets the appropriate defaults for FileTaskRunRequestResponse
func (val *FileTaskRunRequestResponse) Defaults() *FileTaskRunRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if isZero(tmp.Timeout) {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The properties of a task step.
type FileTaskStep struct {
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// The task template/definition file path relative to the source context.
	TaskFilePath string `pulumi:"taskFilePath"`
	// The type of the step.
	// Expected value is 'FileTask'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValue `pulumi:"values"`
	// The task values/parameters file path relative to the source context.
	ValuesFilePath *string `pulumi:"valuesFilePath"`
}

// The properties of a task step.
type FileTaskStepResponse struct {
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyResponse `pulumi:"baseImageDependencies"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// The task template/definition file path relative to the source context.
	TaskFilePath string `pulumi:"taskFilePath"`
	// The type of the step.
	// Expected value is 'FileTask'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValueResponse `pulumi:"values"`
	// The task values/parameters file path relative to the source context.
	ValuesFilePath *string `pulumi:"valuesFilePath"`
}

// IP rule with specific IP or IP range in CIDR format.
type IPRule struct {
	// The action of IP ACL rule.
	Action *string `pulumi:"action"`
	// Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	IPAddressOrRange string `pulumi:"iPAddressOrRange"`
}

// Defaults sets the appropriate defaults for IPRule
func (val *IPRule) Defaults() *IPRule {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Action) {
		action_ := "Allow"
		tmp.Action = &action_
	}
	return &tmp
}

// IPRuleInput is an input type that accepts IPRuleArgs and IPRuleOutput values.
// You can construct a concrete instance of `IPRuleInput` via:
//
//	IPRuleArgs{...}
type IPRuleInput interface {
	pulumi.Input

	ToIPRuleOutput() IPRuleOutput
	ToIPRuleOutputWithContext(context.Context) IPRuleOutput
}

// IP rule with specific IP or IP range in CIDR format.
type IPRuleArgs struct {
	// The action of IP ACL rule.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	IPAddressOrRange pulumi.StringInput `pulumi:"iPAddressOrRange"`
}

// Defaults sets the appropriate defaults for IPRuleArgs
func (val *IPRuleArgs) Defaults() *IPRuleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Action) {
		tmp.Action = pulumi.StringPtr("Allow")
	}
	return &tmp
}
func (IPRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRule)(nil)).Elem()
}

func (i IPRuleArgs) ToIPRuleOutput() IPRuleOutput {
	return i.ToIPRuleOutputWithContext(context.Background())
}

func (i IPRuleArgs) ToIPRuleOutputWithContext(ctx context.Context) IPRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRuleOutput)
}

// IPRuleArrayInput is an input type that accepts IPRuleArray and IPRuleArrayOutput values.
// You can construct a concrete instance of `IPRuleArrayInput` via:
//
//	IPRuleArray{ IPRuleArgs{...} }
type IPRuleArrayInput interface {
	pulumi.Input

	ToIPRuleArrayOutput() IPRuleArrayOutput
	ToIPRuleArrayOutputWithContext(context.Context) IPRuleArrayOutput
}

type IPRuleArray []IPRuleInput

func (IPRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRule)(nil)).Elem()
}

func (i IPRuleArray) ToIPRuleArrayOutput() IPRuleArrayOutput {
	return i.ToIPRuleArrayOutputWithContext(context.Background())
}

func (i IPRuleArray) ToIPRuleArrayOutputWithContext(ctx context.Context) IPRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRuleArrayOutput)
}

// IP rule with specific IP or IP range in CIDR format.
type IPRuleOutput struct{ *pulumi.OutputState }

func (IPRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRule)(nil)).Elem()
}

func (o IPRuleOutput) ToIPRuleOutput() IPRuleOutput {
	return o
}

func (o IPRuleOutput) ToIPRuleOutputWithContext(ctx context.Context) IPRuleOutput {
	return o
}

// The action of IP ACL rule.
func (o IPRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
func (o IPRuleOutput) IPAddressOrRange() pulumi.StringOutput {
	return o.ApplyT(func(v IPRule) string { return v.IPAddressOrRange }).(pulumi.StringOutput)
}

type IPRuleArrayOutput struct{ *pulumi.OutputState }

func (IPRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRule)(nil)).Elem()
}

func (o IPRuleArrayOutput) ToIPRuleArrayOutput() IPRuleArrayOutput {
	return o
}

func (o IPRuleArrayOutput) ToIPRuleArrayOutputWithContext(ctx context.Context) IPRuleArrayOutput {
	return o
}

func (o IPRuleArrayOutput) Index(i pulumi.IntInput) IPRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRule {
		return vs[0].([]IPRule)[vs[1].(int)]
	}).(IPRuleOutput)
}

// IP rule with specific IP or IP range in CIDR format.
type IPRuleResponse struct {
	// The action of IP ACL rule.
	Action *string `pulumi:"action"`
	// Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	IPAddressOrRange string `pulumi:"iPAddressOrRange"`
}

// Defaults sets the appropriate defaults for IPRuleResponse
func (val *IPRuleResponse) Defaults() *IPRuleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Action) {
		action_ := "Allow"
		tmp.Action = &action_
	}
	return &tmp
}

// IP rule with specific IP or IP range in CIDR format.
type IPRuleResponseOutput struct{ *pulumi.OutputState }

func (IPRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRuleResponse)(nil)).Elem()
}

func (o IPRuleResponseOutput) ToIPRuleResponseOutput() IPRuleResponseOutput {
	return o
}

func (o IPRuleResponseOutput) ToIPRuleResponseOutputWithContext(ctx context.Context) IPRuleResponseOutput {
	return o
}

// The action of IP ACL rule.
func (o IPRuleResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRuleResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
func (o IPRuleResponseOutput) IPAddressOrRange() pulumi.StringOutput {
	return o.ApplyT(func(v IPRuleResponse) string { return v.IPAddressOrRange }).(pulumi.StringOutput)
}

type IPRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (IPRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRuleResponse)(nil)).Elem()
}

func (o IPRuleResponseArrayOutput) ToIPRuleResponseArrayOutput() IPRuleResponseArrayOutput {
	return o
}

func (o IPRuleResponseArrayOutput) ToIPRuleResponseArrayOutputWithContext(ctx context.Context) IPRuleResponseArrayOutput {
	return o
}

func (o IPRuleResponseArrayOutput) Index(i pulumi.IntInput) IPRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRuleResponse {
		return vs[0].([]IPRuleResponse)[vs[1].(int)]
	}).(IPRuleResponseOutput)
}

// Managed identity for the resource.
type IdentityProperties struct {
	// The principal ID of resource identity.
	PrincipalId *string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId *string `pulumi:"tenantId"`
	// The identity type.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity
	// dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	//     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserIdentityProperties `pulumi:"userAssignedIdentities"`
}

// IdentityPropertiesInput is an input type that accepts IdentityPropertiesArgs and IdentityPropertiesOutput values.
// You can construct a concrete instance of `IdentityPropertiesInput` via:
//
//	IdentityPropertiesArgs{...}
type IdentityPropertiesInput interface {
	pulumi.Input

	ToIdentityPropertiesOutput() IdentityPropertiesOutput
	ToIdentityPropertiesOutputWithContext(context.Context) IdentityPropertiesOutput
}

// Managed identity for the resource.
type IdentityPropertiesArgs struct {
	// The principal ID of resource identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The identity type.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity
	// dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	//     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities UserIdentityPropertiesMapInput `pulumi:"userAssignedIdentities"`
}

func (IdentityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProperties)(nil)).Elem()
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesOutput() IdentityPropertiesOutput {
	return i.ToIdentityPropertiesOutputWithContext(context.Background())
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesOutputWithContext(ctx context.Context) IdentityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesOutput)
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return i.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesOutput).ToIdentityPropertiesPtrOutputWithContext(ctx)
}

// IdentityPropertiesPtrInput is an input type that accepts IdentityPropertiesArgs, IdentityPropertiesPtr and IdentityPropertiesPtrOutput values.
// You can construct a concrete instance of `IdentityPropertiesPtrInput` via:
//
//	        IdentityPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdentityPropertiesPtrInput interface {
	pulumi.Input

	ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput
	ToIdentityPropertiesPtrOutputWithContext(context.Context) IdentityPropertiesPtrOutput
}

type identityPropertiesPtrType IdentityPropertiesArgs

func IdentityPropertiesPtr(v *IdentityPropertiesArgs) IdentityPropertiesPtrInput {
	return (*identityPropertiesPtrType)(v)
}

func (*identityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProperties)(nil)).Elem()
}

func (i *identityPropertiesPtrType) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return i.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i *identityPropertiesPtrType) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesPtrOutput)
}

// Managed identity for the resource.
type IdentityPropertiesOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProperties)(nil)).Elem()
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesOutput() IdentityPropertiesOutput {
	return o
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesOutputWithContext(ctx context.Context) IdentityPropertiesOutput {
	return o
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return o.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProperties) *IdentityProperties {
		return &v
	}).(IdentityPropertiesPtrOutput)
}

// The principal ID of resource identity.
func (o IdentityPropertiesOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProperties) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProperties) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityPropertiesOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v IdentityProperties) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the resource. The user identity
// dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
//
//	providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPropertiesOutput) UserAssignedIdentities() UserIdentityPropertiesMapOutput {
	return o.ApplyT(func(v IdentityProperties) map[string]UserIdentityProperties { return v.UserAssignedIdentities }).(UserIdentityPropertiesMapOutput)
}

type IdentityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProperties)(nil)).Elem()
}

func (o IdentityPropertiesPtrOutput) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return o
}

func (o IdentityPropertiesPtrOutput) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return o
}

func (o IdentityPropertiesPtrOutput) Elem() IdentityPropertiesOutput {
	return o.ApplyT(func(v *IdentityProperties) IdentityProperties {
		if v != nil {
			return *v
		}
		var ret IdentityProperties
		return ret
	}).(IdentityPropertiesOutput)
}

// The principal ID of resource identity.
func (o IdentityPropertiesPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProperties) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityPropertiesPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *IdentityProperties) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the resource. The user identity
// dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
//
//	providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPropertiesPtrOutput) UserAssignedIdentities() UserIdentityPropertiesMapOutput {
	return o.ApplyT(func(v *IdentityProperties) map[string]UserIdentityProperties {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesMapOutput)
}

// Managed identity for the resource.
type IdentityPropertiesResponse struct {
	// The principal ID of resource identity.
	PrincipalId *string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId *string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity
	// dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	//     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserIdentityPropertiesResponse `pulumi:"userAssignedIdentities"`
}

// Managed identity for the resource.
type IdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPropertiesResponse)(nil)).Elem()
}

func (o IdentityPropertiesResponseOutput) ToIdentityPropertiesResponseOutput() IdentityPropertiesResponseOutput {
	return o
}

func (o IdentityPropertiesResponseOutput) ToIdentityPropertiesResponseOutputWithContext(ctx context.Context) IdentityPropertiesResponseOutput {
	return o
}

// The principal ID of resource identity.
func (o IdentityPropertiesResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity
// dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
//
//	providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPropertiesResponseOutput) UserAssignedIdentities() UserIdentityPropertiesResponseMapOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) map[string]UserIdentityPropertiesResponse {
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesResponseMapOutput)
}

type IdentityPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPropertiesResponse)(nil)).Elem()
}

func (o IdentityPropertiesResponsePtrOutput) ToIdentityPropertiesResponsePtrOutput() IdentityPropertiesResponsePtrOutput {
	return o
}

func (o IdentityPropertiesResponsePtrOutput) ToIdentityPropertiesResponsePtrOutputWithContext(ctx context.Context) IdentityPropertiesResponsePtrOutput {
	return o
}

func (o IdentityPropertiesResponsePtrOutput) Elem() IdentityPropertiesResponseOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) IdentityPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IdentityPropertiesResponse
		return ret
	}).(IdentityPropertiesResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityPropertiesResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity
// dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
//
//	providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPropertiesResponsePtrOutput) UserAssignedIdentities() UserIdentityPropertiesResponseMapOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) map[string]UserIdentityPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesResponseMapOutput)
}

// Properties for a registry image.
type ImageDescriptorResponse struct {
	// The sha256-based digest of the image manifest.
	Digest *string `pulumi:"digest"`
	// The registry login server.
	Registry *string `pulumi:"registry"`
	// The repository name.
	Repository *string `pulumi:"repository"`
	// The tag name.
	Tag *string `pulumi:"tag"`
}

// Properties for a registry image.
type ImageDescriptorResponseOutput struct{ *pulumi.OutputState }

func (ImageDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDescriptorResponse)(nil)).Elem()
}

func (o ImageDescriptorResponseOutput) ToImageDescriptorResponseOutput() ImageDescriptorResponseOutput {
	return o
}

func (o ImageDescriptorResponseOutput) ToImageDescriptorResponseOutputWithContext(ctx context.Context) ImageDescriptorResponseOutput {
	return o
}

// The sha256-based digest of the image manifest.
func (o ImageDescriptorResponseOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDescriptorResponse) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The registry login server.
func (o ImageDescriptorResponseOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDescriptorResponse) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// The repository name.
func (o ImageDescriptorResponseOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDescriptorResponse) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The tag name.
func (o ImageDescriptorResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDescriptorResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImageDescriptorResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageDescriptorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDescriptorResponse)(nil)).Elem()
}

func (o ImageDescriptorResponseArrayOutput) ToImageDescriptorResponseArrayOutput() ImageDescriptorResponseArrayOutput {
	return o
}

func (o ImageDescriptorResponseArrayOutput) ToImageDescriptorResponseArrayOutputWithContext(ctx context.Context) ImageDescriptorResponseArrayOutput {
	return o
}

func (o ImageDescriptorResponseArrayOutput) Index(i pulumi.IntInput) ImageDescriptorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageDescriptorResponse {
		return vs[0].([]ImageDescriptorResponse)[vs[1].(int)]
	}).(ImageDescriptorResponseOutput)
}

// The image update trigger that caused a build.
type ImageUpdateTriggerResponse struct {
	// The unique ID of the trigger.
	Id *string `pulumi:"id"`
	// The list of image updates that caused the build.
	Images []ImageDescriptorResponse `pulumi:"images"`
	// The timestamp when the image update happened.
	Timestamp *string `pulumi:"timestamp"`
}

// The image update trigger that caused a build.
type ImageUpdateTriggerResponseOutput struct{ *pulumi.OutputState }

func (ImageUpdateTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateTriggerResponse)(nil)).Elem()
}

func (o ImageUpdateTriggerResponseOutput) ToImageUpdateTriggerResponseOutput() ImageUpdateTriggerResponseOutput {
	return o
}

func (o ImageUpdateTriggerResponseOutput) ToImageUpdateTriggerResponseOutputWithContext(ctx context.Context) ImageUpdateTriggerResponseOutput {
	return o
}

// The unique ID of the trigger.
func (o ImageUpdateTriggerResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateTriggerResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of image updates that caused the build.
func (o ImageUpdateTriggerResponseOutput) Images() ImageDescriptorResponseArrayOutput {
	return o.ApplyT(func(v ImageUpdateTriggerResponse) []ImageDescriptorResponse { return v.Images }).(ImageDescriptorResponseArrayOutput)
}

// The timestamp when the image update happened.
func (o ImageUpdateTriggerResponseOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateTriggerResponse) *string { return v.Timestamp }).(pulumi.StringPtrOutput)
}

type ImageUpdateTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateTriggerResponse)(nil)).Elem()
}

func (o ImageUpdateTriggerResponsePtrOutput) ToImageUpdateTriggerResponsePtrOutput() ImageUpdateTriggerResponsePtrOutput {
	return o
}

func (o ImageUpdateTriggerResponsePtrOutput) ToImageUpdateTriggerResponsePtrOutputWithContext(ctx context.Context) ImageUpdateTriggerResponsePtrOutput {
	return o
}

func (o ImageUpdateTriggerResponsePtrOutput) Elem() ImageUpdateTriggerResponseOutput {
	return o.ApplyT(func(v *ImageUpdateTriggerResponse) ImageUpdateTriggerResponse {
		if v != nil {
			return *v
		}
		var ret ImageUpdateTriggerResponse
		return ret
	}).(ImageUpdateTriggerResponseOutput)
}

// The unique ID of the trigger.
func (o ImageUpdateTriggerResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The list of image updates that caused the build.
func (o ImageUpdateTriggerResponsePtrOutput) Images() ImageDescriptorResponseArrayOutput {
	return o.ApplyT(func(v *ImageUpdateTriggerResponse) []ImageDescriptorResponse {
		if v == nil {
			return nil
		}
		return v.Images
	}).(ImageDescriptorResponseArrayOutput)
}

// The timestamp when the image update happened.
func (o ImageUpdateTriggerResponsePtrOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timestamp
	}).(pulumi.StringPtrOutput)
}

// The properties of the import pipeline source.
type ImportPipelineSourceProperties struct {
	// They key vault secret uri to obtain the source storage SAS token.
	KeyVaultUri string `pulumi:"keyVaultUri"`
	// The type of source for the import pipeline.
	Type *string `pulumi:"type"`
	// The source uri of the import pipeline.
	// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
	// When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for ImportPipelineSourceProperties
func (val *ImportPipelineSourceProperties) Defaults() *ImportPipelineSourceProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		type_ := "AzureStorageBlobContainer"
		tmp.Type = &type_
	}
	return &tmp
}

// ImportPipelineSourcePropertiesInput is an input type that accepts ImportPipelineSourcePropertiesArgs and ImportPipelineSourcePropertiesOutput values.
// You can construct a concrete instance of `ImportPipelineSourcePropertiesInput` via:
//
//	ImportPipelineSourcePropertiesArgs{...}
type ImportPipelineSourcePropertiesInput interface {
	pulumi.Input

	ToImportPipelineSourcePropertiesOutput() ImportPipelineSourcePropertiesOutput
	ToImportPipelineSourcePropertiesOutputWithContext(context.Context) ImportPipelineSourcePropertiesOutput
}

// The properties of the import pipeline source.
type ImportPipelineSourcePropertiesArgs struct {
	// They key vault secret uri to obtain the source storage SAS token.
	KeyVaultUri pulumi.StringInput `pulumi:"keyVaultUri"`
	// The type of source for the import pipeline.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The source uri of the import pipeline.
	// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
	// When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for ImportPipelineSourcePropertiesArgs
func (val *ImportPipelineSourcePropertiesArgs) Defaults() *ImportPipelineSourcePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		tmp.Type = pulumi.StringPtr("AzureStorageBlobContainer")
	}
	return &tmp
}
func (ImportPipelineSourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportPipelineSourceProperties)(nil)).Elem()
}

func (i ImportPipelineSourcePropertiesArgs) ToImportPipelineSourcePropertiesOutput() ImportPipelineSourcePropertiesOutput {
	return i.ToImportPipelineSourcePropertiesOutputWithContext(context.Background())
}

func (i ImportPipelineSourcePropertiesArgs) ToImportPipelineSourcePropertiesOutputWithContext(ctx context.Context) ImportPipelineSourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportPipelineSourcePropertiesOutput)
}

// The properties of the import pipeline source.
type ImportPipelineSourcePropertiesOutput struct{ *pulumi.OutputState }

func (ImportPipelineSourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportPipelineSourceProperties)(nil)).Elem()
}

func (o ImportPipelineSourcePropertiesOutput) ToImportPipelineSourcePropertiesOutput() ImportPipelineSourcePropertiesOutput {
	return o
}

func (o ImportPipelineSourcePropertiesOutput) ToImportPipelineSourcePropertiesOutputWithContext(ctx context.Context) ImportPipelineSourcePropertiesOutput {
	return o
}

// They key vault secret uri to obtain the source storage SAS token.
func (o ImportPipelineSourcePropertiesOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v ImportPipelineSourceProperties) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

// The type of source for the import pipeline.
func (o ImportPipelineSourcePropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportPipelineSourceProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The source uri of the import pipeline.
// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
// When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
func (o ImportPipelineSourcePropertiesOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportPipelineSourceProperties) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The properties of the import pipeline source.
type ImportPipelineSourcePropertiesResponse struct {
	// They key vault secret uri to obtain the source storage SAS token.
	KeyVaultUri string `pulumi:"keyVaultUri"`
	// The type of source for the import pipeline.
	Type *string `pulumi:"type"`
	// The source uri of the import pipeline.
	// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
	// When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for ImportPipelineSourcePropertiesResponse
func (val *ImportPipelineSourcePropertiesResponse) Defaults() *ImportPipelineSourcePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		type_ := "AzureStorageBlobContainer"
		tmp.Type = &type_
	}
	return &tmp
}

// The properties of the import pipeline source.
type ImportPipelineSourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ImportPipelineSourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportPipelineSourcePropertiesResponse)(nil)).Elem()
}

func (o ImportPipelineSourcePropertiesResponseOutput) ToImportPipelineSourcePropertiesResponseOutput() ImportPipelineSourcePropertiesResponseOutput {
	return o
}

func (o ImportPipelineSourcePropertiesResponseOutput) ToImportPipelineSourcePropertiesResponseOutputWithContext(ctx context.Context) ImportPipelineSourcePropertiesResponseOutput {
	return o
}

// They key vault secret uri to obtain the source storage SAS token.
func (o ImportPipelineSourcePropertiesResponseOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v ImportPipelineSourcePropertiesResponse) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

// The type of source for the import pipeline.
func (o ImportPipelineSourcePropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportPipelineSourcePropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The source uri of the import pipeline.
// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
// When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
func (o ImportPipelineSourcePropertiesResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportPipelineSourcePropertiesResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ImportPipelineSourcePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ImportPipelineSourcePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportPipelineSourcePropertiesResponse)(nil)).Elem()
}

func (o ImportPipelineSourcePropertiesResponsePtrOutput) ToImportPipelineSourcePropertiesResponsePtrOutput() ImportPipelineSourcePropertiesResponsePtrOutput {
	return o
}

func (o ImportPipelineSourcePropertiesResponsePtrOutput) ToImportPipelineSourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ImportPipelineSourcePropertiesResponsePtrOutput {
	return o
}

func (o ImportPipelineSourcePropertiesResponsePtrOutput) Elem() ImportPipelineSourcePropertiesResponseOutput {
	return o.ApplyT(func(v *ImportPipelineSourcePropertiesResponse) ImportPipelineSourcePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ImportPipelineSourcePropertiesResponse
		return ret
	}).(ImportPipelineSourcePropertiesResponseOutput)
}

// They key vault secret uri to obtain the source storage SAS token.
func (o ImportPipelineSourcePropertiesResponsePtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportPipelineSourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// The type of source for the import pipeline.
func (o ImportPipelineSourcePropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportPipelineSourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The source uri of the import pipeline.
// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
// When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
func (o ImportPipelineSourcePropertiesResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportPipelineSourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The logging properties of the connected registry.
type LoggingProperties struct {
	// Indicates whether audit logs are enabled on the connected registry.
	AuditLogStatus *string `pulumi:"auditLogStatus"`
	// The verbosity of logs persisted on the connected registry.
	LogLevel *string `pulumi:"logLevel"`
}

// Defaults sets the appropriate defaults for LoggingProperties
func (val *LoggingProperties) Defaults() *LoggingProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AuditLogStatus) {
		auditLogStatus_ := "Disabled"
		tmp.AuditLogStatus = &auditLogStatus_
	}
	if isZero(tmp.LogLevel) {
		logLevel_ := "Information"
		tmp.LogLevel = &logLevel_
	}
	return &tmp
}

// LoggingPropertiesInput is an input type that accepts LoggingPropertiesArgs and LoggingPropertiesOutput values.
// You can construct a concrete instance of `LoggingPropertiesInput` via:
//
//	LoggingPropertiesArgs{...}
type LoggingPropertiesInput interface {
	pulumi.Input

	ToLoggingPropertiesOutput() LoggingPropertiesOutput
	ToLoggingPropertiesOutputWithContext(context.Context) LoggingPropertiesOutput
}

// The logging properties of the connected registry.
type LoggingPropertiesArgs struct {
	// Indicates whether audit logs are enabled on the connected registry.
	AuditLogStatus pulumi.StringPtrInput `pulumi:"auditLogStatus"`
	// The verbosity of logs persisted on the connected registry.
	LogLevel pulumi.StringPtrInput `pulumi:"logLevel"`
}

// Defaults sets the appropriate defaults for LoggingPropertiesArgs
func (val *LoggingPropertiesArgs) Defaults() *LoggingPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AuditLogStatus) {
		tmp.AuditLogStatus = pulumi.StringPtr("Disabled")
	}
	if isZero(tmp.LogLevel) {
		tmp.LogLevel = pulumi.StringPtr("Information")
	}
	return &tmp
}
func (LoggingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingProperties)(nil)).Elem()
}

func (i LoggingPropertiesArgs) ToLoggingPropertiesOutput() LoggingPropertiesOutput {
	return i.ToLoggingPropertiesOutputWithContext(context.Background())
}

func (i LoggingPropertiesArgs) ToLoggingPropertiesOutputWithContext(ctx context.Context) LoggingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingPropertiesOutput)
}

func (i LoggingPropertiesArgs) ToLoggingPropertiesPtrOutput() LoggingPropertiesPtrOutput {
	return i.ToLoggingPropertiesPtrOutputWithContext(context.Background())
}

func (i LoggingPropertiesArgs) ToLoggingPropertiesPtrOutputWithContext(ctx context.Context) LoggingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingPropertiesOutput).ToLoggingPropertiesPtrOutputWithContext(ctx)
}

// LoggingPropertiesPtrInput is an input type that accepts LoggingPropertiesArgs, LoggingPropertiesPtr and LoggingPropertiesPtrOutput values.
// You can construct a concrete instance of `LoggingPropertiesPtrInput` via:
//
//	        LoggingPropertiesArgs{...}
//
//	or:
//
//	        nil
type LoggingPropertiesPtrInput interface {
	pulumi.Input

	ToLoggingPropertiesPtrOutput() LoggingPropertiesPtrOutput
	ToLoggingPropertiesPtrOutputWithContext(context.Context) LoggingPropertiesPtrOutput
}

type loggingPropertiesPtrType LoggingPropertiesArgs

func LoggingPropertiesPtr(v *LoggingPropertiesArgs) LoggingPropertiesPtrInput {
	return (*loggingPropertiesPtrType)(v)
}

func (*loggingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingProperties)(nil)).Elem()
}

func (i *loggingPropertiesPtrType) ToLoggingPropertiesPtrOutput() LoggingPropertiesPtrOutput {
	return i.ToLoggingPropertiesPtrOutputWithContext(context.Background())
}

func (i *loggingPropertiesPtrType) ToLoggingPropertiesPtrOutputWithContext(ctx context.Context) LoggingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingPropertiesPtrOutput)
}

// The logging properties of the connected registry.
type LoggingPropertiesOutput struct{ *pulumi.OutputState }

func (LoggingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingProperties)(nil)).Elem()
}

func (o LoggingPropertiesOutput) ToLoggingPropertiesOutput() LoggingPropertiesOutput {
	return o
}

func (o LoggingPropertiesOutput) ToLoggingPropertiesOutputWithContext(ctx context.Context) LoggingPropertiesOutput {
	return o
}

func (o LoggingPropertiesOutput) ToLoggingPropertiesPtrOutput() LoggingPropertiesPtrOutput {
	return o.ToLoggingPropertiesPtrOutputWithContext(context.Background())
}

func (o LoggingPropertiesOutput) ToLoggingPropertiesPtrOutputWithContext(ctx context.Context) LoggingPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggingProperties) *LoggingProperties {
		return &v
	}).(LoggingPropertiesPtrOutput)
}

// Indicates whether audit logs are enabled on the connected registry.
func (o LoggingPropertiesOutput) AuditLogStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingProperties) *string { return v.AuditLogStatus }).(pulumi.StringPtrOutput)
}

// The verbosity of logs persisted on the connected registry.
func (o LoggingPropertiesOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingProperties) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

type LoggingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (LoggingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingProperties)(nil)).Elem()
}

func (o LoggingPropertiesPtrOutput) ToLoggingPropertiesPtrOutput() LoggingPropertiesPtrOutput {
	return o
}

func (o LoggingPropertiesPtrOutput) ToLoggingPropertiesPtrOutputWithContext(ctx context.Context) LoggingPropertiesPtrOutput {
	return o
}

func (o LoggingPropertiesPtrOutput) Elem() LoggingPropertiesOutput {
	return o.ApplyT(func(v *LoggingProperties) LoggingProperties {
		if v != nil {
			return *v
		}
		var ret LoggingProperties
		return ret
	}).(LoggingPropertiesOutput)
}

// Indicates whether audit logs are enabled on the connected registry.
func (o LoggingPropertiesPtrOutput) AuditLogStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingProperties) *string {
		if v == nil {
			return nil
		}
		return v.AuditLogStatus
	}).(pulumi.StringPtrOutput)
}

// The verbosity of logs persisted on the connected registry.
func (o LoggingPropertiesPtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingProperties) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// The logging properties of the connected registry.
type LoggingPropertiesResponse struct {
	// Indicates whether audit logs are enabled on the connected registry.
	AuditLogStatus *string `pulumi:"auditLogStatus"`
	// The verbosity of logs persisted on the connected registry.
	LogLevel *string `pulumi:"logLevel"`
}

// Defaults sets the appropriate defaults for LoggingPropertiesResponse
func (val *LoggingPropertiesResponse) Defaults() *LoggingPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AuditLogStatus) {
		auditLogStatus_ := "Disabled"
		tmp.AuditLogStatus = &auditLogStatus_
	}
	if isZero(tmp.LogLevel) {
		logLevel_ := "Information"
		tmp.LogLevel = &logLevel_
	}
	return &tmp
}

// The logging properties of the connected registry.
type LoggingPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LoggingPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingPropertiesResponse)(nil)).Elem()
}

func (o LoggingPropertiesResponseOutput) ToLoggingPropertiesResponseOutput() LoggingPropertiesResponseOutput {
	return o
}

func (o LoggingPropertiesResponseOutput) ToLoggingPropertiesResponseOutputWithContext(ctx context.Context) LoggingPropertiesResponseOutput {
	return o
}

// Indicates whether audit logs are enabled on the connected registry.
func (o LoggingPropertiesResponseOutput) AuditLogStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingPropertiesResponse) *string { return v.AuditLogStatus }).(pulumi.StringPtrOutput)
}

// The verbosity of logs persisted on the connected registry.
func (o LoggingPropertiesResponseOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingPropertiesResponse) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

type LoggingPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LoggingPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingPropertiesResponse)(nil)).Elem()
}

func (o LoggingPropertiesResponsePtrOutput) ToLoggingPropertiesResponsePtrOutput() LoggingPropertiesResponsePtrOutput {
	return o
}

func (o LoggingPropertiesResponsePtrOutput) ToLoggingPropertiesResponsePtrOutputWithContext(ctx context.Context) LoggingPropertiesResponsePtrOutput {
	return o
}

func (o LoggingPropertiesResponsePtrOutput) Elem() LoggingPropertiesResponseOutput {
	return o.ApplyT(func(v *LoggingPropertiesResponse) LoggingPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret LoggingPropertiesResponse
		return ret
	}).(LoggingPropertiesResponseOutput)
}

// Indicates whether audit logs are enabled on the connected registry.
func (o LoggingPropertiesResponsePtrOutput) AuditLogStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuditLogStatus
	}).(pulumi.StringPtrOutput)
}

// The verbosity of logs persisted on the connected registry.
func (o LoggingPropertiesResponsePtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// The login server properties of the connected registry.
type LoginServerPropertiesResponse struct {
	// The host of the connected registry. Can be FQDN or IP.
	Host string `pulumi:"host"`
	// The TLS properties of the connected registry login server.
	Tls TlsPropertiesResponse `pulumi:"tls"`
}

// The login server properties of the connected registry.
type LoginServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LoginServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginServerPropertiesResponse)(nil)).Elem()
}

func (o LoginServerPropertiesResponseOutput) ToLoginServerPropertiesResponseOutput() LoginServerPropertiesResponseOutput {
	return o
}

func (o LoginServerPropertiesResponseOutput) ToLoginServerPropertiesResponseOutputWithContext(ctx context.Context) LoginServerPropertiesResponseOutput {
	return o
}

// The host of the connected registry. Can be FQDN or IP.
func (o LoginServerPropertiesResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LoginServerPropertiesResponse) string { return v.Host }).(pulumi.StringOutput)
}

// The TLS properties of the connected registry login server.
func (o LoginServerPropertiesResponseOutput) Tls() TlsPropertiesResponseOutput {
	return o.ApplyT(func(v LoginServerPropertiesResponse) TlsPropertiesResponse { return v.Tls }).(TlsPropertiesResponseOutput)
}

type LoginServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LoginServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginServerPropertiesResponse)(nil)).Elem()
}

func (o LoginServerPropertiesResponsePtrOutput) ToLoginServerPropertiesResponsePtrOutput() LoginServerPropertiesResponsePtrOutput {
	return o
}

func (o LoginServerPropertiesResponsePtrOutput) ToLoginServerPropertiesResponsePtrOutputWithContext(ctx context.Context) LoginServerPropertiesResponsePtrOutput {
	return o
}

func (o LoginServerPropertiesResponsePtrOutput) Elem() LoginServerPropertiesResponseOutput {
	return o.ApplyT(func(v *LoginServerPropertiesResponse) LoginServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret LoginServerPropertiesResponse
		return ret
	}).(LoginServerPropertiesResponseOutput)
}

// The host of the connected registry. Can be FQDN or IP.
func (o LoginServerPropertiesResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The TLS properties of the connected registry login server.
func (o LoginServerPropertiesResponsePtrOutput) Tls() TlsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *LoginServerPropertiesResponse) *TlsPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Tls
	}).(TlsPropertiesResponsePtrOutput)
}

// The network rule set for a container registry.
type NetworkRuleSet struct {
	// The default action of allow or deny when no other rules match.
	DefaultAction string `pulumi:"defaultAction"`
	// The IP ACL rules.
	IpRules []IPRule `pulumi:"ipRules"`
	// The virtual network rules.
	VirtualNetworkRules []VirtualNetworkRule `pulumi:"virtualNetworkRules"`
}

// Defaults sets the appropriate defaults for NetworkRuleSet
func (val *NetworkRuleSet) Defaults() *NetworkRuleSet {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.DefaultAction) {
		tmp.DefaultAction = "Allow"
	}
	return &tmp
}

// NetworkRuleSetInput is an input type that accepts NetworkRuleSetArgs and NetworkRuleSetOutput values.
// You can construct a concrete instance of `NetworkRuleSetInput` via:
//
//	NetworkRuleSetArgs{...}
type NetworkRuleSetInput interface {
	pulumi.Input

	ToNetworkRuleSetOutput() NetworkRuleSetOutput
	ToNetworkRuleSetOutputWithContext(context.Context) NetworkRuleSetOutput
}

// The network rule set for a container registry.
type NetworkRuleSetArgs struct {
	// The default action of allow or deny when no other rules match.
	DefaultAction pulumi.StringInput `pulumi:"defaultAction"`
	// The IP ACL rules.
	IpRules IPRuleArrayInput `pulumi:"ipRules"`
	// The virtual network rules.
	VirtualNetworkRules VirtualNetworkRuleArrayInput `pulumi:"virtualNetworkRules"`
}

// Defaults sets the appropriate defaults for NetworkRuleSetArgs
func (val *NetworkRuleSetArgs) Defaults() *NetworkRuleSetArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.DefaultAction) {
		tmp.DefaultAction = pulumi.String("Allow")
	}
	return &tmp
}
func (NetworkRuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRuleSet)(nil)).Elem()
}

func (i NetworkRuleSetArgs) ToNetworkRuleSetOutput() NetworkRuleSetOutput {
	return i.ToNetworkRuleSetOutputWithContext(context.Background())
}

func (i NetworkRuleSetArgs) ToNetworkRuleSetOutputWithContext(ctx context.Context) NetworkRuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRuleSetOutput)
}

func (i NetworkRuleSetArgs) ToNetworkRuleSetPtrOutput() NetworkRuleSetPtrOutput {
	return i.ToNetworkRuleSetPtrOutputWithContext(context.Background())
}

func (i NetworkRuleSetArgs) ToNetworkRuleSetPtrOutputWithContext(ctx context.Context) NetworkRuleSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRuleSetOutput).ToNetworkRuleSetPtrOutputWithContext(ctx)
}

// NetworkRuleSetPtrInput is an input type that accepts NetworkRuleSetArgs, NetworkRuleSetPtr and NetworkRuleSetPtrOutput values.
// You can construct a concrete instance of `NetworkRuleSetPtrInput` via:
//
//	        NetworkRuleSetArgs{...}
//
//	or:
//
//	        nil
type NetworkRuleSetPtrInput interface {
	pulumi.Input

	ToNetworkRuleSetPtrOutput() NetworkRuleSetPtrOutput
	ToNetworkRuleSetPtrOutputWithContext(context.Context) NetworkRuleSetPtrOutput
}

type networkRuleSetPtrType NetworkRuleSetArgs

func NetworkRuleSetPtr(v *NetworkRuleSetArgs) NetworkRuleSetPtrInput {
	return (*networkRuleSetPtrType)(v)
}

func (*networkRuleSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRuleSet)(nil)).Elem()
}

func (i *networkRuleSetPtrType) ToNetworkRuleSetPtrOutput() NetworkRuleSetPtrOutput {
	return i.ToNetworkRuleSetPtrOutputWithContext(context.Background())
}

func (i *networkRuleSetPtrType) ToNetworkRuleSetPtrOutputWithContext(ctx context.Context) NetworkRuleSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRuleSetPtrOutput)
}

// The network rule set for a container registry.
type NetworkRuleSetOutput struct{ *pulumi.OutputState }

func (NetworkRuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRuleSet)(nil)).Elem()
}

func (o NetworkRuleSetOutput) ToNetworkRuleSetOutput() NetworkRuleSetOutput {
	return o
}

func (o NetworkRuleSetOutput) ToNetworkRuleSetOutputWithContext(ctx context.Context) NetworkRuleSetOutput {
	return o
}

func (o NetworkRuleSetOutput) ToNetworkRuleSetPtrOutput() NetworkRuleSetPtrOutput {
	return o.ToNetworkRuleSetPtrOutputWithContext(context.Background())
}

func (o NetworkRuleSetOutput) ToNetworkRuleSetPtrOutputWithContext(ctx context.Context) NetworkRuleSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkRuleSet) *NetworkRuleSet {
		return &v
	}).(NetworkRuleSetPtrOutput)
}

// The default action of allow or deny when no other rules match.
func (o NetworkRuleSetOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkRuleSet) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// The IP ACL rules.
func (o NetworkRuleSetOutput) IpRules() IPRuleArrayOutput {
	return o.ApplyT(func(v NetworkRuleSet) []IPRule { return v.IpRules }).(IPRuleArrayOutput)
}

// The virtual network rules.
func (o NetworkRuleSetOutput) VirtualNetworkRules() VirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v NetworkRuleSet) []VirtualNetworkRule { return v.VirtualNetworkRules }).(VirtualNetworkRuleArrayOutput)
}

type NetworkRuleSetPtrOutput struct{ *pulumi.OutputState }

func (NetworkRuleSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRuleSet)(nil)).Elem()
}

func (o NetworkRuleSetPtrOutput) ToNetworkRuleSetPtrOutput() NetworkRuleSetPtrOutput {
	return o
}

func (o NetworkRuleSetPtrOutput) ToNetworkRuleSetPtrOutputWithContext(ctx context.Context) NetworkRuleSetPtrOutput {
	return o
}

func (o NetworkRuleSetPtrOutput) Elem() NetworkRuleSetOutput {
	return o.ApplyT(func(v *NetworkRuleSet) NetworkRuleSet {
		if v != nil {
			return *v
		}
		var ret NetworkRuleSet
		return ret
	}).(NetworkRuleSetOutput)
}

// The default action of allow or deny when no other rules match.
func (o NetworkRuleSetPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRuleSet) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// The IP ACL rules.
func (o NetworkRuleSetPtrOutput) IpRules() IPRuleArrayOutput {
	return o.ApplyT(func(v *NetworkRuleSet) []IPRule {
		if v == nil {
			return nil
		}
		return v.IpRules
	}).(IPRuleArrayOutput)
}

// The virtual network rules.
func (o NetworkRuleSetPtrOutput) VirtualNetworkRules() VirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v *NetworkRuleSet) []VirtualNetworkRule {
		if v == nil {
			return nil
		}
		return v.VirtualNetworkRules
	}).(VirtualNetworkRuleArrayOutput)
}

// The network rule set for a container registry.
type NetworkRuleSetResponse struct {
	// The default action of allow or deny when no other rules match.
	DefaultAction string `pulumi:"defaultAction"`
	// The IP ACL rules.
	IpRules []IPRuleResponse `pulumi:"ipRules"`
	// The virtual network rules.
	VirtualNetworkRules []VirtualNetworkRuleResponse `pulumi:"virtualNetworkRules"`
}

// Defaults sets the appropriate defaults for NetworkRuleSetResponse
func (val *NetworkRuleSetResponse) Defaults() *NetworkRuleSetResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.DefaultAction) {
		tmp.DefaultAction = "Allow"
	}
	return &tmp
}

// The network rule set for a container registry.
type NetworkRuleSetResponseOutput struct{ *pulumi.OutputState }

func (NetworkRuleSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRuleSetResponse)(nil)).Elem()
}

func (o NetworkRuleSetResponseOutput) ToNetworkRuleSetResponseOutput() NetworkRuleSetResponseOutput {
	return o
}

func (o NetworkRuleSetResponseOutput) ToNetworkRuleSetResponseOutputWithContext(ctx context.Context) NetworkRuleSetResponseOutput {
	return o
}

// The default action of allow or deny when no other rules match.
func (o NetworkRuleSetResponseOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkRuleSetResponse) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// The IP ACL rules.
func (o NetworkRuleSetResponseOutput) IpRules() IPRuleResponseArrayOutput {
	return o.ApplyT(func(v NetworkRuleSetResponse) []IPRuleResponse { return v.IpRules }).(IPRuleResponseArrayOutput)
}

// The virtual network rules.
func (o NetworkRuleSetResponseOutput) VirtualNetworkRules() VirtualNetworkRuleResponseArrayOutput {
	return o.ApplyT(func(v NetworkRuleSetResponse) []VirtualNetworkRuleResponse { return v.VirtualNetworkRules }).(VirtualNetworkRuleResponseArrayOutput)
}

type NetworkRuleSetResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkRuleSetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRuleSetResponse)(nil)).Elem()
}

func (o NetworkRuleSetResponsePtrOutput) ToNetworkRuleSetResponsePtrOutput() NetworkRuleSetResponsePtrOutput {
	return o
}

func (o NetworkRuleSetResponsePtrOutput) ToNetworkRuleSetResponsePtrOutputWithContext(ctx context.Context) NetworkRuleSetResponsePtrOutput {
	return o
}

func (o NetworkRuleSetResponsePtrOutput) Elem() NetworkRuleSetResponseOutput {
	return o.ApplyT(func(v *NetworkRuleSetResponse) NetworkRuleSetResponse {
		if v != nil {
			return *v
		}
		var ret NetworkRuleSetResponse
		return ret
	}).(NetworkRuleSetResponseOutput)
}

// The default action of allow or deny when no other rules match.
func (o NetworkRuleSetResponsePtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRuleSetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// The IP ACL rules.
func (o NetworkRuleSetResponsePtrOutput) IpRules() IPRuleResponseArrayOutput {
	return o.ApplyT(func(v *NetworkRuleSetResponse) []IPRuleResponse {
		if v == nil {
			return nil
		}
		return v.IpRules
	}).(IPRuleResponseArrayOutput)
}

// The virtual network rules.
func (o NetworkRuleSetResponsePtrOutput) VirtualNetworkRules() VirtualNetworkRuleResponseArrayOutput {
	return o.ApplyT(func(v *NetworkRuleSetResponse) []VirtualNetworkRuleResponse {
		if v == nil {
			return nil
		}
		return v.VirtualNetworkRules
	}).(VirtualNetworkRuleResponseArrayOutput)
}

type OverrideTaskStepProperties struct {
	// Gets or sets the collection of override arguments to be used when
	// executing a build step.
	Arguments []Argument `pulumi:"arguments"`
	// The source context against which run has to be queued.
	ContextPath *string `pulumi:"contextPath"`
	// The file against which run has to be queued.
	File *string `pulumi:"file"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
	UpdateTriggerToken *string `pulumi:"updateTriggerToken"`
	// The collection of overridable values that can be passed when running a Task.
	Values []SetValue `pulumi:"values"`
}

type OverrideTaskStepPropertiesResponse struct {
	// Gets or sets the collection of override arguments to be used when
	// executing a build step.
	Arguments []ArgumentResponse `pulumi:"arguments"`
	// The source context against which run has to be queued.
	ContextPath *string `pulumi:"contextPath"`
	// The file against which run has to be queued.
	File *string `pulumi:"file"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
	UpdateTriggerToken *string `pulumi:"updateTriggerToken"`
	// The collection of overridable values that can be passed when running a Task.
	Values []SetValueResponse `pulumi:"values"`
}

// The properties of the connected registry parent.
type ParentProperties struct {
	// The resource ID of the parent to which the connected registry will be associated.
	Id *string `pulumi:"id"`
	// The sync properties of the connected registry with its parent.
	SyncProperties SyncProperties `pulumi:"syncProperties"`
}

// ParentPropertiesInput is an input type that accepts ParentPropertiesArgs and ParentPropertiesOutput values.
// You can construct a concrete instance of `ParentPropertiesInput` via:
//
//	ParentPropertiesArgs{...}
type ParentPropertiesInput interface {
	pulumi.Input

	ToParentPropertiesOutput() ParentPropertiesOutput
	ToParentPropertiesOutputWithContext(context.Context) ParentPropertiesOutput
}

// The properties of the connected registry parent.
type ParentPropertiesArgs struct {
	// The resource ID of the parent to which the connected registry will be associated.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The sync properties of the connected registry with its parent.
	SyncProperties SyncPropertiesInput `pulumi:"syncProperties"`
}

func (ParentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentProperties)(nil)).Elem()
}

func (i ParentPropertiesArgs) ToParentPropertiesOutput() ParentPropertiesOutput {
	return i.ToParentPropertiesOutputWithContext(context.Background())
}

func (i ParentPropertiesArgs) ToParentPropertiesOutputWithContext(ctx context.Context) ParentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentPropertiesOutput)
}

// The properties of the connected registry parent.
type ParentPropertiesOutput struct{ *pulumi.OutputState }

func (ParentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentProperties)(nil)).Elem()
}

func (o ParentPropertiesOutput) ToParentPropertiesOutput() ParentPropertiesOutput {
	return o
}

func (o ParentPropertiesOutput) ToParentPropertiesOutputWithContext(ctx context.Context) ParentPropertiesOutput {
	return o
}

// The resource ID of the parent to which the connected registry will be associated.
func (o ParentPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The sync properties of the connected registry with its parent.
func (o ParentPropertiesOutput) SyncProperties() SyncPropertiesOutput {
	return o.ApplyT(func(v ParentProperties) SyncProperties { return v.SyncProperties }).(SyncPropertiesOutput)
}

// The properties of the connected registry parent.
type ParentPropertiesResponse struct {
	// The resource ID of the parent to which the connected registry will be associated.
	Id *string `pulumi:"id"`
	// The sync properties of the connected registry with its parent.
	SyncProperties SyncPropertiesResponse `pulumi:"syncProperties"`
}

// The properties of the connected registry parent.
type ParentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ParentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentPropertiesResponse)(nil)).Elem()
}

func (o ParentPropertiesResponseOutput) ToParentPropertiesResponseOutput() ParentPropertiesResponseOutput {
	return o
}

func (o ParentPropertiesResponseOutput) ToParentPropertiesResponseOutputWithContext(ctx context.Context) ParentPropertiesResponseOutput {
	return o
}

// The resource ID of the parent to which the connected registry will be associated.
func (o ParentPropertiesResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentPropertiesResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The sync properties of the connected registry with its parent.
func (o ParentPropertiesResponseOutput) SyncProperties() SyncPropertiesResponseOutput {
	return o.ApplyT(func(v ParentPropertiesResponse) SyncPropertiesResponse { return v.SyncProperties }).(SyncPropertiesResponseOutput)
}

// The request properties provided for a pipeline run.
type PipelineRunRequest struct {
	// List of source artifacts to be transferred by the pipeline.
	// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
	// Specify an image by tag ('hello-world:latest').
	// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
	Artifacts []string `pulumi:"artifacts"`
	// The digest of the tar used to transfer the artifacts.
	CatalogDigest *string `pulumi:"catalogDigest"`
	// The resource ID of the pipeline to run.
	PipelineResourceId *string `pulumi:"pipelineResourceId"`
	// The source properties of the pipeline run.
	Source *PipelineRunSourceProperties `pulumi:"source"`
	// The target properties of the pipeline run.
	Target *PipelineRunTargetProperties `pulumi:"target"`
}

// Defaults sets the appropriate defaults for PipelineRunRequest
func (val *PipelineRunRequest) Defaults() *PipelineRunRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Source = tmp.Source.Defaults()

	tmp.Target = tmp.Target.Defaults()

	return &tmp
}

// PipelineRunRequestInput is an input type that accepts PipelineRunRequestArgs and PipelineRunRequestOutput values.
// You can construct a concrete instance of `PipelineRunRequestInput` via:
//
//	PipelineRunRequestArgs{...}
type PipelineRunRequestInput interface {
	pulumi.Input

	ToPipelineRunRequestOutput() PipelineRunRequestOutput
	ToPipelineRunRequestOutputWithContext(context.Context) PipelineRunRequestOutput
}

// The request properties provided for a pipeline run.
type PipelineRunRequestArgs struct {
	// List of source artifacts to be transferred by the pipeline.
	// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
	// Specify an image by tag ('hello-world:latest').
	// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
	Artifacts pulumi.StringArrayInput `pulumi:"artifacts"`
	// The digest of the tar used to transfer the artifacts.
	CatalogDigest pulumi.StringPtrInput `pulumi:"catalogDigest"`
	// The resource ID of the pipeline to run.
	PipelineResourceId pulumi.StringPtrInput `pulumi:"pipelineResourceId"`
	// The source properties of the pipeline run.
	Source PipelineRunSourcePropertiesPtrInput `pulumi:"source"`
	// The target properties of the pipeline run.
	Target PipelineRunTargetPropertiesPtrInput `pulumi:"target"`
}

// Defaults sets the appropriate defaults for PipelineRunRequestArgs
func (val *PipelineRunRequestArgs) Defaults() *PipelineRunRequestArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (PipelineRunRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunRequest)(nil)).Elem()
}

func (i PipelineRunRequestArgs) ToPipelineRunRequestOutput() PipelineRunRequestOutput {
	return i.ToPipelineRunRequestOutputWithContext(context.Background())
}

func (i PipelineRunRequestArgs) ToPipelineRunRequestOutputWithContext(ctx context.Context) PipelineRunRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunRequestOutput)
}

func (i PipelineRunRequestArgs) ToPipelineRunRequestPtrOutput() PipelineRunRequestPtrOutput {
	return i.ToPipelineRunRequestPtrOutputWithContext(context.Background())
}

func (i PipelineRunRequestArgs) ToPipelineRunRequestPtrOutputWithContext(ctx context.Context) PipelineRunRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunRequestOutput).ToPipelineRunRequestPtrOutputWithContext(ctx)
}

// PipelineRunRequestPtrInput is an input type that accepts PipelineRunRequestArgs, PipelineRunRequestPtr and PipelineRunRequestPtrOutput values.
// You can construct a concrete instance of `PipelineRunRequestPtrInput` via:
//
//	        PipelineRunRequestArgs{...}
//
//	or:
//
//	        nil
type PipelineRunRequestPtrInput interface {
	pulumi.Input

	ToPipelineRunRequestPtrOutput() PipelineRunRequestPtrOutput
	ToPipelineRunRequestPtrOutputWithContext(context.Context) PipelineRunRequestPtrOutput
}

type pipelineRunRequestPtrType PipelineRunRequestArgs

func PipelineRunRequestPtr(v *PipelineRunRequestArgs) PipelineRunRequestPtrInput {
	return (*pipelineRunRequestPtrType)(v)
}

func (*pipelineRunRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunRequest)(nil)).Elem()
}

func (i *pipelineRunRequestPtrType) ToPipelineRunRequestPtrOutput() PipelineRunRequestPtrOutput {
	return i.ToPipelineRunRequestPtrOutputWithContext(context.Background())
}

func (i *pipelineRunRequestPtrType) ToPipelineRunRequestPtrOutputWithContext(ctx context.Context) PipelineRunRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunRequestPtrOutput)
}

// The request properties provided for a pipeline run.
type PipelineRunRequestOutput struct{ *pulumi.OutputState }

func (PipelineRunRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunRequest)(nil)).Elem()
}

func (o PipelineRunRequestOutput) ToPipelineRunRequestOutput() PipelineRunRequestOutput {
	return o
}

func (o PipelineRunRequestOutput) ToPipelineRunRequestOutputWithContext(ctx context.Context) PipelineRunRequestOutput {
	return o
}

func (o PipelineRunRequestOutput) ToPipelineRunRequestPtrOutput() PipelineRunRequestPtrOutput {
	return o.ToPipelineRunRequestPtrOutputWithContext(context.Background())
}

func (o PipelineRunRequestOutput) ToPipelineRunRequestPtrOutputWithContext(ctx context.Context) PipelineRunRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineRunRequest) *PipelineRunRequest {
		return &v
	}).(PipelineRunRequestPtrOutput)
}

// List of source artifacts to be transferred by the pipeline.
// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
// Specify an image by tag ('hello-world:latest').
// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
func (o PipelineRunRequestOutput) Artifacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineRunRequest) []string { return v.Artifacts }).(pulumi.StringArrayOutput)
}

// The digest of the tar used to transfer the artifacts.
func (o PipelineRunRequestOutput) CatalogDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunRequest) *string { return v.CatalogDigest }).(pulumi.StringPtrOutput)
}

// The resource ID of the pipeline to run.
func (o PipelineRunRequestOutput) PipelineResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunRequest) *string { return v.PipelineResourceId }).(pulumi.StringPtrOutput)
}

// The source properties of the pipeline run.
func (o PipelineRunRequestOutput) Source() PipelineRunSourcePropertiesPtrOutput {
	return o.ApplyT(func(v PipelineRunRequest) *PipelineRunSourceProperties { return v.Source }).(PipelineRunSourcePropertiesPtrOutput)
}

// The target properties of the pipeline run.
func (o PipelineRunRequestOutput) Target() PipelineRunTargetPropertiesPtrOutput {
	return o.ApplyT(func(v PipelineRunRequest) *PipelineRunTargetProperties { return v.Target }).(PipelineRunTargetPropertiesPtrOutput)
}

type PipelineRunRequestPtrOutput struct{ *pulumi.OutputState }

func (PipelineRunRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunRequest)(nil)).Elem()
}

func (o PipelineRunRequestPtrOutput) ToPipelineRunRequestPtrOutput() PipelineRunRequestPtrOutput {
	return o
}

func (o PipelineRunRequestPtrOutput) ToPipelineRunRequestPtrOutputWithContext(ctx context.Context) PipelineRunRequestPtrOutput {
	return o
}

func (o PipelineRunRequestPtrOutput) Elem() PipelineRunRequestOutput {
	return o.ApplyT(func(v *PipelineRunRequest) PipelineRunRequest {
		if v != nil {
			return *v
		}
		var ret PipelineRunRequest
		return ret
	}).(PipelineRunRequestOutput)
}

// List of source artifacts to be transferred by the pipeline.
// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
// Specify an image by tag ('hello-world:latest').
// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
func (o PipelineRunRequestPtrOutput) Artifacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineRunRequest) []string {
		if v == nil {
			return nil
		}
		return v.Artifacts
	}).(pulumi.StringArrayOutput)
}

// The digest of the tar used to transfer the artifacts.
func (o PipelineRunRequestPtrOutput) CatalogDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.CatalogDigest
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the pipeline to run.
func (o PipelineRunRequestPtrOutput) PipelineResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.PipelineResourceId
	}).(pulumi.StringPtrOutput)
}

// The source properties of the pipeline run.
func (o PipelineRunRequestPtrOutput) Source() PipelineRunSourcePropertiesPtrOutput {
	return o.ApplyT(func(v *PipelineRunRequest) *PipelineRunSourceProperties {
		if v == nil {
			return nil
		}
		return v.Source
	}).(PipelineRunSourcePropertiesPtrOutput)
}

// The target properties of the pipeline run.
func (o PipelineRunRequestPtrOutput) Target() PipelineRunTargetPropertiesPtrOutput {
	return o.ApplyT(func(v *PipelineRunRequest) *PipelineRunTargetProperties {
		if v == nil {
			return nil
		}
		return v.Target
	}).(PipelineRunTargetPropertiesPtrOutput)
}

// The request properties provided for a pipeline run.
type PipelineRunRequestResponse struct {
	// List of source artifacts to be transferred by the pipeline.
	// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
	// Specify an image by tag ('hello-world:latest').
	// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
	Artifacts []string `pulumi:"artifacts"`
	// The digest of the tar used to transfer the artifacts.
	CatalogDigest *string `pulumi:"catalogDigest"`
	// The resource ID of the pipeline to run.
	PipelineResourceId *string `pulumi:"pipelineResourceId"`
	// The source properties of the pipeline run.
	Source *PipelineRunSourcePropertiesResponse `pulumi:"source"`
	// The target properties of the pipeline run.
	Target *PipelineRunTargetPropertiesResponse `pulumi:"target"`
}

// Defaults sets the appropriate defaults for PipelineRunRequestResponse
func (val *PipelineRunRequestResponse) Defaults() *PipelineRunRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Source = tmp.Source.Defaults()

	tmp.Target = tmp.Target.Defaults()

	return &tmp
}

// The request properties provided for a pipeline run.
type PipelineRunRequestResponseOutput struct{ *pulumi.OutputState }

func (PipelineRunRequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunRequestResponse)(nil)).Elem()
}

func (o PipelineRunRequestResponseOutput) ToPipelineRunRequestResponseOutput() PipelineRunRequestResponseOutput {
	return o
}

func (o PipelineRunRequestResponseOutput) ToPipelineRunRequestResponseOutputWithContext(ctx context.Context) PipelineRunRequestResponseOutput {
	return o
}

// List of source artifacts to be transferred by the pipeline.
// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
// Specify an image by tag ('hello-world:latest').
// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
func (o PipelineRunRequestResponseOutput) Artifacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineRunRequestResponse) []string { return v.Artifacts }).(pulumi.StringArrayOutput)
}

// The digest of the tar used to transfer the artifacts.
func (o PipelineRunRequestResponseOutput) CatalogDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunRequestResponse) *string { return v.CatalogDigest }).(pulumi.StringPtrOutput)
}

// The resource ID of the pipeline to run.
func (o PipelineRunRequestResponseOutput) PipelineResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunRequestResponse) *string { return v.PipelineResourceId }).(pulumi.StringPtrOutput)
}

// The source properties of the pipeline run.
func (o PipelineRunRequestResponseOutput) Source() PipelineRunSourcePropertiesResponsePtrOutput {
	return o.ApplyT(func(v PipelineRunRequestResponse) *PipelineRunSourcePropertiesResponse { return v.Source }).(PipelineRunSourcePropertiesResponsePtrOutput)
}

// The target properties of the pipeline run.
func (o PipelineRunRequestResponseOutput) Target() PipelineRunTargetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PipelineRunRequestResponse) *PipelineRunTargetPropertiesResponse { return v.Target }).(PipelineRunTargetPropertiesResponsePtrOutput)
}

type PipelineRunRequestResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineRunRequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunRequestResponse)(nil)).Elem()
}

func (o PipelineRunRequestResponsePtrOutput) ToPipelineRunRequestResponsePtrOutput() PipelineRunRequestResponsePtrOutput {
	return o
}

func (o PipelineRunRequestResponsePtrOutput) ToPipelineRunRequestResponsePtrOutputWithContext(ctx context.Context) PipelineRunRequestResponsePtrOutput {
	return o
}

func (o PipelineRunRequestResponsePtrOutput) Elem() PipelineRunRequestResponseOutput {
	return o.ApplyT(func(v *PipelineRunRequestResponse) PipelineRunRequestResponse {
		if v != nil {
			return *v
		}
		var ret PipelineRunRequestResponse
		return ret
	}).(PipelineRunRequestResponseOutput)
}

// List of source artifacts to be transferred by the pipeline.
// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
// Specify an image by tag ('hello-world:latest').
// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
func (o PipelineRunRequestResponsePtrOutput) Artifacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineRunRequestResponse) []string {
		if v == nil {
			return nil
		}
		return v.Artifacts
	}).(pulumi.StringArrayOutput)
}

// The digest of the tar used to transfer the artifacts.
func (o PipelineRunRequestResponsePtrOutput) CatalogDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogDigest
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the pipeline to run.
func (o PipelineRunRequestResponsePtrOutput) PipelineResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.PipelineResourceId
	}).(pulumi.StringPtrOutput)
}

// The source properties of the pipeline run.
func (o PipelineRunRequestResponsePtrOutput) Source() PipelineRunSourcePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *PipelineRunRequestResponse) *PipelineRunSourcePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Source
	}).(PipelineRunSourcePropertiesResponsePtrOutput)
}

// The target properties of the pipeline run.
func (o PipelineRunRequestResponsePtrOutput) Target() PipelineRunTargetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *PipelineRunRequestResponse) *PipelineRunTargetPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Target
	}).(PipelineRunTargetPropertiesResponsePtrOutput)
}

// The response properties returned for a pipeline run.
type PipelineRunResponseResponse struct {
	// The digest of the tar used to transfer the artifacts.
	CatalogDigest *string `pulumi:"catalogDigest"`
	// The time the pipeline run finished.
	FinishTime *string `pulumi:"finishTime"`
	// The artifacts imported in the pipeline run.
	ImportedArtifacts []string `pulumi:"importedArtifacts"`
	// The detailed error message for the pipeline run in the case of failure.
	PipelineRunErrorMessage *string `pulumi:"pipelineRunErrorMessage"`
	// The current progress of the copy operation.
	Progress *ProgressPropertiesResponse `pulumi:"progress"`
	// The source of the pipeline run.
	Source *ImportPipelineSourcePropertiesResponse `pulumi:"source"`
	// The time the pipeline run started.
	StartTime *string `pulumi:"startTime"`
	// The current status of the pipeline run.
	Status *string `pulumi:"status"`
	// The target of the pipeline run.
	Target *ExportPipelineTargetPropertiesResponse `pulumi:"target"`
	// The trigger that caused the pipeline run.
	Trigger *PipelineTriggerDescriptorResponse `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for PipelineRunResponseResponse
func (val *PipelineRunResponseResponse) Defaults() *PipelineRunResponseResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Source = tmp.Source.Defaults()

	return &tmp
}

// The response properties returned for a pipeline run.
type PipelineRunResponseResponseOutput struct{ *pulumi.OutputState }

func (PipelineRunResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunResponseResponse)(nil)).Elem()
}

func (o PipelineRunResponseResponseOutput) ToPipelineRunResponseResponseOutput() PipelineRunResponseResponseOutput {
	return o
}

func (o PipelineRunResponseResponseOutput) ToPipelineRunResponseResponseOutputWithContext(ctx context.Context) PipelineRunResponseResponseOutput {
	return o
}

// The digest of the tar used to transfer the artifacts.
func (o PipelineRunResponseResponseOutput) CatalogDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *string { return v.CatalogDigest }).(pulumi.StringPtrOutput)
}

// The time the pipeline run finished.
func (o PipelineRunResponseResponseOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// The artifacts imported in the pipeline run.
func (o PipelineRunResponseResponseOutput) ImportedArtifacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) []string { return v.ImportedArtifacts }).(pulumi.StringArrayOutput)
}

// The detailed error message for the pipeline run in the case of failure.
func (o PipelineRunResponseResponseOutput) PipelineRunErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *string { return v.PipelineRunErrorMessage }).(pulumi.StringPtrOutput)
}

// The current progress of the copy operation.
func (o PipelineRunResponseResponseOutput) Progress() ProgressPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *ProgressPropertiesResponse { return v.Progress }).(ProgressPropertiesResponsePtrOutput)
}

// The source of the pipeline run.
func (o PipelineRunResponseResponseOutput) Source() ImportPipelineSourcePropertiesResponsePtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *ImportPipelineSourcePropertiesResponse { return v.Source }).(ImportPipelineSourcePropertiesResponsePtrOutput)
}

// The time the pipeline run started.
func (o PipelineRunResponseResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The current status of the pipeline run.
func (o PipelineRunResponseResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The target of the pipeline run.
func (o PipelineRunResponseResponseOutput) Target() ExportPipelineTargetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *ExportPipelineTargetPropertiesResponse { return v.Target }).(ExportPipelineTargetPropertiesResponsePtrOutput)
}

// The trigger that caused the pipeline run.
func (o PipelineRunResponseResponseOutput) Trigger() PipelineTriggerDescriptorResponsePtrOutput {
	return o.ApplyT(func(v PipelineRunResponseResponse) *PipelineTriggerDescriptorResponse { return v.Trigger }).(PipelineTriggerDescriptorResponsePtrOutput)
}

type PipelineRunSourceProperties struct {
	// The name of the source.
	Name *string `pulumi:"name"`
	// The type of the source.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for PipelineRunSourceProperties
func (val *PipelineRunSourceProperties) Defaults() *PipelineRunSourceProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		type_ := "AzureStorageBlob"
		tmp.Type = &type_
	}
	return &tmp
}

// PipelineRunSourcePropertiesInput is an input type that accepts PipelineRunSourcePropertiesArgs and PipelineRunSourcePropertiesOutput values.
// You can construct a concrete instance of `PipelineRunSourcePropertiesInput` via:
//
//	PipelineRunSourcePropertiesArgs{...}
type PipelineRunSourcePropertiesInput interface {
	pulumi.Input

	ToPipelineRunSourcePropertiesOutput() PipelineRunSourcePropertiesOutput
	ToPipelineRunSourcePropertiesOutputWithContext(context.Context) PipelineRunSourcePropertiesOutput
}

type PipelineRunSourcePropertiesArgs struct {
	// The name of the source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the source.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for PipelineRunSourcePropertiesArgs
func (val *PipelineRunSourcePropertiesArgs) Defaults() *PipelineRunSourcePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		tmp.Type = pulumi.StringPtr("AzureStorageBlob")
	}
	return &tmp
}
func (PipelineRunSourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunSourceProperties)(nil)).Elem()
}

func (i PipelineRunSourcePropertiesArgs) ToPipelineRunSourcePropertiesOutput() PipelineRunSourcePropertiesOutput {
	return i.ToPipelineRunSourcePropertiesOutputWithContext(context.Background())
}

func (i PipelineRunSourcePropertiesArgs) ToPipelineRunSourcePropertiesOutputWithContext(ctx context.Context) PipelineRunSourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunSourcePropertiesOutput)
}

func (i PipelineRunSourcePropertiesArgs) ToPipelineRunSourcePropertiesPtrOutput() PipelineRunSourcePropertiesPtrOutput {
	return i.ToPipelineRunSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i PipelineRunSourcePropertiesArgs) ToPipelineRunSourcePropertiesPtrOutputWithContext(ctx context.Context) PipelineRunSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunSourcePropertiesOutput).ToPipelineRunSourcePropertiesPtrOutputWithContext(ctx)
}

// PipelineRunSourcePropertiesPtrInput is an input type that accepts PipelineRunSourcePropertiesArgs, PipelineRunSourcePropertiesPtr and PipelineRunSourcePropertiesPtrOutput values.
// You can construct a concrete instance of `PipelineRunSourcePropertiesPtrInput` via:
//
//	        PipelineRunSourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type PipelineRunSourcePropertiesPtrInput interface {
	pulumi.Input

	ToPipelineRunSourcePropertiesPtrOutput() PipelineRunSourcePropertiesPtrOutput
	ToPipelineRunSourcePropertiesPtrOutputWithContext(context.Context) PipelineRunSourcePropertiesPtrOutput
}

type pipelineRunSourcePropertiesPtrType PipelineRunSourcePropertiesArgs

func PipelineRunSourcePropertiesPtr(v *PipelineRunSourcePropertiesArgs) PipelineRunSourcePropertiesPtrInput {
	return (*pipelineRunSourcePropertiesPtrType)(v)
}

func (*pipelineRunSourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunSourceProperties)(nil)).Elem()
}

func (i *pipelineRunSourcePropertiesPtrType) ToPipelineRunSourcePropertiesPtrOutput() PipelineRunSourcePropertiesPtrOutput {
	return i.ToPipelineRunSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelineRunSourcePropertiesPtrType) ToPipelineRunSourcePropertiesPtrOutputWithContext(ctx context.Context) PipelineRunSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunSourcePropertiesPtrOutput)
}

type PipelineRunSourcePropertiesOutput struct{ *pulumi.OutputState }

func (PipelineRunSourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunSourceProperties)(nil)).Elem()
}

func (o PipelineRunSourcePropertiesOutput) ToPipelineRunSourcePropertiesOutput() PipelineRunSourcePropertiesOutput {
	return o
}

func (o PipelineRunSourcePropertiesOutput) ToPipelineRunSourcePropertiesOutputWithContext(ctx context.Context) PipelineRunSourcePropertiesOutput {
	return o
}

func (o PipelineRunSourcePropertiesOutput) ToPipelineRunSourcePropertiesPtrOutput() PipelineRunSourcePropertiesPtrOutput {
	return o.ToPipelineRunSourcePropertiesPtrOutputWithContext(context.Background())
}

func (o PipelineRunSourcePropertiesOutput) ToPipelineRunSourcePropertiesPtrOutputWithContext(ctx context.Context) PipelineRunSourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineRunSourceProperties) *PipelineRunSourceProperties {
		return &v
	}).(PipelineRunSourcePropertiesPtrOutput)
}

// The name of the source.
func (o PipelineRunSourcePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunSourceProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the source.
func (o PipelineRunSourcePropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunSourceProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PipelineRunSourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineRunSourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunSourceProperties)(nil)).Elem()
}

func (o PipelineRunSourcePropertiesPtrOutput) ToPipelineRunSourcePropertiesPtrOutput() PipelineRunSourcePropertiesPtrOutput {
	return o
}

func (o PipelineRunSourcePropertiesPtrOutput) ToPipelineRunSourcePropertiesPtrOutputWithContext(ctx context.Context) PipelineRunSourcePropertiesPtrOutput {
	return o
}

func (o PipelineRunSourcePropertiesPtrOutput) Elem() PipelineRunSourcePropertiesOutput {
	return o.ApplyT(func(v *PipelineRunSourceProperties) PipelineRunSourceProperties {
		if v != nil {
			return *v
		}
		var ret PipelineRunSourceProperties
		return ret
	}).(PipelineRunSourcePropertiesOutput)
}

// The name of the source.
func (o PipelineRunSourcePropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunSourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the source.
func (o PipelineRunSourcePropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunSourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineRunSourcePropertiesResponse struct {
	// The name of the source.
	Name *string `pulumi:"name"`
	// The type of the source.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for PipelineRunSourcePropertiesResponse
func (val *PipelineRunSourcePropertiesResponse) Defaults() *PipelineRunSourcePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		type_ := "AzureStorageBlob"
		tmp.Type = &type_
	}
	return &tmp
}

type PipelineRunSourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (PipelineRunSourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunSourcePropertiesResponse)(nil)).Elem()
}

func (o PipelineRunSourcePropertiesResponseOutput) ToPipelineRunSourcePropertiesResponseOutput() PipelineRunSourcePropertiesResponseOutput {
	return o
}

func (o PipelineRunSourcePropertiesResponseOutput) ToPipelineRunSourcePropertiesResponseOutputWithContext(ctx context.Context) PipelineRunSourcePropertiesResponseOutput {
	return o
}

// The name of the source.
func (o PipelineRunSourcePropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunSourcePropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the source.
func (o PipelineRunSourcePropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunSourcePropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PipelineRunSourcePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineRunSourcePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunSourcePropertiesResponse)(nil)).Elem()
}

func (o PipelineRunSourcePropertiesResponsePtrOutput) ToPipelineRunSourcePropertiesResponsePtrOutput() PipelineRunSourcePropertiesResponsePtrOutput {
	return o
}

func (o PipelineRunSourcePropertiesResponsePtrOutput) ToPipelineRunSourcePropertiesResponsePtrOutputWithContext(ctx context.Context) PipelineRunSourcePropertiesResponsePtrOutput {
	return o
}

func (o PipelineRunSourcePropertiesResponsePtrOutput) Elem() PipelineRunSourcePropertiesResponseOutput {
	return o.ApplyT(func(v *PipelineRunSourcePropertiesResponse) PipelineRunSourcePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PipelineRunSourcePropertiesResponse
		return ret
	}).(PipelineRunSourcePropertiesResponseOutput)
}

// The name of the source.
func (o PipelineRunSourcePropertiesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunSourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the source.
func (o PipelineRunSourcePropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunSourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineRunTargetProperties struct {
	// The name of the target.
	Name *string `pulumi:"name"`
	// The type of the target.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for PipelineRunTargetProperties
func (val *PipelineRunTargetProperties) Defaults() *PipelineRunTargetProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		type_ := "AzureStorageBlob"
		tmp.Type = &type_
	}
	return &tmp
}

// PipelineRunTargetPropertiesInput is an input type that accepts PipelineRunTargetPropertiesArgs and PipelineRunTargetPropertiesOutput values.
// You can construct a concrete instance of `PipelineRunTargetPropertiesInput` via:
//
//	PipelineRunTargetPropertiesArgs{...}
type PipelineRunTargetPropertiesInput interface {
	pulumi.Input

	ToPipelineRunTargetPropertiesOutput() PipelineRunTargetPropertiesOutput
	ToPipelineRunTargetPropertiesOutputWithContext(context.Context) PipelineRunTargetPropertiesOutput
}

type PipelineRunTargetPropertiesArgs struct {
	// The name of the target.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the target.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for PipelineRunTargetPropertiesArgs
func (val *PipelineRunTargetPropertiesArgs) Defaults() *PipelineRunTargetPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		tmp.Type = pulumi.StringPtr("AzureStorageBlob")
	}
	return &tmp
}
func (PipelineRunTargetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunTargetProperties)(nil)).Elem()
}

func (i PipelineRunTargetPropertiesArgs) ToPipelineRunTargetPropertiesOutput() PipelineRunTargetPropertiesOutput {
	return i.ToPipelineRunTargetPropertiesOutputWithContext(context.Background())
}

func (i PipelineRunTargetPropertiesArgs) ToPipelineRunTargetPropertiesOutputWithContext(ctx context.Context) PipelineRunTargetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunTargetPropertiesOutput)
}

func (i PipelineRunTargetPropertiesArgs) ToPipelineRunTargetPropertiesPtrOutput() PipelineRunTargetPropertiesPtrOutput {
	return i.ToPipelineRunTargetPropertiesPtrOutputWithContext(context.Background())
}

func (i PipelineRunTargetPropertiesArgs) ToPipelineRunTargetPropertiesPtrOutputWithContext(ctx context.Context) PipelineRunTargetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunTargetPropertiesOutput).ToPipelineRunTargetPropertiesPtrOutputWithContext(ctx)
}

// PipelineRunTargetPropertiesPtrInput is an input type that accepts PipelineRunTargetPropertiesArgs, PipelineRunTargetPropertiesPtr and PipelineRunTargetPropertiesPtrOutput values.
// You can construct a concrete instance of `PipelineRunTargetPropertiesPtrInput` via:
//
//	        PipelineRunTargetPropertiesArgs{...}
//
//	or:
//
//	        nil
type PipelineRunTargetPropertiesPtrInput interface {
	pulumi.Input

	ToPipelineRunTargetPropertiesPtrOutput() PipelineRunTargetPropertiesPtrOutput
	ToPipelineRunTargetPropertiesPtrOutputWithContext(context.Context) PipelineRunTargetPropertiesPtrOutput
}

type pipelineRunTargetPropertiesPtrType PipelineRunTargetPropertiesArgs

func PipelineRunTargetPropertiesPtr(v *PipelineRunTargetPropertiesArgs) PipelineRunTargetPropertiesPtrInput {
	return (*pipelineRunTargetPropertiesPtrType)(v)
}

func (*pipelineRunTargetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunTargetProperties)(nil)).Elem()
}

func (i *pipelineRunTargetPropertiesPtrType) ToPipelineRunTargetPropertiesPtrOutput() PipelineRunTargetPropertiesPtrOutput {
	return i.ToPipelineRunTargetPropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelineRunTargetPropertiesPtrType) ToPipelineRunTargetPropertiesPtrOutputWithContext(ctx context.Context) PipelineRunTargetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunTargetPropertiesPtrOutput)
}

type PipelineRunTargetPropertiesOutput struct{ *pulumi.OutputState }

func (PipelineRunTargetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunTargetProperties)(nil)).Elem()
}

func (o PipelineRunTargetPropertiesOutput) ToPipelineRunTargetPropertiesOutput() PipelineRunTargetPropertiesOutput {
	return o
}

func (o PipelineRunTargetPropertiesOutput) ToPipelineRunTargetPropertiesOutputWithContext(ctx context.Context) PipelineRunTargetPropertiesOutput {
	return o
}

func (o PipelineRunTargetPropertiesOutput) ToPipelineRunTargetPropertiesPtrOutput() PipelineRunTargetPropertiesPtrOutput {
	return o.ToPipelineRunTargetPropertiesPtrOutputWithContext(context.Background())
}

func (o PipelineRunTargetPropertiesOutput) ToPipelineRunTargetPropertiesPtrOutputWithContext(ctx context.Context) PipelineRunTargetPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineRunTargetProperties) *PipelineRunTargetProperties {
		return &v
	}).(PipelineRunTargetPropertiesPtrOutput)
}

// The name of the target.
func (o PipelineRunTargetPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunTargetProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the target.
func (o PipelineRunTargetPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunTargetProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PipelineRunTargetPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineRunTargetPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunTargetProperties)(nil)).Elem()
}

func (o PipelineRunTargetPropertiesPtrOutput) ToPipelineRunTargetPropertiesPtrOutput() PipelineRunTargetPropertiesPtrOutput {
	return o
}

func (o PipelineRunTargetPropertiesPtrOutput) ToPipelineRunTargetPropertiesPtrOutputWithContext(ctx context.Context) PipelineRunTargetPropertiesPtrOutput {
	return o
}

func (o PipelineRunTargetPropertiesPtrOutput) Elem() PipelineRunTargetPropertiesOutput {
	return o.ApplyT(func(v *PipelineRunTargetProperties) PipelineRunTargetProperties {
		if v != nil {
			return *v
		}
		var ret PipelineRunTargetProperties
		return ret
	}).(PipelineRunTargetPropertiesOutput)
}

// The name of the target.
func (o PipelineRunTargetPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunTargetProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the target.
func (o PipelineRunTargetPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunTargetProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineRunTargetPropertiesResponse struct {
	// The name of the target.
	Name *string `pulumi:"name"`
	// The type of the target.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for PipelineRunTargetPropertiesResponse
func (val *PipelineRunTargetPropertiesResponse) Defaults() *PipelineRunTargetPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		type_ := "AzureStorageBlob"
		tmp.Type = &type_
	}
	return &tmp
}

type PipelineRunTargetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PipelineRunTargetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRunTargetPropertiesResponse)(nil)).Elem()
}

func (o PipelineRunTargetPropertiesResponseOutput) ToPipelineRunTargetPropertiesResponseOutput() PipelineRunTargetPropertiesResponseOutput {
	return o
}

func (o PipelineRunTargetPropertiesResponseOutput) ToPipelineRunTargetPropertiesResponseOutputWithContext(ctx context.Context) PipelineRunTargetPropertiesResponseOutput {
	return o
}

// The name of the target.
func (o PipelineRunTargetPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunTargetPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the target.
func (o PipelineRunTargetPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRunTargetPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PipelineRunTargetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineRunTargetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRunTargetPropertiesResponse)(nil)).Elem()
}

func (o PipelineRunTargetPropertiesResponsePtrOutput) ToPipelineRunTargetPropertiesResponsePtrOutput() PipelineRunTargetPropertiesResponsePtrOutput {
	return o
}

func (o PipelineRunTargetPropertiesResponsePtrOutput) ToPipelineRunTargetPropertiesResponsePtrOutputWithContext(ctx context.Context) PipelineRunTargetPropertiesResponsePtrOutput {
	return o
}

func (o PipelineRunTargetPropertiesResponsePtrOutput) Elem() PipelineRunTargetPropertiesResponseOutput {
	return o.ApplyT(func(v *PipelineRunTargetPropertiesResponse) PipelineRunTargetPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PipelineRunTargetPropertiesResponse
		return ret
	}).(PipelineRunTargetPropertiesResponseOutput)
}

// The name of the target.
func (o PipelineRunTargetPropertiesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunTargetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the target.
func (o PipelineRunTargetPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRunTargetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineSourceTriggerDescriptorResponse struct {
	// The timestamp when the source update happened.
	Timestamp *string `pulumi:"timestamp"`
}

type PipelineSourceTriggerDescriptorResponseOutput struct{ *pulumi.OutputState }

func (PipelineSourceTriggerDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSourceTriggerDescriptorResponse)(nil)).Elem()
}

func (o PipelineSourceTriggerDescriptorResponseOutput) ToPipelineSourceTriggerDescriptorResponseOutput() PipelineSourceTriggerDescriptorResponseOutput {
	return o
}

func (o PipelineSourceTriggerDescriptorResponseOutput) ToPipelineSourceTriggerDescriptorResponseOutputWithContext(ctx context.Context) PipelineSourceTriggerDescriptorResponseOutput {
	return o
}

// The timestamp when the source update happened.
func (o PipelineSourceTriggerDescriptorResponseOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSourceTriggerDescriptorResponse) *string { return v.Timestamp }).(pulumi.StringPtrOutput)
}

type PipelineSourceTriggerDescriptorResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineSourceTriggerDescriptorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSourceTriggerDescriptorResponse)(nil)).Elem()
}

func (o PipelineSourceTriggerDescriptorResponsePtrOutput) ToPipelineSourceTriggerDescriptorResponsePtrOutput() PipelineSourceTriggerDescriptorResponsePtrOutput {
	return o
}

func (o PipelineSourceTriggerDescriptorResponsePtrOutput) ToPipelineSourceTriggerDescriptorResponsePtrOutputWithContext(ctx context.Context) PipelineSourceTriggerDescriptorResponsePtrOutput {
	return o
}

func (o PipelineSourceTriggerDescriptorResponsePtrOutput) Elem() PipelineSourceTriggerDescriptorResponseOutput {
	return o.ApplyT(func(v *PipelineSourceTriggerDescriptorResponse) PipelineSourceTriggerDescriptorResponse {
		if v != nil {
			return *v
		}
		var ret PipelineSourceTriggerDescriptorResponse
		return ret
	}).(PipelineSourceTriggerDescriptorResponseOutput)
}

// The timestamp when the source update happened.
func (o PipelineSourceTriggerDescriptorResponsePtrOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timestamp
	}).(pulumi.StringPtrOutput)
}

type PipelineSourceTriggerProperties struct {
	// The current status of the source trigger.
	Status string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for PipelineSourceTriggerProperties
func (val *PipelineSourceTriggerProperties) Defaults() *PipelineSourceTriggerProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = "Enabled"
	}
	return &tmp
}

// PipelineSourceTriggerPropertiesInput is an input type that accepts PipelineSourceTriggerPropertiesArgs and PipelineSourceTriggerPropertiesOutput values.
// You can construct a concrete instance of `PipelineSourceTriggerPropertiesInput` via:
//
//	PipelineSourceTriggerPropertiesArgs{...}
type PipelineSourceTriggerPropertiesInput interface {
	pulumi.Input

	ToPipelineSourceTriggerPropertiesOutput() PipelineSourceTriggerPropertiesOutput
	ToPipelineSourceTriggerPropertiesOutputWithContext(context.Context) PipelineSourceTriggerPropertiesOutput
}

type PipelineSourceTriggerPropertiesArgs struct {
	// The current status of the source trigger.
	Status pulumi.StringInput `pulumi:"status"`
}

// Defaults sets the appropriate defaults for PipelineSourceTriggerPropertiesArgs
func (val *PipelineSourceTriggerPropertiesArgs) Defaults() *PipelineSourceTriggerPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = pulumi.String("Enabled")
	}
	return &tmp
}
func (PipelineSourceTriggerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSourceTriggerProperties)(nil)).Elem()
}

func (i PipelineSourceTriggerPropertiesArgs) ToPipelineSourceTriggerPropertiesOutput() PipelineSourceTriggerPropertiesOutput {
	return i.ToPipelineSourceTriggerPropertiesOutputWithContext(context.Background())
}

func (i PipelineSourceTriggerPropertiesArgs) ToPipelineSourceTriggerPropertiesOutputWithContext(ctx context.Context) PipelineSourceTriggerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSourceTriggerPropertiesOutput)
}

func (i PipelineSourceTriggerPropertiesArgs) ToPipelineSourceTriggerPropertiesPtrOutput() PipelineSourceTriggerPropertiesPtrOutput {
	return i.ToPipelineSourceTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i PipelineSourceTriggerPropertiesArgs) ToPipelineSourceTriggerPropertiesPtrOutputWithContext(ctx context.Context) PipelineSourceTriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSourceTriggerPropertiesOutput).ToPipelineSourceTriggerPropertiesPtrOutputWithContext(ctx)
}

// PipelineSourceTriggerPropertiesPtrInput is an input type that accepts PipelineSourceTriggerPropertiesArgs, PipelineSourceTriggerPropertiesPtr and PipelineSourceTriggerPropertiesPtrOutput values.
// You can construct a concrete instance of `PipelineSourceTriggerPropertiesPtrInput` via:
//
//	        PipelineSourceTriggerPropertiesArgs{...}
//
//	or:
//
//	        nil
type PipelineSourceTriggerPropertiesPtrInput interface {
	pulumi.Input

	ToPipelineSourceTriggerPropertiesPtrOutput() PipelineSourceTriggerPropertiesPtrOutput
	ToPipelineSourceTriggerPropertiesPtrOutputWithContext(context.Context) PipelineSourceTriggerPropertiesPtrOutput
}

type pipelineSourceTriggerPropertiesPtrType PipelineSourceTriggerPropertiesArgs

func PipelineSourceTriggerPropertiesPtr(v *PipelineSourceTriggerPropertiesArgs) PipelineSourceTriggerPropertiesPtrInput {
	return (*pipelineSourceTriggerPropertiesPtrType)(v)
}

func (*pipelineSourceTriggerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSourceTriggerProperties)(nil)).Elem()
}

func (i *pipelineSourceTriggerPropertiesPtrType) ToPipelineSourceTriggerPropertiesPtrOutput() PipelineSourceTriggerPropertiesPtrOutput {
	return i.ToPipelineSourceTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelineSourceTriggerPropertiesPtrType) ToPipelineSourceTriggerPropertiesPtrOutputWithContext(ctx context.Context) PipelineSourceTriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSourceTriggerPropertiesPtrOutput)
}

type PipelineSourceTriggerPropertiesOutput struct{ *pulumi.OutputState }

func (PipelineSourceTriggerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSourceTriggerProperties)(nil)).Elem()
}

func (o PipelineSourceTriggerPropertiesOutput) ToPipelineSourceTriggerPropertiesOutput() PipelineSourceTriggerPropertiesOutput {
	return o
}

func (o PipelineSourceTriggerPropertiesOutput) ToPipelineSourceTriggerPropertiesOutputWithContext(ctx context.Context) PipelineSourceTriggerPropertiesOutput {
	return o
}

func (o PipelineSourceTriggerPropertiesOutput) ToPipelineSourceTriggerPropertiesPtrOutput() PipelineSourceTriggerPropertiesPtrOutput {
	return o.ToPipelineSourceTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (o PipelineSourceTriggerPropertiesOutput) ToPipelineSourceTriggerPropertiesPtrOutputWithContext(ctx context.Context) PipelineSourceTriggerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineSourceTriggerProperties) *PipelineSourceTriggerProperties {
		return &v
	}).(PipelineSourceTriggerPropertiesPtrOutput)
}

// The current status of the source trigger.
func (o PipelineSourceTriggerPropertiesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineSourceTriggerProperties) string { return v.Status }).(pulumi.StringOutput)
}

type PipelineSourceTriggerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineSourceTriggerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSourceTriggerProperties)(nil)).Elem()
}

func (o PipelineSourceTriggerPropertiesPtrOutput) ToPipelineSourceTriggerPropertiesPtrOutput() PipelineSourceTriggerPropertiesPtrOutput {
	return o
}

func (o PipelineSourceTriggerPropertiesPtrOutput) ToPipelineSourceTriggerPropertiesPtrOutputWithContext(ctx context.Context) PipelineSourceTriggerPropertiesPtrOutput {
	return o
}

func (o PipelineSourceTriggerPropertiesPtrOutput) Elem() PipelineSourceTriggerPropertiesOutput {
	return o.ApplyT(func(v *PipelineSourceTriggerProperties) PipelineSourceTriggerProperties {
		if v != nil {
			return *v
		}
		var ret PipelineSourceTriggerProperties
		return ret
	}).(PipelineSourceTriggerPropertiesOutput)
}

// The current status of the source trigger.
func (o PipelineSourceTriggerPropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSourceTriggerProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type PipelineSourceTriggerPropertiesResponse struct {
	// The current status of the source trigger.
	Status string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for PipelineSourceTriggerPropertiesResponse
func (val *PipelineSourceTriggerPropertiesResponse) Defaults() *PipelineSourceTriggerPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = "Enabled"
	}
	return &tmp
}

type PipelineSourceTriggerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PipelineSourceTriggerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSourceTriggerPropertiesResponse)(nil)).Elem()
}

func (o PipelineSourceTriggerPropertiesResponseOutput) ToPipelineSourceTriggerPropertiesResponseOutput() PipelineSourceTriggerPropertiesResponseOutput {
	return o
}

func (o PipelineSourceTriggerPropertiesResponseOutput) ToPipelineSourceTriggerPropertiesResponseOutputWithContext(ctx context.Context) PipelineSourceTriggerPropertiesResponseOutput {
	return o
}

// The current status of the source trigger.
func (o PipelineSourceTriggerPropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineSourceTriggerPropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type PipelineSourceTriggerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineSourceTriggerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSourceTriggerPropertiesResponse)(nil)).Elem()
}

func (o PipelineSourceTriggerPropertiesResponsePtrOutput) ToPipelineSourceTriggerPropertiesResponsePtrOutput() PipelineSourceTriggerPropertiesResponsePtrOutput {
	return o
}

func (o PipelineSourceTriggerPropertiesResponsePtrOutput) ToPipelineSourceTriggerPropertiesResponsePtrOutputWithContext(ctx context.Context) PipelineSourceTriggerPropertiesResponsePtrOutput {
	return o
}

func (o PipelineSourceTriggerPropertiesResponsePtrOutput) Elem() PipelineSourceTriggerPropertiesResponseOutput {
	return o.ApplyT(func(v *PipelineSourceTriggerPropertiesResponse) PipelineSourceTriggerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PipelineSourceTriggerPropertiesResponse
		return ret
	}).(PipelineSourceTriggerPropertiesResponseOutput)
}

// The current status of the source trigger.
func (o PipelineSourceTriggerPropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSourceTriggerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type PipelineTriggerDescriptorResponse struct {
	// The source trigger that caused the pipeline run.
	SourceTrigger *PipelineSourceTriggerDescriptorResponse `pulumi:"sourceTrigger"`
}

type PipelineTriggerDescriptorResponseOutput struct{ *pulumi.OutputState }

func (PipelineTriggerDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTriggerDescriptorResponse)(nil)).Elem()
}

func (o PipelineTriggerDescriptorResponseOutput) ToPipelineTriggerDescriptorResponseOutput() PipelineTriggerDescriptorResponseOutput {
	return o
}

func (o PipelineTriggerDescriptorResponseOutput) ToPipelineTriggerDescriptorResponseOutputWithContext(ctx context.Context) PipelineTriggerDescriptorResponseOutput {
	return o
}

// The source trigger that caused the pipeline run.
func (o PipelineTriggerDescriptorResponseOutput) SourceTrigger() PipelineSourceTriggerDescriptorResponsePtrOutput {
	return o.ApplyT(func(v PipelineTriggerDescriptorResponse) *PipelineSourceTriggerDescriptorResponse {
		return v.SourceTrigger
	}).(PipelineSourceTriggerDescriptorResponsePtrOutput)
}

type PipelineTriggerDescriptorResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineTriggerDescriptorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineTriggerDescriptorResponse)(nil)).Elem()
}

func (o PipelineTriggerDescriptorResponsePtrOutput) ToPipelineTriggerDescriptorResponsePtrOutput() PipelineTriggerDescriptorResponsePtrOutput {
	return o
}

func (o PipelineTriggerDescriptorResponsePtrOutput) ToPipelineTriggerDescriptorResponsePtrOutputWithContext(ctx context.Context) PipelineTriggerDescriptorResponsePtrOutput {
	return o
}

func (o PipelineTriggerDescriptorResponsePtrOutput) Elem() PipelineTriggerDescriptorResponseOutput {
	return o.ApplyT(func(v *PipelineTriggerDescriptorResponse) PipelineTriggerDescriptorResponse {
		if v != nil {
			return *v
		}
		var ret PipelineTriggerDescriptorResponse
		return ret
	}).(PipelineTriggerDescriptorResponseOutput)
}

// The source trigger that caused the pipeline run.
func (o PipelineTriggerDescriptorResponsePtrOutput) SourceTrigger() PipelineSourceTriggerDescriptorResponsePtrOutput {
	return o.ApplyT(func(v *PipelineTriggerDescriptorResponse) *PipelineSourceTriggerDescriptorResponse {
		if v == nil {
			return nil
		}
		return v.SourceTrigger
	}).(PipelineSourceTriggerDescriptorResponsePtrOutput)
}

type PipelineTriggerProperties struct {
	// The source trigger properties of the pipeline.
	SourceTrigger *PipelineSourceTriggerProperties `pulumi:"sourceTrigger"`
}

// Defaults sets the appropriate defaults for PipelineTriggerProperties
func (val *PipelineTriggerProperties) Defaults() *PipelineTriggerProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceTrigger = tmp.SourceTrigger.Defaults()

	return &tmp
}

// PipelineTriggerPropertiesInput is an input type that accepts PipelineTriggerPropertiesArgs and PipelineTriggerPropertiesOutput values.
// You can construct a concrete instance of `PipelineTriggerPropertiesInput` via:
//
//	PipelineTriggerPropertiesArgs{...}
type PipelineTriggerPropertiesInput interface {
	pulumi.Input

	ToPipelineTriggerPropertiesOutput() PipelineTriggerPropertiesOutput
	ToPipelineTriggerPropertiesOutputWithContext(context.Context) PipelineTriggerPropertiesOutput
}

type PipelineTriggerPropertiesArgs struct {
	// The source trigger properties of the pipeline.
	SourceTrigger PipelineSourceTriggerPropertiesPtrInput `pulumi:"sourceTrigger"`
}

// Defaults sets the appropriate defaults for PipelineTriggerPropertiesArgs
func (val *PipelineTriggerPropertiesArgs) Defaults() *PipelineTriggerPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (PipelineTriggerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTriggerProperties)(nil)).Elem()
}

func (i PipelineTriggerPropertiesArgs) ToPipelineTriggerPropertiesOutput() PipelineTriggerPropertiesOutput {
	return i.ToPipelineTriggerPropertiesOutputWithContext(context.Background())
}

func (i PipelineTriggerPropertiesArgs) ToPipelineTriggerPropertiesOutputWithContext(ctx context.Context) PipelineTriggerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTriggerPropertiesOutput)
}

func (i PipelineTriggerPropertiesArgs) ToPipelineTriggerPropertiesPtrOutput() PipelineTriggerPropertiesPtrOutput {
	return i.ToPipelineTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i PipelineTriggerPropertiesArgs) ToPipelineTriggerPropertiesPtrOutputWithContext(ctx context.Context) PipelineTriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTriggerPropertiesOutput).ToPipelineTriggerPropertiesPtrOutputWithContext(ctx)
}

// PipelineTriggerPropertiesPtrInput is an input type that accepts PipelineTriggerPropertiesArgs, PipelineTriggerPropertiesPtr and PipelineTriggerPropertiesPtrOutput values.
// You can construct a concrete instance of `PipelineTriggerPropertiesPtrInput` via:
//
//	        PipelineTriggerPropertiesArgs{...}
//
//	or:
//
//	        nil
type PipelineTriggerPropertiesPtrInput interface {
	pulumi.Input

	ToPipelineTriggerPropertiesPtrOutput() PipelineTriggerPropertiesPtrOutput
	ToPipelineTriggerPropertiesPtrOutputWithContext(context.Context) PipelineTriggerPropertiesPtrOutput
}

type pipelineTriggerPropertiesPtrType PipelineTriggerPropertiesArgs

func PipelineTriggerPropertiesPtr(v *PipelineTriggerPropertiesArgs) PipelineTriggerPropertiesPtrInput {
	return (*pipelineTriggerPropertiesPtrType)(v)
}

func (*pipelineTriggerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineTriggerProperties)(nil)).Elem()
}

func (i *pipelineTriggerPropertiesPtrType) ToPipelineTriggerPropertiesPtrOutput() PipelineTriggerPropertiesPtrOutput {
	return i.ToPipelineTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelineTriggerPropertiesPtrType) ToPipelineTriggerPropertiesPtrOutputWithContext(ctx context.Context) PipelineTriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTriggerPropertiesPtrOutput)
}

type PipelineTriggerPropertiesOutput struct{ *pulumi.OutputState }

func (PipelineTriggerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTriggerProperties)(nil)).Elem()
}

func (o PipelineTriggerPropertiesOutput) ToPipelineTriggerPropertiesOutput() PipelineTriggerPropertiesOutput {
	return o
}

func (o PipelineTriggerPropertiesOutput) ToPipelineTriggerPropertiesOutputWithContext(ctx context.Context) PipelineTriggerPropertiesOutput {
	return o
}

func (o PipelineTriggerPropertiesOutput) ToPipelineTriggerPropertiesPtrOutput() PipelineTriggerPropertiesPtrOutput {
	return o.ToPipelineTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (o PipelineTriggerPropertiesOutput) ToPipelineTriggerPropertiesPtrOutputWithContext(ctx context.Context) PipelineTriggerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineTriggerProperties) *PipelineTriggerProperties {
		return &v
	}).(PipelineTriggerPropertiesPtrOutput)
}

// The source trigger properties of the pipeline.
func (o PipelineTriggerPropertiesOutput) SourceTrigger() PipelineSourceTriggerPropertiesPtrOutput {
	return o.ApplyT(func(v PipelineTriggerProperties) *PipelineSourceTriggerProperties { return v.SourceTrigger }).(PipelineSourceTriggerPropertiesPtrOutput)
}

type PipelineTriggerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineTriggerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineTriggerProperties)(nil)).Elem()
}

func (o PipelineTriggerPropertiesPtrOutput) ToPipelineTriggerPropertiesPtrOutput() PipelineTriggerPropertiesPtrOutput {
	return o
}

func (o PipelineTriggerPropertiesPtrOutput) ToPipelineTriggerPropertiesPtrOutputWithContext(ctx context.Context) PipelineTriggerPropertiesPtrOutput {
	return o
}

func (o PipelineTriggerPropertiesPtrOutput) Elem() PipelineTriggerPropertiesOutput {
	return o.ApplyT(func(v *PipelineTriggerProperties) PipelineTriggerProperties {
		if v != nil {
			return *v
		}
		var ret PipelineTriggerProperties
		return ret
	}).(PipelineTriggerPropertiesOutput)
}

// The source trigger properties of the pipeline.
func (o PipelineTriggerPropertiesPtrOutput) SourceTrigger() PipelineSourceTriggerPropertiesPtrOutput {
	return o.ApplyT(func(v *PipelineTriggerProperties) *PipelineSourceTriggerProperties {
		if v == nil {
			return nil
		}
		return v.SourceTrigger
	}).(PipelineSourceTriggerPropertiesPtrOutput)
}

type PipelineTriggerPropertiesResponse struct {
	// The source trigger properties of the pipeline.
	SourceTrigger *PipelineSourceTriggerPropertiesResponse `pulumi:"sourceTrigger"`
}

// Defaults sets the appropriate defaults for PipelineTriggerPropertiesResponse
func (val *PipelineTriggerPropertiesResponse) Defaults() *PipelineTriggerPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceTrigger = tmp.SourceTrigger.Defaults()

	return &tmp
}

type PipelineTriggerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PipelineTriggerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTriggerPropertiesResponse)(nil)).Elem()
}

func (o PipelineTriggerPropertiesResponseOutput) ToPipelineTriggerPropertiesResponseOutput() PipelineTriggerPropertiesResponseOutput {
	return o
}

func (o PipelineTriggerPropertiesResponseOutput) ToPipelineTriggerPropertiesResponseOutputWithContext(ctx context.Context) PipelineTriggerPropertiesResponseOutput {
	return o
}

// The source trigger properties of the pipeline.
func (o PipelineTriggerPropertiesResponseOutput) SourceTrigger() PipelineSourceTriggerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PipelineTriggerPropertiesResponse) *PipelineSourceTriggerPropertiesResponse {
		return v.SourceTrigger
	}).(PipelineSourceTriggerPropertiesResponsePtrOutput)
}

type PipelineTriggerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineTriggerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineTriggerPropertiesResponse)(nil)).Elem()
}

func (o PipelineTriggerPropertiesResponsePtrOutput) ToPipelineTriggerPropertiesResponsePtrOutput() PipelineTriggerPropertiesResponsePtrOutput {
	return o
}

func (o PipelineTriggerPropertiesResponsePtrOutput) ToPipelineTriggerPropertiesResponsePtrOutputWithContext(ctx context.Context) PipelineTriggerPropertiesResponsePtrOutput {
	return o
}

func (o PipelineTriggerPropertiesResponsePtrOutput) Elem() PipelineTriggerPropertiesResponseOutput {
	return o.ApplyT(func(v *PipelineTriggerPropertiesResponse) PipelineTriggerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PipelineTriggerPropertiesResponse
		return ret
	}).(PipelineTriggerPropertiesResponseOutput)
}

// The source trigger properties of the pipeline.
func (o PipelineTriggerPropertiesResponsePtrOutput) SourceTrigger() PipelineSourceTriggerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *PipelineTriggerPropertiesResponse) *PipelineSourceTriggerPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.SourceTrigger
	}).(PipelineSourceTriggerPropertiesResponsePtrOutput)
}

// The platform properties against which the run has to happen.
type PlatformProperties struct {
	// The OS architecture.
	Architecture *string `pulumi:"architecture"`
	// The operating system type required for the run.
	Os string `pulumi:"os"`
	// Variant of the CPU.
	Variant *string `pulumi:"variant"`
}

// PlatformPropertiesInput is an input type that accepts PlatformPropertiesArgs and PlatformPropertiesOutput values.
// You can construct a concrete instance of `PlatformPropertiesInput` via:
//
//	PlatformPropertiesArgs{...}
type PlatformPropertiesInput interface {
	pulumi.Input

	ToPlatformPropertiesOutput() PlatformPropertiesOutput
	ToPlatformPropertiesOutputWithContext(context.Context) PlatformPropertiesOutput
}

// The platform properties against which the run has to happen.
type PlatformPropertiesArgs struct {
	// The OS architecture.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The operating system type required for the run.
	Os pulumi.StringInput `pulumi:"os"`
	// Variant of the CPU.
	Variant pulumi.StringPtrInput `pulumi:"variant"`
}

func (PlatformPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformProperties)(nil)).Elem()
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesOutput() PlatformPropertiesOutput {
	return i.ToPlatformPropertiesOutputWithContext(context.Background())
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesOutputWithContext(ctx context.Context) PlatformPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesOutput)
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return i.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesOutput).ToPlatformPropertiesPtrOutputWithContext(ctx)
}

// PlatformPropertiesPtrInput is an input type that accepts PlatformPropertiesArgs, PlatformPropertiesPtr and PlatformPropertiesPtrOutput values.
// You can construct a concrete instance of `PlatformPropertiesPtrInput` via:
//
//	        PlatformPropertiesArgs{...}
//
//	or:
//
//	        nil
type PlatformPropertiesPtrInput interface {
	pulumi.Input

	ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput
	ToPlatformPropertiesPtrOutputWithContext(context.Context) PlatformPropertiesPtrOutput
}

type platformPropertiesPtrType PlatformPropertiesArgs

func PlatformPropertiesPtr(v *PlatformPropertiesArgs) PlatformPropertiesPtrInput {
	return (*platformPropertiesPtrType)(v)
}

func (*platformPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformProperties)(nil)).Elem()
}

func (i *platformPropertiesPtrType) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return i.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (i *platformPropertiesPtrType) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesPtrOutput)
}

// The platform properties against which the run has to happen.
type PlatformPropertiesOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformProperties)(nil)).Elem()
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesOutput() PlatformPropertiesOutput {
	return o
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesOutputWithContext(ctx context.Context) PlatformPropertiesOutput {
	return o
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return o.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlatformProperties) *PlatformProperties {
		return &v
	}).(PlatformPropertiesPtrOutput)
}

// The OS architecture.
func (o PlatformPropertiesOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformProperties) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The operating system type required for the run.
func (o PlatformPropertiesOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformProperties) string { return v.Os }).(pulumi.StringOutput)
}

// Variant of the CPU.
func (o PlatformPropertiesOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformProperties) *string { return v.Variant }).(pulumi.StringPtrOutput)
}

type PlatformPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformProperties)(nil)).Elem()
}

func (o PlatformPropertiesPtrOutput) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return o
}

func (o PlatformPropertiesPtrOutput) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return o
}

func (o PlatformPropertiesPtrOutput) Elem() PlatformPropertiesOutput {
	return o.ApplyT(func(v *PlatformProperties) PlatformProperties {
		if v != nil {
			return *v
		}
		var ret PlatformProperties
		return ret
	}).(PlatformPropertiesOutput)
}

// The OS architecture.
func (o PlatformPropertiesPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformProperties) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The operating system type required for the run.
func (o PlatformPropertiesPtrOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Os
	}).(pulumi.StringPtrOutput)
}

// Variant of the CPU.
func (o PlatformPropertiesPtrOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformProperties) *string {
		if v == nil {
			return nil
		}
		return v.Variant
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
type PlatformPropertiesResponse struct {
	// The OS architecture.
	Architecture *string `pulumi:"architecture"`
	// The operating system type required for the run.
	Os string `pulumi:"os"`
	// Variant of the CPU.
	Variant *string `pulumi:"variant"`
}

// The platform properties against which the run has to happen.
type PlatformPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformPropertiesResponse)(nil)).Elem()
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponseOutput() PlatformPropertiesResponseOutput {
	return o
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponseOutputWithContext(ctx context.Context) PlatformPropertiesResponseOutput {
	return o
}

// The OS architecture.
func (o PlatformPropertiesResponseOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The operating system type required for the run.
func (o PlatformPropertiesResponseOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) string { return v.Os }).(pulumi.StringOutput)
}

// Variant of the CPU.
func (o PlatformPropertiesResponseOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) *string { return v.Variant }).(pulumi.StringPtrOutput)
}

type PlatformPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformPropertiesResponse)(nil)).Elem()
}

func (o PlatformPropertiesResponsePtrOutput) ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput {
	return o
}

func (o PlatformPropertiesResponsePtrOutput) ToPlatformPropertiesResponsePtrOutputWithContext(ctx context.Context) PlatformPropertiesResponsePtrOutput {
	return o
}

func (o PlatformPropertiesResponsePtrOutput) Elem() PlatformPropertiesResponseOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) PlatformPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PlatformPropertiesResponse
		return ret
	}).(PlatformPropertiesResponseOutput)
}

// The OS architecture.
func (o PlatformPropertiesResponsePtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The operating system type required for the run.
func (o PlatformPropertiesResponsePtrOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Os
	}).(pulumi.StringPtrOutput)
}

// Variant of the CPU.
func (o PlatformPropertiesResponsePtrOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Variant
	}).(pulumi.StringPtrOutput)
}

// The policies for a container registry.
type Policies struct {
	// The quarantine policy for a container registry.
	QuarantinePolicy *QuarantinePolicy `pulumi:"quarantinePolicy"`
	// The retention policy for a container registry.
	RetentionPolicy *RetentionPolicy `pulumi:"retentionPolicy"`
	// The content trust policy for a container registry.
	TrustPolicy *TrustPolicy `pulumi:"trustPolicy"`
}

// Defaults sets the appropriate defaults for Policies
func (val *Policies) Defaults() *Policies {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.QuarantinePolicy = tmp.QuarantinePolicy.Defaults()

	tmp.RetentionPolicy = tmp.RetentionPolicy.Defaults()

	tmp.TrustPolicy = tmp.TrustPolicy.Defaults()

	return &tmp
}

// PoliciesInput is an input type that accepts PoliciesArgs and PoliciesOutput values.
// You can construct a concrete instance of `PoliciesInput` via:
//
//	PoliciesArgs{...}
type PoliciesInput interface {
	pulumi.Input

	ToPoliciesOutput() PoliciesOutput
	ToPoliciesOutputWithContext(context.Context) PoliciesOutput
}

// The policies for a container registry.
type PoliciesArgs struct {
	// The quarantine policy for a container registry.
	QuarantinePolicy QuarantinePolicyPtrInput `pulumi:"quarantinePolicy"`
	// The retention policy for a container registry.
	RetentionPolicy RetentionPolicyPtrInput `pulumi:"retentionPolicy"`
	// The content trust policy for a container registry.
	TrustPolicy TrustPolicyPtrInput `pulumi:"trustPolicy"`
}

// Defaults sets the appropriate defaults for PoliciesArgs
func (val *PoliciesArgs) Defaults() *PoliciesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (PoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policies)(nil)).Elem()
}

func (i PoliciesArgs) ToPoliciesOutput() PoliciesOutput {
	return i.ToPoliciesOutputWithContext(context.Background())
}

func (i PoliciesArgs) ToPoliciesOutputWithContext(ctx context.Context) PoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesOutput)
}

func (i PoliciesArgs) ToPoliciesPtrOutput() PoliciesPtrOutput {
	return i.ToPoliciesPtrOutputWithContext(context.Background())
}

func (i PoliciesArgs) ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesOutput).ToPoliciesPtrOutputWithContext(ctx)
}

// PoliciesPtrInput is an input type that accepts PoliciesArgs, PoliciesPtr and PoliciesPtrOutput values.
// You can construct a concrete instance of `PoliciesPtrInput` via:
//
//	        PoliciesArgs{...}
//
//	or:
//
//	        nil
type PoliciesPtrInput interface {
	pulumi.Input

	ToPoliciesPtrOutput() PoliciesPtrOutput
	ToPoliciesPtrOutputWithContext(context.Context) PoliciesPtrOutput
}

type policiesPtrType PoliciesArgs

func PoliciesPtr(v *PoliciesArgs) PoliciesPtrInput {
	return (*policiesPtrType)(v)
}

func (*policiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policies)(nil)).Elem()
}

func (i *policiesPtrType) ToPoliciesPtrOutput() PoliciesPtrOutput {
	return i.ToPoliciesPtrOutputWithContext(context.Background())
}

func (i *policiesPtrType) ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesPtrOutput)
}

// The policies for a container registry.
type PoliciesOutput struct{ *pulumi.OutputState }

func (PoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policies)(nil)).Elem()
}

func (o PoliciesOutput) ToPoliciesOutput() PoliciesOutput {
	return o
}

func (o PoliciesOutput) ToPoliciesOutputWithContext(ctx context.Context) PoliciesOutput {
	return o
}

func (o PoliciesOutput) ToPoliciesPtrOutput() PoliciesPtrOutput {
	return o.ToPoliciesPtrOutputWithContext(context.Background())
}

func (o PoliciesOutput) ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Policies) *Policies {
		return &v
	}).(PoliciesPtrOutput)
}

// The quarantine policy for a container registry.
func (o PoliciesOutput) QuarantinePolicy() QuarantinePolicyPtrOutput {
	return o.ApplyT(func(v Policies) *QuarantinePolicy { return v.QuarantinePolicy }).(QuarantinePolicyPtrOutput)
}

// The retention policy for a container registry.
func (o PoliciesOutput) RetentionPolicy() RetentionPolicyPtrOutput {
	return o.ApplyT(func(v Policies) *RetentionPolicy { return v.RetentionPolicy }).(RetentionPolicyPtrOutput)
}

// The content trust policy for a container registry.
func (o PoliciesOutput) TrustPolicy() TrustPolicyPtrOutput {
	return o.ApplyT(func(v Policies) *TrustPolicy { return v.TrustPolicy }).(TrustPolicyPtrOutput)
}

type PoliciesPtrOutput struct{ *pulumi.OutputState }

func (PoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policies)(nil)).Elem()
}

func (o PoliciesPtrOutput) ToPoliciesPtrOutput() PoliciesPtrOutput {
	return o
}

func (o PoliciesPtrOutput) ToPoliciesPtrOutputWithContext(ctx context.Context) PoliciesPtrOutput {
	return o
}

func (o PoliciesPtrOutput) Elem() PoliciesOutput {
	return o.ApplyT(func(v *Policies) Policies {
		if v != nil {
			return *v
		}
		var ret Policies
		return ret
	}).(PoliciesOutput)
}

// The quarantine policy for a container registry.
func (o PoliciesPtrOutput) QuarantinePolicy() QuarantinePolicyPtrOutput {
	return o.ApplyT(func(v *Policies) *QuarantinePolicy {
		if v == nil {
			return nil
		}
		return v.QuarantinePolicy
	}).(QuarantinePolicyPtrOutput)
}

// The retention policy for a container registry.
func (o PoliciesPtrOutput) RetentionPolicy() RetentionPolicyPtrOutput {
	return o.ApplyT(func(v *Policies) *RetentionPolicy {
		if v == nil {
			return nil
		}
		return v.RetentionPolicy
	}).(RetentionPolicyPtrOutput)
}

// The content trust policy for a container registry.
func (o PoliciesPtrOutput) TrustPolicy() TrustPolicyPtrOutput {
	return o.ApplyT(func(v *Policies) *TrustPolicy {
		if v == nil {
			return nil
		}
		return v.TrustPolicy
	}).(TrustPolicyPtrOutput)
}

// The policies for a container registry.
type PoliciesResponse struct {
	// The quarantine policy for a container registry.
	QuarantinePolicy *QuarantinePolicyResponse `pulumi:"quarantinePolicy"`
	// The retention policy for a container registry.
	RetentionPolicy *RetentionPolicyResponse `pulumi:"retentionPolicy"`
	// The content trust policy for a container registry.
	TrustPolicy *TrustPolicyResponse `pulumi:"trustPolicy"`
}

// Defaults sets the appropriate defaults for PoliciesResponse
func (val *PoliciesResponse) Defaults() *PoliciesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.QuarantinePolicy = tmp.QuarantinePolicy.Defaults()

	tmp.RetentionPolicy = tmp.RetentionPolicy.Defaults()

	tmp.TrustPolicy = tmp.TrustPolicy.Defaults()

	return &tmp
}

// The policies for a container registry.
type PoliciesResponseOutput struct{ *pulumi.OutputState }

func (PoliciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoliciesResponse)(nil)).Elem()
}

func (o PoliciesResponseOutput) ToPoliciesResponseOutput() PoliciesResponseOutput {
	return o
}

func (o PoliciesResponseOutput) ToPoliciesResponseOutputWithContext(ctx context.Context) PoliciesResponseOutput {
	return o
}

// The quarantine policy for a container registry.
func (o PoliciesResponseOutput) QuarantinePolicy() QuarantinePolicyResponsePtrOutput {
	return o.ApplyT(func(v PoliciesResponse) *QuarantinePolicyResponse { return v.QuarantinePolicy }).(QuarantinePolicyResponsePtrOutput)
}

// The retention policy for a container registry.
func (o PoliciesResponseOutput) RetentionPolicy() RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v PoliciesResponse) *RetentionPolicyResponse { return v.RetentionPolicy }).(RetentionPolicyResponsePtrOutput)
}

// The content trust policy for a container registry.
func (o PoliciesResponseOutput) TrustPolicy() TrustPolicyResponsePtrOutput {
	return o.ApplyT(func(v PoliciesResponse) *TrustPolicyResponse { return v.TrustPolicy }).(TrustPolicyResponsePtrOutput)
}

type PoliciesResponsePtrOutput struct{ *pulumi.OutputState }

func (PoliciesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoliciesResponse)(nil)).Elem()
}

func (o PoliciesResponsePtrOutput) ToPoliciesResponsePtrOutput() PoliciesResponsePtrOutput {
	return o
}

func (o PoliciesResponsePtrOutput) ToPoliciesResponsePtrOutputWithContext(ctx context.Context) PoliciesResponsePtrOutput {
	return o
}

func (o PoliciesResponsePtrOutput) Elem() PoliciesResponseOutput {
	return o.ApplyT(func(v *PoliciesResponse) PoliciesResponse {
		if v != nil {
			return *v
		}
		var ret PoliciesResponse
		return ret
	}).(PoliciesResponseOutput)
}

// The quarantine policy for a container registry.
func (o PoliciesResponsePtrOutput) QuarantinePolicy() QuarantinePolicyResponsePtrOutput {
	return o.ApplyT(func(v *PoliciesResponse) *QuarantinePolicyResponse {
		if v == nil {
			return nil
		}
		return v.QuarantinePolicy
	}).(QuarantinePolicyResponsePtrOutput)
}

// The retention policy for a container registry.
func (o PoliciesResponsePtrOutput) RetentionPolicy() RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v *PoliciesResponse) *RetentionPolicyResponse {
		if v == nil {
			return nil
		}
		return v.RetentionPolicy
	}).(RetentionPolicyResponsePtrOutput)
}

// The content trust policy for a container registry.
func (o PoliciesResponsePtrOutput) TrustPolicy() TrustPolicyResponsePtrOutput {
	return o.ApplyT(func(v *PoliciesResponse) *TrustPolicyResponse {
		if v == nil {
			return nil
		}
		return v.TrustPolicy
	}).(TrustPolicyResponsePtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpoint struct {
	// This is private endpoint resource created with Microsoft.Network resource provider.
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//	PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// The Private Endpoint resource.
type PrivateEndpointArgs struct {
	// This is private endpoint resource created with Microsoft.Network resource provider.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//	        PrivateEndpointArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

// This is private endpoint resource created with Microsoft.Network resource provider.
func (o PrivateEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint {
		if v != nil {
			return *v
		}
		var ret PrivateEndpoint
		return ret
	}).(PrivateEndpointOutput)
}

// This is private endpoint resource created with Microsoft.Network resource provider.
func (o PrivateEndpointPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// This is private endpoint resource created with Microsoft.Network resource provider.
	Id *string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// This is private endpoint resource created with Microsoft.Network resource provider.
func (o PrivateEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// This is private endpoint resource created with Microsoft.Network resource provider.
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The description for connection status. For example if connection is rejected it can indicate reason for rejection.
	Description *string `pulumi:"description"`
	// The private link service connection status.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The description for connection status. For example if connection is rejected it can indicate reason for rejection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The private link service connection status.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput).ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStatePtrInput is an input type that accepts PrivateLinkServiceConnectionStateArgs, PrivateLinkServiceConnectionStatePtr and PrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStatePtrInput` via:
//
//	        PrivateLinkServiceConnectionStateArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput
	ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStatePtrOutput
}

type privateLinkServiceConnectionStatePtrType PrivateLinkServiceConnectionStateArgs

func PrivateLinkServiceConnectionStatePtr(v *PrivateLinkServiceConnectionStateArgs) PrivateLinkServiceConnectionStatePtrInput {
	return (*privateLinkServiceConnectionStatePtrType)(v)
}

func (*privateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStatePtrOutput)
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkServiceConnectionState) *PrivateLinkServiceConnectionState {
		return &v
	}).(PrivateLinkServiceConnectionStatePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The description for connection status. For example if connection is rejected it can indicate reason for rejection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The private link service connection status.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) Elem() PrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) PrivateLinkServiceConnectionState {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionState
		return ret
	}).(PrivateLinkServiceConnectionStateOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The description for connection status. For example if connection is rejected it can indicate reason for rejection.
func (o PrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The private link service connection status.
func (o PrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The description for connection status. For example if connection is rejected it can indicate reason for rejection.
	Description *string `pulumi:"description"`
	// The private link service connection status.
	Status *string `pulumi:"status"`
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The description for connection status. For example if connection is rejected it can indicate reason for rejection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The private link service connection status.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionStateResponse
		return ret
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The description for connection status. For example if connection is rejected it can indicate reason for rejection.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The private link service connection status.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ProgressPropertiesResponse struct {
	// The percentage complete of the copy operation.
	Percentage *string `pulumi:"percentage"`
}

type ProgressPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProgressPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgressPropertiesResponse)(nil)).Elem()
}

func (o ProgressPropertiesResponseOutput) ToProgressPropertiesResponseOutput() ProgressPropertiesResponseOutput {
	return o
}

func (o ProgressPropertiesResponseOutput) ToProgressPropertiesResponseOutputWithContext(ctx context.Context) ProgressPropertiesResponseOutput {
	return o
}

// The percentage complete of the copy operation.
func (o ProgressPropertiesResponseOutput) Percentage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProgressPropertiesResponse) *string { return v.Percentage }).(pulumi.StringPtrOutput)
}

type ProgressPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ProgressPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProgressPropertiesResponse)(nil)).Elem()
}

func (o ProgressPropertiesResponsePtrOutput) ToProgressPropertiesResponsePtrOutput() ProgressPropertiesResponsePtrOutput {
	return o
}

func (o ProgressPropertiesResponsePtrOutput) ToProgressPropertiesResponsePtrOutputWithContext(ctx context.Context) ProgressPropertiesResponsePtrOutput {
	return o
}

func (o ProgressPropertiesResponsePtrOutput) Elem() ProgressPropertiesResponseOutput {
	return o.ApplyT(func(v *ProgressPropertiesResponse) ProgressPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ProgressPropertiesResponse
		return ret
	}).(ProgressPropertiesResponseOutput)
}

// The percentage complete of the copy operation.
func (o ProgressPropertiesResponsePtrOutput) Percentage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProgressPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.StringPtrOutput)
}

// The quarantine policy for a container registry.
type QuarantinePolicy struct {
	// The value that indicates whether the policy is enabled or not.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for QuarantinePolicy
func (val *QuarantinePolicy) Defaults() *QuarantinePolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "disabled"
		tmp.Status = &status_
	}
	return &tmp
}

// QuarantinePolicyInput is an input type that accepts QuarantinePolicyArgs and QuarantinePolicyOutput values.
// You can construct a concrete instance of `QuarantinePolicyInput` via:
//
//	QuarantinePolicyArgs{...}
type QuarantinePolicyInput interface {
	pulumi.Input

	ToQuarantinePolicyOutput() QuarantinePolicyOutput
	ToQuarantinePolicyOutputWithContext(context.Context) QuarantinePolicyOutput
}

// The quarantine policy for a container registry.
type QuarantinePolicyArgs struct {
	// The value that indicates whether the policy is enabled or not.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

// Defaults sets the appropriate defaults for QuarantinePolicyArgs
func (val *QuarantinePolicyArgs) Defaults() *QuarantinePolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = pulumi.StringPtr("disabled")
	}
	return &tmp
}
func (QuarantinePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantinePolicy)(nil)).Elem()
}

func (i QuarantinePolicyArgs) ToQuarantinePolicyOutput() QuarantinePolicyOutput {
	return i.ToQuarantinePolicyOutputWithContext(context.Background())
}

func (i QuarantinePolicyArgs) ToQuarantinePolicyOutputWithContext(ctx context.Context) QuarantinePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantinePolicyOutput)
}

func (i QuarantinePolicyArgs) ToQuarantinePolicyPtrOutput() QuarantinePolicyPtrOutput {
	return i.ToQuarantinePolicyPtrOutputWithContext(context.Background())
}

func (i QuarantinePolicyArgs) ToQuarantinePolicyPtrOutputWithContext(ctx context.Context) QuarantinePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantinePolicyOutput).ToQuarantinePolicyPtrOutputWithContext(ctx)
}

// QuarantinePolicyPtrInput is an input type that accepts QuarantinePolicyArgs, QuarantinePolicyPtr and QuarantinePolicyPtrOutput values.
// You can construct a concrete instance of `QuarantinePolicyPtrInput` via:
//
//	        QuarantinePolicyArgs{...}
//
//	or:
//
//	        nil
type QuarantinePolicyPtrInput interface {
	pulumi.Input

	ToQuarantinePolicyPtrOutput() QuarantinePolicyPtrOutput
	ToQuarantinePolicyPtrOutputWithContext(context.Context) QuarantinePolicyPtrOutput
}

type quarantinePolicyPtrType QuarantinePolicyArgs

func QuarantinePolicyPtr(v *QuarantinePolicyArgs) QuarantinePolicyPtrInput {
	return (*quarantinePolicyPtrType)(v)
}

func (*quarantinePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QuarantinePolicy)(nil)).Elem()
}

func (i *quarantinePolicyPtrType) ToQuarantinePolicyPtrOutput() QuarantinePolicyPtrOutput {
	return i.ToQuarantinePolicyPtrOutputWithContext(context.Background())
}

func (i *quarantinePolicyPtrType) ToQuarantinePolicyPtrOutputWithContext(ctx context.Context) QuarantinePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantinePolicyPtrOutput)
}

// The quarantine policy for a container registry.
type QuarantinePolicyOutput struct{ *pulumi.OutputState }

func (QuarantinePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantinePolicy)(nil)).Elem()
}

func (o QuarantinePolicyOutput) ToQuarantinePolicyOutput() QuarantinePolicyOutput {
	return o
}

func (o QuarantinePolicyOutput) ToQuarantinePolicyOutputWithContext(ctx context.Context) QuarantinePolicyOutput {
	return o
}

func (o QuarantinePolicyOutput) ToQuarantinePolicyPtrOutput() QuarantinePolicyPtrOutput {
	return o.ToQuarantinePolicyPtrOutputWithContext(context.Background())
}

func (o QuarantinePolicyOutput) ToQuarantinePolicyPtrOutputWithContext(ctx context.Context) QuarantinePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QuarantinePolicy) *QuarantinePolicy {
		return &v
	}).(QuarantinePolicyPtrOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o QuarantinePolicyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantinePolicy) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type QuarantinePolicyPtrOutput struct{ *pulumi.OutputState }

func (QuarantinePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuarantinePolicy)(nil)).Elem()
}

func (o QuarantinePolicyPtrOutput) ToQuarantinePolicyPtrOutput() QuarantinePolicyPtrOutput {
	return o
}

func (o QuarantinePolicyPtrOutput) ToQuarantinePolicyPtrOutputWithContext(ctx context.Context) QuarantinePolicyPtrOutput {
	return o
}

func (o QuarantinePolicyPtrOutput) Elem() QuarantinePolicyOutput {
	return o.ApplyT(func(v *QuarantinePolicy) QuarantinePolicy {
		if v != nil {
			return *v
		}
		var ret QuarantinePolicy
		return ret
	}).(QuarantinePolicyOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o QuarantinePolicyPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuarantinePolicy) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The quarantine policy for a container registry.
type QuarantinePolicyResponse struct {
	// The value that indicates whether the policy is enabled or not.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for QuarantinePolicyResponse
func (val *QuarantinePolicyResponse) Defaults() *QuarantinePolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "disabled"
		tmp.Status = &status_
	}
	return &tmp
}

// The quarantine policy for a container registry.
type QuarantinePolicyResponseOutput struct{ *pulumi.OutputState }

func (QuarantinePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantinePolicyResponse)(nil)).Elem()
}

func (o QuarantinePolicyResponseOutput) ToQuarantinePolicyResponseOutput() QuarantinePolicyResponseOutput {
	return o
}

func (o QuarantinePolicyResponseOutput) ToQuarantinePolicyResponseOutputWithContext(ctx context.Context) QuarantinePolicyResponseOutput {
	return o
}

// The value that indicates whether the policy is enabled or not.
func (o QuarantinePolicyResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantinePolicyResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type QuarantinePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (QuarantinePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuarantinePolicyResponse)(nil)).Elem()
}

func (o QuarantinePolicyResponsePtrOutput) ToQuarantinePolicyResponsePtrOutput() QuarantinePolicyResponsePtrOutput {
	return o
}

func (o QuarantinePolicyResponsePtrOutput) ToQuarantinePolicyResponsePtrOutputWithContext(ctx context.Context) QuarantinePolicyResponsePtrOutput {
	return o
}

func (o QuarantinePolicyResponsePtrOutput) Elem() QuarantinePolicyResponseOutput {
	return o.ApplyT(func(v *QuarantinePolicyResponse) QuarantinePolicyResponse {
		if v != nil {
			return *v
		}
		var ret QuarantinePolicyResponse
		return ret
	}).(QuarantinePolicyResponseOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o QuarantinePolicyResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuarantinePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The login password for the container registry.
type RegistryPasswordResponse struct {
	// The password name.
	Name *string `pulumi:"name"`
	// The password value.
	Value *string `pulumi:"value"`
}

// The login password for the container registry.
type RegistryPasswordResponseOutput struct{ *pulumi.OutputState }

func (RegistryPasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPasswordResponse)(nil)).Elem()
}

func (o RegistryPasswordResponseOutput) ToRegistryPasswordResponseOutput() RegistryPasswordResponseOutput {
	return o
}

func (o RegistryPasswordResponseOutput) ToRegistryPasswordResponseOutputWithContext(ctx context.Context) RegistryPasswordResponseOutput {
	return o
}

// The password name.
func (o RegistryPasswordResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPasswordResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password value.
func (o RegistryPasswordResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPasswordResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RegistryPasswordResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryPasswordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPasswordResponse)(nil)).Elem()
}

func (o RegistryPasswordResponseArrayOutput) ToRegistryPasswordResponseArrayOutput() RegistryPasswordResponseArrayOutput {
	return o
}

func (o RegistryPasswordResponseArrayOutput) ToRegistryPasswordResponseArrayOutputWithContext(ctx context.Context) RegistryPasswordResponseArrayOutput {
	return o
}

func (o RegistryPasswordResponseArrayOutput) Index(i pulumi.IntInput) RegistryPasswordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryPasswordResponse {
		return vs[0].([]RegistryPasswordResponse)[vs[1].(int)]
	}).(RegistryPasswordResponseOutput)
}

// The request that generated the event.
type RequestResponse struct {
	// The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
	Addr *string `pulumi:"addr"`
	// The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
	Host *string `pulumi:"host"`
	// The ID of the request that initiated the event.
	Id *string `pulumi:"id"`
	// The request method that generated the event.
	Method *string `pulumi:"method"`
	// The user agent header of the request.
	Useragent *string `pulumi:"useragent"`
}

// The request that generated the event.
type RequestResponseOutput struct{ *pulumi.OutputState }

func (RequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestResponse)(nil)).Elem()
}

func (o RequestResponseOutput) ToRequestResponseOutput() RequestResponseOutput {
	return o
}

func (o RequestResponseOutput) ToRequestResponseOutputWithContext(ctx context.Context) RequestResponseOutput {
	return o
}

// The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
func (o RequestResponseOutput) Addr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestResponse) *string { return v.Addr }).(pulumi.StringPtrOutput)
}

// The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
func (o RequestResponseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestResponse) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The ID of the request that initiated the event.
func (o RequestResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The request method that generated the event.
func (o RequestResponseOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestResponse) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The user agent header of the request.
func (o RequestResponseOutput) Useragent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestResponse) *string { return v.Useragent }).(pulumi.StringPtrOutput)
}

type RequestResponsePtrOutput struct{ *pulumi.OutputState }

func (RequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestResponse)(nil)).Elem()
}

func (o RequestResponsePtrOutput) ToRequestResponsePtrOutput() RequestResponsePtrOutput {
	return o
}

func (o RequestResponsePtrOutput) ToRequestResponsePtrOutputWithContext(ctx context.Context) RequestResponsePtrOutput {
	return o
}

func (o RequestResponsePtrOutput) Elem() RequestResponseOutput {
	return o.ApplyT(func(v *RequestResponse) RequestResponse {
		if v != nil {
			return *v
		}
		var ret RequestResponse
		return ret
	}).(RequestResponseOutput)
}

// The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
func (o RequestResponsePtrOutput) Addr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.Addr
	}).(pulumi.StringPtrOutput)
}

// The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
func (o RequestResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The ID of the request that initiated the event.
func (o RequestResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The request method that generated the event.
func (o RequestResponsePtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The user agent header of the request.
func (o RequestResponsePtrOutput) Useragent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.Useragent
	}).(pulumi.StringPtrOutput)
}

// The retention policy for a container registry.
type RetentionPolicy struct {
	// The number of days to retain an untagged manifest after which it gets purged.
	Days *int `pulumi:"days"`
	// The value that indicates whether the policy is enabled or not.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for RetentionPolicy
func (val *RetentionPolicy) Defaults() *RetentionPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Days) {
		days_ := 7
		tmp.Days = &days_
	}
	if isZero(tmp.Status) {
		status_ := "disabled"
		tmp.Status = &status_
	}
	return &tmp
}

// RetentionPolicyInput is an input type that accepts RetentionPolicyArgs and RetentionPolicyOutput values.
// You can construct a concrete instance of `RetentionPolicyInput` via:
//
//	RetentionPolicyArgs{...}
type RetentionPolicyInput interface {
	pulumi.Input

	ToRetentionPolicyOutput() RetentionPolicyOutput
	ToRetentionPolicyOutputWithContext(context.Context) RetentionPolicyOutput
}

// The retention policy for a container registry.
type RetentionPolicyArgs struct {
	// The number of days to retain an untagged manifest after which it gets purged.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// The value that indicates whether the policy is enabled or not.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

// Defaults sets the appropriate defaults for RetentionPolicyArgs
func (val *RetentionPolicyArgs) Defaults() *RetentionPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Days) {
		tmp.Days = pulumi.IntPtr(7)
	}
	if isZero(tmp.Status) {
		tmp.Status = pulumi.StringPtr("disabled")
	}
	return &tmp
}
func (RetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return i.ToRetentionPolicyOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput)
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput).ToRetentionPolicyPtrOutputWithContext(ctx)
}

// RetentionPolicyPtrInput is an input type that accepts RetentionPolicyArgs, RetentionPolicyPtr and RetentionPolicyPtrOutput values.
// You can construct a concrete instance of `RetentionPolicyPtrInput` via:
//
//	        RetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type RetentionPolicyPtrInput interface {
	pulumi.Input

	ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput
	ToRetentionPolicyPtrOutputWithContext(context.Context) RetentionPolicyPtrOutput
}

type retentionPolicyPtrType RetentionPolicyArgs

func RetentionPolicyPtr(v *RetentionPolicyArgs) RetentionPolicyPtrInput {
	return (*retentionPolicyPtrType)(v)
}

func (*retentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyPtrOutput)
}

// The retention policy for a container registry.
type RetentionPolicyOutput struct{ *pulumi.OutputState }

func (RetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetentionPolicy) *RetentionPolicy {
		return &v
	}).(RetentionPolicyPtrOutput)
}

// The number of days to retain an untagged manifest after which it gets purged.
func (o RetentionPolicyOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetentionPolicy) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o RetentionPolicyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionPolicy) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) Elem() RetentionPolicyOutput {
	return o.ApplyT(func(v *RetentionPolicy) RetentionPolicy {
		if v != nil {
			return *v
		}
		var ret RetentionPolicy
		return ret
	}).(RetentionPolicyOutput)
}

// The number of days to retain an untagged manifest after which it gets purged.
func (o RetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o RetentionPolicyPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The retention policy for a container registry.
type RetentionPolicyResponse struct {
	// The number of days to retain an untagged manifest after which it gets purged.
	Days *int `pulumi:"days"`
	// The timestamp when the policy was last updated.
	LastUpdatedTime string `pulumi:"lastUpdatedTime"`
	// The value that indicates whether the policy is enabled or not.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for RetentionPolicyResponse
func (val *RetentionPolicyResponse) Defaults() *RetentionPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Days) {
		days_ := 7
		tmp.Days = &days_
	}
	if isZero(tmp.Status) {
		status_ := "disabled"
		tmp.Status = &status_
	}
	return &tmp
}

// The retention policy for a container registry.
type RetentionPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput {
	return o
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutputWithContext(ctx context.Context) RetentionPolicyResponseOutput {
	return o
}

// The number of days to retain an untagged manifest after which it gets purged.
func (o RetentionPolicyResponseOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// The timestamp when the policy was last updated.
func (o RetentionPolicyResponseOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) string { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o RetentionPolicyResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RetentionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) Elem() RetentionPolicyResponseOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) RetentionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret RetentionPolicyResponse
		return ret
	}).(RetentionPolicyResponseOutput)
}

// The number of days to retain an untagged manifest after which it gets purged.
func (o RetentionPolicyResponsePtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

// The timestamp when the policy was last updated.
func (o RetentionPolicyResponsePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o RetentionPolicyResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Run resource properties
type RunResponse struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentPropertiesResponse `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The time the run was scheduled.
	CreateTime *string `pulumi:"createTime"`
	// The list of custom registries that were logged in during this run.
	CustomRegistries []string `pulumi:"customRegistries"`
	// The time the run finished.
	FinishTime *string `pulumi:"finishTime"`
	// The resource ID.
	Id string `pulumi:"id"`
	// The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
	ImageUpdateTrigger *ImageUpdateTriggerResponse `pulumi:"imageUpdateTrigger"`
	// The value that indicates whether archiving is enabled or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The last updated time for the run.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The image description for the log artifact.
	LogArtifact ImageDescriptorResponse `pulumi:"logArtifact"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
	OutputImages []ImageDescriptorResponse `pulumi:"outputImages"`
	// The platform properties against which the run will happen.
	Platform *PlatformPropertiesResponse `pulumi:"platform"`
	// The provisioning state of a run.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The error message received from backend systems after the run is scheduled.
	RunErrorMessage string `pulumi:"runErrorMessage"`
	// The unique identifier for the run.
	RunId *string `pulumi:"runId"`
	// The type of run.
	RunType *string `pulumi:"runType"`
	// The scope of the credentials that were used to login to the source registry during this run.
	SourceRegistryAuth *string `pulumi:"sourceRegistryAuth"`
	// The source trigger that caused the run.
	SourceTrigger *SourceTriggerDescriptorResponse `pulumi:"sourceTrigger"`
	// The time the run started.
	StartTime *string `pulumi:"startTime"`
	// The current status of the run.
	Status *string `pulumi:"status"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The task against which run was scheduled.
	Task *string `pulumi:"task"`
	// The timer trigger that caused the run.
	TimerTrigger *TimerTriggerDescriptorResponse `pulumi:"timerTrigger"`
	// The type of the resource.
	Type string `pulumi:"type"`
	// The update trigger token passed for the Run.
	UpdateTriggerToken *string `pulumi:"updateTriggerToken"`
}

// Defaults sets the appropriate defaults for RunResponse
func (val *RunResponse) Defaults() *RunResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	return &tmp
}

// Run resource properties
type RunResponseOutput struct{ *pulumi.OutputState }

func (RunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunResponse)(nil)).Elem()
}

func (o RunResponseOutput) ToRunResponseOutput() RunResponseOutput {
	return o
}

func (o RunResponseOutput) ToRunResponseOutputWithContext(ctx context.Context) RunResponseOutput {
	return o
}

// The machine configuration of the run agent.
func (o RunResponseOutput) AgentConfiguration() AgentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *AgentPropertiesResponse { return v.AgentConfiguration }).(AgentPropertiesResponsePtrOutput)
}

// The dedicated agent pool for the run.
func (o RunResponseOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The time the run was scheduled.
func (o RunResponseOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// The list of custom registries that were logged in during this run.
func (o RunResponseOutput) CustomRegistries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RunResponse) []string { return v.CustomRegistries }).(pulumi.StringArrayOutput)
}

// The time the run finished.
func (o RunResponseOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// The resource ID.
func (o RunResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RunResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
func (o RunResponseOutput) ImageUpdateTrigger() ImageUpdateTriggerResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *ImageUpdateTriggerResponse { return v.ImageUpdateTrigger }).(ImageUpdateTriggerResponsePtrOutput)
}

// The value that indicates whether archiving is enabled or not.
func (o RunResponseOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RunResponse) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The last updated time for the run.
func (o RunResponseOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The image description for the log artifact.
func (o RunResponseOutput) LogArtifact() ImageDescriptorResponseOutput {
	return o.ApplyT(func(v RunResponse) ImageDescriptorResponse { return v.LogArtifact }).(ImageDescriptorResponseOutput)
}

// The name of the resource.
func (o RunResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RunResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
func (o RunResponseOutput) OutputImages() ImageDescriptorResponseArrayOutput {
	return o.ApplyT(func(v RunResponse) []ImageDescriptorResponse { return v.OutputImages }).(ImageDescriptorResponseArrayOutput)
}

// The platform properties against which the run will happen.
func (o RunResponseOutput) Platform() PlatformPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *PlatformPropertiesResponse { return v.Platform }).(PlatformPropertiesResponsePtrOutput)
}

// The provisioning state of a run.
func (o RunResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The error message received from backend systems after the run is scheduled.
func (o RunResponseOutput) RunErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v RunResponse) string { return v.RunErrorMessage }).(pulumi.StringOutput)
}

// The unique identifier for the run.
func (o RunResponseOutput) RunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.RunId }).(pulumi.StringPtrOutput)
}

// The type of run.
func (o RunResponseOutput) RunType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.RunType }).(pulumi.StringPtrOutput)
}

// The scope of the credentials that were used to login to the source registry during this run.
func (o RunResponseOutput) SourceRegistryAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.SourceRegistryAuth }).(pulumi.StringPtrOutput)
}

// The source trigger that caused the run.
func (o RunResponseOutput) SourceTrigger() SourceTriggerDescriptorResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *SourceTriggerDescriptorResponse { return v.SourceTrigger }).(SourceTriggerDescriptorResponsePtrOutput)
}

// The time the run started.
func (o RunResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The current status of the run.
func (o RunResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o RunResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v RunResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The task against which run was scheduled.
func (o RunResponseOutput) Task() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.Task }).(pulumi.StringPtrOutput)
}

// The timer trigger that caused the run.
func (o RunResponseOutput) TimerTrigger() TimerTriggerDescriptorResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *TimerTriggerDescriptorResponse { return v.TimerTrigger }).(TimerTriggerDescriptorResponsePtrOutput)
}

// The type of the resource.
func (o RunResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RunResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The update trigger token passed for the Run.
func (o RunResponseOutput) UpdateTriggerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.UpdateTriggerToken }).(pulumi.StringPtrOutput)
}

// Describes the properties of a secret object value.
type SecretObject struct {
	// The type of the secret object which determines how the value of the secret object has to be
	// interpreted.
	Type *string `pulumi:"type"`
	// The value of the secret. The format of this value will be determined
	// based on the type of the secret object. If the type is Opaque, the value will be
	// used as is without any modification.
	Value *string `pulumi:"value"`
}

// SecretObjectInput is an input type that accepts SecretObjectArgs and SecretObjectOutput values.
// You can construct a concrete instance of `SecretObjectInput` via:
//
//	SecretObjectArgs{...}
type SecretObjectInput interface {
	pulumi.Input

	ToSecretObjectOutput() SecretObjectOutput
	ToSecretObjectOutputWithContext(context.Context) SecretObjectOutput
}

// Describes the properties of a secret object value.
type SecretObjectArgs struct {
	// The type of the secret object which determines how the value of the secret object has to be
	// interpreted.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the secret. The format of this value will be determined
	// based on the type of the secret object. If the type is Opaque, the value will be
	// used as is without any modification.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SecretObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretObject)(nil)).Elem()
}

func (i SecretObjectArgs) ToSecretObjectOutput() SecretObjectOutput {
	return i.ToSecretObjectOutputWithContext(context.Background())
}

func (i SecretObjectArgs) ToSecretObjectOutputWithContext(ctx context.Context) SecretObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretObjectOutput)
}

func (i SecretObjectArgs) ToSecretObjectPtrOutput() SecretObjectPtrOutput {
	return i.ToSecretObjectPtrOutputWithContext(context.Background())
}

func (i SecretObjectArgs) ToSecretObjectPtrOutputWithContext(ctx context.Context) SecretObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretObjectOutput).ToSecretObjectPtrOutputWithContext(ctx)
}

// SecretObjectPtrInput is an input type that accepts SecretObjectArgs, SecretObjectPtr and SecretObjectPtrOutput values.
// You can construct a concrete instance of `SecretObjectPtrInput` via:
//
//	        SecretObjectArgs{...}
//
//	or:
//
//	        nil
type SecretObjectPtrInput interface {
	pulumi.Input

	ToSecretObjectPtrOutput() SecretObjectPtrOutput
	ToSecretObjectPtrOutputWithContext(context.Context) SecretObjectPtrOutput
}

type secretObjectPtrType SecretObjectArgs

func SecretObjectPtr(v *SecretObjectArgs) SecretObjectPtrInput {
	return (*secretObjectPtrType)(v)
}

func (*secretObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretObject)(nil)).Elem()
}

func (i *secretObjectPtrType) ToSecretObjectPtrOutput() SecretObjectPtrOutput {
	return i.ToSecretObjectPtrOutputWithContext(context.Background())
}

func (i *secretObjectPtrType) ToSecretObjectPtrOutputWithContext(ctx context.Context) SecretObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretObjectPtrOutput)
}

// Describes the properties of a secret object value.
type SecretObjectOutput struct{ *pulumi.OutputState }

func (SecretObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretObject)(nil)).Elem()
}

func (o SecretObjectOutput) ToSecretObjectOutput() SecretObjectOutput {
	return o
}

func (o SecretObjectOutput) ToSecretObjectOutputWithContext(ctx context.Context) SecretObjectOutput {
	return o
}

func (o SecretObjectOutput) ToSecretObjectPtrOutput() SecretObjectPtrOutput {
	return o.ToSecretObjectPtrOutputWithContext(context.Background())
}

func (o SecretObjectOutput) ToSecretObjectPtrOutputWithContext(ctx context.Context) SecretObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretObject) *SecretObject {
		return &v
	}).(SecretObjectPtrOutput)
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
func (o SecretObjectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretObject) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the secret. The format of this value will be determined
// based on the type of the secret object. If the type is Opaque, the value will be
// used as is without any modification.
func (o SecretObjectOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretObject) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SecretObjectPtrOutput struct{ *pulumi.OutputState }

func (SecretObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretObject)(nil)).Elem()
}

func (o SecretObjectPtrOutput) ToSecretObjectPtrOutput() SecretObjectPtrOutput {
	return o
}

func (o SecretObjectPtrOutput) ToSecretObjectPtrOutputWithContext(ctx context.Context) SecretObjectPtrOutput {
	return o
}

func (o SecretObjectPtrOutput) Elem() SecretObjectOutput {
	return o.ApplyT(func(v *SecretObject) SecretObject {
		if v != nil {
			return *v
		}
		var ret SecretObject
		return ret
	}).(SecretObjectOutput)
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
func (o SecretObjectPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretObject) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The value of the secret. The format of this value will be determined
// based on the type of the secret object. If the type is Opaque, the value will be
// used as is without any modification.
func (o SecretObjectPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretObject) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Describes the properties of a secret object value.
type SecretObjectResponse struct {
	// The type of the secret object which determines how the value of the secret object has to be
	// interpreted.
	Type *string `pulumi:"type"`
	// The value of the secret. The format of this value will be determined
	// based on the type of the secret object. If the type is Opaque, the value will be
	// used as is without any modification.
	Value *string `pulumi:"value"`
}

// Describes the properties of a secret object value.
type SecretObjectResponseOutput struct{ *pulumi.OutputState }

func (SecretObjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretObjectResponse)(nil)).Elem()
}

func (o SecretObjectResponseOutput) ToSecretObjectResponseOutput() SecretObjectResponseOutput {
	return o
}

func (o SecretObjectResponseOutput) ToSecretObjectResponseOutputWithContext(ctx context.Context) SecretObjectResponseOutput {
	return o
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
func (o SecretObjectResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretObjectResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the secret. The format of this value will be determined
// based on the type of the secret object. If the type is Opaque, the value will be
// used as is without any modification.
func (o SecretObjectResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretObjectResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SecretObjectResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretObjectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretObjectResponse)(nil)).Elem()
}

func (o SecretObjectResponsePtrOutput) ToSecretObjectResponsePtrOutput() SecretObjectResponsePtrOutput {
	return o
}

func (o SecretObjectResponsePtrOutput) ToSecretObjectResponsePtrOutputWithContext(ctx context.Context) SecretObjectResponsePtrOutput {
	return o
}

func (o SecretObjectResponsePtrOutput) Elem() SecretObjectResponseOutput {
	return o.ApplyT(func(v *SecretObjectResponse) SecretObjectResponse {
		if v != nil {
			return *v
		}
		var ret SecretObjectResponse
		return ret
	}).(SecretObjectResponseOutput)
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
func (o SecretObjectResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The value of the secret. The format of this value will be determined
// based on the type of the secret object. If the type is Opaque, the value will be
// used as is without any modification.
func (o SecretObjectResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The properties of a overridable value that can be passed to a task template.
type SetValue struct {
	// Flag to indicate whether the value represents a secret or not.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the overridable value.
	Name string `pulumi:"name"`
	// The overridable value.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for SetValue
func (val *SetValue) Defaults() *SetValue {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsSecret) {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// The properties of a overridable value that can be passed to a task template.
type SetValueResponse struct {
	// Flag to indicate whether the value represents a secret or not.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the overridable value.
	Name string `pulumi:"name"`
	// The overridable value.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for SetValueResponse
func (val *SetValueResponse) Defaults() *SetValueResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsSecret) {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// The SKU of a container registry.
type Sku struct {
	// The SKU name of the container registry. Required for registry creation.
	Name string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The SKU of a container registry.
type SkuArgs struct {
	// The SKU name of the container registry. Required for registry creation.
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

// The SKU of a container registry.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

// The SKU name of the container registry. Required for registry creation.
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU of a container registry.
type SkuResponse struct {
	// The SKU name of the container registry. Required for registry creation.
	Name string `pulumi:"name"`
	// The SKU tier based on the SKU name.
	Tier string `pulumi:"tier"`
}

// The SKU of a container registry.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// The SKU name of the container registry. Required for registry creation.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU tier based on the SKU name.
func (o SkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoResponse struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType *string `pulumi:"tokenType"`
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfoResponse)(nil)).Elem()
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponseOutput() SourceControlAuthInfoResponseOutput {
	return o
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponseOutputWithContext(ctx context.Context) SourceControlAuthInfoResponseOutput {
	return o
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoResponseOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoResponseOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoResponseOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.TokenType }).(pulumi.StringPtrOutput)
}

type SourceControlAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfoResponse)(nil)).Elem()
}

func (o SourceControlAuthInfoResponsePtrOutput) ToSourceControlAuthInfoResponsePtrOutput() SourceControlAuthInfoResponsePtrOutput {
	return o
}

func (o SourceControlAuthInfoResponsePtrOutput) ToSourceControlAuthInfoResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoResponsePtrOutput {
	return o
}

func (o SourceControlAuthInfoResponsePtrOutput) Elem() SourceControlAuthInfoResponseOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) SourceControlAuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret SourceControlAuthInfoResponse
		return ret
	}).(SourceControlAuthInfoResponseOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoResponsePtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoResponsePtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenType
	}).(pulumi.StringPtrOutput)
}

// The properties of the source code repository.
type SourceProperties struct {
	// The branch name of the source code.
	Branch *string `pulumi:"branch"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository and to set up
	// webhooks for notifications.
	SourceControlAuthProperties *AuthInfo `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// SourcePropertiesInput is an input type that accepts SourcePropertiesArgs and SourcePropertiesOutput values.
// You can construct a concrete instance of `SourcePropertiesInput` via:
//
//	SourcePropertiesArgs{...}
type SourcePropertiesInput interface {
	pulumi.Input

	ToSourcePropertiesOutput() SourcePropertiesOutput
	ToSourcePropertiesOutputWithContext(context.Context) SourcePropertiesOutput
}

// The properties of the source code repository.
type SourcePropertiesArgs struct {
	// The branch name of the source code.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The full URL to the source code repository
	RepositoryUrl pulumi.StringInput `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository and to set up
	// webhooks for notifications.
	SourceControlAuthProperties AuthInfoPtrInput `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType pulumi.StringInput `pulumi:"sourceControlType"`
}

func (SourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProperties)(nil)).Elem()
}

func (i SourcePropertiesArgs) ToSourcePropertiesOutput() SourcePropertiesOutput {
	return i.ToSourcePropertiesOutputWithContext(context.Background())
}

func (i SourcePropertiesArgs) ToSourcePropertiesOutputWithContext(ctx context.Context) SourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePropertiesOutput)
}

// The properties of the source code repository.
type SourcePropertiesOutput struct{ *pulumi.OutputState }

func (SourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProperties)(nil)).Elem()
}

func (o SourcePropertiesOutput) ToSourcePropertiesOutput() SourcePropertiesOutput {
	return o
}

func (o SourcePropertiesOutput) ToSourcePropertiesOutputWithContext(ctx context.Context) SourcePropertiesOutput {
	return o
}

// The branch name of the source code.
func (o SourcePropertiesOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceProperties) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The full URL to the source code repository
func (o SourcePropertiesOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceProperties) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository and to set up
// webhooks for notifications.
func (o SourcePropertiesOutput) SourceControlAuthProperties() AuthInfoPtrOutput {
	return o.ApplyT(func(v SourceProperties) *AuthInfo { return v.SourceControlAuthProperties }).(AuthInfoPtrOutput)
}

// The type of source control service.
func (o SourcePropertiesOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceProperties) string { return v.SourceControlType }).(pulumi.StringOutput)
}

// The properties of the source code repository.
type SourcePropertiesResponse struct {
	// The branch name of the source code.
	Branch *string `pulumi:"branch"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository and to set up
	// webhooks for notifications.
	SourceControlAuthProperties *AuthInfoResponse `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// The properties of the source code repository.
type SourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourcePropertiesResponse)(nil)).Elem()
}

func (o SourcePropertiesResponseOutput) ToSourcePropertiesResponseOutput() SourcePropertiesResponseOutput {
	return o
}

func (o SourcePropertiesResponseOutput) ToSourcePropertiesResponseOutputWithContext(ctx context.Context) SourcePropertiesResponseOutput {
	return o
}

// The branch name of the source code.
func (o SourcePropertiesResponseOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourcePropertiesResponse) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The full URL to the source code repository
func (o SourcePropertiesResponseOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourcePropertiesResponse) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository and to set up
// webhooks for notifications.
func (o SourcePropertiesResponseOutput) SourceControlAuthProperties() AuthInfoResponsePtrOutput {
	return o.ApplyT(func(v SourcePropertiesResponse) *AuthInfoResponse { return v.SourceControlAuthProperties }).(AuthInfoResponsePtrOutput)
}

// The type of source control service.
func (o SourcePropertiesResponseOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v SourcePropertiesResponse) string { return v.SourceControlType }).(pulumi.StringOutput)
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentials struct {
	// The authentication mode which determines the source registry login scope. The credentials for the source registry
	// will be generated using the given scope. These credentials will be used to login to
	// the source registry during the run.
	LoginMode *string `pulumi:"loginMode"`
}

// SourceRegistryCredentialsInput is an input type that accepts SourceRegistryCredentialsArgs and SourceRegistryCredentialsOutput values.
// You can construct a concrete instance of `SourceRegistryCredentialsInput` via:
//
//	SourceRegistryCredentialsArgs{...}
type SourceRegistryCredentialsInput interface {
	pulumi.Input

	ToSourceRegistryCredentialsOutput() SourceRegistryCredentialsOutput
	ToSourceRegistryCredentialsOutputWithContext(context.Context) SourceRegistryCredentialsOutput
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentialsArgs struct {
	// The authentication mode which determines the source registry login scope. The credentials for the source registry
	// will be generated using the given scope. These credentials will be used to login to
	// the source registry during the run.
	LoginMode pulumi.StringPtrInput `pulumi:"loginMode"`
}

func (SourceRegistryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRegistryCredentials)(nil)).Elem()
}

func (i SourceRegistryCredentialsArgs) ToSourceRegistryCredentialsOutput() SourceRegistryCredentialsOutput {
	return i.ToSourceRegistryCredentialsOutputWithContext(context.Background())
}

func (i SourceRegistryCredentialsArgs) ToSourceRegistryCredentialsOutputWithContext(ctx context.Context) SourceRegistryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRegistryCredentialsOutput)
}

func (i SourceRegistryCredentialsArgs) ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput {
	return i.ToSourceRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (i SourceRegistryCredentialsArgs) ToSourceRegistryCredentialsPtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRegistryCredentialsOutput).ToSourceRegistryCredentialsPtrOutputWithContext(ctx)
}

// SourceRegistryCredentialsPtrInput is an input type that accepts SourceRegistryCredentialsArgs, SourceRegistryCredentialsPtr and SourceRegistryCredentialsPtrOutput values.
// You can construct a concrete instance of `SourceRegistryCredentialsPtrInput` via:
//
//	        SourceRegistryCredentialsArgs{...}
//
//	or:
//
//	        nil
type SourceRegistryCredentialsPtrInput interface {
	pulumi.Input

	ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput
	ToSourceRegistryCredentialsPtrOutputWithContext(context.Context) SourceRegistryCredentialsPtrOutput
}

type sourceRegistryCredentialsPtrType SourceRegistryCredentialsArgs

func SourceRegistryCredentialsPtr(v *SourceRegistryCredentialsArgs) SourceRegistryCredentialsPtrInput {
	return (*sourceRegistryCredentialsPtrType)(v)
}

func (*sourceRegistryCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRegistryCredentials)(nil)).Elem()
}

func (i *sourceRegistryCredentialsPtrType) ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput {
	return i.ToSourceRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (i *sourceRegistryCredentialsPtrType) ToSourceRegistryCredentialsPtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRegistryCredentialsPtrOutput)
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentialsOutput struct{ *pulumi.OutputState }

func (SourceRegistryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRegistryCredentials)(nil)).Elem()
}

func (o SourceRegistryCredentialsOutput) ToSourceRegistryCredentialsOutput() SourceRegistryCredentialsOutput {
	return o
}

func (o SourceRegistryCredentialsOutput) ToSourceRegistryCredentialsOutputWithContext(ctx context.Context) SourceRegistryCredentialsOutput {
	return o
}

func (o SourceRegistryCredentialsOutput) ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput {
	return o.ToSourceRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (o SourceRegistryCredentialsOutput) ToSourceRegistryCredentialsPtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceRegistryCredentials) *SourceRegistryCredentials {
		return &v
	}).(SourceRegistryCredentialsPtrOutput)
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
func (o SourceRegistryCredentialsOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceRegistryCredentials) *string { return v.LoginMode }).(pulumi.StringPtrOutput)
}

type SourceRegistryCredentialsPtrOutput struct{ *pulumi.OutputState }

func (SourceRegistryCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRegistryCredentials)(nil)).Elem()
}

func (o SourceRegistryCredentialsPtrOutput) ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput {
	return o
}

func (o SourceRegistryCredentialsPtrOutput) ToSourceRegistryCredentialsPtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsPtrOutput {
	return o
}

func (o SourceRegistryCredentialsPtrOutput) Elem() SourceRegistryCredentialsOutput {
	return o.ApplyT(func(v *SourceRegistryCredentials) SourceRegistryCredentials {
		if v != nil {
			return *v
		}
		var ret SourceRegistryCredentials
		return ret
	}).(SourceRegistryCredentialsOutput)
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
func (o SourceRegistryCredentialsPtrOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRegistryCredentials) *string {
		if v == nil {
			return nil
		}
		return v.LoginMode
	}).(pulumi.StringPtrOutput)
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentialsResponse struct {
	// The authentication mode which determines the source registry login scope. The credentials for the source registry
	// will be generated using the given scope. These credentials will be used to login to
	// the source registry during the run.
	LoginMode *string `pulumi:"loginMode"`
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentialsResponseOutput struct{ *pulumi.OutputState }

func (SourceRegistryCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRegistryCredentialsResponse)(nil)).Elem()
}

func (o SourceRegistryCredentialsResponseOutput) ToSourceRegistryCredentialsResponseOutput() SourceRegistryCredentialsResponseOutput {
	return o
}

func (o SourceRegistryCredentialsResponseOutput) ToSourceRegistryCredentialsResponseOutputWithContext(ctx context.Context) SourceRegistryCredentialsResponseOutput {
	return o
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
func (o SourceRegistryCredentialsResponseOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceRegistryCredentialsResponse) *string { return v.LoginMode }).(pulumi.StringPtrOutput)
}

type SourceRegistryCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceRegistryCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRegistryCredentialsResponse)(nil)).Elem()
}

func (o SourceRegistryCredentialsResponsePtrOutput) ToSourceRegistryCredentialsResponsePtrOutput() SourceRegistryCredentialsResponsePtrOutput {
	return o
}

func (o SourceRegistryCredentialsResponsePtrOutput) ToSourceRegistryCredentialsResponsePtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsResponsePtrOutput {
	return o
}

func (o SourceRegistryCredentialsResponsePtrOutput) Elem() SourceRegistryCredentialsResponseOutput {
	return o.ApplyT(func(v *SourceRegistryCredentialsResponse) SourceRegistryCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret SourceRegistryCredentialsResponse
		return ret
	}).(SourceRegistryCredentialsResponseOutput)
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
func (o SourceRegistryCredentialsResponsePtrOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRegistryCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoginMode
	}).(pulumi.StringPtrOutput)
}

// The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
type SourceResponse struct {
	// The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.
	Addr *string `pulumi:"addr"`
	// The running instance of an application. Changes after each restart.
	InstanceID *string `pulumi:"instanceID"`
}

// The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

// The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.
func (o SourceResponseOutput) Addr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceResponse) *string { return v.Addr }).(pulumi.StringPtrOutput)
}

// The running instance of an application. Changes after each restart.
func (o SourceResponseOutput) InstanceID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceResponse) *string { return v.InstanceID }).(pulumi.StringPtrOutput)
}

type SourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceResponse)(nil)).Elem()
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) Elem() SourceResponseOutput {
	return o.ApplyT(func(v *SourceResponse) SourceResponse {
		if v != nil {
			return *v
		}
		var ret SourceResponse
		return ret
	}).(SourceResponseOutput)
}

// The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.
func (o SourceResponsePtrOutput) Addr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Addr
	}).(pulumi.StringPtrOutput)
}

// The running instance of an application. Changes after each restart.
func (o SourceResponsePtrOutput) InstanceID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceID
	}).(pulumi.StringPtrOutput)
}

// The properties of a source based trigger.
type SourceTrigger struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The properties that describes the source(code) for the task.
	SourceRepository SourceProperties `pulumi:"sourceRepository"`
	// The source event corresponding to the trigger.
	SourceTriggerEvents []string `pulumi:"sourceTriggerEvents"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for SourceTrigger
func (val *SourceTrigger) Defaults() *SourceTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// SourceTriggerInput is an input type that accepts SourceTriggerArgs and SourceTriggerOutput values.
// You can construct a concrete instance of `SourceTriggerInput` via:
//
//	SourceTriggerArgs{...}
type SourceTriggerInput interface {
	pulumi.Input

	ToSourceTriggerOutput() SourceTriggerOutput
	ToSourceTriggerOutputWithContext(context.Context) SourceTriggerOutput
}

// The properties of a source based trigger.
type SourceTriggerArgs struct {
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties that describes the source(code) for the task.
	SourceRepository SourcePropertiesInput `pulumi:"sourceRepository"`
	// The source event corresponding to the trigger.
	SourceTriggerEvents pulumi.StringArrayInput `pulumi:"sourceTriggerEvents"`
	// The current status of trigger.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

// Defaults sets the appropriate defaults for SourceTriggerArgs
func (val *SourceTriggerArgs) Defaults() *SourceTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (SourceTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTrigger)(nil)).Elem()
}

func (i SourceTriggerArgs) ToSourceTriggerOutput() SourceTriggerOutput {
	return i.ToSourceTriggerOutputWithContext(context.Background())
}

func (i SourceTriggerArgs) ToSourceTriggerOutputWithContext(ctx context.Context) SourceTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTriggerOutput)
}

// SourceTriggerArrayInput is an input type that accepts SourceTriggerArray and SourceTriggerArrayOutput values.
// You can construct a concrete instance of `SourceTriggerArrayInput` via:
//
//	SourceTriggerArray{ SourceTriggerArgs{...} }
type SourceTriggerArrayInput interface {
	pulumi.Input

	ToSourceTriggerArrayOutput() SourceTriggerArrayOutput
	ToSourceTriggerArrayOutputWithContext(context.Context) SourceTriggerArrayOutput
}

type SourceTriggerArray []SourceTriggerInput

func (SourceTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceTrigger)(nil)).Elem()
}

func (i SourceTriggerArray) ToSourceTriggerArrayOutput() SourceTriggerArrayOutput {
	return i.ToSourceTriggerArrayOutputWithContext(context.Background())
}

func (i SourceTriggerArray) ToSourceTriggerArrayOutputWithContext(ctx context.Context) SourceTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTriggerArrayOutput)
}

// The properties of a source based trigger.
type SourceTriggerOutput struct{ *pulumi.OutputState }

func (SourceTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTrigger)(nil)).Elem()
}

func (o SourceTriggerOutput) ToSourceTriggerOutput() SourceTriggerOutput {
	return o
}

func (o SourceTriggerOutput) ToSourceTriggerOutputWithContext(ctx context.Context) SourceTriggerOutput {
	return o
}

// The name of the trigger.
func (o SourceTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceTrigger) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that describes the source(code) for the task.
func (o SourceTriggerOutput) SourceRepository() SourcePropertiesOutput {
	return o.ApplyT(func(v SourceTrigger) SourceProperties { return v.SourceRepository }).(SourcePropertiesOutput)
}

// The source event corresponding to the trigger.
func (o SourceTriggerOutput) SourceTriggerEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceTrigger) []string { return v.SourceTriggerEvents }).(pulumi.StringArrayOutput)
}

// The current status of trigger.
func (o SourceTriggerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTrigger) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SourceTriggerArrayOutput struct{ *pulumi.OutputState }

func (SourceTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceTrigger)(nil)).Elem()
}

func (o SourceTriggerArrayOutput) ToSourceTriggerArrayOutput() SourceTriggerArrayOutput {
	return o
}

func (o SourceTriggerArrayOutput) ToSourceTriggerArrayOutputWithContext(ctx context.Context) SourceTriggerArrayOutput {
	return o
}

func (o SourceTriggerArrayOutput) Index(i pulumi.IntInput) SourceTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceTrigger {
		return vs[0].([]SourceTrigger)[vs[1].(int)]
	}).(SourceTriggerOutput)
}

// The source trigger that caused a run.
type SourceTriggerDescriptorResponse struct {
	// The branch name in the repository.
	BranchName *string `pulumi:"branchName"`
	// The unique ID that identifies a commit.
	CommitId *string `pulumi:"commitId"`
	// The event type of the trigger.
	EventType *string `pulumi:"eventType"`
	// The unique ID of the trigger.
	Id *string `pulumi:"id"`
	// The source control provider type.
	ProviderType *string `pulumi:"providerType"`
	// The unique ID that identifies pull request.
	PullRequestId *string `pulumi:"pullRequestId"`
	// The repository URL.
	RepositoryUrl *string `pulumi:"repositoryUrl"`
}

// The source trigger that caused a run.
type SourceTriggerDescriptorResponseOutput struct{ *pulumi.OutputState }

func (SourceTriggerDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTriggerDescriptorResponse)(nil)).Elem()
}

func (o SourceTriggerDescriptorResponseOutput) ToSourceTriggerDescriptorResponseOutput() SourceTriggerDescriptorResponseOutput {
	return o
}

func (o SourceTriggerDescriptorResponseOutput) ToSourceTriggerDescriptorResponseOutputWithContext(ctx context.Context) SourceTriggerDescriptorResponseOutput {
	return o
}

// The branch name in the repository.
func (o SourceTriggerDescriptorResponseOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// The unique ID that identifies a commit.
func (o SourceTriggerDescriptorResponseOutput) CommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.CommitId }).(pulumi.StringPtrOutput)
}

// The event type of the trigger.
func (o SourceTriggerDescriptorResponseOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// The unique ID of the trigger.
func (o SourceTriggerDescriptorResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The source control provider type.
func (o SourceTriggerDescriptorResponseOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.ProviderType }).(pulumi.StringPtrOutput)
}

// The unique ID that identifies pull request.
func (o SourceTriggerDescriptorResponseOutput) PullRequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.PullRequestId }).(pulumi.StringPtrOutput)
}

// The repository URL.
func (o SourceTriggerDescriptorResponseOutput) RepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.RepositoryUrl }).(pulumi.StringPtrOutput)
}

type SourceTriggerDescriptorResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceTriggerDescriptorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTriggerDescriptorResponse)(nil)).Elem()
}

func (o SourceTriggerDescriptorResponsePtrOutput) ToSourceTriggerDescriptorResponsePtrOutput() SourceTriggerDescriptorResponsePtrOutput {
	return o
}

func (o SourceTriggerDescriptorResponsePtrOutput) ToSourceTriggerDescriptorResponsePtrOutputWithContext(ctx context.Context) SourceTriggerDescriptorResponsePtrOutput {
	return o
}

func (o SourceTriggerDescriptorResponsePtrOutput) Elem() SourceTriggerDescriptorResponseOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) SourceTriggerDescriptorResponse {
		if v != nil {
			return *v
		}
		var ret SourceTriggerDescriptorResponse
		return ret
	}).(SourceTriggerDescriptorResponseOutput)
}

// The branch name in the repository.
func (o SourceTriggerDescriptorResponsePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// The unique ID that identifies a commit.
func (o SourceTriggerDescriptorResponsePtrOutput) CommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommitId
	}).(pulumi.StringPtrOutput)
}

// The event type of the trigger.
func (o SourceTriggerDescriptorResponsePtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// The unique ID of the trigger.
func (o SourceTriggerDescriptorResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The source control provider type.
func (o SourceTriggerDescriptorResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// The unique ID that identifies pull request.
func (o SourceTriggerDescriptorResponsePtrOutput) PullRequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.PullRequestId
	}).(pulumi.StringPtrOutput)
}

// The repository URL.
func (o SourceTriggerDescriptorResponsePtrOutput) RepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// The properties of a source based trigger.
type SourceTriggerResponse struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The properties that describes the source(code) for the task.
	SourceRepository SourcePropertiesResponse `pulumi:"sourceRepository"`
	// The source event corresponding to the trigger.
	SourceTriggerEvents []string `pulumi:"sourceTriggerEvents"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for SourceTriggerResponse
func (val *SourceTriggerResponse) Defaults() *SourceTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// The properties of a source based trigger.
type SourceTriggerResponseOutput struct{ *pulumi.OutputState }

func (SourceTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTriggerResponse)(nil)).Elem()
}

func (o SourceTriggerResponseOutput) ToSourceTriggerResponseOutput() SourceTriggerResponseOutput {
	return o
}

func (o SourceTriggerResponseOutput) ToSourceTriggerResponseOutputWithContext(ctx context.Context) SourceTriggerResponseOutput {
	return o
}

// The name of the trigger.
func (o SourceTriggerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceTriggerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that describes the source(code) for the task.
func (o SourceTriggerResponseOutput) SourceRepository() SourcePropertiesResponseOutput {
	return o.ApplyT(func(v SourceTriggerResponse) SourcePropertiesResponse { return v.SourceRepository }).(SourcePropertiesResponseOutput)
}

// The source event corresponding to the trigger.
func (o SourceTriggerResponseOutput) SourceTriggerEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceTriggerResponse) []string { return v.SourceTriggerEvents }).(pulumi.StringArrayOutput)
}

// The current status of trigger.
func (o SourceTriggerResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SourceTriggerResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceTriggerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceTriggerResponse)(nil)).Elem()
}

func (o SourceTriggerResponseArrayOutput) ToSourceTriggerResponseArrayOutput() SourceTriggerResponseArrayOutput {
	return o
}

func (o SourceTriggerResponseArrayOutput) ToSourceTriggerResponseArrayOutputWithContext(ctx context.Context) SourceTriggerResponseArrayOutput {
	return o
}

func (o SourceTriggerResponseArrayOutput) Index(i pulumi.IntInput) SourceTriggerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceTriggerResponse {
		return vs[0].([]SourceTriggerResponse)[vs[1].(int)]
	}).(SourceTriggerResponseOutput)
}

// The status detail properties of the connected registry.
type StatusDetailPropertiesResponse struct {
	// The code of the status.
	Code string `pulumi:"code"`
	// The correlation ID of the status.
	CorrelationId string `pulumi:"correlationId"`
	// The description of the status.
	Description string `pulumi:"description"`
	// The timestamp of the status.
	Timestamp string `pulumi:"timestamp"`
	// The component of the connected registry corresponding to the status.
	Type string `pulumi:"type"`
}

// The status detail properties of the connected registry.
type StatusDetailPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StatusDetailPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusDetailPropertiesResponse)(nil)).Elem()
}

func (o StatusDetailPropertiesResponseOutput) ToStatusDetailPropertiesResponseOutput() StatusDetailPropertiesResponseOutput {
	return o
}

func (o StatusDetailPropertiesResponseOutput) ToStatusDetailPropertiesResponseOutputWithContext(ctx context.Context) StatusDetailPropertiesResponseOutput {
	return o
}

// The code of the status.
func (o StatusDetailPropertiesResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StatusDetailPropertiesResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The correlation ID of the status.
func (o StatusDetailPropertiesResponseOutput) CorrelationId() pulumi.StringOutput {
	return o.ApplyT(func(v StatusDetailPropertiesResponse) string { return v.CorrelationId }).(pulumi.StringOutput)
}

// The description of the status.
func (o StatusDetailPropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v StatusDetailPropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The timestamp of the status.
func (o StatusDetailPropertiesResponseOutput) Timestamp() pulumi.StringOutput {
	return o.ApplyT(func(v StatusDetailPropertiesResponse) string { return v.Timestamp }).(pulumi.StringOutput)
}

// The component of the connected registry corresponding to the status.
func (o StatusDetailPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StatusDetailPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type StatusDetailPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusDetailPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusDetailPropertiesResponse)(nil)).Elem()
}

func (o StatusDetailPropertiesResponseArrayOutput) ToStatusDetailPropertiesResponseArrayOutput() StatusDetailPropertiesResponseArrayOutput {
	return o
}

func (o StatusDetailPropertiesResponseArrayOutput) ToStatusDetailPropertiesResponseArrayOutputWithContext(ctx context.Context) StatusDetailPropertiesResponseArrayOutput {
	return o
}

func (o StatusDetailPropertiesResponseArrayOutput) Index(i pulumi.IntInput) StatusDetailPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusDetailPropertiesResponse {
		return vs[0].([]StatusDetailPropertiesResponse)[vs[1].(int)]
	}).(StatusDetailPropertiesResponseOutput)
}

// The status of an Azure resource at the time the operation was called.
type StatusResponse struct {
	// The short label for the status.
	DisplayStatus string `pulumi:"displayStatus"`
	// The detailed message for the status, including alerts and error messages.
	Message string `pulumi:"message"`
	// The timestamp when the status was changed to the current value.
	Timestamp string `pulumi:"timestamp"`
}

// The status of an Azure resource at the time the operation was called.
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The short label for the status.
func (o StatusResponseOutput) DisplayStatus() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.DisplayStatus }).(pulumi.StringOutput)
}

// The detailed message for the status, including alerts and error messages.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The timestamp when the status was changed to the current value.
func (o StatusResponseOutput) Timestamp() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Timestamp }).(pulumi.StringOutput)
}

// The properties of a storage account for a container registry. Only applicable to Classic SKU.
type StorageAccountProperties struct {
	// The resource ID of the storage account.
	Id string `pulumi:"id"`
}

// StorageAccountPropertiesInput is an input type that accepts StorageAccountPropertiesArgs and StorageAccountPropertiesOutput values.
// You can construct a concrete instance of `StorageAccountPropertiesInput` via:
//
//	StorageAccountPropertiesArgs{...}
type StorageAccountPropertiesInput interface {
	pulumi.Input

	ToStorageAccountPropertiesOutput() StorageAccountPropertiesOutput
	ToStorageAccountPropertiesOutputWithContext(context.Context) StorageAccountPropertiesOutput
}

// The properties of a storage account for a container registry. Only applicable to Classic SKU.
type StorageAccountPropertiesArgs struct {
	// The resource ID of the storage account.
	Id pulumi.StringInput `pulumi:"id"`
}

func (StorageAccountPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountProperties)(nil)).Elem()
}

func (i StorageAccountPropertiesArgs) ToStorageAccountPropertiesOutput() StorageAccountPropertiesOutput {
	return i.ToStorageAccountPropertiesOutputWithContext(context.Background())
}

func (i StorageAccountPropertiesArgs) ToStorageAccountPropertiesOutputWithContext(ctx context.Context) StorageAccountPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountPropertiesOutput)
}

func (i StorageAccountPropertiesArgs) ToStorageAccountPropertiesPtrOutput() StorageAccountPropertiesPtrOutput {
	return i.ToStorageAccountPropertiesPtrOutputWithContext(context.Background())
}

func (i StorageAccountPropertiesArgs) ToStorageAccountPropertiesPtrOutputWithContext(ctx context.Context) StorageAccountPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountPropertiesOutput).ToStorageAccountPropertiesPtrOutputWithContext(ctx)
}

// StorageAccountPropertiesPtrInput is an input type that accepts StorageAccountPropertiesArgs, StorageAccountPropertiesPtr and StorageAccountPropertiesPtrOutput values.
// You can construct a concrete instance of `StorageAccountPropertiesPtrInput` via:
//
//	        StorageAccountPropertiesArgs{...}
//
//	or:
//
//	        nil
type StorageAccountPropertiesPtrInput interface {
	pulumi.Input

	ToStorageAccountPropertiesPtrOutput() StorageAccountPropertiesPtrOutput
	ToStorageAccountPropertiesPtrOutputWithContext(context.Context) StorageAccountPropertiesPtrOutput
}

type storageAccountPropertiesPtrType StorageAccountPropertiesArgs

func StorageAccountPropertiesPtr(v *StorageAccountPropertiesArgs) StorageAccountPropertiesPtrInput {
	return (*storageAccountPropertiesPtrType)(v)
}

func (*storageAccountPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountProperties)(nil)).Elem()
}

func (i *storageAccountPropertiesPtrType) ToStorageAccountPropertiesPtrOutput() StorageAccountPropertiesPtrOutput {
	return i.ToStorageAccountPropertiesPtrOutputWithContext(context.Background())
}

func (i *storageAccountPropertiesPtrType) ToStorageAccountPropertiesPtrOutputWithContext(ctx context.Context) StorageAccountPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountPropertiesPtrOutput)
}

// The properties of a storage account for a container registry. Only applicable to Classic SKU.
type StorageAccountPropertiesOutput struct{ *pulumi.OutputState }

func (StorageAccountPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountProperties)(nil)).Elem()
}

func (o StorageAccountPropertiesOutput) ToStorageAccountPropertiesOutput() StorageAccountPropertiesOutput {
	return o
}

func (o StorageAccountPropertiesOutput) ToStorageAccountPropertiesOutputWithContext(ctx context.Context) StorageAccountPropertiesOutput {
	return o
}

func (o StorageAccountPropertiesOutput) ToStorageAccountPropertiesPtrOutput() StorageAccountPropertiesPtrOutput {
	return o.ToStorageAccountPropertiesPtrOutputWithContext(context.Background())
}

func (o StorageAccountPropertiesOutput) ToStorageAccountPropertiesPtrOutputWithContext(ctx context.Context) StorageAccountPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageAccountProperties) *StorageAccountProperties {
		return &v
	}).(StorageAccountPropertiesPtrOutput)
}

// The resource ID of the storage account.
func (o StorageAccountPropertiesOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccountProperties) string { return v.Id }).(pulumi.StringOutput)
}

type StorageAccountPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StorageAccountPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountProperties)(nil)).Elem()
}

func (o StorageAccountPropertiesPtrOutput) ToStorageAccountPropertiesPtrOutput() StorageAccountPropertiesPtrOutput {
	return o
}

func (o StorageAccountPropertiesPtrOutput) ToStorageAccountPropertiesPtrOutputWithContext(ctx context.Context) StorageAccountPropertiesPtrOutput {
	return o
}

func (o StorageAccountPropertiesPtrOutput) Elem() StorageAccountPropertiesOutput {
	return o.ApplyT(func(v *StorageAccountProperties) StorageAccountProperties {
		if v != nil {
			return *v
		}
		var ret StorageAccountProperties
		return ret
	}).(StorageAccountPropertiesOutput)
}

// The resource ID of the storage account.
func (o StorageAccountPropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageAccountProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The properties of a storage account for a container registry. Only applicable to Classic SKU.
type StorageAccountPropertiesResponse struct {
	// The resource ID of the storage account.
	Id string `pulumi:"id"`
}

// The properties of a storage account for a container registry. Only applicable to Classic SKU.
type StorageAccountPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountPropertiesResponse)(nil)).Elem()
}

func (o StorageAccountPropertiesResponseOutput) ToStorageAccountPropertiesResponseOutput() StorageAccountPropertiesResponseOutput {
	return o
}

func (o StorageAccountPropertiesResponseOutput) ToStorageAccountPropertiesResponseOutputWithContext(ctx context.Context) StorageAccountPropertiesResponseOutput {
	return o
}

// The resource ID of the storage account.
func (o StorageAccountPropertiesResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccountPropertiesResponse) string { return v.Id }).(pulumi.StringOutput)
}

type StorageAccountPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageAccountPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountPropertiesResponse)(nil)).Elem()
}

func (o StorageAccountPropertiesResponsePtrOutput) ToStorageAccountPropertiesResponsePtrOutput() StorageAccountPropertiesResponsePtrOutput {
	return o
}

func (o StorageAccountPropertiesResponsePtrOutput) ToStorageAccountPropertiesResponsePtrOutputWithContext(ctx context.Context) StorageAccountPropertiesResponsePtrOutput {
	return o
}

func (o StorageAccountPropertiesResponsePtrOutput) Elem() StorageAccountPropertiesResponseOutput {
	return o.ApplyT(func(v *StorageAccountPropertiesResponse) StorageAccountPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret StorageAccountPropertiesResponse
		return ret
	}).(StorageAccountPropertiesResponseOutput)
}

// The resource ID of the storage account.
func (o StorageAccountPropertiesResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageAccountPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The sync properties of the connected registry with its parent.
type SyncProperties struct {
	// The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
	MessageTtl string `pulumi:"messageTtl"`
	// The cron expression indicating the schedule that the connected registry will sync with its parent.
	Schedule *string `pulumi:"schedule"`
	// The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
	SyncWindow *string `pulumi:"syncWindow"`
	// The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
	TokenId string `pulumi:"tokenId"`
}

// SyncPropertiesInput is an input type that accepts SyncPropertiesArgs and SyncPropertiesOutput values.
// You can construct a concrete instance of `SyncPropertiesInput` via:
//
//	SyncPropertiesArgs{...}
type SyncPropertiesInput interface {
	pulumi.Input

	ToSyncPropertiesOutput() SyncPropertiesOutput
	ToSyncPropertiesOutputWithContext(context.Context) SyncPropertiesOutput
}

// The sync properties of the connected registry with its parent.
type SyncPropertiesArgs struct {
	// The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
	MessageTtl pulumi.StringInput `pulumi:"messageTtl"`
	// The cron expression indicating the schedule that the connected registry will sync with its parent.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
	// The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
	SyncWindow pulumi.StringPtrInput `pulumi:"syncWindow"`
	// The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
	TokenId pulumi.StringInput `pulumi:"tokenId"`
}

func (SyncPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncProperties)(nil)).Elem()
}

func (i SyncPropertiesArgs) ToSyncPropertiesOutput() SyncPropertiesOutput {
	return i.ToSyncPropertiesOutputWithContext(context.Background())
}

func (i SyncPropertiesArgs) ToSyncPropertiesOutputWithContext(ctx context.Context) SyncPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncPropertiesOutput)
}

// The sync properties of the connected registry with its parent.
type SyncPropertiesOutput struct{ *pulumi.OutputState }

func (SyncPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncProperties)(nil)).Elem()
}

func (o SyncPropertiesOutput) ToSyncPropertiesOutput() SyncPropertiesOutput {
	return o
}

func (o SyncPropertiesOutput) ToSyncPropertiesOutputWithContext(ctx context.Context) SyncPropertiesOutput {
	return o
}

// The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
func (o SyncPropertiesOutput) MessageTtl() pulumi.StringOutput {
	return o.ApplyT(func(v SyncProperties) string { return v.MessageTtl }).(pulumi.StringOutput)
}

// The cron expression indicating the schedule that the connected registry will sync with its parent.
func (o SyncPropertiesOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncProperties) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
func (o SyncPropertiesOutput) SyncWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncProperties) *string { return v.SyncWindow }).(pulumi.StringPtrOutput)
}

// The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
func (o SyncPropertiesOutput) TokenId() pulumi.StringOutput {
	return o.ApplyT(func(v SyncProperties) string { return v.TokenId }).(pulumi.StringOutput)
}

// The sync properties of the connected registry with its parent.
type SyncPropertiesResponse struct {
	// The gateway endpoint used by the connected registry to communicate with its parent.
	GatewayEndpoint string `pulumi:"gatewayEndpoint"`
	// The last time a sync occurred between the connected registry and its parent.
	LastSyncTime string `pulumi:"lastSyncTime"`
	// The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
	MessageTtl string `pulumi:"messageTtl"`
	// The cron expression indicating the schedule that the connected registry will sync with its parent.
	Schedule *string `pulumi:"schedule"`
	// The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
	SyncWindow *string `pulumi:"syncWindow"`
	// The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
	TokenId string `pulumi:"tokenId"`
}

// The sync properties of the connected registry with its parent.
type SyncPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SyncPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncPropertiesResponse)(nil)).Elem()
}

func (o SyncPropertiesResponseOutput) ToSyncPropertiesResponseOutput() SyncPropertiesResponseOutput {
	return o
}

func (o SyncPropertiesResponseOutput) ToSyncPropertiesResponseOutputWithContext(ctx context.Context) SyncPropertiesResponseOutput {
	return o
}

// The gateway endpoint used by the connected registry to communicate with its parent.
func (o SyncPropertiesResponseOutput) GatewayEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SyncPropertiesResponse) string { return v.GatewayEndpoint }).(pulumi.StringOutput)
}

// The last time a sync occurred between the connected registry and its parent.
func (o SyncPropertiesResponseOutput) LastSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v SyncPropertiesResponse) string { return v.LastSyncTime }).(pulumi.StringOutput)
}

// The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
func (o SyncPropertiesResponseOutput) MessageTtl() pulumi.StringOutput {
	return o.ApplyT(func(v SyncPropertiesResponse) string { return v.MessageTtl }).(pulumi.StringOutput)
}

// The cron expression indicating the schedule that the connected registry will sync with its parent.
func (o SyncPropertiesResponseOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncPropertiesResponse) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
func (o SyncPropertiesResponseOutput) SyncWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncPropertiesResponse) *string { return v.SyncWindow }).(pulumi.StringPtrOutput)
}

// The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
func (o SyncPropertiesResponseOutput) TokenId() pulumi.StringOutput {
	return o.ApplyT(func(v SyncPropertiesResponse) string { return v.TokenId }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource modification (UTC).
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource modification (UTC).
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The target of the event.
type TargetResponse struct {
	// The digest of the content, as defined by the Registry V2 HTTP API Specification.
	Digest *string `pulumi:"digest"`
	// The number of bytes of the content. Same as Size field.
	Length *float64 `pulumi:"length"`
	// The MIME type of the referenced object.
	MediaType *string `pulumi:"mediaType"`
	// The name of the artifact.
	Name *string `pulumi:"name"`
	// The repository name.
	Repository *string `pulumi:"repository"`
	// The number of bytes of the content. Same as Length field.
	Size *float64 `pulumi:"size"`
	// The tag name.
	Tag *string `pulumi:"tag"`
	// The direct URL to the content.
	Url *string `pulumi:"url"`
	// The version of the artifact.
	Version *string `pulumi:"version"`
}

// The target of the event.
type TargetResponseOutput struct{ *pulumi.OutputState }

func (TargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetResponse)(nil)).Elem()
}

func (o TargetResponseOutput) ToTargetResponseOutput() TargetResponseOutput {
	return o
}

func (o TargetResponseOutput) ToTargetResponseOutputWithContext(ctx context.Context) TargetResponseOutput {
	return o
}

// The digest of the content, as defined by the Registry V2 HTTP API Specification.
func (o TargetResponseOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetResponse) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The number of bytes of the content. Same as Size field.
func (o TargetResponseOutput) Length() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TargetResponse) *float64 { return v.Length }).(pulumi.Float64PtrOutput)
}

// The MIME type of the referenced object.
func (o TargetResponseOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetResponse) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// The name of the artifact.
func (o TargetResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The repository name.
func (o TargetResponseOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetResponse) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The number of bytes of the content. Same as Length field.
func (o TargetResponseOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TargetResponse) *float64 { return v.Size }).(pulumi.Float64PtrOutput)
}

// The tag name.
func (o TargetResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The direct URL to the content.
func (o TargetResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// The version of the artifact.
func (o TargetResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type TargetResponsePtrOutput struct{ *pulumi.OutputState }

func (TargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetResponse)(nil)).Elem()
}

func (o TargetResponsePtrOutput) ToTargetResponsePtrOutput() TargetResponsePtrOutput {
	return o
}

func (o TargetResponsePtrOutput) ToTargetResponsePtrOutputWithContext(ctx context.Context) TargetResponsePtrOutput {
	return o
}

func (o TargetResponsePtrOutput) Elem() TargetResponseOutput {
	return o.ApplyT(func(v *TargetResponse) TargetResponse {
		if v != nil {
			return *v
		}
		var ret TargetResponse
		return ret
	}).(TargetResponseOutput)
}

// The digest of the content, as defined by the Registry V2 HTTP API Specification.
func (o TargetResponsePtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// The number of bytes of the content. Same as Size field.
func (o TargetResponsePtrOutput) Length() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TargetResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Length
	}).(pulumi.Float64PtrOutput)
}

// The MIME type of the referenced object.
func (o TargetResponsePtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// The name of the artifact.
func (o TargetResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The repository name.
func (o TargetResponsePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The number of bytes of the content. Same as Length field.
func (o TargetResponsePtrOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TargetResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.Float64PtrOutput)
}

// The tag name.
func (o TargetResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The direct URL to the content.
func (o TargetResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The version of the artifact.
func (o TargetResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The parameters for a task run request.
type TaskRunRequest struct {
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// Set of overridable parameters that can be passed when running a Task.
	OverrideTaskStepProperties *OverrideTaskStepProperties `pulumi:"overrideTaskStepProperties"`
	// The resource ID of task against which run has to be queued.
	TaskId string `pulumi:"taskId"`
	// The type of the run request.
	// Expected value is 'TaskRunRequest'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for TaskRunRequest
func (val *TaskRunRequest) Defaults() *TaskRunRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	return &tmp
}

// The parameters for a task run request.
type TaskRunRequestResponse struct {
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// Set of overridable parameters that can be passed when running a Task.
	OverrideTaskStepProperties *OverrideTaskStepPropertiesResponse `pulumi:"overrideTaskStepProperties"`
	// The resource ID of task against which run has to be queued.
	TaskId string `pulumi:"taskId"`
	// The type of the run request.
	// Expected value is 'TaskRunRequest'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for TaskRunRequestResponse
func (val *TaskRunRequestResponse) Defaults() *TaskRunRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsArchiveEnabled) {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	return &tmp
}

// The properties of a timer trigger.
type TimerTrigger struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The CRON expression for the task schedule
	Schedule string `pulumi:"schedule"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for TimerTrigger
func (val *TimerTrigger) Defaults() *TimerTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// TimerTriggerInput is an input type that accepts TimerTriggerArgs and TimerTriggerOutput values.
// You can construct a concrete instance of `TimerTriggerInput` via:
//
//	TimerTriggerArgs{...}
type TimerTriggerInput interface {
	pulumi.Input

	ToTimerTriggerOutput() TimerTriggerOutput
	ToTimerTriggerOutputWithContext(context.Context) TimerTriggerOutput
}

// The properties of a timer trigger.
type TimerTriggerArgs struct {
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
	// The CRON expression for the task schedule
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The current status of trigger.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

// Defaults sets the appropriate defaults for TimerTriggerArgs
func (val *TimerTriggerArgs) Defaults() *TimerTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (TimerTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimerTrigger)(nil)).Elem()
}

func (i TimerTriggerArgs) ToTimerTriggerOutput() TimerTriggerOutput {
	return i.ToTimerTriggerOutputWithContext(context.Background())
}

func (i TimerTriggerArgs) ToTimerTriggerOutputWithContext(ctx context.Context) TimerTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimerTriggerOutput)
}

// TimerTriggerArrayInput is an input type that accepts TimerTriggerArray and TimerTriggerArrayOutput values.
// You can construct a concrete instance of `TimerTriggerArrayInput` via:
//
//	TimerTriggerArray{ TimerTriggerArgs{...} }
type TimerTriggerArrayInput interface {
	pulumi.Input

	ToTimerTriggerArrayOutput() TimerTriggerArrayOutput
	ToTimerTriggerArrayOutputWithContext(context.Context) TimerTriggerArrayOutput
}

type TimerTriggerArray []TimerTriggerInput

func (TimerTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimerTrigger)(nil)).Elem()
}

func (i TimerTriggerArray) ToTimerTriggerArrayOutput() TimerTriggerArrayOutput {
	return i.ToTimerTriggerArrayOutputWithContext(context.Background())
}

func (i TimerTriggerArray) ToTimerTriggerArrayOutputWithContext(ctx context.Context) TimerTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimerTriggerArrayOutput)
}

// The properties of a timer trigger.
type TimerTriggerOutput struct{ *pulumi.OutputState }

func (TimerTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimerTrigger)(nil)).Elem()
}

func (o TimerTriggerOutput) ToTimerTriggerOutput() TimerTriggerOutput {
	return o
}

func (o TimerTriggerOutput) ToTimerTriggerOutputWithContext(ctx context.Context) TimerTriggerOutput {
	return o
}

// The name of the trigger.
func (o TimerTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TimerTrigger) string { return v.Name }).(pulumi.StringOutput)
}

// The CRON expression for the task schedule
func (o TimerTriggerOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v TimerTrigger) string { return v.Schedule }).(pulumi.StringOutput)
}

// The current status of trigger.
func (o TimerTriggerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimerTrigger) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type TimerTriggerArrayOutput struct{ *pulumi.OutputState }

func (TimerTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimerTrigger)(nil)).Elem()
}

func (o TimerTriggerArrayOutput) ToTimerTriggerArrayOutput() TimerTriggerArrayOutput {
	return o
}

func (o TimerTriggerArrayOutput) ToTimerTriggerArrayOutputWithContext(ctx context.Context) TimerTriggerArrayOutput {
	return o
}

func (o TimerTriggerArrayOutput) Index(i pulumi.IntInput) TimerTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimerTrigger {
		return vs[0].([]TimerTrigger)[vs[1].(int)]
	}).(TimerTriggerOutput)
}

type TimerTriggerDescriptorResponse struct {
	// The occurrence that triggered the run.
	ScheduleOccurrence *string `pulumi:"scheduleOccurrence"`
	// The timer trigger name that caused the run.
	TimerTriggerName *string `pulumi:"timerTriggerName"`
}

type TimerTriggerDescriptorResponseOutput struct{ *pulumi.OutputState }

func (TimerTriggerDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimerTriggerDescriptorResponse)(nil)).Elem()
}

func (o TimerTriggerDescriptorResponseOutput) ToTimerTriggerDescriptorResponseOutput() TimerTriggerDescriptorResponseOutput {
	return o
}

func (o TimerTriggerDescriptorResponseOutput) ToTimerTriggerDescriptorResponseOutputWithContext(ctx context.Context) TimerTriggerDescriptorResponseOutput {
	return o
}

// The occurrence that triggered the run.
func (o TimerTriggerDescriptorResponseOutput) ScheduleOccurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimerTriggerDescriptorResponse) *string { return v.ScheduleOccurrence }).(pulumi.StringPtrOutput)
}

// The timer trigger name that caused the run.
func (o TimerTriggerDescriptorResponseOutput) TimerTriggerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimerTriggerDescriptorResponse) *string { return v.TimerTriggerName }).(pulumi.StringPtrOutput)
}

type TimerTriggerDescriptorResponsePtrOutput struct{ *pulumi.OutputState }

func (TimerTriggerDescriptorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimerTriggerDescriptorResponse)(nil)).Elem()
}

func (o TimerTriggerDescriptorResponsePtrOutput) ToTimerTriggerDescriptorResponsePtrOutput() TimerTriggerDescriptorResponsePtrOutput {
	return o
}

func (o TimerTriggerDescriptorResponsePtrOutput) ToTimerTriggerDescriptorResponsePtrOutputWithContext(ctx context.Context) TimerTriggerDescriptorResponsePtrOutput {
	return o
}

func (o TimerTriggerDescriptorResponsePtrOutput) Elem() TimerTriggerDescriptorResponseOutput {
	return o.ApplyT(func(v *TimerTriggerDescriptorResponse) TimerTriggerDescriptorResponse {
		if v != nil {
			return *v
		}
		var ret TimerTriggerDescriptorResponse
		return ret
	}).(TimerTriggerDescriptorResponseOutput)
}

// The occurrence that triggered the run.
func (o TimerTriggerDescriptorResponsePtrOutput) ScheduleOccurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimerTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleOccurrence
	}).(pulumi.StringPtrOutput)
}

// The timer trigger name that caused the run.
func (o TimerTriggerDescriptorResponsePtrOutput) TimerTriggerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimerTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimerTriggerName
	}).(pulumi.StringPtrOutput)
}

// The properties of a timer trigger.
type TimerTriggerResponse struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The CRON expression for the task schedule
	Schedule string `pulumi:"schedule"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for TimerTriggerResponse
func (val *TimerTriggerResponse) Defaults() *TimerTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// The properties of a timer trigger.
type TimerTriggerResponseOutput struct{ *pulumi.OutputState }

func (TimerTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimerTriggerResponse)(nil)).Elem()
}

func (o TimerTriggerResponseOutput) ToTimerTriggerResponseOutput() TimerTriggerResponseOutput {
	return o
}

func (o TimerTriggerResponseOutput) ToTimerTriggerResponseOutputWithContext(ctx context.Context) TimerTriggerResponseOutput {
	return o
}

// The name of the trigger.
func (o TimerTriggerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TimerTriggerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The CRON expression for the task schedule
func (o TimerTriggerResponseOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v TimerTriggerResponse) string { return v.Schedule }).(pulumi.StringOutput)
}

// The current status of trigger.
func (o TimerTriggerResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimerTriggerResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type TimerTriggerResponseArrayOutput struct{ *pulumi.OutputState }

func (TimerTriggerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimerTriggerResponse)(nil)).Elem()
}

func (o TimerTriggerResponseArrayOutput) ToTimerTriggerResponseArrayOutput() TimerTriggerResponseArrayOutput {
	return o
}

func (o TimerTriggerResponseArrayOutput) ToTimerTriggerResponseArrayOutputWithContext(ctx context.Context) TimerTriggerResponseArrayOutput {
	return o
}

func (o TimerTriggerResponseArrayOutput) Index(i pulumi.IntInput) TimerTriggerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimerTriggerResponse {
		return vs[0].([]TimerTriggerResponse)[vs[1].(int)]
	}).(TimerTriggerResponseOutput)
}

// The TLS certificate properties of the connected registry login server.
type TlsCertificatePropertiesResponse struct {
	// Indicates the location of the certificates.
	Location string `pulumi:"location"`
	// The type of certificate location.
	Type string `pulumi:"type"`
}

// The TLS certificate properties of the connected registry login server.
type TlsCertificatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (TlsCertificatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificatePropertiesResponse)(nil)).Elem()
}

func (o TlsCertificatePropertiesResponseOutput) ToTlsCertificatePropertiesResponseOutput() TlsCertificatePropertiesResponseOutput {
	return o
}

func (o TlsCertificatePropertiesResponseOutput) ToTlsCertificatePropertiesResponseOutputWithContext(ctx context.Context) TlsCertificatePropertiesResponseOutput {
	return o
}

// Indicates the location of the certificates.
func (o TlsCertificatePropertiesResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificatePropertiesResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The type of certificate location.
func (o TlsCertificatePropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificatePropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TlsCertificatePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TlsCertificatePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificatePropertiesResponse)(nil)).Elem()
}

func (o TlsCertificatePropertiesResponsePtrOutput) ToTlsCertificatePropertiesResponsePtrOutput() TlsCertificatePropertiesResponsePtrOutput {
	return o
}

func (o TlsCertificatePropertiesResponsePtrOutput) ToTlsCertificatePropertiesResponsePtrOutputWithContext(ctx context.Context) TlsCertificatePropertiesResponsePtrOutput {
	return o
}

func (o TlsCertificatePropertiesResponsePtrOutput) Elem() TlsCertificatePropertiesResponseOutput {
	return o.ApplyT(func(v *TlsCertificatePropertiesResponse) TlsCertificatePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret TlsCertificatePropertiesResponse
		return ret
	}).(TlsCertificatePropertiesResponseOutput)
}

// Indicates the location of the certificates.
func (o TlsCertificatePropertiesResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertificatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// The type of certificate location.
func (o TlsCertificatePropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertificatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The TLS properties of the connected registry login server.
type TlsPropertiesResponse struct {
	// The certificate used to configure HTTPS for the login server.
	Certificate TlsCertificatePropertiesResponse `pulumi:"certificate"`
	// Indicates whether HTTPS is enabled for the login server.
	Status string `pulumi:"status"`
}

// The TLS properties of the connected registry login server.
type TlsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TlsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsPropertiesResponse)(nil)).Elem()
}

func (o TlsPropertiesResponseOutput) ToTlsPropertiesResponseOutput() TlsPropertiesResponseOutput {
	return o
}

func (o TlsPropertiesResponseOutput) ToTlsPropertiesResponseOutputWithContext(ctx context.Context) TlsPropertiesResponseOutput {
	return o
}

// The certificate used to configure HTTPS for the login server.
func (o TlsPropertiesResponseOutput) Certificate() TlsCertificatePropertiesResponseOutput {
	return o.ApplyT(func(v TlsPropertiesResponse) TlsCertificatePropertiesResponse { return v.Certificate }).(TlsCertificatePropertiesResponseOutput)
}

// Indicates whether HTTPS is enabled for the login server.
func (o TlsPropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v TlsPropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type TlsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TlsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsPropertiesResponse)(nil)).Elem()
}

func (o TlsPropertiesResponsePtrOutput) ToTlsPropertiesResponsePtrOutput() TlsPropertiesResponsePtrOutput {
	return o
}

func (o TlsPropertiesResponsePtrOutput) ToTlsPropertiesResponsePtrOutputWithContext(ctx context.Context) TlsPropertiesResponsePtrOutput {
	return o
}

func (o TlsPropertiesResponsePtrOutput) Elem() TlsPropertiesResponseOutput {
	return o.ApplyT(func(v *TlsPropertiesResponse) TlsPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret TlsPropertiesResponse
		return ret
	}).(TlsPropertiesResponseOutput)
}

// The certificate used to configure HTTPS for the login server.
func (o TlsPropertiesResponsePtrOutput) Certificate() TlsCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *TlsPropertiesResponse) *TlsCertificatePropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Certificate
	}).(TlsCertificatePropertiesResponsePtrOutput)
}

// Indicates whether HTTPS is enabled for the login server.
func (o TlsPropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The properties of a certificate used for authenticating a token.
type TokenCertificate struct {
	// Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
	EncodedPemCertificate *string `pulumi:"encodedPemCertificate"`
	// The expiry datetime of the certificate.
	Expiry *string `pulumi:"expiry"`
	Name   *string `pulumi:"name"`
	// The thumbprint of the certificate.
	Thumbprint *string `pulumi:"thumbprint"`
}

// TokenCertificateInput is an input type that accepts TokenCertificateArgs and TokenCertificateOutput values.
// You can construct a concrete instance of `TokenCertificateInput` via:
//
//	TokenCertificateArgs{...}
type TokenCertificateInput interface {
	pulumi.Input

	ToTokenCertificateOutput() TokenCertificateOutput
	ToTokenCertificateOutputWithContext(context.Context) TokenCertificateOutput
}

// The properties of a certificate used for authenticating a token.
type TokenCertificateArgs struct {
	// Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
	EncodedPemCertificate pulumi.StringPtrInput `pulumi:"encodedPemCertificate"`
	// The expiry datetime of the certificate.
	Expiry pulumi.StringPtrInput `pulumi:"expiry"`
	Name   pulumi.StringPtrInput `pulumi:"name"`
	// The thumbprint of the certificate.
	Thumbprint pulumi.StringPtrInput `pulumi:"thumbprint"`
}

func (TokenCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenCertificate)(nil)).Elem()
}

func (i TokenCertificateArgs) ToTokenCertificateOutput() TokenCertificateOutput {
	return i.ToTokenCertificateOutputWithContext(context.Background())
}

func (i TokenCertificateArgs) ToTokenCertificateOutputWithContext(ctx context.Context) TokenCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenCertificateOutput)
}

// TokenCertificateArrayInput is an input type that accepts TokenCertificateArray and TokenCertificateArrayOutput values.
// You can construct a concrete instance of `TokenCertificateArrayInput` via:
//
//	TokenCertificateArray{ TokenCertificateArgs{...} }
type TokenCertificateArrayInput interface {
	pulumi.Input

	ToTokenCertificateArrayOutput() TokenCertificateArrayOutput
	ToTokenCertificateArrayOutputWithContext(context.Context) TokenCertificateArrayOutput
}

type TokenCertificateArray []TokenCertificateInput

func (TokenCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenCertificate)(nil)).Elem()
}

func (i TokenCertificateArray) ToTokenCertificateArrayOutput() TokenCertificateArrayOutput {
	return i.ToTokenCertificateArrayOutputWithContext(context.Background())
}

func (i TokenCertificateArray) ToTokenCertificateArrayOutputWithContext(ctx context.Context) TokenCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenCertificateArrayOutput)
}

// The properties of a certificate used for authenticating a token.
type TokenCertificateOutput struct{ *pulumi.OutputState }

func (TokenCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenCertificate)(nil)).Elem()
}

func (o TokenCertificateOutput) ToTokenCertificateOutput() TokenCertificateOutput {
	return o
}

func (o TokenCertificateOutput) ToTokenCertificateOutputWithContext(ctx context.Context) TokenCertificateOutput {
	return o
}

// Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
func (o TokenCertificateOutput) EncodedPemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenCertificate) *string { return v.EncodedPemCertificate }).(pulumi.StringPtrOutput)
}

// The expiry datetime of the certificate.
func (o TokenCertificateOutput) Expiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenCertificate) *string { return v.Expiry }).(pulumi.StringPtrOutput)
}

func (o TokenCertificateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenCertificate) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate.
func (o TokenCertificateOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenCertificate) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

type TokenCertificateArrayOutput struct{ *pulumi.OutputState }

func (TokenCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenCertificate)(nil)).Elem()
}

func (o TokenCertificateArrayOutput) ToTokenCertificateArrayOutput() TokenCertificateArrayOutput {
	return o
}

func (o TokenCertificateArrayOutput) ToTokenCertificateArrayOutputWithContext(ctx context.Context) TokenCertificateArrayOutput {
	return o
}

func (o TokenCertificateArrayOutput) Index(i pulumi.IntInput) TokenCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TokenCertificate {
		return vs[0].([]TokenCertificate)[vs[1].(int)]
	}).(TokenCertificateOutput)
}

// The properties of a certificate used for authenticating a token.
type TokenCertificateResponse struct {
	// Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
	EncodedPemCertificate *string `pulumi:"encodedPemCertificate"`
	// The expiry datetime of the certificate.
	Expiry *string `pulumi:"expiry"`
	Name   *string `pulumi:"name"`
	// The thumbprint of the certificate.
	Thumbprint *string `pulumi:"thumbprint"`
}

// The properties of a certificate used for authenticating a token.
type TokenCertificateResponseOutput struct{ *pulumi.OutputState }

func (TokenCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenCertificateResponse)(nil)).Elem()
}

func (o TokenCertificateResponseOutput) ToTokenCertificateResponseOutput() TokenCertificateResponseOutput {
	return o
}

func (o TokenCertificateResponseOutput) ToTokenCertificateResponseOutputWithContext(ctx context.Context) TokenCertificateResponseOutput {
	return o
}

// Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
func (o TokenCertificateResponseOutput) EncodedPemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenCertificateResponse) *string { return v.EncodedPemCertificate }).(pulumi.StringPtrOutput)
}

// The expiry datetime of the certificate.
func (o TokenCertificateResponseOutput) Expiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenCertificateResponse) *string { return v.Expiry }).(pulumi.StringPtrOutput)
}

func (o TokenCertificateResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenCertificateResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate.
func (o TokenCertificateResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenCertificateResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

type TokenCertificateResponseArrayOutput struct{ *pulumi.OutputState }

func (TokenCertificateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenCertificateResponse)(nil)).Elem()
}

func (o TokenCertificateResponseArrayOutput) ToTokenCertificateResponseArrayOutput() TokenCertificateResponseArrayOutput {
	return o
}

func (o TokenCertificateResponseArrayOutput) ToTokenCertificateResponseArrayOutputWithContext(ctx context.Context) TokenCertificateResponseArrayOutput {
	return o
}

func (o TokenCertificateResponseArrayOutput) Index(i pulumi.IntInput) TokenCertificateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TokenCertificateResponse {
		return vs[0].([]TokenCertificateResponse)[vs[1].(int)]
	}).(TokenCertificateResponseOutput)
}

// The properties of the credentials that can be used for authenticating the token.
type TokenCredentialsProperties struct {
	Certificates []TokenCertificate `pulumi:"certificates"`
	Passwords    []TokenPassword    `pulumi:"passwords"`
}

// TokenCredentialsPropertiesInput is an input type that accepts TokenCredentialsPropertiesArgs and TokenCredentialsPropertiesOutput values.
// You can construct a concrete instance of `TokenCredentialsPropertiesInput` via:
//
//	TokenCredentialsPropertiesArgs{...}
type TokenCredentialsPropertiesInput interface {
	pulumi.Input

	ToTokenCredentialsPropertiesOutput() TokenCredentialsPropertiesOutput
	ToTokenCredentialsPropertiesOutputWithContext(context.Context) TokenCredentialsPropertiesOutput
}

// The properties of the credentials that can be used for authenticating the token.
type TokenCredentialsPropertiesArgs struct {
	Certificates TokenCertificateArrayInput `pulumi:"certificates"`
	Passwords    TokenPasswordArrayInput    `pulumi:"passwords"`
}

func (TokenCredentialsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenCredentialsProperties)(nil)).Elem()
}

func (i TokenCredentialsPropertiesArgs) ToTokenCredentialsPropertiesOutput() TokenCredentialsPropertiesOutput {
	return i.ToTokenCredentialsPropertiesOutputWithContext(context.Background())
}

func (i TokenCredentialsPropertiesArgs) ToTokenCredentialsPropertiesOutputWithContext(ctx context.Context) TokenCredentialsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenCredentialsPropertiesOutput)
}

func (i TokenCredentialsPropertiesArgs) ToTokenCredentialsPropertiesPtrOutput() TokenCredentialsPropertiesPtrOutput {
	return i.ToTokenCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (i TokenCredentialsPropertiesArgs) ToTokenCredentialsPropertiesPtrOutputWithContext(ctx context.Context) TokenCredentialsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenCredentialsPropertiesOutput).ToTokenCredentialsPropertiesPtrOutputWithContext(ctx)
}

// TokenCredentialsPropertiesPtrInput is an input type that accepts TokenCredentialsPropertiesArgs, TokenCredentialsPropertiesPtr and TokenCredentialsPropertiesPtrOutput values.
// You can construct a concrete instance of `TokenCredentialsPropertiesPtrInput` via:
//
//	        TokenCredentialsPropertiesArgs{...}
//
//	or:
//
//	        nil
type TokenCredentialsPropertiesPtrInput interface {
	pulumi.Input

	ToTokenCredentialsPropertiesPtrOutput() TokenCredentialsPropertiesPtrOutput
	ToTokenCredentialsPropertiesPtrOutputWithContext(context.Context) TokenCredentialsPropertiesPtrOutput
}

type tokenCredentialsPropertiesPtrType TokenCredentialsPropertiesArgs

func TokenCredentialsPropertiesPtr(v *TokenCredentialsPropertiesArgs) TokenCredentialsPropertiesPtrInput {
	return (*tokenCredentialsPropertiesPtrType)(v)
}

func (*tokenCredentialsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenCredentialsProperties)(nil)).Elem()
}

func (i *tokenCredentialsPropertiesPtrType) ToTokenCredentialsPropertiesPtrOutput() TokenCredentialsPropertiesPtrOutput {
	return i.ToTokenCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (i *tokenCredentialsPropertiesPtrType) ToTokenCredentialsPropertiesPtrOutputWithContext(ctx context.Context) TokenCredentialsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenCredentialsPropertiesPtrOutput)
}

// The properties of the credentials that can be used for authenticating the token.
type TokenCredentialsPropertiesOutput struct{ *pulumi.OutputState }

func (TokenCredentialsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenCredentialsProperties)(nil)).Elem()
}

func (o TokenCredentialsPropertiesOutput) ToTokenCredentialsPropertiesOutput() TokenCredentialsPropertiesOutput {
	return o
}

func (o TokenCredentialsPropertiesOutput) ToTokenCredentialsPropertiesOutputWithContext(ctx context.Context) TokenCredentialsPropertiesOutput {
	return o
}

func (o TokenCredentialsPropertiesOutput) ToTokenCredentialsPropertiesPtrOutput() TokenCredentialsPropertiesPtrOutput {
	return o.ToTokenCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (o TokenCredentialsPropertiesOutput) ToTokenCredentialsPropertiesPtrOutputWithContext(ctx context.Context) TokenCredentialsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenCredentialsProperties) *TokenCredentialsProperties {
		return &v
	}).(TokenCredentialsPropertiesPtrOutput)
}

func (o TokenCredentialsPropertiesOutput) Certificates() TokenCertificateArrayOutput {
	return o.ApplyT(func(v TokenCredentialsProperties) []TokenCertificate { return v.Certificates }).(TokenCertificateArrayOutput)
}

func (o TokenCredentialsPropertiesOutput) Passwords() TokenPasswordArrayOutput {
	return o.ApplyT(func(v TokenCredentialsProperties) []TokenPassword { return v.Passwords }).(TokenPasswordArrayOutput)
}

type TokenCredentialsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TokenCredentialsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenCredentialsProperties)(nil)).Elem()
}

func (o TokenCredentialsPropertiesPtrOutput) ToTokenCredentialsPropertiesPtrOutput() TokenCredentialsPropertiesPtrOutput {
	return o
}

func (o TokenCredentialsPropertiesPtrOutput) ToTokenCredentialsPropertiesPtrOutputWithContext(ctx context.Context) TokenCredentialsPropertiesPtrOutput {
	return o
}

func (o TokenCredentialsPropertiesPtrOutput) Elem() TokenCredentialsPropertiesOutput {
	return o.ApplyT(func(v *TokenCredentialsProperties) TokenCredentialsProperties {
		if v != nil {
			return *v
		}
		var ret TokenCredentialsProperties
		return ret
	}).(TokenCredentialsPropertiesOutput)
}

func (o TokenCredentialsPropertiesPtrOutput) Certificates() TokenCertificateArrayOutput {
	return o.ApplyT(func(v *TokenCredentialsProperties) []TokenCertificate {
		if v == nil {
			return nil
		}
		return v.Certificates
	}).(TokenCertificateArrayOutput)
}

func (o TokenCredentialsPropertiesPtrOutput) Passwords() TokenPasswordArrayOutput {
	return o.ApplyT(func(v *TokenCredentialsProperties) []TokenPassword {
		if v == nil {
			return nil
		}
		return v.Passwords
	}).(TokenPasswordArrayOutput)
}

// The properties of the credentials that can be used for authenticating the token.
type TokenCredentialsPropertiesResponse struct {
	Certificates []TokenCertificateResponse `pulumi:"certificates"`
	Passwords    []TokenPasswordResponse    `pulumi:"passwords"`
}

// The properties of the credentials that can be used for authenticating the token.
type TokenCredentialsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TokenCredentialsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenCredentialsPropertiesResponse)(nil)).Elem()
}

func (o TokenCredentialsPropertiesResponseOutput) ToTokenCredentialsPropertiesResponseOutput() TokenCredentialsPropertiesResponseOutput {
	return o
}

func (o TokenCredentialsPropertiesResponseOutput) ToTokenCredentialsPropertiesResponseOutputWithContext(ctx context.Context) TokenCredentialsPropertiesResponseOutput {
	return o
}

func (o TokenCredentialsPropertiesResponseOutput) Certificates() TokenCertificateResponseArrayOutput {
	return o.ApplyT(func(v TokenCredentialsPropertiesResponse) []TokenCertificateResponse { return v.Certificates }).(TokenCertificateResponseArrayOutput)
}

func (o TokenCredentialsPropertiesResponseOutput) Passwords() TokenPasswordResponseArrayOutput {
	return o.ApplyT(func(v TokenCredentialsPropertiesResponse) []TokenPasswordResponse { return v.Passwords }).(TokenPasswordResponseArrayOutput)
}

type TokenCredentialsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TokenCredentialsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenCredentialsPropertiesResponse)(nil)).Elem()
}

func (o TokenCredentialsPropertiesResponsePtrOutput) ToTokenCredentialsPropertiesResponsePtrOutput() TokenCredentialsPropertiesResponsePtrOutput {
	return o
}

func (o TokenCredentialsPropertiesResponsePtrOutput) ToTokenCredentialsPropertiesResponsePtrOutputWithContext(ctx context.Context) TokenCredentialsPropertiesResponsePtrOutput {
	return o
}

func (o TokenCredentialsPropertiesResponsePtrOutput) Elem() TokenCredentialsPropertiesResponseOutput {
	return o.ApplyT(func(v *TokenCredentialsPropertiesResponse) TokenCredentialsPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret TokenCredentialsPropertiesResponse
		return ret
	}).(TokenCredentialsPropertiesResponseOutput)
}

func (o TokenCredentialsPropertiesResponsePtrOutput) Certificates() TokenCertificateResponseArrayOutput {
	return o.ApplyT(func(v *TokenCredentialsPropertiesResponse) []TokenCertificateResponse {
		if v == nil {
			return nil
		}
		return v.Certificates
	}).(TokenCertificateResponseArrayOutput)
}

func (o TokenCredentialsPropertiesResponsePtrOutput) Passwords() TokenPasswordResponseArrayOutput {
	return o.ApplyT(func(v *TokenCredentialsPropertiesResponse) []TokenPasswordResponse {
		if v == nil {
			return nil
		}
		return v.Passwords
	}).(TokenPasswordResponseArrayOutput)
}

// The password that will be used for authenticating the token of a container registry.
type TokenPassword struct {
	// The creation datetime of the password.
	CreationTime *string `pulumi:"creationTime"`
	// The expiry datetime of the password.
	Expiry *string `pulumi:"expiry"`
	// The password name "password1" or "password2"
	Name *string `pulumi:"name"`
}

// TokenPasswordInput is an input type that accepts TokenPasswordArgs and TokenPasswordOutput values.
// You can construct a concrete instance of `TokenPasswordInput` via:
//
//	TokenPasswordArgs{...}
type TokenPasswordInput interface {
	pulumi.Input

	ToTokenPasswordOutput() TokenPasswordOutput
	ToTokenPasswordOutputWithContext(context.Context) TokenPasswordOutput
}

// The password that will be used for authenticating the token of a container registry.
type TokenPasswordArgs struct {
	// The creation datetime of the password.
	CreationTime pulumi.StringPtrInput `pulumi:"creationTime"`
	// The expiry datetime of the password.
	Expiry pulumi.StringPtrInput `pulumi:"expiry"`
	// The password name "password1" or "password2"
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TokenPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenPassword)(nil)).Elem()
}

func (i TokenPasswordArgs) ToTokenPasswordOutput() TokenPasswordOutput {
	return i.ToTokenPasswordOutputWithContext(context.Background())
}

func (i TokenPasswordArgs) ToTokenPasswordOutputWithContext(ctx context.Context) TokenPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenPasswordOutput)
}

// TokenPasswordArrayInput is an input type that accepts TokenPasswordArray and TokenPasswordArrayOutput values.
// You can construct a concrete instance of `TokenPasswordArrayInput` via:
//
//	TokenPasswordArray{ TokenPasswordArgs{...} }
type TokenPasswordArrayInput interface {
	pulumi.Input

	ToTokenPasswordArrayOutput() TokenPasswordArrayOutput
	ToTokenPasswordArrayOutputWithContext(context.Context) TokenPasswordArrayOutput
}

type TokenPasswordArray []TokenPasswordInput

func (TokenPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenPassword)(nil)).Elem()
}

func (i TokenPasswordArray) ToTokenPasswordArrayOutput() TokenPasswordArrayOutput {
	return i.ToTokenPasswordArrayOutputWithContext(context.Background())
}

func (i TokenPasswordArray) ToTokenPasswordArrayOutputWithContext(ctx context.Context) TokenPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenPasswordArrayOutput)
}

// The password that will be used for authenticating the token of a container registry.
type TokenPasswordOutput struct{ *pulumi.OutputState }

func (TokenPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenPassword)(nil)).Elem()
}

func (o TokenPasswordOutput) ToTokenPasswordOutput() TokenPasswordOutput {
	return o
}

func (o TokenPasswordOutput) ToTokenPasswordOutputWithContext(ctx context.Context) TokenPasswordOutput {
	return o
}

// The creation datetime of the password.
func (o TokenPasswordOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenPassword) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// The expiry datetime of the password.
func (o TokenPasswordOutput) Expiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenPassword) *string { return v.Expiry }).(pulumi.StringPtrOutput)
}

// The password name "password1" or "password2"
func (o TokenPasswordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenPassword) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TokenPasswordArrayOutput struct{ *pulumi.OutputState }

func (TokenPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenPassword)(nil)).Elem()
}

func (o TokenPasswordArrayOutput) ToTokenPasswordArrayOutput() TokenPasswordArrayOutput {
	return o
}

func (o TokenPasswordArrayOutput) ToTokenPasswordArrayOutputWithContext(ctx context.Context) TokenPasswordArrayOutput {
	return o
}

func (o TokenPasswordArrayOutput) Index(i pulumi.IntInput) TokenPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TokenPassword {
		return vs[0].([]TokenPassword)[vs[1].(int)]
	}).(TokenPasswordOutput)
}

// The password that will be used for authenticating the token of a container registry.
type TokenPasswordResponse struct {
	// The creation datetime of the password.
	CreationTime *string `pulumi:"creationTime"`
	// The expiry datetime of the password.
	Expiry *string `pulumi:"expiry"`
	// The password name "password1" or "password2"
	Name *string `pulumi:"name"`
	// The password value.
	Value string `pulumi:"value"`
}

// The password that will be used for authenticating the token of a container registry.
type TokenPasswordResponseOutput struct{ *pulumi.OutputState }

func (TokenPasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenPasswordResponse)(nil)).Elem()
}

func (o TokenPasswordResponseOutput) ToTokenPasswordResponseOutput() TokenPasswordResponseOutput {
	return o
}

func (o TokenPasswordResponseOutput) ToTokenPasswordResponseOutputWithContext(ctx context.Context) TokenPasswordResponseOutput {
	return o
}

// The creation datetime of the password.
func (o TokenPasswordResponseOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenPasswordResponse) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// The expiry datetime of the password.
func (o TokenPasswordResponseOutput) Expiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenPasswordResponse) *string { return v.Expiry }).(pulumi.StringPtrOutput)
}

// The password name "password1" or "password2"
func (o TokenPasswordResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenPasswordResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password value.
func (o TokenPasswordResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TokenPasswordResponse) string { return v.Value }).(pulumi.StringOutput)
}

type TokenPasswordResponseArrayOutput struct{ *pulumi.OutputState }

func (TokenPasswordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenPasswordResponse)(nil)).Elem()
}

func (o TokenPasswordResponseArrayOutput) ToTokenPasswordResponseArrayOutput() TokenPasswordResponseArrayOutput {
	return o
}

func (o TokenPasswordResponseArrayOutput) ToTokenPasswordResponseArrayOutputWithContext(ctx context.Context) TokenPasswordResponseArrayOutput {
	return o
}

func (o TokenPasswordResponseArrayOutput) Index(i pulumi.IntInput) TokenPasswordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TokenPasswordResponse {
		return vs[0].([]TokenPasswordResponse)[vs[1].(int)]
	}).(TokenPasswordResponseOutput)
}

// The properties of a trigger.
type TriggerProperties struct {
	// The trigger based on base image dependencies.
	BaseImageTrigger *BaseImageTrigger `pulumi:"baseImageTrigger"`
	// The collection of triggers based on source code repository.
	SourceTriggers []SourceTrigger `pulumi:"sourceTriggers"`
	// The collection of timer triggers.
	TimerTriggers []TimerTrigger `pulumi:"timerTriggers"`
}

// Defaults sets the appropriate defaults for TriggerProperties
func (val *TriggerProperties) Defaults() *TriggerProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BaseImageTrigger = tmp.BaseImageTrigger.Defaults()

	return &tmp
}

// TriggerPropertiesInput is an input type that accepts TriggerPropertiesArgs and TriggerPropertiesOutput values.
// You can construct a concrete instance of `TriggerPropertiesInput` via:
//
//	TriggerPropertiesArgs{...}
type TriggerPropertiesInput interface {
	pulumi.Input

	ToTriggerPropertiesOutput() TriggerPropertiesOutput
	ToTriggerPropertiesOutputWithContext(context.Context) TriggerPropertiesOutput
}

// The properties of a trigger.
type TriggerPropertiesArgs struct {
	// The trigger based on base image dependencies.
	BaseImageTrigger BaseImageTriggerPtrInput `pulumi:"baseImageTrigger"`
	// The collection of triggers based on source code repository.
	SourceTriggers SourceTriggerArrayInput `pulumi:"sourceTriggers"`
	// The collection of timer triggers.
	TimerTriggers TimerTriggerArrayInput `pulumi:"timerTriggers"`
}

// Defaults sets the appropriate defaults for TriggerPropertiesArgs
func (val *TriggerPropertiesArgs) Defaults() *TriggerPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TriggerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerProperties)(nil)).Elem()
}

func (i TriggerPropertiesArgs) ToTriggerPropertiesOutput() TriggerPropertiesOutput {
	return i.ToTriggerPropertiesOutputWithContext(context.Background())
}

func (i TriggerPropertiesArgs) ToTriggerPropertiesOutputWithContext(ctx context.Context) TriggerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPropertiesOutput)
}

func (i TriggerPropertiesArgs) ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput {
	return i.ToTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i TriggerPropertiesArgs) ToTriggerPropertiesPtrOutputWithContext(ctx context.Context) TriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPropertiesOutput).ToTriggerPropertiesPtrOutputWithContext(ctx)
}

// TriggerPropertiesPtrInput is an input type that accepts TriggerPropertiesArgs, TriggerPropertiesPtr and TriggerPropertiesPtrOutput values.
// You can construct a concrete instance of `TriggerPropertiesPtrInput` via:
//
//	        TriggerPropertiesArgs{...}
//
//	or:
//
//	        nil
type TriggerPropertiesPtrInput interface {
	pulumi.Input

	ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput
	ToTriggerPropertiesPtrOutputWithContext(context.Context) TriggerPropertiesPtrOutput
}

type triggerPropertiesPtrType TriggerPropertiesArgs

func TriggerPropertiesPtr(v *TriggerPropertiesArgs) TriggerPropertiesPtrInput {
	return (*triggerPropertiesPtrType)(v)
}

func (*triggerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerProperties)(nil)).Elem()
}

func (i *triggerPropertiesPtrType) ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput {
	return i.ToTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i *triggerPropertiesPtrType) ToTriggerPropertiesPtrOutputWithContext(ctx context.Context) TriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPropertiesPtrOutput)
}

// The properties of a trigger.
type TriggerPropertiesOutput struct{ *pulumi.OutputState }

func (TriggerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerProperties)(nil)).Elem()
}

func (o TriggerPropertiesOutput) ToTriggerPropertiesOutput() TriggerPropertiesOutput {
	return o
}

func (o TriggerPropertiesOutput) ToTriggerPropertiesOutputWithContext(ctx context.Context) TriggerPropertiesOutput {
	return o
}

func (o TriggerPropertiesOutput) ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput {
	return o.ToTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (o TriggerPropertiesOutput) ToTriggerPropertiesPtrOutputWithContext(ctx context.Context) TriggerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerProperties) *TriggerProperties {
		return &v
	}).(TriggerPropertiesPtrOutput)
}

// The trigger based on base image dependencies.
func (o TriggerPropertiesOutput) BaseImageTrigger() BaseImageTriggerPtrOutput {
	return o.ApplyT(func(v TriggerProperties) *BaseImageTrigger { return v.BaseImageTrigger }).(BaseImageTriggerPtrOutput)
}

// The collection of triggers based on source code repository.
func (o TriggerPropertiesOutput) SourceTriggers() SourceTriggerArrayOutput {
	return o.ApplyT(func(v TriggerProperties) []SourceTrigger { return v.SourceTriggers }).(SourceTriggerArrayOutput)
}

// The collection of timer triggers.
func (o TriggerPropertiesOutput) TimerTriggers() TimerTriggerArrayOutput {
	return o.ApplyT(func(v TriggerProperties) []TimerTrigger { return v.TimerTriggers }).(TimerTriggerArrayOutput)
}

type TriggerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TriggerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerProperties)(nil)).Elem()
}

func (o TriggerPropertiesPtrOutput) ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput {
	return o
}

func (o TriggerPropertiesPtrOutput) ToTriggerPropertiesPtrOutputWithContext(ctx context.Context) TriggerPropertiesPtrOutput {
	return o
}

func (o TriggerPropertiesPtrOutput) Elem() TriggerPropertiesOutput {
	return o.ApplyT(func(v *TriggerProperties) TriggerProperties {
		if v != nil {
			return *v
		}
		var ret TriggerProperties
		return ret
	}).(TriggerPropertiesOutput)
}

// The trigger based on base image dependencies.
func (o TriggerPropertiesPtrOutput) BaseImageTrigger() BaseImageTriggerPtrOutput {
	return o.ApplyT(func(v *TriggerProperties) *BaseImageTrigger {
		if v == nil {
			return nil
		}
		return v.BaseImageTrigger
	}).(BaseImageTriggerPtrOutput)
}

// The collection of triggers based on source code repository.
func (o TriggerPropertiesPtrOutput) SourceTriggers() SourceTriggerArrayOutput {
	return o.ApplyT(func(v *TriggerProperties) []SourceTrigger {
		if v == nil {
			return nil
		}
		return v.SourceTriggers
	}).(SourceTriggerArrayOutput)
}

// The collection of timer triggers.
func (o TriggerPropertiesPtrOutput) TimerTriggers() TimerTriggerArrayOutput {
	return o.ApplyT(func(v *TriggerProperties) []TimerTrigger {
		if v == nil {
			return nil
		}
		return v.TimerTriggers
	}).(TimerTriggerArrayOutput)
}

// The properties of a trigger.
type TriggerPropertiesResponse struct {
	// The trigger based on base image dependencies.
	BaseImageTrigger *BaseImageTriggerResponse `pulumi:"baseImageTrigger"`
	// The collection of triggers based on source code repository.
	SourceTriggers []SourceTriggerResponse `pulumi:"sourceTriggers"`
	// The collection of timer triggers.
	TimerTriggers []TimerTriggerResponse `pulumi:"timerTriggers"`
}

// Defaults sets the appropriate defaults for TriggerPropertiesResponse
func (val *TriggerPropertiesResponse) Defaults() *TriggerPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BaseImageTrigger = tmp.BaseImageTrigger.Defaults()

	return &tmp
}

// The properties of a trigger.
type TriggerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TriggerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPropertiesResponse)(nil)).Elem()
}

func (o TriggerPropertiesResponseOutput) ToTriggerPropertiesResponseOutput() TriggerPropertiesResponseOutput {
	return o
}

func (o TriggerPropertiesResponseOutput) ToTriggerPropertiesResponseOutputWithContext(ctx context.Context) TriggerPropertiesResponseOutput {
	return o
}

// The trigger based on base image dependencies.
func (o TriggerPropertiesResponseOutput) BaseImageTrigger() BaseImageTriggerResponsePtrOutput {
	return o.ApplyT(func(v TriggerPropertiesResponse) *BaseImageTriggerResponse { return v.BaseImageTrigger }).(BaseImageTriggerResponsePtrOutput)
}

// The collection of triggers based on source code repository.
func (o TriggerPropertiesResponseOutput) SourceTriggers() SourceTriggerResponseArrayOutput {
	return o.ApplyT(func(v TriggerPropertiesResponse) []SourceTriggerResponse { return v.SourceTriggers }).(SourceTriggerResponseArrayOutput)
}

// The collection of timer triggers.
func (o TriggerPropertiesResponseOutput) TimerTriggers() TimerTriggerResponseArrayOutput {
	return o.ApplyT(func(v TriggerPropertiesResponse) []TimerTriggerResponse { return v.TimerTriggers }).(TimerTriggerResponseArrayOutput)
}

type TriggerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TriggerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPropertiesResponse)(nil)).Elem()
}

func (o TriggerPropertiesResponsePtrOutput) ToTriggerPropertiesResponsePtrOutput() TriggerPropertiesResponsePtrOutput {
	return o
}

func (o TriggerPropertiesResponsePtrOutput) ToTriggerPropertiesResponsePtrOutputWithContext(ctx context.Context) TriggerPropertiesResponsePtrOutput {
	return o
}

func (o TriggerPropertiesResponsePtrOutput) Elem() TriggerPropertiesResponseOutput {
	return o.ApplyT(func(v *TriggerPropertiesResponse) TriggerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret TriggerPropertiesResponse
		return ret
	}).(TriggerPropertiesResponseOutput)
}

// The trigger based on base image dependencies.
func (o TriggerPropertiesResponsePtrOutput) BaseImageTrigger() BaseImageTriggerResponsePtrOutput {
	return o.ApplyT(func(v *TriggerPropertiesResponse) *BaseImageTriggerResponse {
		if v == nil {
			return nil
		}
		return v.BaseImageTrigger
	}).(BaseImageTriggerResponsePtrOutput)
}

// The collection of triggers based on source code repository.
func (o TriggerPropertiesResponsePtrOutput) SourceTriggers() SourceTriggerResponseArrayOutput {
	return o.ApplyT(func(v *TriggerPropertiesResponse) []SourceTriggerResponse {
		if v == nil {
			return nil
		}
		return v.SourceTriggers
	}).(SourceTriggerResponseArrayOutput)
}

// The collection of timer triggers.
func (o TriggerPropertiesResponsePtrOutput) TimerTriggers() TimerTriggerResponseArrayOutput {
	return o.ApplyT(func(v *TriggerPropertiesResponse) []TimerTriggerResponse {
		if v == nil {
			return nil
		}
		return v.TimerTriggers
	}).(TimerTriggerResponseArrayOutput)
}

// The content trust policy for a container registry.
type TrustPolicy struct {
	// The value that indicates whether the policy is enabled or not.
	Status *string `pulumi:"status"`
	// The type of trust policy.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for TrustPolicy
func (val *TrustPolicy) Defaults() *TrustPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "disabled"
		tmp.Status = &status_
	}
	if isZero(tmp.Type) {
		type_ := "Notary"
		tmp.Type = &type_
	}
	return &tmp
}

// TrustPolicyInput is an input type that accepts TrustPolicyArgs and TrustPolicyOutput values.
// You can construct a concrete instance of `TrustPolicyInput` via:
//
//	TrustPolicyArgs{...}
type TrustPolicyInput interface {
	pulumi.Input

	ToTrustPolicyOutput() TrustPolicyOutput
	ToTrustPolicyOutputWithContext(context.Context) TrustPolicyOutput
}

// The content trust policy for a container registry.
type TrustPolicyArgs struct {
	// The value that indicates whether the policy is enabled or not.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The type of trust policy.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for TrustPolicyArgs
func (val *TrustPolicyArgs) Defaults() *TrustPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = pulumi.StringPtr("disabled")
	}
	if isZero(tmp.Type) {
		tmp.Type = pulumi.StringPtr("Notary")
	}
	return &tmp
}
func (TrustPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustPolicy)(nil)).Elem()
}

func (i TrustPolicyArgs) ToTrustPolicyOutput() TrustPolicyOutput {
	return i.ToTrustPolicyOutputWithContext(context.Background())
}

func (i TrustPolicyArgs) ToTrustPolicyOutputWithContext(ctx context.Context) TrustPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustPolicyOutput)
}

func (i TrustPolicyArgs) ToTrustPolicyPtrOutput() TrustPolicyPtrOutput {
	return i.ToTrustPolicyPtrOutputWithContext(context.Background())
}

func (i TrustPolicyArgs) ToTrustPolicyPtrOutputWithContext(ctx context.Context) TrustPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustPolicyOutput).ToTrustPolicyPtrOutputWithContext(ctx)
}

// TrustPolicyPtrInput is an input type that accepts TrustPolicyArgs, TrustPolicyPtr and TrustPolicyPtrOutput values.
// You can construct a concrete instance of `TrustPolicyPtrInput` via:
//
//	        TrustPolicyArgs{...}
//
//	or:
//
//	        nil
type TrustPolicyPtrInput interface {
	pulumi.Input

	ToTrustPolicyPtrOutput() TrustPolicyPtrOutput
	ToTrustPolicyPtrOutputWithContext(context.Context) TrustPolicyPtrOutput
}

type trustPolicyPtrType TrustPolicyArgs

func TrustPolicyPtr(v *TrustPolicyArgs) TrustPolicyPtrInput {
	return (*trustPolicyPtrType)(v)
}

func (*trustPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustPolicy)(nil)).Elem()
}

func (i *trustPolicyPtrType) ToTrustPolicyPtrOutput() TrustPolicyPtrOutput {
	return i.ToTrustPolicyPtrOutputWithContext(context.Background())
}

func (i *trustPolicyPtrType) ToTrustPolicyPtrOutputWithContext(ctx context.Context) TrustPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustPolicyPtrOutput)
}

// The content trust policy for a container registry.
type TrustPolicyOutput struct{ *pulumi.OutputState }

func (TrustPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustPolicy)(nil)).Elem()
}

func (o TrustPolicyOutput) ToTrustPolicyOutput() TrustPolicyOutput {
	return o
}

func (o TrustPolicyOutput) ToTrustPolicyOutputWithContext(ctx context.Context) TrustPolicyOutput {
	return o
}

func (o TrustPolicyOutput) ToTrustPolicyPtrOutput() TrustPolicyPtrOutput {
	return o.ToTrustPolicyPtrOutputWithContext(context.Background())
}

func (o TrustPolicyOutput) ToTrustPolicyPtrOutputWithContext(ctx context.Context) TrustPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrustPolicy) *TrustPolicy {
		return &v
	}).(TrustPolicyPtrOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o TrustPolicyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustPolicy) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of trust policy.
func (o TrustPolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustPolicy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TrustPolicyPtrOutput struct{ *pulumi.OutputState }

func (TrustPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustPolicy)(nil)).Elem()
}

func (o TrustPolicyPtrOutput) ToTrustPolicyPtrOutput() TrustPolicyPtrOutput {
	return o
}

func (o TrustPolicyPtrOutput) ToTrustPolicyPtrOutputWithContext(ctx context.Context) TrustPolicyPtrOutput {
	return o
}

func (o TrustPolicyPtrOutput) Elem() TrustPolicyOutput {
	return o.ApplyT(func(v *TrustPolicy) TrustPolicy {
		if v != nil {
			return *v
		}
		var ret TrustPolicy
		return ret
	}).(TrustPolicyOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o TrustPolicyPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The type of trust policy.
func (o TrustPolicyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The content trust policy for a container registry.
type TrustPolicyResponse struct {
	// The value that indicates whether the policy is enabled or not.
	Status *string `pulumi:"status"`
	// The type of trust policy.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for TrustPolicyResponse
func (val *TrustPolicyResponse) Defaults() *TrustPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "disabled"
		tmp.Status = &status_
	}
	if isZero(tmp.Type) {
		type_ := "Notary"
		tmp.Type = &type_
	}
	return &tmp
}

// The content trust policy for a container registry.
type TrustPolicyResponseOutput struct{ *pulumi.OutputState }

func (TrustPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustPolicyResponse)(nil)).Elem()
}

func (o TrustPolicyResponseOutput) ToTrustPolicyResponseOutput() TrustPolicyResponseOutput {
	return o
}

func (o TrustPolicyResponseOutput) ToTrustPolicyResponseOutputWithContext(ctx context.Context) TrustPolicyResponseOutput {
	return o
}

// The value that indicates whether the policy is enabled or not.
func (o TrustPolicyResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustPolicyResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of trust policy.
func (o TrustPolicyResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustPolicyResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TrustPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (TrustPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustPolicyResponse)(nil)).Elem()
}

func (o TrustPolicyResponsePtrOutput) ToTrustPolicyResponsePtrOutput() TrustPolicyResponsePtrOutput {
	return o
}

func (o TrustPolicyResponsePtrOutput) ToTrustPolicyResponsePtrOutputWithContext(ctx context.Context) TrustPolicyResponsePtrOutput {
	return o
}

func (o TrustPolicyResponsePtrOutput) Elem() TrustPolicyResponseOutput {
	return o.ApplyT(func(v *TrustPolicyResponse) TrustPolicyResponse {
		if v != nil {
			return *v
		}
		var ret TrustPolicyResponse
		return ret
	}).(TrustPolicyResponseOutput)
}

// The value that indicates whether the policy is enabled or not.
func (o TrustPolicyResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The type of trust policy.
func (o TrustPolicyResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type UserIdentityProperties struct {
	// The client id of user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId *string `pulumi:"principalId"`
}

// UserIdentityPropertiesInput is an input type that accepts UserIdentityPropertiesArgs and UserIdentityPropertiesOutput values.
// You can construct a concrete instance of `UserIdentityPropertiesInput` via:
//
//	UserIdentityPropertiesArgs{...}
type UserIdentityPropertiesInput interface {
	pulumi.Input

	ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput
	ToUserIdentityPropertiesOutputWithContext(context.Context) UserIdentityPropertiesOutput
}

type UserIdentityPropertiesArgs struct {
	// The client id of user assigned identity.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (UserIdentityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityProperties)(nil)).Elem()
}

func (i UserIdentityPropertiesArgs) ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput {
	return i.ToUserIdentityPropertiesOutputWithContext(context.Background())
}

func (i UserIdentityPropertiesArgs) ToUserIdentityPropertiesOutputWithContext(ctx context.Context) UserIdentityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPropertiesOutput)
}

// UserIdentityPropertiesMapInput is an input type that accepts UserIdentityPropertiesMap and UserIdentityPropertiesMapOutput values.
// You can construct a concrete instance of `UserIdentityPropertiesMapInput` via:
//
//	UserIdentityPropertiesMap{ "key": UserIdentityPropertiesArgs{...} }
type UserIdentityPropertiesMapInput interface {
	pulumi.Input

	ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput
	ToUserIdentityPropertiesMapOutputWithContext(context.Context) UserIdentityPropertiesMapOutput
}

type UserIdentityPropertiesMap map[string]UserIdentityPropertiesInput

func (UserIdentityPropertiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityProperties)(nil)).Elem()
}

func (i UserIdentityPropertiesMap) ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput {
	return i.ToUserIdentityPropertiesMapOutputWithContext(context.Background())
}

func (i UserIdentityPropertiesMap) ToUserIdentityPropertiesMapOutputWithContext(ctx context.Context) UserIdentityPropertiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPropertiesMapOutput)
}

type UserIdentityPropertiesOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityProperties)(nil)).Elem()
}

func (o UserIdentityPropertiesOutput) ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput {
	return o
}

func (o UserIdentityPropertiesOutput) ToUserIdentityPropertiesOutputWithContext(ctx context.Context) UserIdentityPropertiesOutput {
	return o
}

// The client id of user assigned identity.
func (o UserIdentityPropertiesOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityProperties) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The principal id of user assigned identity.
func (o UserIdentityPropertiesOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityProperties) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserIdentityPropertiesMapOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityProperties)(nil)).Elem()
}

func (o UserIdentityPropertiesMapOutput) ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput {
	return o
}

func (o UserIdentityPropertiesMapOutput) ToUserIdentityPropertiesMapOutputWithContext(ctx context.Context) UserIdentityPropertiesMapOutput {
	return o
}

func (o UserIdentityPropertiesMapOutput) MapIndex(k pulumi.StringInput) UserIdentityPropertiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityProperties {
		return vs[0].(map[string]UserIdentityProperties)[vs[1].(string)]
	}).(UserIdentityPropertiesOutput)
}

type UserIdentityPropertiesResponse struct {
	// The client id of user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId *string `pulumi:"principalId"`
}

type UserIdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserIdentityPropertiesResponseOutput) ToUserIdentityPropertiesResponseOutput() UserIdentityPropertiesResponseOutput {
	return o
}

func (o UserIdentityPropertiesResponseOutput) ToUserIdentityPropertiesResponseOutputWithContext(ctx context.Context) UserIdentityPropertiesResponseOutput {
	return o
}

// The client id of user assigned identity.
func (o UserIdentityPropertiesResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityPropertiesResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The principal id of user assigned identity.
func (o UserIdentityPropertiesResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityPropertiesResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserIdentityPropertiesResponseMapOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserIdentityPropertiesResponseMapOutput) ToUserIdentityPropertiesResponseMapOutput() UserIdentityPropertiesResponseMapOutput {
	return o
}

func (o UserIdentityPropertiesResponseMapOutput) ToUserIdentityPropertiesResponseMapOutputWithContext(ctx context.Context) UserIdentityPropertiesResponseMapOutput {
	return o
}

func (o UserIdentityPropertiesResponseMapOutput) MapIndex(k pulumi.StringInput) UserIdentityPropertiesResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityPropertiesResponse {
		return vs[0].(map[string]UserIdentityPropertiesResponse)[vs[1].(string)]
	}).(UserIdentityPropertiesResponseOutput)
}

// Virtual network rule.
type VirtualNetworkRule struct {
	// The action of virtual network rule.
	Action *string `pulumi:"action"`
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	VirtualNetworkResourceId string `pulumi:"virtualNetworkResourceId"`
}

// Defaults sets the appropriate defaults for VirtualNetworkRule
func (val *VirtualNetworkRule) Defaults() *VirtualNetworkRule {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Action) {
		action_ := "Allow"
		tmp.Action = &action_
	}
	return &tmp
}

// VirtualNetworkRuleInput is an input type that accepts VirtualNetworkRuleArgs and VirtualNetworkRuleOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleInput` via:
//
//	VirtualNetworkRuleArgs{...}
type VirtualNetworkRuleInput interface {
	pulumi.Input

	ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput
	ToVirtualNetworkRuleOutputWithContext(context.Context) VirtualNetworkRuleOutput
}

// Virtual network rule.
type VirtualNetworkRuleArgs struct {
	// The action of virtual network rule.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	VirtualNetworkResourceId pulumi.StringInput `pulumi:"virtualNetworkResourceId"`
}

// Defaults sets the appropriate defaults for VirtualNetworkRuleArgs
func (val *VirtualNetworkRuleArgs) Defaults() *VirtualNetworkRuleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Action) {
		tmp.Action = pulumi.StringPtr("Allow")
	}
	return &tmp
}
func (VirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRule)(nil)).Elem()
}

func (i VirtualNetworkRuleArgs) ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput {
	return i.ToVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleArgs) ToVirtualNetworkRuleOutputWithContext(ctx context.Context) VirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleOutput)
}

// VirtualNetworkRuleArrayInput is an input type that accepts VirtualNetworkRuleArray and VirtualNetworkRuleArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleArrayInput` via:
//
//	VirtualNetworkRuleArray{ VirtualNetworkRuleArgs{...} }
type VirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput
	ToVirtualNetworkRuleArrayOutputWithContext(context.Context) VirtualNetworkRuleArrayOutput
}

type VirtualNetworkRuleArray []VirtualNetworkRuleInput

func (VirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRule)(nil)).Elem()
}

func (i VirtualNetworkRuleArray) ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput {
	return i.ToVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleArray) ToVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleArrayOutput)
}

// Virtual network rule.
type VirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRule)(nil)).Elem()
}

func (o VirtualNetworkRuleOutput) ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput {
	return o
}

func (o VirtualNetworkRuleOutput) ToVirtualNetworkRuleOutputWithContext(ctx context.Context) VirtualNetworkRuleOutput {
	return o
}

// The action of virtual network rule.
func (o VirtualNetworkRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
func (o VirtualNetworkRuleOutput) VirtualNetworkResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNetworkRule) string { return v.VirtualNetworkResourceId }).(pulumi.StringOutput)
}

type VirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRule)(nil)).Elem()
}

func (o VirtualNetworkRuleArrayOutput) ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput {
	return o
}

func (o VirtualNetworkRuleArrayOutput) ToVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleArrayOutput {
	return o
}

func (o VirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) VirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkRule {
		return vs[0].([]VirtualNetworkRule)[vs[1].(int)]
	}).(VirtualNetworkRuleOutput)
}

// Virtual network rule.
type VirtualNetworkRuleResponse struct {
	// The action of virtual network rule.
	Action *string `pulumi:"action"`
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	VirtualNetworkResourceId string `pulumi:"virtualNetworkResourceId"`
}

// Defaults sets the appropriate defaults for VirtualNetworkRuleResponse
func (val *VirtualNetworkRuleResponse) Defaults() *VirtualNetworkRuleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Action) {
		action_ := "Allow"
		tmp.Action = &action_
	}
	return &tmp
}

// Virtual network rule.
type VirtualNetworkRuleResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRuleResponse)(nil)).Elem()
}

func (o VirtualNetworkRuleResponseOutput) ToVirtualNetworkRuleResponseOutput() VirtualNetworkRuleResponseOutput {
	return o
}

func (o VirtualNetworkRuleResponseOutput) ToVirtualNetworkRuleResponseOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseOutput {
	return o
}

// The action of virtual network rule.
func (o VirtualNetworkRuleResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
func (o VirtualNetworkRuleResponseOutput) VirtualNetworkResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) string { return v.VirtualNetworkResourceId }).(pulumi.StringOutput)
}

type VirtualNetworkRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRuleResponse)(nil)).Elem()
}

func (o VirtualNetworkRuleResponseArrayOutput) ToVirtualNetworkRuleResponseArrayOutput() VirtualNetworkRuleResponseArrayOutput {
	return o
}

func (o VirtualNetworkRuleResponseArrayOutput) ToVirtualNetworkRuleResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseArrayOutput {
	return o
}

func (o VirtualNetworkRuleResponseArrayOutput) Index(i pulumi.IntInput) VirtualNetworkRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkRuleResponse {
		return vs[0].([]VirtualNetworkRuleResponse)[vs[1].(int)]
	}).(VirtualNetworkRuleResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ActorResponseOutput{})
	pulumi.RegisterOutputType(ActorResponsePtrOutput{})
	pulumi.RegisterOutputType(AgentPropertiesOutput{})
	pulumi.RegisterOutputType(AgentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AgentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AgentPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AuthInfoOutput{})
	pulumi.RegisterOutputType(AuthInfoPtrOutput{})
	pulumi.RegisterOutputType(AuthInfoResponseOutput{})
	pulumi.RegisterOutputType(AuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerPtrOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerResponseOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(BuildArgumentResponseOutput{})
	pulumi.RegisterOutputType(BuildArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(CredentialsOutput{})
	pulumi.RegisterOutputType(CredentialsPtrOutput{})
	pulumi.RegisterOutputType(CredentialsResponseOutput{})
	pulumi.RegisterOutputType(CredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomRegistryCredentialsOutput{})
	pulumi.RegisterOutputType(CustomRegistryCredentialsMapOutput{})
	pulumi.RegisterOutputType(CustomRegistryCredentialsResponseOutput{})
	pulumi.RegisterOutputType(CustomRegistryCredentialsResponseMapOutput{})
	pulumi.RegisterOutputType(EventContentResponseOutput{})
	pulumi.RegisterOutputType(EventContentResponsePtrOutput{})
	pulumi.RegisterOutputType(EventRequestMessageResponseOutput{})
	pulumi.RegisterOutputType(EventRequestMessageResponsePtrOutput{})
	pulumi.RegisterOutputType(EventResponseOutput{})
	pulumi.RegisterOutputType(EventResponseArrayOutput{})
	pulumi.RegisterOutputType(EventResponseMessageResponseOutput{})
	pulumi.RegisterOutputType(EventResponseMessageResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportPipelineTargetPropertiesOutput{})
	pulumi.RegisterOutputType(ExportPipelineTargetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ExportPipelineTargetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IPRuleOutput{})
	pulumi.RegisterOutputType(IPRuleArrayOutput{})
	pulumi.RegisterOutputType(IPRuleResponseOutput{})
	pulumi.RegisterOutputType(IPRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageDescriptorResponseOutput{})
	pulumi.RegisterOutputType(ImageDescriptorResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageUpdateTriggerResponseOutput{})
	pulumi.RegisterOutputType(ImageUpdateTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(ImportPipelineSourcePropertiesOutput{})
	pulumi.RegisterOutputType(ImportPipelineSourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ImportPipelineSourcePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LoggingPropertiesOutput{})
	pulumi.RegisterOutputType(LoggingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(LoggingPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LoggingPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LoginServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LoginServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkRuleSetOutput{})
	pulumi.RegisterOutputType(NetworkRuleSetPtrOutput{})
	pulumi.RegisterOutputType(NetworkRuleSetResponseOutput{})
	pulumi.RegisterOutputType(NetworkRuleSetResponsePtrOutput{})
	pulumi.RegisterOutputType(ParentPropertiesOutput{})
	pulumi.RegisterOutputType(ParentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PipelineRunRequestOutput{})
	pulumi.RegisterOutputType(PipelineRunRequestPtrOutput{})
	pulumi.RegisterOutputType(PipelineRunRequestResponseOutput{})
	pulumi.RegisterOutputType(PipelineRunRequestResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineRunResponseResponseOutput{})
	pulumi.RegisterOutputType(PipelineRunSourcePropertiesOutput{})
	pulumi.RegisterOutputType(PipelineRunSourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelineRunSourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(PipelineRunSourcePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineRunTargetPropertiesOutput{})
	pulumi.RegisterOutputType(PipelineRunTargetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelineRunTargetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PipelineRunTargetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineSourceTriggerDescriptorResponseOutput{})
	pulumi.RegisterOutputType(PipelineSourceTriggerDescriptorResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineSourceTriggerPropertiesOutput{})
	pulumi.RegisterOutputType(PipelineSourceTriggerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelineSourceTriggerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PipelineSourceTriggerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineTriggerDescriptorResponseOutput{})
	pulumi.RegisterOutputType(PipelineTriggerDescriptorResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineTriggerPropertiesOutput{})
	pulumi.RegisterOutputType(PipelineTriggerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelineTriggerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PipelineTriggerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PoliciesOutput{})
	pulumi.RegisterOutputType(PoliciesPtrOutput{})
	pulumi.RegisterOutputType(PoliciesResponseOutput{})
	pulumi.RegisterOutputType(PoliciesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ProgressPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProgressPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(QuarantinePolicyOutput{})
	pulumi.RegisterOutputType(QuarantinePolicyPtrOutput{})
	pulumi.RegisterOutputType(QuarantinePolicyResponseOutput{})
	pulumi.RegisterOutputType(QuarantinePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryPasswordResponseOutput{})
	pulumi.RegisterOutputType(RegistryPasswordResponseArrayOutput{})
	pulumi.RegisterOutputType(RequestResponseOutput{})
	pulumi.RegisterOutputType(RequestResponsePtrOutput{})
	pulumi.RegisterOutputType(RetentionPolicyOutput{})
	pulumi.RegisterOutputType(RetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RunResponseOutput{})
	pulumi.RegisterOutputType(SecretObjectOutput{})
	pulumi.RegisterOutputType(SecretObjectPtrOutput{})
	pulumi.RegisterOutputType(SecretObjectResponseOutput{})
	pulumi.RegisterOutputType(SecretObjectResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SourcePropertiesOutput{})
	pulumi.RegisterOutputType(SourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SourceRegistryCredentialsOutput{})
	pulumi.RegisterOutputType(SourceRegistryCredentialsPtrOutput{})
	pulumi.RegisterOutputType(SourceRegistryCredentialsResponseOutput{})
	pulumi.RegisterOutputType(SourceRegistryCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(SourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceTriggerOutput{})
	pulumi.RegisterOutputType(SourceTriggerArrayOutput{})
	pulumi.RegisterOutputType(SourceTriggerDescriptorResponseOutput{})
	pulumi.RegisterOutputType(SourceTriggerDescriptorResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceTriggerResponseOutput{})
	pulumi.RegisterOutputType(SourceTriggerResponseArrayOutput{})
	pulumi.RegisterOutputType(StatusDetailPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StatusDetailPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountPropertiesOutput{})
	pulumi.RegisterOutputType(StorageAccountPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StorageAccountPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SyncPropertiesOutput{})
	pulumi.RegisterOutputType(SyncPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TargetResponseOutput{})
	pulumi.RegisterOutputType(TargetResponsePtrOutput{})
	pulumi.RegisterOutputType(TimerTriggerOutput{})
	pulumi.RegisterOutputType(TimerTriggerArrayOutput{})
	pulumi.RegisterOutputType(TimerTriggerDescriptorResponseOutput{})
	pulumi.RegisterOutputType(TimerTriggerDescriptorResponsePtrOutput{})
	pulumi.RegisterOutputType(TimerTriggerResponseOutput{})
	pulumi.RegisterOutputType(TimerTriggerResponseArrayOutput{})
	pulumi.RegisterOutputType(TlsCertificatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(TlsCertificatePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TlsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TlsPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TokenCertificateOutput{})
	pulumi.RegisterOutputType(TokenCertificateArrayOutput{})
	pulumi.RegisterOutputType(TokenCertificateResponseOutput{})
	pulumi.RegisterOutputType(TokenCertificateResponseArrayOutput{})
	pulumi.RegisterOutputType(TokenCredentialsPropertiesOutput{})
	pulumi.RegisterOutputType(TokenCredentialsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TokenCredentialsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TokenCredentialsPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TokenPasswordOutput{})
	pulumi.RegisterOutputType(TokenPasswordArrayOutput{})
	pulumi.RegisterOutputType(TokenPasswordResponseOutput{})
	pulumi.RegisterOutputType(TokenPasswordResponseArrayOutput{})
	pulumi.RegisterOutputType(TriggerPropertiesOutput{})
	pulumi.RegisterOutputType(TriggerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TriggerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TriggerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TrustPolicyOutput{})
	pulumi.RegisterOutputType(TrustPolicyPtrOutput{})
	pulumi.RegisterOutputType(TrustPolicyResponseOutput{})
	pulumi.RegisterOutputType(TrustPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesMapOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesResponseMapOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleResponseArrayOutput{})
}
