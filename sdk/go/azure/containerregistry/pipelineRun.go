// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerregistry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An object that represents a pipeline run for a container registry.
// API Version: 2020-11-01-preview.
type PipelineRun struct {
	pulumi.CustomResourceState

	// How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
	ForceUpdateTag pulumi.StringPtrOutput `pulumi:"forceUpdateTag"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of a pipeline run.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The request parameters for a pipeline run.
	Request PipelineRunRequestResponsePtrOutput `pulumi:"request"`
	// The response of a pipeline run.
	Response PipelineRunResponseResponseOutput `pulumi:"response"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPipelineRun registers a new resource with the given unique name, arguments, and options.
func NewPipelineRun(ctx *pulumi.Context,
	name string, args *PipelineRunArgs, opts ...pulumi.ResourceOption) (*PipelineRun, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistryName == nil {
		return nil, errors.New("invalid value for required argument 'RegistryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Request != nil {
		args.Request = args.Request.ToPipelineRunRequestPtrOutput().ApplyT(func(v *PipelineRunRequest) *PipelineRunRequest { return v.Defaults() }).(PipelineRunRequestPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerregistry/v20191201preview:PipelineRun"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20201101preview:PipelineRun"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20210601preview:PipelineRun"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20210801preview:PipelineRun"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20211201preview:PipelineRun"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20220201preview:PipelineRun"),
		},
	})
	opts = append(opts, aliases)
	var resource PipelineRun
	err := ctx.RegisterResource("azure-native:containerregistry:PipelineRun", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineRun gets an existing PipelineRun resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineRun(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineRunState, opts ...pulumi.ResourceOption) (*PipelineRun, error) {
	var resource PipelineRun
	err := ctx.ReadResource("azure-native:containerregistry:PipelineRun", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineRun resources.
type pipelineRunState struct {
}

type PipelineRunState struct {
}

func (PipelineRunState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineRunState)(nil)).Elem()
}

type pipelineRunArgs struct {
	// How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// The name of the pipeline run.
	PipelineRunName *string `pulumi:"pipelineRunName"`
	// The name of the container registry.
	RegistryName string `pulumi:"registryName"`
	// The request parameters for a pipeline run.
	Request *PipelineRunRequest `pulumi:"request"`
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a PipelineRun resource.
type PipelineRunArgs struct {
	// How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
	ForceUpdateTag pulumi.StringPtrInput
	// The name of the pipeline run.
	PipelineRunName pulumi.StringPtrInput
	// The name of the container registry.
	RegistryName pulumi.StringInput
	// The request parameters for a pipeline run.
	Request PipelineRunRequestPtrInput
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName pulumi.StringInput
}

func (PipelineRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineRunArgs)(nil)).Elem()
}

type PipelineRunInput interface {
	pulumi.Input

	ToPipelineRunOutput() PipelineRunOutput
	ToPipelineRunOutputWithContext(ctx context.Context) PipelineRunOutput
}

func (*PipelineRun) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRun)(nil)).Elem()
}

func (i *PipelineRun) ToPipelineRunOutput() PipelineRunOutput {
	return i.ToPipelineRunOutputWithContext(context.Background())
}

func (i *PipelineRun) ToPipelineRunOutputWithContext(ctx context.Context) PipelineRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRunOutput)
}

type PipelineRunOutput struct{ *pulumi.OutputState }

func (PipelineRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRun)(nil)).Elem()
}

func (o PipelineRunOutput) ToPipelineRunOutput() PipelineRunOutput {
	return o
}

func (o PipelineRunOutput) ToPipelineRunOutputWithContext(ctx context.Context) PipelineRunOutput {
	return o
}

// How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
func (o PipelineRunOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRun) pulumi.StringPtrOutput { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o PipelineRunOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineRun) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of a pipeline run.
func (o PipelineRunOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineRun) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The request parameters for a pipeline run.
func (o PipelineRunOutput) Request() PipelineRunRequestResponsePtrOutput {
	return o.ApplyT(func(v *PipelineRun) PipelineRunRequestResponsePtrOutput { return v.Request }).(PipelineRunRequestResponsePtrOutput)
}

// The response of a pipeline run.
func (o PipelineRunOutput) Response() PipelineRunResponseResponseOutput {
	return o.ApplyT(func(v *PipelineRun) PipelineRunResponseResponseOutput { return v.Response }).(PipelineRunResponseResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o PipelineRunOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *PipelineRun) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource.
func (o PipelineRunOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineRun) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineRunOutput{})
}
