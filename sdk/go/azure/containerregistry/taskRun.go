// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerregistry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The task run that has the ARM resource and properties.
// The task run will have the information of request and result of a run.
// API Version: 2019-06-01-preview.
type TaskRun struct {
	pulumi.CustomResourceState

	// How the run should be forced to rerun even if the run request configuration has not changed
	ForceUpdateTag pulumi.StringPtrOutput `pulumi:"forceUpdateTag"`
	// Identity for the resource.
	Identity IdentityPropertiesResponsePtrOutput `pulumi:"identity"`
	// The location of the resource
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of this task run
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The request (parameters) for the run
	RunRequest pulumi.AnyOutput `pulumi:"runRequest"`
	// The result of this task run
	RunResult RunResponseOutput `pulumi:"runResult"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTaskRun registers a new resource with the given unique name, arguments, and options.
func NewTaskRun(ctx *pulumi.Context,
	name string, args *TaskRunArgs, opts ...pulumi.ResourceOption) (*TaskRun, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistryName == nil {
		return nil, errors.New("invalid value for required argument 'RegistryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TaskRunName == nil {
		return nil, errors.New("invalid value for required argument 'TaskRunName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:containerregistry/v20190601preview:TaskRun"),
		},
	})
	opts = append(opts, aliases)
	var resource TaskRun
	err := ctx.RegisterResource("azure-nextgen:containerregistry:TaskRun", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskRun gets an existing TaskRun resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskRun(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskRunState, opts ...pulumi.ResourceOption) (*TaskRun, error) {
	var resource TaskRun
	err := ctx.ReadResource("azure-nextgen:containerregistry:TaskRun", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskRun resources.
type taskRunState struct {
	// How the run should be forced to rerun even if the run request configuration has not changed
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Identity for the resource.
	Identity *IdentityPropertiesResponse `pulumi:"identity"`
	// The location of the resource
	Location *string `pulumi:"location"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// The provisioning state of this task run
	ProvisioningState *string `pulumi:"provisioningState"`
	// The request (parameters) for the run
	RunRequest interface{} `pulumi:"runRequest"`
	// The result of this task run
	RunResult *RunResponse `pulumi:"runResult"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type TaskRunState struct {
	// How the run should be forced to rerun even if the run request configuration has not changed
	ForceUpdateTag pulumi.StringPtrInput
	// Identity for the resource.
	Identity IdentityPropertiesResponsePtrInput
	// The location of the resource
	Location pulumi.StringPtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// The provisioning state of this task run
	ProvisioningState pulumi.StringPtrInput
	// The request (parameters) for the run
	RunRequest pulumi.Input
	// The result of this task run
	RunResult RunResponsePtrInput
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponsePtrInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (TaskRunState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskRunState)(nil)).Elem()
}

type taskRunArgs struct {
	// How the run should be forced to rerun even if the run request configuration has not changed
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Identity for the resource.
	Identity *IdentityProperties `pulumi:"identity"`
	// The location of the resource
	Location *string `pulumi:"location"`
	// The name of the container registry.
	RegistryName string `pulumi:"registryName"`
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The request (parameters) for the run
	RunRequest interface{} `pulumi:"runRequest"`
	// The name of the task run.
	TaskRunName string `pulumi:"taskRunName"`
}

// The set of arguments for constructing a TaskRun resource.
type TaskRunArgs struct {
	// How the run should be forced to rerun even if the run request configuration has not changed
	ForceUpdateTag pulumi.StringPtrInput
	// Identity for the resource.
	Identity IdentityPropertiesPtrInput
	// The location of the resource
	Location pulumi.StringPtrInput
	// The name of the container registry.
	RegistryName pulumi.StringInput
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName pulumi.StringInput
	// The request (parameters) for the run
	RunRequest pulumi.Input
	// The name of the task run.
	TaskRunName pulumi.StringInput
}

func (TaskRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskRunArgs)(nil)).Elem()
}

type TaskRunInput interface {
	pulumi.Input

	ToTaskRunOutput() TaskRunOutput
	ToTaskRunOutputWithContext(ctx context.Context) TaskRunOutput
}

func (*TaskRun) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskRun)(nil))
}

func (i *TaskRun) ToTaskRunOutput() TaskRunOutput {
	return i.ToTaskRunOutputWithContext(context.Background())
}

func (i *TaskRun) ToTaskRunOutputWithContext(ctx context.Context) TaskRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskRunOutput)
}

type TaskRunOutput struct {
	*pulumi.OutputState
}

func (TaskRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskRun)(nil))
}

func (o TaskRunOutput) ToTaskRunOutput() TaskRunOutput {
	return o
}

func (o TaskRunOutput) ToTaskRunOutputWithContext(ctx context.Context) TaskRunOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TaskRunOutput{})
}
