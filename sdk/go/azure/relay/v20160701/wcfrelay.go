// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160701

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Description of WcfRelays Resource.
type WCFRelay struct {
	pulumi.CustomResourceState

	// The time the WCFRelay was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// true if the relay is dynamic; otherwise, false.
	IsDynamic pulumi.BoolOutput `pulumi:"isDynamic"`
	// The number of listeners for this relay. min : 1 and max:25 supported
	ListenerCount pulumi.IntOutput `pulumi:"listenerCount"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// WCFRelay Type.
	RelayType pulumi.StringPtrOutput `pulumi:"relayType"`
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrOutput `pulumi:"requiresClientAuthorization"`
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity pulumi.BoolPtrOutput `pulumi:"requiresTransportSecurity"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrOutput `pulumi:"userMetadata"`
}

// NewWCFRelay registers a new resource with the given unique name, arguments, and options.
func NewWCFRelay(ctx *pulumi.Context,
	name string, args *WCFRelayArgs, opts ...pulumi.ResourceOption) (*WCFRelay, error) {
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.RelayName == nil {
		return nil, errors.New("missing required argument 'RelayName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &WCFRelayArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:relay/latest:WCFRelay"),
		},
		{
			Type: pulumi.String("azure-nextgen:relay/v20170401:WCFRelay"),
		},
	})
	opts = append(opts, aliases)
	var resource WCFRelay
	err := ctx.RegisterResource("azure-nextgen:relay/v20160701:WCFRelay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWCFRelay gets an existing WCFRelay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWCFRelay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WCFRelayState, opts ...pulumi.ResourceOption) (*WCFRelay, error) {
	var resource WCFRelay
	err := ctx.ReadResource("azure-nextgen:relay/v20160701:WCFRelay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WCFRelay resources.
type wcfrelayState struct {
	// The time the WCFRelay was created.
	CreatedAt *string `pulumi:"createdAt"`
	// true if the relay is dynamic; otherwise, false.
	IsDynamic *bool `pulumi:"isDynamic"`
	// The number of listeners for this relay. min : 1 and max:25 supported
	ListenerCount *int `pulumi:"listenerCount"`
	// Resource name
	Name *string `pulumi:"name"`
	// WCFRelay Type.
	RelayType *string `pulumi:"relayType"`
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity *bool `pulumi:"requiresTransportSecurity"`
	// Resource type
	Type *string `pulumi:"type"`
	// The time the namespace was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

type WCFRelayState struct {
	// The time the WCFRelay was created.
	CreatedAt pulumi.StringPtrInput
	// true if the relay is dynamic; otherwise, false.
	IsDynamic pulumi.BoolPtrInput
	// The number of listeners for this relay. min : 1 and max:25 supported
	ListenerCount pulumi.IntPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// WCFRelay Type.
	RelayType pulumi.StringPtrInput
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity pulumi.BoolPtrInput
	// Resource type
	Type pulumi.StringPtrInput
	// The time the namespace was updated.
	UpdatedAt pulumi.StringPtrInput
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput
}

func (WCFRelayState) ElementType() reflect.Type {
	return reflect.TypeOf((*wcfrelayState)(nil)).Elem()
}

type wcfrelayArgs struct {
	// The Namespace Name
	NamespaceName string `pulumi:"namespaceName"`
	// The relay name
	RelayName string `pulumi:"relayName"`
	// WCFRelay Type.
	RelayType *string `pulumi:"relayType"`
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity *bool `pulumi:"requiresTransportSecurity"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// The set of arguments for constructing a WCFRelay resource.
type WCFRelayArgs struct {
	// The Namespace Name
	NamespaceName pulumi.StringInput
	// The relay name
	RelayName pulumi.StringInput
	// WCFRelay Type.
	RelayType pulumi.StringPtrInput
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity pulumi.BoolPtrInput
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput
}

func (WCFRelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wcfrelayArgs)(nil)).Elem()
}
