// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Description of hybrid connection resource.
func LookupHybridConnection(ctx *pulumi.Context, args *LookupHybridConnectionArgs, opts ...pulumi.InvokeOption) (*LookupHybridConnectionResult, error) {
	var rv LookupHybridConnectionResult
	err := ctx.Invoke("azure-native:relay/v20211101:getHybridConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupHybridConnectionArgs struct {
	// The hybrid connection name.
	HybridConnectionName string `pulumi:"hybridConnectionName"`
	// The namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Description of hybrid connection resource.
type LookupHybridConnectionResult struct {
	// The time the hybrid connection was created.
	CreatedAt string `pulumi:"createdAt"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
	ListenerCount int `pulumi:"listenerCount"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// The system meta data relating to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
	Type string `pulumi:"type"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

func LookupHybridConnectionOutput(ctx *pulumi.Context, args LookupHybridConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupHybridConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHybridConnectionResult, error) {
			args := v.(LookupHybridConnectionArgs)
			r, err := LookupHybridConnection(ctx, &args, opts...)
			var s LookupHybridConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHybridConnectionResultOutput)
}

type LookupHybridConnectionOutputArgs struct {
	// The hybrid connection name.
	HybridConnectionName pulumi.StringInput `pulumi:"hybridConnectionName"`
	// The namespace name
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupHybridConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHybridConnectionArgs)(nil)).Elem()
}

// Description of hybrid connection resource.
type LookupHybridConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupHybridConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHybridConnectionResult)(nil)).Elem()
}

func (o LookupHybridConnectionResultOutput) ToLookupHybridConnectionResultOutput() LookupHybridConnectionResultOutput {
	return o
}

func (o LookupHybridConnectionResultOutput) ToLookupHybridConnectionResultOutputWithContext(ctx context.Context) LookupHybridConnectionResultOutput {
	return o
}

// The time the hybrid connection was created.
func (o LookupHybridConnectionResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupHybridConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
func (o LookupHybridConnectionResultOutput) ListenerCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) int { return v.ListenerCount }).(pulumi.IntOutput)
}

// The geo-location where the resource lives
func (o LookupHybridConnectionResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupHybridConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
func (o LookupHybridConnectionResultOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// The system meta data relating to this resource.
func (o LookupHybridConnectionResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
func (o LookupHybridConnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

// The time the namespace was updated.
func (o LookupHybridConnectionResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o LookupHybridConnectionResultOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHybridConnectionResult) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHybridConnectionResultOutput{})
}
