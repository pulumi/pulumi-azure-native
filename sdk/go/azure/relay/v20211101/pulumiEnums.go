// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessRights string

const (
	AccessRightsManage = AccessRights("Manage")
	AccessRightsSend   = AccessRights("Send")
	AccessRightsListen = AccessRights("Listen")
)

// Provisioning state of the Private Endpoint Connection.
type EndPointProvisioningState string

const (
	EndPointProvisioningStateCreating  = EndPointProvisioningState("Creating")
	EndPointProvisioningStateUpdating  = EndPointProvisioningState("Updating")
	EndPointProvisioningStateDeleting  = EndPointProvisioningState("Deleting")
	EndPointProvisioningStateSucceeded = EndPointProvisioningState("Succeeded")
	EndPointProvisioningStateCanceled  = EndPointProvisioningState("Canceled")
	EndPointProvisioningStateFailed    = EndPointProvisioningState("Failed")
)

// Status of the connection.
type PrivateLinkConnectionStatus string

const (
	PrivateLinkConnectionStatusPending      = PrivateLinkConnectionStatus("Pending")
	PrivateLinkConnectionStatusApproved     = PrivateLinkConnectionStatus("Approved")
	PrivateLinkConnectionStatusRejected     = PrivateLinkConnectionStatus("Rejected")
	PrivateLinkConnectionStatusDisconnected = PrivateLinkConnectionStatus("Disconnected")
)

// This determines if traffic is allowed over public network. By default it is enabled.
type PublicNetworkAccess string

const (
	PublicNetworkAccessEnabled            = PublicNetworkAccess("Enabled")
	PublicNetworkAccessDisabled           = PublicNetworkAccess("Disabled")
	PublicNetworkAccessSecuredByPerimeter = PublicNetworkAccess("SecuredByPerimeter")
)

// WCF relay type.
type Relaytype string

const (
	RelaytypeNetTcp = Relaytype("NetTcp")
	RelaytypeHttp   = Relaytype("Http")
)

func (Relaytype) ElementType() reflect.Type {
	return reflect.TypeOf((*Relaytype)(nil)).Elem()
}

func (e Relaytype) ToRelaytypeOutput() RelaytypeOutput {
	return pulumi.ToOutput(e).(RelaytypeOutput)
}

func (e Relaytype) ToRelaytypeOutputWithContext(ctx context.Context) RelaytypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RelaytypeOutput)
}

func (e Relaytype) ToRelaytypePtrOutput() RelaytypePtrOutput {
	return e.ToRelaytypePtrOutputWithContext(context.Background())
}

func (e Relaytype) ToRelaytypePtrOutputWithContext(ctx context.Context) RelaytypePtrOutput {
	return Relaytype(e).ToRelaytypeOutputWithContext(ctx).ToRelaytypePtrOutputWithContext(ctx)
}

func (e Relaytype) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Relaytype) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Relaytype) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Relaytype) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RelaytypeOutput struct{ *pulumi.OutputState }

func (RelaytypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Relaytype)(nil)).Elem()
}

func (o RelaytypeOutput) ToRelaytypeOutput() RelaytypeOutput {
	return o
}

func (o RelaytypeOutput) ToRelaytypeOutputWithContext(ctx context.Context) RelaytypeOutput {
	return o
}

func (o RelaytypeOutput) ToRelaytypePtrOutput() RelaytypePtrOutput {
	return o.ToRelaytypePtrOutputWithContext(context.Background())
}

func (o RelaytypeOutput) ToRelaytypePtrOutputWithContext(ctx context.Context) RelaytypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Relaytype) *Relaytype {
		return &v
	}).(RelaytypePtrOutput)
}

func (o RelaytypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RelaytypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Relaytype) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RelaytypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RelaytypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Relaytype) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RelaytypePtrOutput struct{ *pulumi.OutputState }

func (RelaytypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Relaytype)(nil)).Elem()
}

func (o RelaytypePtrOutput) ToRelaytypePtrOutput() RelaytypePtrOutput {
	return o
}

func (o RelaytypePtrOutput) ToRelaytypePtrOutputWithContext(ctx context.Context) RelaytypePtrOutput {
	return o
}

func (o RelaytypePtrOutput) Elem() RelaytypeOutput {
	return o.ApplyT(func(v *Relaytype) Relaytype {
		if v != nil {
			return *v
		}
		var ret Relaytype
		return ret
	}).(RelaytypeOutput)
}

func (o RelaytypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RelaytypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Relaytype) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RelaytypeInput is an input type that accepts RelaytypeArgs and RelaytypeOutput values.
// You can construct a concrete instance of `RelaytypeInput` via:
//
//	RelaytypeArgs{...}
type RelaytypeInput interface {
	pulumi.Input

	ToRelaytypeOutput() RelaytypeOutput
	ToRelaytypeOutputWithContext(context.Context) RelaytypeOutput
}

var relaytypePtrType = reflect.TypeOf((**Relaytype)(nil)).Elem()

type RelaytypePtrInput interface {
	pulumi.Input

	ToRelaytypePtrOutput() RelaytypePtrOutput
	ToRelaytypePtrOutputWithContext(context.Context) RelaytypePtrOutput
}

type relaytypePtr string

func RelaytypePtr(v string) RelaytypePtrInput {
	return (*relaytypePtr)(&v)
}

func (*relaytypePtr) ElementType() reflect.Type {
	return relaytypePtrType
}

func (in *relaytypePtr) ToRelaytypePtrOutput() RelaytypePtrOutput {
	return pulumi.ToOutput(in).(RelaytypePtrOutput)
}

func (in *relaytypePtr) ToRelaytypePtrOutputWithContext(ctx context.Context) RelaytypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RelaytypePtrOutput)
}

// Name of this SKU.
type SkuName string

const (
	SkuNameStandard = SkuName("Standard")
)

// The tier of this SKU.
type SkuTier string

const (
	SkuTierStandard = SkuTier("Standard")
)

func init() {
	pulumi.RegisterOutputType(RelaytypeOutput{})
	pulumi.RegisterOutputType(RelaytypePtrOutput{})
}
