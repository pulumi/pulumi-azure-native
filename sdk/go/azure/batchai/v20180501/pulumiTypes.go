// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Azure Application Insights information for performance counters reporting.
type AppInsightsReference struct {
	// Azure Application Insights component resource ID.
	Component ResourceId `pulumi:"component"`
	// Value of the Azure Application Insights instrumentation key.
	InstrumentationKey *string `pulumi:"instrumentationKey"`
	// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
	InstrumentationKeySecretReference *KeyVaultSecretReference `pulumi:"instrumentationKeySecretReference"`
}

// AppInsightsReferenceInput is an input type that accepts AppInsightsReferenceArgs and AppInsightsReferenceOutput values.
// You can construct a concrete instance of `AppInsightsReferenceInput` via:
//
//          AppInsightsReferenceArgs{...}
type AppInsightsReferenceInput interface {
	pulumi.Input

	ToAppInsightsReferenceOutput() AppInsightsReferenceOutput
	ToAppInsightsReferenceOutputWithContext(context.Context) AppInsightsReferenceOutput
}

// Azure Application Insights information for performance counters reporting.
type AppInsightsReferenceArgs struct {
	// Azure Application Insights component resource ID.
	Component ResourceIdInput `pulumi:"component"`
	// Value of the Azure Application Insights instrumentation key.
	InstrumentationKey pulumi.StringPtrInput `pulumi:"instrumentationKey"`
	// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
	InstrumentationKeySecretReference KeyVaultSecretReferencePtrInput `pulumi:"instrumentationKeySecretReference"`
}

func (AppInsightsReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppInsightsReference)(nil)).Elem()
}

func (i AppInsightsReferenceArgs) ToAppInsightsReferenceOutput() AppInsightsReferenceOutput {
	return i.ToAppInsightsReferenceOutputWithContext(context.Background())
}

func (i AppInsightsReferenceArgs) ToAppInsightsReferenceOutputWithContext(ctx context.Context) AppInsightsReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferenceOutput)
}

func (i AppInsightsReferenceArgs) ToAppInsightsReferencePtrOutput() AppInsightsReferencePtrOutput {
	return i.ToAppInsightsReferencePtrOutputWithContext(context.Background())
}

func (i AppInsightsReferenceArgs) ToAppInsightsReferencePtrOutputWithContext(ctx context.Context) AppInsightsReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferenceOutput).ToAppInsightsReferencePtrOutputWithContext(ctx)
}

// AppInsightsReferencePtrInput is an input type that accepts AppInsightsReferenceArgs, AppInsightsReferencePtr and AppInsightsReferencePtrOutput values.
// You can construct a concrete instance of `AppInsightsReferencePtrInput` via:
//
//          AppInsightsReferenceArgs{...}
//
//  or:
//
//          nil
type AppInsightsReferencePtrInput interface {
	pulumi.Input

	ToAppInsightsReferencePtrOutput() AppInsightsReferencePtrOutput
	ToAppInsightsReferencePtrOutputWithContext(context.Context) AppInsightsReferencePtrOutput
}

type appInsightsReferencePtrType AppInsightsReferenceArgs

func AppInsightsReferencePtr(v *AppInsightsReferenceArgs) AppInsightsReferencePtrInput {
	return (*appInsightsReferencePtrType)(v)
}

func (*appInsightsReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppInsightsReference)(nil)).Elem()
}

func (i *appInsightsReferencePtrType) ToAppInsightsReferencePtrOutput() AppInsightsReferencePtrOutput {
	return i.ToAppInsightsReferencePtrOutputWithContext(context.Background())
}

func (i *appInsightsReferencePtrType) ToAppInsightsReferencePtrOutputWithContext(ctx context.Context) AppInsightsReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferencePtrOutput)
}

// Azure Application Insights information for performance counters reporting.
type AppInsightsReferenceOutput struct{ *pulumi.OutputState }

func (AppInsightsReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppInsightsReference)(nil)).Elem()
}

func (o AppInsightsReferenceOutput) ToAppInsightsReferenceOutput() AppInsightsReferenceOutput {
	return o
}

func (o AppInsightsReferenceOutput) ToAppInsightsReferenceOutputWithContext(ctx context.Context) AppInsightsReferenceOutput {
	return o
}

func (o AppInsightsReferenceOutput) ToAppInsightsReferencePtrOutput() AppInsightsReferencePtrOutput {
	return o.ToAppInsightsReferencePtrOutputWithContext(context.Background())
}

func (o AppInsightsReferenceOutput) ToAppInsightsReferencePtrOutputWithContext(ctx context.Context) AppInsightsReferencePtrOutput {
	return o.ApplyT(func(v AppInsightsReference) *AppInsightsReference {
		return &v
	}).(AppInsightsReferencePtrOutput)
}

// Azure Application Insights component resource ID.
func (o AppInsightsReferenceOutput) Component() ResourceIdOutput {
	return o.ApplyT(func(v AppInsightsReference) ResourceId { return v.Component }).(ResourceIdOutput)
}

// Value of the Azure Application Insights instrumentation key.
func (o AppInsightsReferenceOutput) InstrumentationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppInsightsReference) *string { return v.InstrumentationKey }).(pulumi.StringPtrOutput)
}

// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
func (o AppInsightsReferenceOutput) InstrumentationKeySecretReference() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AppInsightsReference) *KeyVaultSecretReference { return v.InstrumentationKeySecretReference }).(KeyVaultSecretReferencePtrOutput)
}

type AppInsightsReferencePtrOutput struct{ *pulumi.OutputState }

func (AppInsightsReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppInsightsReference)(nil)).Elem()
}

func (o AppInsightsReferencePtrOutput) ToAppInsightsReferencePtrOutput() AppInsightsReferencePtrOutput {
	return o
}

func (o AppInsightsReferencePtrOutput) ToAppInsightsReferencePtrOutputWithContext(ctx context.Context) AppInsightsReferencePtrOutput {
	return o
}

func (o AppInsightsReferencePtrOutput) Elem() AppInsightsReferenceOutput {
	return o.ApplyT(func(v *AppInsightsReference) AppInsightsReference { return *v }).(AppInsightsReferenceOutput)
}

// Azure Application Insights component resource ID.
func (o AppInsightsReferencePtrOutput) Component() ResourceIdPtrOutput {
	return o.ApplyT(func(v *AppInsightsReference) *ResourceId {
		if v == nil {
			return nil
		}
		return &v.Component
	}).(ResourceIdPtrOutput)
}

// Value of the Azure Application Insights instrumentation key.
func (o AppInsightsReferencePtrOutput) InstrumentationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppInsightsReference) *string {
		if v == nil {
			return nil
		}
		return v.InstrumentationKey
	}).(pulumi.StringPtrOutput)
}

// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
func (o AppInsightsReferencePtrOutput) InstrumentationKeySecretReference() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v *AppInsightsReference) *KeyVaultSecretReference {
		if v == nil {
			return nil
		}
		return v.InstrumentationKeySecretReference
	}).(KeyVaultSecretReferencePtrOutput)
}

// Azure Application Insights information for performance counters reporting.
type AppInsightsReferenceInvokeResponse struct {
	// Azure Application Insights component resource ID.
	Component ResourceIdInvokeResponse `pulumi:"component"`
	// Value of the Azure Application Insights instrumentation key.
	InstrumentationKey *string `pulumi:"instrumentationKey"`
	// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
	InstrumentationKeySecretReference *KeyVaultSecretReferenceInvokeResponse `pulumi:"instrumentationKeySecretReference"`
}

// AppInsightsReferenceInvokeResponseInput is an input type that accepts AppInsightsReferenceInvokeResponseArgs and AppInsightsReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `AppInsightsReferenceInvokeResponseInput` via:
//
//          AppInsightsReferenceInvokeResponseArgs{...}
type AppInsightsReferenceInvokeResponseInput interface {
	pulumi.Input

	ToAppInsightsReferenceInvokeResponseOutput() AppInsightsReferenceInvokeResponseOutput
	ToAppInsightsReferenceInvokeResponseOutputWithContext(context.Context) AppInsightsReferenceInvokeResponseOutput
}

// Azure Application Insights information for performance counters reporting.
type AppInsightsReferenceInvokeResponseArgs struct {
	// Azure Application Insights component resource ID.
	Component ResourceIdInvokeResponseInput `pulumi:"component"`
	// Value of the Azure Application Insights instrumentation key.
	InstrumentationKey pulumi.StringPtrInput `pulumi:"instrumentationKey"`
	// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
	InstrumentationKeySecretReference KeyVaultSecretReferenceInvokeResponsePtrInput `pulumi:"instrumentationKeySecretReference"`
}

func (AppInsightsReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppInsightsReferenceInvokeResponse)(nil)).Elem()
}

func (i AppInsightsReferenceInvokeResponseArgs) ToAppInsightsReferenceInvokeResponseOutput() AppInsightsReferenceInvokeResponseOutput {
	return i.ToAppInsightsReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i AppInsightsReferenceInvokeResponseArgs) ToAppInsightsReferenceInvokeResponseOutputWithContext(ctx context.Context) AppInsightsReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferenceInvokeResponseOutput)
}

func (i AppInsightsReferenceInvokeResponseArgs) ToAppInsightsReferenceInvokeResponsePtrOutput() AppInsightsReferenceInvokeResponsePtrOutput {
	return i.ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i AppInsightsReferenceInvokeResponseArgs) ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) AppInsightsReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferenceInvokeResponseOutput).ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(ctx)
}

// AppInsightsReferenceInvokeResponsePtrInput is an input type that accepts AppInsightsReferenceInvokeResponseArgs, AppInsightsReferenceInvokeResponsePtr and AppInsightsReferenceInvokeResponsePtrOutput values.
// You can construct a concrete instance of `AppInsightsReferenceInvokeResponsePtrInput` via:
//
//          AppInsightsReferenceInvokeResponseArgs{...}
//
//  or:
//
//          nil
type AppInsightsReferenceInvokeResponsePtrInput interface {
	pulumi.Input

	ToAppInsightsReferenceInvokeResponsePtrOutput() AppInsightsReferenceInvokeResponsePtrOutput
	ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(context.Context) AppInsightsReferenceInvokeResponsePtrOutput
}

type appInsightsReferenceInvokeResponsePtrType AppInsightsReferenceInvokeResponseArgs

func AppInsightsReferenceInvokeResponsePtr(v *AppInsightsReferenceInvokeResponseArgs) AppInsightsReferenceInvokeResponsePtrInput {
	return (*appInsightsReferenceInvokeResponsePtrType)(v)
}

func (*appInsightsReferenceInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppInsightsReferenceInvokeResponse)(nil)).Elem()
}

func (i *appInsightsReferenceInvokeResponsePtrType) ToAppInsightsReferenceInvokeResponsePtrOutput() AppInsightsReferenceInvokeResponsePtrOutput {
	return i.ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *appInsightsReferenceInvokeResponsePtrType) ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) AppInsightsReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferenceInvokeResponsePtrOutput)
}

// Azure Application Insights information for performance counters reporting.
type AppInsightsReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (AppInsightsReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppInsightsReferenceInvokeResponse)(nil)).Elem()
}

func (o AppInsightsReferenceInvokeResponseOutput) ToAppInsightsReferenceInvokeResponseOutput() AppInsightsReferenceInvokeResponseOutput {
	return o
}

func (o AppInsightsReferenceInvokeResponseOutput) ToAppInsightsReferenceInvokeResponseOutputWithContext(ctx context.Context) AppInsightsReferenceInvokeResponseOutput {
	return o
}

func (o AppInsightsReferenceInvokeResponseOutput) ToAppInsightsReferenceInvokeResponsePtrOutput() AppInsightsReferenceInvokeResponsePtrOutput {
	return o.ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (o AppInsightsReferenceInvokeResponseOutput) ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) AppInsightsReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v AppInsightsReferenceInvokeResponse) *AppInsightsReferenceInvokeResponse {
		return &v
	}).(AppInsightsReferenceInvokeResponsePtrOutput)
}

// Azure Application Insights component resource ID.
func (o AppInsightsReferenceInvokeResponseOutput) Component() ResourceIdInvokeResponseOutput {
	return o.ApplyT(func(v AppInsightsReferenceInvokeResponse) ResourceIdInvokeResponse { return v.Component }).(ResourceIdInvokeResponseOutput)
}

// Value of the Azure Application Insights instrumentation key.
func (o AppInsightsReferenceInvokeResponseOutput) InstrumentationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppInsightsReferenceInvokeResponse) *string { return v.InstrumentationKey }).(pulumi.StringPtrOutput)
}

// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
func (o AppInsightsReferenceInvokeResponseOutput) InstrumentationKeySecretReference() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v AppInsightsReferenceInvokeResponse) *KeyVaultSecretReferenceInvokeResponse {
		return v.InstrumentationKeySecretReference
	}).(KeyVaultSecretReferenceInvokeResponsePtrOutput)
}

type AppInsightsReferenceInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (AppInsightsReferenceInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppInsightsReferenceInvokeResponse)(nil)).Elem()
}

func (o AppInsightsReferenceInvokeResponsePtrOutput) ToAppInsightsReferenceInvokeResponsePtrOutput() AppInsightsReferenceInvokeResponsePtrOutput {
	return o
}

func (o AppInsightsReferenceInvokeResponsePtrOutput) ToAppInsightsReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) AppInsightsReferenceInvokeResponsePtrOutput {
	return o
}

func (o AppInsightsReferenceInvokeResponsePtrOutput) Elem() AppInsightsReferenceInvokeResponseOutput {
	return o.ApplyT(func(v *AppInsightsReferenceInvokeResponse) AppInsightsReferenceInvokeResponse { return *v }).(AppInsightsReferenceInvokeResponseOutput)
}

// Azure Application Insights component resource ID.
func (o AppInsightsReferenceInvokeResponsePtrOutput) Component() ResourceIdInvokeResponsePtrOutput {
	return o.ApplyT(func(v *AppInsightsReferenceInvokeResponse) *ResourceIdInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.Component
	}).(ResourceIdInvokeResponsePtrOutput)
}

// Value of the Azure Application Insights instrumentation key.
func (o AppInsightsReferenceInvokeResponsePtrOutput) InstrumentationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppInsightsReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstrumentationKey
	}).(pulumi.StringPtrOutput)
}

// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
func (o AppInsightsReferenceInvokeResponsePtrOutput) InstrumentationKeySecretReference() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v *AppInsightsReferenceInvokeResponse) *KeyVaultSecretReferenceInvokeResponse {
		if v == nil {
			return nil
		}
		return v.InstrumentationKeySecretReference
	}).(KeyVaultSecretReferenceInvokeResponsePtrOutput)
}

// Azure Application Insights information for performance counters reporting.
type AppInsightsReferenceResponse struct {
	// Azure Application Insights component resource ID.
	Component ResourceIdResponse `pulumi:"component"`
	// Value of the Azure Application Insights instrumentation key.
	InstrumentationKey *string `pulumi:"instrumentationKey"`
	// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
	InstrumentationKeySecretReference *KeyVaultSecretReferenceResponse `pulumi:"instrumentationKeySecretReference"`
}

// AppInsightsReferenceResponseInput is an input type that accepts AppInsightsReferenceResponseArgs and AppInsightsReferenceResponseOutput values.
// You can construct a concrete instance of `AppInsightsReferenceResponseInput` via:
//
//          AppInsightsReferenceResponseArgs{...}
type AppInsightsReferenceResponseInput interface {
	pulumi.Input

	ToAppInsightsReferenceResponseOutput() AppInsightsReferenceResponseOutput
	ToAppInsightsReferenceResponseOutputWithContext(context.Context) AppInsightsReferenceResponseOutput
}

// Azure Application Insights information for performance counters reporting.
type AppInsightsReferenceResponseArgs struct {
	// Azure Application Insights component resource ID.
	Component ResourceIdResponseInput `pulumi:"component"`
	// Value of the Azure Application Insights instrumentation key.
	InstrumentationKey pulumi.StringPtrInput `pulumi:"instrumentationKey"`
	// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
	InstrumentationKeySecretReference KeyVaultSecretReferenceResponsePtrInput `pulumi:"instrumentationKeySecretReference"`
}

func (AppInsightsReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppInsightsReferenceResponse)(nil)).Elem()
}

func (i AppInsightsReferenceResponseArgs) ToAppInsightsReferenceResponseOutput() AppInsightsReferenceResponseOutput {
	return i.ToAppInsightsReferenceResponseOutputWithContext(context.Background())
}

func (i AppInsightsReferenceResponseArgs) ToAppInsightsReferenceResponseOutputWithContext(ctx context.Context) AppInsightsReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferenceResponseOutput)
}

func (i AppInsightsReferenceResponseArgs) ToAppInsightsReferenceResponsePtrOutput() AppInsightsReferenceResponsePtrOutput {
	return i.ToAppInsightsReferenceResponsePtrOutputWithContext(context.Background())
}

func (i AppInsightsReferenceResponseArgs) ToAppInsightsReferenceResponsePtrOutputWithContext(ctx context.Context) AppInsightsReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferenceResponseOutput).ToAppInsightsReferenceResponsePtrOutputWithContext(ctx)
}

// AppInsightsReferenceResponsePtrInput is an input type that accepts AppInsightsReferenceResponseArgs, AppInsightsReferenceResponsePtr and AppInsightsReferenceResponsePtrOutput values.
// You can construct a concrete instance of `AppInsightsReferenceResponsePtrInput` via:
//
//          AppInsightsReferenceResponseArgs{...}
//
//  or:
//
//          nil
type AppInsightsReferenceResponsePtrInput interface {
	pulumi.Input

	ToAppInsightsReferenceResponsePtrOutput() AppInsightsReferenceResponsePtrOutput
	ToAppInsightsReferenceResponsePtrOutputWithContext(context.Context) AppInsightsReferenceResponsePtrOutput
}

type appInsightsReferenceResponsePtrType AppInsightsReferenceResponseArgs

func AppInsightsReferenceResponsePtr(v *AppInsightsReferenceResponseArgs) AppInsightsReferenceResponsePtrInput {
	return (*appInsightsReferenceResponsePtrType)(v)
}

func (*appInsightsReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppInsightsReferenceResponse)(nil)).Elem()
}

func (i *appInsightsReferenceResponsePtrType) ToAppInsightsReferenceResponsePtrOutput() AppInsightsReferenceResponsePtrOutput {
	return i.ToAppInsightsReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *appInsightsReferenceResponsePtrType) ToAppInsightsReferenceResponsePtrOutputWithContext(ctx context.Context) AppInsightsReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInsightsReferenceResponsePtrOutput)
}

// Azure Application Insights information for performance counters reporting.
type AppInsightsReferenceResponseOutput struct{ *pulumi.OutputState }

func (AppInsightsReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppInsightsReferenceResponse)(nil)).Elem()
}

func (o AppInsightsReferenceResponseOutput) ToAppInsightsReferenceResponseOutput() AppInsightsReferenceResponseOutput {
	return o
}

func (o AppInsightsReferenceResponseOutput) ToAppInsightsReferenceResponseOutputWithContext(ctx context.Context) AppInsightsReferenceResponseOutput {
	return o
}

func (o AppInsightsReferenceResponseOutput) ToAppInsightsReferenceResponsePtrOutput() AppInsightsReferenceResponsePtrOutput {
	return o.ToAppInsightsReferenceResponsePtrOutputWithContext(context.Background())
}

func (o AppInsightsReferenceResponseOutput) ToAppInsightsReferenceResponsePtrOutputWithContext(ctx context.Context) AppInsightsReferenceResponsePtrOutput {
	return o.ApplyT(func(v AppInsightsReferenceResponse) *AppInsightsReferenceResponse {
		return &v
	}).(AppInsightsReferenceResponsePtrOutput)
}

// Azure Application Insights component resource ID.
func (o AppInsightsReferenceResponseOutput) Component() ResourceIdResponseOutput {
	return o.ApplyT(func(v AppInsightsReferenceResponse) ResourceIdResponse { return v.Component }).(ResourceIdResponseOutput)
}

// Value of the Azure Application Insights instrumentation key.
func (o AppInsightsReferenceResponseOutput) InstrumentationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppInsightsReferenceResponse) *string { return v.InstrumentationKey }).(pulumi.StringPtrOutput)
}

// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
func (o AppInsightsReferenceResponseOutput) InstrumentationKeySecretReference() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AppInsightsReferenceResponse) *KeyVaultSecretReferenceResponse {
		return v.InstrumentationKeySecretReference
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

type AppInsightsReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (AppInsightsReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppInsightsReferenceResponse)(nil)).Elem()
}

func (o AppInsightsReferenceResponsePtrOutput) ToAppInsightsReferenceResponsePtrOutput() AppInsightsReferenceResponsePtrOutput {
	return o
}

func (o AppInsightsReferenceResponsePtrOutput) ToAppInsightsReferenceResponsePtrOutputWithContext(ctx context.Context) AppInsightsReferenceResponsePtrOutput {
	return o
}

func (o AppInsightsReferenceResponsePtrOutput) Elem() AppInsightsReferenceResponseOutput {
	return o.ApplyT(func(v *AppInsightsReferenceResponse) AppInsightsReferenceResponse { return *v }).(AppInsightsReferenceResponseOutput)
}

// Azure Application Insights component resource ID.
func (o AppInsightsReferenceResponsePtrOutput) Component() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *AppInsightsReferenceResponse) *ResourceIdResponse {
		if v == nil {
			return nil
		}
		return &v.Component
	}).(ResourceIdResponsePtrOutput)
}

// Value of the Azure Application Insights instrumentation key.
func (o AppInsightsReferenceResponsePtrOutput) InstrumentationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppInsightsReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstrumentationKey
	}).(pulumi.StringPtrOutput)
}

// KeyVault Store and Secret which contains Azure Application Insights instrumentation key. One of instrumentationKey or instrumentationKeySecretReference must be specified.
func (o AppInsightsReferenceResponsePtrOutput) InstrumentationKeySecretReference() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v *AppInsightsReferenceResponse) *KeyVaultSecretReferenceResponse {
		if v == nil {
			return nil
		}
		return v.InstrumentationKeySecretReference
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettings struct {
	// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// The maximum number of compute nodes the cluster can have.
	MaximumNodeCount int `pulumi:"maximumNodeCount"`
	// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
	MinimumNodeCount int `pulumi:"minimumNodeCount"`
}

// AutoScaleSettingsInput is an input type that accepts AutoScaleSettingsArgs and AutoScaleSettingsOutput values.
// You can construct a concrete instance of `AutoScaleSettingsInput` via:
//
//          AutoScaleSettingsArgs{...}
type AutoScaleSettingsInput interface {
	pulumi.Input

	ToAutoScaleSettingsOutput() AutoScaleSettingsOutput
	ToAutoScaleSettingsOutputWithContext(context.Context) AutoScaleSettingsOutput
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettingsArgs struct {
	// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
	InitialNodeCount pulumi.IntPtrInput `pulumi:"initialNodeCount"`
	// The maximum number of compute nodes the cluster can have.
	MaximumNodeCount pulumi.IntInput `pulumi:"maximumNodeCount"`
	// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
	MinimumNodeCount pulumi.IntInput `pulumi:"minimumNodeCount"`
}

func (AutoScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettings)(nil)).Elem()
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsOutput() AutoScaleSettingsOutput {
	return i.ToAutoScaleSettingsOutputWithContext(context.Background())
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsOutputWithContext(ctx context.Context) AutoScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsOutput)
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return i.ToAutoScaleSettingsPtrOutputWithContext(context.Background())
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsOutput).ToAutoScaleSettingsPtrOutputWithContext(ctx)
}

// AutoScaleSettingsPtrInput is an input type that accepts AutoScaleSettingsArgs, AutoScaleSettingsPtr and AutoScaleSettingsPtrOutput values.
// You can construct a concrete instance of `AutoScaleSettingsPtrInput` via:
//
//          AutoScaleSettingsArgs{...}
//
//  or:
//
//          nil
type AutoScaleSettingsPtrInput interface {
	pulumi.Input

	ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput
	ToAutoScaleSettingsPtrOutputWithContext(context.Context) AutoScaleSettingsPtrOutput
}

type autoScaleSettingsPtrType AutoScaleSettingsArgs

func AutoScaleSettingsPtr(v *AutoScaleSettingsArgs) AutoScaleSettingsPtrInput {
	return (*autoScaleSettingsPtrType)(v)
}

func (*autoScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettings)(nil)).Elem()
}

func (i *autoScaleSettingsPtrType) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return i.ToAutoScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *autoScaleSettingsPtrType) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsPtrOutput)
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettingsOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettings)(nil)).Elem()
}

func (o AutoScaleSettingsOutput) ToAutoScaleSettingsOutput() AutoScaleSettingsOutput {
	return o
}

func (o AutoScaleSettingsOutput) ToAutoScaleSettingsOutputWithContext(ctx context.Context) AutoScaleSettingsOutput {
	return o
}

func (o AutoScaleSettingsOutput) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return o.ToAutoScaleSettingsPtrOutputWithContext(context.Background())
}

func (o AutoScaleSettingsOutput) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return o.ApplyT(func(v AutoScaleSettings) *AutoScaleSettings {
		return &v
	}).(AutoScaleSettingsPtrOutput)
}

// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
func (o AutoScaleSettingsOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScaleSettings) *int { return v.InitialNodeCount }).(pulumi.IntPtrOutput)
}

// The maximum number of compute nodes the cluster can have.
func (o AutoScaleSettingsOutput) MaximumNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AutoScaleSettings) int { return v.MaximumNodeCount }).(pulumi.IntOutput)
}

// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
func (o AutoScaleSettingsOutput) MinimumNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AutoScaleSettings) int { return v.MinimumNodeCount }).(pulumi.IntOutput)
}

type AutoScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettings)(nil)).Elem()
}

func (o AutoScaleSettingsPtrOutput) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return o
}

func (o AutoScaleSettingsPtrOutput) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return o
}

func (o AutoScaleSettingsPtrOutput) Elem() AutoScaleSettingsOutput {
	return o.ApplyT(func(v *AutoScaleSettings) AutoScaleSettings { return *v }).(AutoScaleSettingsOutput)
}

// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
func (o AutoScaleSettingsPtrOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.InitialNodeCount
	}).(pulumi.IntPtrOutput)
}

// The maximum number of compute nodes the cluster can have.
func (o AutoScaleSettingsPtrOutput) MaximumNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettings) *int {
		if v == nil {
			return nil
		}
		return &v.MaximumNodeCount
	}).(pulumi.IntPtrOutput)
}

// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
func (o AutoScaleSettingsPtrOutput) MinimumNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettings) *int {
		if v == nil {
			return nil
		}
		return &v.MinimumNodeCount
	}).(pulumi.IntPtrOutput)
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettingsInvokeResponse struct {
	// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// The maximum number of compute nodes the cluster can have.
	MaximumNodeCount int `pulumi:"maximumNodeCount"`
	// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
	MinimumNodeCount int `pulumi:"minimumNodeCount"`
}

// AutoScaleSettingsInvokeResponseInput is an input type that accepts AutoScaleSettingsInvokeResponseArgs and AutoScaleSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `AutoScaleSettingsInvokeResponseInput` via:
//
//          AutoScaleSettingsInvokeResponseArgs{...}
type AutoScaleSettingsInvokeResponseInput interface {
	pulumi.Input

	ToAutoScaleSettingsInvokeResponseOutput() AutoScaleSettingsInvokeResponseOutput
	ToAutoScaleSettingsInvokeResponseOutputWithContext(context.Context) AutoScaleSettingsInvokeResponseOutput
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettingsInvokeResponseArgs struct {
	// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
	InitialNodeCount pulumi.IntPtrInput `pulumi:"initialNodeCount"`
	// The maximum number of compute nodes the cluster can have.
	MaximumNodeCount pulumi.IntInput `pulumi:"maximumNodeCount"`
	// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
	MinimumNodeCount pulumi.IntInput `pulumi:"minimumNodeCount"`
}

func (AutoScaleSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettingsInvokeResponse)(nil)).Elem()
}

func (i AutoScaleSettingsInvokeResponseArgs) ToAutoScaleSettingsInvokeResponseOutput() AutoScaleSettingsInvokeResponseOutput {
	return i.ToAutoScaleSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i AutoScaleSettingsInvokeResponseArgs) ToAutoScaleSettingsInvokeResponseOutputWithContext(ctx context.Context) AutoScaleSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsInvokeResponseOutput)
}

func (i AutoScaleSettingsInvokeResponseArgs) ToAutoScaleSettingsInvokeResponsePtrOutput() AutoScaleSettingsInvokeResponsePtrOutput {
	return i.ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i AutoScaleSettingsInvokeResponseArgs) ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsInvokeResponseOutput).ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(ctx)
}

// AutoScaleSettingsInvokeResponsePtrInput is an input type that accepts AutoScaleSettingsInvokeResponseArgs, AutoScaleSettingsInvokeResponsePtr and AutoScaleSettingsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `AutoScaleSettingsInvokeResponsePtrInput` via:
//
//          AutoScaleSettingsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type AutoScaleSettingsInvokeResponsePtrInput interface {
	pulumi.Input

	ToAutoScaleSettingsInvokeResponsePtrOutput() AutoScaleSettingsInvokeResponsePtrOutput
	ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(context.Context) AutoScaleSettingsInvokeResponsePtrOutput
}

type autoScaleSettingsInvokeResponsePtrType AutoScaleSettingsInvokeResponseArgs

func AutoScaleSettingsInvokeResponsePtr(v *AutoScaleSettingsInvokeResponseArgs) AutoScaleSettingsInvokeResponsePtrInput {
	return (*autoScaleSettingsInvokeResponsePtrType)(v)
}

func (*autoScaleSettingsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettingsInvokeResponse)(nil)).Elem()
}

func (i *autoScaleSettingsInvokeResponsePtrType) ToAutoScaleSettingsInvokeResponsePtrOutput() AutoScaleSettingsInvokeResponsePtrOutput {
	return i.ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *autoScaleSettingsInvokeResponsePtrType) ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsInvokeResponsePtrOutput)
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettingsInvokeResponse)(nil)).Elem()
}

func (o AutoScaleSettingsInvokeResponseOutput) ToAutoScaleSettingsInvokeResponseOutput() AutoScaleSettingsInvokeResponseOutput {
	return o
}

func (o AutoScaleSettingsInvokeResponseOutput) ToAutoScaleSettingsInvokeResponseOutputWithContext(ctx context.Context) AutoScaleSettingsInvokeResponseOutput {
	return o
}

func (o AutoScaleSettingsInvokeResponseOutput) ToAutoScaleSettingsInvokeResponsePtrOutput() AutoScaleSettingsInvokeResponsePtrOutput {
	return o.ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o AutoScaleSettingsInvokeResponseOutput) ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleSettingsInvokeResponse) *AutoScaleSettingsInvokeResponse {
		return &v
	}).(AutoScaleSettingsInvokeResponsePtrOutput)
}

// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
func (o AutoScaleSettingsInvokeResponseOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScaleSettingsInvokeResponse) *int { return v.InitialNodeCount }).(pulumi.IntPtrOutput)
}

// The maximum number of compute nodes the cluster can have.
func (o AutoScaleSettingsInvokeResponseOutput) MaximumNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AutoScaleSettingsInvokeResponse) int { return v.MaximumNodeCount }).(pulumi.IntOutput)
}

// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
func (o AutoScaleSettingsInvokeResponseOutput) MinimumNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AutoScaleSettingsInvokeResponse) int { return v.MinimumNodeCount }).(pulumi.IntOutput)
}

type AutoScaleSettingsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettingsInvokeResponse)(nil)).Elem()
}

func (o AutoScaleSettingsInvokeResponsePtrOutput) ToAutoScaleSettingsInvokeResponsePtrOutput() AutoScaleSettingsInvokeResponsePtrOutput {
	return o
}

func (o AutoScaleSettingsInvokeResponsePtrOutput) ToAutoScaleSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsInvokeResponsePtrOutput {
	return o
}

func (o AutoScaleSettingsInvokeResponsePtrOutput) Elem() AutoScaleSettingsInvokeResponseOutput {
	return o.ApplyT(func(v *AutoScaleSettingsInvokeResponse) AutoScaleSettingsInvokeResponse { return *v }).(AutoScaleSettingsInvokeResponseOutput)
}

// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
func (o AutoScaleSettingsInvokeResponsePtrOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return v.InitialNodeCount
	}).(pulumi.IntPtrOutput)
}

// The maximum number of compute nodes the cluster can have.
func (o AutoScaleSettingsInvokeResponsePtrOutput) MaximumNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaximumNodeCount
	}).(pulumi.IntPtrOutput)
}

// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
func (o AutoScaleSettingsInvokeResponsePtrOutput) MinimumNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinimumNodeCount
	}).(pulumi.IntPtrOutput)
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettingsResponse struct {
	// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// The maximum number of compute nodes the cluster can have.
	MaximumNodeCount int `pulumi:"maximumNodeCount"`
	// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
	MinimumNodeCount int `pulumi:"minimumNodeCount"`
}

// AutoScaleSettingsResponseInput is an input type that accepts AutoScaleSettingsResponseArgs and AutoScaleSettingsResponseOutput values.
// You can construct a concrete instance of `AutoScaleSettingsResponseInput` via:
//
//          AutoScaleSettingsResponseArgs{...}
type AutoScaleSettingsResponseInput interface {
	pulumi.Input

	ToAutoScaleSettingsResponseOutput() AutoScaleSettingsResponseOutput
	ToAutoScaleSettingsResponseOutputWithContext(context.Context) AutoScaleSettingsResponseOutput
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettingsResponseArgs struct {
	// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
	InitialNodeCount pulumi.IntPtrInput `pulumi:"initialNodeCount"`
	// The maximum number of compute nodes the cluster can have.
	MaximumNodeCount pulumi.IntInput `pulumi:"maximumNodeCount"`
	// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
	MinimumNodeCount pulumi.IntInput `pulumi:"minimumNodeCount"`
}

func (AutoScaleSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettingsResponse)(nil)).Elem()
}

func (i AutoScaleSettingsResponseArgs) ToAutoScaleSettingsResponseOutput() AutoScaleSettingsResponseOutput {
	return i.ToAutoScaleSettingsResponseOutputWithContext(context.Background())
}

func (i AutoScaleSettingsResponseArgs) ToAutoScaleSettingsResponseOutputWithContext(ctx context.Context) AutoScaleSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsResponseOutput)
}

func (i AutoScaleSettingsResponseArgs) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return i.ToAutoScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AutoScaleSettingsResponseArgs) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsResponseOutput).ToAutoScaleSettingsResponsePtrOutputWithContext(ctx)
}

// AutoScaleSettingsResponsePtrInput is an input type that accepts AutoScaleSettingsResponseArgs, AutoScaleSettingsResponsePtr and AutoScaleSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AutoScaleSettingsResponsePtrInput` via:
//
//          AutoScaleSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AutoScaleSettingsResponsePtrInput interface {
	pulumi.Input

	ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput
	ToAutoScaleSettingsResponsePtrOutputWithContext(context.Context) AutoScaleSettingsResponsePtrOutput
}

type autoScaleSettingsResponsePtrType AutoScaleSettingsResponseArgs

func AutoScaleSettingsResponsePtr(v *AutoScaleSettingsResponseArgs) AutoScaleSettingsResponsePtrInput {
	return (*autoScaleSettingsResponsePtrType)(v)
}

func (*autoScaleSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettingsResponse)(nil)).Elem()
}

func (i *autoScaleSettingsResponsePtrType) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return i.ToAutoScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *autoScaleSettingsResponsePtrType) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsResponsePtrOutput)
}

// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
type AutoScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettingsResponse)(nil)).Elem()
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponseOutput() AutoScaleSettingsResponseOutput {
	return o
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponseOutputWithContext(ctx context.Context) AutoScaleSettingsResponseOutput {
	return o
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return o.ToAutoScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) *AutoScaleSettingsResponse {
		return &v
	}).(AutoScaleSettingsResponsePtrOutput)
}

// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
func (o AutoScaleSettingsResponseOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) *int { return v.InitialNodeCount }).(pulumi.IntPtrOutput)
}

// The maximum number of compute nodes the cluster can have.
func (o AutoScaleSettingsResponseOutput) MaximumNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) int { return v.MaximumNodeCount }).(pulumi.IntOutput)
}

// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
func (o AutoScaleSettingsResponseOutput) MinimumNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) int { return v.MinimumNodeCount }).(pulumi.IntOutput)
}

type AutoScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettingsResponse)(nil)).Elem()
}

func (o AutoScaleSettingsResponsePtrOutput) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return o
}

func (o AutoScaleSettingsResponsePtrOutput) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return o
}

func (o AutoScaleSettingsResponsePtrOutput) Elem() AutoScaleSettingsResponseOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) AutoScaleSettingsResponse { return *v }).(AutoScaleSettingsResponseOutput)
}

// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
func (o AutoScaleSettingsResponsePtrOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InitialNodeCount
	}).(pulumi.IntPtrOutput)
}

// The maximum number of compute nodes the cluster can have.
func (o AutoScaleSettingsResponsePtrOutput) MaximumNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaximumNodeCount
	}).(pulumi.IntPtrOutput)
}

// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
func (o AutoScaleSettingsResponsePtrOutput) MinimumNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinimumNodeCount
	}).(pulumi.IntPtrOutput)
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReference struct {
	// Name of the Azure storage account.
	AccountName string `pulumi:"accountName"`
	// Name of the Azure Blob Storage container to mount on the cluster.
	ContainerName string `pulumi:"containerName"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfo `pulumi:"credentials"`
	// Mount options for mounting blobfuse file system.
	MountOptions *string `pulumi:"mountOptions"`
	// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// AzureBlobFileSystemReferenceInput is an input type that accepts AzureBlobFileSystemReferenceArgs and AzureBlobFileSystemReferenceOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemReferenceInput` via:
//
//          AzureBlobFileSystemReferenceArgs{...}
type AzureBlobFileSystemReferenceInput interface {
	pulumi.Input

	ToAzureBlobFileSystemReferenceOutput() AzureBlobFileSystemReferenceOutput
	ToAzureBlobFileSystemReferenceOutputWithContext(context.Context) AzureBlobFileSystemReferenceOutput
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReferenceArgs struct {
	// Name of the Azure storage account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Name of the Azure Blob Storage container to mount on the cluster.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoInput `pulumi:"credentials"`
	// Mount options for mounting blobfuse file system.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (AzureBlobFileSystemReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemReference)(nil)).Elem()
}

func (i AzureBlobFileSystemReferenceArgs) ToAzureBlobFileSystemReferenceOutput() AzureBlobFileSystemReferenceOutput {
	return i.ToAzureBlobFileSystemReferenceOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemReferenceArgs) ToAzureBlobFileSystemReferenceOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemReferenceOutput)
}

// AzureBlobFileSystemReferenceArrayInput is an input type that accepts AzureBlobFileSystemReferenceArray and AzureBlobFileSystemReferenceArrayOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemReferenceArrayInput` via:
//
//          AzureBlobFileSystemReferenceArray{ AzureBlobFileSystemReferenceArgs{...} }
type AzureBlobFileSystemReferenceArrayInput interface {
	pulumi.Input

	ToAzureBlobFileSystemReferenceArrayOutput() AzureBlobFileSystemReferenceArrayOutput
	ToAzureBlobFileSystemReferenceArrayOutputWithContext(context.Context) AzureBlobFileSystemReferenceArrayOutput
}

type AzureBlobFileSystemReferenceArray []AzureBlobFileSystemReferenceInput

func (AzureBlobFileSystemReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureBlobFileSystemReference)(nil)).Elem()
}

func (i AzureBlobFileSystemReferenceArray) ToAzureBlobFileSystemReferenceArrayOutput() AzureBlobFileSystemReferenceArrayOutput {
	return i.ToAzureBlobFileSystemReferenceArrayOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemReferenceArray) ToAzureBlobFileSystemReferenceArrayOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemReferenceArrayOutput)
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReferenceOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemReference)(nil)).Elem()
}

func (o AzureBlobFileSystemReferenceOutput) ToAzureBlobFileSystemReferenceOutput() AzureBlobFileSystemReferenceOutput {
	return o
}

func (o AzureBlobFileSystemReferenceOutput) ToAzureBlobFileSystemReferenceOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceOutput {
	return o
}

// Name of the Azure storage account.
func (o AzureBlobFileSystemReferenceOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReference) string { return v.AccountName }).(pulumi.StringOutput)
}

// Name of the Azure Blob Storage container to mount on the cluster.
func (o AzureBlobFileSystemReferenceOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReference) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Information about the Azure storage credentials.
func (o AzureBlobFileSystemReferenceOutput) Credentials() AzureStorageCredentialsInfoOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReference) AzureStorageCredentialsInfo { return v.Credentials }).(AzureStorageCredentialsInfoOutput)
}

// Mount options for mounting blobfuse file system.
func (o AzureBlobFileSystemReferenceOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReference) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o AzureBlobFileSystemReferenceOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReference) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type AzureBlobFileSystemReferenceArrayOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureBlobFileSystemReference)(nil)).Elem()
}

func (o AzureBlobFileSystemReferenceArrayOutput) ToAzureBlobFileSystemReferenceArrayOutput() AzureBlobFileSystemReferenceArrayOutput {
	return o
}

func (o AzureBlobFileSystemReferenceArrayOutput) ToAzureBlobFileSystemReferenceArrayOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceArrayOutput {
	return o
}

func (o AzureBlobFileSystemReferenceArrayOutput) Index(i pulumi.IntInput) AzureBlobFileSystemReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureBlobFileSystemReference {
		return vs[0].([]AzureBlobFileSystemReference)[vs[1].(int)]
	}).(AzureBlobFileSystemReferenceOutput)
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReferenceInvokeResponse struct {
	// Name of the Azure storage account.
	AccountName string `pulumi:"accountName"`
	// Name of the Azure Blob Storage container to mount on the cluster.
	ContainerName string `pulumi:"containerName"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoInvokeResponse `pulumi:"credentials"`
	// Mount options for mounting blobfuse file system.
	MountOptions *string `pulumi:"mountOptions"`
	// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// AzureBlobFileSystemReferenceInvokeResponseInput is an input type that accepts AzureBlobFileSystemReferenceInvokeResponseArgs and AzureBlobFileSystemReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemReferenceInvokeResponseInput` via:
//
//          AzureBlobFileSystemReferenceInvokeResponseArgs{...}
type AzureBlobFileSystemReferenceInvokeResponseInput interface {
	pulumi.Input

	ToAzureBlobFileSystemReferenceInvokeResponseOutput() AzureBlobFileSystemReferenceInvokeResponseOutput
	ToAzureBlobFileSystemReferenceInvokeResponseOutputWithContext(context.Context) AzureBlobFileSystemReferenceInvokeResponseOutput
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReferenceInvokeResponseArgs struct {
	// Name of the Azure storage account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Name of the Azure Blob Storage container to mount on the cluster.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoInvokeResponseInput `pulumi:"credentials"`
	// Mount options for mounting blobfuse file system.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (AzureBlobFileSystemReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemReferenceInvokeResponse)(nil)).Elem()
}

func (i AzureBlobFileSystemReferenceInvokeResponseArgs) ToAzureBlobFileSystemReferenceInvokeResponseOutput() AzureBlobFileSystemReferenceInvokeResponseOutput {
	return i.ToAzureBlobFileSystemReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemReferenceInvokeResponseArgs) ToAzureBlobFileSystemReferenceInvokeResponseOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemReferenceInvokeResponseOutput)
}

// AzureBlobFileSystemReferenceInvokeResponseArrayInput is an input type that accepts AzureBlobFileSystemReferenceInvokeResponseArray and AzureBlobFileSystemReferenceInvokeResponseArrayOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemReferenceInvokeResponseArrayInput` via:
//
//          AzureBlobFileSystemReferenceInvokeResponseArray{ AzureBlobFileSystemReferenceInvokeResponseArgs{...} }
type AzureBlobFileSystemReferenceInvokeResponseArrayInput interface {
	pulumi.Input

	ToAzureBlobFileSystemReferenceInvokeResponseArrayOutput() AzureBlobFileSystemReferenceInvokeResponseArrayOutput
	ToAzureBlobFileSystemReferenceInvokeResponseArrayOutputWithContext(context.Context) AzureBlobFileSystemReferenceInvokeResponseArrayOutput
}

type AzureBlobFileSystemReferenceInvokeResponseArray []AzureBlobFileSystemReferenceInvokeResponseInput

func (AzureBlobFileSystemReferenceInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureBlobFileSystemReferenceInvokeResponse)(nil)).Elem()
}

func (i AzureBlobFileSystemReferenceInvokeResponseArray) ToAzureBlobFileSystemReferenceInvokeResponseArrayOutput() AzureBlobFileSystemReferenceInvokeResponseArrayOutput {
	return i.ToAzureBlobFileSystemReferenceInvokeResponseArrayOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemReferenceInvokeResponseArray) ToAzureBlobFileSystemReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemReferenceInvokeResponseArrayOutput)
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemReferenceInvokeResponse)(nil)).Elem()
}

func (o AzureBlobFileSystemReferenceInvokeResponseOutput) ToAzureBlobFileSystemReferenceInvokeResponseOutput() AzureBlobFileSystemReferenceInvokeResponseOutput {
	return o
}

func (o AzureBlobFileSystemReferenceInvokeResponseOutput) ToAzureBlobFileSystemReferenceInvokeResponseOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceInvokeResponseOutput {
	return o
}

// Name of the Azure storage account.
func (o AzureBlobFileSystemReferenceInvokeResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceInvokeResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// Name of the Azure Blob Storage container to mount on the cluster.
func (o AzureBlobFileSystemReferenceInvokeResponseOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceInvokeResponse) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Information about the Azure storage credentials.
func (o AzureBlobFileSystemReferenceInvokeResponseOutput) Credentials() AzureStorageCredentialsInfoInvokeResponseOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceInvokeResponse) AzureStorageCredentialsInfoInvokeResponse {
		return v.Credentials
	}).(AzureStorageCredentialsInfoInvokeResponseOutput)
}

// Mount options for mounting blobfuse file system.
func (o AzureBlobFileSystemReferenceInvokeResponseOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceInvokeResponse) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o AzureBlobFileSystemReferenceInvokeResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceInvokeResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type AzureBlobFileSystemReferenceInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemReferenceInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureBlobFileSystemReferenceInvokeResponse)(nil)).Elem()
}

func (o AzureBlobFileSystemReferenceInvokeResponseArrayOutput) ToAzureBlobFileSystemReferenceInvokeResponseArrayOutput() AzureBlobFileSystemReferenceInvokeResponseArrayOutput {
	return o
}

func (o AzureBlobFileSystemReferenceInvokeResponseArrayOutput) ToAzureBlobFileSystemReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceInvokeResponseArrayOutput {
	return o
}

func (o AzureBlobFileSystemReferenceInvokeResponseArrayOutput) Index(i pulumi.IntInput) AzureBlobFileSystemReferenceInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureBlobFileSystemReferenceInvokeResponse {
		return vs[0].([]AzureBlobFileSystemReferenceInvokeResponse)[vs[1].(int)]
	}).(AzureBlobFileSystemReferenceInvokeResponseOutput)
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReferenceResponse struct {
	// Name of the Azure storage account.
	AccountName string `pulumi:"accountName"`
	// Name of the Azure Blob Storage container to mount on the cluster.
	ContainerName string `pulumi:"containerName"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoResponse `pulumi:"credentials"`
	// Mount options for mounting blobfuse file system.
	MountOptions *string `pulumi:"mountOptions"`
	// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// AzureBlobFileSystemReferenceResponseInput is an input type that accepts AzureBlobFileSystemReferenceResponseArgs and AzureBlobFileSystemReferenceResponseOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemReferenceResponseInput` via:
//
//          AzureBlobFileSystemReferenceResponseArgs{...}
type AzureBlobFileSystemReferenceResponseInput interface {
	pulumi.Input

	ToAzureBlobFileSystemReferenceResponseOutput() AzureBlobFileSystemReferenceResponseOutput
	ToAzureBlobFileSystemReferenceResponseOutputWithContext(context.Context) AzureBlobFileSystemReferenceResponseOutput
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReferenceResponseArgs struct {
	// Name of the Azure storage account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Name of the Azure Blob Storage container to mount on the cluster.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoResponseInput `pulumi:"credentials"`
	// Mount options for mounting blobfuse file system.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (AzureBlobFileSystemReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemReferenceResponse)(nil)).Elem()
}

func (i AzureBlobFileSystemReferenceResponseArgs) ToAzureBlobFileSystemReferenceResponseOutput() AzureBlobFileSystemReferenceResponseOutput {
	return i.ToAzureBlobFileSystemReferenceResponseOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemReferenceResponseArgs) ToAzureBlobFileSystemReferenceResponseOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemReferenceResponseOutput)
}

// AzureBlobFileSystemReferenceResponseArrayInput is an input type that accepts AzureBlobFileSystemReferenceResponseArray and AzureBlobFileSystemReferenceResponseArrayOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemReferenceResponseArrayInput` via:
//
//          AzureBlobFileSystemReferenceResponseArray{ AzureBlobFileSystemReferenceResponseArgs{...} }
type AzureBlobFileSystemReferenceResponseArrayInput interface {
	pulumi.Input

	ToAzureBlobFileSystemReferenceResponseArrayOutput() AzureBlobFileSystemReferenceResponseArrayOutput
	ToAzureBlobFileSystemReferenceResponseArrayOutputWithContext(context.Context) AzureBlobFileSystemReferenceResponseArrayOutput
}

type AzureBlobFileSystemReferenceResponseArray []AzureBlobFileSystemReferenceResponseInput

func (AzureBlobFileSystemReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureBlobFileSystemReferenceResponse)(nil)).Elem()
}

func (i AzureBlobFileSystemReferenceResponseArray) ToAzureBlobFileSystemReferenceResponseArrayOutput() AzureBlobFileSystemReferenceResponseArrayOutput {
	return i.ToAzureBlobFileSystemReferenceResponseArrayOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemReferenceResponseArray) ToAzureBlobFileSystemReferenceResponseArrayOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemReferenceResponseArrayOutput)
}

// Azure Blob Storage Container mounting configuration.
type AzureBlobFileSystemReferenceResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemReferenceResponse)(nil)).Elem()
}

func (o AzureBlobFileSystemReferenceResponseOutput) ToAzureBlobFileSystemReferenceResponseOutput() AzureBlobFileSystemReferenceResponseOutput {
	return o
}

func (o AzureBlobFileSystemReferenceResponseOutput) ToAzureBlobFileSystemReferenceResponseOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceResponseOutput {
	return o
}

// Name of the Azure storage account.
func (o AzureBlobFileSystemReferenceResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// Name of the Azure Blob Storage container to mount on the cluster.
func (o AzureBlobFileSystemReferenceResponseOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceResponse) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Information about the Azure storage credentials.
func (o AzureBlobFileSystemReferenceResponseOutput) Credentials() AzureStorageCredentialsInfoResponseOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceResponse) AzureStorageCredentialsInfoResponse { return v.Credentials }).(AzureStorageCredentialsInfoResponseOutput)
}

// Mount options for mounting blobfuse file system.
func (o AzureBlobFileSystemReferenceResponseOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceResponse) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o AzureBlobFileSystemReferenceResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemReferenceResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type AzureBlobFileSystemReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureBlobFileSystemReferenceResponse)(nil)).Elem()
}

func (o AzureBlobFileSystemReferenceResponseArrayOutput) ToAzureBlobFileSystemReferenceResponseArrayOutput() AzureBlobFileSystemReferenceResponseArrayOutput {
	return o
}

func (o AzureBlobFileSystemReferenceResponseArrayOutput) ToAzureBlobFileSystemReferenceResponseArrayOutputWithContext(ctx context.Context) AzureBlobFileSystemReferenceResponseArrayOutput {
	return o
}

func (o AzureBlobFileSystemReferenceResponseArrayOutput) Index(i pulumi.IntInput) AzureBlobFileSystemReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureBlobFileSystemReferenceResponse {
		return vs[0].([]AzureBlobFileSystemReferenceResponse)[vs[1].(int)]
	}).(AzureBlobFileSystemReferenceResponseOutput)
}

// Azure File Share mounting configuration.
type AzureFileShareReference struct {
	// Name of the Azure storage account.
	AccountName string `pulumi:"accountName"`
	// URL to access the Azure File.
	AzureFileUrl string `pulumi:"azureFileUrl"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfo `pulumi:"credentials"`
	// File mode for directories on the mounted file share. Default value: 0777.
	DirectoryMode *string `pulumi:"directoryMode"`
	// File mode for files on the mounted file share. Default value: 0777.
	FileMode *string `pulumi:"fileMode"`
	// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// AzureFileShareReferenceInput is an input type that accepts AzureFileShareReferenceArgs and AzureFileShareReferenceOutput values.
// You can construct a concrete instance of `AzureFileShareReferenceInput` via:
//
//          AzureFileShareReferenceArgs{...}
type AzureFileShareReferenceInput interface {
	pulumi.Input

	ToAzureFileShareReferenceOutput() AzureFileShareReferenceOutput
	ToAzureFileShareReferenceOutputWithContext(context.Context) AzureFileShareReferenceOutput
}

// Azure File Share mounting configuration.
type AzureFileShareReferenceArgs struct {
	// Name of the Azure storage account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// URL to access the Azure File.
	AzureFileUrl pulumi.StringInput `pulumi:"azureFileUrl"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoInput `pulumi:"credentials"`
	// File mode for directories on the mounted file share. Default value: 0777.
	DirectoryMode pulumi.StringPtrInput `pulumi:"directoryMode"`
	// File mode for files on the mounted file share. Default value: 0777.
	FileMode pulumi.StringPtrInput `pulumi:"fileMode"`
	// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (AzureFileShareReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareReference)(nil)).Elem()
}

func (i AzureFileShareReferenceArgs) ToAzureFileShareReferenceOutput() AzureFileShareReferenceOutput {
	return i.ToAzureFileShareReferenceOutputWithContext(context.Background())
}

func (i AzureFileShareReferenceArgs) ToAzureFileShareReferenceOutputWithContext(ctx context.Context) AzureFileShareReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareReferenceOutput)
}

// AzureFileShareReferenceArrayInput is an input type that accepts AzureFileShareReferenceArray and AzureFileShareReferenceArrayOutput values.
// You can construct a concrete instance of `AzureFileShareReferenceArrayInput` via:
//
//          AzureFileShareReferenceArray{ AzureFileShareReferenceArgs{...} }
type AzureFileShareReferenceArrayInput interface {
	pulumi.Input

	ToAzureFileShareReferenceArrayOutput() AzureFileShareReferenceArrayOutput
	ToAzureFileShareReferenceArrayOutputWithContext(context.Context) AzureFileShareReferenceArrayOutput
}

type AzureFileShareReferenceArray []AzureFileShareReferenceInput

func (AzureFileShareReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFileShareReference)(nil)).Elem()
}

func (i AzureFileShareReferenceArray) ToAzureFileShareReferenceArrayOutput() AzureFileShareReferenceArrayOutput {
	return i.ToAzureFileShareReferenceArrayOutputWithContext(context.Background())
}

func (i AzureFileShareReferenceArray) ToAzureFileShareReferenceArrayOutputWithContext(ctx context.Context) AzureFileShareReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareReferenceArrayOutput)
}

// Azure File Share mounting configuration.
type AzureFileShareReferenceOutput struct{ *pulumi.OutputState }

func (AzureFileShareReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareReference)(nil)).Elem()
}

func (o AzureFileShareReferenceOutput) ToAzureFileShareReferenceOutput() AzureFileShareReferenceOutput {
	return o
}

func (o AzureFileShareReferenceOutput) ToAzureFileShareReferenceOutputWithContext(ctx context.Context) AzureFileShareReferenceOutput {
	return o
}

// Name of the Azure storage account.
func (o AzureFileShareReferenceOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReference) string { return v.AccountName }).(pulumi.StringOutput)
}

// URL to access the Azure File.
func (o AzureFileShareReferenceOutput) AzureFileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReference) string { return v.AzureFileUrl }).(pulumi.StringOutput)
}

// Information about the Azure storage credentials.
func (o AzureFileShareReferenceOutput) Credentials() AzureStorageCredentialsInfoOutput {
	return o.ApplyT(func(v AzureFileShareReference) AzureStorageCredentialsInfo { return v.Credentials }).(AzureStorageCredentialsInfoOutput)
}

// File mode for directories on the mounted file share. Default value: 0777.
func (o AzureFileShareReferenceOutput) DirectoryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileShareReference) *string { return v.DirectoryMode }).(pulumi.StringPtrOutput)
}

// File mode for files on the mounted file share. Default value: 0777.
func (o AzureFileShareReferenceOutput) FileMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileShareReference) *string { return v.FileMode }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o AzureFileShareReferenceOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReference) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type AzureFileShareReferenceArrayOutput struct{ *pulumi.OutputState }

func (AzureFileShareReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFileShareReference)(nil)).Elem()
}

func (o AzureFileShareReferenceArrayOutput) ToAzureFileShareReferenceArrayOutput() AzureFileShareReferenceArrayOutput {
	return o
}

func (o AzureFileShareReferenceArrayOutput) ToAzureFileShareReferenceArrayOutputWithContext(ctx context.Context) AzureFileShareReferenceArrayOutput {
	return o
}

func (o AzureFileShareReferenceArrayOutput) Index(i pulumi.IntInput) AzureFileShareReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFileShareReference {
		return vs[0].([]AzureFileShareReference)[vs[1].(int)]
	}).(AzureFileShareReferenceOutput)
}

// Azure File Share mounting configuration.
type AzureFileShareReferenceInvokeResponse struct {
	// Name of the Azure storage account.
	AccountName string `pulumi:"accountName"`
	// URL to access the Azure File.
	AzureFileUrl string `pulumi:"azureFileUrl"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoInvokeResponse `pulumi:"credentials"`
	// File mode for directories on the mounted file share. Default value: 0777.
	DirectoryMode *string `pulumi:"directoryMode"`
	// File mode for files on the mounted file share. Default value: 0777.
	FileMode *string `pulumi:"fileMode"`
	// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// AzureFileShareReferenceInvokeResponseInput is an input type that accepts AzureFileShareReferenceInvokeResponseArgs and AzureFileShareReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `AzureFileShareReferenceInvokeResponseInput` via:
//
//          AzureFileShareReferenceInvokeResponseArgs{...}
type AzureFileShareReferenceInvokeResponseInput interface {
	pulumi.Input

	ToAzureFileShareReferenceInvokeResponseOutput() AzureFileShareReferenceInvokeResponseOutput
	ToAzureFileShareReferenceInvokeResponseOutputWithContext(context.Context) AzureFileShareReferenceInvokeResponseOutput
}

// Azure File Share mounting configuration.
type AzureFileShareReferenceInvokeResponseArgs struct {
	// Name of the Azure storage account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// URL to access the Azure File.
	AzureFileUrl pulumi.StringInput `pulumi:"azureFileUrl"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoInvokeResponseInput `pulumi:"credentials"`
	// File mode for directories on the mounted file share. Default value: 0777.
	DirectoryMode pulumi.StringPtrInput `pulumi:"directoryMode"`
	// File mode for files on the mounted file share. Default value: 0777.
	FileMode pulumi.StringPtrInput `pulumi:"fileMode"`
	// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (AzureFileShareReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareReferenceInvokeResponse)(nil)).Elem()
}

func (i AzureFileShareReferenceInvokeResponseArgs) ToAzureFileShareReferenceInvokeResponseOutput() AzureFileShareReferenceInvokeResponseOutput {
	return i.ToAzureFileShareReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i AzureFileShareReferenceInvokeResponseArgs) ToAzureFileShareReferenceInvokeResponseOutputWithContext(ctx context.Context) AzureFileShareReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareReferenceInvokeResponseOutput)
}

// AzureFileShareReferenceInvokeResponseArrayInput is an input type that accepts AzureFileShareReferenceInvokeResponseArray and AzureFileShareReferenceInvokeResponseArrayOutput values.
// You can construct a concrete instance of `AzureFileShareReferenceInvokeResponseArrayInput` via:
//
//          AzureFileShareReferenceInvokeResponseArray{ AzureFileShareReferenceInvokeResponseArgs{...} }
type AzureFileShareReferenceInvokeResponseArrayInput interface {
	pulumi.Input

	ToAzureFileShareReferenceInvokeResponseArrayOutput() AzureFileShareReferenceInvokeResponseArrayOutput
	ToAzureFileShareReferenceInvokeResponseArrayOutputWithContext(context.Context) AzureFileShareReferenceInvokeResponseArrayOutput
}

type AzureFileShareReferenceInvokeResponseArray []AzureFileShareReferenceInvokeResponseInput

func (AzureFileShareReferenceInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFileShareReferenceInvokeResponse)(nil)).Elem()
}

func (i AzureFileShareReferenceInvokeResponseArray) ToAzureFileShareReferenceInvokeResponseArrayOutput() AzureFileShareReferenceInvokeResponseArrayOutput {
	return i.ToAzureFileShareReferenceInvokeResponseArrayOutputWithContext(context.Background())
}

func (i AzureFileShareReferenceInvokeResponseArray) ToAzureFileShareReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) AzureFileShareReferenceInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareReferenceInvokeResponseArrayOutput)
}

// Azure File Share mounting configuration.
type AzureFileShareReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (AzureFileShareReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareReferenceInvokeResponse)(nil)).Elem()
}

func (o AzureFileShareReferenceInvokeResponseOutput) ToAzureFileShareReferenceInvokeResponseOutput() AzureFileShareReferenceInvokeResponseOutput {
	return o
}

func (o AzureFileShareReferenceInvokeResponseOutput) ToAzureFileShareReferenceInvokeResponseOutputWithContext(ctx context.Context) AzureFileShareReferenceInvokeResponseOutput {
	return o
}

// Name of the Azure storage account.
func (o AzureFileShareReferenceInvokeResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReferenceInvokeResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// URL to access the Azure File.
func (o AzureFileShareReferenceInvokeResponseOutput) AzureFileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReferenceInvokeResponse) string { return v.AzureFileUrl }).(pulumi.StringOutput)
}

// Information about the Azure storage credentials.
func (o AzureFileShareReferenceInvokeResponseOutput) Credentials() AzureStorageCredentialsInfoInvokeResponseOutput {
	return o.ApplyT(func(v AzureFileShareReferenceInvokeResponse) AzureStorageCredentialsInfoInvokeResponse {
		return v.Credentials
	}).(AzureStorageCredentialsInfoInvokeResponseOutput)
}

// File mode for directories on the mounted file share. Default value: 0777.
func (o AzureFileShareReferenceInvokeResponseOutput) DirectoryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileShareReferenceInvokeResponse) *string { return v.DirectoryMode }).(pulumi.StringPtrOutput)
}

// File mode for files on the mounted file share. Default value: 0777.
func (o AzureFileShareReferenceInvokeResponseOutput) FileMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileShareReferenceInvokeResponse) *string { return v.FileMode }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o AzureFileShareReferenceInvokeResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReferenceInvokeResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type AzureFileShareReferenceInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureFileShareReferenceInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFileShareReferenceInvokeResponse)(nil)).Elem()
}

func (o AzureFileShareReferenceInvokeResponseArrayOutput) ToAzureFileShareReferenceInvokeResponseArrayOutput() AzureFileShareReferenceInvokeResponseArrayOutput {
	return o
}

func (o AzureFileShareReferenceInvokeResponseArrayOutput) ToAzureFileShareReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) AzureFileShareReferenceInvokeResponseArrayOutput {
	return o
}

func (o AzureFileShareReferenceInvokeResponseArrayOutput) Index(i pulumi.IntInput) AzureFileShareReferenceInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFileShareReferenceInvokeResponse {
		return vs[0].([]AzureFileShareReferenceInvokeResponse)[vs[1].(int)]
	}).(AzureFileShareReferenceInvokeResponseOutput)
}

// Azure File Share mounting configuration.
type AzureFileShareReferenceResponse struct {
	// Name of the Azure storage account.
	AccountName string `pulumi:"accountName"`
	// URL to access the Azure File.
	AzureFileUrl string `pulumi:"azureFileUrl"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoResponse `pulumi:"credentials"`
	// File mode for directories on the mounted file share. Default value: 0777.
	DirectoryMode *string `pulumi:"directoryMode"`
	// File mode for files on the mounted file share. Default value: 0777.
	FileMode *string `pulumi:"fileMode"`
	// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// AzureFileShareReferenceResponseInput is an input type that accepts AzureFileShareReferenceResponseArgs and AzureFileShareReferenceResponseOutput values.
// You can construct a concrete instance of `AzureFileShareReferenceResponseInput` via:
//
//          AzureFileShareReferenceResponseArgs{...}
type AzureFileShareReferenceResponseInput interface {
	pulumi.Input

	ToAzureFileShareReferenceResponseOutput() AzureFileShareReferenceResponseOutput
	ToAzureFileShareReferenceResponseOutputWithContext(context.Context) AzureFileShareReferenceResponseOutput
}

// Azure File Share mounting configuration.
type AzureFileShareReferenceResponseArgs struct {
	// Name of the Azure storage account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// URL to access the Azure File.
	AzureFileUrl pulumi.StringInput `pulumi:"azureFileUrl"`
	// Information about the Azure storage credentials.
	Credentials AzureStorageCredentialsInfoResponseInput `pulumi:"credentials"`
	// File mode for directories on the mounted file share. Default value: 0777.
	DirectoryMode pulumi.StringPtrInput `pulumi:"directoryMode"`
	// File mode for files on the mounted file share. Default value: 0777.
	FileMode pulumi.StringPtrInput `pulumi:"fileMode"`
	// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (AzureFileShareReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareReferenceResponse)(nil)).Elem()
}

func (i AzureFileShareReferenceResponseArgs) ToAzureFileShareReferenceResponseOutput() AzureFileShareReferenceResponseOutput {
	return i.ToAzureFileShareReferenceResponseOutputWithContext(context.Background())
}

func (i AzureFileShareReferenceResponseArgs) ToAzureFileShareReferenceResponseOutputWithContext(ctx context.Context) AzureFileShareReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareReferenceResponseOutput)
}

// AzureFileShareReferenceResponseArrayInput is an input type that accepts AzureFileShareReferenceResponseArray and AzureFileShareReferenceResponseArrayOutput values.
// You can construct a concrete instance of `AzureFileShareReferenceResponseArrayInput` via:
//
//          AzureFileShareReferenceResponseArray{ AzureFileShareReferenceResponseArgs{...} }
type AzureFileShareReferenceResponseArrayInput interface {
	pulumi.Input

	ToAzureFileShareReferenceResponseArrayOutput() AzureFileShareReferenceResponseArrayOutput
	ToAzureFileShareReferenceResponseArrayOutputWithContext(context.Context) AzureFileShareReferenceResponseArrayOutput
}

type AzureFileShareReferenceResponseArray []AzureFileShareReferenceResponseInput

func (AzureFileShareReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFileShareReferenceResponse)(nil)).Elem()
}

func (i AzureFileShareReferenceResponseArray) ToAzureFileShareReferenceResponseArrayOutput() AzureFileShareReferenceResponseArrayOutput {
	return i.ToAzureFileShareReferenceResponseArrayOutputWithContext(context.Background())
}

func (i AzureFileShareReferenceResponseArray) ToAzureFileShareReferenceResponseArrayOutputWithContext(ctx context.Context) AzureFileShareReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareReferenceResponseArrayOutput)
}

// Azure File Share mounting configuration.
type AzureFileShareReferenceResponseOutput struct{ *pulumi.OutputState }

func (AzureFileShareReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareReferenceResponse)(nil)).Elem()
}

func (o AzureFileShareReferenceResponseOutput) ToAzureFileShareReferenceResponseOutput() AzureFileShareReferenceResponseOutput {
	return o
}

func (o AzureFileShareReferenceResponseOutput) ToAzureFileShareReferenceResponseOutputWithContext(ctx context.Context) AzureFileShareReferenceResponseOutput {
	return o
}

// Name of the Azure storage account.
func (o AzureFileShareReferenceResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReferenceResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// URL to access the Azure File.
func (o AzureFileShareReferenceResponseOutput) AzureFileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReferenceResponse) string { return v.AzureFileUrl }).(pulumi.StringOutput)
}

// Information about the Azure storage credentials.
func (o AzureFileShareReferenceResponseOutput) Credentials() AzureStorageCredentialsInfoResponseOutput {
	return o.ApplyT(func(v AzureFileShareReferenceResponse) AzureStorageCredentialsInfoResponse { return v.Credentials }).(AzureStorageCredentialsInfoResponseOutput)
}

// File mode for directories on the mounted file share. Default value: 0777.
func (o AzureFileShareReferenceResponseOutput) DirectoryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileShareReferenceResponse) *string { return v.DirectoryMode }).(pulumi.StringPtrOutput)
}

// File mode for files on the mounted file share. Default value: 0777.
func (o AzureFileShareReferenceResponseOutput) FileMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileShareReferenceResponse) *string { return v.FileMode }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o AzureFileShareReferenceResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareReferenceResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type AzureFileShareReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureFileShareReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFileShareReferenceResponse)(nil)).Elem()
}

func (o AzureFileShareReferenceResponseArrayOutput) ToAzureFileShareReferenceResponseArrayOutput() AzureFileShareReferenceResponseArrayOutput {
	return o
}

func (o AzureFileShareReferenceResponseArrayOutput) ToAzureFileShareReferenceResponseArrayOutputWithContext(ctx context.Context) AzureFileShareReferenceResponseArrayOutput {
	return o
}

func (o AzureFileShareReferenceResponseArrayOutput) Index(i pulumi.IntInput) AzureFileShareReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFileShareReferenceResponse {
		return vs[0].([]AzureFileShareReferenceResponse)[vs[1].(int)]
	}).(AzureFileShareReferenceResponseOutput)
}

// Azure storage account credentials.
type AzureStorageCredentialsInfo struct {
	// Storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKey *string `pulumi:"accountKey"`
	// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKeySecretReference *KeyVaultSecretReference `pulumi:"accountKeySecretReference"`
}

// AzureStorageCredentialsInfoInput is an input type that accepts AzureStorageCredentialsInfoArgs and AzureStorageCredentialsInfoOutput values.
// You can construct a concrete instance of `AzureStorageCredentialsInfoInput` via:
//
//          AzureStorageCredentialsInfoArgs{...}
type AzureStorageCredentialsInfoInput interface {
	pulumi.Input

	ToAzureStorageCredentialsInfoOutput() AzureStorageCredentialsInfoOutput
	ToAzureStorageCredentialsInfoOutputWithContext(context.Context) AzureStorageCredentialsInfoOutput
}

// Azure storage account credentials.
type AzureStorageCredentialsInfoArgs struct {
	// Storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKeySecretReference KeyVaultSecretReferencePtrInput `pulumi:"accountKeySecretReference"`
}

func (AzureStorageCredentialsInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageCredentialsInfo)(nil)).Elem()
}

func (i AzureStorageCredentialsInfoArgs) ToAzureStorageCredentialsInfoOutput() AzureStorageCredentialsInfoOutput {
	return i.ToAzureStorageCredentialsInfoOutputWithContext(context.Background())
}

func (i AzureStorageCredentialsInfoArgs) ToAzureStorageCredentialsInfoOutputWithContext(ctx context.Context) AzureStorageCredentialsInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageCredentialsInfoOutput)
}

// Azure storage account credentials.
type AzureStorageCredentialsInfoOutput struct{ *pulumi.OutputState }

func (AzureStorageCredentialsInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageCredentialsInfo)(nil)).Elem()
}

func (o AzureStorageCredentialsInfoOutput) ToAzureStorageCredentialsInfoOutput() AzureStorageCredentialsInfoOutput {
	return o
}

func (o AzureStorageCredentialsInfoOutput) ToAzureStorageCredentialsInfoOutputWithContext(ctx context.Context) AzureStorageCredentialsInfoOutput {
	return o
}

// Storage account key. One of accountKey or accountKeySecretReference must be specified.
func (o AzureStorageCredentialsInfoOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageCredentialsInfo) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
func (o AzureStorageCredentialsInfoOutput) AccountKeySecretReference() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureStorageCredentialsInfo) *KeyVaultSecretReference { return v.AccountKeySecretReference }).(KeyVaultSecretReferencePtrOutput)
}

// Azure storage account credentials.
type AzureStorageCredentialsInfoInvokeResponse struct {
	// Storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKey *string `pulumi:"accountKey"`
	// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKeySecretReference *KeyVaultSecretReferenceInvokeResponse `pulumi:"accountKeySecretReference"`
}

// AzureStorageCredentialsInfoInvokeResponseInput is an input type that accepts AzureStorageCredentialsInfoInvokeResponseArgs and AzureStorageCredentialsInfoInvokeResponseOutput values.
// You can construct a concrete instance of `AzureStorageCredentialsInfoInvokeResponseInput` via:
//
//          AzureStorageCredentialsInfoInvokeResponseArgs{...}
type AzureStorageCredentialsInfoInvokeResponseInput interface {
	pulumi.Input

	ToAzureStorageCredentialsInfoInvokeResponseOutput() AzureStorageCredentialsInfoInvokeResponseOutput
	ToAzureStorageCredentialsInfoInvokeResponseOutputWithContext(context.Context) AzureStorageCredentialsInfoInvokeResponseOutput
}

// Azure storage account credentials.
type AzureStorageCredentialsInfoInvokeResponseArgs struct {
	// Storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKeySecretReference KeyVaultSecretReferenceInvokeResponsePtrInput `pulumi:"accountKeySecretReference"`
}

func (AzureStorageCredentialsInfoInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageCredentialsInfoInvokeResponse)(nil)).Elem()
}

func (i AzureStorageCredentialsInfoInvokeResponseArgs) ToAzureStorageCredentialsInfoInvokeResponseOutput() AzureStorageCredentialsInfoInvokeResponseOutput {
	return i.ToAzureStorageCredentialsInfoInvokeResponseOutputWithContext(context.Background())
}

func (i AzureStorageCredentialsInfoInvokeResponseArgs) ToAzureStorageCredentialsInfoInvokeResponseOutputWithContext(ctx context.Context) AzureStorageCredentialsInfoInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageCredentialsInfoInvokeResponseOutput)
}

// Azure storage account credentials.
type AzureStorageCredentialsInfoInvokeResponseOutput struct{ *pulumi.OutputState }

func (AzureStorageCredentialsInfoInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageCredentialsInfoInvokeResponse)(nil)).Elem()
}

func (o AzureStorageCredentialsInfoInvokeResponseOutput) ToAzureStorageCredentialsInfoInvokeResponseOutput() AzureStorageCredentialsInfoInvokeResponseOutput {
	return o
}

func (o AzureStorageCredentialsInfoInvokeResponseOutput) ToAzureStorageCredentialsInfoInvokeResponseOutputWithContext(ctx context.Context) AzureStorageCredentialsInfoInvokeResponseOutput {
	return o
}

// Storage account key. One of accountKey or accountKeySecretReference must be specified.
func (o AzureStorageCredentialsInfoInvokeResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageCredentialsInfoInvokeResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
func (o AzureStorageCredentialsInfoInvokeResponseOutput) AccountKeySecretReference() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageCredentialsInfoInvokeResponse) *KeyVaultSecretReferenceInvokeResponse {
		return v.AccountKeySecretReference
	}).(KeyVaultSecretReferenceInvokeResponsePtrOutput)
}

// Azure storage account credentials.
type AzureStorageCredentialsInfoResponse struct {
	// Storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKey *string `pulumi:"accountKey"`
	// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKeySecretReference *KeyVaultSecretReferenceResponse `pulumi:"accountKeySecretReference"`
}

// AzureStorageCredentialsInfoResponseInput is an input type that accepts AzureStorageCredentialsInfoResponseArgs and AzureStorageCredentialsInfoResponseOutput values.
// You can construct a concrete instance of `AzureStorageCredentialsInfoResponseInput` via:
//
//          AzureStorageCredentialsInfoResponseArgs{...}
type AzureStorageCredentialsInfoResponseInput interface {
	pulumi.Input

	ToAzureStorageCredentialsInfoResponseOutput() AzureStorageCredentialsInfoResponseOutput
	ToAzureStorageCredentialsInfoResponseOutputWithContext(context.Context) AzureStorageCredentialsInfoResponseOutput
}

// Azure storage account credentials.
type AzureStorageCredentialsInfoResponseArgs struct {
	// Storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
	AccountKeySecretReference KeyVaultSecretReferenceResponsePtrInput `pulumi:"accountKeySecretReference"`
}

func (AzureStorageCredentialsInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageCredentialsInfoResponse)(nil)).Elem()
}

func (i AzureStorageCredentialsInfoResponseArgs) ToAzureStorageCredentialsInfoResponseOutput() AzureStorageCredentialsInfoResponseOutput {
	return i.ToAzureStorageCredentialsInfoResponseOutputWithContext(context.Background())
}

func (i AzureStorageCredentialsInfoResponseArgs) ToAzureStorageCredentialsInfoResponseOutputWithContext(ctx context.Context) AzureStorageCredentialsInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageCredentialsInfoResponseOutput)
}

// Azure storage account credentials.
type AzureStorageCredentialsInfoResponseOutput struct{ *pulumi.OutputState }

func (AzureStorageCredentialsInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageCredentialsInfoResponse)(nil)).Elem()
}

func (o AzureStorageCredentialsInfoResponseOutput) ToAzureStorageCredentialsInfoResponseOutput() AzureStorageCredentialsInfoResponseOutput {
	return o
}

func (o AzureStorageCredentialsInfoResponseOutput) ToAzureStorageCredentialsInfoResponseOutputWithContext(ctx context.Context) AzureStorageCredentialsInfoResponseOutput {
	return o
}

// Storage account key. One of accountKey or accountKeySecretReference must be specified.
func (o AzureStorageCredentialsInfoResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageCredentialsInfoResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Information about KeyVault secret storing the storage account key. One of accountKey or accountKeySecretReference must be specified.
func (o AzureStorageCredentialsInfoResponseOutput) AccountKeySecretReference() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageCredentialsInfoResponse) *KeyVaultSecretReferenceResponse {
		return v.AccountKeySecretReference
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// An error response from the Batch AI service.
type BatchAIErrorInvokeResponse struct {
	// An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
	Code string `pulumi:"code"`
	// A list of additional details about the error.
	Details []NameValuePairInvokeResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message string `pulumi:"message"`
}

// BatchAIErrorInvokeResponseInput is an input type that accepts BatchAIErrorInvokeResponseArgs and BatchAIErrorInvokeResponseOutput values.
// You can construct a concrete instance of `BatchAIErrorInvokeResponseInput` via:
//
//          BatchAIErrorInvokeResponseArgs{...}
type BatchAIErrorInvokeResponseInput interface {
	pulumi.Input

	ToBatchAIErrorInvokeResponseOutput() BatchAIErrorInvokeResponseOutput
	ToBatchAIErrorInvokeResponseOutputWithContext(context.Context) BatchAIErrorInvokeResponseOutput
}

// An error response from the Batch AI service.
type BatchAIErrorInvokeResponseArgs struct {
	// An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
	Code pulumi.StringInput `pulumi:"code"`
	// A list of additional details about the error.
	Details NameValuePairInvokeResponseArrayInput `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message pulumi.StringInput `pulumi:"message"`
}

func (BatchAIErrorInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchAIErrorInvokeResponse)(nil)).Elem()
}

func (i BatchAIErrorInvokeResponseArgs) ToBatchAIErrorInvokeResponseOutput() BatchAIErrorInvokeResponseOutput {
	return i.ToBatchAIErrorInvokeResponseOutputWithContext(context.Background())
}

func (i BatchAIErrorInvokeResponseArgs) ToBatchAIErrorInvokeResponseOutputWithContext(ctx context.Context) BatchAIErrorInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAIErrorInvokeResponseOutput)
}

// BatchAIErrorInvokeResponseArrayInput is an input type that accepts BatchAIErrorInvokeResponseArray and BatchAIErrorInvokeResponseArrayOutput values.
// You can construct a concrete instance of `BatchAIErrorInvokeResponseArrayInput` via:
//
//          BatchAIErrorInvokeResponseArray{ BatchAIErrorInvokeResponseArgs{...} }
type BatchAIErrorInvokeResponseArrayInput interface {
	pulumi.Input

	ToBatchAIErrorInvokeResponseArrayOutput() BatchAIErrorInvokeResponseArrayOutput
	ToBatchAIErrorInvokeResponseArrayOutputWithContext(context.Context) BatchAIErrorInvokeResponseArrayOutput
}

type BatchAIErrorInvokeResponseArray []BatchAIErrorInvokeResponseInput

func (BatchAIErrorInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BatchAIErrorInvokeResponse)(nil)).Elem()
}

func (i BatchAIErrorInvokeResponseArray) ToBatchAIErrorInvokeResponseArrayOutput() BatchAIErrorInvokeResponseArrayOutput {
	return i.ToBatchAIErrorInvokeResponseArrayOutputWithContext(context.Background())
}

func (i BatchAIErrorInvokeResponseArray) ToBatchAIErrorInvokeResponseArrayOutputWithContext(ctx context.Context) BatchAIErrorInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAIErrorInvokeResponseArrayOutput)
}

// An error response from the Batch AI service.
type BatchAIErrorInvokeResponseOutput struct{ *pulumi.OutputState }

func (BatchAIErrorInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchAIErrorInvokeResponse)(nil)).Elem()
}

func (o BatchAIErrorInvokeResponseOutput) ToBatchAIErrorInvokeResponseOutput() BatchAIErrorInvokeResponseOutput {
	return o
}

func (o BatchAIErrorInvokeResponseOutput) ToBatchAIErrorInvokeResponseOutputWithContext(ctx context.Context) BatchAIErrorInvokeResponseOutput {
	return o
}

// An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
func (o BatchAIErrorInvokeResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v BatchAIErrorInvokeResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A list of additional details about the error.
func (o BatchAIErrorInvokeResponseOutput) Details() NameValuePairInvokeResponseArrayOutput {
	return o.ApplyT(func(v BatchAIErrorInvokeResponse) []NameValuePairInvokeResponse { return v.Details }).(NameValuePairInvokeResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o BatchAIErrorInvokeResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v BatchAIErrorInvokeResponse) string { return v.Message }).(pulumi.StringOutput)
}

type BatchAIErrorInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (BatchAIErrorInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BatchAIErrorInvokeResponse)(nil)).Elem()
}

func (o BatchAIErrorInvokeResponseArrayOutput) ToBatchAIErrorInvokeResponseArrayOutput() BatchAIErrorInvokeResponseArrayOutput {
	return o
}

func (o BatchAIErrorInvokeResponseArrayOutput) ToBatchAIErrorInvokeResponseArrayOutputWithContext(ctx context.Context) BatchAIErrorInvokeResponseArrayOutput {
	return o
}

func (o BatchAIErrorInvokeResponseArrayOutput) Index(i pulumi.IntInput) BatchAIErrorInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BatchAIErrorInvokeResponse {
		return vs[0].([]BatchAIErrorInvokeResponse)[vs[1].(int)]
	}).(BatchAIErrorInvokeResponseOutput)
}

// An error response from the Batch AI service.
type BatchAIErrorResponse struct {
	// An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
	Code string `pulumi:"code"`
	// A list of additional details about the error.
	Details []NameValuePairResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message string `pulumi:"message"`
}

// BatchAIErrorResponseInput is an input type that accepts BatchAIErrorResponseArgs and BatchAIErrorResponseOutput values.
// You can construct a concrete instance of `BatchAIErrorResponseInput` via:
//
//          BatchAIErrorResponseArgs{...}
type BatchAIErrorResponseInput interface {
	pulumi.Input

	ToBatchAIErrorResponseOutput() BatchAIErrorResponseOutput
	ToBatchAIErrorResponseOutputWithContext(context.Context) BatchAIErrorResponseOutput
}

// An error response from the Batch AI service.
type BatchAIErrorResponseArgs struct {
	// An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
	Code pulumi.StringInput `pulumi:"code"`
	// A list of additional details about the error.
	Details NameValuePairResponseArrayInput `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message pulumi.StringInput `pulumi:"message"`
}

func (BatchAIErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchAIErrorResponse)(nil)).Elem()
}

func (i BatchAIErrorResponseArgs) ToBatchAIErrorResponseOutput() BatchAIErrorResponseOutput {
	return i.ToBatchAIErrorResponseOutputWithContext(context.Background())
}

func (i BatchAIErrorResponseArgs) ToBatchAIErrorResponseOutputWithContext(ctx context.Context) BatchAIErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAIErrorResponseOutput)
}

// BatchAIErrorResponseArrayInput is an input type that accepts BatchAIErrorResponseArray and BatchAIErrorResponseArrayOutput values.
// You can construct a concrete instance of `BatchAIErrorResponseArrayInput` via:
//
//          BatchAIErrorResponseArray{ BatchAIErrorResponseArgs{...} }
type BatchAIErrorResponseArrayInput interface {
	pulumi.Input

	ToBatchAIErrorResponseArrayOutput() BatchAIErrorResponseArrayOutput
	ToBatchAIErrorResponseArrayOutputWithContext(context.Context) BatchAIErrorResponseArrayOutput
}

type BatchAIErrorResponseArray []BatchAIErrorResponseInput

func (BatchAIErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BatchAIErrorResponse)(nil)).Elem()
}

func (i BatchAIErrorResponseArray) ToBatchAIErrorResponseArrayOutput() BatchAIErrorResponseArrayOutput {
	return i.ToBatchAIErrorResponseArrayOutputWithContext(context.Background())
}

func (i BatchAIErrorResponseArray) ToBatchAIErrorResponseArrayOutputWithContext(ctx context.Context) BatchAIErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAIErrorResponseArrayOutput)
}

// An error response from the Batch AI service.
type BatchAIErrorResponseOutput struct{ *pulumi.OutputState }

func (BatchAIErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchAIErrorResponse)(nil)).Elem()
}

func (o BatchAIErrorResponseOutput) ToBatchAIErrorResponseOutput() BatchAIErrorResponseOutput {
	return o
}

func (o BatchAIErrorResponseOutput) ToBatchAIErrorResponseOutputWithContext(ctx context.Context) BatchAIErrorResponseOutput {
	return o
}

// An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
func (o BatchAIErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v BatchAIErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A list of additional details about the error.
func (o BatchAIErrorResponseOutput) Details() NameValuePairResponseArrayOutput {
	return o.ApplyT(func(v BatchAIErrorResponse) []NameValuePairResponse { return v.Details }).(NameValuePairResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o BatchAIErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v BatchAIErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

type BatchAIErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (BatchAIErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BatchAIErrorResponse)(nil)).Elem()
}

func (o BatchAIErrorResponseArrayOutput) ToBatchAIErrorResponseArrayOutput() BatchAIErrorResponseArrayOutput {
	return o
}

func (o BatchAIErrorResponseArrayOutput) ToBatchAIErrorResponseArrayOutputWithContext(ctx context.Context) BatchAIErrorResponseArrayOutput {
	return o
}

func (o BatchAIErrorResponseArrayOutput) Index(i pulumi.IntInput) BatchAIErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BatchAIErrorResponse {
		return vs[0].([]BatchAIErrorResponse)[vs[1].(int)]
	}).(BatchAIErrorResponseOutput)
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettings struct {
	// Command line arguments that need to be passed to the python script or cntk executable.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
	ConfigFilePath *string `pulumi:"configFilePath"`
	// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
	LanguageType *string `pulumi:"languageType"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property can be specified only if the languageType is 'Python'.
	PythonScriptFilePath *string `pulumi:"pythonScriptFilePath"`
}

// CNTKsettingsInput is an input type that accepts CNTKsettingsArgs and CNTKsettingsOutput values.
// You can construct a concrete instance of `CNTKsettingsInput` via:
//
//          CNTKsettingsArgs{...}
type CNTKsettingsInput interface {
	pulumi.Input

	ToCNTKsettingsOutput() CNTKsettingsOutput
	ToCNTKsettingsOutputWithContext(context.Context) CNTKsettingsOutput
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettingsArgs struct {
	// Command line arguments that need to be passed to the python script or cntk executable.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
	ConfigFilePath pulumi.StringPtrInput `pulumi:"configFilePath"`
	// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
	LanguageType pulumi.StringPtrInput `pulumi:"languageType"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property can be specified only if the languageType is 'Python'.
	PythonScriptFilePath pulumi.StringPtrInput `pulumi:"pythonScriptFilePath"`
}

func (CNTKsettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CNTKsettings)(nil)).Elem()
}

func (i CNTKsettingsArgs) ToCNTKsettingsOutput() CNTKsettingsOutput {
	return i.ToCNTKsettingsOutputWithContext(context.Background())
}

func (i CNTKsettingsArgs) ToCNTKsettingsOutputWithContext(ctx context.Context) CNTKsettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNTKsettingsOutput)
}

func (i CNTKsettingsArgs) ToCNTKsettingsPtrOutput() CNTKsettingsPtrOutput {
	return i.ToCNTKsettingsPtrOutputWithContext(context.Background())
}

func (i CNTKsettingsArgs) ToCNTKsettingsPtrOutputWithContext(ctx context.Context) CNTKsettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNTKsettingsOutput).ToCNTKsettingsPtrOutputWithContext(ctx)
}

// CNTKsettingsPtrInput is an input type that accepts CNTKsettingsArgs, CNTKsettingsPtr and CNTKsettingsPtrOutput values.
// You can construct a concrete instance of `CNTKsettingsPtrInput` via:
//
//          CNTKsettingsArgs{...}
//
//  or:
//
//          nil
type CNTKsettingsPtrInput interface {
	pulumi.Input

	ToCNTKsettingsPtrOutput() CNTKsettingsPtrOutput
	ToCNTKsettingsPtrOutputWithContext(context.Context) CNTKsettingsPtrOutput
}

type cntksettingsPtrType CNTKsettingsArgs

func CNTKsettingsPtr(v *CNTKsettingsArgs) CNTKsettingsPtrInput {
	return (*cntksettingsPtrType)(v)
}

func (*cntksettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CNTKsettings)(nil)).Elem()
}

func (i *cntksettingsPtrType) ToCNTKsettingsPtrOutput() CNTKsettingsPtrOutput {
	return i.ToCNTKsettingsPtrOutputWithContext(context.Background())
}

func (i *cntksettingsPtrType) ToCNTKsettingsPtrOutputWithContext(ctx context.Context) CNTKsettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNTKsettingsPtrOutput)
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettingsOutput struct{ *pulumi.OutputState }

func (CNTKsettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CNTKsettings)(nil)).Elem()
}

func (o CNTKsettingsOutput) ToCNTKsettingsOutput() CNTKsettingsOutput {
	return o
}

func (o CNTKsettingsOutput) ToCNTKsettingsOutputWithContext(ctx context.Context) CNTKsettingsOutput {
	return o
}

func (o CNTKsettingsOutput) ToCNTKsettingsPtrOutput() CNTKsettingsPtrOutput {
	return o.ToCNTKsettingsPtrOutputWithContext(context.Background())
}

func (o CNTKsettingsOutput) ToCNTKsettingsPtrOutputWithContext(ctx context.Context) CNTKsettingsPtrOutput {
	return o.ApplyT(func(v CNTKsettings) *CNTKsettings {
		return &v
	}).(CNTKsettingsPtrOutput)
}

// Command line arguments that need to be passed to the python script or cntk executable.
func (o CNTKsettingsOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettings) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
func (o CNTKsettingsOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettings) *string { return v.ConfigFilePath }).(pulumi.StringPtrOutput)
}

// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
func (o CNTKsettingsOutput) LanguageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettings) *string { return v.LanguageType }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CNTKsettingsOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CNTKsettings) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettings) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// Python script to execute. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettings) *string { return v.PythonScriptFilePath }).(pulumi.StringPtrOutput)
}

type CNTKsettingsPtrOutput struct{ *pulumi.OutputState }

func (CNTKsettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CNTKsettings)(nil)).Elem()
}

func (o CNTKsettingsPtrOutput) ToCNTKsettingsPtrOutput() CNTKsettingsPtrOutput {
	return o
}

func (o CNTKsettingsPtrOutput) ToCNTKsettingsPtrOutputWithContext(ctx context.Context) CNTKsettingsPtrOutput {
	return o
}

func (o CNTKsettingsPtrOutput) Elem() CNTKsettingsOutput {
	return o.ApplyT(func(v *CNTKsettings) CNTKsettings { return *v }).(CNTKsettingsOutput)
}

// Command line arguments that need to be passed to the python script or cntk executable.
func (o CNTKsettingsPtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettings) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
func (o CNTKsettingsPtrOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettings) *string {
		if v == nil {
			return nil
		}
		return v.ConfigFilePath
	}).(pulumi.StringPtrOutput)
}

// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
func (o CNTKsettingsPtrOutput) LanguageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettings) *string {
		if v == nil {
			return nil
		}
		return v.LanguageType
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CNTKsettingsPtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CNTKsettings) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsPtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettings) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// Python script to execute. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsPtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettings) *string {
		if v == nil {
			return nil
		}
		return v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettingsInvokeResponse struct {
	// Command line arguments that need to be passed to the python script or cntk executable.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
	ConfigFilePath *string `pulumi:"configFilePath"`
	// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
	LanguageType *string `pulumi:"languageType"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property can be specified only if the languageType is 'Python'.
	PythonScriptFilePath *string `pulumi:"pythonScriptFilePath"`
}

// CNTKsettingsInvokeResponseInput is an input type that accepts CNTKsettingsInvokeResponseArgs and CNTKsettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CNTKsettingsInvokeResponseInput` via:
//
//          CNTKsettingsInvokeResponseArgs{...}
type CNTKsettingsInvokeResponseInput interface {
	pulumi.Input

	ToCNTKsettingsInvokeResponseOutput() CNTKsettingsInvokeResponseOutput
	ToCNTKsettingsInvokeResponseOutputWithContext(context.Context) CNTKsettingsInvokeResponseOutput
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettingsInvokeResponseArgs struct {
	// Command line arguments that need to be passed to the python script or cntk executable.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
	ConfigFilePath pulumi.StringPtrInput `pulumi:"configFilePath"`
	// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
	LanguageType pulumi.StringPtrInput `pulumi:"languageType"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property can be specified only if the languageType is 'Python'.
	PythonScriptFilePath pulumi.StringPtrInput `pulumi:"pythonScriptFilePath"`
}

func (CNTKsettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CNTKsettingsInvokeResponse)(nil)).Elem()
}

func (i CNTKsettingsInvokeResponseArgs) ToCNTKsettingsInvokeResponseOutput() CNTKsettingsInvokeResponseOutput {
	return i.ToCNTKsettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CNTKsettingsInvokeResponseArgs) ToCNTKsettingsInvokeResponseOutputWithContext(ctx context.Context) CNTKsettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNTKsettingsInvokeResponseOutput)
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CNTKsettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CNTKsettingsInvokeResponse)(nil)).Elem()
}

func (o CNTKsettingsInvokeResponseOutput) ToCNTKsettingsInvokeResponseOutput() CNTKsettingsInvokeResponseOutput {
	return o
}

func (o CNTKsettingsInvokeResponseOutput) ToCNTKsettingsInvokeResponseOutputWithContext(ctx context.Context) CNTKsettingsInvokeResponseOutput {
	return o
}

// Command line arguments that need to be passed to the python script or cntk executable.
func (o CNTKsettingsInvokeResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsInvokeResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
func (o CNTKsettingsInvokeResponseOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsInvokeResponse) *string { return v.ConfigFilePath }).(pulumi.StringPtrOutput)
}

// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
func (o CNTKsettingsInvokeResponseOutput) LanguageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsInvokeResponse) *string { return v.LanguageType }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CNTKsettingsInvokeResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CNTKsettingsInvokeResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsInvokeResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsInvokeResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// Python script to execute. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsInvokeResponseOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsInvokeResponse) *string { return v.PythonScriptFilePath }).(pulumi.StringPtrOutput)
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettingsResponse struct {
	// Command line arguments that need to be passed to the python script or cntk executable.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
	ConfigFilePath *string `pulumi:"configFilePath"`
	// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
	LanguageType *string `pulumi:"languageType"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property can be specified only if the languageType is 'Python'.
	PythonScriptFilePath *string `pulumi:"pythonScriptFilePath"`
}

// CNTKsettingsResponseInput is an input type that accepts CNTKsettingsResponseArgs and CNTKsettingsResponseOutput values.
// You can construct a concrete instance of `CNTKsettingsResponseInput` via:
//
//          CNTKsettingsResponseArgs{...}
type CNTKsettingsResponseInput interface {
	pulumi.Input

	ToCNTKsettingsResponseOutput() CNTKsettingsResponseOutput
	ToCNTKsettingsResponseOutputWithContext(context.Context) CNTKsettingsResponseOutput
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettingsResponseArgs struct {
	// Command line arguments that need to be passed to the python script or cntk executable.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
	ConfigFilePath pulumi.StringPtrInput `pulumi:"configFilePath"`
	// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
	LanguageType pulumi.StringPtrInput `pulumi:"languageType"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property can be specified only if the languageType is 'Python'.
	PythonScriptFilePath pulumi.StringPtrInput `pulumi:"pythonScriptFilePath"`
}

func (CNTKsettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CNTKsettingsResponse)(nil)).Elem()
}

func (i CNTKsettingsResponseArgs) ToCNTKsettingsResponseOutput() CNTKsettingsResponseOutput {
	return i.ToCNTKsettingsResponseOutputWithContext(context.Background())
}

func (i CNTKsettingsResponseArgs) ToCNTKsettingsResponseOutputWithContext(ctx context.Context) CNTKsettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNTKsettingsResponseOutput)
}

func (i CNTKsettingsResponseArgs) ToCNTKsettingsResponsePtrOutput() CNTKsettingsResponsePtrOutput {
	return i.ToCNTKsettingsResponsePtrOutputWithContext(context.Background())
}

func (i CNTKsettingsResponseArgs) ToCNTKsettingsResponsePtrOutputWithContext(ctx context.Context) CNTKsettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNTKsettingsResponseOutput).ToCNTKsettingsResponsePtrOutputWithContext(ctx)
}

// CNTKsettingsResponsePtrInput is an input type that accepts CNTKsettingsResponseArgs, CNTKsettingsResponsePtr and CNTKsettingsResponsePtrOutput values.
// You can construct a concrete instance of `CNTKsettingsResponsePtrInput` via:
//
//          CNTKsettingsResponseArgs{...}
//
//  or:
//
//          nil
type CNTKsettingsResponsePtrInput interface {
	pulumi.Input

	ToCNTKsettingsResponsePtrOutput() CNTKsettingsResponsePtrOutput
	ToCNTKsettingsResponsePtrOutputWithContext(context.Context) CNTKsettingsResponsePtrOutput
}

type cntksettingsResponsePtrType CNTKsettingsResponseArgs

func CNTKsettingsResponsePtr(v *CNTKsettingsResponseArgs) CNTKsettingsResponsePtrInput {
	return (*cntksettingsResponsePtrType)(v)
}

func (*cntksettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CNTKsettingsResponse)(nil)).Elem()
}

func (i *cntksettingsResponsePtrType) ToCNTKsettingsResponsePtrOutput() CNTKsettingsResponsePtrOutput {
	return i.ToCNTKsettingsResponsePtrOutputWithContext(context.Background())
}

func (i *cntksettingsResponsePtrType) ToCNTKsettingsResponsePtrOutputWithContext(ctx context.Context) CNTKsettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNTKsettingsResponsePtrOutput)
}

// CNTK (aka Microsoft Cognitive Toolkit) job settings.
type CNTKsettingsResponseOutput struct{ *pulumi.OutputState }

func (CNTKsettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CNTKsettingsResponse)(nil)).Elem()
}

func (o CNTKsettingsResponseOutput) ToCNTKsettingsResponseOutput() CNTKsettingsResponseOutput {
	return o
}

func (o CNTKsettingsResponseOutput) ToCNTKsettingsResponseOutputWithContext(ctx context.Context) CNTKsettingsResponseOutput {
	return o
}

func (o CNTKsettingsResponseOutput) ToCNTKsettingsResponsePtrOutput() CNTKsettingsResponsePtrOutput {
	return o.ToCNTKsettingsResponsePtrOutputWithContext(context.Background())
}

func (o CNTKsettingsResponseOutput) ToCNTKsettingsResponsePtrOutputWithContext(ctx context.Context) CNTKsettingsResponsePtrOutput {
	return o.ApplyT(func(v CNTKsettingsResponse) *CNTKsettingsResponse {
		return &v
	}).(CNTKsettingsResponsePtrOutput)
}

// Command line arguments that need to be passed to the python script or cntk executable.
func (o CNTKsettingsResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
func (o CNTKsettingsResponseOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsResponse) *string { return v.ConfigFilePath }).(pulumi.StringPtrOutput)
}

// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
func (o CNTKsettingsResponseOutput) LanguageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsResponse) *string { return v.LanguageType }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CNTKsettingsResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CNTKsettingsResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// Python script to execute. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsResponseOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CNTKsettingsResponse) *string { return v.PythonScriptFilePath }).(pulumi.StringPtrOutput)
}

type CNTKsettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CNTKsettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CNTKsettingsResponse)(nil)).Elem()
}

func (o CNTKsettingsResponsePtrOutput) ToCNTKsettingsResponsePtrOutput() CNTKsettingsResponsePtrOutput {
	return o
}

func (o CNTKsettingsResponsePtrOutput) ToCNTKsettingsResponsePtrOutputWithContext(ctx context.Context) CNTKsettingsResponsePtrOutput {
	return o
}

func (o CNTKsettingsResponsePtrOutput) Elem() CNTKsettingsResponseOutput {
	return o.ApplyT(func(v *CNTKsettingsResponse) CNTKsettingsResponse { return *v }).(CNTKsettingsResponseOutput)
}

// Command line arguments that need to be passed to the python script or cntk executable.
func (o CNTKsettingsResponsePtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
func (o CNTKsettingsResponsePtrOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConfigFilePath
	}).(pulumi.StringPtrOutput)
}

// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
func (o CNTKsettingsResponsePtrOutput) LanguageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LanguageType
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CNTKsettingsResponsePtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CNTKsettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsResponsePtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// Python script to execute. This property can be specified only if the languageType is 'Python'.
func (o CNTKsettingsResponsePtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNTKsettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Caffe2 job settings.
type Caffe2Settings struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// Caffe2SettingsInput is an input type that accepts Caffe2SettingsArgs and Caffe2SettingsOutput values.
// You can construct a concrete instance of `Caffe2SettingsInput` via:
//
//          Caffe2SettingsArgs{...}
type Caffe2SettingsInput interface {
	pulumi.Input

	ToCaffe2SettingsOutput() Caffe2SettingsOutput
	ToCaffe2SettingsOutputWithContext(context.Context) Caffe2SettingsOutput
}

// Caffe2 job settings.
type Caffe2SettingsArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (Caffe2SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Caffe2Settings)(nil)).Elem()
}

func (i Caffe2SettingsArgs) ToCaffe2SettingsOutput() Caffe2SettingsOutput {
	return i.ToCaffe2SettingsOutputWithContext(context.Background())
}

func (i Caffe2SettingsArgs) ToCaffe2SettingsOutputWithContext(ctx context.Context) Caffe2SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Caffe2SettingsOutput)
}

func (i Caffe2SettingsArgs) ToCaffe2SettingsPtrOutput() Caffe2SettingsPtrOutput {
	return i.ToCaffe2SettingsPtrOutputWithContext(context.Background())
}

func (i Caffe2SettingsArgs) ToCaffe2SettingsPtrOutputWithContext(ctx context.Context) Caffe2SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Caffe2SettingsOutput).ToCaffe2SettingsPtrOutputWithContext(ctx)
}

// Caffe2SettingsPtrInput is an input type that accepts Caffe2SettingsArgs, Caffe2SettingsPtr and Caffe2SettingsPtrOutput values.
// You can construct a concrete instance of `Caffe2SettingsPtrInput` via:
//
//          Caffe2SettingsArgs{...}
//
//  or:
//
//          nil
type Caffe2SettingsPtrInput interface {
	pulumi.Input

	ToCaffe2SettingsPtrOutput() Caffe2SettingsPtrOutput
	ToCaffe2SettingsPtrOutputWithContext(context.Context) Caffe2SettingsPtrOutput
}

type caffe2SettingsPtrType Caffe2SettingsArgs

func Caffe2SettingsPtr(v *Caffe2SettingsArgs) Caffe2SettingsPtrInput {
	return (*caffe2SettingsPtrType)(v)
}

func (*caffe2SettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Caffe2Settings)(nil)).Elem()
}

func (i *caffe2SettingsPtrType) ToCaffe2SettingsPtrOutput() Caffe2SettingsPtrOutput {
	return i.ToCaffe2SettingsPtrOutputWithContext(context.Background())
}

func (i *caffe2SettingsPtrType) ToCaffe2SettingsPtrOutputWithContext(ctx context.Context) Caffe2SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Caffe2SettingsPtrOutput)
}

// Caffe2 job settings.
type Caffe2SettingsOutput struct{ *pulumi.OutputState }

func (Caffe2SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Caffe2Settings)(nil)).Elem()
}

func (o Caffe2SettingsOutput) ToCaffe2SettingsOutput() Caffe2SettingsOutput {
	return o
}

func (o Caffe2SettingsOutput) ToCaffe2SettingsOutputWithContext(ctx context.Context) Caffe2SettingsOutput {
	return o
}

func (o Caffe2SettingsOutput) ToCaffe2SettingsPtrOutput() Caffe2SettingsPtrOutput {
	return o.ToCaffe2SettingsPtrOutputWithContext(context.Background())
}

func (o Caffe2SettingsOutput) ToCaffe2SettingsPtrOutputWithContext(ctx context.Context) Caffe2SettingsPtrOutput {
	return o.ApplyT(func(v Caffe2Settings) *Caffe2Settings {
		return &v
	}).(Caffe2SettingsPtrOutput)
}

// Command line arguments that need to be passed to the python script.
func (o Caffe2SettingsOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Caffe2Settings) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// The path to the Python interpreter.
func (o Caffe2SettingsOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Caffe2Settings) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o Caffe2SettingsOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v Caffe2Settings) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

type Caffe2SettingsPtrOutput struct{ *pulumi.OutputState }

func (Caffe2SettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Caffe2Settings)(nil)).Elem()
}

func (o Caffe2SettingsPtrOutput) ToCaffe2SettingsPtrOutput() Caffe2SettingsPtrOutput {
	return o
}

func (o Caffe2SettingsPtrOutput) ToCaffe2SettingsPtrOutputWithContext(ctx context.Context) Caffe2SettingsPtrOutput {
	return o
}

func (o Caffe2SettingsPtrOutput) Elem() Caffe2SettingsOutput {
	return o.ApplyT(func(v *Caffe2Settings) Caffe2Settings { return *v }).(Caffe2SettingsOutput)
}

// Command line arguments that need to be passed to the python script.
func (o Caffe2SettingsPtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Caffe2Settings) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// The path to the Python interpreter.
func (o Caffe2SettingsPtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Caffe2Settings) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o Caffe2SettingsPtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Caffe2Settings) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Caffe2 job settings.
type Caffe2SettingsInvokeResponse struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// Caffe2SettingsInvokeResponseInput is an input type that accepts Caffe2SettingsInvokeResponseArgs and Caffe2SettingsInvokeResponseOutput values.
// You can construct a concrete instance of `Caffe2SettingsInvokeResponseInput` via:
//
//          Caffe2SettingsInvokeResponseArgs{...}
type Caffe2SettingsInvokeResponseInput interface {
	pulumi.Input

	ToCaffe2SettingsInvokeResponseOutput() Caffe2SettingsInvokeResponseOutput
	ToCaffe2SettingsInvokeResponseOutputWithContext(context.Context) Caffe2SettingsInvokeResponseOutput
}

// Caffe2 job settings.
type Caffe2SettingsInvokeResponseArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (Caffe2SettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Caffe2SettingsInvokeResponse)(nil)).Elem()
}

func (i Caffe2SettingsInvokeResponseArgs) ToCaffe2SettingsInvokeResponseOutput() Caffe2SettingsInvokeResponseOutput {
	return i.ToCaffe2SettingsInvokeResponseOutputWithContext(context.Background())
}

func (i Caffe2SettingsInvokeResponseArgs) ToCaffe2SettingsInvokeResponseOutputWithContext(ctx context.Context) Caffe2SettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Caffe2SettingsInvokeResponseOutput)
}

// Caffe2 job settings.
type Caffe2SettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (Caffe2SettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Caffe2SettingsInvokeResponse)(nil)).Elem()
}

func (o Caffe2SettingsInvokeResponseOutput) ToCaffe2SettingsInvokeResponseOutput() Caffe2SettingsInvokeResponseOutput {
	return o
}

func (o Caffe2SettingsInvokeResponseOutput) ToCaffe2SettingsInvokeResponseOutputWithContext(ctx context.Context) Caffe2SettingsInvokeResponseOutput {
	return o
}

// Command line arguments that need to be passed to the python script.
func (o Caffe2SettingsInvokeResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Caffe2SettingsInvokeResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// The path to the Python interpreter.
func (o Caffe2SettingsInvokeResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Caffe2SettingsInvokeResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o Caffe2SettingsInvokeResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v Caffe2SettingsInvokeResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

// Caffe2 job settings.
type Caffe2SettingsResponse struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// Caffe2SettingsResponseInput is an input type that accepts Caffe2SettingsResponseArgs and Caffe2SettingsResponseOutput values.
// You can construct a concrete instance of `Caffe2SettingsResponseInput` via:
//
//          Caffe2SettingsResponseArgs{...}
type Caffe2SettingsResponseInput interface {
	pulumi.Input

	ToCaffe2SettingsResponseOutput() Caffe2SettingsResponseOutput
	ToCaffe2SettingsResponseOutputWithContext(context.Context) Caffe2SettingsResponseOutput
}

// Caffe2 job settings.
type Caffe2SettingsResponseArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (Caffe2SettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Caffe2SettingsResponse)(nil)).Elem()
}

func (i Caffe2SettingsResponseArgs) ToCaffe2SettingsResponseOutput() Caffe2SettingsResponseOutput {
	return i.ToCaffe2SettingsResponseOutputWithContext(context.Background())
}

func (i Caffe2SettingsResponseArgs) ToCaffe2SettingsResponseOutputWithContext(ctx context.Context) Caffe2SettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Caffe2SettingsResponseOutput)
}

func (i Caffe2SettingsResponseArgs) ToCaffe2SettingsResponsePtrOutput() Caffe2SettingsResponsePtrOutput {
	return i.ToCaffe2SettingsResponsePtrOutputWithContext(context.Background())
}

func (i Caffe2SettingsResponseArgs) ToCaffe2SettingsResponsePtrOutputWithContext(ctx context.Context) Caffe2SettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Caffe2SettingsResponseOutput).ToCaffe2SettingsResponsePtrOutputWithContext(ctx)
}

// Caffe2SettingsResponsePtrInput is an input type that accepts Caffe2SettingsResponseArgs, Caffe2SettingsResponsePtr and Caffe2SettingsResponsePtrOutput values.
// You can construct a concrete instance of `Caffe2SettingsResponsePtrInput` via:
//
//          Caffe2SettingsResponseArgs{...}
//
//  or:
//
//          nil
type Caffe2SettingsResponsePtrInput interface {
	pulumi.Input

	ToCaffe2SettingsResponsePtrOutput() Caffe2SettingsResponsePtrOutput
	ToCaffe2SettingsResponsePtrOutputWithContext(context.Context) Caffe2SettingsResponsePtrOutput
}

type caffe2SettingsResponsePtrType Caffe2SettingsResponseArgs

func Caffe2SettingsResponsePtr(v *Caffe2SettingsResponseArgs) Caffe2SettingsResponsePtrInput {
	return (*caffe2SettingsResponsePtrType)(v)
}

func (*caffe2SettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Caffe2SettingsResponse)(nil)).Elem()
}

func (i *caffe2SettingsResponsePtrType) ToCaffe2SettingsResponsePtrOutput() Caffe2SettingsResponsePtrOutput {
	return i.ToCaffe2SettingsResponsePtrOutputWithContext(context.Background())
}

func (i *caffe2SettingsResponsePtrType) ToCaffe2SettingsResponsePtrOutputWithContext(ctx context.Context) Caffe2SettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Caffe2SettingsResponsePtrOutput)
}

// Caffe2 job settings.
type Caffe2SettingsResponseOutput struct{ *pulumi.OutputState }

func (Caffe2SettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Caffe2SettingsResponse)(nil)).Elem()
}

func (o Caffe2SettingsResponseOutput) ToCaffe2SettingsResponseOutput() Caffe2SettingsResponseOutput {
	return o
}

func (o Caffe2SettingsResponseOutput) ToCaffe2SettingsResponseOutputWithContext(ctx context.Context) Caffe2SettingsResponseOutput {
	return o
}

func (o Caffe2SettingsResponseOutput) ToCaffe2SettingsResponsePtrOutput() Caffe2SettingsResponsePtrOutput {
	return o.ToCaffe2SettingsResponsePtrOutputWithContext(context.Background())
}

func (o Caffe2SettingsResponseOutput) ToCaffe2SettingsResponsePtrOutputWithContext(ctx context.Context) Caffe2SettingsResponsePtrOutput {
	return o.ApplyT(func(v Caffe2SettingsResponse) *Caffe2SettingsResponse {
		return &v
	}).(Caffe2SettingsResponsePtrOutput)
}

// Command line arguments that need to be passed to the python script.
func (o Caffe2SettingsResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Caffe2SettingsResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// The path to the Python interpreter.
func (o Caffe2SettingsResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Caffe2SettingsResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o Caffe2SettingsResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v Caffe2SettingsResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

type Caffe2SettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (Caffe2SettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Caffe2SettingsResponse)(nil)).Elem()
}

func (o Caffe2SettingsResponsePtrOutput) ToCaffe2SettingsResponsePtrOutput() Caffe2SettingsResponsePtrOutput {
	return o
}

func (o Caffe2SettingsResponsePtrOutput) ToCaffe2SettingsResponsePtrOutputWithContext(ctx context.Context) Caffe2SettingsResponsePtrOutput {
	return o
}

func (o Caffe2SettingsResponsePtrOutput) Elem() Caffe2SettingsResponseOutput {
	return o.ApplyT(func(v *Caffe2SettingsResponse) Caffe2SettingsResponse { return *v }).(Caffe2SettingsResponseOutput)
}

// Command line arguments that need to be passed to the python script.
func (o Caffe2SettingsResponsePtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Caffe2SettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// The path to the Python interpreter.
func (o Caffe2SettingsResponsePtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Caffe2SettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o Caffe2SettingsResponsePtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Caffe2SettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Caffe job settings.
type CaffeSettings struct {
	// Command line arguments that need to be passed to the Caffe job.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
	ConfigFilePath *string `pulumi:"configFilePath"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property cannot be specified if configFilePath is specified.
	PythonScriptFilePath *string `pulumi:"pythonScriptFilePath"`
}

// CaffeSettingsInput is an input type that accepts CaffeSettingsArgs and CaffeSettingsOutput values.
// You can construct a concrete instance of `CaffeSettingsInput` via:
//
//          CaffeSettingsArgs{...}
type CaffeSettingsInput interface {
	pulumi.Input

	ToCaffeSettingsOutput() CaffeSettingsOutput
	ToCaffeSettingsOutputWithContext(context.Context) CaffeSettingsOutput
}

// Caffe job settings.
type CaffeSettingsArgs struct {
	// Command line arguments that need to be passed to the Caffe job.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
	ConfigFilePath pulumi.StringPtrInput `pulumi:"configFilePath"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property cannot be specified if configFilePath is specified.
	PythonScriptFilePath pulumi.StringPtrInput `pulumi:"pythonScriptFilePath"`
}

func (CaffeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaffeSettings)(nil)).Elem()
}

func (i CaffeSettingsArgs) ToCaffeSettingsOutput() CaffeSettingsOutput {
	return i.ToCaffeSettingsOutputWithContext(context.Background())
}

func (i CaffeSettingsArgs) ToCaffeSettingsOutputWithContext(ctx context.Context) CaffeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaffeSettingsOutput)
}

func (i CaffeSettingsArgs) ToCaffeSettingsPtrOutput() CaffeSettingsPtrOutput {
	return i.ToCaffeSettingsPtrOutputWithContext(context.Background())
}

func (i CaffeSettingsArgs) ToCaffeSettingsPtrOutputWithContext(ctx context.Context) CaffeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaffeSettingsOutput).ToCaffeSettingsPtrOutputWithContext(ctx)
}

// CaffeSettingsPtrInput is an input type that accepts CaffeSettingsArgs, CaffeSettingsPtr and CaffeSettingsPtrOutput values.
// You can construct a concrete instance of `CaffeSettingsPtrInput` via:
//
//          CaffeSettingsArgs{...}
//
//  or:
//
//          nil
type CaffeSettingsPtrInput interface {
	pulumi.Input

	ToCaffeSettingsPtrOutput() CaffeSettingsPtrOutput
	ToCaffeSettingsPtrOutputWithContext(context.Context) CaffeSettingsPtrOutput
}

type caffeSettingsPtrType CaffeSettingsArgs

func CaffeSettingsPtr(v *CaffeSettingsArgs) CaffeSettingsPtrInput {
	return (*caffeSettingsPtrType)(v)
}

func (*caffeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CaffeSettings)(nil)).Elem()
}

func (i *caffeSettingsPtrType) ToCaffeSettingsPtrOutput() CaffeSettingsPtrOutput {
	return i.ToCaffeSettingsPtrOutputWithContext(context.Background())
}

func (i *caffeSettingsPtrType) ToCaffeSettingsPtrOutputWithContext(ctx context.Context) CaffeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaffeSettingsPtrOutput)
}

// Caffe job settings.
type CaffeSettingsOutput struct{ *pulumi.OutputState }

func (CaffeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaffeSettings)(nil)).Elem()
}

func (o CaffeSettingsOutput) ToCaffeSettingsOutput() CaffeSettingsOutput {
	return o
}

func (o CaffeSettingsOutput) ToCaffeSettingsOutputWithContext(ctx context.Context) CaffeSettingsOutput {
	return o
}

func (o CaffeSettingsOutput) ToCaffeSettingsPtrOutput() CaffeSettingsPtrOutput {
	return o.ToCaffeSettingsPtrOutputWithContext(context.Background())
}

func (o CaffeSettingsOutput) ToCaffeSettingsPtrOutputWithContext(ctx context.Context) CaffeSettingsPtrOutput {
	return o.ApplyT(func(v CaffeSettings) *CaffeSettings {
		return &v
	}).(CaffeSettingsPtrOutput)
}

// Command line arguments that need to be passed to the Caffe job.
func (o CaffeSettingsOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettings) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
func (o CaffeSettingsOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettings) *string { return v.ConfigFilePath }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CaffeSettingsOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaffeSettings) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
func (o CaffeSettingsOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettings) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// Python script to execute. This property cannot be specified if configFilePath is specified.
func (o CaffeSettingsOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettings) *string { return v.PythonScriptFilePath }).(pulumi.StringPtrOutput)
}

type CaffeSettingsPtrOutput struct{ *pulumi.OutputState }

func (CaffeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaffeSettings)(nil)).Elem()
}

func (o CaffeSettingsPtrOutput) ToCaffeSettingsPtrOutput() CaffeSettingsPtrOutput {
	return o
}

func (o CaffeSettingsPtrOutput) ToCaffeSettingsPtrOutputWithContext(ctx context.Context) CaffeSettingsPtrOutput {
	return o
}

func (o CaffeSettingsPtrOutput) Elem() CaffeSettingsOutput {
	return o.ApplyT(func(v *CaffeSettings) CaffeSettings { return *v }).(CaffeSettingsOutput)
}

// Command line arguments that need to be passed to the Caffe job.
func (o CaffeSettingsPtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaffeSettings) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
func (o CaffeSettingsPtrOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaffeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ConfigFilePath
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CaffeSettingsPtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CaffeSettings) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
func (o CaffeSettingsPtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaffeSettings) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// Python script to execute. This property cannot be specified if configFilePath is specified.
func (o CaffeSettingsPtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaffeSettings) *string {
		if v == nil {
			return nil
		}
		return v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Caffe job settings.
type CaffeSettingsInvokeResponse struct {
	// Command line arguments that need to be passed to the Caffe job.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
	ConfigFilePath *string `pulumi:"configFilePath"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property cannot be specified if configFilePath is specified.
	PythonScriptFilePath *string `pulumi:"pythonScriptFilePath"`
}

// CaffeSettingsInvokeResponseInput is an input type that accepts CaffeSettingsInvokeResponseArgs and CaffeSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CaffeSettingsInvokeResponseInput` via:
//
//          CaffeSettingsInvokeResponseArgs{...}
type CaffeSettingsInvokeResponseInput interface {
	pulumi.Input

	ToCaffeSettingsInvokeResponseOutput() CaffeSettingsInvokeResponseOutput
	ToCaffeSettingsInvokeResponseOutputWithContext(context.Context) CaffeSettingsInvokeResponseOutput
}

// Caffe job settings.
type CaffeSettingsInvokeResponseArgs struct {
	// Command line arguments that need to be passed to the Caffe job.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
	ConfigFilePath pulumi.StringPtrInput `pulumi:"configFilePath"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property cannot be specified if configFilePath is specified.
	PythonScriptFilePath pulumi.StringPtrInput `pulumi:"pythonScriptFilePath"`
}

func (CaffeSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaffeSettingsInvokeResponse)(nil)).Elem()
}

func (i CaffeSettingsInvokeResponseArgs) ToCaffeSettingsInvokeResponseOutput() CaffeSettingsInvokeResponseOutput {
	return i.ToCaffeSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CaffeSettingsInvokeResponseArgs) ToCaffeSettingsInvokeResponseOutputWithContext(ctx context.Context) CaffeSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaffeSettingsInvokeResponseOutput)
}

// Caffe job settings.
type CaffeSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CaffeSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaffeSettingsInvokeResponse)(nil)).Elem()
}

func (o CaffeSettingsInvokeResponseOutput) ToCaffeSettingsInvokeResponseOutput() CaffeSettingsInvokeResponseOutput {
	return o
}

func (o CaffeSettingsInvokeResponseOutput) ToCaffeSettingsInvokeResponseOutputWithContext(ctx context.Context) CaffeSettingsInvokeResponseOutput {
	return o
}

// Command line arguments that need to be passed to the Caffe job.
func (o CaffeSettingsInvokeResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettingsInvokeResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
func (o CaffeSettingsInvokeResponseOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettingsInvokeResponse) *string { return v.ConfigFilePath }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CaffeSettingsInvokeResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaffeSettingsInvokeResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
func (o CaffeSettingsInvokeResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettingsInvokeResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// Python script to execute. This property cannot be specified if configFilePath is specified.
func (o CaffeSettingsInvokeResponseOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettingsInvokeResponse) *string { return v.PythonScriptFilePath }).(pulumi.StringPtrOutput)
}

// Caffe job settings.
type CaffeSettingsResponse struct {
	// Command line arguments that need to be passed to the Caffe job.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
	ConfigFilePath *string `pulumi:"configFilePath"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property cannot be specified if configFilePath is specified.
	PythonScriptFilePath *string `pulumi:"pythonScriptFilePath"`
}

// CaffeSettingsResponseInput is an input type that accepts CaffeSettingsResponseArgs and CaffeSettingsResponseOutput values.
// You can construct a concrete instance of `CaffeSettingsResponseInput` via:
//
//          CaffeSettingsResponseArgs{...}
type CaffeSettingsResponseInput interface {
	pulumi.Input

	ToCaffeSettingsResponseOutput() CaffeSettingsResponseOutput
	ToCaffeSettingsResponseOutputWithContext(context.Context) CaffeSettingsResponseOutput
}

// Caffe job settings.
type CaffeSettingsResponseArgs struct {
	// Command line arguments that need to be passed to the Caffe job.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
	ConfigFilePath pulumi.StringPtrInput `pulumi:"configFilePath"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// Python script to execute. This property cannot be specified if configFilePath is specified.
	PythonScriptFilePath pulumi.StringPtrInput `pulumi:"pythonScriptFilePath"`
}

func (CaffeSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaffeSettingsResponse)(nil)).Elem()
}

func (i CaffeSettingsResponseArgs) ToCaffeSettingsResponseOutput() CaffeSettingsResponseOutput {
	return i.ToCaffeSettingsResponseOutputWithContext(context.Background())
}

func (i CaffeSettingsResponseArgs) ToCaffeSettingsResponseOutputWithContext(ctx context.Context) CaffeSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaffeSettingsResponseOutput)
}

func (i CaffeSettingsResponseArgs) ToCaffeSettingsResponsePtrOutput() CaffeSettingsResponsePtrOutput {
	return i.ToCaffeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i CaffeSettingsResponseArgs) ToCaffeSettingsResponsePtrOutputWithContext(ctx context.Context) CaffeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaffeSettingsResponseOutput).ToCaffeSettingsResponsePtrOutputWithContext(ctx)
}

// CaffeSettingsResponsePtrInput is an input type that accepts CaffeSettingsResponseArgs, CaffeSettingsResponsePtr and CaffeSettingsResponsePtrOutput values.
// You can construct a concrete instance of `CaffeSettingsResponsePtrInput` via:
//
//          CaffeSettingsResponseArgs{...}
//
//  or:
//
//          nil
type CaffeSettingsResponsePtrInput interface {
	pulumi.Input

	ToCaffeSettingsResponsePtrOutput() CaffeSettingsResponsePtrOutput
	ToCaffeSettingsResponsePtrOutputWithContext(context.Context) CaffeSettingsResponsePtrOutput
}

type caffeSettingsResponsePtrType CaffeSettingsResponseArgs

func CaffeSettingsResponsePtr(v *CaffeSettingsResponseArgs) CaffeSettingsResponsePtrInput {
	return (*caffeSettingsResponsePtrType)(v)
}

func (*caffeSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CaffeSettingsResponse)(nil)).Elem()
}

func (i *caffeSettingsResponsePtrType) ToCaffeSettingsResponsePtrOutput() CaffeSettingsResponsePtrOutput {
	return i.ToCaffeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *caffeSettingsResponsePtrType) ToCaffeSettingsResponsePtrOutputWithContext(ctx context.Context) CaffeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaffeSettingsResponsePtrOutput)
}

// Caffe job settings.
type CaffeSettingsResponseOutput struct{ *pulumi.OutputState }

func (CaffeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaffeSettingsResponse)(nil)).Elem()
}

func (o CaffeSettingsResponseOutput) ToCaffeSettingsResponseOutput() CaffeSettingsResponseOutput {
	return o
}

func (o CaffeSettingsResponseOutput) ToCaffeSettingsResponseOutputWithContext(ctx context.Context) CaffeSettingsResponseOutput {
	return o
}

func (o CaffeSettingsResponseOutput) ToCaffeSettingsResponsePtrOutput() CaffeSettingsResponsePtrOutput {
	return o.ToCaffeSettingsResponsePtrOutputWithContext(context.Background())
}

func (o CaffeSettingsResponseOutput) ToCaffeSettingsResponsePtrOutputWithContext(ctx context.Context) CaffeSettingsResponsePtrOutput {
	return o.ApplyT(func(v CaffeSettingsResponse) *CaffeSettingsResponse {
		return &v
	}).(CaffeSettingsResponsePtrOutput)
}

// Command line arguments that need to be passed to the Caffe job.
func (o CaffeSettingsResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettingsResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
func (o CaffeSettingsResponseOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettingsResponse) *string { return v.ConfigFilePath }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CaffeSettingsResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaffeSettingsResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
func (o CaffeSettingsResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettingsResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// Python script to execute. This property cannot be specified if configFilePath is specified.
func (o CaffeSettingsResponseOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaffeSettingsResponse) *string { return v.PythonScriptFilePath }).(pulumi.StringPtrOutput)
}

type CaffeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CaffeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaffeSettingsResponse)(nil)).Elem()
}

func (o CaffeSettingsResponsePtrOutput) ToCaffeSettingsResponsePtrOutput() CaffeSettingsResponsePtrOutput {
	return o
}

func (o CaffeSettingsResponsePtrOutput) ToCaffeSettingsResponsePtrOutputWithContext(ctx context.Context) CaffeSettingsResponsePtrOutput {
	return o
}

func (o CaffeSettingsResponsePtrOutput) Elem() CaffeSettingsResponseOutput {
	return o.ApplyT(func(v *CaffeSettingsResponse) CaffeSettingsResponse { return *v }).(CaffeSettingsResponseOutput)
}

// Command line arguments that need to be passed to the Caffe job.
func (o CaffeSettingsResponsePtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaffeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
func (o CaffeSettingsResponsePtrOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaffeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConfigFilePath
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CaffeSettingsResponsePtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CaffeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
func (o CaffeSettingsResponsePtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaffeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// Python script to execute. This property cannot be specified if configFilePath is specified.
func (o CaffeSettingsResponsePtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaffeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Chainer job settings.
type ChainerSettings struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// ChainerSettingsInput is an input type that accepts ChainerSettingsArgs and ChainerSettingsOutput values.
// You can construct a concrete instance of `ChainerSettingsInput` via:
//
//          ChainerSettingsArgs{...}
type ChainerSettingsInput interface {
	pulumi.Input

	ToChainerSettingsOutput() ChainerSettingsOutput
	ToChainerSettingsOutputWithContext(context.Context) ChainerSettingsOutput
}

// Chainer job settings.
type ChainerSettingsArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (ChainerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainerSettings)(nil)).Elem()
}

func (i ChainerSettingsArgs) ToChainerSettingsOutput() ChainerSettingsOutput {
	return i.ToChainerSettingsOutputWithContext(context.Background())
}

func (i ChainerSettingsArgs) ToChainerSettingsOutputWithContext(ctx context.Context) ChainerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainerSettingsOutput)
}

func (i ChainerSettingsArgs) ToChainerSettingsPtrOutput() ChainerSettingsPtrOutput {
	return i.ToChainerSettingsPtrOutputWithContext(context.Background())
}

func (i ChainerSettingsArgs) ToChainerSettingsPtrOutputWithContext(ctx context.Context) ChainerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainerSettingsOutput).ToChainerSettingsPtrOutputWithContext(ctx)
}

// ChainerSettingsPtrInput is an input type that accepts ChainerSettingsArgs, ChainerSettingsPtr and ChainerSettingsPtrOutput values.
// You can construct a concrete instance of `ChainerSettingsPtrInput` via:
//
//          ChainerSettingsArgs{...}
//
//  or:
//
//          nil
type ChainerSettingsPtrInput interface {
	pulumi.Input

	ToChainerSettingsPtrOutput() ChainerSettingsPtrOutput
	ToChainerSettingsPtrOutputWithContext(context.Context) ChainerSettingsPtrOutput
}

type chainerSettingsPtrType ChainerSettingsArgs

func ChainerSettingsPtr(v *ChainerSettingsArgs) ChainerSettingsPtrInput {
	return (*chainerSettingsPtrType)(v)
}

func (*chainerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChainerSettings)(nil)).Elem()
}

func (i *chainerSettingsPtrType) ToChainerSettingsPtrOutput() ChainerSettingsPtrOutput {
	return i.ToChainerSettingsPtrOutputWithContext(context.Background())
}

func (i *chainerSettingsPtrType) ToChainerSettingsPtrOutputWithContext(ctx context.Context) ChainerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainerSettingsPtrOutput)
}

// Chainer job settings.
type ChainerSettingsOutput struct{ *pulumi.OutputState }

func (ChainerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainerSettings)(nil)).Elem()
}

func (o ChainerSettingsOutput) ToChainerSettingsOutput() ChainerSettingsOutput {
	return o
}

func (o ChainerSettingsOutput) ToChainerSettingsOutputWithContext(ctx context.Context) ChainerSettingsOutput {
	return o
}

func (o ChainerSettingsOutput) ToChainerSettingsPtrOutput() ChainerSettingsPtrOutput {
	return o.ToChainerSettingsPtrOutputWithContext(context.Background())
}

func (o ChainerSettingsOutput) ToChainerSettingsPtrOutputWithContext(ctx context.Context) ChainerSettingsPtrOutput {
	return o.ApplyT(func(v ChainerSettings) *ChainerSettings {
		return &v
	}).(ChainerSettingsPtrOutput)
}

// Command line arguments that need to be passed to the python script.
func (o ChainerSettingsOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainerSettings) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o ChainerSettingsOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChainerSettings) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o ChainerSettingsOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainerSettings) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o ChainerSettingsOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v ChainerSettings) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

type ChainerSettingsPtrOutput struct{ *pulumi.OutputState }

func (ChainerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChainerSettings)(nil)).Elem()
}

func (o ChainerSettingsPtrOutput) ToChainerSettingsPtrOutput() ChainerSettingsPtrOutput {
	return o
}

func (o ChainerSettingsPtrOutput) ToChainerSettingsPtrOutputWithContext(ctx context.Context) ChainerSettingsPtrOutput {
	return o
}

func (o ChainerSettingsPtrOutput) Elem() ChainerSettingsOutput {
	return o.ApplyT(func(v *ChainerSettings) ChainerSettings { return *v }).(ChainerSettingsOutput)
}

// Command line arguments that need to be passed to the python script.
func (o ChainerSettingsPtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChainerSettings) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o ChainerSettingsPtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChainerSettings) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o ChainerSettingsPtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChainerSettings) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o ChainerSettingsPtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChainerSettings) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Chainer job settings.
type ChainerSettingsInvokeResponse struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// ChainerSettingsInvokeResponseInput is an input type that accepts ChainerSettingsInvokeResponseArgs and ChainerSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `ChainerSettingsInvokeResponseInput` via:
//
//          ChainerSettingsInvokeResponseArgs{...}
type ChainerSettingsInvokeResponseInput interface {
	pulumi.Input

	ToChainerSettingsInvokeResponseOutput() ChainerSettingsInvokeResponseOutput
	ToChainerSettingsInvokeResponseOutputWithContext(context.Context) ChainerSettingsInvokeResponseOutput
}

// Chainer job settings.
type ChainerSettingsInvokeResponseArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (ChainerSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainerSettingsInvokeResponse)(nil)).Elem()
}

func (i ChainerSettingsInvokeResponseArgs) ToChainerSettingsInvokeResponseOutput() ChainerSettingsInvokeResponseOutput {
	return i.ToChainerSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i ChainerSettingsInvokeResponseArgs) ToChainerSettingsInvokeResponseOutputWithContext(ctx context.Context) ChainerSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainerSettingsInvokeResponseOutput)
}

// Chainer job settings.
type ChainerSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ChainerSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainerSettingsInvokeResponse)(nil)).Elem()
}

func (o ChainerSettingsInvokeResponseOutput) ToChainerSettingsInvokeResponseOutput() ChainerSettingsInvokeResponseOutput {
	return o
}

func (o ChainerSettingsInvokeResponseOutput) ToChainerSettingsInvokeResponseOutputWithContext(ctx context.Context) ChainerSettingsInvokeResponseOutput {
	return o
}

// Command line arguments that need to be passed to the python script.
func (o ChainerSettingsInvokeResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainerSettingsInvokeResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o ChainerSettingsInvokeResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChainerSettingsInvokeResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o ChainerSettingsInvokeResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainerSettingsInvokeResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o ChainerSettingsInvokeResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v ChainerSettingsInvokeResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

// Chainer job settings.
type ChainerSettingsResponse struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// ChainerSettingsResponseInput is an input type that accepts ChainerSettingsResponseArgs and ChainerSettingsResponseOutput values.
// You can construct a concrete instance of `ChainerSettingsResponseInput` via:
//
//          ChainerSettingsResponseArgs{...}
type ChainerSettingsResponseInput interface {
	pulumi.Input

	ToChainerSettingsResponseOutput() ChainerSettingsResponseOutput
	ToChainerSettingsResponseOutputWithContext(context.Context) ChainerSettingsResponseOutput
}

// Chainer job settings.
type ChainerSettingsResponseArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (ChainerSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainerSettingsResponse)(nil)).Elem()
}

func (i ChainerSettingsResponseArgs) ToChainerSettingsResponseOutput() ChainerSettingsResponseOutput {
	return i.ToChainerSettingsResponseOutputWithContext(context.Background())
}

func (i ChainerSettingsResponseArgs) ToChainerSettingsResponseOutputWithContext(ctx context.Context) ChainerSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainerSettingsResponseOutput)
}

func (i ChainerSettingsResponseArgs) ToChainerSettingsResponsePtrOutput() ChainerSettingsResponsePtrOutput {
	return i.ToChainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ChainerSettingsResponseArgs) ToChainerSettingsResponsePtrOutputWithContext(ctx context.Context) ChainerSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainerSettingsResponseOutput).ToChainerSettingsResponsePtrOutputWithContext(ctx)
}

// ChainerSettingsResponsePtrInput is an input type that accepts ChainerSettingsResponseArgs, ChainerSettingsResponsePtr and ChainerSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ChainerSettingsResponsePtrInput` via:
//
//          ChainerSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ChainerSettingsResponsePtrInput interface {
	pulumi.Input

	ToChainerSettingsResponsePtrOutput() ChainerSettingsResponsePtrOutput
	ToChainerSettingsResponsePtrOutputWithContext(context.Context) ChainerSettingsResponsePtrOutput
}

type chainerSettingsResponsePtrType ChainerSettingsResponseArgs

func ChainerSettingsResponsePtr(v *ChainerSettingsResponseArgs) ChainerSettingsResponsePtrInput {
	return (*chainerSettingsResponsePtrType)(v)
}

func (*chainerSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChainerSettingsResponse)(nil)).Elem()
}

func (i *chainerSettingsResponsePtrType) ToChainerSettingsResponsePtrOutput() ChainerSettingsResponsePtrOutput {
	return i.ToChainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *chainerSettingsResponsePtrType) ToChainerSettingsResponsePtrOutputWithContext(ctx context.Context) ChainerSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainerSettingsResponsePtrOutput)
}

// Chainer job settings.
type ChainerSettingsResponseOutput struct{ *pulumi.OutputState }

func (ChainerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainerSettingsResponse)(nil)).Elem()
}

func (o ChainerSettingsResponseOutput) ToChainerSettingsResponseOutput() ChainerSettingsResponseOutput {
	return o
}

func (o ChainerSettingsResponseOutput) ToChainerSettingsResponseOutputWithContext(ctx context.Context) ChainerSettingsResponseOutput {
	return o
}

func (o ChainerSettingsResponseOutput) ToChainerSettingsResponsePtrOutput() ChainerSettingsResponsePtrOutput {
	return o.ToChainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ChainerSettingsResponseOutput) ToChainerSettingsResponsePtrOutputWithContext(ctx context.Context) ChainerSettingsResponsePtrOutput {
	return o.ApplyT(func(v ChainerSettingsResponse) *ChainerSettingsResponse {
		return &v
	}).(ChainerSettingsResponsePtrOutput)
}

// Command line arguments that need to be passed to the python script.
func (o ChainerSettingsResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainerSettingsResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o ChainerSettingsResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChainerSettingsResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o ChainerSettingsResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainerSettingsResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o ChainerSettingsResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v ChainerSettingsResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

type ChainerSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ChainerSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChainerSettingsResponse)(nil)).Elem()
}

func (o ChainerSettingsResponsePtrOutput) ToChainerSettingsResponsePtrOutput() ChainerSettingsResponsePtrOutput {
	return o
}

func (o ChainerSettingsResponsePtrOutput) ToChainerSettingsResponsePtrOutputWithContext(ctx context.Context) ChainerSettingsResponsePtrOutput {
	return o
}

func (o ChainerSettingsResponsePtrOutput) Elem() ChainerSettingsResponseOutput {
	return o.ApplyT(func(v *ChainerSettingsResponse) ChainerSettingsResponse { return *v }).(ChainerSettingsResponseOutput)
}

// Command line arguments that need to be passed to the python script.
func (o ChainerSettingsResponsePtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChainerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o ChainerSettingsResponsePtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChainerSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o ChainerSettingsResponsePtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChainerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o ChainerSettingsResponsePtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChainerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Docker container settings.
type ContainerSettings struct {
	// Information about docker image and docker registry to download the container from.
	ImageSourceRegistry ImageSourceRegistry `pulumi:"imageSourceRegistry"`
	// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
	ShmSize *string `pulumi:"shmSize"`
}

// ContainerSettingsInput is an input type that accepts ContainerSettingsArgs and ContainerSettingsOutput values.
// You can construct a concrete instance of `ContainerSettingsInput` via:
//
//          ContainerSettingsArgs{...}
type ContainerSettingsInput interface {
	pulumi.Input

	ToContainerSettingsOutput() ContainerSettingsOutput
	ToContainerSettingsOutputWithContext(context.Context) ContainerSettingsOutput
}

// Docker container settings.
type ContainerSettingsArgs struct {
	// Information about docker image and docker registry to download the container from.
	ImageSourceRegistry ImageSourceRegistryInput `pulumi:"imageSourceRegistry"`
	// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
	ShmSize pulumi.StringPtrInput `pulumi:"shmSize"`
}

func (ContainerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerSettings)(nil)).Elem()
}

func (i ContainerSettingsArgs) ToContainerSettingsOutput() ContainerSettingsOutput {
	return i.ToContainerSettingsOutputWithContext(context.Background())
}

func (i ContainerSettingsArgs) ToContainerSettingsOutputWithContext(ctx context.Context) ContainerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerSettingsOutput)
}

func (i ContainerSettingsArgs) ToContainerSettingsPtrOutput() ContainerSettingsPtrOutput {
	return i.ToContainerSettingsPtrOutputWithContext(context.Background())
}

func (i ContainerSettingsArgs) ToContainerSettingsPtrOutputWithContext(ctx context.Context) ContainerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerSettingsOutput).ToContainerSettingsPtrOutputWithContext(ctx)
}

// ContainerSettingsPtrInput is an input type that accepts ContainerSettingsArgs, ContainerSettingsPtr and ContainerSettingsPtrOutput values.
// You can construct a concrete instance of `ContainerSettingsPtrInput` via:
//
//          ContainerSettingsArgs{...}
//
//  or:
//
//          nil
type ContainerSettingsPtrInput interface {
	pulumi.Input

	ToContainerSettingsPtrOutput() ContainerSettingsPtrOutput
	ToContainerSettingsPtrOutputWithContext(context.Context) ContainerSettingsPtrOutput
}

type containerSettingsPtrType ContainerSettingsArgs

func ContainerSettingsPtr(v *ContainerSettingsArgs) ContainerSettingsPtrInput {
	return (*containerSettingsPtrType)(v)
}

func (*containerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerSettings)(nil)).Elem()
}

func (i *containerSettingsPtrType) ToContainerSettingsPtrOutput() ContainerSettingsPtrOutput {
	return i.ToContainerSettingsPtrOutputWithContext(context.Background())
}

func (i *containerSettingsPtrType) ToContainerSettingsPtrOutputWithContext(ctx context.Context) ContainerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerSettingsPtrOutput)
}

// Docker container settings.
type ContainerSettingsOutput struct{ *pulumi.OutputState }

func (ContainerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerSettings)(nil)).Elem()
}

func (o ContainerSettingsOutput) ToContainerSettingsOutput() ContainerSettingsOutput {
	return o
}

func (o ContainerSettingsOutput) ToContainerSettingsOutputWithContext(ctx context.Context) ContainerSettingsOutput {
	return o
}

func (o ContainerSettingsOutput) ToContainerSettingsPtrOutput() ContainerSettingsPtrOutput {
	return o.ToContainerSettingsPtrOutputWithContext(context.Background())
}

func (o ContainerSettingsOutput) ToContainerSettingsPtrOutputWithContext(ctx context.Context) ContainerSettingsPtrOutput {
	return o.ApplyT(func(v ContainerSettings) *ContainerSettings {
		return &v
	}).(ContainerSettingsPtrOutput)
}

// Information about docker image and docker registry to download the container from.
func (o ContainerSettingsOutput) ImageSourceRegistry() ImageSourceRegistryOutput {
	return o.ApplyT(func(v ContainerSettings) ImageSourceRegistry { return v.ImageSourceRegistry }).(ImageSourceRegistryOutput)
}

// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
func (o ContainerSettingsOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerSettings) *string { return v.ShmSize }).(pulumi.StringPtrOutput)
}

type ContainerSettingsPtrOutput struct{ *pulumi.OutputState }

func (ContainerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerSettings)(nil)).Elem()
}

func (o ContainerSettingsPtrOutput) ToContainerSettingsPtrOutput() ContainerSettingsPtrOutput {
	return o
}

func (o ContainerSettingsPtrOutput) ToContainerSettingsPtrOutputWithContext(ctx context.Context) ContainerSettingsPtrOutput {
	return o
}

func (o ContainerSettingsPtrOutput) Elem() ContainerSettingsOutput {
	return o.ApplyT(func(v *ContainerSettings) ContainerSettings { return *v }).(ContainerSettingsOutput)
}

// Information about docker image and docker registry to download the container from.
func (o ContainerSettingsPtrOutput) ImageSourceRegistry() ImageSourceRegistryPtrOutput {
	return o.ApplyT(func(v *ContainerSettings) *ImageSourceRegistry {
		if v == nil {
			return nil
		}
		return &v.ImageSourceRegistry
	}).(ImageSourceRegistryPtrOutput)
}

// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
func (o ContainerSettingsPtrOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerSettings) *string {
		if v == nil {
			return nil
		}
		return v.ShmSize
	}).(pulumi.StringPtrOutput)
}

// Docker container settings.
type ContainerSettingsInvokeResponse struct {
	// Information about docker image and docker registry to download the container from.
	ImageSourceRegistry ImageSourceRegistryInvokeResponse `pulumi:"imageSourceRegistry"`
	// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
	ShmSize *string `pulumi:"shmSize"`
}

// ContainerSettingsInvokeResponseInput is an input type that accepts ContainerSettingsInvokeResponseArgs and ContainerSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerSettingsInvokeResponseInput` via:
//
//          ContainerSettingsInvokeResponseArgs{...}
type ContainerSettingsInvokeResponseInput interface {
	pulumi.Input

	ToContainerSettingsInvokeResponseOutput() ContainerSettingsInvokeResponseOutput
	ToContainerSettingsInvokeResponseOutputWithContext(context.Context) ContainerSettingsInvokeResponseOutput
}

// Docker container settings.
type ContainerSettingsInvokeResponseArgs struct {
	// Information about docker image and docker registry to download the container from.
	ImageSourceRegistry ImageSourceRegistryInvokeResponseInput `pulumi:"imageSourceRegistry"`
	// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
	ShmSize pulumi.StringPtrInput `pulumi:"shmSize"`
}

func (ContainerSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerSettingsInvokeResponse)(nil)).Elem()
}

func (i ContainerSettingsInvokeResponseArgs) ToContainerSettingsInvokeResponseOutput() ContainerSettingsInvokeResponseOutput {
	return i.ToContainerSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerSettingsInvokeResponseArgs) ToContainerSettingsInvokeResponseOutputWithContext(ctx context.Context) ContainerSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerSettingsInvokeResponseOutput)
}

// Docker container settings.
type ContainerSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerSettingsInvokeResponse)(nil)).Elem()
}

func (o ContainerSettingsInvokeResponseOutput) ToContainerSettingsInvokeResponseOutput() ContainerSettingsInvokeResponseOutput {
	return o
}

func (o ContainerSettingsInvokeResponseOutput) ToContainerSettingsInvokeResponseOutputWithContext(ctx context.Context) ContainerSettingsInvokeResponseOutput {
	return o
}

// Information about docker image and docker registry to download the container from.
func (o ContainerSettingsInvokeResponseOutput) ImageSourceRegistry() ImageSourceRegistryInvokeResponseOutput {
	return o.ApplyT(func(v ContainerSettingsInvokeResponse) ImageSourceRegistryInvokeResponse {
		return v.ImageSourceRegistry
	}).(ImageSourceRegistryInvokeResponseOutput)
}

// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
func (o ContainerSettingsInvokeResponseOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerSettingsInvokeResponse) *string { return v.ShmSize }).(pulumi.StringPtrOutput)
}

// Docker container settings.
type ContainerSettingsResponse struct {
	// Information about docker image and docker registry to download the container from.
	ImageSourceRegistry ImageSourceRegistryResponse `pulumi:"imageSourceRegistry"`
	// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
	ShmSize *string `pulumi:"shmSize"`
}

// ContainerSettingsResponseInput is an input type that accepts ContainerSettingsResponseArgs and ContainerSettingsResponseOutput values.
// You can construct a concrete instance of `ContainerSettingsResponseInput` via:
//
//          ContainerSettingsResponseArgs{...}
type ContainerSettingsResponseInput interface {
	pulumi.Input

	ToContainerSettingsResponseOutput() ContainerSettingsResponseOutput
	ToContainerSettingsResponseOutputWithContext(context.Context) ContainerSettingsResponseOutput
}

// Docker container settings.
type ContainerSettingsResponseArgs struct {
	// Information about docker image and docker registry to download the container from.
	ImageSourceRegistry ImageSourceRegistryResponseInput `pulumi:"imageSourceRegistry"`
	// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
	ShmSize pulumi.StringPtrInput `pulumi:"shmSize"`
}

func (ContainerSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerSettingsResponse)(nil)).Elem()
}

func (i ContainerSettingsResponseArgs) ToContainerSettingsResponseOutput() ContainerSettingsResponseOutput {
	return i.ToContainerSettingsResponseOutputWithContext(context.Background())
}

func (i ContainerSettingsResponseArgs) ToContainerSettingsResponseOutputWithContext(ctx context.Context) ContainerSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerSettingsResponseOutput)
}

func (i ContainerSettingsResponseArgs) ToContainerSettingsResponsePtrOutput() ContainerSettingsResponsePtrOutput {
	return i.ToContainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ContainerSettingsResponseArgs) ToContainerSettingsResponsePtrOutputWithContext(ctx context.Context) ContainerSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerSettingsResponseOutput).ToContainerSettingsResponsePtrOutputWithContext(ctx)
}

// ContainerSettingsResponsePtrInput is an input type that accepts ContainerSettingsResponseArgs, ContainerSettingsResponsePtr and ContainerSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ContainerSettingsResponsePtrInput` via:
//
//          ContainerSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ContainerSettingsResponsePtrInput interface {
	pulumi.Input

	ToContainerSettingsResponsePtrOutput() ContainerSettingsResponsePtrOutput
	ToContainerSettingsResponsePtrOutputWithContext(context.Context) ContainerSettingsResponsePtrOutput
}

type containerSettingsResponsePtrType ContainerSettingsResponseArgs

func ContainerSettingsResponsePtr(v *ContainerSettingsResponseArgs) ContainerSettingsResponsePtrInput {
	return (*containerSettingsResponsePtrType)(v)
}

func (*containerSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerSettingsResponse)(nil)).Elem()
}

func (i *containerSettingsResponsePtrType) ToContainerSettingsResponsePtrOutput() ContainerSettingsResponsePtrOutput {
	return i.ToContainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *containerSettingsResponsePtrType) ToContainerSettingsResponsePtrOutputWithContext(ctx context.Context) ContainerSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerSettingsResponsePtrOutput)
}

// Docker container settings.
type ContainerSettingsResponseOutput struct{ *pulumi.OutputState }

func (ContainerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerSettingsResponse)(nil)).Elem()
}

func (o ContainerSettingsResponseOutput) ToContainerSettingsResponseOutput() ContainerSettingsResponseOutput {
	return o
}

func (o ContainerSettingsResponseOutput) ToContainerSettingsResponseOutputWithContext(ctx context.Context) ContainerSettingsResponseOutput {
	return o
}

func (o ContainerSettingsResponseOutput) ToContainerSettingsResponsePtrOutput() ContainerSettingsResponsePtrOutput {
	return o.ToContainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ContainerSettingsResponseOutput) ToContainerSettingsResponsePtrOutputWithContext(ctx context.Context) ContainerSettingsResponsePtrOutput {
	return o.ApplyT(func(v ContainerSettingsResponse) *ContainerSettingsResponse {
		return &v
	}).(ContainerSettingsResponsePtrOutput)
}

// Information about docker image and docker registry to download the container from.
func (o ContainerSettingsResponseOutput) ImageSourceRegistry() ImageSourceRegistryResponseOutput {
	return o.ApplyT(func(v ContainerSettingsResponse) ImageSourceRegistryResponse { return v.ImageSourceRegistry }).(ImageSourceRegistryResponseOutput)
}

// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
func (o ContainerSettingsResponseOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerSettingsResponse) *string { return v.ShmSize }).(pulumi.StringPtrOutput)
}

type ContainerSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerSettingsResponse)(nil)).Elem()
}

func (o ContainerSettingsResponsePtrOutput) ToContainerSettingsResponsePtrOutput() ContainerSettingsResponsePtrOutput {
	return o
}

func (o ContainerSettingsResponsePtrOutput) ToContainerSettingsResponsePtrOutputWithContext(ctx context.Context) ContainerSettingsResponsePtrOutput {
	return o
}

func (o ContainerSettingsResponsePtrOutput) Elem() ContainerSettingsResponseOutput {
	return o.ApplyT(func(v *ContainerSettingsResponse) ContainerSettingsResponse { return *v }).(ContainerSettingsResponseOutput)
}

// Information about docker image and docker registry to download the container from.
func (o ContainerSettingsResponsePtrOutput) ImageSourceRegistry() ImageSourceRegistryResponsePtrOutput {
	return o.ApplyT(func(v *ContainerSettingsResponse) *ImageSourceRegistryResponse {
		if v == nil {
			return nil
		}
		return &v.ImageSourceRegistry
	}).(ImageSourceRegistryResponsePtrOutput)
}

// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
func (o ContainerSettingsResponsePtrOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShmSize
	}).(pulumi.StringPtrOutput)
}

// Custom MPI job settings.
type CustomMpiSettings struct {
	// The command line to be executed by mpi runtime on each compute node.
	CommandLine string `pulumi:"commandLine"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
}

// CustomMpiSettingsInput is an input type that accepts CustomMpiSettingsArgs and CustomMpiSettingsOutput values.
// You can construct a concrete instance of `CustomMpiSettingsInput` via:
//
//          CustomMpiSettingsArgs{...}
type CustomMpiSettingsInput interface {
	pulumi.Input

	ToCustomMpiSettingsOutput() CustomMpiSettingsOutput
	ToCustomMpiSettingsOutputWithContext(context.Context) CustomMpiSettingsOutput
}

// Custom MPI job settings.
type CustomMpiSettingsArgs struct {
	// The command line to be executed by mpi runtime on each compute node.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
}

func (CustomMpiSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMpiSettings)(nil)).Elem()
}

func (i CustomMpiSettingsArgs) ToCustomMpiSettingsOutput() CustomMpiSettingsOutput {
	return i.ToCustomMpiSettingsOutputWithContext(context.Background())
}

func (i CustomMpiSettingsArgs) ToCustomMpiSettingsOutputWithContext(ctx context.Context) CustomMpiSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMpiSettingsOutput)
}

func (i CustomMpiSettingsArgs) ToCustomMpiSettingsPtrOutput() CustomMpiSettingsPtrOutput {
	return i.ToCustomMpiSettingsPtrOutputWithContext(context.Background())
}

func (i CustomMpiSettingsArgs) ToCustomMpiSettingsPtrOutputWithContext(ctx context.Context) CustomMpiSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMpiSettingsOutput).ToCustomMpiSettingsPtrOutputWithContext(ctx)
}

// CustomMpiSettingsPtrInput is an input type that accepts CustomMpiSettingsArgs, CustomMpiSettingsPtr and CustomMpiSettingsPtrOutput values.
// You can construct a concrete instance of `CustomMpiSettingsPtrInput` via:
//
//          CustomMpiSettingsArgs{...}
//
//  or:
//
//          nil
type CustomMpiSettingsPtrInput interface {
	pulumi.Input

	ToCustomMpiSettingsPtrOutput() CustomMpiSettingsPtrOutput
	ToCustomMpiSettingsPtrOutputWithContext(context.Context) CustomMpiSettingsPtrOutput
}

type customMpiSettingsPtrType CustomMpiSettingsArgs

func CustomMpiSettingsPtr(v *CustomMpiSettingsArgs) CustomMpiSettingsPtrInput {
	return (*customMpiSettingsPtrType)(v)
}

func (*customMpiSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMpiSettings)(nil)).Elem()
}

func (i *customMpiSettingsPtrType) ToCustomMpiSettingsPtrOutput() CustomMpiSettingsPtrOutput {
	return i.ToCustomMpiSettingsPtrOutputWithContext(context.Background())
}

func (i *customMpiSettingsPtrType) ToCustomMpiSettingsPtrOutputWithContext(ctx context.Context) CustomMpiSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMpiSettingsPtrOutput)
}

// Custom MPI job settings.
type CustomMpiSettingsOutput struct{ *pulumi.OutputState }

func (CustomMpiSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMpiSettings)(nil)).Elem()
}

func (o CustomMpiSettingsOutput) ToCustomMpiSettingsOutput() CustomMpiSettingsOutput {
	return o
}

func (o CustomMpiSettingsOutput) ToCustomMpiSettingsOutputWithContext(ctx context.Context) CustomMpiSettingsOutput {
	return o
}

func (o CustomMpiSettingsOutput) ToCustomMpiSettingsPtrOutput() CustomMpiSettingsPtrOutput {
	return o.ToCustomMpiSettingsPtrOutputWithContext(context.Background())
}

func (o CustomMpiSettingsOutput) ToCustomMpiSettingsPtrOutputWithContext(ctx context.Context) CustomMpiSettingsPtrOutput {
	return o.ApplyT(func(v CustomMpiSettings) *CustomMpiSettings {
		return &v
	}).(CustomMpiSettingsPtrOutput)
}

// The command line to be executed by mpi runtime on each compute node.
func (o CustomMpiSettingsOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMpiSettings) string { return v.CommandLine }).(pulumi.StringOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CustomMpiSettingsOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CustomMpiSettings) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

type CustomMpiSettingsPtrOutput struct{ *pulumi.OutputState }

func (CustomMpiSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMpiSettings)(nil)).Elem()
}

func (o CustomMpiSettingsPtrOutput) ToCustomMpiSettingsPtrOutput() CustomMpiSettingsPtrOutput {
	return o
}

func (o CustomMpiSettingsPtrOutput) ToCustomMpiSettingsPtrOutputWithContext(ctx context.Context) CustomMpiSettingsPtrOutput {
	return o
}

func (o CustomMpiSettingsPtrOutput) Elem() CustomMpiSettingsOutput {
	return o.ApplyT(func(v *CustomMpiSettings) CustomMpiSettings { return *v }).(CustomMpiSettingsOutput)
}

// The command line to be executed by mpi runtime on each compute node.
func (o CustomMpiSettingsPtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomMpiSettings) *string {
		if v == nil {
			return nil
		}
		return &v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CustomMpiSettingsPtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomMpiSettings) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// Custom MPI job settings.
type CustomMpiSettingsInvokeResponse struct {
	// The command line to be executed by mpi runtime on each compute node.
	CommandLine string `pulumi:"commandLine"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
}

// CustomMpiSettingsInvokeResponseInput is an input type that accepts CustomMpiSettingsInvokeResponseArgs and CustomMpiSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CustomMpiSettingsInvokeResponseInput` via:
//
//          CustomMpiSettingsInvokeResponseArgs{...}
type CustomMpiSettingsInvokeResponseInput interface {
	pulumi.Input

	ToCustomMpiSettingsInvokeResponseOutput() CustomMpiSettingsInvokeResponseOutput
	ToCustomMpiSettingsInvokeResponseOutputWithContext(context.Context) CustomMpiSettingsInvokeResponseOutput
}

// Custom MPI job settings.
type CustomMpiSettingsInvokeResponseArgs struct {
	// The command line to be executed by mpi runtime on each compute node.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
}

func (CustomMpiSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMpiSettingsInvokeResponse)(nil)).Elem()
}

func (i CustomMpiSettingsInvokeResponseArgs) ToCustomMpiSettingsInvokeResponseOutput() CustomMpiSettingsInvokeResponseOutput {
	return i.ToCustomMpiSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CustomMpiSettingsInvokeResponseArgs) ToCustomMpiSettingsInvokeResponseOutputWithContext(ctx context.Context) CustomMpiSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMpiSettingsInvokeResponseOutput)
}

// Custom MPI job settings.
type CustomMpiSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CustomMpiSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMpiSettingsInvokeResponse)(nil)).Elem()
}

func (o CustomMpiSettingsInvokeResponseOutput) ToCustomMpiSettingsInvokeResponseOutput() CustomMpiSettingsInvokeResponseOutput {
	return o
}

func (o CustomMpiSettingsInvokeResponseOutput) ToCustomMpiSettingsInvokeResponseOutputWithContext(ctx context.Context) CustomMpiSettingsInvokeResponseOutput {
	return o
}

// The command line to be executed by mpi runtime on each compute node.
func (o CustomMpiSettingsInvokeResponseOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMpiSettingsInvokeResponse) string { return v.CommandLine }).(pulumi.StringOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CustomMpiSettingsInvokeResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CustomMpiSettingsInvokeResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// Custom MPI job settings.
type CustomMpiSettingsResponse struct {
	// The command line to be executed by mpi runtime on each compute node.
	CommandLine string `pulumi:"commandLine"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
}

// CustomMpiSettingsResponseInput is an input type that accepts CustomMpiSettingsResponseArgs and CustomMpiSettingsResponseOutput values.
// You can construct a concrete instance of `CustomMpiSettingsResponseInput` via:
//
//          CustomMpiSettingsResponseArgs{...}
type CustomMpiSettingsResponseInput interface {
	pulumi.Input

	ToCustomMpiSettingsResponseOutput() CustomMpiSettingsResponseOutput
	ToCustomMpiSettingsResponseOutputWithContext(context.Context) CustomMpiSettingsResponseOutput
}

// Custom MPI job settings.
type CustomMpiSettingsResponseArgs struct {
	// The command line to be executed by mpi runtime on each compute node.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
}

func (CustomMpiSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMpiSettingsResponse)(nil)).Elem()
}

func (i CustomMpiSettingsResponseArgs) ToCustomMpiSettingsResponseOutput() CustomMpiSettingsResponseOutput {
	return i.ToCustomMpiSettingsResponseOutputWithContext(context.Background())
}

func (i CustomMpiSettingsResponseArgs) ToCustomMpiSettingsResponseOutputWithContext(ctx context.Context) CustomMpiSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMpiSettingsResponseOutput)
}

func (i CustomMpiSettingsResponseArgs) ToCustomMpiSettingsResponsePtrOutput() CustomMpiSettingsResponsePtrOutput {
	return i.ToCustomMpiSettingsResponsePtrOutputWithContext(context.Background())
}

func (i CustomMpiSettingsResponseArgs) ToCustomMpiSettingsResponsePtrOutputWithContext(ctx context.Context) CustomMpiSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMpiSettingsResponseOutput).ToCustomMpiSettingsResponsePtrOutputWithContext(ctx)
}

// CustomMpiSettingsResponsePtrInput is an input type that accepts CustomMpiSettingsResponseArgs, CustomMpiSettingsResponsePtr and CustomMpiSettingsResponsePtrOutput values.
// You can construct a concrete instance of `CustomMpiSettingsResponsePtrInput` via:
//
//          CustomMpiSettingsResponseArgs{...}
//
//  or:
//
//          nil
type CustomMpiSettingsResponsePtrInput interface {
	pulumi.Input

	ToCustomMpiSettingsResponsePtrOutput() CustomMpiSettingsResponsePtrOutput
	ToCustomMpiSettingsResponsePtrOutputWithContext(context.Context) CustomMpiSettingsResponsePtrOutput
}

type customMpiSettingsResponsePtrType CustomMpiSettingsResponseArgs

func CustomMpiSettingsResponsePtr(v *CustomMpiSettingsResponseArgs) CustomMpiSettingsResponsePtrInput {
	return (*customMpiSettingsResponsePtrType)(v)
}

func (*customMpiSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMpiSettingsResponse)(nil)).Elem()
}

func (i *customMpiSettingsResponsePtrType) ToCustomMpiSettingsResponsePtrOutput() CustomMpiSettingsResponsePtrOutput {
	return i.ToCustomMpiSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *customMpiSettingsResponsePtrType) ToCustomMpiSettingsResponsePtrOutputWithContext(ctx context.Context) CustomMpiSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMpiSettingsResponsePtrOutput)
}

// Custom MPI job settings.
type CustomMpiSettingsResponseOutput struct{ *pulumi.OutputState }

func (CustomMpiSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMpiSettingsResponse)(nil)).Elem()
}

func (o CustomMpiSettingsResponseOutput) ToCustomMpiSettingsResponseOutput() CustomMpiSettingsResponseOutput {
	return o
}

func (o CustomMpiSettingsResponseOutput) ToCustomMpiSettingsResponseOutputWithContext(ctx context.Context) CustomMpiSettingsResponseOutput {
	return o
}

func (o CustomMpiSettingsResponseOutput) ToCustomMpiSettingsResponsePtrOutput() CustomMpiSettingsResponsePtrOutput {
	return o.ToCustomMpiSettingsResponsePtrOutputWithContext(context.Background())
}

func (o CustomMpiSettingsResponseOutput) ToCustomMpiSettingsResponsePtrOutputWithContext(ctx context.Context) CustomMpiSettingsResponsePtrOutput {
	return o.ApplyT(func(v CustomMpiSettingsResponse) *CustomMpiSettingsResponse {
		return &v
	}).(CustomMpiSettingsResponsePtrOutput)
}

// The command line to be executed by mpi runtime on each compute node.
func (o CustomMpiSettingsResponseOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMpiSettingsResponse) string { return v.CommandLine }).(pulumi.StringOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CustomMpiSettingsResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CustomMpiSettingsResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

type CustomMpiSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomMpiSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMpiSettingsResponse)(nil)).Elem()
}

func (o CustomMpiSettingsResponsePtrOutput) ToCustomMpiSettingsResponsePtrOutput() CustomMpiSettingsResponsePtrOutput {
	return o
}

func (o CustomMpiSettingsResponsePtrOutput) ToCustomMpiSettingsResponsePtrOutputWithContext(ctx context.Context) CustomMpiSettingsResponsePtrOutput {
	return o
}

func (o CustomMpiSettingsResponsePtrOutput) Elem() CustomMpiSettingsResponseOutput {
	return o.ApplyT(func(v *CustomMpiSettingsResponse) CustomMpiSettingsResponse { return *v }).(CustomMpiSettingsResponseOutput)
}

// The command line to be executed by mpi runtime on each compute node.
func (o CustomMpiSettingsResponsePtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomMpiSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o CustomMpiSettingsResponsePtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomMpiSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// Custom tool kit job settings.
type CustomToolkitSettings struct {
	// The command line to execute on the master node.
	CommandLine *string `pulumi:"commandLine"`
}

// CustomToolkitSettingsInput is an input type that accepts CustomToolkitSettingsArgs and CustomToolkitSettingsOutput values.
// You can construct a concrete instance of `CustomToolkitSettingsInput` via:
//
//          CustomToolkitSettingsArgs{...}
type CustomToolkitSettingsInput interface {
	pulumi.Input

	ToCustomToolkitSettingsOutput() CustomToolkitSettingsOutput
	ToCustomToolkitSettingsOutputWithContext(context.Context) CustomToolkitSettingsOutput
}

// Custom tool kit job settings.
type CustomToolkitSettingsArgs struct {
	// The command line to execute on the master node.
	CommandLine pulumi.StringPtrInput `pulumi:"commandLine"`
}

func (CustomToolkitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomToolkitSettings)(nil)).Elem()
}

func (i CustomToolkitSettingsArgs) ToCustomToolkitSettingsOutput() CustomToolkitSettingsOutput {
	return i.ToCustomToolkitSettingsOutputWithContext(context.Background())
}

func (i CustomToolkitSettingsArgs) ToCustomToolkitSettingsOutputWithContext(ctx context.Context) CustomToolkitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomToolkitSettingsOutput)
}

func (i CustomToolkitSettingsArgs) ToCustomToolkitSettingsPtrOutput() CustomToolkitSettingsPtrOutput {
	return i.ToCustomToolkitSettingsPtrOutputWithContext(context.Background())
}

func (i CustomToolkitSettingsArgs) ToCustomToolkitSettingsPtrOutputWithContext(ctx context.Context) CustomToolkitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomToolkitSettingsOutput).ToCustomToolkitSettingsPtrOutputWithContext(ctx)
}

// CustomToolkitSettingsPtrInput is an input type that accepts CustomToolkitSettingsArgs, CustomToolkitSettingsPtr and CustomToolkitSettingsPtrOutput values.
// You can construct a concrete instance of `CustomToolkitSettingsPtrInput` via:
//
//          CustomToolkitSettingsArgs{...}
//
//  or:
//
//          nil
type CustomToolkitSettingsPtrInput interface {
	pulumi.Input

	ToCustomToolkitSettingsPtrOutput() CustomToolkitSettingsPtrOutput
	ToCustomToolkitSettingsPtrOutputWithContext(context.Context) CustomToolkitSettingsPtrOutput
}

type customToolkitSettingsPtrType CustomToolkitSettingsArgs

func CustomToolkitSettingsPtr(v *CustomToolkitSettingsArgs) CustomToolkitSettingsPtrInput {
	return (*customToolkitSettingsPtrType)(v)
}

func (*customToolkitSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomToolkitSettings)(nil)).Elem()
}

func (i *customToolkitSettingsPtrType) ToCustomToolkitSettingsPtrOutput() CustomToolkitSettingsPtrOutput {
	return i.ToCustomToolkitSettingsPtrOutputWithContext(context.Background())
}

func (i *customToolkitSettingsPtrType) ToCustomToolkitSettingsPtrOutputWithContext(ctx context.Context) CustomToolkitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomToolkitSettingsPtrOutput)
}

// Custom tool kit job settings.
type CustomToolkitSettingsOutput struct{ *pulumi.OutputState }

func (CustomToolkitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomToolkitSettings)(nil)).Elem()
}

func (o CustomToolkitSettingsOutput) ToCustomToolkitSettingsOutput() CustomToolkitSettingsOutput {
	return o
}

func (o CustomToolkitSettingsOutput) ToCustomToolkitSettingsOutputWithContext(ctx context.Context) CustomToolkitSettingsOutput {
	return o
}

func (o CustomToolkitSettingsOutput) ToCustomToolkitSettingsPtrOutput() CustomToolkitSettingsPtrOutput {
	return o.ToCustomToolkitSettingsPtrOutputWithContext(context.Background())
}

func (o CustomToolkitSettingsOutput) ToCustomToolkitSettingsPtrOutputWithContext(ctx context.Context) CustomToolkitSettingsPtrOutput {
	return o.ApplyT(func(v CustomToolkitSettings) *CustomToolkitSettings {
		return &v
	}).(CustomToolkitSettingsPtrOutput)
}

// The command line to execute on the master node.
func (o CustomToolkitSettingsOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomToolkitSettings) *string { return v.CommandLine }).(pulumi.StringPtrOutput)
}

type CustomToolkitSettingsPtrOutput struct{ *pulumi.OutputState }

func (CustomToolkitSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomToolkitSettings)(nil)).Elem()
}

func (o CustomToolkitSettingsPtrOutput) ToCustomToolkitSettingsPtrOutput() CustomToolkitSettingsPtrOutput {
	return o
}

func (o CustomToolkitSettingsPtrOutput) ToCustomToolkitSettingsPtrOutputWithContext(ctx context.Context) CustomToolkitSettingsPtrOutput {
	return o
}

func (o CustomToolkitSettingsPtrOutput) Elem() CustomToolkitSettingsOutput {
	return o.ApplyT(func(v *CustomToolkitSettings) CustomToolkitSettings { return *v }).(CustomToolkitSettingsOutput)
}

// The command line to execute on the master node.
func (o CustomToolkitSettingsPtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomToolkitSettings) *string {
		if v == nil {
			return nil
		}
		return v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// Custom tool kit job settings.
type CustomToolkitSettingsInvokeResponse struct {
	// The command line to execute on the master node.
	CommandLine *string `pulumi:"commandLine"`
}

// CustomToolkitSettingsInvokeResponseInput is an input type that accepts CustomToolkitSettingsInvokeResponseArgs and CustomToolkitSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CustomToolkitSettingsInvokeResponseInput` via:
//
//          CustomToolkitSettingsInvokeResponseArgs{...}
type CustomToolkitSettingsInvokeResponseInput interface {
	pulumi.Input

	ToCustomToolkitSettingsInvokeResponseOutput() CustomToolkitSettingsInvokeResponseOutput
	ToCustomToolkitSettingsInvokeResponseOutputWithContext(context.Context) CustomToolkitSettingsInvokeResponseOutput
}

// Custom tool kit job settings.
type CustomToolkitSettingsInvokeResponseArgs struct {
	// The command line to execute on the master node.
	CommandLine pulumi.StringPtrInput `pulumi:"commandLine"`
}

func (CustomToolkitSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomToolkitSettingsInvokeResponse)(nil)).Elem()
}

func (i CustomToolkitSettingsInvokeResponseArgs) ToCustomToolkitSettingsInvokeResponseOutput() CustomToolkitSettingsInvokeResponseOutput {
	return i.ToCustomToolkitSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CustomToolkitSettingsInvokeResponseArgs) ToCustomToolkitSettingsInvokeResponseOutputWithContext(ctx context.Context) CustomToolkitSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomToolkitSettingsInvokeResponseOutput)
}

// Custom tool kit job settings.
type CustomToolkitSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CustomToolkitSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomToolkitSettingsInvokeResponse)(nil)).Elem()
}

func (o CustomToolkitSettingsInvokeResponseOutput) ToCustomToolkitSettingsInvokeResponseOutput() CustomToolkitSettingsInvokeResponseOutput {
	return o
}

func (o CustomToolkitSettingsInvokeResponseOutput) ToCustomToolkitSettingsInvokeResponseOutputWithContext(ctx context.Context) CustomToolkitSettingsInvokeResponseOutput {
	return o
}

// The command line to execute on the master node.
func (o CustomToolkitSettingsInvokeResponseOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomToolkitSettingsInvokeResponse) *string { return v.CommandLine }).(pulumi.StringPtrOutput)
}

// Custom tool kit job settings.
type CustomToolkitSettingsResponse struct {
	// The command line to execute on the master node.
	CommandLine *string `pulumi:"commandLine"`
}

// CustomToolkitSettingsResponseInput is an input type that accepts CustomToolkitSettingsResponseArgs and CustomToolkitSettingsResponseOutput values.
// You can construct a concrete instance of `CustomToolkitSettingsResponseInput` via:
//
//          CustomToolkitSettingsResponseArgs{...}
type CustomToolkitSettingsResponseInput interface {
	pulumi.Input

	ToCustomToolkitSettingsResponseOutput() CustomToolkitSettingsResponseOutput
	ToCustomToolkitSettingsResponseOutputWithContext(context.Context) CustomToolkitSettingsResponseOutput
}

// Custom tool kit job settings.
type CustomToolkitSettingsResponseArgs struct {
	// The command line to execute on the master node.
	CommandLine pulumi.StringPtrInput `pulumi:"commandLine"`
}

func (CustomToolkitSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomToolkitSettingsResponse)(nil)).Elem()
}

func (i CustomToolkitSettingsResponseArgs) ToCustomToolkitSettingsResponseOutput() CustomToolkitSettingsResponseOutput {
	return i.ToCustomToolkitSettingsResponseOutputWithContext(context.Background())
}

func (i CustomToolkitSettingsResponseArgs) ToCustomToolkitSettingsResponseOutputWithContext(ctx context.Context) CustomToolkitSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomToolkitSettingsResponseOutput)
}

func (i CustomToolkitSettingsResponseArgs) ToCustomToolkitSettingsResponsePtrOutput() CustomToolkitSettingsResponsePtrOutput {
	return i.ToCustomToolkitSettingsResponsePtrOutputWithContext(context.Background())
}

func (i CustomToolkitSettingsResponseArgs) ToCustomToolkitSettingsResponsePtrOutputWithContext(ctx context.Context) CustomToolkitSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomToolkitSettingsResponseOutput).ToCustomToolkitSettingsResponsePtrOutputWithContext(ctx)
}

// CustomToolkitSettingsResponsePtrInput is an input type that accepts CustomToolkitSettingsResponseArgs, CustomToolkitSettingsResponsePtr and CustomToolkitSettingsResponsePtrOutput values.
// You can construct a concrete instance of `CustomToolkitSettingsResponsePtrInput` via:
//
//          CustomToolkitSettingsResponseArgs{...}
//
//  or:
//
//          nil
type CustomToolkitSettingsResponsePtrInput interface {
	pulumi.Input

	ToCustomToolkitSettingsResponsePtrOutput() CustomToolkitSettingsResponsePtrOutput
	ToCustomToolkitSettingsResponsePtrOutputWithContext(context.Context) CustomToolkitSettingsResponsePtrOutput
}

type customToolkitSettingsResponsePtrType CustomToolkitSettingsResponseArgs

func CustomToolkitSettingsResponsePtr(v *CustomToolkitSettingsResponseArgs) CustomToolkitSettingsResponsePtrInput {
	return (*customToolkitSettingsResponsePtrType)(v)
}

func (*customToolkitSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomToolkitSettingsResponse)(nil)).Elem()
}

func (i *customToolkitSettingsResponsePtrType) ToCustomToolkitSettingsResponsePtrOutput() CustomToolkitSettingsResponsePtrOutput {
	return i.ToCustomToolkitSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *customToolkitSettingsResponsePtrType) ToCustomToolkitSettingsResponsePtrOutputWithContext(ctx context.Context) CustomToolkitSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomToolkitSettingsResponsePtrOutput)
}

// Custom tool kit job settings.
type CustomToolkitSettingsResponseOutput struct{ *pulumi.OutputState }

func (CustomToolkitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomToolkitSettingsResponse)(nil)).Elem()
}

func (o CustomToolkitSettingsResponseOutput) ToCustomToolkitSettingsResponseOutput() CustomToolkitSettingsResponseOutput {
	return o
}

func (o CustomToolkitSettingsResponseOutput) ToCustomToolkitSettingsResponseOutputWithContext(ctx context.Context) CustomToolkitSettingsResponseOutput {
	return o
}

func (o CustomToolkitSettingsResponseOutput) ToCustomToolkitSettingsResponsePtrOutput() CustomToolkitSettingsResponsePtrOutput {
	return o.ToCustomToolkitSettingsResponsePtrOutputWithContext(context.Background())
}

func (o CustomToolkitSettingsResponseOutput) ToCustomToolkitSettingsResponsePtrOutputWithContext(ctx context.Context) CustomToolkitSettingsResponsePtrOutput {
	return o.ApplyT(func(v CustomToolkitSettingsResponse) *CustomToolkitSettingsResponse {
		return &v
	}).(CustomToolkitSettingsResponsePtrOutput)
}

// The command line to execute on the master node.
func (o CustomToolkitSettingsResponseOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomToolkitSettingsResponse) *string { return v.CommandLine }).(pulumi.StringPtrOutput)
}

type CustomToolkitSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomToolkitSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomToolkitSettingsResponse)(nil)).Elem()
}

func (o CustomToolkitSettingsResponsePtrOutput) ToCustomToolkitSettingsResponsePtrOutput() CustomToolkitSettingsResponsePtrOutput {
	return o
}

func (o CustomToolkitSettingsResponsePtrOutput) ToCustomToolkitSettingsResponsePtrOutputWithContext(ctx context.Context) CustomToolkitSettingsResponsePtrOutput {
	return o
}

func (o CustomToolkitSettingsResponsePtrOutput) Elem() CustomToolkitSettingsResponseOutput {
	return o.ApplyT(func(v *CustomToolkitSettingsResponse) CustomToolkitSettingsResponse { return *v }).(CustomToolkitSettingsResponseOutput)
}

// The command line to execute on the master node.
func (o CustomToolkitSettingsResponsePtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomToolkitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// Data disks settings.
type DataDisks struct {
	// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
	CachingType *string `pulumi:"cachingType"`
	// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
	DiskCount int `pulumi:"diskCount"`
	// Disk size in GB for the blank data disks.
	DiskSizeInGB int `pulumi:"diskSizeInGB"`
	// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
	StorageAccountType string `pulumi:"storageAccountType"`
}

// DataDisksInput is an input type that accepts DataDisksArgs and DataDisksOutput values.
// You can construct a concrete instance of `DataDisksInput` via:
//
//          DataDisksArgs{...}
type DataDisksInput interface {
	pulumi.Input

	ToDataDisksOutput() DataDisksOutput
	ToDataDisksOutputWithContext(context.Context) DataDisksOutput
}

// Data disks settings.
type DataDisksArgs struct {
	// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
	CachingType CachingType `pulumi:"cachingType"`
	// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
	DiskCount pulumi.IntInput `pulumi:"diskCount"`
	// Disk size in GB for the blank data disks.
	DiskSizeInGB pulumi.IntInput `pulumi:"diskSizeInGB"`
	// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
	StorageAccountType pulumi.StringInput `pulumi:"storageAccountType"`
}

func (DataDisksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisks)(nil)).Elem()
}

func (i DataDisksArgs) ToDataDisksOutput() DataDisksOutput {
	return i.ToDataDisksOutputWithContext(context.Background())
}

func (i DataDisksArgs) ToDataDisksOutputWithContext(ctx context.Context) DataDisksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksOutput)
}

func (i DataDisksArgs) ToDataDisksPtrOutput() DataDisksPtrOutput {
	return i.ToDataDisksPtrOutputWithContext(context.Background())
}

func (i DataDisksArgs) ToDataDisksPtrOutputWithContext(ctx context.Context) DataDisksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksOutput).ToDataDisksPtrOutputWithContext(ctx)
}

// DataDisksPtrInput is an input type that accepts DataDisksArgs, DataDisksPtr and DataDisksPtrOutput values.
// You can construct a concrete instance of `DataDisksPtrInput` via:
//
//          DataDisksArgs{...}
//
//  or:
//
//          nil
type DataDisksPtrInput interface {
	pulumi.Input

	ToDataDisksPtrOutput() DataDisksPtrOutput
	ToDataDisksPtrOutputWithContext(context.Context) DataDisksPtrOutput
}

type dataDisksPtrType DataDisksArgs

func DataDisksPtr(v *DataDisksArgs) DataDisksPtrInput {
	return (*dataDisksPtrType)(v)
}

func (*dataDisksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDisks)(nil)).Elem()
}

func (i *dataDisksPtrType) ToDataDisksPtrOutput() DataDisksPtrOutput {
	return i.ToDataDisksPtrOutputWithContext(context.Background())
}

func (i *dataDisksPtrType) ToDataDisksPtrOutputWithContext(ctx context.Context) DataDisksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksPtrOutput)
}

// Data disks settings.
type DataDisksOutput struct{ *pulumi.OutputState }

func (DataDisksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisks)(nil)).Elem()
}

func (o DataDisksOutput) ToDataDisksOutput() DataDisksOutput {
	return o
}

func (o DataDisksOutput) ToDataDisksOutputWithContext(ctx context.Context) DataDisksOutput {
	return o
}

func (o DataDisksOutput) ToDataDisksPtrOutput() DataDisksPtrOutput {
	return o.ToDataDisksPtrOutputWithContext(context.Background())
}

func (o DataDisksOutput) ToDataDisksPtrOutputWithContext(ctx context.Context) DataDisksPtrOutput {
	return o.ApplyT(func(v DataDisks) *DataDisks {
		return &v
	}).(DataDisksPtrOutput)
}

// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
func (o DataDisksOutput) CachingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisks) *string { return v.CachingType }).(pulumi.StringPtrOutput)
}

// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
func (o DataDisksOutput) DiskCount() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisks) int { return v.DiskCount }).(pulumi.IntOutput)
}

// Disk size in GB for the blank data disks.
func (o DataDisksOutput) DiskSizeInGB() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisks) int { return v.DiskSizeInGB }).(pulumi.IntOutput)
}

// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
func (o DataDisksOutput) StorageAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v DataDisks) string { return v.StorageAccountType }).(pulumi.StringOutput)
}

type DataDisksPtrOutput struct{ *pulumi.OutputState }

func (DataDisksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDisks)(nil)).Elem()
}

func (o DataDisksPtrOutput) ToDataDisksPtrOutput() DataDisksPtrOutput {
	return o
}

func (o DataDisksPtrOutput) ToDataDisksPtrOutputWithContext(ctx context.Context) DataDisksPtrOutput {
	return o
}

func (o DataDisksPtrOutput) Elem() DataDisksOutput {
	return o.ApplyT(func(v *DataDisks) DataDisks { return *v }).(DataDisksOutput)
}

// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
func (o DataDisksPtrOutput) CachingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataDisks) *string {
		if v == nil {
			return nil
		}
		return v.CachingType
	}).(pulumi.StringPtrOutput)
}

// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
func (o DataDisksPtrOutput) DiskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataDisks) *int {
		if v == nil {
			return nil
		}
		return &v.DiskCount
	}).(pulumi.IntPtrOutput)
}

// Disk size in GB for the blank data disks.
func (o DataDisksPtrOutput) DiskSizeInGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataDisks) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSizeInGB
	}).(pulumi.IntPtrOutput)
}

// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
func (o DataDisksPtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataDisks) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Data disks settings.
type DataDisksInvokeResponse struct {
	// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
	CachingType *string `pulumi:"cachingType"`
	// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
	DiskCount int `pulumi:"diskCount"`
	// Disk size in GB for the blank data disks.
	DiskSizeInGB int `pulumi:"diskSizeInGB"`
	// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
	StorageAccountType string `pulumi:"storageAccountType"`
}

// DataDisksInvokeResponseInput is an input type that accepts DataDisksInvokeResponseArgs and DataDisksInvokeResponseOutput values.
// You can construct a concrete instance of `DataDisksInvokeResponseInput` via:
//
//          DataDisksInvokeResponseArgs{...}
type DataDisksInvokeResponseInput interface {
	pulumi.Input

	ToDataDisksInvokeResponseOutput() DataDisksInvokeResponseOutput
	ToDataDisksInvokeResponseOutputWithContext(context.Context) DataDisksInvokeResponseOutput
}

// Data disks settings.
type DataDisksInvokeResponseArgs struct {
	// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
	CachingType pulumi.StringPtrInput `pulumi:"cachingType"`
	// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
	DiskCount pulumi.IntInput `pulumi:"diskCount"`
	// Disk size in GB for the blank data disks.
	DiskSizeInGB pulumi.IntInput `pulumi:"diskSizeInGB"`
	// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
	StorageAccountType pulumi.StringInput `pulumi:"storageAccountType"`
}

func (DataDisksInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisksInvokeResponse)(nil)).Elem()
}

func (i DataDisksInvokeResponseArgs) ToDataDisksInvokeResponseOutput() DataDisksInvokeResponseOutput {
	return i.ToDataDisksInvokeResponseOutputWithContext(context.Background())
}

func (i DataDisksInvokeResponseArgs) ToDataDisksInvokeResponseOutputWithContext(ctx context.Context) DataDisksInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksInvokeResponseOutput)
}

// Data disks settings.
type DataDisksInvokeResponseOutput struct{ *pulumi.OutputState }

func (DataDisksInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisksInvokeResponse)(nil)).Elem()
}

func (o DataDisksInvokeResponseOutput) ToDataDisksInvokeResponseOutput() DataDisksInvokeResponseOutput {
	return o
}

func (o DataDisksInvokeResponseOutput) ToDataDisksInvokeResponseOutputWithContext(ctx context.Context) DataDisksInvokeResponseOutput {
	return o
}

// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
func (o DataDisksInvokeResponseOutput) CachingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisksInvokeResponse) *string { return v.CachingType }).(pulumi.StringPtrOutput)
}

// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
func (o DataDisksInvokeResponseOutput) DiskCount() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisksInvokeResponse) int { return v.DiskCount }).(pulumi.IntOutput)
}

// Disk size in GB for the blank data disks.
func (o DataDisksInvokeResponseOutput) DiskSizeInGB() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisksInvokeResponse) int { return v.DiskSizeInGB }).(pulumi.IntOutput)
}

// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
func (o DataDisksInvokeResponseOutput) StorageAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v DataDisksInvokeResponse) string { return v.StorageAccountType }).(pulumi.StringOutput)
}

// Data disks settings.
type DataDisksResponse struct {
	// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
	CachingType *string `pulumi:"cachingType"`
	// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
	DiskCount int `pulumi:"diskCount"`
	// Disk size in GB for the blank data disks.
	DiskSizeInGB int `pulumi:"diskSizeInGB"`
	// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
	StorageAccountType string `pulumi:"storageAccountType"`
}

// DataDisksResponseInput is an input type that accepts DataDisksResponseArgs and DataDisksResponseOutput values.
// You can construct a concrete instance of `DataDisksResponseInput` via:
//
//          DataDisksResponseArgs{...}
type DataDisksResponseInput interface {
	pulumi.Input

	ToDataDisksResponseOutput() DataDisksResponseOutput
	ToDataDisksResponseOutputWithContext(context.Context) DataDisksResponseOutput
}

// Data disks settings.
type DataDisksResponseArgs struct {
	// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
	CachingType pulumi.StringPtrInput `pulumi:"cachingType"`
	// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
	DiskCount pulumi.IntInput `pulumi:"diskCount"`
	// Disk size in GB for the blank data disks.
	DiskSizeInGB pulumi.IntInput `pulumi:"diskSizeInGB"`
	// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
	StorageAccountType pulumi.StringInput `pulumi:"storageAccountType"`
}

func (DataDisksResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisksResponse)(nil)).Elem()
}

func (i DataDisksResponseArgs) ToDataDisksResponseOutput() DataDisksResponseOutput {
	return i.ToDataDisksResponseOutputWithContext(context.Background())
}

func (i DataDisksResponseArgs) ToDataDisksResponseOutputWithContext(ctx context.Context) DataDisksResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksResponseOutput)
}

func (i DataDisksResponseArgs) ToDataDisksResponsePtrOutput() DataDisksResponsePtrOutput {
	return i.ToDataDisksResponsePtrOutputWithContext(context.Background())
}

func (i DataDisksResponseArgs) ToDataDisksResponsePtrOutputWithContext(ctx context.Context) DataDisksResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksResponseOutput).ToDataDisksResponsePtrOutputWithContext(ctx)
}

// DataDisksResponsePtrInput is an input type that accepts DataDisksResponseArgs, DataDisksResponsePtr and DataDisksResponsePtrOutput values.
// You can construct a concrete instance of `DataDisksResponsePtrInput` via:
//
//          DataDisksResponseArgs{...}
//
//  or:
//
//          nil
type DataDisksResponsePtrInput interface {
	pulumi.Input

	ToDataDisksResponsePtrOutput() DataDisksResponsePtrOutput
	ToDataDisksResponsePtrOutputWithContext(context.Context) DataDisksResponsePtrOutput
}

type dataDisksResponsePtrType DataDisksResponseArgs

func DataDisksResponsePtr(v *DataDisksResponseArgs) DataDisksResponsePtrInput {
	return (*dataDisksResponsePtrType)(v)
}

func (*dataDisksResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDisksResponse)(nil)).Elem()
}

func (i *dataDisksResponsePtrType) ToDataDisksResponsePtrOutput() DataDisksResponsePtrOutput {
	return i.ToDataDisksResponsePtrOutputWithContext(context.Background())
}

func (i *dataDisksResponsePtrType) ToDataDisksResponsePtrOutputWithContext(ctx context.Context) DataDisksResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksResponsePtrOutput)
}

// Data disks settings.
type DataDisksResponseOutput struct{ *pulumi.OutputState }

func (DataDisksResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisksResponse)(nil)).Elem()
}

func (o DataDisksResponseOutput) ToDataDisksResponseOutput() DataDisksResponseOutput {
	return o
}

func (o DataDisksResponseOutput) ToDataDisksResponseOutputWithContext(ctx context.Context) DataDisksResponseOutput {
	return o
}

func (o DataDisksResponseOutput) ToDataDisksResponsePtrOutput() DataDisksResponsePtrOutput {
	return o.ToDataDisksResponsePtrOutputWithContext(context.Background())
}

func (o DataDisksResponseOutput) ToDataDisksResponsePtrOutputWithContext(ctx context.Context) DataDisksResponsePtrOutput {
	return o.ApplyT(func(v DataDisksResponse) *DataDisksResponse {
		return &v
	}).(DataDisksResponsePtrOutput)
}

// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
func (o DataDisksResponseOutput) CachingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisksResponse) *string { return v.CachingType }).(pulumi.StringPtrOutput)
}

// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
func (o DataDisksResponseOutput) DiskCount() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisksResponse) int { return v.DiskCount }).(pulumi.IntOutput)
}

// Disk size in GB for the blank data disks.
func (o DataDisksResponseOutput) DiskSizeInGB() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisksResponse) int { return v.DiskSizeInGB }).(pulumi.IntOutput)
}

// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
func (o DataDisksResponseOutput) StorageAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v DataDisksResponse) string { return v.StorageAccountType }).(pulumi.StringOutput)
}

type DataDisksResponsePtrOutput struct{ *pulumi.OutputState }

func (DataDisksResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDisksResponse)(nil)).Elem()
}

func (o DataDisksResponsePtrOutput) ToDataDisksResponsePtrOutput() DataDisksResponsePtrOutput {
	return o
}

func (o DataDisksResponsePtrOutput) ToDataDisksResponsePtrOutputWithContext(ctx context.Context) DataDisksResponsePtrOutput {
	return o
}

func (o DataDisksResponsePtrOutput) Elem() DataDisksResponseOutput {
	return o.ApplyT(func(v *DataDisksResponse) DataDisksResponse { return *v }).(DataDisksResponseOutput)
}

// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
func (o DataDisksResponsePtrOutput) CachingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataDisksResponse) *string {
		if v == nil {
			return nil
		}
		return v.CachingType
	}).(pulumi.StringPtrOutput)
}

// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
func (o DataDisksResponsePtrOutput) DiskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataDisksResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DiskCount
	}).(pulumi.IntPtrOutput)
}

// Disk size in GB for the blank data disks.
func (o DataDisksResponsePtrOutput) DiskSizeInGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataDisksResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSizeInGB
	}).(pulumi.IntPtrOutput)
}

// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
func (o DataDisksResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataDisksResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// An environment variable definition.
type EnvironmentVariable struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the environment variable.
	Value string `pulumi:"value"`
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//          EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

// An environment variable definition.
type EnvironmentVariableArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

// EnvironmentVariableArrayInput is an input type that accepts EnvironmentVariableArray and EnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableArrayInput` via:
//
//          EnvironmentVariableArray{ EnvironmentVariableArgs{...} }
type EnvironmentVariableArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput
	ToEnvironmentVariableArrayOutputWithContext(context.Context) EnvironmentVariableArrayOutput
}

type EnvironmentVariableArray []EnvironmentVariableInput

func (EnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return i.ToEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableArrayOutput)
}

// An environment variable definition.
type EnvironmentVariableOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariable) string { return v.Value }).(pulumi.StringOutput)
}

type EnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariable {
		return vs[0].([]EnvironmentVariable)[vs[1].(int)]
	}).(EnvironmentVariableOutput)
}

// An environment variable definition.
type EnvironmentVariableInvokeResponse struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the environment variable.
	Value string `pulumi:"value"`
}

// EnvironmentVariableInvokeResponseInput is an input type that accepts EnvironmentVariableInvokeResponseArgs and EnvironmentVariableInvokeResponseOutput values.
// You can construct a concrete instance of `EnvironmentVariableInvokeResponseInput` via:
//
//          EnvironmentVariableInvokeResponseArgs{...}
type EnvironmentVariableInvokeResponseInput interface {
	pulumi.Input

	ToEnvironmentVariableInvokeResponseOutput() EnvironmentVariableInvokeResponseOutput
	ToEnvironmentVariableInvokeResponseOutputWithContext(context.Context) EnvironmentVariableInvokeResponseOutput
}

// An environment variable definition.
type EnvironmentVariableInvokeResponseArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EnvironmentVariableInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableInvokeResponse)(nil)).Elem()
}

func (i EnvironmentVariableInvokeResponseArgs) ToEnvironmentVariableInvokeResponseOutput() EnvironmentVariableInvokeResponseOutput {
	return i.ToEnvironmentVariableInvokeResponseOutputWithContext(context.Background())
}

func (i EnvironmentVariableInvokeResponseArgs) ToEnvironmentVariableInvokeResponseOutputWithContext(ctx context.Context) EnvironmentVariableInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableInvokeResponseOutput)
}

// EnvironmentVariableInvokeResponseArrayInput is an input type that accepts EnvironmentVariableInvokeResponseArray and EnvironmentVariableInvokeResponseArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableInvokeResponseArrayInput` via:
//
//          EnvironmentVariableInvokeResponseArray{ EnvironmentVariableInvokeResponseArgs{...} }
type EnvironmentVariableInvokeResponseArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableInvokeResponseArrayOutput() EnvironmentVariableInvokeResponseArrayOutput
	ToEnvironmentVariableInvokeResponseArrayOutputWithContext(context.Context) EnvironmentVariableInvokeResponseArrayOutput
}

type EnvironmentVariableInvokeResponseArray []EnvironmentVariableInvokeResponseInput

func (EnvironmentVariableInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableInvokeResponse)(nil)).Elem()
}

func (i EnvironmentVariableInvokeResponseArray) ToEnvironmentVariableInvokeResponseArrayOutput() EnvironmentVariableInvokeResponseArrayOutput {
	return i.ToEnvironmentVariableInvokeResponseArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableInvokeResponseArray) ToEnvironmentVariableInvokeResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableInvokeResponseArrayOutput)
}

// An environment variable definition.
type EnvironmentVariableInvokeResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableInvokeResponse)(nil)).Elem()
}

func (o EnvironmentVariableInvokeResponseOutput) ToEnvironmentVariableInvokeResponseOutput() EnvironmentVariableInvokeResponseOutput {
	return o
}

func (o EnvironmentVariableInvokeResponseOutput) ToEnvironmentVariableInvokeResponseOutputWithContext(ctx context.Context) EnvironmentVariableInvokeResponseOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableInvokeResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableInvokeResponse) string { return v.Value }).(pulumi.StringOutput)
}

type EnvironmentVariableInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableInvokeResponse)(nil)).Elem()
}

func (o EnvironmentVariableInvokeResponseArrayOutput) ToEnvironmentVariableInvokeResponseArrayOutput() EnvironmentVariableInvokeResponseArrayOutput {
	return o
}

func (o EnvironmentVariableInvokeResponseArrayOutput) ToEnvironmentVariableInvokeResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableInvokeResponseArrayOutput {
	return o
}

func (o EnvironmentVariableInvokeResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableInvokeResponse {
		return vs[0].([]EnvironmentVariableInvokeResponse)[vs[1].(int)]
	}).(EnvironmentVariableInvokeResponseOutput)
}

// An environment variable definition.
type EnvironmentVariableResponse struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the environment variable.
	Value string `pulumi:"value"`
}

// EnvironmentVariableResponseInput is an input type that accepts EnvironmentVariableResponseArgs and EnvironmentVariableResponseOutput values.
// You can construct a concrete instance of `EnvironmentVariableResponseInput` via:
//
//          EnvironmentVariableResponseArgs{...}
type EnvironmentVariableResponseInput interface {
	pulumi.Input

	ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput
	ToEnvironmentVariableResponseOutputWithContext(context.Context) EnvironmentVariableResponseOutput
}

// An environment variable definition.
type EnvironmentVariableResponseArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EnvironmentVariableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (i EnvironmentVariableResponseArgs) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return i.ToEnvironmentVariableResponseOutputWithContext(context.Background())
}

func (i EnvironmentVariableResponseArgs) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableResponseOutput)
}

// EnvironmentVariableResponseArrayInput is an input type that accepts EnvironmentVariableResponseArray and EnvironmentVariableResponseArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableResponseArrayInput` via:
//
//          EnvironmentVariableResponseArray{ EnvironmentVariableResponseArgs{...} }
type EnvironmentVariableResponseArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput
	ToEnvironmentVariableResponseArrayOutputWithContext(context.Context) EnvironmentVariableResponseArrayOutput
}

type EnvironmentVariableResponseArray []EnvironmentVariableResponseInput

func (EnvironmentVariableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (i EnvironmentVariableResponseArray) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return i.ToEnvironmentVariableResponseArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableResponseArray) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableResponseArrayOutput)
}

// An environment variable definition.
type EnvironmentVariableResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) string { return v.Value }).(pulumi.StringOutput)
}

type EnvironmentVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableResponse {
		return vs[0].([]EnvironmentVariableResponse)[vs[1].(int)]
	}).(EnvironmentVariableResponseOutput)
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValue struct {
	// The name of the environment variable to store the secret value.
	Name string `pulumi:"name"`
	// The value of the environment variable. This value will never be reported back by Batch AI.
	Value *string `pulumi:"value"`
	// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
	ValueSecretReference *KeyVaultSecretReference `pulumi:"valueSecretReference"`
}

// EnvironmentVariableWithSecretValueInput is an input type that accepts EnvironmentVariableWithSecretValueArgs and EnvironmentVariableWithSecretValueOutput values.
// You can construct a concrete instance of `EnvironmentVariableWithSecretValueInput` via:
//
//          EnvironmentVariableWithSecretValueArgs{...}
type EnvironmentVariableWithSecretValueInput interface {
	pulumi.Input

	ToEnvironmentVariableWithSecretValueOutput() EnvironmentVariableWithSecretValueOutput
	ToEnvironmentVariableWithSecretValueOutputWithContext(context.Context) EnvironmentVariableWithSecretValueOutput
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValueArgs struct {
	// The name of the environment variable to store the secret value.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable. This value will never be reported back by Batch AI.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
	ValueSecretReference KeyVaultSecretReferencePtrInput `pulumi:"valueSecretReference"`
}

func (EnvironmentVariableWithSecretValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableWithSecretValue)(nil)).Elem()
}

func (i EnvironmentVariableWithSecretValueArgs) ToEnvironmentVariableWithSecretValueOutput() EnvironmentVariableWithSecretValueOutput {
	return i.ToEnvironmentVariableWithSecretValueOutputWithContext(context.Background())
}

func (i EnvironmentVariableWithSecretValueArgs) ToEnvironmentVariableWithSecretValueOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableWithSecretValueOutput)
}

// EnvironmentVariableWithSecretValueArrayInput is an input type that accepts EnvironmentVariableWithSecretValueArray and EnvironmentVariableWithSecretValueArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableWithSecretValueArrayInput` via:
//
//          EnvironmentVariableWithSecretValueArray{ EnvironmentVariableWithSecretValueArgs{...} }
type EnvironmentVariableWithSecretValueArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableWithSecretValueArrayOutput() EnvironmentVariableWithSecretValueArrayOutput
	ToEnvironmentVariableWithSecretValueArrayOutputWithContext(context.Context) EnvironmentVariableWithSecretValueArrayOutput
}

type EnvironmentVariableWithSecretValueArray []EnvironmentVariableWithSecretValueInput

func (EnvironmentVariableWithSecretValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableWithSecretValue)(nil)).Elem()
}

func (i EnvironmentVariableWithSecretValueArray) ToEnvironmentVariableWithSecretValueArrayOutput() EnvironmentVariableWithSecretValueArrayOutput {
	return i.ToEnvironmentVariableWithSecretValueArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableWithSecretValueArray) ToEnvironmentVariableWithSecretValueArrayOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableWithSecretValueArrayOutput)
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValueOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableWithSecretValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableWithSecretValue)(nil)).Elem()
}

func (o EnvironmentVariableWithSecretValueOutput) ToEnvironmentVariableWithSecretValueOutput() EnvironmentVariableWithSecretValueOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueOutput) ToEnvironmentVariableWithSecretValueOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueOutput {
	return o
}

// The name of the environment variable to store the secret value.
func (o EnvironmentVariableWithSecretValueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValue) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable. This value will never be reported back by Batch AI.
func (o EnvironmentVariableWithSecretValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
func (o EnvironmentVariableWithSecretValueOutput) ValueSecretReference() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValue) *KeyVaultSecretReference { return v.ValueSecretReference }).(KeyVaultSecretReferencePtrOutput)
}

type EnvironmentVariableWithSecretValueArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableWithSecretValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableWithSecretValue)(nil)).Elem()
}

func (o EnvironmentVariableWithSecretValueArrayOutput) ToEnvironmentVariableWithSecretValueArrayOutput() EnvironmentVariableWithSecretValueArrayOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueArrayOutput) ToEnvironmentVariableWithSecretValueArrayOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueArrayOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableWithSecretValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableWithSecretValue {
		return vs[0].([]EnvironmentVariableWithSecretValue)[vs[1].(int)]
	}).(EnvironmentVariableWithSecretValueOutput)
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValueInvokeResponse struct {
	// The name of the environment variable to store the secret value.
	Name string `pulumi:"name"`
	// The value of the environment variable. This value will never be reported back by Batch AI.
	Value *string `pulumi:"value"`
	// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
	ValueSecretReference *KeyVaultSecretReferenceInvokeResponse `pulumi:"valueSecretReference"`
}

// EnvironmentVariableWithSecretValueInvokeResponseInput is an input type that accepts EnvironmentVariableWithSecretValueInvokeResponseArgs and EnvironmentVariableWithSecretValueInvokeResponseOutput values.
// You can construct a concrete instance of `EnvironmentVariableWithSecretValueInvokeResponseInput` via:
//
//          EnvironmentVariableWithSecretValueInvokeResponseArgs{...}
type EnvironmentVariableWithSecretValueInvokeResponseInput interface {
	pulumi.Input

	ToEnvironmentVariableWithSecretValueInvokeResponseOutput() EnvironmentVariableWithSecretValueInvokeResponseOutput
	ToEnvironmentVariableWithSecretValueInvokeResponseOutputWithContext(context.Context) EnvironmentVariableWithSecretValueInvokeResponseOutput
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValueInvokeResponseArgs struct {
	// The name of the environment variable to store the secret value.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable. This value will never be reported back by Batch AI.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
	ValueSecretReference KeyVaultSecretReferenceInvokeResponsePtrInput `pulumi:"valueSecretReference"`
}

func (EnvironmentVariableWithSecretValueInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableWithSecretValueInvokeResponse)(nil)).Elem()
}

func (i EnvironmentVariableWithSecretValueInvokeResponseArgs) ToEnvironmentVariableWithSecretValueInvokeResponseOutput() EnvironmentVariableWithSecretValueInvokeResponseOutput {
	return i.ToEnvironmentVariableWithSecretValueInvokeResponseOutputWithContext(context.Background())
}

func (i EnvironmentVariableWithSecretValueInvokeResponseArgs) ToEnvironmentVariableWithSecretValueInvokeResponseOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableWithSecretValueInvokeResponseOutput)
}

// EnvironmentVariableWithSecretValueInvokeResponseArrayInput is an input type that accepts EnvironmentVariableWithSecretValueInvokeResponseArray and EnvironmentVariableWithSecretValueInvokeResponseArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableWithSecretValueInvokeResponseArrayInput` via:
//
//          EnvironmentVariableWithSecretValueInvokeResponseArray{ EnvironmentVariableWithSecretValueInvokeResponseArgs{...} }
type EnvironmentVariableWithSecretValueInvokeResponseArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableWithSecretValueInvokeResponseArrayOutput() EnvironmentVariableWithSecretValueInvokeResponseArrayOutput
	ToEnvironmentVariableWithSecretValueInvokeResponseArrayOutputWithContext(context.Context) EnvironmentVariableWithSecretValueInvokeResponseArrayOutput
}

type EnvironmentVariableWithSecretValueInvokeResponseArray []EnvironmentVariableWithSecretValueInvokeResponseInput

func (EnvironmentVariableWithSecretValueInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableWithSecretValueInvokeResponse)(nil)).Elem()
}

func (i EnvironmentVariableWithSecretValueInvokeResponseArray) ToEnvironmentVariableWithSecretValueInvokeResponseArrayOutput() EnvironmentVariableWithSecretValueInvokeResponseArrayOutput {
	return i.ToEnvironmentVariableWithSecretValueInvokeResponseArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableWithSecretValueInvokeResponseArray) ToEnvironmentVariableWithSecretValueInvokeResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableWithSecretValueInvokeResponseArrayOutput)
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValueInvokeResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableWithSecretValueInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableWithSecretValueInvokeResponse)(nil)).Elem()
}

func (o EnvironmentVariableWithSecretValueInvokeResponseOutput) ToEnvironmentVariableWithSecretValueInvokeResponseOutput() EnvironmentVariableWithSecretValueInvokeResponseOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueInvokeResponseOutput) ToEnvironmentVariableWithSecretValueInvokeResponseOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueInvokeResponseOutput {
	return o
}

// The name of the environment variable to store the secret value.
func (o EnvironmentVariableWithSecretValueInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValueInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable. This value will never be reported back by Batch AI.
func (o EnvironmentVariableWithSecretValueInvokeResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValueInvokeResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
func (o EnvironmentVariableWithSecretValueInvokeResponseOutput) ValueSecretReference() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValueInvokeResponse) *KeyVaultSecretReferenceInvokeResponse {
		return v.ValueSecretReference
	}).(KeyVaultSecretReferenceInvokeResponsePtrOutput)
}

type EnvironmentVariableWithSecretValueInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableWithSecretValueInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableWithSecretValueInvokeResponse)(nil)).Elem()
}

func (o EnvironmentVariableWithSecretValueInvokeResponseArrayOutput) ToEnvironmentVariableWithSecretValueInvokeResponseArrayOutput() EnvironmentVariableWithSecretValueInvokeResponseArrayOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueInvokeResponseArrayOutput) ToEnvironmentVariableWithSecretValueInvokeResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueInvokeResponseArrayOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueInvokeResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableWithSecretValueInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableWithSecretValueInvokeResponse {
		return vs[0].([]EnvironmentVariableWithSecretValueInvokeResponse)[vs[1].(int)]
	}).(EnvironmentVariableWithSecretValueInvokeResponseOutput)
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValueResponse struct {
	// The name of the environment variable to store the secret value.
	Name string `pulumi:"name"`
	// The value of the environment variable. This value will never be reported back by Batch AI.
	Value *string `pulumi:"value"`
	// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
	ValueSecretReference *KeyVaultSecretReferenceResponse `pulumi:"valueSecretReference"`
}

// EnvironmentVariableWithSecretValueResponseInput is an input type that accepts EnvironmentVariableWithSecretValueResponseArgs and EnvironmentVariableWithSecretValueResponseOutput values.
// You can construct a concrete instance of `EnvironmentVariableWithSecretValueResponseInput` via:
//
//          EnvironmentVariableWithSecretValueResponseArgs{...}
type EnvironmentVariableWithSecretValueResponseInput interface {
	pulumi.Input

	ToEnvironmentVariableWithSecretValueResponseOutput() EnvironmentVariableWithSecretValueResponseOutput
	ToEnvironmentVariableWithSecretValueResponseOutputWithContext(context.Context) EnvironmentVariableWithSecretValueResponseOutput
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValueResponseArgs struct {
	// The name of the environment variable to store the secret value.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable. This value will never be reported back by Batch AI.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
	ValueSecretReference KeyVaultSecretReferenceResponsePtrInput `pulumi:"valueSecretReference"`
}

func (EnvironmentVariableWithSecretValueResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableWithSecretValueResponse)(nil)).Elem()
}

func (i EnvironmentVariableWithSecretValueResponseArgs) ToEnvironmentVariableWithSecretValueResponseOutput() EnvironmentVariableWithSecretValueResponseOutput {
	return i.ToEnvironmentVariableWithSecretValueResponseOutputWithContext(context.Background())
}

func (i EnvironmentVariableWithSecretValueResponseArgs) ToEnvironmentVariableWithSecretValueResponseOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableWithSecretValueResponseOutput)
}

// EnvironmentVariableWithSecretValueResponseArrayInput is an input type that accepts EnvironmentVariableWithSecretValueResponseArray and EnvironmentVariableWithSecretValueResponseArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableWithSecretValueResponseArrayInput` via:
//
//          EnvironmentVariableWithSecretValueResponseArray{ EnvironmentVariableWithSecretValueResponseArgs{...} }
type EnvironmentVariableWithSecretValueResponseArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableWithSecretValueResponseArrayOutput() EnvironmentVariableWithSecretValueResponseArrayOutput
	ToEnvironmentVariableWithSecretValueResponseArrayOutputWithContext(context.Context) EnvironmentVariableWithSecretValueResponseArrayOutput
}

type EnvironmentVariableWithSecretValueResponseArray []EnvironmentVariableWithSecretValueResponseInput

func (EnvironmentVariableWithSecretValueResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableWithSecretValueResponse)(nil)).Elem()
}

func (i EnvironmentVariableWithSecretValueResponseArray) ToEnvironmentVariableWithSecretValueResponseArrayOutput() EnvironmentVariableWithSecretValueResponseArrayOutput {
	return i.ToEnvironmentVariableWithSecretValueResponseArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableWithSecretValueResponseArray) ToEnvironmentVariableWithSecretValueResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableWithSecretValueResponseArrayOutput)
}

// An environment variable with secret value definition.
type EnvironmentVariableWithSecretValueResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableWithSecretValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableWithSecretValueResponse)(nil)).Elem()
}

func (o EnvironmentVariableWithSecretValueResponseOutput) ToEnvironmentVariableWithSecretValueResponseOutput() EnvironmentVariableWithSecretValueResponseOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueResponseOutput) ToEnvironmentVariableWithSecretValueResponseOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueResponseOutput {
	return o
}

// The name of the environment variable to store the secret value.
func (o EnvironmentVariableWithSecretValueResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValueResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable. This value will never be reported back by Batch AI.
func (o EnvironmentVariableWithSecretValueResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValueResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// KeyVault store and secret which contains the value for the environment variable. One of value or valueSecretReference must be provided.
func (o EnvironmentVariableWithSecretValueResponseOutput) ValueSecretReference() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVariableWithSecretValueResponse) *KeyVaultSecretReferenceResponse {
		return v.ValueSecretReference
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

type EnvironmentVariableWithSecretValueResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableWithSecretValueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableWithSecretValueResponse)(nil)).Elem()
}

func (o EnvironmentVariableWithSecretValueResponseArrayOutput) ToEnvironmentVariableWithSecretValueResponseArrayOutput() EnvironmentVariableWithSecretValueResponseArrayOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueResponseArrayOutput) ToEnvironmentVariableWithSecretValueResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableWithSecretValueResponseArrayOutput {
	return o
}

func (o EnvironmentVariableWithSecretValueResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableWithSecretValueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableWithSecretValueResponse {
		return vs[0].([]EnvironmentVariableWithSecretValueResponse)[vs[1].(int)]
	}).(EnvironmentVariableWithSecretValueResponseOutput)
}

// Properties of the file or directory.
type FileInvokeResponse struct {
	// The file of the size.
	ContentLength float64 `pulumi:"contentLength"`
	// URL to download the corresponding file. The downloadUrl is not returned for directories.
	DownloadUrl string `pulumi:"downloadUrl"`
	// Type of the file. Possible values are file and directory.
	FileType string `pulumi:"fileType"`
	// The time at which the file was last modified.
	LastModified string `pulumi:"lastModified"`
	// Name of the file.
	Name string `pulumi:"name"`
}

// FileInvokeResponseInput is an input type that accepts FileInvokeResponseArgs and FileInvokeResponseOutput values.
// You can construct a concrete instance of `FileInvokeResponseInput` via:
//
//          FileInvokeResponseArgs{...}
type FileInvokeResponseInput interface {
	pulumi.Input

	ToFileInvokeResponseOutput() FileInvokeResponseOutput
	ToFileInvokeResponseOutputWithContext(context.Context) FileInvokeResponseOutput
}

// Properties of the file or directory.
type FileInvokeResponseArgs struct {
	// The file of the size.
	ContentLength pulumi.Float64Input `pulumi:"contentLength"`
	// URL to download the corresponding file. The downloadUrl is not returned for directories.
	DownloadUrl pulumi.StringInput `pulumi:"downloadUrl"`
	// Type of the file. Possible values are file and directory.
	FileType pulumi.StringInput `pulumi:"fileType"`
	// The time at which the file was last modified.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// Name of the file.
	Name pulumi.StringInput `pulumi:"name"`
}

func (FileInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileInvokeResponse)(nil)).Elem()
}

func (i FileInvokeResponseArgs) ToFileInvokeResponseOutput() FileInvokeResponseOutput {
	return i.ToFileInvokeResponseOutputWithContext(context.Background())
}

func (i FileInvokeResponseArgs) ToFileInvokeResponseOutputWithContext(ctx context.Context) FileInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileInvokeResponseOutput)
}

// FileInvokeResponseArrayInput is an input type that accepts FileInvokeResponseArray and FileInvokeResponseArrayOutput values.
// You can construct a concrete instance of `FileInvokeResponseArrayInput` via:
//
//          FileInvokeResponseArray{ FileInvokeResponseArgs{...} }
type FileInvokeResponseArrayInput interface {
	pulumi.Input

	ToFileInvokeResponseArrayOutput() FileInvokeResponseArrayOutput
	ToFileInvokeResponseArrayOutputWithContext(context.Context) FileInvokeResponseArrayOutput
}

type FileInvokeResponseArray []FileInvokeResponseInput

func (FileInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileInvokeResponse)(nil)).Elem()
}

func (i FileInvokeResponseArray) ToFileInvokeResponseArrayOutput() FileInvokeResponseArrayOutput {
	return i.ToFileInvokeResponseArrayOutputWithContext(context.Background())
}

func (i FileInvokeResponseArray) ToFileInvokeResponseArrayOutputWithContext(ctx context.Context) FileInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileInvokeResponseArrayOutput)
}

// Properties of the file or directory.
type FileInvokeResponseOutput struct{ *pulumi.OutputState }

func (FileInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileInvokeResponse)(nil)).Elem()
}

func (o FileInvokeResponseOutput) ToFileInvokeResponseOutput() FileInvokeResponseOutput {
	return o
}

func (o FileInvokeResponseOutput) ToFileInvokeResponseOutputWithContext(ctx context.Context) FileInvokeResponseOutput {
	return o
}

// The file of the size.
func (o FileInvokeResponseOutput) ContentLength() pulumi.Float64Output {
	return o.ApplyT(func(v FileInvokeResponse) float64 { return v.ContentLength }).(pulumi.Float64Output)
}

// URL to download the corresponding file. The downloadUrl is not returned for directories.
func (o FileInvokeResponseOutput) DownloadUrl() pulumi.StringOutput {
	return o.ApplyT(func(v FileInvokeResponse) string { return v.DownloadUrl }).(pulumi.StringOutput)
}

// Type of the file. Possible values are file and directory.
func (o FileInvokeResponseOutput) FileType() pulumi.StringOutput {
	return o.ApplyT(func(v FileInvokeResponse) string { return v.FileType }).(pulumi.StringOutput)
}

// The time at which the file was last modified.
func (o FileInvokeResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v FileInvokeResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// Name of the file.
func (o FileInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FileInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type FileInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (FileInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileInvokeResponse)(nil)).Elem()
}

func (o FileInvokeResponseArrayOutput) ToFileInvokeResponseArrayOutput() FileInvokeResponseArrayOutput {
	return o
}

func (o FileInvokeResponseArrayOutput) ToFileInvokeResponseArrayOutputWithContext(ctx context.Context) FileInvokeResponseArrayOutput {
	return o
}

func (o FileInvokeResponseArrayOutput) Index(i pulumi.IntInput) FileInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileInvokeResponse {
		return vs[0].([]FileInvokeResponse)[vs[1].(int)]
	}).(FileInvokeResponseOutput)
}

// File Server mounting configuration.
type FileServerReference struct {
	// Resource ID of the existing File Server to be mounted.
	FileServer ResourceId `pulumi:"fileServer"`
	// Mount options to be passed to mount command.
	MountOptions *string `pulumi:"mountOptions"`
	// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
	SourceDirectory *string `pulumi:"sourceDirectory"`
}

// FileServerReferenceInput is an input type that accepts FileServerReferenceArgs and FileServerReferenceOutput values.
// You can construct a concrete instance of `FileServerReferenceInput` via:
//
//          FileServerReferenceArgs{...}
type FileServerReferenceInput interface {
	pulumi.Input

	ToFileServerReferenceOutput() FileServerReferenceOutput
	ToFileServerReferenceOutputWithContext(context.Context) FileServerReferenceOutput
}

// File Server mounting configuration.
type FileServerReferenceArgs struct {
	// Resource ID of the existing File Server to be mounted.
	FileServer ResourceIdInput `pulumi:"fileServer"`
	// Mount options to be passed to mount command.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
	SourceDirectory pulumi.StringPtrInput `pulumi:"sourceDirectory"`
}

func (FileServerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReference)(nil)).Elem()
}

func (i FileServerReferenceArgs) ToFileServerReferenceOutput() FileServerReferenceOutput {
	return i.ToFileServerReferenceOutputWithContext(context.Background())
}

func (i FileServerReferenceArgs) ToFileServerReferenceOutputWithContext(ctx context.Context) FileServerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReferenceOutput)
}

// FileServerReferenceArrayInput is an input type that accepts FileServerReferenceArray and FileServerReferenceArrayOutput values.
// You can construct a concrete instance of `FileServerReferenceArrayInput` via:
//
//          FileServerReferenceArray{ FileServerReferenceArgs{...} }
type FileServerReferenceArrayInput interface {
	pulumi.Input

	ToFileServerReferenceArrayOutput() FileServerReferenceArrayOutput
	ToFileServerReferenceArrayOutputWithContext(context.Context) FileServerReferenceArrayOutput
}

type FileServerReferenceArray []FileServerReferenceInput

func (FileServerReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileServerReference)(nil)).Elem()
}

func (i FileServerReferenceArray) ToFileServerReferenceArrayOutput() FileServerReferenceArrayOutput {
	return i.ToFileServerReferenceArrayOutputWithContext(context.Background())
}

func (i FileServerReferenceArray) ToFileServerReferenceArrayOutputWithContext(ctx context.Context) FileServerReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReferenceArrayOutput)
}

// File Server mounting configuration.
type FileServerReferenceOutput struct{ *pulumi.OutputState }

func (FileServerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReference)(nil)).Elem()
}

func (o FileServerReferenceOutput) ToFileServerReferenceOutput() FileServerReferenceOutput {
	return o
}

func (o FileServerReferenceOutput) ToFileServerReferenceOutputWithContext(ctx context.Context) FileServerReferenceOutput {
	return o
}

// Resource ID of the existing File Server to be mounted.
func (o FileServerReferenceOutput) FileServer() ResourceIdOutput {
	return o.ApplyT(func(v FileServerReference) ResourceId { return v.FileServer }).(ResourceIdOutput)
}

// Mount options to be passed to mount command.
func (o FileServerReferenceOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerReference) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o FileServerReferenceOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerReference) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
func (o FileServerReferenceOutput) SourceDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerReference) *string { return v.SourceDirectory }).(pulumi.StringPtrOutput)
}

type FileServerReferenceArrayOutput struct{ *pulumi.OutputState }

func (FileServerReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileServerReference)(nil)).Elem()
}

func (o FileServerReferenceArrayOutput) ToFileServerReferenceArrayOutput() FileServerReferenceArrayOutput {
	return o
}

func (o FileServerReferenceArrayOutput) ToFileServerReferenceArrayOutputWithContext(ctx context.Context) FileServerReferenceArrayOutput {
	return o
}

func (o FileServerReferenceArrayOutput) Index(i pulumi.IntInput) FileServerReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileServerReference {
		return vs[0].([]FileServerReference)[vs[1].(int)]
	}).(FileServerReferenceOutput)
}

// File Server mounting configuration.
type FileServerReferenceInvokeResponse struct {
	// Resource ID of the existing File Server to be mounted.
	FileServer ResourceIdInvokeResponse `pulumi:"fileServer"`
	// Mount options to be passed to mount command.
	MountOptions *string `pulumi:"mountOptions"`
	// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
	SourceDirectory *string `pulumi:"sourceDirectory"`
}

// FileServerReferenceInvokeResponseInput is an input type that accepts FileServerReferenceInvokeResponseArgs and FileServerReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `FileServerReferenceInvokeResponseInput` via:
//
//          FileServerReferenceInvokeResponseArgs{...}
type FileServerReferenceInvokeResponseInput interface {
	pulumi.Input

	ToFileServerReferenceInvokeResponseOutput() FileServerReferenceInvokeResponseOutput
	ToFileServerReferenceInvokeResponseOutputWithContext(context.Context) FileServerReferenceInvokeResponseOutput
}

// File Server mounting configuration.
type FileServerReferenceInvokeResponseArgs struct {
	// Resource ID of the existing File Server to be mounted.
	FileServer ResourceIdInvokeResponseInput `pulumi:"fileServer"`
	// Mount options to be passed to mount command.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
	SourceDirectory pulumi.StringPtrInput `pulumi:"sourceDirectory"`
}

func (FileServerReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReferenceInvokeResponse)(nil)).Elem()
}

func (i FileServerReferenceInvokeResponseArgs) ToFileServerReferenceInvokeResponseOutput() FileServerReferenceInvokeResponseOutput {
	return i.ToFileServerReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i FileServerReferenceInvokeResponseArgs) ToFileServerReferenceInvokeResponseOutputWithContext(ctx context.Context) FileServerReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReferenceInvokeResponseOutput)
}

// FileServerReferenceInvokeResponseArrayInput is an input type that accepts FileServerReferenceInvokeResponseArray and FileServerReferenceInvokeResponseArrayOutput values.
// You can construct a concrete instance of `FileServerReferenceInvokeResponseArrayInput` via:
//
//          FileServerReferenceInvokeResponseArray{ FileServerReferenceInvokeResponseArgs{...} }
type FileServerReferenceInvokeResponseArrayInput interface {
	pulumi.Input

	ToFileServerReferenceInvokeResponseArrayOutput() FileServerReferenceInvokeResponseArrayOutput
	ToFileServerReferenceInvokeResponseArrayOutputWithContext(context.Context) FileServerReferenceInvokeResponseArrayOutput
}

type FileServerReferenceInvokeResponseArray []FileServerReferenceInvokeResponseInput

func (FileServerReferenceInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileServerReferenceInvokeResponse)(nil)).Elem()
}

func (i FileServerReferenceInvokeResponseArray) ToFileServerReferenceInvokeResponseArrayOutput() FileServerReferenceInvokeResponseArrayOutput {
	return i.ToFileServerReferenceInvokeResponseArrayOutputWithContext(context.Background())
}

func (i FileServerReferenceInvokeResponseArray) ToFileServerReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) FileServerReferenceInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReferenceInvokeResponseArrayOutput)
}

// File Server mounting configuration.
type FileServerReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (FileServerReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReferenceInvokeResponse)(nil)).Elem()
}

func (o FileServerReferenceInvokeResponseOutput) ToFileServerReferenceInvokeResponseOutput() FileServerReferenceInvokeResponseOutput {
	return o
}

func (o FileServerReferenceInvokeResponseOutput) ToFileServerReferenceInvokeResponseOutputWithContext(ctx context.Context) FileServerReferenceInvokeResponseOutput {
	return o
}

// Resource ID of the existing File Server to be mounted.
func (o FileServerReferenceInvokeResponseOutput) FileServer() ResourceIdInvokeResponseOutput {
	return o.ApplyT(func(v FileServerReferenceInvokeResponse) ResourceIdInvokeResponse { return v.FileServer }).(ResourceIdInvokeResponseOutput)
}

// Mount options to be passed to mount command.
func (o FileServerReferenceInvokeResponseOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerReferenceInvokeResponse) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o FileServerReferenceInvokeResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerReferenceInvokeResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
func (o FileServerReferenceInvokeResponseOutput) SourceDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerReferenceInvokeResponse) *string { return v.SourceDirectory }).(pulumi.StringPtrOutput)
}

type FileServerReferenceInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (FileServerReferenceInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileServerReferenceInvokeResponse)(nil)).Elem()
}

func (o FileServerReferenceInvokeResponseArrayOutput) ToFileServerReferenceInvokeResponseArrayOutput() FileServerReferenceInvokeResponseArrayOutput {
	return o
}

func (o FileServerReferenceInvokeResponseArrayOutput) ToFileServerReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) FileServerReferenceInvokeResponseArrayOutput {
	return o
}

func (o FileServerReferenceInvokeResponseArrayOutput) Index(i pulumi.IntInput) FileServerReferenceInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileServerReferenceInvokeResponse {
		return vs[0].([]FileServerReferenceInvokeResponse)[vs[1].(int)]
	}).(FileServerReferenceInvokeResponseOutput)
}

// File Server mounting configuration.
type FileServerReferenceResponse struct {
	// Resource ID of the existing File Server to be mounted.
	FileServer ResourceIdResponse `pulumi:"fileServer"`
	// Mount options to be passed to mount command.
	MountOptions *string `pulumi:"mountOptions"`
	// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
	SourceDirectory *string `pulumi:"sourceDirectory"`
}

// FileServerReferenceResponseInput is an input type that accepts FileServerReferenceResponseArgs and FileServerReferenceResponseOutput values.
// You can construct a concrete instance of `FileServerReferenceResponseInput` via:
//
//          FileServerReferenceResponseArgs{...}
type FileServerReferenceResponseInput interface {
	pulumi.Input

	ToFileServerReferenceResponseOutput() FileServerReferenceResponseOutput
	ToFileServerReferenceResponseOutputWithContext(context.Context) FileServerReferenceResponseOutput
}

// File Server mounting configuration.
type FileServerReferenceResponseArgs struct {
	// Resource ID of the existing File Server to be mounted.
	FileServer ResourceIdResponseInput `pulumi:"fileServer"`
	// Mount options to be passed to mount command.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
	SourceDirectory pulumi.StringPtrInput `pulumi:"sourceDirectory"`
}

func (FileServerReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReferenceResponse)(nil)).Elem()
}

func (i FileServerReferenceResponseArgs) ToFileServerReferenceResponseOutput() FileServerReferenceResponseOutput {
	return i.ToFileServerReferenceResponseOutputWithContext(context.Background())
}

func (i FileServerReferenceResponseArgs) ToFileServerReferenceResponseOutputWithContext(ctx context.Context) FileServerReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReferenceResponseOutput)
}

// FileServerReferenceResponseArrayInput is an input type that accepts FileServerReferenceResponseArray and FileServerReferenceResponseArrayOutput values.
// You can construct a concrete instance of `FileServerReferenceResponseArrayInput` via:
//
//          FileServerReferenceResponseArray{ FileServerReferenceResponseArgs{...} }
type FileServerReferenceResponseArrayInput interface {
	pulumi.Input

	ToFileServerReferenceResponseArrayOutput() FileServerReferenceResponseArrayOutput
	ToFileServerReferenceResponseArrayOutputWithContext(context.Context) FileServerReferenceResponseArrayOutput
}

type FileServerReferenceResponseArray []FileServerReferenceResponseInput

func (FileServerReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileServerReferenceResponse)(nil)).Elem()
}

func (i FileServerReferenceResponseArray) ToFileServerReferenceResponseArrayOutput() FileServerReferenceResponseArrayOutput {
	return i.ToFileServerReferenceResponseArrayOutputWithContext(context.Background())
}

func (i FileServerReferenceResponseArray) ToFileServerReferenceResponseArrayOutputWithContext(ctx context.Context) FileServerReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReferenceResponseArrayOutput)
}

// File Server mounting configuration.
type FileServerReferenceResponseOutput struct{ *pulumi.OutputState }

func (FileServerReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReferenceResponse)(nil)).Elem()
}

func (o FileServerReferenceResponseOutput) ToFileServerReferenceResponseOutput() FileServerReferenceResponseOutput {
	return o
}

func (o FileServerReferenceResponseOutput) ToFileServerReferenceResponseOutputWithContext(ctx context.Context) FileServerReferenceResponseOutput {
	return o
}

// Resource ID of the existing File Server to be mounted.
func (o FileServerReferenceResponseOutput) FileServer() ResourceIdResponseOutput {
	return o.ApplyT(func(v FileServerReferenceResponse) ResourceIdResponse { return v.FileServer }).(ResourceIdResponseOutput)
}

// Mount options to be passed to mount command.
func (o FileServerReferenceResponseOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerReferenceResponse) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o FileServerReferenceResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerReferenceResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
func (o FileServerReferenceResponseOutput) SourceDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerReferenceResponse) *string { return v.SourceDirectory }).(pulumi.StringPtrOutput)
}

type FileServerReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (FileServerReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileServerReferenceResponse)(nil)).Elem()
}

func (o FileServerReferenceResponseArrayOutput) ToFileServerReferenceResponseArrayOutput() FileServerReferenceResponseArrayOutput {
	return o
}

func (o FileServerReferenceResponseArrayOutput) ToFileServerReferenceResponseArrayOutputWithContext(ctx context.Context) FileServerReferenceResponseArrayOutput {
	return o
}

func (o FileServerReferenceResponseArrayOutput) Index(i pulumi.IntInput) FileServerReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileServerReferenceResponse {
		return vs[0].([]FileServerReferenceResponse)[vs[1].(int)]
	}).(FileServerReferenceResponseOutput)
}

// Specifies the settings for Horovod job.
type HorovodSettings struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// HorovodSettingsInput is an input type that accepts HorovodSettingsArgs and HorovodSettingsOutput values.
// You can construct a concrete instance of `HorovodSettingsInput` via:
//
//          HorovodSettingsArgs{...}
type HorovodSettingsInput interface {
	pulumi.Input

	ToHorovodSettingsOutput() HorovodSettingsOutput
	ToHorovodSettingsOutputWithContext(context.Context) HorovodSettingsOutput
}

// Specifies the settings for Horovod job.
type HorovodSettingsArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (HorovodSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorovodSettings)(nil)).Elem()
}

func (i HorovodSettingsArgs) ToHorovodSettingsOutput() HorovodSettingsOutput {
	return i.ToHorovodSettingsOutputWithContext(context.Background())
}

func (i HorovodSettingsArgs) ToHorovodSettingsOutputWithContext(ctx context.Context) HorovodSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorovodSettingsOutput)
}

func (i HorovodSettingsArgs) ToHorovodSettingsPtrOutput() HorovodSettingsPtrOutput {
	return i.ToHorovodSettingsPtrOutputWithContext(context.Background())
}

func (i HorovodSettingsArgs) ToHorovodSettingsPtrOutputWithContext(ctx context.Context) HorovodSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorovodSettingsOutput).ToHorovodSettingsPtrOutputWithContext(ctx)
}

// HorovodSettingsPtrInput is an input type that accepts HorovodSettingsArgs, HorovodSettingsPtr and HorovodSettingsPtrOutput values.
// You can construct a concrete instance of `HorovodSettingsPtrInput` via:
//
//          HorovodSettingsArgs{...}
//
//  or:
//
//          nil
type HorovodSettingsPtrInput interface {
	pulumi.Input

	ToHorovodSettingsPtrOutput() HorovodSettingsPtrOutput
	ToHorovodSettingsPtrOutputWithContext(context.Context) HorovodSettingsPtrOutput
}

type horovodSettingsPtrType HorovodSettingsArgs

func HorovodSettingsPtr(v *HorovodSettingsArgs) HorovodSettingsPtrInput {
	return (*horovodSettingsPtrType)(v)
}

func (*horovodSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorovodSettings)(nil)).Elem()
}

func (i *horovodSettingsPtrType) ToHorovodSettingsPtrOutput() HorovodSettingsPtrOutput {
	return i.ToHorovodSettingsPtrOutputWithContext(context.Background())
}

func (i *horovodSettingsPtrType) ToHorovodSettingsPtrOutputWithContext(ctx context.Context) HorovodSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorovodSettingsPtrOutput)
}

// Specifies the settings for Horovod job.
type HorovodSettingsOutput struct{ *pulumi.OutputState }

func (HorovodSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorovodSettings)(nil)).Elem()
}

func (o HorovodSettingsOutput) ToHorovodSettingsOutput() HorovodSettingsOutput {
	return o
}

func (o HorovodSettingsOutput) ToHorovodSettingsOutputWithContext(ctx context.Context) HorovodSettingsOutput {
	return o
}

func (o HorovodSettingsOutput) ToHorovodSettingsPtrOutput() HorovodSettingsPtrOutput {
	return o.ToHorovodSettingsPtrOutputWithContext(context.Background())
}

func (o HorovodSettingsOutput) ToHorovodSettingsPtrOutputWithContext(ctx context.Context) HorovodSettingsPtrOutput {
	return o.ApplyT(func(v HorovodSettings) *HorovodSettings {
		return &v
	}).(HorovodSettingsPtrOutput)
}

// Command line arguments that need to be passed to the python script.
func (o HorovodSettingsOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorovodSettings) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o HorovodSettingsOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorovodSettings) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o HorovodSettingsOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorovodSettings) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o HorovodSettingsOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v HorovodSettings) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

type HorovodSettingsPtrOutput struct{ *pulumi.OutputState }

func (HorovodSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorovodSettings)(nil)).Elem()
}

func (o HorovodSettingsPtrOutput) ToHorovodSettingsPtrOutput() HorovodSettingsPtrOutput {
	return o
}

func (o HorovodSettingsPtrOutput) ToHorovodSettingsPtrOutputWithContext(ctx context.Context) HorovodSettingsPtrOutput {
	return o
}

func (o HorovodSettingsPtrOutput) Elem() HorovodSettingsOutput {
	return o.ApplyT(func(v *HorovodSettings) HorovodSettings { return *v }).(HorovodSettingsOutput)
}

// Command line arguments that need to be passed to the python script.
func (o HorovodSettingsPtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorovodSettings) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o HorovodSettingsPtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorovodSettings) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o HorovodSettingsPtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorovodSettings) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o HorovodSettingsPtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorovodSettings) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Specifies the settings for Horovod job.
type HorovodSettingsInvokeResponse struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// HorovodSettingsInvokeResponseInput is an input type that accepts HorovodSettingsInvokeResponseArgs and HorovodSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `HorovodSettingsInvokeResponseInput` via:
//
//          HorovodSettingsInvokeResponseArgs{...}
type HorovodSettingsInvokeResponseInput interface {
	pulumi.Input

	ToHorovodSettingsInvokeResponseOutput() HorovodSettingsInvokeResponseOutput
	ToHorovodSettingsInvokeResponseOutputWithContext(context.Context) HorovodSettingsInvokeResponseOutput
}

// Specifies the settings for Horovod job.
type HorovodSettingsInvokeResponseArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (HorovodSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorovodSettingsInvokeResponse)(nil)).Elem()
}

func (i HorovodSettingsInvokeResponseArgs) ToHorovodSettingsInvokeResponseOutput() HorovodSettingsInvokeResponseOutput {
	return i.ToHorovodSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i HorovodSettingsInvokeResponseArgs) ToHorovodSettingsInvokeResponseOutputWithContext(ctx context.Context) HorovodSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorovodSettingsInvokeResponseOutput)
}

// Specifies the settings for Horovod job.
type HorovodSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (HorovodSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorovodSettingsInvokeResponse)(nil)).Elem()
}

func (o HorovodSettingsInvokeResponseOutput) ToHorovodSettingsInvokeResponseOutput() HorovodSettingsInvokeResponseOutput {
	return o
}

func (o HorovodSettingsInvokeResponseOutput) ToHorovodSettingsInvokeResponseOutputWithContext(ctx context.Context) HorovodSettingsInvokeResponseOutput {
	return o
}

// Command line arguments that need to be passed to the python script.
func (o HorovodSettingsInvokeResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorovodSettingsInvokeResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o HorovodSettingsInvokeResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorovodSettingsInvokeResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o HorovodSettingsInvokeResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorovodSettingsInvokeResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o HorovodSettingsInvokeResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v HorovodSettingsInvokeResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

// Specifies the settings for Horovod job.
type HorovodSettingsResponse struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// HorovodSettingsResponseInput is an input type that accepts HorovodSettingsResponseArgs and HorovodSettingsResponseOutput values.
// You can construct a concrete instance of `HorovodSettingsResponseInput` via:
//
//          HorovodSettingsResponseArgs{...}
type HorovodSettingsResponseInput interface {
	pulumi.Input

	ToHorovodSettingsResponseOutput() HorovodSettingsResponseOutput
	ToHorovodSettingsResponseOutputWithContext(context.Context) HorovodSettingsResponseOutput
}

// Specifies the settings for Horovod job.
type HorovodSettingsResponseArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (HorovodSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorovodSettingsResponse)(nil)).Elem()
}

func (i HorovodSettingsResponseArgs) ToHorovodSettingsResponseOutput() HorovodSettingsResponseOutput {
	return i.ToHorovodSettingsResponseOutputWithContext(context.Background())
}

func (i HorovodSettingsResponseArgs) ToHorovodSettingsResponseOutputWithContext(ctx context.Context) HorovodSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorovodSettingsResponseOutput)
}

func (i HorovodSettingsResponseArgs) ToHorovodSettingsResponsePtrOutput() HorovodSettingsResponsePtrOutput {
	return i.ToHorovodSettingsResponsePtrOutputWithContext(context.Background())
}

func (i HorovodSettingsResponseArgs) ToHorovodSettingsResponsePtrOutputWithContext(ctx context.Context) HorovodSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorovodSettingsResponseOutput).ToHorovodSettingsResponsePtrOutputWithContext(ctx)
}

// HorovodSettingsResponsePtrInput is an input type that accepts HorovodSettingsResponseArgs, HorovodSettingsResponsePtr and HorovodSettingsResponsePtrOutput values.
// You can construct a concrete instance of `HorovodSettingsResponsePtrInput` via:
//
//          HorovodSettingsResponseArgs{...}
//
//  or:
//
//          nil
type HorovodSettingsResponsePtrInput interface {
	pulumi.Input

	ToHorovodSettingsResponsePtrOutput() HorovodSettingsResponsePtrOutput
	ToHorovodSettingsResponsePtrOutputWithContext(context.Context) HorovodSettingsResponsePtrOutput
}

type horovodSettingsResponsePtrType HorovodSettingsResponseArgs

func HorovodSettingsResponsePtr(v *HorovodSettingsResponseArgs) HorovodSettingsResponsePtrInput {
	return (*horovodSettingsResponsePtrType)(v)
}

func (*horovodSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorovodSettingsResponse)(nil)).Elem()
}

func (i *horovodSettingsResponsePtrType) ToHorovodSettingsResponsePtrOutput() HorovodSettingsResponsePtrOutput {
	return i.ToHorovodSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *horovodSettingsResponsePtrType) ToHorovodSettingsResponsePtrOutputWithContext(ctx context.Context) HorovodSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorovodSettingsResponsePtrOutput)
}

// Specifies the settings for Horovod job.
type HorovodSettingsResponseOutput struct{ *pulumi.OutputState }

func (HorovodSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorovodSettingsResponse)(nil)).Elem()
}

func (o HorovodSettingsResponseOutput) ToHorovodSettingsResponseOutput() HorovodSettingsResponseOutput {
	return o
}

func (o HorovodSettingsResponseOutput) ToHorovodSettingsResponseOutputWithContext(ctx context.Context) HorovodSettingsResponseOutput {
	return o
}

func (o HorovodSettingsResponseOutput) ToHorovodSettingsResponsePtrOutput() HorovodSettingsResponsePtrOutput {
	return o.ToHorovodSettingsResponsePtrOutputWithContext(context.Background())
}

func (o HorovodSettingsResponseOutput) ToHorovodSettingsResponsePtrOutputWithContext(ctx context.Context) HorovodSettingsResponsePtrOutput {
	return o.ApplyT(func(v HorovodSettingsResponse) *HorovodSettingsResponse {
		return &v
	}).(HorovodSettingsResponsePtrOutput)
}

// Command line arguments that need to be passed to the python script.
func (o HorovodSettingsResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorovodSettingsResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o HorovodSettingsResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorovodSettingsResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o HorovodSettingsResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorovodSettingsResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o HorovodSettingsResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v HorovodSettingsResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

type HorovodSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (HorovodSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorovodSettingsResponse)(nil)).Elem()
}

func (o HorovodSettingsResponsePtrOutput) ToHorovodSettingsResponsePtrOutput() HorovodSettingsResponsePtrOutput {
	return o
}

func (o HorovodSettingsResponsePtrOutput) ToHorovodSettingsResponsePtrOutputWithContext(ctx context.Context) HorovodSettingsResponsePtrOutput {
	return o
}

func (o HorovodSettingsResponsePtrOutput) Elem() HorovodSettingsResponseOutput {
	return o.ApplyT(func(v *HorovodSettingsResponse) HorovodSettingsResponse { return *v }).(HorovodSettingsResponseOutput)
}

// Command line arguments that need to be passed to the python script.
func (o HorovodSettingsResponsePtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorovodSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o HorovodSettingsResponsePtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorovodSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o HorovodSettingsResponsePtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorovodSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o HorovodSettingsResponsePtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorovodSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// The OS image reference.
type ImageReference struct {
	// Offer of the image.
	Offer string `pulumi:"offer"`
	// Publisher of the image.
	Publisher string `pulumi:"publisher"`
	// SKU of the image.
	Sku string `pulumi:"sku"`
	// Version of the image.
	Version *string `pulumi:"version"`
	// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
	VirtualMachineImageId *string `pulumi:"virtualMachineImageId"`
}

// ImageReferenceInput is an input type that accepts ImageReferenceArgs and ImageReferenceOutput values.
// You can construct a concrete instance of `ImageReferenceInput` via:
//
//          ImageReferenceArgs{...}
type ImageReferenceInput interface {
	pulumi.Input

	ToImageReferenceOutput() ImageReferenceOutput
	ToImageReferenceOutputWithContext(context.Context) ImageReferenceOutput
}

// The OS image reference.
type ImageReferenceArgs struct {
	// Offer of the image.
	Offer pulumi.StringInput `pulumi:"offer"`
	// Publisher of the image.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// SKU of the image.
	Sku pulumi.StringInput `pulumi:"sku"`
	// Version of the image.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
	VirtualMachineImageId pulumi.StringPtrInput `pulumi:"virtualMachineImageId"`
}

func (ImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (i ImageReferenceArgs) ToImageReferenceOutput() ImageReferenceOutput {
	return i.ToImageReferenceOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput)
}

func (i ImageReferenceArgs) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput).ToImageReferencePtrOutputWithContext(ctx)
}

// ImageReferencePtrInput is an input type that accepts ImageReferenceArgs, ImageReferencePtr and ImageReferencePtrOutput values.
// You can construct a concrete instance of `ImageReferencePtrInput` via:
//
//          ImageReferenceArgs{...}
//
//  or:
//
//          nil
type ImageReferencePtrInput interface {
	pulumi.Input

	ToImageReferencePtrOutput() ImageReferencePtrOutput
	ToImageReferencePtrOutputWithContext(context.Context) ImageReferencePtrOutput
}

type imageReferencePtrType ImageReferenceArgs

func ImageReferencePtr(v *ImageReferenceArgs) ImageReferencePtrInput {
	return (*imageReferencePtrType)(v)
}

func (*imageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (i *imageReferencePtrType) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i *imageReferencePtrType) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferencePtrOutput)
}

// The OS image reference.
type ImageReferenceOutput struct{ *pulumi.OutputState }

func (ImageReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (o ImageReferenceOutput) ToImageReferenceOutput() ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o.ToImageReferencePtrOutputWithContext(context.Background())
}

func (o ImageReferenceOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o.ApplyT(func(v ImageReference) *ImageReference {
		return &v
	}).(ImageReferencePtrOutput)
}

// Offer of the image.
func (o ImageReferenceOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReference) string { return v.Offer }).(pulumi.StringOutput)
}

// Publisher of the image.
func (o ImageReferenceOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReference) string { return v.Publisher }).(pulumi.StringOutput)
}

// SKU of the image.
func (o ImageReferenceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReference) string { return v.Sku }).(pulumi.StringOutput)
}

// Version of the image.
func (o ImageReferenceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
func (o ImageReferenceOutput) VirtualMachineImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.VirtualMachineImageId }).(pulumi.StringPtrOutput)
}

type ImageReferencePtrOutput struct{ *pulumi.OutputState }

func (ImageReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) Elem() ImageReferenceOutput {
	return o.ApplyT(func(v *ImageReference) ImageReference { return *v }).(ImageReferenceOutput)
}

// Offer of the image.
func (o ImageReferencePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Offer
	}).(pulumi.StringPtrOutput)
}

// Publisher of the image.
func (o ImageReferencePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// SKU of the image.
func (o ImageReferencePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// Version of the image.
func (o ImageReferencePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
func (o ImageReferencePtrOutput) VirtualMachineImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.VirtualMachineImageId
	}).(pulumi.StringPtrOutput)
}

// The OS image reference.
type ImageReferenceInvokeResponse struct {
	// Offer of the image.
	Offer string `pulumi:"offer"`
	// Publisher of the image.
	Publisher string `pulumi:"publisher"`
	// SKU of the image.
	Sku string `pulumi:"sku"`
	// Version of the image.
	Version *string `pulumi:"version"`
	// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
	VirtualMachineImageId *string `pulumi:"virtualMachineImageId"`
}

// ImageReferenceInvokeResponseInput is an input type that accepts ImageReferenceInvokeResponseArgs and ImageReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `ImageReferenceInvokeResponseInput` via:
//
//          ImageReferenceInvokeResponseArgs{...}
type ImageReferenceInvokeResponseInput interface {
	pulumi.Input

	ToImageReferenceInvokeResponseOutput() ImageReferenceInvokeResponseOutput
	ToImageReferenceInvokeResponseOutputWithContext(context.Context) ImageReferenceInvokeResponseOutput
}

// The OS image reference.
type ImageReferenceInvokeResponseArgs struct {
	// Offer of the image.
	Offer pulumi.StringInput `pulumi:"offer"`
	// Publisher of the image.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// SKU of the image.
	Sku pulumi.StringInput `pulumi:"sku"`
	// Version of the image.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
	VirtualMachineImageId pulumi.StringPtrInput `pulumi:"virtualMachineImageId"`
}

func (ImageReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceInvokeResponse)(nil)).Elem()
}

func (i ImageReferenceInvokeResponseArgs) ToImageReferenceInvokeResponseOutput() ImageReferenceInvokeResponseOutput {
	return i.ToImageReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i ImageReferenceInvokeResponseArgs) ToImageReferenceInvokeResponseOutputWithContext(ctx context.Context) ImageReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceInvokeResponseOutput)
}

func (i ImageReferenceInvokeResponseArgs) ToImageReferenceInvokeResponsePtrOutput() ImageReferenceInvokeResponsePtrOutput {
	return i.ToImageReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ImageReferenceInvokeResponseArgs) ToImageReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) ImageReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceInvokeResponseOutput).ToImageReferenceInvokeResponsePtrOutputWithContext(ctx)
}

// ImageReferenceInvokeResponsePtrInput is an input type that accepts ImageReferenceInvokeResponseArgs, ImageReferenceInvokeResponsePtr and ImageReferenceInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ImageReferenceInvokeResponsePtrInput` via:
//
//          ImageReferenceInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ImageReferenceInvokeResponsePtrInput interface {
	pulumi.Input

	ToImageReferenceInvokeResponsePtrOutput() ImageReferenceInvokeResponsePtrOutput
	ToImageReferenceInvokeResponsePtrOutputWithContext(context.Context) ImageReferenceInvokeResponsePtrOutput
}

type imageReferenceInvokeResponsePtrType ImageReferenceInvokeResponseArgs

func ImageReferenceInvokeResponsePtr(v *ImageReferenceInvokeResponseArgs) ImageReferenceInvokeResponsePtrInput {
	return (*imageReferenceInvokeResponsePtrType)(v)
}

func (*imageReferenceInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceInvokeResponse)(nil)).Elem()
}

func (i *imageReferenceInvokeResponsePtrType) ToImageReferenceInvokeResponsePtrOutput() ImageReferenceInvokeResponsePtrOutput {
	return i.ToImageReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *imageReferenceInvokeResponsePtrType) ToImageReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) ImageReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceInvokeResponsePtrOutput)
}

// The OS image reference.
type ImageReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceInvokeResponse)(nil)).Elem()
}

func (o ImageReferenceInvokeResponseOutput) ToImageReferenceInvokeResponseOutput() ImageReferenceInvokeResponseOutput {
	return o
}

func (o ImageReferenceInvokeResponseOutput) ToImageReferenceInvokeResponseOutputWithContext(ctx context.Context) ImageReferenceInvokeResponseOutput {
	return o
}

func (o ImageReferenceInvokeResponseOutput) ToImageReferenceInvokeResponsePtrOutput() ImageReferenceInvokeResponsePtrOutput {
	return o.ToImageReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ImageReferenceInvokeResponseOutput) ToImageReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) ImageReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v ImageReferenceInvokeResponse) *ImageReferenceInvokeResponse {
		return &v
	}).(ImageReferenceInvokeResponsePtrOutput)
}

// Offer of the image.
func (o ImageReferenceInvokeResponseOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReferenceInvokeResponse) string { return v.Offer }).(pulumi.StringOutput)
}

// Publisher of the image.
func (o ImageReferenceInvokeResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReferenceInvokeResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// SKU of the image.
func (o ImageReferenceInvokeResponseOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReferenceInvokeResponse) string { return v.Sku }).(pulumi.StringOutput)
}

// Version of the image.
func (o ImageReferenceInvokeResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceInvokeResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
func (o ImageReferenceInvokeResponseOutput) VirtualMachineImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceInvokeResponse) *string { return v.VirtualMachineImageId }).(pulumi.StringPtrOutput)
}

type ImageReferenceInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageReferenceInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceInvokeResponse)(nil)).Elem()
}

func (o ImageReferenceInvokeResponsePtrOutput) ToImageReferenceInvokeResponsePtrOutput() ImageReferenceInvokeResponsePtrOutput {
	return o
}

func (o ImageReferenceInvokeResponsePtrOutput) ToImageReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) ImageReferenceInvokeResponsePtrOutput {
	return o
}

func (o ImageReferenceInvokeResponsePtrOutput) Elem() ImageReferenceInvokeResponseOutput {
	return o.ApplyT(func(v *ImageReferenceInvokeResponse) ImageReferenceInvokeResponse { return *v }).(ImageReferenceInvokeResponseOutput)
}

// Offer of the image.
func (o ImageReferenceInvokeResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Offer
	}).(pulumi.StringPtrOutput)
}

// Publisher of the image.
func (o ImageReferenceInvokeResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// SKU of the image.
func (o ImageReferenceInvokeResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// Version of the image.
func (o ImageReferenceInvokeResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
func (o ImageReferenceInvokeResponsePtrOutput) VirtualMachineImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.VirtualMachineImageId
	}).(pulumi.StringPtrOutput)
}

// The OS image reference.
type ImageReferenceResponse struct {
	// Offer of the image.
	Offer string `pulumi:"offer"`
	// Publisher of the image.
	Publisher string `pulumi:"publisher"`
	// SKU of the image.
	Sku string `pulumi:"sku"`
	// Version of the image.
	Version *string `pulumi:"version"`
	// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
	VirtualMachineImageId *string `pulumi:"virtualMachineImageId"`
}

// ImageReferenceResponseInput is an input type that accepts ImageReferenceResponseArgs and ImageReferenceResponseOutput values.
// You can construct a concrete instance of `ImageReferenceResponseInput` via:
//
//          ImageReferenceResponseArgs{...}
type ImageReferenceResponseInput interface {
	pulumi.Input

	ToImageReferenceResponseOutput() ImageReferenceResponseOutput
	ToImageReferenceResponseOutputWithContext(context.Context) ImageReferenceResponseOutput
}

// The OS image reference.
type ImageReferenceResponseArgs struct {
	// Offer of the image.
	Offer pulumi.StringInput `pulumi:"offer"`
	// Publisher of the image.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// SKU of the image.
	Sku pulumi.StringInput `pulumi:"sku"`
	// Version of the image.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
	VirtualMachineImageId pulumi.StringPtrInput `pulumi:"virtualMachineImageId"`
}

func (ImageReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return i.ToImageReferenceResponseOutputWithContext(context.Background())
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponseOutput)
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return i.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponseOutput).ToImageReferenceResponsePtrOutputWithContext(ctx)
}

// ImageReferenceResponsePtrInput is an input type that accepts ImageReferenceResponseArgs, ImageReferenceResponsePtr and ImageReferenceResponsePtrOutput values.
// You can construct a concrete instance of `ImageReferenceResponsePtrInput` via:
//
//          ImageReferenceResponseArgs{...}
//
//  or:
//
//          nil
type ImageReferenceResponsePtrInput interface {
	pulumi.Input

	ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput
	ToImageReferenceResponsePtrOutputWithContext(context.Context) ImageReferenceResponsePtrOutput
}

type imageReferenceResponsePtrType ImageReferenceResponseArgs

func ImageReferenceResponsePtr(v *ImageReferenceResponseArgs) ImageReferenceResponsePtrInput {
	return (*imageReferenceResponsePtrType)(v)
}

func (*imageReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (i *imageReferenceResponsePtrType) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return i.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *imageReferenceResponsePtrType) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponsePtrOutput)
}

// The OS image reference.
type ImageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *ImageReferenceResponse {
		return &v
	}).(ImageReferenceResponsePtrOutput)
}

// Offer of the image.
func (o ImageReferenceResponseOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReferenceResponse) string { return v.Offer }).(pulumi.StringOutput)
}

// Publisher of the image.
func (o ImageReferenceResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReferenceResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// SKU of the image.
func (o ImageReferenceResponseOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReferenceResponse) string { return v.Sku }).(pulumi.StringOutput)
}

// Version of the image.
func (o ImageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
func (o ImageReferenceResponseOutput) VirtualMachineImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.VirtualMachineImageId }).(pulumi.StringPtrOutput)
}

type ImageReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) Elem() ImageReferenceResponseOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) ImageReferenceResponse { return *v }).(ImageReferenceResponseOutput)
}

// Offer of the image.
func (o ImageReferenceResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Offer
	}).(pulumi.StringPtrOutput)
}

// Publisher of the image.
func (o ImageReferenceResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// SKU of the image.
func (o ImageReferenceResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// Version of the image.
func (o ImageReferenceResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
func (o ImageReferenceResponsePtrOutput) VirtualMachineImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.VirtualMachineImageId
	}).(pulumi.StringPtrOutput)
}

// Information about docker image for the job.
type ImageSourceRegistry struct {
	// Credentials to access the private docker repository.
	Credentials *PrivateRegistryCredentials `pulumi:"credentials"`
	// The name of the image in the image repository.
	Image string `pulumi:"image"`
	// URL for image repository.
	ServerUrl *string `pulumi:"serverUrl"`
}

// ImageSourceRegistryInput is an input type that accepts ImageSourceRegistryArgs and ImageSourceRegistryOutput values.
// You can construct a concrete instance of `ImageSourceRegistryInput` via:
//
//          ImageSourceRegistryArgs{...}
type ImageSourceRegistryInput interface {
	pulumi.Input

	ToImageSourceRegistryOutput() ImageSourceRegistryOutput
	ToImageSourceRegistryOutputWithContext(context.Context) ImageSourceRegistryOutput
}

// Information about docker image for the job.
type ImageSourceRegistryArgs struct {
	// Credentials to access the private docker repository.
	Credentials PrivateRegistryCredentialsPtrInput `pulumi:"credentials"`
	// The name of the image in the image repository.
	Image pulumi.StringInput `pulumi:"image"`
	// URL for image repository.
	ServerUrl pulumi.StringPtrInput `pulumi:"serverUrl"`
}

func (ImageSourceRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSourceRegistry)(nil)).Elem()
}

func (i ImageSourceRegistryArgs) ToImageSourceRegistryOutput() ImageSourceRegistryOutput {
	return i.ToImageSourceRegistryOutputWithContext(context.Background())
}

func (i ImageSourceRegistryArgs) ToImageSourceRegistryOutputWithContext(ctx context.Context) ImageSourceRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSourceRegistryOutput)
}

func (i ImageSourceRegistryArgs) ToImageSourceRegistryPtrOutput() ImageSourceRegistryPtrOutput {
	return i.ToImageSourceRegistryPtrOutputWithContext(context.Background())
}

func (i ImageSourceRegistryArgs) ToImageSourceRegistryPtrOutputWithContext(ctx context.Context) ImageSourceRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSourceRegistryOutput).ToImageSourceRegistryPtrOutputWithContext(ctx)
}

// ImageSourceRegistryPtrInput is an input type that accepts ImageSourceRegistryArgs, ImageSourceRegistryPtr and ImageSourceRegistryPtrOutput values.
// You can construct a concrete instance of `ImageSourceRegistryPtrInput` via:
//
//          ImageSourceRegistryArgs{...}
//
//  or:
//
//          nil
type ImageSourceRegistryPtrInput interface {
	pulumi.Input

	ToImageSourceRegistryPtrOutput() ImageSourceRegistryPtrOutput
	ToImageSourceRegistryPtrOutputWithContext(context.Context) ImageSourceRegistryPtrOutput
}

type imageSourceRegistryPtrType ImageSourceRegistryArgs

func ImageSourceRegistryPtr(v *ImageSourceRegistryArgs) ImageSourceRegistryPtrInput {
	return (*imageSourceRegistryPtrType)(v)
}

func (*imageSourceRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSourceRegistry)(nil)).Elem()
}

func (i *imageSourceRegistryPtrType) ToImageSourceRegistryPtrOutput() ImageSourceRegistryPtrOutput {
	return i.ToImageSourceRegistryPtrOutputWithContext(context.Background())
}

func (i *imageSourceRegistryPtrType) ToImageSourceRegistryPtrOutputWithContext(ctx context.Context) ImageSourceRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSourceRegistryPtrOutput)
}

// Information about docker image for the job.
type ImageSourceRegistryOutput struct{ *pulumi.OutputState }

func (ImageSourceRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSourceRegistry)(nil)).Elem()
}

func (o ImageSourceRegistryOutput) ToImageSourceRegistryOutput() ImageSourceRegistryOutput {
	return o
}

func (o ImageSourceRegistryOutput) ToImageSourceRegistryOutputWithContext(ctx context.Context) ImageSourceRegistryOutput {
	return o
}

func (o ImageSourceRegistryOutput) ToImageSourceRegistryPtrOutput() ImageSourceRegistryPtrOutput {
	return o.ToImageSourceRegistryPtrOutputWithContext(context.Background())
}

func (o ImageSourceRegistryOutput) ToImageSourceRegistryPtrOutputWithContext(ctx context.Context) ImageSourceRegistryPtrOutput {
	return o.ApplyT(func(v ImageSourceRegistry) *ImageSourceRegistry {
		return &v
	}).(ImageSourceRegistryPtrOutput)
}

// Credentials to access the private docker repository.
func (o ImageSourceRegistryOutput) Credentials() PrivateRegistryCredentialsPtrOutput {
	return o.ApplyT(func(v ImageSourceRegistry) *PrivateRegistryCredentials { return v.Credentials }).(PrivateRegistryCredentialsPtrOutput)
}

// The name of the image in the image repository.
func (o ImageSourceRegistryOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSourceRegistry) string { return v.Image }).(pulumi.StringOutput)
}

// URL for image repository.
func (o ImageSourceRegistryOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageSourceRegistry) *string { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

type ImageSourceRegistryPtrOutput struct{ *pulumi.OutputState }

func (ImageSourceRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSourceRegistry)(nil)).Elem()
}

func (o ImageSourceRegistryPtrOutput) ToImageSourceRegistryPtrOutput() ImageSourceRegistryPtrOutput {
	return o
}

func (o ImageSourceRegistryPtrOutput) ToImageSourceRegistryPtrOutputWithContext(ctx context.Context) ImageSourceRegistryPtrOutput {
	return o
}

func (o ImageSourceRegistryPtrOutput) Elem() ImageSourceRegistryOutput {
	return o.ApplyT(func(v *ImageSourceRegistry) ImageSourceRegistry { return *v }).(ImageSourceRegistryOutput)
}

// Credentials to access the private docker repository.
func (o ImageSourceRegistryPtrOutput) Credentials() PrivateRegistryCredentialsPtrOutput {
	return o.ApplyT(func(v *ImageSourceRegistry) *PrivateRegistryCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(PrivateRegistryCredentialsPtrOutput)
}

// The name of the image in the image repository.
func (o ImageSourceRegistryPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSourceRegistry) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// URL for image repository.
func (o ImageSourceRegistryPtrOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSourceRegistry) *string {
		if v == nil {
			return nil
		}
		return v.ServerUrl
	}).(pulumi.StringPtrOutput)
}

// Information about docker image for the job.
type ImageSourceRegistryInvokeResponse struct {
	// Credentials to access the private docker repository.
	Credentials *PrivateRegistryCredentialsInvokeResponse `pulumi:"credentials"`
	// The name of the image in the image repository.
	Image string `pulumi:"image"`
	// URL for image repository.
	ServerUrl *string `pulumi:"serverUrl"`
}

// ImageSourceRegistryInvokeResponseInput is an input type that accepts ImageSourceRegistryInvokeResponseArgs and ImageSourceRegistryInvokeResponseOutput values.
// You can construct a concrete instance of `ImageSourceRegistryInvokeResponseInput` via:
//
//          ImageSourceRegistryInvokeResponseArgs{...}
type ImageSourceRegistryInvokeResponseInput interface {
	pulumi.Input

	ToImageSourceRegistryInvokeResponseOutput() ImageSourceRegistryInvokeResponseOutput
	ToImageSourceRegistryInvokeResponseOutputWithContext(context.Context) ImageSourceRegistryInvokeResponseOutput
}

// Information about docker image for the job.
type ImageSourceRegistryInvokeResponseArgs struct {
	// Credentials to access the private docker repository.
	Credentials PrivateRegistryCredentialsInvokeResponsePtrInput `pulumi:"credentials"`
	// The name of the image in the image repository.
	Image pulumi.StringInput `pulumi:"image"`
	// URL for image repository.
	ServerUrl pulumi.StringPtrInput `pulumi:"serverUrl"`
}

func (ImageSourceRegistryInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSourceRegistryInvokeResponse)(nil)).Elem()
}

func (i ImageSourceRegistryInvokeResponseArgs) ToImageSourceRegistryInvokeResponseOutput() ImageSourceRegistryInvokeResponseOutput {
	return i.ToImageSourceRegistryInvokeResponseOutputWithContext(context.Background())
}

func (i ImageSourceRegistryInvokeResponseArgs) ToImageSourceRegistryInvokeResponseOutputWithContext(ctx context.Context) ImageSourceRegistryInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSourceRegistryInvokeResponseOutput)
}

// Information about docker image for the job.
type ImageSourceRegistryInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageSourceRegistryInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSourceRegistryInvokeResponse)(nil)).Elem()
}

func (o ImageSourceRegistryInvokeResponseOutput) ToImageSourceRegistryInvokeResponseOutput() ImageSourceRegistryInvokeResponseOutput {
	return o
}

func (o ImageSourceRegistryInvokeResponseOutput) ToImageSourceRegistryInvokeResponseOutputWithContext(ctx context.Context) ImageSourceRegistryInvokeResponseOutput {
	return o
}

// Credentials to access the private docker repository.
func (o ImageSourceRegistryInvokeResponseOutput) Credentials() PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ImageSourceRegistryInvokeResponse) *PrivateRegistryCredentialsInvokeResponse {
		return v.Credentials
	}).(PrivateRegistryCredentialsInvokeResponsePtrOutput)
}

// The name of the image in the image repository.
func (o ImageSourceRegistryInvokeResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSourceRegistryInvokeResponse) string { return v.Image }).(pulumi.StringOutput)
}

// URL for image repository.
func (o ImageSourceRegistryInvokeResponseOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageSourceRegistryInvokeResponse) *string { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

// Information about docker image for the job.
type ImageSourceRegistryResponse struct {
	// Credentials to access the private docker repository.
	Credentials *PrivateRegistryCredentialsResponse `pulumi:"credentials"`
	// The name of the image in the image repository.
	Image string `pulumi:"image"`
	// URL for image repository.
	ServerUrl *string `pulumi:"serverUrl"`
}

// ImageSourceRegistryResponseInput is an input type that accepts ImageSourceRegistryResponseArgs and ImageSourceRegistryResponseOutput values.
// You can construct a concrete instance of `ImageSourceRegistryResponseInput` via:
//
//          ImageSourceRegistryResponseArgs{...}
type ImageSourceRegistryResponseInput interface {
	pulumi.Input

	ToImageSourceRegistryResponseOutput() ImageSourceRegistryResponseOutput
	ToImageSourceRegistryResponseOutputWithContext(context.Context) ImageSourceRegistryResponseOutput
}

// Information about docker image for the job.
type ImageSourceRegistryResponseArgs struct {
	// Credentials to access the private docker repository.
	Credentials PrivateRegistryCredentialsResponsePtrInput `pulumi:"credentials"`
	// The name of the image in the image repository.
	Image pulumi.StringInput `pulumi:"image"`
	// URL for image repository.
	ServerUrl pulumi.StringPtrInput `pulumi:"serverUrl"`
}

func (ImageSourceRegistryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSourceRegistryResponse)(nil)).Elem()
}

func (i ImageSourceRegistryResponseArgs) ToImageSourceRegistryResponseOutput() ImageSourceRegistryResponseOutput {
	return i.ToImageSourceRegistryResponseOutputWithContext(context.Background())
}

func (i ImageSourceRegistryResponseArgs) ToImageSourceRegistryResponseOutputWithContext(ctx context.Context) ImageSourceRegistryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSourceRegistryResponseOutput)
}

func (i ImageSourceRegistryResponseArgs) ToImageSourceRegistryResponsePtrOutput() ImageSourceRegistryResponsePtrOutput {
	return i.ToImageSourceRegistryResponsePtrOutputWithContext(context.Background())
}

func (i ImageSourceRegistryResponseArgs) ToImageSourceRegistryResponsePtrOutputWithContext(ctx context.Context) ImageSourceRegistryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSourceRegistryResponseOutput).ToImageSourceRegistryResponsePtrOutputWithContext(ctx)
}

// ImageSourceRegistryResponsePtrInput is an input type that accepts ImageSourceRegistryResponseArgs, ImageSourceRegistryResponsePtr and ImageSourceRegistryResponsePtrOutput values.
// You can construct a concrete instance of `ImageSourceRegistryResponsePtrInput` via:
//
//          ImageSourceRegistryResponseArgs{...}
//
//  or:
//
//          nil
type ImageSourceRegistryResponsePtrInput interface {
	pulumi.Input

	ToImageSourceRegistryResponsePtrOutput() ImageSourceRegistryResponsePtrOutput
	ToImageSourceRegistryResponsePtrOutputWithContext(context.Context) ImageSourceRegistryResponsePtrOutput
}

type imageSourceRegistryResponsePtrType ImageSourceRegistryResponseArgs

func ImageSourceRegistryResponsePtr(v *ImageSourceRegistryResponseArgs) ImageSourceRegistryResponsePtrInput {
	return (*imageSourceRegistryResponsePtrType)(v)
}

func (*imageSourceRegistryResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSourceRegistryResponse)(nil)).Elem()
}

func (i *imageSourceRegistryResponsePtrType) ToImageSourceRegistryResponsePtrOutput() ImageSourceRegistryResponsePtrOutput {
	return i.ToImageSourceRegistryResponsePtrOutputWithContext(context.Background())
}

func (i *imageSourceRegistryResponsePtrType) ToImageSourceRegistryResponsePtrOutputWithContext(ctx context.Context) ImageSourceRegistryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSourceRegistryResponsePtrOutput)
}

// Information about docker image for the job.
type ImageSourceRegistryResponseOutput struct{ *pulumi.OutputState }

func (ImageSourceRegistryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSourceRegistryResponse)(nil)).Elem()
}

func (o ImageSourceRegistryResponseOutput) ToImageSourceRegistryResponseOutput() ImageSourceRegistryResponseOutput {
	return o
}

func (o ImageSourceRegistryResponseOutput) ToImageSourceRegistryResponseOutputWithContext(ctx context.Context) ImageSourceRegistryResponseOutput {
	return o
}

func (o ImageSourceRegistryResponseOutput) ToImageSourceRegistryResponsePtrOutput() ImageSourceRegistryResponsePtrOutput {
	return o.ToImageSourceRegistryResponsePtrOutputWithContext(context.Background())
}

func (o ImageSourceRegistryResponseOutput) ToImageSourceRegistryResponsePtrOutputWithContext(ctx context.Context) ImageSourceRegistryResponsePtrOutput {
	return o.ApplyT(func(v ImageSourceRegistryResponse) *ImageSourceRegistryResponse {
		return &v
	}).(ImageSourceRegistryResponsePtrOutput)
}

// Credentials to access the private docker repository.
func (o ImageSourceRegistryResponseOutput) Credentials() PrivateRegistryCredentialsResponsePtrOutput {
	return o.ApplyT(func(v ImageSourceRegistryResponse) *PrivateRegistryCredentialsResponse { return v.Credentials }).(PrivateRegistryCredentialsResponsePtrOutput)
}

// The name of the image in the image repository.
func (o ImageSourceRegistryResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSourceRegistryResponse) string { return v.Image }).(pulumi.StringOutput)
}

// URL for image repository.
func (o ImageSourceRegistryResponseOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageSourceRegistryResponse) *string { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

type ImageSourceRegistryResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageSourceRegistryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSourceRegistryResponse)(nil)).Elem()
}

func (o ImageSourceRegistryResponsePtrOutput) ToImageSourceRegistryResponsePtrOutput() ImageSourceRegistryResponsePtrOutput {
	return o
}

func (o ImageSourceRegistryResponsePtrOutput) ToImageSourceRegistryResponsePtrOutputWithContext(ctx context.Context) ImageSourceRegistryResponsePtrOutput {
	return o
}

func (o ImageSourceRegistryResponsePtrOutput) Elem() ImageSourceRegistryResponseOutput {
	return o.ApplyT(func(v *ImageSourceRegistryResponse) ImageSourceRegistryResponse { return *v }).(ImageSourceRegistryResponseOutput)
}

// Credentials to access the private docker repository.
func (o ImageSourceRegistryResponsePtrOutput) Credentials() PrivateRegistryCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *ImageSourceRegistryResponse) *PrivateRegistryCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(PrivateRegistryCredentialsResponsePtrOutput)
}

// The name of the image in the image repository.
func (o ImageSourceRegistryResponsePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSourceRegistryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// URL for image repository.
func (o ImageSourceRegistryResponsePtrOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSourceRegistryResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerUrl
	}).(pulumi.StringPtrOutput)
}

// Input directory for the job.
type InputDirectory struct {
	// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id string `pulumi:"id"`
	// The path to the input directory.
	Path string `pulumi:"path"`
}

// InputDirectoryInput is an input type that accepts InputDirectoryArgs and InputDirectoryOutput values.
// You can construct a concrete instance of `InputDirectoryInput` via:
//
//          InputDirectoryArgs{...}
type InputDirectoryInput interface {
	pulumi.Input

	ToInputDirectoryOutput() InputDirectoryOutput
	ToInputDirectoryOutputWithContext(context.Context) InputDirectoryOutput
}

// Input directory for the job.
type InputDirectoryArgs struct {
	// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id pulumi.StringInput `pulumi:"id"`
	// The path to the input directory.
	Path pulumi.StringInput `pulumi:"path"`
}

func (InputDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDirectory)(nil)).Elem()
}

func (i InputDirectoryArgs) ToInputDirectoryOutput() InputDirectoryOutput {
	return i.ToInputDirectoryOutputWithContext(context.Background())
}

func (i InputDirectoryArgs) ToInputDirectoryOutputWithContext(ctx context.Context) InputDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputDirectoryOutput)
}

// InputDirectoryArrayInput is an input type that accepts InputDirectoryArray and InputDirectoryArrayOutput values.
// You can construct a concrete instance of `InputDirectoryArrayInput` via:
//
//          InputDirectoryArray{ InputDirectoryArgs{...} }
type InputDirectoryArrayInput interface {
	pulumi.Input

	ToInputDirectoryArrayOutput() InputDirectoryArrayOutput
	ToInputDirectoryArrayOutputWithContext(context.Context) InputDirectoryArrayOutput
}

type InputDirectoryArray []InputDirectoryInput

func (InputDirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputDirectory)(nil)).Elem()
}

func (i InputDirectoryArray) ToInputDirectoryArrayOutput() InputDirectoryArrayOutput {
	return i.ToInputDirectoryArrayOutputWithContext(context.Background())
}

func (i InputDirectoryArray) ToInputDirectoryArrayOutputWithContext(ctx context.Context) InputDirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputDirectoryArrayOutput)
}

// Input directory for the job.
type InputDirectoryOutput struct{ *pulumi.OutputState }

func (InputDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDirectory)(nil)).Elem()
}

func (o InputDirectoryOutput) ToInputDirectoryOutput() InputDirectoryOutput {
	return o
}

func (o InputDirectoryOutput) ToInputDirectoryOutputWithContext(ctx context.Context) InputDirectoryOutput {
	return o
}

// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
func (o InputDirectoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InputDirectory) string { return v.Id }).(pulumi.StringOutput)
}

// The path to the input directory.
func (o InputDirectoryOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v InputDirectory) string { return v.Path }).(pulumi.StringOutput)
}

type InputDirectoryArrayOutput struct{ *pulumi.OutputState }

func (InputDirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputDirectory)(nil)).Elem()
}

func (o InputDirectoryArrayOutput) ToInputDirectoryArrayOutput() InputDirectoryArrayOutput {
	return o
}

func (o InputDirectoryArrayOutput) ToInputDirectoryArrayOutputWithContext(ctx context.Context) InputDirectoryArrayOutput {
	return o
}

func (o InputDirectoryArrayOutput) Index(i pulumi.IntInput) InputDirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputDirectory {
		return vs[0].([]InputDirectory)[vs[1].(int)]
	}).(InputDirectoryOutput)
}

// Input directory for the job.
type InputDirectoryInvokeResponse struct {
	// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id string `pulumi:"id"`
	// The path to the input directory.
	Path string `pulumi:"path"`
}

// InputDirectoryInvokeResponseInput is an input type that accepts InputDirectoryInvokeResponseArgs and InputDirectoryInvokeResponseOutput values.
// You can construct a concrete instance of `InputDirectoryInvokeResponseInput` via:
//
//          InputDirectoryInvokeResponseArgs{...}
type InputDirectoryInvokeResponseInput interface {
	pulumi.Input

	ToInputDirectoryInvokeResponseOutput() InputDirectoryInvokeResponseOutput
	ToInputDirectoryInvokeResponseOutputWithContext(context.Context) InputDirectoryInvokeResponseOutput
}

// Input directory for the job.
type InputDirectoryInvokeResponseArgs struct {
	// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id pulumi.StringInput `pulumi:"id"`
	// The path to the input directory.
	Path pulumi.StringInput `pulumi:"path"`
}

func (InputDirectoryInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDirectoryInvokeResponse)(nil)).Elem()
}

func (i InputDirectoryInvokeResponseArgs) ToInputDirectoryInvokeResponseOutput() InputDirectoryInvokeResponseOutput {
	return i.ToInputDirectoryInvokeResponseOutputWithContext(context.Background())
}

func (i InputDirectoryInvokeResponseArgs) ToInputDirectoryInvokeResponseOutputWithContext(ctx context.Context) InputDirectoryInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputDirectoryInvokeResponseOutput)
}

// InputDirectoryInvokeResponseArrayInput is an input type that accepts InputDirectoryInvokeResponseArray and InputDirectoryInvokeResponseArrayOutput values.
// You can construct a concrete instance of `InputDirectoryInvokeResponseArrayInput` via:
//
//          InputDirectoryInvokeResponseArray{ InputDirectoryInvokeResponseArgs{...} }
type InputDirectoryInvokeResponseArrayInput interface {
	pulumi.Input

	ToInputDirectoryInvokeResponseArrayOutput() InputDirectoryInvokeResponseArrayOutput
	ToInputDirectoryInvokeResponseArrayOutputWithContext(context.Context) InputDirectoryInvokeResponseArrayOutput
}

type InputDirectoryInvokeResponseArray []InputDirectoryInvokeResponseInput

func (InputDirectoryInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputDirectoryInvokeResponse)(nil)).Elem()
}

func (i InputDirectoryInvokeResponseArray) ToInputDirectoryInvokeResponseArrayOutput() InputDirectoryInvokeResponseArrayOutput {
	return i.ToInputDirectoryInvokeResponseArrayOutputWithContext(context.Background())
}

func (i InputDirectoryInvokeResponseArray) ToInputDirectoryInvokeResponseArrayOutputWithContext(ctx context.Context) InputDirectoryInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputDirectoryInvokeResponseArrayOutput)
}

// Input directory for the job.
type InputDirectoryInvokeResponseOutput struct{ *pulumi.OutputState }

func (InputDirectoryInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDirectoryInvokeResponse)(nil)).Elem()
}

func (o InputDirectoryInvokeResponseOutput) ToInputDirectoryInvokeResponseOutput() InputDirectoryInvokeResponseOutput {
	return o
}

func (o InputDirectoryInvokeResponseOutput) ToInputDirectoryInvokeResponseOutputWithContext(ctx context.Context) InputDirectoryInvokeResponseOutput {
	return o
}

// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
func (o InputDirectoryInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InputDirectoryInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The path to the input directory.
func (o InputDirectoryInvokeResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v InputDirectoryInvokeResponse) string { return v.Path }).(pulumi.StringOutput)
}

type InputDirectoryInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (InputDirectoryInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputDirectoryInvokeResponse)(nil)).Elem()
}

func (o InputDirectoryInvokeResponseArrayOutput) ToInputDirectoryInvokeResponseArrayOutput() InputDirectoryInvokeResponseArrayOutput {
	return o
}

func (o InputDirectoryInvokeResponseArrayOutput) ToInputDirectoryInvokeResponseArrayOutputWithContext(ctx context.Context) InputDirectoryInvokeResponseArrayOutput {
	return o
}

func (o InputDirectoryInvokeResponseArrayOutput) Index(i pulumi.IntInput) InputDirectoryInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputDirectoryInvokeResponse {
		return vs[0].([]InputDirectoryInvokeResponse)[vs[1].(int)]
	}).(InputDirectoryInvokeResponseOutput)
}

// Input directory for the job.
type InputDirectoryResponse struct {
	// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id string `pulumi:"id"`
	// The path to the input directory.
	Path string `pulumi:"path"`
}

// InputDirectoryResponseInput is an input type that accepts InputDirectoryResponseArgs and InputDirectoryResponseOutput values.
// You can construct a concrete instance of `InputDirectoryResponseInput` via:
//
//          InputDirectoryResponseArgs{...}
type InputDirectoryResponseInput interface {
	pulumi.Input

	ToInputDirectoryResponseOutput() InputDirectoryResponseOutput
	ToInputDirectoryResponseOutputWithContext(context.Context) InputDirectoryResponseOutput
}

// Input directory for the job.
type InputDirectoryResponseArgs struct {
	// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id pulumi.StringInput `pulumi:"id"`
	// The path to the input directory.
	Path pulumi.StringInput `pulumi:"path"`
}

func (InputDirectoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDirectoryResponse)(nil)).Elem()
}

func (i InputDirectoryResponseArgs) ToInputDirectoryResponseOutput() InputDirectoryResponseOutput {
	return i.ToInputDirectoryResponseOutputWithContext(context.Background())
}

func (i InputDirectoryResponseArgs) ToInputDirectoryResponseOutputWithContext(ctx context.Context) InputDirectoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputDirectoryResponseOutput)
}

// InputDirectoryResponseArrayInput is an input type that accepts InputDirectoryResponseArray and InputDirectoryResponseArrayOutput values.
// You can construct a concrete instance of `InputDirectoryResponseArrayInput` via:
//
//          InputDirectoryResponseArray{ InputDirectoryResponseArgs{...} }
type InputDirectoryResponseArrayInput interface {
	pulumi.Input

	ToInputDirectoryResponseArrayOutput() InputDirectoryResponseArrayOutput
	ToInputDirectoryResponseArrayOutputWithContext(context.Context) InputDirectoryResponseArrayOutput
}

type InputDirectoryResponseArray []InputDirectoryResponseInput

func (InputDirectoryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputDirectoryResponse)(nil)).Elem()
}

func (i InputDirectoryResponseArray) ToInputDirectoryResponseArrayOutput() InputDirectoryResponseArrayOutput {
	return i.ToInputDirectoryResponseArrayOutputWithContext(context.Background())
}

func (i InputDirectoryResponseArray) ToInputDirectoryResponseArrayOutputWithContext(ctx context.Context) InputDirectoryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputDirectoryResponseArrayOutput)
}

// Input directory for the job.
type InputDirectoryResponseOutput struct{ *pulumi.OutputState }

func (InputDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDirectoryResponse)(nil)).Elem()
}

func (o InputDirectoryResponseOutput) ToInputDirectoryResponseOutput() InputDirectoryResponseOutput {
	return o
}

func (o InputDirectoryResponseOutput) ToInputDirectoryResponseOutputWithContext(ctx context.Context) InputDirectoryResponseOutput {
	return o
}

// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
func (o InputDirectoryResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InputDirectoryResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The path to the input directory.
func (o InputDirectoryResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v InputDirectoryResponse) string { return v.Path }).(pulumi.StringOutput)
}

type InputDirectoryResponseArrayOutput struct{ *pulumi.OutputState }

func (InputDirectoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputDirectoryResponse)(nil)).Elem()
}

func (o InputDirectoryResponseArrayOutput) ToInputDirectoryResponseArrayOutput() InputDirectoryResponseArrayOutput {
	return o
}

func (o InputDirectoryResponseArrayOutput) ToInputDirectoryResponseArrayOutputWithContext(ctx context.Context) InputDirectoryResponseArrayOutput {
	return o
}

func (o InputDirectoryResponseArrayOutput) Index(i pulumi.IntInput) InputDirectoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputDirectoryResponse {
		return vs[0].([]InputDirectoryResponse)[vs[1].(int)]
	}).(InputDirectoryResponseOutput)
}

// Constraints associated with the Job.
type JobBasePropertiesConstraints struct {
	// Max time the job can run. Default value: 1 week.
	MaxWallClockTime *string `pulumi:"maxWallClockTime"`
}

// JobBasePropertiesConstraintsInput is an input type that accepts JobBasePropertiesConstraintsArgs and JobBasePropertiesConstraintsOutput values.
// You can construct a concrete instance of `JobBasePropertiesConstraintsInput` via:
//
//          JobBasePropertiesConstraintsArgs{...}
type JobBasePropertiesConstraintsInput interface {
	pulumi.Input

	ToJobBasePropertiesConstraintsOutput() JobBasePropertiesConstraintsOutput
	ToJobBasePropertiesConstraintsOutputWithContext(context.Context) JobBasePropertiesConstraintsOutput
}

// Constraints associated with the Job.
type JobBasePropertiesConstraintsArgs struct {
	// Max time the job can run. Default value: 1 week.
	MaxWallClockTime pulumi.StringPtrInput `pulumi:"maxWallClockTime"`
}

func (JobBasePropertiesConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobBasePropertiesConstraints)(nil)).Elem()
}

func (i JobBasePropertiesConstraintsArgs) ToJobBasePropertiesConstraintsOutput() JobBasePropertiesConstraintsOutput {
	return i.ToJobBasePropertiesConstraintsOutputWithContext(context.Background())
}

func (i JobBasePropertiesConstraintsArgs) ToJobBasePropertiesConstraintsOutputWithContext(ctx context.Context) JobBasePropertiesConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobBasePropertiesConstraintsOutput)
}

func (i JobBasePropertiesConstraintsArgs) ToJobBasePropertiesConstraintsPtrOutput() JobBasePropertiesConstraintsPtrOutput {
	return i.ToJobBasePropertiesConstraintsPtrOutputWithContext(context.Background())
}

func (i JobBasePropertiesConstraintsArgs) ToJobBasePropertiesConstraintsPtrOutputWithContext(ctx context.Context) JobBasePropertiesConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobBasePropertiesConstraintsOutput).ToJobBasePropertiesConstraintsPtrOutputWithContext(ctx)
}

// JobBasePropertiesConstraintsPtrInput is an input type that accepts JobBasePropertiesConstraintsArgs, JobBasePropertiesConstraintsPtr and JobBasePropertiesConstraintsPtrOutput values.
// You can construct a concrete instance of `JobBasePropertiesConstraintsPtrInput` via:
//
//          JobBasePropertiesConstraintsArgs{...}
//
//  or:
//
//          nil
type JobBasePropertiesConstraintsPtrInput interface {
	pulumi.Input

	ToJobBasePropertiesConstraintsPtrOutput() JobBasePropertiesConstraintsPtrOutput
	ToJobBasePropertiesConstraintsPtrOutputWithContext(context.Context) JobBasePropertiesConstraintsPtrOutput
}

type jobBasePropertiesConstraintsPtrType JobBasePropertiesConstraintsArgs

func JobBasePropertiesConstraintsPtr(v *JobBasePropertiesConstraintsArgs) JobBasePropertiesConstraintsPtrInput {
	return (*jobBasePropertiesConstraintsPtrType)(v)
}

func (*jobBasePropertiesConstraintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobBasePropertiesConstraints)(nil)).Elem()
}

func (i *jobBasePropertiesConstraintsPtrType) ToJobBasePropertiesConstraintsPtrOutput() JobBasePropertiesConstraintsPtrOutput {
	return i.ToJobBasePropertiesConstraintsPtrOutputWithContext(context.Background())
}

func (i *jobBasePropertiesConstraintsPtrType) ToJobBasePropertiesConstraintsPtrOutputWithContext(ctx context.Context) JobBasePropertiesConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobBasePropertiesConstraintsPtrOutput)
}

// Constraints associated with the Job.
type JobBasePropertiesConstraintsOutput struct{ *pulumi.OutputState }

func (JobBasePropertiesConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobBasePropertiesConstraints)(nil)).Elem()
}

func (o JobBasePropertiesConstraintsOutput) ToJobBasePropertiesConstraintsOutput() JobBasePropertiesConstraintsOutput {
	return o
}

func (o JobBasePropertiesConstraintsOutput) ToJobBasePropertiesConstraintsOutputWithContext(ctx context.Context) JobBasePropertiesConstraintsOutput {
	return o
}

func (o JobBasePropertiesConstraintsOutput) ToJobBasePropertiesConstraintsPtrOutput() JobBasePropertiesConstraintsPtrOutput {
	return o.ToJobBasePropertiesConstraintsPtrOutputWithContext(context.Background())
}

func (o JobBasePropertiesConstraintsOutput) ToJobBasePropertiesConstraintsPtrOutputWithContext(ctx context.Context) JobBasePropertiesConstraintsPtrOutput {
	return o.ApplyT(func(v JobBasePropertiesConstraints) *JobBasePropertiesConstraints {
		return &v
	}).(JobBasePropertiesConstraintsPtrOutput)
}

// Max time the job can run. Default value: 1 week.
func (o JobBasePropertiesConstraintsOutput) MaxWallClockTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobBasePropertiesConstraints) *string { return v.MaxWallClockTime }).(pulumi.StringPtrOutput)
}

type JobBasePropertiesConstraintsPtrOutput struct{ *pulumi.OutputState }

func (JobBasePropertiesConstraintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobBasePropertiesConstraints)(nil)).Elem()
}

func (o JobBasePropertiesConstraintsPtrOutput) ToJobBasePropertiesConstraintsPtrOutput() JobBasePropertiesConstraintsPtrOutput {
	return o
}

func (o JobBasePropertiesConstraintsPtrOutput) ToJobBasePropertiesConstraintsPtrOutputWithContext(ctx context.Context) JobBasePropertiesConstraintsPtrOutput {
	return o
}

func (o JobBasePropertiesConstraintsPtrOutput) Elem() JobBasePropertiesConstraintsOutput {
	return o.ApplyT(func(v *JobBasePropertiesConstraints) JobBasePropertiesConstraints { return *v }).(JobBasePropertiesConstraintsOutput)
}

// Max time the job can run. Default value: 1 week.
func (o JobBasePropertiesConstraintsPtrOutput) MaxWallClockTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobBasePropertiesConstraints) *string {
		if v == nil {
			return nil
		}
		return v.MaxWallClockTime
	}).(pulumi.StringPtrOutput)
}

// Job preparation settings.
type JobPreparation struct {
	// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
	CommandLine string `pulumi:"commandLine"`
}

// JobPreparationInput is an input type that accepts JobPreparationArgs and JobPreparationOutput values.
// You can construct a concrete instance of `JobPreparationInput` via:
//
//          JobPreparationArgs{...}
type JobPreparationInput interface {
	pulumi.Input

	ToJobPreparationOutput() JobPreparationOutput
	ToJobPreparationOutputWithContext(context.Context) JobPreparationOutput
}

// Job preparation settings.
type JobPreparationArgs struct {
	// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
}

func (JobPreparationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPreparation)(nil)).Elem()
}

func (i JobPreparationArgs) ToJobPreparationOutput() JobPreparationOutput {
	return i.ToJobPreparationOutputWithContext(context.Background())
}

func (i JobPreparationArgs) ToJobPreparationOutputWithContext(ctx context.Context) JobPreparationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPreparationOutput)
}

func (i JobPreparationArgs) ToJobPreparationPtrOutput() JobPreparationPtrOutput {
	return i.ToJobPreparationPtrOutputWithContext(context.Background())
}

func (i JobPreparationArgs) ToJobPreparationPtrOutputWithContext(ctx context.Context) JobPreparationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPreparationOutput).ToJobPreparationPtrOutputWithContext(ctx)
}

// JobPreparationPtrInput is an input type that accepts JobPreparationArgs, JobPreparationPtr and JobPreparationPtrOutput values.
// You can construct a concrete instance of `JobPreparationPtrInput` via:
//
//          JobPreparationArgs{...}
//
//  or:
//
//          nil
type JobPreparationPtrInput interface {
	pulumi.Input

	ToJobPreparationPtrOutput() JobPreparationPtrOutput
	ToJobPreparationPtrOutputWithContext(context.Context) JobPreparationPtrOutput
}

type jobPreparationPtrType JobPreparationArgs

func JobPreparationPtr(v *JobPreparationArgs) JobPreparationPtrInput {
	return (*jobPreparationPtrType)(v)
}

func (*jobPreparationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPreparation)(nil)).Elem()
}

func (i *jobPreparationPtrType) ToJobPreparationPtrOutput() JobPreparationPtrOutput {
	return i.ToJobPreparationPtrOutputWithContext(context.Background())
}

func (i *jobPreparationPtrType) ToJobPreparationPtrOutputWithContext(ctx context.Context) JobPreparationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPreparationPtrOutput)
}

// Job preparation settings.
type JobPreparationOutput struct{ *pulumi.OutputState }

func (JobPreparationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPreparation)(nil)).Elem()
}

func (o JobPreparationOutput) ToJobPreparationOutput() JobPreparationOutput {
	return o
}

func (o JobPreparationOutput) ToJobPreparationOutputWithContext(ctx context.Context) JobPreparationOutput {
	return o
}

func (o JobPreparationOutput) ToJobPreparationPtrOutput() JobPreparationPtrOutput {
	return o.ToJobPreparationPtrOutputWithContext(context.Background())
}

func (o JobPreparationOutput) ToJobPreparationPtrOutputWithContext(ctx context.Context) JobPreparationPtrOutput {
	return o.ApplyT(func(v JobPreparation) *JobPreparation {
		return &v
	}).(JobPreparationPtrOutput)
}

// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
func (o JobPreparationOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v JobPreparation) string { return v.CommandLine }).(pulumi.StringOutput)
}

type JobPreparationPtrOutput struct{ *pulumi.OutputState }

func (JobPreparationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPreparation)(nil)).Elem()
}

func (o JobPreparationPtrOutput) ToJobPreparationPtrOutput() JobPreparationPtrOutput {
	return o
}

func (o JobPreparationPtrOutput) ToJobPreparationPtrOutputWithContext(ctx context.Context) JobPreparationPtrOutput {
	return o
}

func (o JobPreparationPtrOutput) Elem() JobPreparationOutput {
	return o.ApplyT(func(v *JobPreparation) JobPreparation { return *v }).(JobPreparationOutput)
}

// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
func (o JobPreparationPtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPreparation) *string {
		if v == nil {
			return nil
		}
		return &v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// Job preparation settings.
type JobPreparationInvokeResponse struct {
	// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
	CommandLine string `pulumi:"commandLine"`
}

// JobPreparationInvokeResponseInput is an input type that accepts JobPreparationInvokeResponseArgs and JobPreparationInvokeResponseOutput values.
// You can construct a concrete instance of `JobPreparationInvokeResponseInput` via:
//
//          JobPreparationInvokeResponseArgs{...}
type JobPreparationInvokeResponseInput interface {
	pulumi.Input

	ToJobPreparationInvokeResponseOutput() JobPreparationInvokeResponseOutput
	ToJobPreparationInvokeResponseOutputWithContext(context.Context) JobPreparationInvokeResponseOutput
}

// Job preparation settings.
type JobPreparationInvokeResponseArgs struct {
	// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
}

func (JobPreparationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPreparationInvokeResponse)(nil)).Elem()
}

func (i JobPreparationInvokeResponseArgs) ToJobPreparationInvokeResponseOutput() JobPreparationInvokeResponseOutput {
	return i.ToJobPreparationInvokeResponseOutputWithContext(context.Background())
}

func (i JobPreparationInvokeResponseArgs) ToJobPreparationInvokeResponseOutputWithContext(ctx context.Context) JobPreparationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPreparationInvokeResponseOutput)
}

// Job preparation settings.
type JobPreparationInvokeResponseOutput struct{ *pulumi.OutputState }

func (JobPreparationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPreparationInvokeResponse)(nil)).Elem()
}

func (o JobPreparationInvokeResponseOutput) ToJobPreparationInvokeResponseOutput() JobPreparationInvokeResponseOutput {
	return o
}

func (o JobPreparationInvokeResponseOutput) ToJobPreparationInvokeResponseOutputWithContext(ctx context.Context) JobPreparationInvokeResponseOutput {
	return o
}

// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
func (o JobPreparationInvokeResponseOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v JobPreparationInvokeResponse) string { return v.CommandLine }).(pulumi.StringOutput)
}

// Job preparation settings.
type JobPreparationResponse struct {
	// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
	CommandLine string `pulumi:"commandLine"`
}

// JobPreparationResponseInput is an input type that accepts JobPreparationResponseArgs and JobPreparationResponseOutput values.
// You can construct a concrete instance of `JobPreparationResponseInput` via:
//
//          JobPreparationResponseArgs{...}
type JobPreparationResponseInput interface {
	pulumi.Input

	ToJobPreparationResponseOutput() JobPreparationResponseOutput
	ToJobPreparationResponseOutputWithContext(context.Context) JobPreparationResponseOutput
}

// Job preparation settings.
type JobPreparationResponseArgs struct {
	// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
}

func (JobPreparationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPreparationResponse)(nil)).Elem()
}

func (i JobPreparationResponseArgs) ToJobPreparationResponseOutput() JobPreparationResponseOutput {
	return i.ToJobPreparationResponseOutputWithContext(context.Background())
}

func (i JobPreparationResponseArgs) ToJobPreparationResponseOutputWithContext(ctx context.Context) JobPreparationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPreparationResponseOutput)
}

func (i JobPreparationResponseArgs) ToJobPreparationResponsePtrOutput() JobPreparationResponsePtrOutput {
	return i.ToJobPreparationResponsePtrOutputWithContext(context.Background())
}

func (i JobPreparationResponseArgs) ToJobPreparationResponsePtrOutputWithContext(ctx context.Context) JobPreparationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPreparationResponseOutput).ToJobPreparationResponsePtrOutputWithContext(ctx)
}

// JobPreparationResponsePtrInput is an input type that accepts JobPreparationResponseArgs, JobPreparationResponsePtr and JobPreparationResponsePtrOutput values.
// You can construct a concrete instance of `JobPreparationResponsePtrInput` via:
//
//          JobPreparationResponseArgs{...}
//
//  or:
//
//          nil
type JobPreparationResponsePtrInput interface {
	pulumi.Input

	ToJobPreparationResponsePtrOutput() JobPreparationResponsePtrOutput
	ToJobPreparationResponsePtrOutputWithContext(context.Context) JobPreparationResponsePtrOutput
}

type jobPreparationResponsePtrType JobPreparationResponseArgs

func JobPreparationResponsePtr(v *JobPreparationResponseArgs) JobPreparationResponsePtrInput {
	return (*jobPreparationResponsePtrType)(v)
}

func (*jobPreparationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPreparationResponse)(nil)).Elem()
}

func (i *jobPreparationResponsePtrType) ToJobPreparationResponsePtrOutput() JobPreparationResponsePtrOutput {
	return i.ToJobPreparationResponsePtrOutputWithContext(context.Background())
}

func (i *jobPreparationResponsePtrType) ToJobPreparationResponsePtrOutputWithContext(ctx context.Context) JobPreparationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPreparationResponsePtrOutput)
}

// Job preparation settings.
type JobPreparationResponseOutput struct{ *pulumi.OutputState }

func (JobPreparationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPreparationResponse)(nil)).Elem()
}

func (o JobPreparationResponseOutput) ToJobPreparationResponseOutput() JobPreparationResponseOutput {
	return o
}

func (o JobPreparationResponseOutput) ToJobPreparationResponseOutputWithContext(ctx context.Context) JobPreparationResponseOutput {
	return o
}

func (o JobPreparationResponseOutput) ToJobPreparationResponsePtrOutput() JobPreparationResponsePtrOutput {
	return o.ToJobPreparationResponsePtrOutputWithContext(context.Background())
}

func (o JobPreparationResponseOutput) ToJobPreparationResponsePtrOutputWithContext(ctx context.Context) JobPreparationResponsePtrOutput {
	return o.ApplyT(func(v JobPreparationResponse) *JobPreparationResponse {
		return &v
	}).(JobPreparationResponsePtrOutput)
}

// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
func (o JobPreparationResponseOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v JobPreparationResponse) string { return v.CommandLine }).(pulumi.StringOutput)
}

type JobPreparationResponsePtrOutput struct{ *pulumi.OutputState }

func (JobPreparationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPreparationResponse)(nil)).Elem()
}

func (o JobPreparationResponsePtrOutput) ToJobPreparationResponsePtrOutput() JobPreparationResponsePtrOutput {
	return o
}

func (o JobPreparationResponsePtrOutput) ToJobPreparationResponsePtrOutputWithContext(ctx context.Context) JobPreparationResponsePtrOutput {
	return o
}

func (o JobPreparationResponsePtrOutput) Elem() JobPreparationResponseOutput {
	return o.ApplyT(func(v *JobPreparationResponse) JobPreparationResponse { return *v }).(JobPreparationResponseOutput)
}

// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
func (o JobPreparationResponsePtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPreparationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// Constraints associated with the Job.
type JobPropertiesInvokeResponseConstraints struct {
	// Max time the job can run. Default value: 1 week.
	MaxWallClockTime *string `pulumi:"maxWallClockTime"`
}

// JobPropertiesInvokeResponseConstraintsInput is an input type that accepts JobPropertiesInvokeResponseConstraintsArgs and JobPropertiesInvokeResponseConstraintsOutput values.
// You can construct a concrete instance of `JobPropertiesInvokeResponseConstraintsInput` via:
//
//          JobPropertiesInvokeResponseConstraintsArgs{...}
type JobPropertiesInvokeResponseConstraintsInput interface {
	pulumi.Input

	ToJobPropertiesInvokeResponseConstraintsOutput() JobPropertiesInvokeResponseConstraintsOutput
	ToJobPropertiesInvokeResponseConstraintsOutputWithContext(context.Context) JobPropertiesInvokeResponseConstraintsOutput
}

// Constraints associated with the Job.
type JobPropertiesInvokeResponseConstraintsArgs struct {
	// Max time the job can run. Default value: 1 week.
	MaxWallClockTime pulumi.StringPtrInput `pulumi:"maxWallClockTime"`
}

func (JobPropertiesInvokeResponseConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesInvokeResponseConstraints)(nil)).Elem()
}

func (i JobPropertiesInvokeResponseConstraintsArgs) ToJobPropertiesInvokeResponseConstraintsOutput() JobPropertiesInvokeResponseConstraintsOutput {
	return i.ToJobPropertiesInvokeResponseConstraintsOutputWithContext(context.Background())
}

func (i JobPropertiesInvokeResponseConstraintsArgs) ToJobPropertiesInvokeResponseConstraintsOutputWithContext(ctx context.Context) JobPropertiesInvokeResponseConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesInvokeResponseConstraintsOutput)
}

// Constraints associated with the Job.
type JobPropertiesInvokeResponseConstraintsOutput struct{ *pulumi.OutputState }

func (JobPropertiesInvokeResponseConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesInvokeResponseConstraints)(nil)).Elem()
}

func (o JobPropertiesInvokeResponseConstraintsOutput) ToJobPropertiesInvokeResponseConstraintsOutput() JobPropertiesInvokeResponseConstraintsOutput {
	return o
}

func (o JobPropertiesInvokeResponseConstraintsOutput) ToJobPropertiesInvokeResponseConstraintsOutputWithContext(ctx context.Context) JobPropertiesInvokeResponseConstraintsOutput {
	return o
}

// Max time the job can run. Default value: 1 week.
func (o JobPropertiesInvokeResponseConstraintsOutput) MaxWallClockTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobPropertiesInvokeResponseConstraints) *string { return v.MaxWallClockTime }).(pulumi.StringPtrOutput)
}

// Information about the execution of a job.
type JobPropertiesInvokeResponseExecutionInfo struct {
	// The time at which the job completed. This property is only returned if the job is in completed state.
	EndTime string `pulumi:"endTime"`
	// A collection of errors encountered by the service during job execution.
	Errors []BatchAIErrorInvokeResponse `pulumi:"errors"`
	// The exit code of the job. This property is only returned if the job is in completed state.
	ExitCode int `pulumi:"exitCode"`
	// The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
	StartTime string `pulumi:"startTime"`
}

// JobPropertiesInvokeResponseExecutionInfoInput is an input type that accepts JobPropertiesInvokeResponseExecutionInfoArgs and JobPropertiesInvokeResponseExecutionInfoOutput values.
// You can construct a concrete instance of `JobPropertiesInvokeResponseExecutionInfoInput` via:
//
//          JobPropertiesInvokeResponseExecutionInfoArgs{...}
type JobPropertiesInvokeResponseExecutionInfoInput interface {
	pulumi.Input

	ToJobPropertiesInvokeResponseExecutionInfoOutput() JobPropertiesInvokeResponseExecutionInfoOutput
	ToJobPropertiesInvokeResponseExecutionInfoOutputWithContext(context.Context) JobPropertiesInvokeResponseExecutionInfoOutput
}

// Information about the execution of a job.
type JobPropertiesInvokeResponseExecutionInfoArgs struct {
	// The time at which the job completed. This property is only returned if the job is in completed state.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// A collection of errors encountered by the service during job execution.
	Errors BatchAIErrorInvokeResponseArrayInput `pulumi:"errors"`
	// The exit code of the job. This property is only returned if the job is in completed state.
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (JobPropertiesInvokeResponseExecutionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesInvokeResponseExecutionInfo)(nil)).Elem()
}

func (i JobPropertiesInvokeResponseExecutionInfoArgs) ToJobPropertiesInvokeResponseExecutionInfoOutput() JobPropertiesInvokeResponseExecutionInfoOutput {
	return i.ToJobPropertiesInvokeResponseExecutionInfoOutputWithContext(context.Background())
}

func (i JobPropertiesInvokeResponseExecutionInfoArgs) ToJobPropertiesInvokeResponseExecutionInfoOutputWithContext(ctx context.Context) JobPropertiesInvokeResponseExecutionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesInvokeResponseExecutionInfoOutput)
}

// Information about the execution of a job.
type JobPropertiesInvokeResponseExecutionInfoOutput struct{ *pulumi.OutputState }

func (JobPropertiesInvokeResponseExecutionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesInvokeResponseExecutionInfo)(nil)).Elem()
}

func (o JobPropertiesInvokeResponseExecutionInfoOutput) ToJobPropertiesInvokeResponseExecutionInfoOutput() JobPropertiesInvokeResponseExecutionInfoOutput {
	return o
}

func (o JobPropertiesInvokeResponseExecutionInfoOutput) ToJobPropertiesInvokeResponseExecutionInfoOutputWithContext(ctx context.Context) JobPropertiesInvokeResponseExecutionInfoOutput {
	return o
}

// The time at which the job completed. This property is only returned if the job is in completed state.
func (o JobPropertiesInvokeResponseExecutionInfoOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesInvokeResponseExecutionInfo) string { return v.EndTime }).(pulumi.StringOutput)
}

// A collection of errors encountered by the service during job execution.
func (o JobPropertiesInvokeResponseExecutionInfoOutput) Errors() BatchAIErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v JobPropertiesInvokeResponseExecutionInfo) []BatchAIErrorInvokeResponse { return v.Errors }).(BatchAIErrorInvokeResponseArrayOutput)
}

// The exit code of the job. This property is only returned if the job is in completed state.
func (o JobPropertiesInvokeResponseExecutionInfoOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v JobPropertiesInvokeResponseExecutionInfo) int { return v.ExitCode }).(pulumi.IntOutput)
}

// The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
func (o JobPropertiesInvokeResponseExecutionInfoOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesInvokeResponseExecutionInfo) string { return v.StartTime }).(pulumi.StringOutput)
}

// Constraints associated with the Job.
type JobPropertiesResponseConstraints struct {
	// Max time the job can run. Default value: 1 week.
	MaxWallClockTime *string `pulumi:"maxWallClockTime"`
}

// JobPropertiesResponseConstraintsInput is an input type that accepts JobPropertiesResponseConstraintsArgs and JobPropertiesResponseConstraintsOutput values.
// You can construct a concrete instance of `JobPropertiesResponseConstraintsInput` via:
//
//          JobPropertiesResponseConstraintsArgs{...}
type JobPropertiesResponseConstraintsInput interface {
	pulumi.Input

	ToJobPropertiesResponseConstraintsOutput() JobPropertiesResponseConstraintsOutput
	ToJobPropertiesResponseConstraintsOutputWithContext(context.Context) JobPropertiesResponseConstraintsOutput
}

// Constraints associated with the Job.
type JobPropertiesResponseConstraintsArgs struct {
	// Max time the job can run. Default value: 1 week.
	MaxWallClockTime pulumi.StringPtrInput `pulumi:"maxWallClockTime"`
}

func (JobPropertiesResponseConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesResponseConstraints)(nil)).Elem()
}

func (i JobPropertiesResponseConstraintsArgs) ToJobPropertiesResponseConstraintsOutput() JobPropertiesResponseConstraintsOutput {
	return i.ToJobPropertiesResponseConstraintsOutputWithContext(context.Background())
}

func (i JobPropertiesResponseConstraintsArgs) ToJobPropertiesResponseConstraintsOutputWithContext(ctx context.Context) JobPropertiesResponseConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponseConstraintsOutput)
}

func (i JobPropertiesResponseConstraintsArgs) ToJobPropertiesResponseConstraintsPtrOutput() JobPropertiesResponseConstraintsPtrOutput {
	return i.ToJobPropertiesResponseConstraintsPtrOutputWithContext(context.Background())
}

func (i JobPropertiesResponseConstraintsArgs) ToJobPropertiesResponseConstraintsPtrOutputWithContext(ctx context.Context) JobPropertiesResponseConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponseConstraintsOutput).ToJobPropertiesResponseConstraintsPtrOutputWithContext(ctx)
}

// JobPropertiesResponseConstraintsPtrInput is an input type that accepts JobPropertiesResponseConstraintsArgs, JobPropertiesResponseConstraintsPtr and JobPropertiesResponseConstraintsPtrOutput values.
// You can construct a concrete instance of `JobPropertiesResponseConstraintsPtrInput` via:
//
//          JobPropertiesResponseConstraintsArgs{...}
//
//  or:
//
//          nil
type JobPropertiesResponseConstraintsPtrInput interface {
	pulumi.Input

	ToJobPropertiesResponseConstraintsPtrOutput() JobPropertiesResponseConstraintsPtrOutput
	ToJobPropertiesResponseConstraintsPtrOutputWithContext(context.Context) JobPropertiesResponseConstraintsPtrOutput
}

type jobPropertiesResponseConstraintsPtrType JobPropertiesResponseConstraintsArgs

func JobPropertiesResponseConstraintsPtr(v *JobPropertiesResponseConstraintsArgs) JobPropertiesResponseConstraintsPtrInput {
	return (*jobPropertiesResponseConstraintsPtrType)(v)
}

func (*jobPropertiesResponseConstraintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPropertiesResponseConstraints)(nil)).Elem()
}

func (i *jobPropertiesResponseConstraintsPtrType) ToJobPropertiesResponseConstraintsPtrOutput() JobPropertiesResponseConstraintsPtrOutput {
	return i.ToJobPropertiesResponseConstraintsPtrOutputWithContext(context.Background())
}

func (i *jobPropertiesResponseConstraintsPtrType) ToJobPropertiesResponseConstraintsPtrOutputWithContext(ctx context.Context) JobPropertiesResponseConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponseConstraintsPtrOutput)
}

// Constraints associated with the Job.
type JobPropertiesResponseConstraintsOutput struct{ *pulumi.OutputState }

func (JobPropertiesResponseConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesResponseConstraints)(nil)).Elem()
}

func (o JobPropertiesResponseConstraintsOutput) ToJobPropertiesResponseConstraintsOutput() JobPropertiesResponseConstraintsOutput {
	return o
}

func (o JobPropertiesResponseConstraintsOutput) ToJobPropertiesResponseConstraintsOutputWithContext(ctx context.Context) JobPropertiesResponseConstraintsOutput {
	return o
}

func (o JobPropertiesResponseConstraintsOutput) ToJobPropertiesResponseConstraintsPtrOutput() JobPropertiesResponseConstraintsPtrOutput {
	return o.ToJobPropertiesResponseConstraintsPtrOutputWithContext(context.Background())
}

func (o JobPropertiesResponseConstraintsOutput) ToJobPropertiesResponseConstraintsPtrOutputWithContext(ctx context.Context) JobPropertiesResponseConstraintsPtrOutput {
	return o.ApplyT(func(v JobPropertiesResponseConstraints) *JobPropertiesResponseConstraints {
		return &v
	}).(JobPropertiesResponseConstraintsPtrOutput)
}

// Max time the job can run. Default value: 1 week.
func (o JobPropertiesResponseConstraintsOutput) MaxWallClockTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobPropertiesResponseConstraints) *string { return v.MaxWallClockTime }).(pulumi.StringPtrOutput)
}

type JobPropertiesResponseConstraintsPtrOutput struct{ *pulumi.OutputState }

func (JobPropertiesResponseConstraintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPropertiesResponseConstraints)(nil)).Elem()
}

func (o JobPropertiesResponseConstraintsPtrOutput) ToJobPropertiesResponseConstraintsPtrOutput() JobPropertiesResponseConstraintsPtrOutput {
	return o
}

func (o JobPropertiesResponseConstraintsPtrOutput) ToJobPropertiesResponseConstraintsPtrOutputWithContext(ctx context.Context) JobPropertiesResponseConstraintsPtrOutput {
	return o
}

func (o JobPropertiesResponseConstraintsPtrOutput) Elem() JobPropertiesResponseConstraintsOutput {
	return o.ApplyT(func(v *JobPropertiesResponseConstraints) JobPropertiesResponseConstraints { return *v }).(JobPropertiesResponseConstraintsOutput)
}

// Max time the job can run. Default value: 1 week.
func (o JobPropertiesResponseConstraintsPtrOutput) MaxWallClockTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponseConstraints) *string {
		if v == nil {
			return nil
		}
		return v.MaxWallClockTime
	}).(pulumi.StringPtrOutput)
}

// Information about the execution of a job.
type JobPropertiesResponseExecutionInfo struct {
	// The time at which the job completed. This property is only returned if the job is in completed state.
	EndTime string `pulumi:"endTime"`
	// A collection of errors encountered by the service during job execution.
	Errors []BatchAIErrorResponse `pulumi:"errors"`
	// The exit code of the job. This property is only returned if the job is in completed state.
	ExitCode int `pulumi:"exitCode"`
	// The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
	StartTime string `pulumi:"startTime"`
}

// JobPropertiesResponseExecutionInfoInput is an input type that accepts JobPropertiesResponseExecutionInfoArgs and JobPropertiesResponseExecutionInfoOutput values.
// You can construct a concrete instance of `JobPropertiesResponseExecutionInfoInput` via:
//
//          JobPropertiesResponseExecutionInfoArgs{...}
type JobPropertiesResponseExecutionInfoInput interface {
	pulumi.Input

	ToJobPropertiesResponseExecutionInfoOutput() JobPropertiesResponseExecutionInfoOutput
	ToJobPropertiesResponseExecutionInfoOutputWithContext(context.Context) JobPropertiesResponseExecutionInfoOutput
}

// Information about the execution of a job.
type JobPropertiesResponseExecutionInfoArgs struct {
	// The time at which the job completed. This property is only returned if the job is in completed state.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// A collection of errors encountered by the service during job execution.
	Errors BatchAIErrorResponseArrayInput `pulumi:"errors"`
	// The exit code of the job. This property is only returned if the job is in completed state.
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (JobPropertiesResponseExecutionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesResponseExecutionInfo)(nil)).Elem()
}

func (i JobPropertiesResponseExecutionInfoArgs) ToJobPropertiesResponseExecutionInfoOutput() JobPropertiesResponseExecutionInfoOutput {
	return i.ToJobPropertiesResponseExecutionInfoOutputWithContext(context.Background())
}

func (i JobPropertiesResponseExecutionInfoArgs) ToJobPropertiesResponseExecutionInfoOutputWithContext(ctx context.Context) JobPropertiesResponseExecutionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponseExecutionInfoOutput)
}

func (i JobPropertiesResponseExecutionInfoArgs) ToJobPropertiesResponseExecutionInfoPtrOutput() JobPropertiesResponseExecutionInfoPtrOutput {
	return i.ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(context.Background())
}

func (i JobPropertiesResponseExecutionInfoArgs) ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(ctx context.Context) JobPropertiesResponseExecutionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponseExecutionInfoOutput).ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(ctx)
}

// JobPropertiesResponseExecutionInfoPtrInput is an input type that accepts JobPropertiesResponseExecutionInfoArgs, JobPropertiesResponseExecutionInfoPtr and JobPropertiesResponseExecutionInfoPtrOutput values.
// You can construct a concrete instance of `JobPropertiesResponseExecutionInfoPtrInput` via:
//
//          JobPropertiesResponseExecutionInfoArgs{...}
//
//  or:
//
//          nil
type JobPropertiesResponseExecutionInfoPtrInput interface {
	pulumi.Input

	ToJobPropertiesResponseExecutionInfoPtrOutput() JobPropertiesResponseExecutionInfoPtrOutput
	ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(context.Context) JobPropertiesResponseExecutionInfoPtrOutput
}

type jobPropertiesResponseExecutionInfoPtrType JobPropertiesResponseExecutionInfoArgs

func JobPropertiesResponseExecutionInfoPtr(v *JobPropertiesResponseExecutionInfoArgs) JobPropertiesResponseExecutionInfoPtrInput {
	return (*jobPropertiesResponseExecutionInfoPtrType)(v)
}

func (*jobPropertiesResponseExecutionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPropertiesResponseExecutionInfo)(nil)).Elem()
}

func (i *jobPropertiesResponseExecutionInfoPtrType) ToJobPropertiesResponseExecutionInfoPtrOutput() JobPropertiesResponseExecutionInfoPtrOutput {
	return i.ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(context.Background())
}

func (i *jobPropertiesResponseExecutionInfoPtrType) ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(ctx context.Context) JobPropertiesResponseExecutionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponseExecutionInfoPtrOutput)
}

// Information about the execution of a job.
type JobPropertiesResponseExecutionInfoOutput struct{ *pulumi.OutputState }

func (JobPropertiesResponseExecutionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesResponseExecutionInfo)(nil)).Elem()
}

func (o JobPropertiesResponseExecutionInfoOutput) ToJobPropertiesResponseExecutionInfoOutput() JobPropertiesResponseExecutionInfoOutput {
	return o
}

func (o JobPropertiesResponseExecutionInfoOutput) ToJobPropertiesResponseExecutionInfoOutputWithContext(ctx context.Context) JobPropertiesResponseExecutionInfoOutput {
	return o
}

func (o JobPropertiesResponseExecutionInfoOutput) ToJobPropertiesResponseExecutionInfoPtrOutput() JobPropertiesResponseExecutionInfoPtrOutput {
	return o.ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(context.Background())
}

func (o JobPropertiesResponseExecutionInfoOutput) ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(ctx context.Context) JobPropertiesResponseExecutionInfoPtrOutput {
	return o.ApplyT(func(v JobPropertiesResponseExecutionInfo) *JobPropertiesResponseExecutionInfo {
		return &v
	}).(JobPropertiesResponseExecutionInfoPtrOutput)
}

// The time at which the job completed. This property is only returned if the job is in completed state.
func (o JobPropertiesResponseExecutionInfoOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesResponseExecutionInfo) string { return v.EndTime }).(pulumi.StringOutput)
}

// A collection of errors encountered by the service during job execution.
func (o JobPropertiesResponseExecutionInfoOutput) Errors() BatchAIErrorResponseArrayOutput {
	return o.ApplyT(func(v JobPropertiesResponseExecutionInfo) []BatchAIErrorResponse { return v.Errors }).(BatchAIErrorResponseArrayOutput)
}

// The exit code of the job. This property is only returned if the job is in completed state.
func (o JobPropertiesResponseExecutionInfoOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v JobPropertiesResponseExecutionInfo) int { return v.ExitCode }).(pulumi.IntOutput)
}

// The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
func (o JobPropertiesResponseExecutionInfoOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesResponseExecutionInfo) string { return v.StartTime }).(pulumi.StringOutput)
}

type JobPropertiesResponseExecutionInfoPtrOutput struct{ *pulumi.OutputState }

func (JobPropertiesResponseExecutionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPropertiesResponseExecutionInfo)(nil)).Elem()
}

func (o JobPropertiesResponseExecutionInfoPtrOutput) ToJobPropertiesResponseExecutionInfoPtrOutput() JobPropertiesResponseExecutionInfoPtrOutput {
	return o
}

func (o JobPropertiesResponseExecutionInfoPtrOutput) ToJobPropertiesResponseExecutionInfoPtrOutputWithContext(ctx context.Context) JobPropertiesResponseExecutionInfoPtrOutput {
	return o
}

func (o JobPropertiesResponseExecutionInfoPtrOutput) Elem() JobPropertiesResponseExecutionInfoOutput {
	return o.ApplyT(func(v *JobPropertiesResponseExecutionInfo) JobPropertiesResponseExecutionInfo { return *v }).(JobPropertiesResponseExecutionInfoOutput)
}

// The time at which the job completed. This property is only returned if the job is in completed state.
func (o JobPropertiesResponseExecutionInfoPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponseExecutionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// A collection of errors encountered by the service during job execution.
func (o JobPropertiesResponseExecutionInfoPtrOutput) Errors() BatchAIErrorResponseArrayOutput {
	return o.ApplyT(func(v *JobPropertiesResponseExecutionInfo) []BatchAIErrorResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(BatchAIErrorResponseArrayOutput)
}

// The exit code of the job. This property is only returned if the job is in completed state.
func (o JobPropertiesResponseExecutionInfoPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponseExecutionInfo) *int {
		if v == nil {
			return nil
		}
		return &v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// The time at which the job started running. 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.
func (o JobPropertiesResponseExecutionInfoPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponseExecutionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Key Vault Secret reference.
type KeyVaultSecretReference struct {
	// The URL referencing a secret in the Key Vault.
	SecretUrl string `pulumi:"secretUrl"`
	// Fully qualified resource identifier of the Key Vault.
	SourceVault ResourceId `pulumi:"sourceVault"`
}

// KeyVaultSecretReferenceInput is an input type that accepts KeyVaultSecretReferenceArgs and KeyVaultSecretReferenceOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceInput` via:
//
//          KeyVaultSecretReferenceArgs{...}
type KeyVaultSecretReferenceInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceOutput() KeyVaultSecretReferenceOutput
	ToKeyVaultSecretReferenceOutputWithContext(context.Context) KeyVaultSecretReferenceOutput
}

// Key Vault Secret reference.
type KeyVaultSecretReferenceArgs struct {
	// The URL referencing a secret in the Key Vault.
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Fully qualified resource identifier of the Key Vault.
	SourceVault ResourceIdInput `pulumi:"sourceVault"`
}

func (KeyVaultSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReference)(nil)).Elem()
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferenceOutput() KeyVaultSecretReferenceOutput {
	return i.ToKeyVaultSecretReferenceOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferenceOutputWithContext(ctx context.Context) KeyVaultSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceOutput)
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return i.ToKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceOutput).ToKeyVaultSecretReferencePtrOutputWithContext(ctx)
}

// KeyVaultSecretReferencePtrInput is an input type that accepts KeyVaultSecretReferenceArgs, KeyVaultSecretReferencePtr and KeyVaultSecretReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferencePtrInput` via:
//
//          KeyVaultSecretReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultSecretReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput
	ToKeyVaultSecretReferencePtrOutputWithContext(context.Context) KeyVaultSecretReferencePtrOutput
}

type keyVaultSecretReferencePtrType KeyVaultSecretReferenceArgs

func KeyVaultSecretReferencePtr(v *KeyVaultSecretReferenceArgs) KeyVaultSecretReferencePtrInput {
	return (*keyVaultSecretReferencePtrType)(v)
}

func (*keyVaultSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReference)(nil)).Elem()
}

func (i *keyVaultSecretReferencePtrType) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return i.ToKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretReferencePtrType) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferencePtrOutput)
}

// Key Vault Secret reference.
type KeyVaultSecretReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReference)(nil)).Elem()
}

func (o KeyVaultSecretReferenceOutput) ToKeyVaultSecretReferenceOutput() KeyVaultSecretReferenceOutput {
	return o
}

func (o KeyVaultSecretReferenceOutput) ToKeyVaultSecretReferenceOutputWithContext(ctx context.Context) KeyVaultSecretReferenceOutput {
	return o
}

func (o KeyVaultSecretReferenceOutput) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return o.ToKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretReferenceOutput) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v KeyVaultSecretReference) *KeyVaultSecretReference {
		return &v
	}).(KeyVaultSecretReferencePtrOutput)
}

// The URL referencing a secret in the Key Vault.
func (o KeyVaultSecretReferenceOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretReference) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Fully qualified resource identifier of the Key Vault.
func (o KeyVaultSecretReferenceOutput) SourceVault() ResourceIdOutput {
	return o.ApplyT(func(v KeyVaultSecretReference) ResourceId { return v.SourceVault }).(ResourceIdOutput)
}

type KeyVaultSecretReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReference)(nil)).Elem()
}

func (o KeyVaultSecretReferencePtrOutput) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return o
}

func (o KeyVaultSecretReferencePtrOutput) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return o
}

func (o KeyVaultSecretReferencePtrOutput) Elem() KeyVaultSecretReferenceOutput {
	return o.ApplyT(func(v *KeyVaultSecretReference) KeyVaultSecretReference { return *v }).(KeyVaultSecretReferenceOutput)
}

// The URL referencing a secret in the Key Vault.
func (o KeyVaultSecretReferencePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReference) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Fully qualified resource identifier of the Key Vault.
func (o KeyVaultSecretReferencePtrOutput) SourceVault() ResourceIdPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReference) *ResourceId {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(ResourceIdPtrOutput)
}

// Key Vault Secret reference.
type KeyVaultSecretReferenceInvokeResponse struct {
	// The URL referencing a secret in the Key Vault.
	SecretUrl string `pulumi:"secretUrl"`
	// Fully qualified resource identifier of the Key Vault.
	SourceVault ResourceIdInvokeResponse `pulumi:"sourceVault"`
}

// KeyVaultSecretReferenceInvokeResponseInput is an input type that accepts KeyVaultSecretReferenceInvokeResponseArgs and KeyVaultSecretReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceInvokeResponseInput` via:
//
//          KeyVaultSecretReferenceInvokeResponseArgs{...}
type KeyVaultSecretReferenceInvokeResponseInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceInvokeResponseOutput() KeyVaultSecretReferenceInvokeResponseOutput
	ToKeyVaultSecretReferenceInvokeResponseOutputWithContext(context.Context) KeyVaultSecretReferenceInvokeResponseOutput
}

// Key Vault Secret reference.
type KeyVaultSecretReferenceInvokeResponseArgs struct {
	// The URL referencing a secret in the Key Vault.
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Fully qualified resource identifier of the Key Vault.
	SourceVault ResourceIdInvokeResponseInput `pulumi:"sourceVault"`
}

func (KeyVaultSecretReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceInvokeResponse)(nil)).Elem()
}

func (i KeyVaultSecretReferenceInvokeResponseArgs) ToKeyVaultSecretReferenceInvokeResponseOutput() KeyVaultSecretReferenceInvokeResponseOutput {
	return i.ToKeyVaultSecretReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceInvokeResponseArgs) ToKeyVaultSecretReferenceInvokeResponseOutputWithContext(ctx context.Context) KeyVaultSecretReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceInvokeResponseOutput)
}

func (i KeyVaultSecretReferenceInvokeResponseArgs) ToKeyVaultSecretReferenceInvokeResponsePtrOutput() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return i.ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceInvokeResponseArgs) ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceInvokeResponseOutput).ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(ctx)
}

// KeyVaultSecretReferenceInvokeResponsePtrInput is an input type that accepts KeyVaultSecretReferenceInvokeResponseArgs, KeyVaultSecretReferenceInvokeResponsePtr and KeyVaultSecretReferenceInvokeResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceInvokeResponsePtrInput` via:
//
//          KeyVaultSecretReferenceInvokeResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultSecretReferenceInvokeResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceInvokeResponsePtrOutput() KeyVaultSecretReferenceInvokeResponsePtrOutput
	ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(context.Context) KeyVaultSecretReferenceInvokeResponsePtrOutput
}

type keyVaultSecretReferenceInvokeResponsePtrType KeyVaultSecretReferenceInvokeResponseArgs

func KeyVaultSecretReferenceInvokeResponsePtr(v *KeyVaultSecretReferenceInvokeResponseArgs) KeyVaultSecretReferenceInvokeResponsePtrInput {
	return (*keyVaultSecretReferenceInvokeResponsePtrType)(v)
}

func (*keyVaultSecretReferenceInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceInvokeResponse)(nil)).Elem()
}

func (i *keyVaultSecretReferenceInvokeResponsePtrType) ToKeyVaultSecretReferenceInvokeResponsePtrOutput() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return i.ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretReferenceInvokeResponsePtrType) ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceInvokeResponsePtrOutput)
}

// Key Vault Secret reference.
type KeyVaultSecretReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceInvokeResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceInvokeResponseOutput) ToKeyVaultSecretReferenceInvokeResponseOutput() KeyVaultSecretReferenceInvokeResponseOutput {
	return o
}

func (o KeyVaultSecretReferenceInvokeResponseOutput) ToKeyVaultSecretReferenceInvokeResponseOutputWithContext(ctx context.Context) KeyVaultSecretReferenceInvokeResponseOutput {
	return o
}

func (o KeyVaultSecretReferenceInvokeResponseOutput) ToKeyVaultSecretReferenceInvokeResponsePtrOutput() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o.ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretReferenceInvokeResponseOutput) ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceInvokeResponse) *KeyVaultSecretReferenceInvokeResponse {
		return &v
	}).(KeyVaultSecretReferenceInvokeResponsePtrOutput)
}

// The URL referencing a secret in the Key Vault.
func (o KeyVaultSecretReferenceInvokeResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceInvokeResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Fully qualified resource identifier of the Key Vault.
func (o KeyVaultSecretReferenceInvokeResponseOutput) SourceVault() ResourceIdInvokeResponseOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceInvokeResponse) ResourceIdInvokeResponse { return v.SourceVault }).(ResourceIdInvokeResponseOutput)
}

type KeyVaultSecretReferenceInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceInvokeResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceInvokeResponsePtrOutput) ToKeyVaultSecretReferenceInvokeResponsePtrOutput() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceInvokeResponsePtrOutput) ToKeyVaultSecretReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceInvokeResponsePtrOutput) Elem() KeyVaultSecretReferenceInvokeResponseOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceInvokeResponse) KeyVaultSecretReferenceInvokeResponse { return *v }).(KeyVaultSecretReferenceInvokeResponseOutput)
}

// The URL referencing a secret in the Key Vault.
func (o KeyVaultSecretReferenceInvokeResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Fully qualified resource identifier of the Key Vault.
func (o KeyVaultSecretReferenceInvokeResponsePtrOutput) SourceVault() ResourceIdInvokeResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceInvokeResponse) *ResourceIdInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(ResourceIdInvokeResponsePtrOutput)
}

// Key Vault Secret reference.
type KeyVaultSecretReferenceResponse struct {
	// The URL referencing a secret in the Key Vault.
	SecretUrl string `pulumi:"secretUrl"`
	// Fully qualified resource identifier of the Key Vault.
	SourceVault ResourceIdResponse `pulumi:"sourceVault"`
}

// KeyVaultSecretReferenceResponseInput is an input type that accepts KeyVaultSecretReferenceResponseArgs and KeyVaultSecretReferenceResponseOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceResponseInput` via:
//
//          KeyVaultSecretReferenceResponseArgs{...}
type KeyVaultSecretReferenceResponseInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceResponseOutput() KeyVaultSecretReferenceResponseOutput
	ToKeyVaultSecretReferenceResponseOutputWithContext(context.Context) KeyVaultSecretReferenceResponseOutput
}

// Key Vault Secret reference.
type KeyVaultSecretReferenceResponseArgs struct {
	// The URL referencing a secret in the Key Vault.
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Fully qualified resource identifier of the Key Vault.
	SourceVault ResourceIdResponseInput `pulumi:"sourceVault"`
}

func (KeyVaultSecretReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (i KeyVaultSecretReferenceResponseArgs) ToKeyVaultSecretReferenceResponseOutput() KeyVaultSecretReferenceResponseOutput {
	return i.ToKeyVaultSecretReferenceResponseOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceResponseArgs) ToKeyVaultSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceResponseOutput)
}

func (i KeyVaultSecretReferenceResponseArgs) ToKeyVaultSecretReferenceResponsePtrOutput() KeyVaultSecretReferenceResponsePtrOutput {
	return i.ToKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceResponseArgs) ToKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceResponseOutput).ToKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx)
}

// KeyVaultSecretReferenceResponsePtrInput is an input type that accepts KeyVaultSecretReferenceResponseArgs, KeyVaultSecretReferenceResponsePtr and KeyVaultSecretReferenceResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceResponsePtrInput` via:
//
//          KeyVaultSecretReferenceResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultSecretReferenceResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceResponsePtrOutput() KeyVaultSecretReferenceResponsePtrOutput
	ToKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Context) KeyVaultSecretReferenceResponsePtrOutput
}

type keyVaultSecretReferenceResponsePtrType KeyVaultSecretReferenceResponseArgs

func KeyVaultSecretReferenceResponsePtr(v *KeyVaultSecretReferenceResponseArgs) KeyVaultSecretReferenceResponsePtrInput {
	return (*keyVaultSecretReferenceResponsePtrType)(v)
}

func (*keyVaultSecretReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (i *keyVaultSecretReferenceResponsePtrType) ToKeyVaultSecretReferenceResponsePtrOutput() KeyVaultSecretReferenceResponsePtrOutput {
	return i.ToKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretReferenceResponsePtrType) ToKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Key Vault Secret reference.
type KeyVaultSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponseOutput() KeyVaultSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponsePtrOutput() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ToKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceResponse) *KeyVaultSecretReferenceResponse {
		return &v
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// The URL referencing a secret in the Key Vault.
func (o KeyVaultSecretReferenceResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Fully qualified resource identifier of the Key Vault.
func (o KeyVaultSecretReferenceResponseOutput) SourceVault() ResourceIdResponseOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceResponse) ResourceIdResponse { return v.SourceVault }).(ResourceIdResponseOutput)
}

type KeyVaultSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceResponsePtrOutput) ToKeyVaultSecretReferenceResponsePtrOutput() KeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceResponsePtrOutput) ToKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceResponsePtrOutput) Elem() KeyVaultSecretReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) KeyVaultSecretReferenceResponse { return *v }).(KeyVaultSecretReferenceResponseOutput)
}

// The URL referencing a secret in the Key Vault.
func (o KeyVaultSecretReferenceResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Fully qualified resource identifier of the Key Vault.
func (o KeyVaultSecretReferenceResponsePtrOutput) SourceVault() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) *ResourceIdResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(ResourceIdResponsePtrOutput)
}

// Manual scale settings for the cluster.
type ManualScaleSettings struct {
	// An action to be performed when the cluster size is decreasing. The default value is requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The desired number of compute nodes in the Cluster. Default is 0.
	TargetNodeCount int `pulumi:"targetNodeCount"`
}

// ManualScaleSettingsInput is an input type that accepts ManualScaleSettingsArgs and ManualScaleSettingsOutput values.
// You can construct a concrete instance of `ManualScaleSettingsInput` via:
//
//          ManualScaleSettingsArgs{...}
type ManualScaleSettingsInput interface {
	pulumi.Input

	ToManualScaleSettingsOutput() ManualScaleSettingsOutput
	ToManualScaleSettingsOutputWithContext(context.Context) ManualScaleSettingsOutput
}

// Manual scale settings for the cluster.
type ManualScaleSettingsArgs struct {
	// An action to be performed when the cluster size is decreasing. The default value is requeue.
	NodeDeallocationOption pulumi.StringPtrInput `pulumi:"nodeDeallocationOption"`
	// The desired number of compute nodes in the Cluster. Default is 0.
	TargetNodeCount pulumi.IntInput `pulumi:"targetNodeCount"`
}

func (ManualScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScaleSettings)(nil)).Elem()
}

func (i ManualScaleSettingsArgs) ToManualScaleSettingsOutput() ManualScaleSettingsOutput {
	return i.ToManualScaleSettingsOutputWithContext(context.Background())
}

func (i ManualScaleSettingsArgs) ToManualScaleSettingsOutputWithContext(ctx context.Context) ManualScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsOutput)
}

func (i ManualScaleSettingsArgs) ToManualScaleSettingsPtrOutput() ManualScaleSettingsPtrOutput {
	return i.ToManualScaleSettingsPtrOutputWithContext(context.Background())
}

func (i ManualScaleSettingsArgs) ToManualScaleSettingsPtrOutputWithContext(ctx context.Context) ManualScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsOutput).ToManualScaleSettingsPtrOutputWithContext(ctx)
}

// ManualScaleSettingsPtrInput is an input type that accepts ManualScaleSettingsArgs, ManualScaleSettingsPtr and ManualScaleSettingsPtrOutput values.
// You can construct a concrete instance of `ManualScaleSettingsPtrInput` via:
//
//          ManualScaleSettingsArgs{...}
//
//  or:
//
//          nil
type ManualScaleSettingsPtrInput interface {
	pulumi.Input

	ToManualScaleSettingsPtrOutput() ManualScaleSettingsPtrOutput
	ToManualScaleSettingsPtrOutputWithContext(context.Context) ManualScaleSettingsPtrOutput
}

type manualScaleSettingsPtrType ManualScaleSettingsArgs

func ManualScaleSettingsPtr(v *ManualScaleSettingsArgs) ManualScaleSettingsPtrInput {
	return (*manualScaleSettingsPtrType)(v)
}

func (*manualScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualScaleSettings)(nil)).Elem()
}

func (i *manualScaleSettingsPtrType) ToManualScaleSettingsPtrOutput() ManualScaleSettingsPtrOutput {
	return i.ToManualScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *manualScaleSettingsPtrType) ToManualScaleSettingsPtrOutputWithContext(ctx context.Context) ManualScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsPtrOutput)
}

// Manual scale settings for the cluster.
type ManualScaleSettingsOutput struct{ *pulumi.OutputState }

func (ManualScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScaleSettings)(nil)).Elem()
}

func (o ManualScaleSettingsOutput) ToManualScaleSettingsOutput() ManualScaleSettingsOutput {
	return o
}

func (o ManualScaleSettingsOutput) ToManualScaleSettingsOutputWithContext(ctx context.Context) ManualScaleSettingsOutput {
	return o
}

func (o ManualScaleSettingsOutput) ToManualScaleSettingsPtrOutput() ManualScaleSettingsPtrOutput {
	return o.ToManualScaleSettingsPtrOutputWithContext(context.Background())
}

func (o ManualScaleSettingsOutput) ToManualScaleSettingsPtrOutputWithContext(ctx context.Context) ManualScaleSettingsPtrOutput {
	return o.ApplyT(func(v ManualScaleSettings) *ManualScaleSettings {
		return &v
	}).(ManualScaleSettingsPtrOutput)
}

// An action to be performed when the cluster size is decreasing. The default value is requeue.
func (o ManualScaleSettingsOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManualScaleSettings) *string { return v.NodeDeallocationOption }).(pulumi.StringPtrOutput)
}

// The desired number of compute nodes in the Cluster. Default is 0.
func (o ManualScaleSettingsOutput) TargetNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ManualScaleSettings) int { return v.TargetNodeCount }).(pulumi.IntOutput)
}

type ManualScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (ManualScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualScaleSettings)(nil)).Elem()
}

func (o ManualScaleSettingsPtrOutput) ToManualScaleSettingsPtrOutput() ManualScaleSettingsPtrOutput {
	return o
}

func (o ManualScaleSettingsPtrOutput) ToManualScaleSettingsPtrOutputWithContext(ctx context.Context) ManualScaleSettingsPtrOutput {
	return o
}

func (o ManualScaleSettingsPtrOutput) Elem() ManualScaleSettingsOutput {
	return o.ApplyT(func(v *ManualScaleSettings) ManualScaleSettings { return *v }).(ManualScaleSettingsOutput)
}

// An action to be performed when the cluster size is decreasing. The default value is requeue.
func (o ManualScaleSettingsPtrOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.NodeDeallocationOption
	}).(pulumi.StringPtrOutput)
}

// The desired number of compute nodes in the Cluster. Default is 0.
func (o ManualScaleSettingsPtrOutput) TargetNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManualScaleSettings) *int {
		if v == nil {
			return nil
		}
		return &v.TargetNodeCount
	}).(pulumi.IntPtrOutput)
}

// Manual scale settings for the cluster.
type ManualScaleSettingsInvokeResponse struct {
	// An action to be performed when the cluster size is decreasing. The default value is requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The desired number of compute nodes in the Cluster. Default is 0.
	TargetNodeCount int `pulumi:"targetNodeCount"`
}

// ManualScaleSettingsInvokeResponseInput is an input type that accepts ManualScaleSettingsInvokeResponseArgs and ManualScaleSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `ManualScaleSettingsInvokeResponseInput` via:
//
//          ManualScaleSettingsInvokeResponseArgs{...}
type ManualScaleSettingsInvokeResponseInput interface {
	pulumi.Input

	ToManualScaleSettingsInvokeResponseOutput() ManualScaleSettingsInvokeResponseOutput
	ToManualScaleSettingsInvokeResponseOutputWithContext(context.Context) ManualScaleSettingsInvokeResponseOutput
}

// Manual scale settings for the cluster.
type ManualScaleSettingsInvokeResponseArgs struct {
	// An action to be performed when the cluster size is decreasing. The default value is requeue.
	NodeDeallocationOption pulumi.StringPtrInput `pulumi:"nodeDeallocationOption"`
	// The desired number of compute nodes in the Cluster. Default is 0.
	TargetNodeCount pulumi.IntInput `pulumi:"targetNodeCount"`
}

func (ManualScaleSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScaleSettingsInvokeResponse)(nil)).Elem()
}

func (i ManualScaleSettingsInvokeResponseArgs) ToManualScaleSettingsInvokeResponseOutput() ManualScaleSettingsInvokeResponseOutput {
	return i.ToManualScaleSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i ManualScaleSettingsInvokeResponseArgs) ToManualScaleSettingsInvokeResponseOutputWithContext(ctx context.Context) ManualScaleSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsInvokeResponseOutput)
}

func (i ManualScaleSettingsInvokeResponseArgs) ToManualScaleSettingsInvokeResponsePtrOutput() ManualScaleSettingsInvokeResponsePtrOutput {
	return i.ToManualScaleSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ManualScaleSettingsInvokeResponseArgs) ToManualScaleSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) ManualScaleSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsInvokeResponseOutput).ToManualScaleSettingsInvokeResponsePtrOutputWithContext(ctx)
}

// ManualScaleSettingsInvokeResponsePtrInput is an input type that accepts ManualScaleSettingsInvokeResponseArgs, ManualScaleSettingsInvokeResponsePtr and ManualScaleSettingsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ManualScaleSettingsInvokeResponsePtrInput` via:
//
//          ManualScaleSettingsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ManualScaleSettingsInvokeResponsePtrInput interface {
	pulumi.Input

	ToManualScaleSettingsInvokeResponsePtrOutput() ManualScaleSettingsInvokeResponsePtrOutput
	ToManualScaleSettingsInvokeResponsePtrOutputWithContext(context.Context) ManualScaleSettingsInvokeResponsePtrOutput
}

type manualScaleSettingsInvokeResponsePtrType ManualScaleSettingsInvokeResponseArgs

func ManualScaleSettingsInvokeResponsePtr(v *ManualScaleSettingsInvokeResponseArgs) ManualScaleSettingsInvokeResponsePtrInput {
	return (*manualScaleSettingsInvokeResponsePtrType)(v)
}

func (*manualScaleSettingsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualScaleSettingsInvokeResponse)(nil)).Elem()
}

func (i *manualScaleSettingsInvokeResponsePtrType) ToManualScaleSettingsInvokeResponsePtrOutput() ManualScaleSettingsInvokeResponsePtrOutput {
	return i.ToManualScaleSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *manualScaleSettingsInvokeResponsePtrType) ToManualScaleSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) ManualScaleSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsInvokeResponsePtrOutput)
}

// Manual scale settings for the cluster.
type ManualScaleSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ManualScaleSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScaleSettingsInvokeResponse)(nil)).Elem()
}

func (o ManualScaleSettingsInvokeResponseOutput) ToManualScaleSettingsInvokeResponseOutput() ManualScaleSettingsInvokeResponseOutput {
	return o
}

func (o ManualScaleSettingsInvokeResponseOutput) ToManualScaleSettingsInvokeResponseOutputWithContext(ctx context.Context) ManualScaleSettingsInvokeResponseOutput {
	return o
}

func (o ManualScaleSettingsInvokeResponseOutput) ToManualScaleSettingsInvokeResponsePtrOutput() ManualScaleSettingsInvokeResponsePtrOutput {
	return o.ToManualScaleSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ManualScaleSettingsInvokeResponseOutput) ToManualScaleSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) ManualScaleSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ManualScaleSettingsInvokeResponse) *ManualScaleSettingsInvokeResponse {
		return &v
	}).(ManualScaleSettingsInvokeResponsePtrOutput)
}

// An action to be performed when the cluster size is decreasing. The default value is requeue.
func (o ManualScaleSettingsInvokeResponseOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManualScaleSettingsInvokeResponse) *string { return v.NodeDeallocationOption }).(pulumi.StringPtrOutput)
}

// The desired number of compute nodes in the Cluster. Default is 0.
func (o ManualScaleSettingsInvokeResponseOutput) TargetNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ManualScaleSettingsInvokeResponse) int { return v.TargetNodeCount }).(pulumi.IntOutput)
}

type ManualScaleSettingsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ManualScaleSettingsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualScaleSettingsInvokeResponse)(nil)).Elem()
}

func (o ManualScaleSettingsInvokeResponsePtrOutput) ToManualScaleSettingsInvokeResponsePtrOutput() ManualScaleSettingsInvokeResponsePtrOutput {
	return o
}

func (o ManualScaleSettingsInvokeResponsePtrOutput) ToManualScaleSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) ManualScaleSettingsInvokeResponsePtrOutput {
	return o
}

func (o ManualScaleSettingsInvokeResponsePtrOutput) Elem() ManualScaleSettingsInvokeResponseOutput {
	return o.ApplyT(func(v *ManualScaleSettingsInvokeResponse) ManualScaleSettingsInvokeResponse { return *v }).(ManualScaleSettingsInvokeResponseOutput)
}

// An action to be performed when the cluster size is decreasing. The default value is requeue.
func (o ManualScaleSettingsInvokeResponsePtrOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualScaleSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeDeallocationOption
	}).(pulumi.StringPtrOutput)
}

// The desired number of compute nodes in the Cluster. Default is 0.
func (o ManualScaleSettingsInvokeResponsePtrOutput) TargetNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManualScaleSettingsInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TargetNodeCount
	}).(pulumi.IntPtrOutput)
}

// Manual scale settings for the cluster.
type ManualScaleSettingsResponse struct {
	// An action to be performed when the cluster size is decreasing. The default value is requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The desired number of compute nodes in the Cluster. Default is 0.
	TargetNodeCount int `pulumi:"targetNodeCount"`
}

// ManualScaleSettingsResponseInput is an input type that accepts ManualScaleSettingsResponseArgs and ManualScaleSettingsResponseOutput values.
// You can construct a concrete instance of `ManualScaleSettingsResponseInput` via:
//
//          ManualScaleSettingsResponseArgs{...}
type ManualScaleSettingsResponseInput interface {
	pulumi.Input

	ToManualScaleSettingsResponseOutput() ManualScaleSettingsResponseOutput
	ToManualScaleSettingsResponseOutputWithContext(context.Context) ManualScaleSettingsResponseOutput
}

// Manual scale settings for the cluster.
type ManualScaleSettingsResponseArgs struct {
	// An action to be performed when the cluster size is decreasing. The default value is requeue.
	NodeDeallocationOption pulumi.StringPtrInput `pulumi:"nodeDeallocationOption"`
	// The desired number of compute nodes in the Cluster. Default is 0.
	TargetNodeCount pulumi.IntInput `pulumi:"targetNodeCount"`
}

func (ManualScaleSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScaleSettingsResponse)(nil)).Elem()
}

func (i ManualScaleSettingsResponseArgs) ToManualScaleSettingsResponseOutput() ManualScaleSettingsResponseOutput {
	return i.ToManualScaleSettingsResponseOutputWithContext(context.Background())
}

func (i ManualScaleSettingsResponseArgs) ToManualScaleSettingsResponseOutputWithContext(ctx context.Context) ManualScaleSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsResponseOutput)
}

func (i ManualScaleSettingsResponseArgs) ToManualScaleSettingsResponsePtrOutput() ManualScaleSettingsResponsePtrOutput {
	return i.ToManualScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ManualScaleSettingsResponseArgs) ToManualScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ManualScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsResponseOutput).ToManualScaleSettingsResponsePtrOutputWithContext(ctx)
}

// ManualScaleSettingsResponsePtrInput is an input type that accepts ManualScaleSettingsResponseArgs, ManualScaleSettingsResponsePtr and ManualScaleSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ManualScaleSettingsResponsePtrInput` via:
//
//          ManualScaleSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ManualScaleSettingsResponsePtrInput interface {
	pulumi.Input

	ToManualScaleSettingsResponsePtrOutput() ManualScaleSettingsResponsePtrOutput
	ToManualScaleSettingsResponsePtrOutputWithContext(context.Context) ManualScaleSettingsResponsePtrOutput
}

type manualScaleSettingsResponsePtrType ManualScaleSettingsResponseArgs

func ManualScaleSettingsResponsePtr(v *ManualScaleSettingsResponseArgs) ManualScaleSettingsResponsePtrInput {
	return (*manualScaleSettingsResponsePtrType)(v)
}

func (*manualScaleSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualScaleSettingsResponse)(nil)).Elem()
}

func (i *manualScaleSettingsResponsePtrType) ToManualScaleSettingsResponsePtrOutput() ManualScaleSettingsResponsePtrOutput {
	return i.ToManualScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *manualScaleSettingsResponsePtrType) ToManualScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ManualScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScaleSettingsResponsePtrOutput)
}

// Manual scale settings for the cluster.
type ManualScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (ManualScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScaleSettingsResponse)(nil)).Elem()
}

func (o ManualScaleSettingsResponseOutput) ToManualScaleSettingsResponseOutput() ManualScaleSettingsResponseOutput {
	return o
}

func (o ManualScaleSettingsResponseOutput) ToManualScaleSettingsResponseOutputWithContext(ctx context.Context) ManualScaleSettingsResponseOutput {
	return o
}

func (o ManualScaleSettingsResponseOutput) ToManualScaleSettingsResponsePtrOutput() ManualScaleSettingsResponsePtrOutput {
	return o.ToManualScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ManualScaleSettingsResponseOutput) ToManualScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ManualScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManualScaleSettingsResponse) *ManualScaleSettingsResponse {
		return &v
	}).(ManualScaleSettingsResponsePtrOutput)
}

// An action to be performed when the cluster size is decreasing. The default value is requeue.
func (o ManualScaleSettingsResponseOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManualScaleSettingsResponse) *string { return v.NodeDeallocationOption }).(pulumi.StringPtrOutput)
}

// The desired number of compute nodes in the Cluster. Default is 0.
func (o ManualScaleSettingsResponseOutput) TargetNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ManualScaleSettingsResponse) int { return v.TargetNodeCount }).(pulumi.IntOutput)
}

type ManualScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ManualScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualScaleSettingsResponse)(nil)).Elem()
}

func (o ManualScaleSettingsResponsePtrOutput) ToManualScaleSettingsResponsePtrOutput() ManualScaleSettingsResponsePtrOutput {
	return o
}

func (o ManualScaleSettingsResponsePtrOutput) ToManualScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ManualScaleSettingsResponsePtrOutput {
	return o
}

func (o ManualScaleSettingsResponsePtrOutput) Elem() ManualScaleSettingsResponseOutput {
	return o.ApplyT(func(v *ManualScaleSettingsResponse) ManualScaleSettingsResponse { return *v }).(ManualScaleSettingsResponseOutput)
}

// An action to be performed when the cluster size is decreasing. The default value is requeue.
func (o ManualScaleSettingsResponsePtrOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeDeallocationOption
	}).(pulumi.StringPtrOutput)
}

// The desired number of compute nodes in the Cluster. Default is 0.
func (o ManualScaleSettingsResponsePtrOutput) TargetNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManualScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TargetNodeCount
	}).(pulumi.IntPtrOutput)
}

// File Server mount Information.
type MountSettingsInvokeResponse struct {
	// Internal IP address of the File Server which can be used to access the File Server from within the subnet.
	FileServerInternalIP *string `pulumi:"fileServerInternalIP"`
	// Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
	FileServerPublicIP *string `pulumi:"fileServerPublicIP"`
	// Path where the data disks are mounted on the File Server.
	MountPoint *string `pulumi:"mountPoint"`
}

// MountSettingsInvokeResponseInput is an input type that accepts MountSettingsInvokeResponseArgs and MountSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `MountSettingsInvokeResponseInput` via:
//
//          MountSettingsInvokeResponseArgs{...}
type MountSettingsInvokeResponseInput interface {
	pulumi.Input

	ToMountSettingsInvokeResponseOutput() MountSettingsInvokeResponseOutput
	ToMountSettingsInvokeResponseOutputWithContext(context.Context) MountSettingsInvokeResponseOutput
}

// File Server mount Information.
type MountSettingsInvokeResponseArgs struct {
	// Internal IP address of the File Server which can be used to access the File Server from within the subnet.
	FileServerInternalIP pulumi.StringPtrInput `pulumi:"fileServerInternalIP"`
	// Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
	FileServerPublicIP pulumi.StringPtrInput `pulumi:"fileServerPublicIP"`
	// Path where the data disks are mounted on the File Server.
	MountPoint pulumi.StringPtrInput `pulumi:"mountPoint"`
}

func (MountSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountSettingsInvokeResponse)(nil)).Elem()
}

func (i MountSettingsInvokeResponseArgs) ToMountSettingsInvokeResponseOutput() MountSettingsInvokeResponseOutput {
	return i.ToMountSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i MountSettingsInvokeResponseArgs) ToMountSettingsInvokeResponseOutputWithContext(ctx context.Context) MountSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountSettingsInvokeResponseOutput)
}

// File Server mount Information.
type MountSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (MountSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountSettingsInvokeResponse)(nil)).Elem()
}

func (o MountSettingsInvokeResponseOutput) ToMountSettingsInvokeResponseOutput() MountSettingsInvokeResponseOutput {
	return o
}

func (o MountSettingsInvokeResponseOutput) ToMountSettingsInvokeResponseOutputWithContext(ctx context.Context) MountSettingsInvokeResponseOutput {
	return o
}

// Internal IP address of the File Server which can be used to access the File Server from within the subnet.
func (o MountSettingsInvokeResponseOutput) FileServerInternalIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountSettingsInvokeResponse) *string { return v.FileServerInternalIP }).(pulumi.StringPtrOutput)
}

// Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
func (o MountSettingsInvokeResponseOutput) FileServerPublicIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountSettingsInvokeResponse) *string { return v.FileServerPublicIP }).(pulumi.StringPtrOutput)
}

// Path where the data disks are mounted on the File Server.
func (o MountSettingsInvokeResponseOutput) MountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountSettingsInvokeResponse) *string { return v.MountPoint }).(pulumi.StringPtrOutput)
}

// File Server mount Information.
type MountSettingsResponse struct {
	// Internal IP address of the File Server which can be used to access the File Server from within the subnet.
	FileServerInternalIP *string `pulumi:"fileServerInternalIP"`
	// Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
	FileServerPublicIP *string `pulumi:"fileServerPublicIP"`
	// Path where the data disks are mounted on the File Server.
	MountPoint *string `pulumi:"mountPoint"`
}

// MountSettingsResponseInput is an input type that accepts MountSettingsResponseArgs and MountSettingsResponseOutput values.
// You can construct a concrete instance of `MountSettingsResponseInput` via:
//
//          MountSettingsResponseArgs{...}
type MountSettingsResponseInput interface {
	pulumi.Input

	ToMountSettingsResponseOutput() MountSettingsResponseOutput
	ToMountSettingsResponseOutputWithContext(context.Context) MountSettingsResponseOutput
}

// File Server mount Information.
type MountSettingsResponseArgs struct {
	// Internal IP address of the File Server which can be used to access the File Server from within the subnet.
	FileServerInternalIP pulumi.StringPtrInput `pulumi:"fileServerInternalIP"`
	// Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
	FileServerPublicIP pulumi.StringPtrInput `pulumi:"fileServerPublicIP"`
	// Path where the data disks are mounted on the File Server.
	MountPoint pulumi.StringPtrInput `pulumi:"mountPoint"`
}

func (MountSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountSettingsResponse)(nil)).Elem()
}

func (i MountSettingsResponseArgs) ToMountSettingsResponseOutput() MountSettingsResponseOutput {
	return i.ToMountSettingsResponseOutputWithContext(context.Background())
}

func (i MountSettingsResponseArgs) ToMountSettingsResponseOutputWithContext(ctx context.Context) MountSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountSettingsResponseOutput)
}

func (i MountSettingsResponseArgs) ToMountSettingsResponsePtrOutput() MountSettingsResponsePtrOutput {
	return i.ToMountSettingsResponsePtrOutputWithContext(context.Background())
}

func (i MountSettingsResponseArgs) ToMountSettingsResponsePtrOutputWithContext(ctx context.Context) MountSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountSettingsResponseOutput).ToMountSettingsResponsePtrOutputWithContext(ctx)
}

// MountSettingsResponsePtrInput is an input type that accepts MountSettingsResponseArgs, MountSettingsResponsePtr and MountSettingsResponsePtrOutput values.
// You can construct a concrete instance of `MountSettingsResponsePtrInput` via:
//
//          MountSettingsResponseArgs{...}
//
//  or:
//
//          nil
type MountSettingsResponsePtrInput interface {
	pulumi.Input

	ToMountSettingsResponsePtrOutput() MountSettingsResponsePtrOutput
	ToMountSettingsResponsePtrOutputWithContext(context.Context) MountSettingsResponsePtrOutput
}

type mountSettingsResponsePtrType MountSettingsResponseArgs

func MountSettingsResponsePtr(v *MountSettingsResponseArgs) MountSettingsResponsePtrInput {
	return (*mountSettingsResponsePtrType)(v)
}

func (*mountSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MountSettingsResponse)(nil)).Elem()
}

func (i *mountSettingsResponsePtrType) ToMountSettingsResponsePtrOutput() MountSettingsResponsePtrOutput {
	return i.ToMountSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *mountSettingsResponsePtrType) ToMountSettingsResponsePtrOutputWithContext(ctx context.Context) MountSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountSettingsResponsePtrOutput)
}

// File Server mount Information.
type MountSettingsResponseOutput struct{ *pulumi.OutputState }

func (MountSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountSettingsResponse)(nil)).Elem()
}

func (o MountSettingsResponseOutput) ToMountSettingsResponseOutput() MountSettingsResponseOutput {
	return o
}

func (o MountSettingsResponseOutput) ToMountSettingsResponseOutputWithContext(ctx context.Context) MountSettingsResponseOutput {
	return o
}

func (o MountSettingsResponseOutput) ToMountSettingsResponsePtrOutput() MountSettingsResponsePtrOutput {
	return o.ToMountSettingsResponsePtrOutputWithContext(context.Background())
}

func (o MountSettingsResponseOutput) ToMountSettingsResponsePtrOutputWithContext(ctx context.Context) MountSettingsResponsePtrOutput {
	return o.ApplyT(func(v MountSettingsResponse) *MountSettingsResponse {
		return &v
	}).(MountSettingsResponsePtrOutput)
}

// Internal IP address of the File Server which can be used to access the File Server from within the subnet.
func (o MountSettingsResponseOutput) FileServerInternalIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountSettingsResponse) *string { return v.FileServerInternalIP }).(pulumi.StringPtrOutput)
}

// Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
func (o MountSettingsResponseOutput) FileServerPublicIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountSettingsResponse) *string { return v.FileServerPublicIP }).(pulumi.StringPtrOutput)
}

// Path where the data disks are mounted on the File Server.
func (o MountSettingsResponseOutput) MountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountSettingsResponse) *string { return v.MountPoint }).(pulumi.StringPtrOutput)
}

type MountSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MountSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountSettingsResponse)(nil)).Elem()
}

func (o MountSettingsResponsePtrOutput) ToMountSettingsResponsePtrOutput() MountSettingsResponsePtrOutput {
	return o
}

func (o MountSettingsResponsePtrOutput) ToMountSettingsResponsePtrOutputWithContext(ctx context.Context) MountSettingsResponsePtrOutput {
	return o
}

func (o MountSettingsResponsePtrOutput) Elem() MountSettingsResponseOutput {
	return o.ApplyT(func(v *MountSettingsResponse) MountSettingsResponse { return *v }).(MountSettingsResponseOutput)
}

// Internal IP address of the File Server which can be used to access the File Server from within the subnet.
func (o MountSettingsResponsePtrOutput) FileServerInternalIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FileServerInternalIP
	}).(pulumi.StringPtrOutput)
}

// Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
func (o MountSettingsResponsePtrOutput) FileServerPublicIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FileServerPublicIP
	}).(pulumi.StringPtrOutput)
}

// Path where the data disks are mounted on the File Server.
func (o MountSettingsResponsePtrOutput) MountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MountPoint
	}).(pulumi.StringPtrOutput)
}

// Details of volumes to mount on the cluster.
type MountVolumes struct {
	// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
	AzureBlobFileSystems []AzureBlobFileSystemReference `pulumi:"azureBlobFileSystems"`
	// A collection of Azure File Shares that are to be mounted to the cluster nodes.
	AzureFileShares []AzureFileShareReference `pulumi:"azureFileShares"`
	// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
	FileServers []FileServerReference `pulumi:"fileServers"`
	// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
	UnmanagedFileSystems []UnmanagedFileSystemReference `pulumi:"unmanagedFileSystems"`
}

// MountVolumesInput is an input type that accepts MountVolumesArgs and MountVolumesOutput values.
// You can construct a concrete instance of `MountVolumesInput` via:
//
//          MountVolumesArgs{...}
type MountVolumesInput interface {
	pulumi.Input

	ToMountVolumesOutput() MountVolumesOutput
	ToMountVolumesOutputWithContext(context.Context) MountVolumesOutput
}

// Details of volumes to mount on the cluster.
type MountVolumesArgs struct {
	// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
	AzureBlobFileSystems AzureBlobFileSystemReferenceArrayInput `pulumi:"azureBlobFileSystems"`
	// A collection of Azure File Shares that are to be mounted to the cluster nodes.
	AzureFileShares AzureFileShareReferenceArrayInput `pulumi:"azureFileShares"`
	// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
	FileServers FileServerReferenceArrayInput `pulumi:"fileServers"`
	// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
	UnmanagedFileSystems UnmanagedFileSystemReferenceArrayInput `pulumi:"unmanagedFileSystems"`
}

func (MountVolumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountVolumes)(nil)).Elem()
}

func (i MountVolumesArgs) ToMountVolumesOutput() MountVolumesOutput {
	return i.ToMountVolumesOutputWithContext(context.Background())
}

func (i MountVolumesArgs) ToMountVolumesOutputWithContext(ctx context.Context) MountVolumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesOutput)
}

func (i MountVolumesArgs) ToMountVolumesPtrOutput() MountVolumesPtrOutput {
	return i.ToMountVolumesPtrOutputWithContext(context.Background())
}

func (i MountVolumesArgs) ToMountVolumesPtrOutputWithContext(ctx context.Context) MountVolumesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesOutput).ToMountVolumesPtrOutputWithContext(ctx)
}

// MountVolumesPtrInput is an input type that accepts MountVolumesArgs, MountVolumesPtr and MountVolumesPtrOutput values.
// You can construct a concrete instance of `MountVolumesPtrInput` via:
//
//          MountVolumesArgs{...}
//
//  or:
//
//          nil
type MountVolumesPtrInput interface {
	pulumi.Input

	ToMountVolumesPtrOutput() MountVolumesPtrOutput
	ToMountVolumesPtrOutputWithContext(context.Context) MountVolumesPtrOutput
}

type mountVolumesPtrType MountVolumesArgs

func MountVolumesPtr(v *MountVolumesArgs) MountVolumesPtrInput {
	return (*mountVolumesPtrType)(v)
}

func (*mountVolumesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MountVolumes)(nil)).Elem()
}

func (i *mountVolumesPtrType) ToMountVolumesPtrOutput() MountVolumesPtrOutput {
	return i.ToMountVolumesPtrOutputWithContext(context.Background())
}

func (i *mountVolumesPtrType) ToMountVolumesPtrOutputWithContext(ctx context.Context) MountVolumesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesPtrOutput)
}

// Details of volumes to mount on the cluster.
type MountVolumesOutput struct{ *pulumi.OutputState }

func (MountVolumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountVolumes)(nil)).Elem()
}

func (o MountVolumesOutput) ToMountVolumesOutput() MountVolumesOutput {
	return o
}

func (o MountVolumesOutput) ToMountVolumesOutputWithContext(ctx context.Context) MountVolumesOutput {
	return o
}

func (o MountVolumesOutput) ToMountVolumesPtrOutput() MountVolumesPtrOutput {
	return o.ToMountVolumesPtrOutputWithContext(context.Background())
}

func (o MountVolumesOutput) ToMountVolumesPtrOutputWithContext(ctx context.Context) MountVolumesPtrOutput {
	return o.ApplyT(func(v MountVolumes) *MountVolumes {
		return &v
	}).(MountVolumesPtrOutput)
}

// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
func (o MountVolumesOutput) AzureBlobFileSystems() AzureBlobFileSystemReferenceArrayOutput {
	return o.ApplyT(func(v MountVolumes) []AzureBlobFileSystemReference { return v.AzureBlobFileSystems }).(AzureBlobFileSystemReferenceArrayOutput)
}

// A collection of Azure File Shares that are to be mounted to the cluster nodes.
func (o MountVolumesOutput) AzureFileShares() AzureFileShareReferenceArrayOutput {
	return o.ApplyT(func(v MountVolumes) []AzureFileShareReference { return v.AzureFileShares }).(AzureFileShareReferenceArrayOutput)
}

// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
func (o MountVolumesOutput) FileServers() FileServerReferenceArrayOutput {
	return o.ApplyT(func(v MountVolumes) []FileServerReference { return v.FileServers }).(FileServerReferenceArrayOutput)
}

// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
func (o MountVolumesOutput) UnmanagedFileSystems() UnmanagedFileSystemReferenceArrayOutput {
	return o.ApplyT(func(v MountVolumes) []UnmanagedFileSystemReference { return v.UnmanagedFileSystems }).(UnmanagedFileSystemReferenceArrayOutput)
}

type MountVolumesPtrOutput struct{ *pulumi.OutputState }

func (MountVolumesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountVolumes)(nil)).Elem()
}

func (o MountVolumesPtrOutput) ToMountVolumesPtrOutput() MountVolumesPtrOutput {
	return o
}

func (o MountVolumesPtrOutput) ToMountVolumesPtrOutputWithContext(ctx context.Context) MountVolumesPtrOutput {
	return o
}

func (o MountVolumesPtrOutput) Elem() MountVolumesOutput {
	return o.ApplyT(func(v *MountVolumes) MountVolumes { return *v }).(MountVolumesOutput)
}

// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
func (o MountVolumesPtrOutput) AzureBlobFileSystems() AzureBlobFileSystemReferenceArrayOutput {
	return o.ApplyT(func(v *MountVolumes) []AzureBlobFileSystemReference {
		if v == nil {
			return nil
		}
		return v.AzureBlobFileSystems
	}).(AzureBlobFileSystemReferenceArrayOutput)
}

// A collection of Azure File Shares that are to be mounted to the cluster nodes.
func (o MountVolumesPtrOutput) AzureFileShares() AzureFileShareReferenceArrayOutput {
	return o.ApplyT(func(v *MountVolumes) []AzureFileShareReference {
		if v == nil {
			return nil
		}
		return v.AzureFileShares
	}).(AzureFileShareReferenceArrayOutput)
}

// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
func (o MountVolumesPtrOutput) FileServers() FileServerReferenceArrayOutput {
	return o.ApplyT(func(v *MountVolumes) []FileServerReference {
		if v == nil {
			return nil
		}
		return v.FileServers
	}).(FileServerReferenceArrayOutput)
}

// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
func (o MountVolumesPtrOutput) UnmanagedFileSystems() UnmanagedFileSystemReferenceArrayOutput {
	return o.ApplyT(func(v *MountVolumes) []UnmanagedFileSystemReference {
		if v == nil {
			return nil
		}
		return v.UnmanagedFileSystems
	}).(UnmanagedFileSystemReferenceArrayOutput)
}

// Details of volumes to mount on the cluster.
type MountVolumesInvokeResponse struct {
	// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
	AzureBlobFileSystems []AzureBlobFileSystemReferenceInvokeResponse `pulumi:"azureBlobFileSystems"`
	// A collection of Azure File Shares that are to be mounted to the cluster nodes.
	AzureFileShares []AzureFileShareReferenceInvokeResponse `pulumi:"azureFileShares"`
	// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
	FileServers []FileServerReferenceInvokeResponse `pulumi:"fileServers"`
	// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
	UnmanagedFileSystems []UnmanagedFileSystemReferenceInvokeResponse `pulumi:"unmanagedFileSystems"`
}

// MountVolumesInvokeResponseInput is an input type that accepts MountVolumesInvokeResponseArgs and MountVolumesInvokeResponseOutput values.
// You can construct a concrete instance of `MountVolumesInvokeResponseInput` via:
//
//          MountVolumesInvokeResponseArgs{...}
type MountVolumesInvokeResponseInput interface {
	pulumi.Input

	ToMountVolumesInvokeResponseOutput() MountVolumesInvokeResponseOutput
	ToMountVolumesInvokeResponseOutputWithContext(context.Context) MountVolumesInvokeResponseOutput
}

// Details of volumes to mount on the cluster.
type MountVolumesInvokeResponseArgs struct {
	// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
	AzureBlobFileSystems AzureBlobFileSystemReferenceInvokeResponseArrayInput `pulumi:"azureBlobFileSystems"`
	// A collection of Azure File Shares that are to be mounted to the cluster nodes.
	AzureFileShares AzureFileShareReferenceInvokeResponseArrayInput `pulumi:"azureFileShares"`
	// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
	FileServers FileServerReferenceInvokeResponseArrayInput `pulumi:"fileServers"`
	// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
	UnmanagedFileSystems UnmanagedFileSystemReferenceInvokeResponseArrayInput `pulumi:"unmanagedFileSystems"`
}

func (MountVolumesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountVolumesInvokeResponse)(nil)).Elem()
}

func (i MountVolumesInvokeResponseArgs) ToMountVolumesInvokeResponseOutput() MountVolumesInvokeResponseOutput {
	return i.ToMountVolumesInvokeResponseOutputWithContext(context.Background())
}

func (i MountVolumesInvokeResponseArgs) ToMountVolumesInvokeResponseOutputWithContext(ctx context.Context) MountVolumesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesInvokeResponseOutput)
}

func (i MountVolumesInvokeResponseArgs) ToMountVolumesInvokeResponsePtrOutput() MountVolumesInvokeResponsePtrOutput {
	return i.ToMountVolumesInvokeResponsePtrOutputWithContext(context.Background())
}

func (i MountVolumesInvokeResponseArgs) ToMountVolumesInvokeResponsePtrOutputWithContext(ctx context.Context) MountVolumesInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesInvokeResponseOutput).ToMountVolumesInvokeResponsePtrOutputWithContext(ctx)
}

// MountVolumesInvokeResponsePtrInput is an input type that accepts MountVolumesInvokeResponseArgs, MountVolumesInvokeResponsePtr and MountVolumesInvokeResponsePtrOutput values.
// You can construct a concrete instance of `MountVolumesInvokeResponsePtrInput` via:
//
//          MountVolumesInvokeResponseArgs{...}
//
//  or:
//
//          nil
type MountVolumesInvokeResponsePtrInput interface {
	pulumi.Input

	ToMountVolumesInvokeResponsePtrOutput() MountVolumesInvokeResponsePtrOutput
	ToMountVolumesInvokeResponsePtrOutputWithContext(context.Context) MountVolumesInvokeResponsePtrOutput
}

type mountVolumesInvokeResponsePtrType MountVolumesInvokeResponseArgs

func MountVolumesInvokeResponsePtr(v *MountVolumesInvokeResponseArgs) MountVolumesInvokeResponsePtrInput {
	return (*mountVolumesInvokeResponsePtrType)(v)
}

func (*mountVolumesInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MountVolumesInvokeResponse)(nil)).Elem()
}

func (i *mountVolumesInvokeResponsePtrType) ToMountVolumesInvokeResponsePtrOutput() MountVolumesInvokeResponsePtrOutput {
	return i.ToMountVolumesInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *mountVolumesInvokeResponsePtrType) ToMountVolumesInvokeResponsePtrOutputWithContext(ctx context.Context) MountVolumesInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesInvokeResponsePtrOutput)
}

// Details of volumes to mount on the cluster.
type MountVolumesInvokeResponseOutput struct{ *pulumi.OutputState }

func (MountVolumesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountVolumesInvokeResponse)(nil)).Elem()
}

func (o MountVolumesInvokeResponseOutput) ToMountVolumesInvokeResponseOutput() MountVolumesInvokeResponseOutput {
	return o
}

func (o MountVolumesInvokeResponseOutput) ToMountVolumesInvokeResponseOutputWithContext(ctx context.Context) MountVolumesInvokeResponseOutput {
	return o
}

func (o MountVolumesInvokeResponseOutput) ToMountVolumesInvokeResponsePtrOutput() MountVolumesInvokeResponsePtrOutput {
	return o.ToMountVolumesInvokeResponsePtrOutputWithContext(context.Background())
}

func (o MountVolumesInvokeResponseOutput) ToMountVolumesInvokeResponsePtrOutputWithContext(ctx context.Context) MountVolumesInvokeResponsePtrOutput {
	return o.ApplyT(func(v MountVolumesInvokeResponse) *MountVolumesInvokeResponse {
		return &v
	}).(MountVolumesInvokeResponsePtrOutput)
}

// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
func (o MountVolumesInvokeResponseOutput) AzureBlobFileSystems() AzureBlobFileSystemReferenceInvokeResponseArrayOutput {
	return o.ApplyT(func(v MountVolumesInvokeResponse) []AzureBlobFileSystemReferenceInvokeResponse {
		return v.AzureBlobFileSystems
	}).(AzureBlobFileSystemReferenceInvokeResponseArrayOutput)
}

// A collection of Azure File Shares that are to be mounted to the cluster nodes.
func (o MountVolumesInvokeResponseOutput) AzureFileShares() AzureFileShareReferenceInvokeResponseArrayOutput {
	return o.ApplyT(func(v MountVolumesInvokeResponse) []AzureFileShareReferenceInvokeResponse { return v.AzureFileShares }).(AzureFileShareReferenceInvokeResponseArrayOutput)
}

// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
func (o MountVolumesInvokeResponseOutput) FileServers() FileServerReferenceInvokeResponseArrayOutput {
	return o.ApplyT(func(v MountVolumesInvokeResponse) []FileServerReferenceInvokeResponse { return v.FileServers }).(FileServerReferenceInvokeResponseArrayOutput)
}

// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
func (o MountVolumesInvokeResponseOutput) UnmanagedFileSystems() UnmanagedFileSystemReferenceInvokeResponseArrayOutput {
	return o.ApplyT(func(v MountVolumesInvokeResponse) []UnmanagedFileSystemReferenceInvokeResponse {
		return v.UnmanagedFileSystems
	}).(UnmanagedFileSystemReferenceInvokeResponseArrayOutput)
}

type MountVolumesInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (MountVolumesInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountVolumesInvokeResponse)(nil)).Elem()
}

func (o MountVolumesInvokeResponsePtrOutput) ToMountVolumesInvokeResponsePtrOutput() MountVolumesInvokeResponsePtrOutput {
	return o
}

func (o MountVolumesInvokeResponsePtrOutput) ToMountVolumesInvokeResponsePtrOutputWithContext(ctx context.Context) MountVolumesInvokeResponsePtrOutput {
	return o
}

func (o MountVolumesInvokeResponsePtrOutput) Elem() MountVolumesInvokeResponseOutput {
	return o.ApplyT(func(v *MountVolumesInvokeResponse) MountVolumesInvokeResponse { return *v }).(MountVolumesInvokeResponseOutput)
}

// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
func (o MountVolumesInvokeResponsePtrOutput) AzureBlobFileSystems() AzureBlobFileSystemReferenceInvokeResponseArrayOutput {
	return o.ApplyT(func(v *MountVolumesInvokeResponse) []AzureBlobFileSystemReferenceInvokeResponse {
		if v == nil {
			return nil
		}
		return v.AzureBlobFileSystems
	}).(AzureBlobFileSystemReferenceInvokeResponseArrayOutput)
}

// A collection of Azure File Shares that are to be mounted to the cluster nodes.
func (o MountVolumesInvokeResponsePtrOutput) AzureFileShares() AzureFileShareReferenceInvokeResponseArrayOutput {
	return o.ApplyT(func(v *MountVolumesInvokeResponse) []AzureFileShareReferenceInvokeResponse {
		if v == nil {
			return nil
		}
		return v.AzureFileShares
	}).(AzureFileShareReferenceInvokeResponseArrayOutput)
}

// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
func (o MountVolumesInvokeResponsePtrOutput) FileServers() FileServerReferenceInvokeResponseArrayOutput {
	return o.ApplyT(func(v *MountVolumesInvokeResponse) []FileServerReferenceInvokeResponse {
		if v == nil {
			return nil
		}
		return v.FileServers
	}).(FileServerReferenceInvokeResponseArrayOutput)
}

// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
func (o MountVolumesInvokeResponsePtrOutput) UnmanagedFileSystems() UnmanagedFileSystemReferenceInvokeResponseArrayOutput {
	return o.ApplyT(func(v *MountVolumesInvokeResponse) []UnmanagedFileSystemReferenceInvokeResponse {
		if v == nil {
			return nil
		}
		return v.UnmanagedFileSystems
	}).(UnmanagedFileSystemReferenceInvokeResponseArrayOutput)
}

// Details of volumes to mount on the cluster.
type MountVolumesResponse struct {
	// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
	AzureBlobFileSystems []AzureBlobFileSystemReferenceResponse `pulumi:"azureBlobFileSystems"`
	// A collection of Azure File Shares that are to be mounted to the cluster nodes.
	AzureFileShares []AzureFileShareReferenceResponse `pulumi:"azureFileShares"`
	// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
	FileServers []FileServerReferenceResponse `pulumi:"fileServers"`
	// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
	UnmanagedFileSystems []UnmanagedFileSystemReferenceResponse `pulumi:"unmanagedFileSystems"`
}

// MountVolumesResponseInput is an input type that accepts MountVolumesResponseArgs and MountVolumesResponseOutput values.
// You can construct a concrete instance of `MountVolumesResponseInput` via:
//
//          MountVolumesResponseArgs{...}
type MountVolumesResponseInput interface {
	pulumi.Input

	ToMountVolumesResponseOutput() MountVolumesResponseOutput
	ToMountVolumesResponseOutputWithContext(context.Context) MountVolumesResponseOutput
}

// Details of volumes to mount on the cluster.
type MountVolumesResponseArgs struct {
	// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
	AzureBlobFileSystems AzureBlobFileSystemReferenceResponseArrayInput `pulumi:"azureBlobFileSystems"`
	// A collection of Azure File Shares that are to be mounted to the cluster nodes.
	AzureFileShares AzureFileShareReferenceResponseArrayInput `pulumi:"azureFileShares"`
	// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
	FileServers FileServerReferenceResponseArrayInput `pulumi:"fileServers"`
	// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
	UnmanagedFileSystems UnmanagedFileSystemReferenceResponseArrayInput `pulumi:"unmanagedFileSystems"`
}

func (MountVolumesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountVolumesResponse)(nil)).Elem()
}

func (i MountVolumesResponseArgs) ToMountVolumesResponseOutput() MountVolumesResponseOutput {
	return i.ToMountVolumesResponseOutputWithContext(context.Background())
}

func (i MountVolumesResponseArgs) ToMountVolumesResponseOutputWithContext(ctx context.Context) MountVolumesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesResponseOutput)
}

func (i MountVolumesResponseArgs) ToMountVolumesResponsePtrOutput() MountVolumesResponsePtrOutput {
	return i.ToMountVolumesResponsePtrOutputWithContext(context.Background())
}

func (i MountVolumesResponseArgs) ToMountVolumesResponsePtrOutputWithContext(ctx context.Context) MountVolumesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesResponseOutput).ToMountVolumesResponsePtrOutputWithContext(ctx)
}

// MountVolumesResponsePtrInput is an input type that accepts MountVolumesResponseArgs, MountVolumesResponsePtr and MountVolumesResponsePtrOutput values.
// You can construct a concrete instance of `MountVolumesResponsePtrInput` via:
//
//          MountVolumesResponseArgs{...}
//
//  or:
//
//          nil
type MountVolumesResponsePtrInput interface {
	pulumi.Input

	ToMountVolumesResponsePtrOutput() MountVolumesResponsePtrOutput
	ToMountVolumesResponsePtrOutputWithContext(context.Context) MountVolumesResponsePtrOutput
}

type mountVolumesResponsePtrType MountVolumesResponseArgs

func MountVolumesResponsePtr(v *MountVolumesResponseArgs) MountVolumesResponsePtrInput {
	return (*mountVolumesResponsePtrType)(v)
}

func (*mountVolumesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MountVolumesResponse)(nil)).Elem()
}

func (i *mountVolumesResponsePtrType) ToMountVolumesResponsePtrOutput() MountVolumesResponsePtrOutput {
	return i.ToMountVolumesResponsePtrOutputWithContext(context.Background())
}

func (i *mountVolumesResponsePtrType) ToMountVolumesResponsePtrOutputWithContext(ctx context.Context) MountVolumesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountVolumesResponsePtrOutput)
}

// Details of volumes to mount on the cluster.
type MountVolumesResponseOutput struct{ *pulumi.OutputState }

func (MountVolumesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountVolumesResponse)(nil)).Elem()
}

func (o MountVolumesResponseOutput) ToMountVolumesResponseOutput() MountVolumesResponseOutput {
	return o
}

func (o MountVolumesResponseOutput) ToMountVolumesResponseOutputWithContext(ctx context.Context) MountVolumesResponseOutput {
	return o
}

func (o MountVolumesResponseOutput) ToMountVolumesResponsePtrOutput() MountVolumesResponsePtrOutput {
	return o.ToMountVolumesResponsePtrOutputWithContext(context.Background())
}

func (o MountVolumesResponseOutput) ToMountVolumesResponsePtrOutputWithContext(ctx context.Context) MountVolumesResponsePtrOutput {
	return o.ApplyT(func(v MountVolumesResponse) *MountVolumesResponse {
		return &v
	}).(MountVolumesResponsePtrOutput)
}

// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
func (o MountVolumesResponseOutput) AzureBlobFileSystems() AzureBlobFileSystemReferenceResponseArrayOutput {
	return o.ApplyT(func(v MountVolumesResponse) []AzureBlobFileSystemReferenceResponse { return v.AzureBlobFileSystems }).(AzureBlobFileSystemReferenceResponseArrayOutput)
}

// A collection of Azure File Shares that are to be mounted to the cluster nodes.
func (o MountVolumesResponseOutput) AzureFileShares() AzureFileShareReferenceResponseArrayOutput {
	return o.ApplyT(func(v MountVolumesResponse) []AzureFileShareReferenceResponse { return v.AzureFileShares }).(AzureFileShareReferenceResponseArrayOutput)
}

// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
func (o MountVolumesResponseOutput) FileServers() FileServerReferenceResponseArrayOutput {
	return o.ApplyT(func(v MountVolumesResponse) []FileServerReferenceResponse { return v.FileServers }).(FileServerReferenceResponseArrayOutput)
}

// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
func (o MountVolumesResponseOutput) UnmanagedFileSystems() UnmanagedFileSystemReferenceResponseArrayOutput {
	return o.ApplyT(func(v MountVolumesResponse) []UnmanagedFileSystemReferenceResponse { return v.UnmanagedFileSystems }).(UnmanagedFileSystemReferenceResponseArrayOutput)
}

type MountVolumesResponsePtrOutput struct{ *pulumi.OutputState }

func (MountVolumesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountVolumesResponse)(nil)).Elem()
}

func (o MountVolumesResponsePtrOutput) ToMountVolumesResponsePtrOutput() MountVolumesResponsePtrOutput {
	return o
}

func (o MountVolumesResponsePtrOutput) ToMountVolumesResponsePtrOutputWithContext(ctx context.Context) MountVolumesResponsePtrOutput {
	return o
}

func (o MountVolumesResponsePtrOutput) Elem() MountVolumesResponseOutput {
	return o.ApplyT(func(v *MountVolumesResponse) MountVolumesResponse { return *v }).(MountVolumesResponseOutput)
}

// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
func (o MountVolumesResponsePtrOutput) AzureBlobFileSystems() AzureBlobFileSystemReferenceResponseArrayOutput {
	return o.ApplyT(func(v *MountVolumesResponse) []AzureBlobFileSystemReferenceResponse {
		if v == nil {
			return nil
		}
		return v.AzureBlobFileSystems
	}).(AzureBlobFileSystemReferenceResponseArrayOutput)
}

// A collection of Azure File Shares that are to be mounted to the cluster nodes.
func (o MountVolumesResponsePtrOutput) AzureFileShares() AzureFileShareReferenceResponseArrayOutput {
	return o.ApplyT(func(v *MountVolumesResponse) []AzureFileShareReferenceResponse {
		if v == nil {
			return nil
		}
		return v.AzureFileShares
	}).(AzureFileShareReferenceResponseArrayOutput)
}

// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
func (o MountVolumesResponsePtrOutput) FileServers() FileServerReferenceResponseArrayOutput {
	return o.ApplyT(func(v *MountVolumesResponse) []FileServerReferenceResponse {
		if v == nil {
			return nil
		}
		return v.FileServers
	}).(FileServerReferenceResponseArrayOutput)
}

// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
func (o MountVolumesResponsePtrOutput) UnmanagedFileSystems() UnmanagedFileSystemReferenceResponseArrayOutput {
	return o.ApplyT(func(v *MountVolumesResponse) []UnmanagedFileSystemReferenceResponse {
		if v == nil {
			return nil
		}
		return v.UnmanagedFileSystems
	}).(UnmanagedFileSystemReferenceResponseArrayOutput)
}

// Name-value pair.
type NameValuePairInvokeResponse struct {
	// The name in the name-value pair.
	Name *string `pulumi:"name"`
	// The value in the name-value pair.
	Value *string `pulumi:"value"`
}

// NameValuePairInvokeResponseInput is an input type that accepts NameValuePairInvokeResponseArgs and NameValuePairInvokeResponseOutput values.
// You can construct a concrete instance of `NameValuePairInvokeResponseInput` via:
//
//          NameValuePairInvokeResponseArgs{...}
type NameValuePairInvokeResponseInput interface {
	pulumi.Input

	ToNameValuePairInvokeResponseOutput() NameValuePairInvokeResponseOutput
	ToNameValuePairInvokeResponseOutputWithContext(context.Context) NameValuePairInvokeResponseOutput
}

// Name-value pair.
type NameValuePairInvokeResponseArgs struct {
	// The name in the name-value pair.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value in the name-value pair.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NameValuePairInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NameValuePairInvokeResponse)(nil)).Elem()
}

func (i NameValuePairInvokeResponseArgs) ToNameValuePairInvokeResponseOutput() NameValuePairInvokeResponseOutput {
	return i.ToNameValuePairInvokeResponseOutputWithContext(context.Background())
}

func (i NameValuePairInvokeResponseArgs) ToNameValuePairInvokeResponseOutputWithContext(ctx context.Context) NameValuePairInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameValuePairInvokeResponseOutput)
}

// NameValuePairInvokeResponseArrayInput is an input type that accepts NameValuePairInvokeResponseArray and NameValuePairInvokeResponseArrayOutput values.
// You can construct a concrete instance of `NameValuePairInvokeResponseArrayInput` via:
//
//          NameValuePairInvokeResponseArray{ NameValuePairInvokeResponseArgs{...} }
type NameValuePairInvokeResponseArrayInput interface {
	pulumi.Input

	ToNameValuePairInvokeResponseArrayOutput() NameValuePairInvokeResponseArrayOutput
	ToNameValuePairInvokeResponseArrayOutputWithContext(context.Context) NameValuePairInvokeResponseArrayOutput
}

type NameValuePairInvokeResponseArray []NameValuePairInvokeResponseInput

func (NameValuePairInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NameValuePairInvokeResponse)(nil)).Elem()
}

func (i NameValuePairInvokeResponseArray) ToNameValuePairInvokeResponseArrayOutput() NameValuePairInvokeResponseArrayOutput {
	return i.ToNameValuePairInvokeResponseArrayOutputWithContext(context.Background())
}

func (i NameValuePairInvokeResponseArray) ToNameValuePairInvokeResponseArrayOutputWithContext(ctx context.Context) NameValuePairInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameValuePairInvokeResponseArrayOutput)
}

// Name-value pair.
type NameValuePairInvokeResponseOutput struct{ *pulumi.OutputState }

func (NameValuePairInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NameValuePairInvokeResponse)(nil)).Elem()
}

func (o NameValuePairInvokeResponseOutput) ToNameValuePairInvokeResponseOutput() NameValuePairInvokeResponseOutput {
	return o
}

func (o NameValuePairInvokeResponseOutput) ToNameValuePairInvokeResponseOutputWithContext(ctx context.Context) NameValuePairInvokeResponseOutput {
	return o
}

// The name in the name-value pair.
func (o NameValuePairInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NameValuePairInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value in the name-value pair.
func (o NameValuePairInvokeResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NameValuePairInvokeResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NameValuePairInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (NameValuePairInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NameValuePairInvokeResponse)(nil)).Elem()
}

func (o NameValuePairInvokeResponseArrayOutput) ToNameValuePairInvokeResponseArrayOutput() NameValuePairInvokeResponseArrayOutput {
	return o
}

func (o NameValuePairInvokeResponseArrayOutput) ToNameValuePairInvokeResponseArrayOutputWithContext(ctx context.Context) NameValuePairInvokeResponseArrayOutput {
	return o
}

func (o NameValuePairInvokeResponseArrayOutput) Index(i pulumi.IntInput) NameValuePairInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NameValuePairInvokeResponse {
		return vs[0].([]NameValuePairInvokeResponse)[vs[1].(int)]
	}).(NameValuePairInvokeResponseOutput)
}

// Name-value pair.
type NameValuePairResponse struct {
	// The name in the name-value pair.
	Name *string `pulumi:"name"`
	// The value in the name-value pair.
	Value *string `pulumi:"value"`
}

// NameValuePairResponseInput is an input type that accepts NameValuePairResponseArgs and NameValuePairResponseOutput values.
// You can construct a concrete instance of `NameValuePairResponseInput` via:
//
//          NameValuePairResponseArgs{...}
type NameValuePairResponseInput interface {
	pulumi.Input

	ToNameValuePairResponseOutput() NameValuePairResponseOutput
	ToNameValuePairResponseOutputWithContext(context.Context) NameValuePairResponseOutput
}

// Name-value pair.
type NameValuePairResponseArgs struct {
	// The name in the name-value pair.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value in the name-value pair.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NameValuePairResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NameValuePairResponse)(nil)).Elem()
}

func (i NameValuePairResponseArgs) ToNameValuePairResponseOutput() NameValuePairResponseOutput {
	return i.ToNameValuePairResponseOutputWithContext(context.Background())
}

func (i NameValuePairResponseArgs) ToNameValuePairResponseOutputWithContext(ctx context.Context) NameValuePairResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameValuePairResponseOutput)
}

// NameValuePairResponseArrayInput is an input type that accepts NameValuePairResponseArray and NameValuePairResponseArrayOutput values.
// You can construct a concrete instance of `NameValuePairResponseArrayInput` via:
//
//          NameValuePairResponseArray{ NameValuePairResponseArgs{...} }
type NameValuePairResponseArrayInput interface {
	pulumi.Input

	ToNameValuePairResponseArrayOutput() NameValuePairResponseArrayOutput
	ToNameValuePairResponseArrayOutputWithContext(context.Context) NameValuePairResponseArrayOutput
}

type NameValuePairResponseArray []NameValuePairResponseInput

func (NameValuePairResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NameValuePairResponse)(nil)).Elem()
}

func (i NameValuePairResponseArray) ToNameValuePairResponseArrayOutput() NameValuePairResponseArrayOutput {
	return i.ToNameValuePairResponseArrayOutputWithContext(context.Background())
}

func (i NameValuePairResponseArray) ToNameValuePairResponseArrayOutputWithContext(ctx context.Context) NameValuePairResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameValuePairResponseArrayOutput)
}

// Name-value pair.
type NameValuePairResponseOutput struct{ *pulumi.OutputState }

func (NameValuePairResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NameValuePairResponse)(nil)).Elem()
}

func (o NameValuePairResponseOutput) ToNameValuePairResponseOutput() NameValuePairResponseOutput {
	return o
}

func (o NameValuePairResponseOutput) ToNameValuePairResponseOutputWithContext(ctx context.Context) NameValuePairResponseOutput {
	return o
}

// The name in the name-value pair.
func (o NameValuePairResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NameValuePairResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value in the name-value pair.
func (o NameValuePairResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NameValuePairResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NameValuePairResponseArrayOutput struct{ *pulumi.OutputState }

func (NameValuePairResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NameValuePairResponse)(nil)).Elem()
}

func (o NameValuePairResponseArrayOutput) ToNameValuePairResponseArrayOutput() NameValuePairResponseArrayOutput {
	return o
}

func (o NameValuePairResponseArrayOutput) ToNameValuePairResponseArrayOutputWithContext(ctx context.Context) NameValuePairResponseArrayOutput {
	return o
}

func (o NameValuePairResponseArrayOutput) Index(i pulumi.IntInput) NameValuePairResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NameValuePairResponse {
		return vs[0].([]NameValuePairResponse)[vs[1].(int)]
	}).(NameValuePairResponseOutput)
}

// Node setup settings.
type NodeSetup struct {
	// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
	MountVolumes *MountVolumes `pulumi:"mountVolumes"`
	// Settings for performance counters collecting and uploading.
	PerformanceCountersSettings *PerformanceCountersSettings `pulumi:"performanceCountersSettings"`
	// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
	SetupTask *SetupTask `pulumi:"setupTask"`
}

// NodeSetupInput is an input type that accepts NodeSetupArgs and NodeSetupOutput values.
// You can construct a concrete instance of `NodeSetupInput` via:
//
//          NodeSetupArgs{...}
type NodeSetupInput interface {
	pulumi.Input

	ToNodeSetupOutput() NodeSetupOutput
	ToNodeSetupOutputWithContext(context.Context) NodeSetupOutput
}

// Node setup settings.
type NodeSetupArgs struct {
	// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
	MountVolumes MountVolumesPtrInput `pulumi:"mountVolumes"`
	// Settings for performance counters collecting and uploading.
	PerformanceCountersSettings PerformanceCountersSettingsPtrInput `pulumi:"performanceCountersSettings"`
	// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
	SetupTask SetupTaskPtrInput `pulumi:"setupTask"`
}

func (NodeSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSetup)(nil)).Elem()
}

func (i NodeSetupArgs) ToNodeSetupOutput() NodeSetupOutput {
	return i.ToNodeSetupOutputWithContext(context.Background())
}

func (i NodeSetupArgs) ToNodeSetupOutputWithContext(ctx context.Context) NodeSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSetupOutput)
}

func (i NodeSetupArgs) ToNodeSetupPtrOutput() NodeSetupPtrOutput {
	return i.ToNodeSetupPtrOutputWithContext(context.Background())
}

func (i NodeSetupArgs) ToNodeSetupPtrOutputWithContext(ctx context.Context) NodeSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSetupOutput).ToNodeSetupPtrOutputWithContext(ctx)
}

// NodeSetupPtrInput is an input type that accepts NodeSetupArgs, NodeSetupPtr and NodeSetupPtrOutput values.
// You can construct a concrete instance of `NodeSetupPtrInput` via:
//
//          NodeSetupArgs{...}
//
//  or:
//
//          nil
type NodeSetupPtrInput interface {
	pulumi.Input

	ToNodeSetupPtrOutput() NodeSetupPtrOutput
	ToNodeSetupPtrOutputWithContext(context.Context) NodeSetupPtrOutput
}

type nodeSetupPtrType NodeSetupArgs

func NodeSetupPtr(v *NodeSetupArgs) NodeSetupPtrInput {
	return (*nodeSetupPtrType)(v)
}

func (*nodeSetupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSetup)(nil)).Elem()
}

func (i *nodeSetupPtrType) ToNodeSetupPtrOutput() NodeSetupPtrOutput {
	return i.ToNodeSetupPtrOutputWithContext(context.Background())
}

func (i *nodeSetupPtrType) ToNodeSetupPtrOutputWithContext(ctx context.Context) NodeSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSetupPtrOutput)
}

// Node setup settings.
type NodeSetupOutput struct{ *pulumi.OutputState }

func (NodeSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSetup)(nil)).Elem()
}

func (o NodeSetupOutput) ToNodeSetupOutput() NodeSetupOutput {
	return o
}

func (o NodeSetupOutput) ToNodeSetupOutputWithContext(ctx context.Context) NodeSetupOutput {
	return o
}

func (o NodeSetupOutput) ToNodeSetupPtrOutput() NodeSetupPtrOutput {
	return o.ToNodeSetupPtrOutputWithContext(context.Background())
}

func (o NodeSetupOutput) ToNodeSetupPtrOutputWithContext(ctx context.Context) NodeSetupPtrOutput {
	return o.ApplyT(func(v NodeSetup) *NodeSetup {
		return &v
	}).(NodeSetupPtrOutput)
}

// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
func (o NodeSetupOutput) MountVolumes() MountVolumesPtrOutput {
	return o.ApplyT(func(v NodeSetup) *MountVolumes { return v.MountVolumes }).(MountVolumesPtrOutput)
}

// Settings for performance counters collecting and uploading.
func (o NodeSetupOutput) PerformanceCountersSettings() PerformanceCountersSettingsPtrOutput {
	return o.ApplyT(func(v NodeSetup) *PerformanceCountersSettings { return v.PerformanceCountersSettings }).(PerformanceCountersSettingsPtrOutput)
}

// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
func (o NodeSetupOutput) SetupTask() SetupTaskPtrOutput {
	return o.ApplyT(func(v NodeSetup) *SetupTask { return v.SetupTask }).(SetupTaskPtrOutput)
}

type NodeSetupPtrOutput struct{ *pulumi.OutputState }

func (NodeSetupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSetup)(nil)).Elem()
}

func (o NodeSetupPtrOutput) ToNodeSetupPtrOutput() NodeSetupPtrOutput {
	return o
}

func (o NodeSetupPtrOutput) ToNodeSetupPtrOutputWithContext(ctx context.Context) NodeSetupPtrOutput {
	return o
}

func (o NodeSetupPtrOutput) Elem() NodeSetupOutput {
	return o.ApplyT(func(v *NodeSetup) NodeSetup { return *v }).(NodeSetupOutput)
}

// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
func (o NodeSetupPtrOutput) MountVolumes() MountVolumesPtrOutput {
	return o.ApplyT(func(v *NodeSetup) *MountVolumes {
		if v == nil {
			return nil
		}
		return v.MountVolumes
	}).(MountVolumesPtrOutput)
}

// Settings for performance counters collecting and uploading.
func (o NodeSetupPtrOutput) PerformanceCountersSettings() PerformanceCountersSettingsPtrOutput {
	return o.ApplyT(func(v *NodeSetup) *PerformanceCountersSettings {
		if v == nil {
			return nil
		}
		return v.PerformanceCountersSettings
	}).(PerformanceCountersSettingsPtrOutput)
}

// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
func (o NodeSetupPtrOutput) SetupTask() SetupTaskPtrOutput {
	return o.ApplyT(func(v *NodeSetup) *SetupTask {
		if v == nil {
			return nil
		}
		return v.SetupTask
	}).(SetupTaskPtrOutput)
}

// Node setup settings.
type NodeSetupInvokeResponse struct {
	// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
	MountVolumes *MountVolumesInvokeResponse `pulumi:"mountVolumes"`
	// Settings for performance counters collecting and uploading.
	PerformanceCountersSettings *PerformanceCountersSettingsInvokeResponse `pulumi:"performanceCountersSettings"`
	// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
	SetupTask *SetupTaskInvokeResponse `pulumi:"setupTask"`
}

// NodeSetupInvokeResponseInput is an input type that accepts NodeSetupInvokeResponseArgs and NodeSetupInvokeResponseOutput values.
// You can construct a concrete instance of `NodeSetupInvokeResponseInput` via:
//
//          NodeSetupInvokeResponseArgs{...}
type NodeSetupInvokeResponseInput interface {
	pulumi.Input

	ToNodeSetupInvokeResponseOutput() NodeSetupInvokeResponseOutput
	ToNodeSetupInvokeResponseOutputWithContext(context.Context) NodeSetupInvokeResponseOutput
}

// Node setup settings.
type NodeSetupInvokeResponseArgs struct {
	// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
	MountVolumes MountVolumesInvokeResponsePtrInput `pulumi:"mountVolumes"`
	// Settings for performance counters collecting and uploading.
	PerformanceCountersSettings PerformanceCountersSettingsInvokeResponsePtrInput `pulumi:"performanceCountersSettings"`
	// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
	SetupTask SetupTaskInvokeResponsePtrInput `pulumi:"setupTask"`
}

func (NodeSetupInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSetupInvokeResponse)(nil)).Elem()
}

func (i NodeSetupInvokeResponseArgs) ToNodeSetupInvokeResponseOutput() NodeSetupInvokeResponseOutput {
	return i.ToNodeSetupInvokeResponseOutputWithContext(context.Background())
}

func (i NodeSetupInvokeResponseArgs) ToNodeSetupInvokeResponseOutputWithContext(ctx context.Context) NodeSetupInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSetupInvokeResponseOutput)
}

// Node setup settings.
type NodeSetupInvokeResponseOutput struct{ *pulumi.OutputState }

func (NodeSetupInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSetupInvokeResponse)(nil)).Elem()
}

func (o NodeSetupInvokeResponseOutput) ToNodeSetupInvokeResponseOutput() NodeSetupInvokeResponseOutput {
	return o
}

func (o NodeSetupInvokeResponseOutput) ToNodeSetupInvokeResponseOutputWithContext(ctx context.Context) NodeSetupInvokeResponseOutput {
	return o
}

// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
func (o NodeSetupInvokeResponseOutput) MountVolumes() MountVolumesInvokeResponsePtrOutput {
	return o.ApplyT(func(v NodeSetupInvokeResponse) *MountVolumesInvokeResponse { return v.MountVolumes }).(MountVolumesInvokeResponsePtrOutput)
}

// Settings for performance counters collecting and uploading.
func (o NodeSetupInvokeResponseOutput) PerformanceCountersSettings() PerformanceCountersSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v NodeSetupInvokeResponse) *PerformanceCountersSettingsInvokeResponse {
		return v.PerformanceCountersSettings
	}).(PerformanceCountersSettingsInvokeResponsePtrOutput)
}

// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
func (o NodeSetupInvokeResponseOutput) SetupTask() SetupTaskInvokeResponsePtrOutput {
	return o.ApplyT(func(v NodeSetupInvokeResponse) *SetupTaskInvokeResponse { return v.SetupTask }).(SetupTaskInvokeResponsePtrOutput)
}

// Node setup settings.
type NodeSetupResponse struct {
	// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
	MountVolumes *MountVolumesResponse `pulumi:"mountVolumes"`
	// Settings for performance counters collecting and uploading.
	PerformanceCountersSettings *PerformanceCountersSettingsResponse `pulumi:"performanceCountersSettings"`
	// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
	SetupTask *SetupTaskResponse `pulumi:"setupTask"`
}

// NodeSetupResponseInput is an input type that accepts NodeSetupResponseArgs and NodeSetupResponseOutput values.
// You can construct a concrete instance of `NodeSetupResponseInput` via:
//
//          NodeSetupResponseArgs{...}
type NodeSetupResponseInput interface {
	pulumi.Input

	ToNodeSetupResponseOutput() NodeSetupResponseOutput
	ToNodeSetupResponseOutputWithContext(context.Context) NodeSetupResponseOutput
}

// Node setup settings.
type NodeSetupResponseArgs struct {
	// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
	MountVolumes MountVolumesResponsePtrInput `pulumi:"mountVolumes"`
	// Settings for performance counters collecting and uploading.
	PerformanceCountersSettings PerformanceCountersSettingsResponsePtrInput `pulumi:"performanceCountersSettings"`
	// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
	SetupTask SetupTaskResponsePtrInput `pulumi:"setupTask"`
}

func (NodeSetupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSetupResponse)(nil)).Elem()
}

func (i NodeSetupResponseArgs) ToNodeSetupResponseOutput() NodeSetupResponseOutput {
	return i.ToNodeSetupResponseOutputWithContext(context.Background())
}

func (i NodeSetupResponseArgs) ToNodeSetupResponseOutputWithContext(ctx context.Context) NodeSetupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSetupResponseOutput)
}

func (i NodeSetupResponseArgs) ToNodeSetupResponsePtrOutput() NodeSetupResponsePtrOutput {
	return i.ToNodeSetupResponsePtrOutputWithContext(context.Background())
}

func (i NodeSetupResponseArgs) ToNodeSetupResponsePtrOutputWithContext(ctx context.Context) NodeSetupResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSetupResponseOutput).ToNodeSetupResponsePtrOutputWithContext(ctx)
}

// NodeSetupResponsePtrInput is an input type that accepts NodeSetupResponseArgs, NodeSetupResponsePtr and NodeSetupResponsePtrOutput values.
// You can construct a concrete instance of `NodeSetupResponsePtrInput` via:
//
//          NodeSetupResponseArgs{...}
//
//  or:
//
//          nil
type NodeSetupResponsePtrInput interface {
	pulumi.Input

	ToNodeSetupResponsePtrOutput() NodeSetupResponsePtrOutput
	ToNodeSetupResponsePtrOutputWithContext(context.Context) NodeSetupResponsePtrOutput
}

type nodeSetupResponsePtrType NodeSetupResponseArgs

func NodeSetupResponsePtr(v *NodeSetupResponseArgs) NodeSetupResponsePtrInput {
	return (*nodeSetupResponsePtrType)(v)
}

func (*nodeSetupResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSetupResponse)(nil)).Elem()
}

func (i *nodeSetupResponsePtrType) ToNodeSetupResponsePtrOutput() NodeSetupResponsePtrOutput {
	return i.ToNodeSetupResponsePtrOutputWithContext(context.Background())
}

func (i *nodeSetupResponsePtrType) ToNodeSetupResponsePtrOutputWithContext(ctx context.Context) NodeSetupResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSetupResponsePtrOutput)
}

// Node setup settings.
type NodeSetupResponseOutput struct{ *pulumi.OutputState }

func (NodeSetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSetupResponse)(nil)).Elem()
}

func (o NodeSetupResponseOutput) ToNodeSetupResponseOutput() NodeSetupResponseOutput {
	return o
}

func (o NodeSetupResponseOutput) ToNodeSetupResponseOutputWithContext(ctx context.Context) NodeSetupResponseOutput {
	return o
}

func (o NodeSetupResponseOutput) ToNodeSetupResponsePtrOutput() NodeSetupResponsePtrOutput {
	return o.ToNodeSetupResponsePtrOutputWithContext(context.Background())
}

func (o NodeSetupResponseOutput) ToNodeSetupResponsePtrOutputWithContext(ctx context.Context) NodeSetupResponsePtrOutput {
	return o.ApplyT(func(v NodeSetupResponse) *NodeSetupResponse {
		return &v
	}).(NodeSetupResponsePtrOutput)
}

// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
func (o NodeSetupResponseOutput) MountVolumes() MountVolumesResponsePtrOutput {
	return o.ApplyT(func(v NodeSetupResponse) *MountVolumesResponse { return v.MountVolumes }).(MountVolumesResponsePtrOutput)
}

// Settings for performance counters collecting and uploading.
func (o NodeSetupResponseOutput) PerformanceCountersSettings() PerformanceCountersSettingsResponsePtrOutput {
	return o.ApplyT(func(v NodeSetupResponse) *PerformanceCountersSettingsResponse { return v.PerformanceCountersSettings }).(PerformanceCountersSettingsResponsePtrOutput)
}

// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
func (o NodeSetupResponseOutput) SetupTask() SetupTaskResponsePtrOutput {
	return o.ApplyT(func(v NodeSetupResponse) *SetupTaskResponse { return v.SetupTask }).(SetupTaskResponsePtrOutput)
}

type NodeSetupResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeSetupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSetupResponse)(nil)).Elem()
}

func (o NodeSetupResponsePtrOutput) ToNodeSetupResponsePtrOutput() NodeSetupResponsePtrOutput {
	return o
}

func (o NodeSetupResponsePtrOutput) ToNodeSetupResponsePtrOutputWithContext(ctx context.Context) NodeSetupResponsePtrOutput {
	return o
}

func (o NodeSetupResponsePtrOutput) Elem() NodeSetupResponseOutput {
	return o.ApplyT(func(v *NodeSetupResponse) NodeSetupResponse { return *v }).(NodeSetupResponseOutput)
}

// Mount volumes to be available to setup task and all jobs executing on the cluster. The volumes will be mounted at location specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
func (o NodeSetupResponsePtrOutput) MountVolumes() MountVolumesResponsePtrOutput {
	return o.ApplyT(func(v *NodeSetupResponse) *MountVolumesResponse {
		if v == nil {
			return nil
		}
		return v.MountVolumes
	}).(MountVolumesResponsePtrOutput)
}

// Settings for performance counters collecting and uploading.
func (o NodeSetupResponsePtrOutput) PerformanceCountersSettings() PerformanceCountersSettingsResponsePtrOutput {
	return o.ApplyT(func(v *NodeSetupResponse) *PerformanceCountersSettingsResponse {
		if v == nil {
			return nil
		}
		return v.PerformanceCountersSettings
	}).(PerformanceCountersSettingsResponsePtrOutput)
}

// Setup task to run on cluster nodes when nodes got created or rebooted. The setup task code needs to be idempotent. Generally the setup task is used to download static data that is required for all jobs that run on the cluster VMs and/or to download/install software.
func (o NodeSetupResponsePtrOutput) SetupTask() SetupTaskResponsePtrOutput {
	return o.ApplyT(func(v *NodeSetupResponse) *SetupTaskResponse {
		if v == nil {
			return nil
		}
		return v.SetupTask
	}).(SetupTaskResponsePtrOutput)
}

// Counts of various compute node states on the cluster.
type NodeStateCountsInvokeResponse struct {
	// Number of compute nodes in idle state.
	IdleNodeCount int `pulumi:"idleNodeCount"`
	// Number of compute nodes which are leaving the cluster.
	LeavingNodeCount int `pulumi:"leavingNodeCount"`
	// Number of compute nodes which are being prepared.
	PreparingNodeCount int `pulumi:"preparingNodeCount"`
	// Number of compute nodes which are running jobs.
	RunningNodeCount int `pulumi:"runningNodeCount"`
	// Number of compute nodes which are in unusable state.
	UnusableNodeCount int `pulumi:"unusableNodeCount"`
}

// NodeStateCountsInvokeResponseInput is an input type that accepts NodeStateCountsInvokeResponseArgs and NodeStateCountsInvokeResponseOutput values.
// You can construct a concrete instance of `NodeStateCountsInvokeResponseInput` via:
//
//          NodeStateCountsInvokeResponseArgs{...}
type NodeStateCountsInvokeResponseInput interface {
	pulumi.Input

	ToNodeStateCountsInvokeResponseOutput() NodeStateCountsInvokeResponseOutput
	ToNodeStateCountsInvokeResponseOutputWithContext(context.Context) NodeStateCountsInvokeResponseOutput
}

// Counts of various compute node states on the cluster.
type NodeStateCountsInvokeResponseArgs struct {
	// Number of compute nodes in idle state.
	IdleNodeCount pulumi.IntInput `pulumi:"idleNodeCount"`
	// Number of compute nodes which are leaving the cluster.
	LeavingNodeCount pulumi.IntInput `pulumi:"leavingNodeCount"`
	// Number of compute nodes which are being prepared.
	PreparingNodeCount pulumi.IntInput `pulumi:"preparingNodeCount"`
	// Number of compute nodes which are running jobs.
	RunningNodeCount pulumi.IntInput `pulumi:"runningNodeCount"`
	// Number of compute nodes which are in unusable state.
	UnusableNodeCount pulumi.IntInput `pulumi:"unusableNodeCount"`
}

func (NodeStateCountsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStateCountsInvokeResponse)(nil)).Elem()
}

func (i NodeStateCountsInvokeResponseArgs) ToNodeStateCountsInvokeResponseOutput() NodeStateCountsInvokeResponseOutput {
	return i.ToNodeStateCountsInvokeResponseOutputWithContext(context.Background())
}

func (i NodeStateCountsInvokeResponseArgs) ToNodeStateCountsInvokeResponseOutputWithContext(ctx context.Context) NodeStateCountsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStateCountsInvokeResponseOutput)
}

// Counts of various compute node states on the cluster.
type NodeStateCountsInvokeResponseOutput struct{ *pulumi.OutputState }

func (NodeStateCountsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStateCountsInvokeResponse)(nil)).Elem()
}

func (o NodeStateCountsInvokeResponseOutput) ToNodeStateCountsInvokeResponseOutput() NodeStateCountsInvokeResponseOutput {
	return o
}

func (o NodeStateCountsInvokeResponseOutput) ToNodeStateCountsInvokeResponseOutputWithContext(ctx context.Context) NodeStateCountsInvokeResponseOutput {
	return o
}

// Number of compute nodes in idle state.
func (o NodeStateCountsInvokeResponseOutput) IdleNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsInvokeResponse) int { return v.IdleNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are leaving the cluster.
func (o NodeStateCountsInvokeResponseOutput) LeavingNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsInvokeResponse) int { return v.LeavingNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are being prepared.
func (o NodeStateCountsInvokeResponseOutput) PreparingNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsInvokeResponse) int { return v.PreparingNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are running jobs.
func (o NodeStateCountsInvokeResponseOutput) RunningNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsInvokeResponse) int { return v.RunningNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are in unusable state.
func (o NodeStateCountsInvokeResponseOutput) UnusableNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsInvokeResponse) int { return v.UnusableNodeCount }).(pulumi.IntOutput)
}

// Counts of various compute node states on the cluster.
type NodeStateCountsResponse struct {
	// Number of compute nodes in idle state.
	IdleNodeCount int `pulumi:"idleNodeCount"`
	// Number of compute nodes which are leaving the cluster.
	LeavingNodeCount int `pulumi:"leavingNodeCount"`
	// Number of compute nodes which are being prepared.
	PreparingNodeCount int `pulumi:"preparingNodeCount"`
	// Number of compute nodes which are running jobs.
	RunningNodeCount int `pulumi:"runningNodeCount"`
	// Number of compute nodes which are in unusable state.
	UnusableNodeCount int `pulumi:"unusableNodeCount"`
}

// NodeStateCountsResponseInput is an input type that accepts NodeStateCountsResponseArgs and NodeStateCountsResponseOutput values.
// You can construct a concrete instance of `NodeStateCountsResponseInput` via:
//
//          NodeStateCountsResponseArgs{...}
type NodeStateCountsResponseInput interface {
	pulumi.Input

	ToNodeStateCountsResponseOutput() NodeStateCountsResponseOutput
	ToNodeStateCountsResponseOutputWithContext(context.Context) NodeStateCountsResponseOutput
}

// Counts of various compute node states on the cluster.
type NodeStateCountsResponseArgs struct {
	// Number of compute nodes in idle state.
	IdleNodeCount pulumi.IntInput `pulumi:"idleNodeCount"`
	// Number of compute nodes which are leaving the cluster.
	LeavingNodeCount pulumi.IntInput `pulumi:"leavingNodeCount"`
	// Number of compute nodes which are being prepared.
	PreparingNodeCount pulumi.IntInput `pulumi:"preparingNodeCount"`
	// Number of compute nodes which are running jobs.
	RunningNodeCount pulumi.IntInput `pulumi:"runningNodeCount"`
	// Number of compute nodes which are in unusable state.
	UnusableNodeCount pulumi.IntInput `pulumi:"unusableNodeCount"`
}

func (NodeStateCountsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStateCountsResponse)(nil)).Elem()
}

func (i NodeStateCountsResponseArgs) ToNodeStateCountsResponseOutput() NodeStateCountsResponseOutput {
	return i.ToNodeStateCountsResponseOutputWithContext(context.Background())
}

func (i NodeStateCountsResponseArgs) ToNodeStateCountsResponseOutputWithContext(ctx context.Context) NodeStateCountsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStateCountsResponseOutput)
}

func (i NodeStateCountsResponseArgs) ToNodeStateCountsResponsePtrOutput() NodeStateCountsResponsePtrOutput {
	return i.ToNodeStateCountsResponsePtrOutputWithContext(context.Background())
}

func (i NodeStateCountsResponseArgs) ToNodeStateCountsResponsePtrOutputWithContext(ctx context.Context) NodeStateCountsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStateCountsResponseOutput).ToNodeStateCountsResponsePtrOutputWithContext(ctx)
}

// NodeStateCountsResponsePtrInput is an input type that accepts NodeStateCountsResponseArgs, NodeStateCountsResponsePtr and NodeStateCountsResponsePtrOutput values.
// You can construct a concrete instance of `NodeStateCountsResponsePtrInput` via:
//
//          NodeStateCountsResponseArgs{...}
//
//  or:
//
//          nil
type NodeStateCountsResponsePtrInput interface {
	pulumi.Input

	ToNodeStateCountsResponsePtrOutput() NodeStateCountsResponsePtrOutput
	ToNodeStateCountsResponsePtrOutputWithContext(context.Context) NodeStateCountsResponsePtrOutput
}

type nodeStateCountsResponsePtrType NodeStateCountsResponseArgs

func NodeStateCountsResponsePtr(v *NodeStateCountsResponseArgs) NodeStateCountsResponsePtrInput {
	return (*nodeStateCountsResponsePtrType)(v)
}

func (*nodeStateCountsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStateCountsResponse)(nil)).Elem()
}

func (i *nodeStateCountsResponsePtrType) ToNodeStateCountsResponsePtrOutput() NodeStateCountsResponsePtrOutput {
	return i.ToNodeStateCountsResponsePtrOutputWithContext(context.Background())
}

func (i *nodeStateCountsResponsePtrType) ToNodeStateCountsResponsePtrOutputWithContext(ctx context.Context) NodeStateCountsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStateCountsResponsePtrOutput)
}

// Counts of various compute node states on the cluster.
type NodeStateCountsResponseOutput struct{ *pulumi.OutputState }

func (NodeStateCountsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStateCountsResponse)(nil)).Elem()
}

func (o NodeStateCountsResponseOutput) ToNodeStateCountsResponseOutput() NodeStateCountsResponseOutput {
	return o
}

func (o NodeStateCountsResponseOutput) ToNodeStateCountsResponseOutputWithContext(ctx context.Context) NodeStateCountsResponseOutput {
	return o
}

func (o NodeStateCountsResponseOutput) ToNodeStateCountsResponsePtrOutput() NodeStateCountsResponsePtrOutput {
	return o.ToNodeStateCountsResponsePtrOutputWithContext(context.Background())
}

func (o NodeStateCountsResponseOutput) ToNodeStateCountsResponsePtrOutputWithContext(ctx context.Context) NodeStateCountsResponsePtrOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) *NodeStateCountsResponse {
		return &v
	}).(NodeStateCountsResponsePtrOutput)
}

// Number of compute nodes in idle state.
func (o NodeStateCountsResponseOutput) IdleNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.IdleNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are leaving the cluster.
func (o NodeStateCountsResponseOutput) LeavingNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.LeavingNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are being prepared.
func (o NodeStateCountsResponseOutput) PreparingNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.PreparingNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are running jobs.
func (o NodeStateCountsResponseOutput) RunningNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.RunningNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are in unusable state.
func (o NodeStateCountsResponseOutput) UnusableNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.UnusableNodeCount }).(pulumi.IntOutput)
}

type NodeStateCountsResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeStateCountsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStateCountsResponse)(nil)).Elem()
}

func (o NodeStateCountsResponsePtrOutput) ToNodeStateCountsResponsePtrOutput() NodeStateCountsResponsePtrOutput {
	return o
}

func (o NodeStateCountsResponsePtrOutput) ToNodeStateCountsResponsePtrOutputWithContext(ctx context.Context) NodeStateCountsResponsePtrOutput {
	return o
}

func (o NodeStateCountsResponsePtrOutput) Elem() NodeStateCountsResponseOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) NodeStateCountsResponse { return *v }).(NodeStateCountsResponseOutput)
}

// Number of compute nodes in idle state.
func (o NodeStateCountsResponsePtrOutput) IdleNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.IdleNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are leaving the cluster.
func (o NodeStateCountsResponsePtrOutput) LeavingNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.LeavingNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are being prepared.
func (o NodeStateCountsResponsePtrOutput) PreparingNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PreparingNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are running jobs.
func (o NodeStateCountsResponsePtrOutput) RunningNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.RunningNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are in unusable state.
func (o NodeStateCountsResponsePtrOutput) UnusableNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.UnusableNodeCount
	}).(pulumi.IntPtrOutput)
}

// Output directory for the job.
type OutputDirectory struct {
	// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id string `pulumi:"id"`
	// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathPrefix string `pulumi:"pathPrefix"`
	// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathSuffix *string `pulumi:"pathSuffix"`
}

// OutputDirectoryInput is an input type that accepts OutputDirectoryArgs and OutputDirectoryOutput values.
// You can construct a concrete instance of `OutputDirectoryInput` via:
//
//          OutputDirectoryArgs{...}
type OutputDirectoryInput interface {
	pulumi.Input

	ToOutputDirectoryOutput() OutputDirectoryOutput
	ToOutputDirectoryOutputWithContext(context.Context) OutputDirectoryOutput
}

// Output directory for the job.
type OutputDirectoryArgs struct {
	// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id pulumi.StringInput `pulumi:"id"`
	// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathPrefix pulumi.StringInput `pulumi:"pathPrefix"`
	// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathSuffix pulumi.StringPtrInput `pulumi:"pathSuffix"`
}

func (OutputDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDirectory)(nil)).Elem()
}

func (i OutputDirectoryArgs) ToOutputDirectoryOutput() OutputDirectoryOutput {
	return i.ToOutputDirectoryOutputWithContext(context.Background())
}

func (i OutputDirectoryArgs) ToOutputDirectoryOutputWithContext(ctx context.Context) OutputDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDirectoryOutput)
}

// OutputDirectoryArrayInput is an input type that accepts OutputDirectoryArray and OutputDirectoryArrayOutput values.
// You can construct a concrete instance of `OutputDirectoryArrayInput` via:
//
//          OutputDirectoryArray{ OutputDirectoryArgs{...} }
type OutputDirectoryArrayInput interface {
	pulumi.Input

	ToOutputDirectoryArrayOutput() OutputDirectoryArrayOutput
	ToOutputDirectoryArrayOutputWithContext(context.Context) OutputDirectoryArrayOutput
}

type OutputDirectoryArray []OutputDirectoryInput

func (OutputDirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputDirectory)(nil)).Elem()
}

func (i OutputDirectoryArray) ToOutputDirectoryArrayOutput() OutputDirectoryArrayOutput {
	return i.ToOutputDirectoryArrayOutputWithContext(context.Background())
}

func (i OutputDirectoryArray) ToOutputDirectoryArrayOutputWithContext(ctx context.Context) OutputDirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDirectoryArrayOutput)
}

// Output directory for the job.
type OutputDirectoryOutput struct{ *pulumi.OutputState }

func (OutputDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDirectory)(nil)).Elem()
}

func (o OutputDirectoryOutput) ToOutputDirectoryOutput() OutputDirectoryOutput {
	return o
}

func (o OutputDirectoryOutput) ToOutputDirectoryOutputWithContext(ctx context.Context) OutputDirectoryOutput {
	return o
}

// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
func (o OutputDirectoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OutputDirectory) string { return v.Id }).(pulumi.StringOutput)
}

// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
func (o OutputDirectoryOutput) PathPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v OutputDirectory) string { return v.PathPrefix }).(pulumi.StringOutput)
}

// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
func (o OutputDirectoryOutput) PathSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputDirectory) *string { return v.PathSuffix }).(pulumi.StringPtrOutput)
}

type OutputDirectoryArrayOutput struct{ *pulumi.OutputState }

func (OutputDirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputDirectory)(nil)).Elem()
}

func (o OutputDirectoryArrayOutput) ToOutputDirectoryArrayOutput() OutputDirectoryArrayOutput {
	return o
}

func (o OutputDirectoryArrayOutput) ToOutputDirectoryArrayOutputWithContext(ctx context.Context) OutputDirectoryArrayOutput {
	return o
}

func (o OutputDirectoryArrayOutput) Index(i pulumi.IntInput) OutputDirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputDirectory {
		return vs[0].([]OutputDirectory)[vs[1].(int)]
	}).(OutputDirectoryOutput)
}

// Output directory for the job.
type OutputDirectoryInvokeResponse struct {
	// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id string `pulumi:"id"`
	// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathPrefix string `pulumi:"pathPrefix"`
	// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathSuffix *string `pulumi:"pathSuffix"`
}

// OutputDirectoryInvokeResponseInput is an input type that accepts OutputDirectoryInvokeResponseArgs and OutputDirectoryInvokeResponseOutput values.
// You can construct a concrete instance of `OutputDirectoryInvokeResponseInput` via:
//
//          OutputDirectoryInvokeResponseArgs{...}
type OutputDirectoryInvokeResponseInput interface {
	pulumi.Input

	ToOutputDirectoryInvokeResponseOutput() OutputDirectoryInvokeResponseOutput
	ToOutputDirectoryInvokeResponseOutputWithContext(context.Context) OutputDirectoryInvokeResponseOutput
}

// Output directory for the job.
type OutputDirectoryInvokeResponseArgs struct {
	// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id pulumi.StringInput `pulumi:"id"`
	// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathPrefix pulumi.StringInput `pulumi:"pathPrefix"`
	// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathSuffix pulumi.StringPtrInput `pulumi:"pathSuffix"`
}

func (OutputDirectoryInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDirectoryInvokeResponse)(nil)).Elem()
}

func (i OutputDirectoryInvokeResponseArgs) ToOutputDirectoryInvokeResponseOutput() OutputDirectoryInvokeResponseOutput {
	return i.ToOutputDirectoryInvokeResponseOutputWithContext(context.Background())
}

func (i OutputDirectoryInvokeResponseArgs) ToOutputDirectoryInvokeResponseOutputWithContext(ctx context.Context) OutputDirectoryInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDirectoryInvokeResponseOutput)
}

// OutputDirectoryInvokeResponseArrayInput is an input type that accepts OutputDirectoryInvokeResponseArray and OutputDirectoryInvokeResponseArrayOutput values.
// You can construct a concrete instance of `OutputDirectoryInvokeResponseArrayInput` via:
//
//          OutputDirectoryInvokeResponseArray{ OutputDirectoryInvokeResponseArgs{...} }
type OutputDirectoryInvokeResponseArrayInput interface {
	pulumi.Input

	ToOutputDirectoryInvokeResponseArrayOutput() OutputDirectoryInvokeResponseArrayOutput
	ToOutputDirectoryInvokeResponseArrayOutputWithContext(context.Context) OutputDirectoryInvokeResponseArrayOutput
}

type OutputDirectoryInvokeResponseArray []OutputDirectoryInvokeResponseInput

func (OutputDirectoryInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputDirectoryInvokeResponse)(nil)).Elem()
}

func (i OutputDirectoryInvokeResponseArray) ToOutputDirectoryInvokeResponseArrayOutput() OutputDirectoryInvokeResponseArrayOutput {
	return i.ToOutputDirectoryInvokeResponseArrayOutputWithContext(context.Background())
}

func (i OutputDirectoryInvokeResponseArray) ToOutputDirectoryInvokeResponseArrayOutputWithContext(ctx context.Context) OutputDirectoryInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDirectoryInvokeResponseArrayOutput)
}

// Output directory for the job.
type OutputDirectoryInvokeResponseOutput struct{ *pulumi.OutputState }

func (OutputDirectoryInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDirectoryInvokeResponse)(nil)).Elem()
}

func (o OutputDirectoryInvokeResponseOutput) ToOutputDirectoryInvokeResponseOutput() OutputDirectoryInvokeResponseOutput {
	return o
}

func (o OutputDirectoryInvokeResponseOutput) ToOutputDirectoryInvokeResponseOutputWithContext(ctx context.Context) OutputDirectoryInvokeResponseOutput {
	return o
}

// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
func (o OutputDirectoryInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OutputDirectoryInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
func (o OutputDirectoryInvokeResponseOutput) PathPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v OutputDirectoryInvokeResponse) string { return v.PathPrefix }).(pulumi.StringOutput)
}

// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
func (o OutputDirectoryInvokeResponseOutput) PathSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputDirectoryInvokeResponse) *string { return v.PathSuffix }).(pulumi.StringPtrOutput)
}

type OutputDirectoryInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (OutputDirectoryInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputDirectoryInvokeResponse)(nil)).Elem()
}

func (o OutputDirectoryInvokeResponseArrayOutput) ToOutputDirectoryInvokeResponseArrayOutput() OutputDirectoryInvokeResponseArrayOutput {
	return o
}

func (o OutputDirectoryInvokeResponseArrayOutput) ToOutputDirectoryInvokeResponseArrayOutputWithContext(ctx context.Context) OutputDirectoryInvokeResponseArrayOutput {
	return o
}

func (o OutputDirectoryInvokeResponseArrayOutput) Index(i pulumi.IntInput) OutputDirectoryInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputDirectoryInvokeResponse {
		return vs[0].([]OutputDirectoryInvokeResponse)[vs[1].(int)]
	}).(OutputDirectoryInvokeResponseOutput)
}

// Output directory for the job.
type OutputDirectoryResponse struct {
	// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id string `pulumi:"id"`
	// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathPrefix string `pulumi:"pathPrefix"`
	// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathSuffix *string `pulumi:"pathSuffix"`
}

// OutputDirectoryResponseInput is an input type that accepts OutputDirectoryResponseArgs and OutputDirectoryResponseOutput values.
// You can construct a concrete instance of `OutputDirectoryResponseInput` via:
//
//          OutputDirectoryResponseArgs{...}
type OutputDirectoryResponseInput interface {
	pulumi.Input

	ToOutputDirectoryResponseOutput() OutputDirectoryResponseOutput
	ToOutputDirectoryResponseOutputWithContext(context.Context) OutputDirectoryResponseOutput
}

// Output directory for the job.
type OutputDirectoryResponseArgs struct {
	// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
	Id pulumi.StringInput `pulumi:"id"`
	// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathPrefix pulumi.StringInput `pulumi:"pathPrefix"`
	// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
	PathSuffix pulumi.StringPtrInput `pulumi:"pathSuffix"`
}

func (OutputDirectoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDirectoryResponse)(nil)).Elem()
}

func (i OutputDirectoryResponseArgs) ToOutputDirectoryResponseOutput() OutputDirectoryResponseOutput {
	return i.ToOutputDirectoryResponseOutputWithContext(context.Background())
}

func (i OutputDirectoryResponseArgs) ToOutputDirectoryResponseOutputWithContext(ctx context.Context) OutputDirectoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDirectoryResponseOutput)
}

// OutputDirectoryResponseArrayInput is an input type that accepts OutputDirectoryResponseArray and OutputDirectoryResponseArrayOutput values.
// You can construct a concrete instance of `OutputDirectoryResponseArrayInput` via:
//
//          OutputDirectoryResponseArray{ OutputDirectoryResponseArgs{...} }
type OutputDirectoryResponseArrayInput interface {
	pulumi.Input

	ToOutputDirectoryResponseArrayOutput() OutputDirectoryResponseArrayOutput
	ToOutputDirectoryResponseArrayOutputWithContext(context.Context) OutputDirectoryResponseArrayOutput
}

type OutputDirectoryResponseArray []OutputDirectoryResponseInput

func (OutputDirectoryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputDirectoryResponse)(nil)).Elem()
}

func (i OutputDirectoryResponseArray) ToOutputDirectoryResponseArrayOutput() OutputDirectoryResponseArrayOutput {
	return i.ToOutputDirectoryResponseArrayOutputWithContext(context.Background())
}

func (i OutputDirectoryResponseArray) ToOutputDirectoryResponseArrayOutputWithContext(ctx context.Context) OutputDirectoryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDirectoryResponseArrayOutput)
}

// Output directory for the job.
type OutputDirectoryResponseOutput struct{ *pulumi.OutputState }

func (OutputDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDirectoryResponse)(nil)).Elem()
}

func (o OutputDirectoryResponseOutput) ToOutputDirectoryResponseOutput() OutputDirectoryResponseOutput {
	return o
}

func (o OutputDirectoryResponseOutput) ToOutputDirectoryResponseOutputWithContext(ctx context.Context) OutputDirectoryResponseOutput {
	return o
}

// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
func (o OutputDirectoryResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OutputDirectoryResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
func (o OutputDirectoryResponseOutput) PathPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v OutputDirectoryResponse) string { return v.PathPrefix }).(pulumi.StringOutput)
}

// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
func (o OutputDirectoryResponseOutput) PathSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputDirectoryResponse) *string { return v.PathSuffix }).(pulumi.StringPtrOutput)
}

type OutputDirectoryResponseArrayOutput struct{ *pulumi.OutputState }

func (OutputDirectoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputDirectoryResponse)(nil)).Elem()
}

func (o OutputDirectoryResponseArrayOutput) ToOutputDirectoryResponseArrayOutput() OutputDirectoryResponseArrayOutput {
	return o
}

func (o OutputDirectoryResponseArrayOutput) ToOutputDirectoryResponseArrayOutputWithContext(ctx context.Context) OutputDirectoryResponseArrayOutput {
	return o
}

func (o OutputDirectoryResponseArrayOutput) Index(i pulumi.IntInput) OutputDirectoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputDirectoryResponse {
		return vs[0].([]OutputDirectoryResponse)[vs[1].(int)]
	}).(OutputDirectoryResponseOutput)
}

// Performance counters reporting settings.
type PerformanceCountersSettings struct {
	// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
	AppInsightsReference AppInsightsReference `pulumi:"appInsightsReference"`
}

// PerformanceCountersSettingsInput is an input type that accepts PerformanceCountersSettingsArgs and PerformanceCountersSettingsOutput values.
// You can construct a concrete instance of `PerformanceCountersSettingsInput` via:
//
//          PerformanceCountersSettingsArgs{...}
type PerformanceCountersSettingsInput interface {
	pulumi.Input

	ToPerformanceCountersSettingsOutput() PerformanceCountersSettingsOutput
	ToPerformanceCountersSettingsOutputWithContext(context.Context) PerformanceCountersSettingsOutput
}

// Performance counters reporting settings.
type PerformanceCountersSettingsArgs struct {
	// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
	AppInsightsReference AppInsightsReferenceInput `pulumi:"appInsightsReference"`
}

func (PerformanceCountersSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceCountersSettings)(nil)).Elem()
}

func (i PerformanceCountersSettingsArgs) ToPerformanceCountersSettingsOutput() PerformanceCountersSettingsOutput {
	return i.ToPerformanceCountersSettingsOutputWithContext(context.Background())
}

func (i PerformanceCountersSettingsArgs) ToPerformanceCountersSettingsOutputWithContext(ctx context.Context) PerformanceCountersSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsOutput)
}

func (i PerformanceCountersSettingsArgs) ToPerformanceCountersSettingsPtrOutput() PerformanceCountersSettingsPtrOutput {
	return i.ToPerformanceCountersSettingsPtrOutputWithContext(context.Background())
}

func (i PerformanceCountersSettingsArgs) ToPerformanceCountersSettingsPtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsOutput).ToPerformanceCountersSettingsPtrOutputWithContext(ctx)
}

// PerformanceCountersSettingsPtrInput is an input type that accepts PerformanceCountersSettingsArgs, PerformanceCountersSettingsPtr and PerformanceCountersSettingsPtrOutput values.
// You can construct a concrete instance of `PerformanceCountersSettingsPtrInput` via:
//
//          PerformanceCountersSettingsArgs{...}
//
//  or:
//
//          nil
type PerformanceCountersSettingsPtrInput interface {
	pulumi.Input

	ToPerformanceCountersSettingsPtrOutput() PerformanceCountersSettingsPtrOutput
	ToPerformanceCountersSettingsPtrOutputWithContext(context.Context) PerformanceCountersSettingsPtrOutput
}

type performanceCountersSettingsPtrType PerformanceCountersSettingsArgs

func PerformanceCountersSettingsPtr(v *PerformanceCountersSettingsArgs) PerformanceCountersSettingsPtrInput {
	return (*performanceCountersSettingsPtrType)(v)
}

func (*performanceCountersSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PerformanceCountersSettings)(nil)).Elem()
}

func (i *performanceCountersSettingsPtrType) ToPerformanceCountersSettingsPtrOutput() PerformanceCountersSettingsPtrOutput {
	return i.ToPerformanceCountersSettingsPtrOutputWithContext(context.Background())
}

func (i *performanceCountersSettingsPtrType) ToPerformanceCountersSettingsPtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsPtrOutput)
}

// Performance counters reporting settings.
type PerformanceCountersSettingsOutput struct{ *pulumi.OutputState }

func (PerformanceCountersSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceCountersSettings)(nil)).Elem()
}

func (o PerformanceCountersSettingsOutput) ToPerformanceCountersSettingsOutput() PerformanceCountersSettingsOutput {
	return o
}

func (o PerformanceCountersSettingsOutput) ToPerformanceCountersSettingsOutputWithContext(ctx context.Context) PerformanceCountersSettingsOutput {
	return o
}

func (o PerformanceCountersSettingsOutput) ToPerformanceCountersSettingsPtrOutput() PerformanceCountersSettingsPtrOutput {
	return o.ToPerformanceCountersSettingsPtrOutputWithContext(context.Background())
}

func (o PerformanceCountersSettingsOutput) ToPerformanceCountersSettingsPtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsPtrOutput {
	return o.ApplyT(func(v PerformanceCountersSettings) *PerformanceCountersSettings {
		return &v
	}).(PerformanceCountersSettingsPtrOutput)
}

// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
func (o PerformanceCountersSettingsOutput) AppInsightsReference() AppInsightsReferenceOutput {
	return o.ApplyT(func(v PerformanceCountersSettings) AppInsightsReference { return v.AppInsightsReference }).(AppInsightsReferenceOutput)
}

type PerformanceCountersSettingsPtrOutput struct{ *pulumi.OutputState }

func (PerformanceCountersSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerformanceCountersSettings)(nil)).Elem()
}

func (o PerformanceCountersSettingsPtrOutput) ToPerformanceCountersSettingsPtrOutput() PerformanceCountersSettingsPtrOutput {
	return o
}

func (o PerformanceCountersSettingsPtrOutput) ToPerformanceCountersSettingsPtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsPtrOutput {
	return o
}

func (o PerformanceCountersSettingsPtrOutput) Elem() PerformanceCountersSettingsOutput {
	return o.ApplyT(func(v *PerformanceCountersSettings) PerformanceCountersSettings { return *v }).(PerformanceCountersSettingsOutput)
}

// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
func (o PerformanceCountersSettingsPtrOutput) AppInsightsReference() AppInsightsReferencePtrOutput {
	return o.ApplyT(func(v *PerformanceCountersSettings) *AppInsightsReference {
		if v == nil {
			return nil
		}
		return &v.AppInsightsReference
	}).(AppInsightsReferencePtrOutput)
}

// Performance counters reporting settings.
type PerformanceCountersSettingsInvokeResponse struct {
	// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
	AppInsightsReference AppInsightsReferenceInvokeResponse `pulumi:"appInsightsReference"`
}

// PerformanceCountersSettingsInvokeResponseInput is an input type that accepts PerformanceCountersSettingsInvokeResponseArgs and PerformanceCountersSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `PerformanceCountersSettingsInvokeResponseInput` via:
//
//          PerformanceCountersSettingsInvokeResponseArgs{...}
type PerformanceCountersSettingsInvokeResponseInput interface {
	pulumi.Input

	ToPerformanceCountersSettingsInvokeResponseOutput() PerformanceCountersSettingsInvokeResponseOutput
	ToPerformanceCountersSettingsInvokeResponseOutputWithContext(context.Context) PerformanceCountersSettingsInvokeResponseOutput
}

// Performance counters reporting settings.
type PerformanceCountersSettingsInvokeResponseArgs struct {
	// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
	AppInsightsReference AppInsightsReferenceInvokeResponseInput `pulumi:"appInsightsReference"`
}

func (PerformanceCountersSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceCountersSettingsInvokeResponse)(nil)).Elem()
}

func (i PerformanceCountersSettingsInvokeResponseArgs) ToPerformanceCountersSettingsInvokeResponseOutput() PerformanceCountersSettingsInvokeResponseOutput {
	return i.ToPerformanceCountersSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i PerformanceCountersSettingsInvokeResponseArgs) ToPerformanceCountersSettingsInvokeResponseOutputWithContext(ctx context.Context) PerformanceCountersSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsInvokeResponseOutput)
}

func (i PerformanceCountersSettingsInvokeResponseArgs) ToPerformanceCountersSettingsInvokeResponsePtrOutput() PerformanceCountersSettingsInvokeResponsePtrOutput {
	return i.ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i PerformanceCountersSettingsInvokeResponseArgs) ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsInvokeResponseOutput).ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(ctx)
}

// PerformanceCountersSettingsInvokeResponsePtrInput is an input type that accepts PerformanceCountersSettingsInvokeResponseArgs, PerformanceCountersSettingsInvokeResponsePtr and PerformanceCountersSettingsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `PerformanceCountersSettingsInvokeResponsePtrInput` via:
//
//          PerformanceCountersSettingsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type PerformanceCountersSettingsInvokeResponsePtrInput interface {
	pulumi.Input

	ToPerformanceCountersSettingsInvokeResponsePtrOutput() PerformanceCountersSettingsInvokeResponsePtrOutput
	ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(context.Context) PerformanceCountersSettingsInvokeResponsePtrOutput
}

type performanceCountersSettingsInvokeResponsePtrType PerformanceCountersSettingsInvokeResponseArgs

func PerformanceCountersSettingsInvokeResponsePtr(v *PerformanceCountersSettingsInvokeResponseArgs) PerformanceCountersSettingsInvokeResponsePtrInput {
	return (*performanceCountersSettingsInvokeResponsePtrType)(v)
}

func (*performanceCountersSettingsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PerformanceCountersSettingsInvokeResponse)(nil)).Elem()
}

func (i *performanceCountersSettingsInvokeResponsePtrType) ToPerformanceCountersSettingsInvokeResponsePtrOutput() PerformanceCountersSettingsInvokeResponsePtrOutput {
	return i.ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *performanceCountersSettingsInvokeResponsePtrType) ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsInvokeResponsePtrOutput)
}

// Performance counters reporting settings.
type PerformanceCountersSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (PerformanceCountersSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceCountersSettingsInvokeResponse)(nil)).Elem()
}

func (o PerformanceCountersSettingsInvokeResponseOutput) ToPerformanceCountersSettingsInvokeResponseOutput() PerformanceCountersSettingsInvokeResponseOutput {
	return o
}

func (o PerformanceCountersSettingsInvokeResponseOutput) ToPerformanceCountersSettingsInvokeResponseOutputWithContext(ctx context.Context) PerformanceCountersSettingsInvokeResponseOutput {
	return o
}

func (o PerformanceCountersSettingsInvokeResponseOutput) ToPerformanceCountersSettingsInvokeResponsePtrOutput() PerformanceCountersSettingsInvokeResponsePtrOutput {
	return o.ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o PerformanceCountersSettingsInvokeResponseOutput) ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v PerformanceCountersSettingsInvokeResponse) *PerformanceCountersSettingsInvokeResponse {
		return &v
	}).(PerformanceCountersSettingsInvokeResponsePtrOutput)
}

// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
func (o PerformanceCountersSettingsInvokeResponseOutput) AppInsightsReference() AppInsightsReferenceInvokeResponseOutput {
	return o.ApplyT(func(v PerformanceCountersSettingsInvokeResponse) AppInsightsReferenceInvokeResponse {
		return v.AppInsightsReference
	}).(AppInsightsReferenceInvokeResponseOutput)
}

type PerformanceCountersSettingsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (PerformanceCountersSettingsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerformanceCountersSettingsInvokeResponse)(nil)).Elem()
}

func (o PerformanceCountersSettingsInvokeResponsePtrOutput) ToPerformanceCountersSettingsInvokeResponsePtrOutput() PerformanceCountersSettingsInvokeResponsePtrOutput {
	return o
}

func (o PerformanceCountersSettingsInvokeResponsePtrOutput) ToPerformanceCountersSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsInvokeResponsePtrOutput {
	return o
}

func (o PerformanceCountersSettingsInvokeResponsePtrOutput) Elem() PerformanceCountersSettingsInvokeResponseOutput {
	return o.ApplyT(func(v *PerformanceCountersSettingsInvokeResponse) PerformanceCountersSettingsInvokeResponse {
		return *v
	}).(PerformanceCountersSettingsInvokeResponseOutput)
}

// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
func (o PerformanceCountersSettingsInvokeResponsePtrOutput) AppInsightsReference() AppInsightsReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v *PerformanceCountersSettingsInvokeResponse) *AppInsightsReferenceInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.AppInsightsReference
	}).(AppInsightsReferenceInvokeResponsePtrOutput)
}

// Performance counters reporting settings.
type PerformanceCountersSettingsResponse struct {
	// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
	AppInsightsReference AppInsightsReferenceResponse `pulumi:"appInsightsReference"`
}

// PerformanceCountersSettingsResponseInput is an input type that accepts PerformanceCountersSettingsResponseArgs and PerformanceCountersSettingsResponseOutput values.
// You can construct a concrete instance of `PerformanceCountersSettingsResponseInput` via:
//
//          PerformanceCountersSettingsResponseArgs{...}
type PerformanceCountersSettingsResponseInput interface {
	pulumi.Input

	ToPerformanceCountersSettingsResponseOutput() PerformanceCountersSettingsResponseOutput
	ToPerformanceCountersSettingsResponseOutputWithContext(context.Context) PerformanceCountersSettingsResponseOutput
}

// Performance counters reporting settings.
type PerformanceCountersSettingsResponseArgs struct {
	// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
	AppInsightsReference AppInsightsReferenceResponseInput `pulumi:"appInsightsReference"`
}

func (PerformanceCountersSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceCountersSettingsResponse)(nil)).Elem()
}

func (i PerformanceCountersSettingsResponseArgs) ToPerformanceCountersSettingsResponseOutput() PerformanceCountersSettingsResponseOutput {
	return i.ToPerformanceCountersSettingsResponseOutputWithContext(context.Background())
}

func (i PerformanceCountersSettingsResponseArgs) ToPerformanceCountersSettingsResponseOutputWithContext(ctx context.Context) PerformanceCountersSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsResponseOutput)
}

func (i PerformanceCountersSettingsResponseArgs) ToPerformanceCountersSettingsResponsePtrOutput() PerformanceCountersSettingsResponsePtrOutput {
	return i.ToPerformanceCountersSettingsResponsePtrOutputWithContext(context.Background())
}

func (i PerformanceCountersSettingsResponseArgs) ToPerformanceCountersSettingsResponsePtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsResponseOutput).ToPerformanceCountersSettingsResponsePtrOutputWithContext(ctx)
}

// PerformanceCountersSettingsResponsePtrInput is an input type that accepts PerformanceCountersSettingsResponseArgs, PerformanceCountersSettingsResponsePtr and PerformanceCountersSettingsResponsePtrOutput values.
// You can construct a concrete instance of `PerformanceCountersSettingsResponsePtrInput` via:
//
//          PerformanceCountersSettingsResponseArgs{...}
//
//  or:
//
//          nil
type PerformanceCountersSettingsResponsePtrInput interface {
	pulumi.Input

	ToPerformanceCountersSettingsResponsePtrOutput() PerformanceCountersSettingsResponsePtrOutput
	ToPerformanceCountersSettingsResponsePtrOutputWithContext(context.Context) PerformanceCountersSettingsResponsePtrOutput
}

type performanceCountersSettingsResponsePtrType PerformanceCountersSettingsResponseArgs

func PerformanceCountersSettingsResponsePtr(v *PerformanceCountersSettingsResponseArgs) PerformanceCountersSettingsResponsePtrInput {
	return (*performanceCountersSettingsResponsePtrType)(v)
}

func (*performanceCountersSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PerformanceCountersSettingsResponse)(nil)).Elem()
}

func (i *performanceCountersSettingsResponsePtrType) ToPerformanceCountersSettingsResponsePtrOutput() PerformanceCountersSettingsResponsePtrOutput {
	return i.ToPerformanceCountersSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *performanceCountersSettingsResponsePtrType) ToPerformanceCountersSettingsResponsePtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceCountersSettingsResponsePtrOutput)
}

// Performance counters reporting settings.
type PerformanceCountersSettingsResponseOutput struct{ *pulumi.OutputState }

func (PerformanceCountersSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceCountersSettingsResponse)(nil)).Elem()
}

func (o PerformanceCountersSettingsResponseOutput) ToPerformanceCountersSettingsResponseOutput() PerformanceCountersSettingsResponseOutput {
	return o
}

func (o PerformanceCountersSettingsResponseOutput) ToPerformanceCountersSettingsResponseOutputWithContext(ctx context.Context) PerformanceCountersSettingsResponseOutput {
	return o
}

func (o PerformanceCountersSettingsResponseOutput) ToPerformanceCountersSettingsResponsePtrOutput() PerformanceCountersSettingsResponsePtrOutput {
	return o.ToPerformanceCountersSettingsResponsePtrOutputWithContext(context.Background())
}

func (o PerformanceCountersSettingsResponseOutput) ToPerformanceCountersSettingsResponsePtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsResponsePtrOutput {
	return o.ApplyT(func(v PerformanceCountersSettingsResponse) *PerformanceCountersSettingsResponse {
		return &v
	}).(PerformanceCountersSettingsResponsePtrOutput)
}

// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
func (o PerformanceCountersSettingsResponseOutput) AppInsightsReference() AppInsightsReferenceResponseOutput {
	return o.ApplyT(func(v PerformanceCountersSettingsResponse) AppInsightsReferenceResponse {
		return v.AppInsightsReference
	}).(AppInsightsReferenceResponseOutput)
}

type PerformanceCountersSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PerformanceCountersSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerformanceCountersSettingsResponse)(nil)).Elem()
}

func (o PerformanceCountersSettingsResponsePtrOutput) ToPerformanceCountersSettingsResponsePtrOutput() PerformanceCountersSettingsResponsePtrOutput {
	return o
}

func (o PerformanceCountersSettingsResponsePtrOutput) ToPerformanceCountersSettingsResponsePtrOutputWithContext(ctx context.Context) PerformanceCountersSettingsResponsePtrOutput {
	return o
}

func (o PerformanceCountersSettingsResponsePtrOutput) Elem() PerformanceCountersSettingsResponseOutput {
	return o.ApplyT(func(v *PerformanceCountersSettingsResponse) PerformanceCountersSettingsResponse { return *v }).(PerformanceCountersSettingsResponseOutput)
}

// Azure Application Insights information for performance counters reporting. If provided, Batch AI will upload node performance counters to the corresponding Azure Application Insights account.
func (o PerformanceCountersSettingsResponsePtrOutput) AppInsightsReference() AppInsightsReferenceResponsePtrOutput {
	return o.ApplyT(func(v *PerformanceCountersSettingsResponse) *AppInsightsReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.AppInsightsReference
	}).(AppInsightsReferenceResponsePtrOutput)
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentials struct {
	// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
	Password *string `pulumi:"password"`
	// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
	PasswordSecretReference *KeyVaultSecretReference `pulumi:"passwordSecretReference"`
	// User name to login to the repository.
	Username string `pulumi:"username"`
}

// PrivateRegistryCredentialsInput is an input type that accepts PrivateRegistryCredentialsArgs and PrivateRegistryCredentialsOutput values.
// You can construct a concrete instance of `PrivateRegistryCredentialsInput` via:
//
//          PrivateRegistryCredentialsArgs{...}
type PrivateRegistryCredentialsInput interface {
	pulumi.Input

	ToPrivateRegistryCredentialsOutput() PrivateRegistryCredentialsOutput
	ToPrivateRegistryCredentialsOutputWithContext(context.Context) PrivateRegistryCredentialsOutput
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentialsArgs struct {
	// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
	PasswordSecretReference KeyVaultSecretReferencePtrInput `pulumi:"passwordSecretReference"`
	// User name to login to the repository.
	Username pulumi.StringInput `pulumi:"username"`
}

func (PrivateRegistryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateRegistryCredentials)(nil)).Elem()
}

func (i PrivateRegistryCredentialsArgs) ToPrivateRegistryCredentialsOutput() PrivateRegistryCredentialsOutput {
	return i.ToPrivateRegistryCredentialsOutputWithContext(context.Background())
}

func (i PrivateRegistryCredentialsArgs) ToPrivateRegistryCredentialsOutputWithContext(ctx context.Context) PrivateRegistryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsOutput)
}

func (i PrivateRegistryCredentialsArgs) ToPrivateRegistryCredentialsPtrOutput() PrivateRegistryCredentialsPtrOutput {
	return i.ToPrivateRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (i PrivateRegistryCredentialsArgs) ToPrivateRegistryCredentialsPtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsOutput).ToPrivateRegistryCredentialsPtrOutputWithContext(ctx)
}

// PrivateRegistryCredentialsPtrInput is an input type that accepts PrivateRegistryCredentialsArgs, PrivateRegistryCredentialsPtr and PrivateRegistryCredentialsPtrOutput values.
// You can construct a concrete instance of `PrivateRegistryCredentialsPtrInput` via:
//
//          PrivateRegistryCredentialsArgs{...}
//
//  or:
//
//          nil
type PrivateRegistryCredentialsPtrInput interface {
	pulumi.Input

	ToPrivateRegistryCredentialsPtrOutput() PrivateRegistryCredentialsPtrOutput
	ToPrivateRegistryCredentialsPtrOutputWithContext(context.Context) PrivateRegistryCredentialsPtrOutput
}

type privateRegistryCredentialsPtrType PrivateRegistryCredentialsArgs

func PrivateRegistryCredentialsPtr(v *PrivateRegistryCredentialsArgs) PrivateRegistryCredentialsPtrInput {
	return (*privateRegistryCredentialsPtrType)(v)
}

func (*privateRegistryCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateRegistryCredentials)(nil)).Elem()
}

func (i *privateRegistryCredentialsPtrType) ToPrivateRegistryCredentialsPtrOutput() PrivateRegistryCredentialsPtrOutput {
	return i.ToPrivateRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (i *privateRegistryCredentialsPtrType) ToPrivateRegistryCredentialsPtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsPtrOutput)
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentialsOutput struct{ *pulumi.OutputState }

func (PrivateRegistryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateRegistryCredentials)(nil)).Elem()
}

func (o PrivateRegistryCredentialsOutput) ToPrivateRegistryCredentialsOutput() PrivateRegistryCredentialsOutput {
	return o
}

func (o PrivateRegistryCredentialsOutput) ToPrivateRegistryCredentialsOutputWithContext(ctx context.Context) PrivateRegistryCredentialsOutput {
	return o
}

func (o PrivateRegistryCredentialsOutput) ToPrivateRegistryCredentialsPtrOutput() PrivateRegistryCredentialsPtrOutput {
	return o.ToPrivateRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (o PrivateRegistryCredentialsOutput) ToPrivateRegistryCredentialsPtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsPtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentials) *PrivateRegistryCredentials {
		return &v
	}).(PrivateRegistryCredentialsPtrOutput)
}

// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentials) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsOutput) PasswordSecretReference() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentials) *KeyVaultSecretReference { return v.PasswordSecretReference }).(KeyVaultSecretReferencePtrOutput)
}

// User name to login to the repository.
func (o PrivateRegistryCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateRegistryCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type PrivateRegistryCredentialsPtrOutput struct{ *pulumi.OutputState }

func (PrivateRegistryCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateRegistryCredentials)(nil)).Elem()
}

func (o PrivateRegistryCredentialsPtrOutput) ToPrivateRegistryCredentialsPtrOutput() PrivateRegistryCredentialsPtrOutput {
	return o
}

func (o PrivateRegistryCredentialsPtrOutput) ToPrivateRegistryCredentialsPtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsPtrOutput {
	return o
}

func (o PrivateRegistryCredentialsPtrOutput) Elem() PrivateRegistryCredentialsOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentials) PrivateRegistryCredentials { return *v }).(PrivateRegistryCredentialsOutput)
}

// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentials) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsPtrOutput) PasswordSecretReference() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentials) *KeyVaultSecretReference {
		if v == nil {
			return nil
		}
		return v.PasswordSecretReference
	}).(KeyVaultSecretReferencePtrOutput)
}

// User name to login to the repository.
func (o PrivateRegistryCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentialsInvokeResponse struct {
	// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
	Password *string `pulumi:"password"`
	// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
	PasswordSecretReference *KeyVaultSecretReferenceInvokeResponse `pulumi:"passwordSecretReference"`
	// User name to login to the repository.
	Username string `pulumi:"username"`
}

// PrivateRegistryCredentialsInvokeResponseInput is an input type that accepts PrivateRegistryCredentialsInvokeResponseArgs and PrivateRegistryCredentialsInvokeResponseOutput values.
// You can construct a concrete instance of `PrivateRegistryCredentialsInvokeResponseInput` via:
//
//          PrivateRegistryCredentialsInvokeResponseArgs{...}
type PrivateRegistryCredentialsInvokeResponseInput interface {
	pulumi.Input

	ToPrivateRegistryCredentialsInvokeResponseOutput() PrivateRegistryCredentialsInvokeResponseOutput
	ToPrivateRegistryCredentialsInvokeResponseOutputWithContext(context.Context) PrivateRegistryCredentialsInvokeResponseOutput
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentialsInvokeResponseArgs struct {
	// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
	PasswordSecretReference KeyVaultSecretReferenceInvokeResponsePtrInput `pulumi:"passwordSecretReference"`
	// User name to login to the repository.
	Username pulumi.StringInput `pulumi:"username"`
}

func (PrivateRegistryCredentialsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateRegistryCredentialsInvokeResponse)(nil)).Elem()
}

func (i PrivateRegistryCredentialsInvokeResponseArgs) ToPrivateRegistryCredentialsInvokeResponseOutput() PrivateRegistryCredentialsInvokeResponseOutput {
	return i.ToPrivateRegistryCredentialsInvokeResponseOutputWithContext(context.Background())
}

func (i PrivateRegistryCredentialsInvokeResponseArgs) ToPrivateRegistryCredentialsInvokeResponseOutputWithContext(ctx context.Context) PrivateRegistryCredentialsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsInvokeResponseOutput)
}

func (i PrivateRegistryCredentialsInvokeResponseArgs) ToPrivateRegistryCredentialsInvokeResponsePtrOutput() PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return i.ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i PrivateRegistryCredentialsInvokeResponseArgs) ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsInvokeResponseOutput).ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(ctx)
}

// PrivateRegistryCredentialsInvokeResponsePtrInput is an input type that accepts PrivateRegistryCredentialsInvokeResponseArgs, PrivateRegistryCredentialsInvokeResponsePtr and PrivateRegistryCredentialsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `PrivateRegistryCredentialsInvokeResponsePtrInput` via:
//
//          PrivateRegistryCredentialsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type PrivateRegistryCredentialsInvokeResponsePtrInput interface {
	pulumi.Input

	ToPrivateRegistryCredentialsInvokeResponsePtrOutput() PrivateRegistryCredentialsInvokeResponsePtrOutput
	ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(context.Context) PrivateRegistryCredentialsInvokeResponsePtrOutput
}

type privateRegistryCredentialsInvokeResponsePtrType PrivateRegistryCredentialsInvokeResponseArgs

func PrivateRegistryCredentialsInvokeResponsePtr(v *PrivateRegistryCredentialsInvokeResponseArgs) PrivateRegistryCredentialsInvokeResponsePtrInput {
	return (*privateRegistryCredentialsInvokeResponsePtrType)(v)
}

func (*privateRegistryCredentialsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateRegistryCredentialsInvokeResponse)(nil)).Elem()
}

func (i *privateRegistryCredentialsInvokeResponsePtrType) ToPrivateRegistryCredentialsInvokeResponsePtrOutput() PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return i.ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *privateRegistryCredentialsInvokeResponsePtrType) ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsInvokeResponsePtrOutput)
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentialsInvokeResponseOutput struct{ *pulumi.OutputState }

func (PrivateRegistryCredentialsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateRegistryCredentialsInvokeResponse)(nil)).Elem()
}

func (o PrivateRegistryCredentialsInvokeResponseOutput) ToPrivateRegistryCredentialsInvokeResponseOutput() PrivateRegistryCredentialsInvokeResponseOutput {
	return o
}

func (o PrivateRegistryCredentialsInvokeResponseOutput) ToPrivateRegistryCredentialsInvokeResponseOutputWithContext(ctx context.Context) PrivateRegistryCredentialsInvokeResponseOutput {
	return o
}

func (o PrivateRegistryCredentialsInvokeResponseOutput) ToPrivateRegistryCredentialsInvokeResponsePtrOutput() PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return o.ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o PrivateRegistryCredentialsInvokeResponseOutput) ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentialsInvokeResponse) *PrivateRegistryCredentialsInvokeResponse {
		return &v
	}).(PrivateRegistryCredentialsInvokeResponsePtrOutput)
}

// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsInvokeResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentialsInvokeResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsInvokeResponseOutput) PasswordSecretReference() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentialsInvokeResponse) *KeyVaultSecretReferenceInvokeResponse {
		return v.PasswordSecretReference
	}).(KeyVaultSecretReferenceInvokeResponsePtrOutput)
}

// User name to login to the repository.
func (o PrivateRegistryCredentialsInvokeResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateRegistryCredentialsInvokeResponse) string { return v.Username }).(pulumi.StringOutput)
}

type PrivateRegistryCredentialsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateRegistryCredentialsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateRegistryCredentialsInvokeResponse)(nil)).Elem()
}

func (o PrivateRegistryCredentialsInvokeResponsePtrOutput) ToPrivateRegistryCredentialsInvokeResponsePtrOutput() PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return o
}

func (o PrivateRegistryCredentialsInvokeResponsePtrOutput) ToPrivateRegistryCredentialsInvokeResponsePtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsInvokeResponsePtrOutput {
	return o
}

func (o PrivateRegistryCredentialsInvokeResponsePtrOutput) Elem() PrivateRegistryCredentialsInvokeResponseOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentialsInvokeResponse) PrivateRegistryCredentialsInvokeResponse { return *v }).(PrivateRegistryCredentialsInvokeResponseOutput)
}

// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsInvokeResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentialsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsInvokeResponsePtrOutput) PasswordSecretReference() KeyVaultSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentialsInvokeResponse) *KeyVaultSecretReferenceInvokeResponse {
		if v == nil {
			return nil
		}
		return v.PasswordSecretReference
	}).(KeyVaultSecretReferenceInvokeResponsePtrOutput)
}

// User name to login to the repository.
func (o PrivateRegistryCredentialsInvokeResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentialsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentialsResponse struct {
	// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
	Password *string `pulumi:"password"`
	// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
	PasswordSecretReference *KeyVaultSecretReferenceResponse `pulumi:"passwordSecretReference"`
	// User name to login to the repository.
	Username string `pulumi:"username"`
}

// PrivateRegistryCredentialsResponseInput is an input type that accepts PrivateRegistryCredentialsResponseArgs and PrivateRegistryCredentialsResponseOutput values.
// You can construct a concrete instance of `PrivateRegistryCredentialsResponseInput` via:
//
//          PrivateRegistryCredentialsResponseArgs{...}
type PrivateRegistryCredentialsResponseInput interface {
	pulumi.Input

	ToPrivateRegistryCredentialsResponseOutput() PrivateRegistryCredentialsResponseOutput
	ToPrivateRegistryCredentialsResponseOutputWithContext(context.Context) PrivateRegistryCredentialsResponseOutput
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentialsResponseArgs struct {
	// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
	PasswordSecretReference KeyVaultSecretReferenceResponsePtrInput `pulumi:"passwordSecretReference"`
	// User name to login to the repository.
	Username pulumi.StringInput `pulumi:"username"`
}

func (PrivateRegistryCredentialsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateRegistryCredentialsResponse)(nil)).Elem()
}

func (i PrivateRegistryCredentialsResponseArgs) ToPrivateRegistryCredentialsResponseOutput() PrivateRegistryCredentialsResponseOutput {
	return i.ToPrivateRegistryCredentialsResponseOutputWithContext(context.Background())
}

func (i PrivateRegistryCredentialsResponseArgs) ToPrivateRegistryCredentialsResponseOutputWithContext(ctx context.Context) PrivateRegistryCredentialsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsResponseOutput)
}

func (i PrivateRegistryCredentialsResponseArgs) ToPrivateRegistryCredentialsResponsePtrOutput() PrivateRegistryCredentialsResponsePtrOutput {
	return i.ToPrivateRegistryCredentialsResponsePtrOutputWithContext(context.Background())
}

func (i PrivateRegistryCredentialsResponseArgs) ToPrivateRegistryCredentialsResponsePtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsResponseOutput).ToPrivateRegistryCredentialsResponsePtrOutputWithContext(ctx)
}

// PrivateRegistryCredentialsResponsePtrInput is an input type that accepts PrivateRegistryCredentialsResponseArgs, PrivateRegistryCredentialsResponsePtr and PrivateRegistryCredentialsResponsePtrOutput values.
// You can construct a concrete instance of `PrivateRegistryCredentialsResponsePtrInput` via:
//
//          PrivateRegistryCredentialsResponseArgs{...}
//
//  or:
//
//          nil
type PrivateRegistryCredentialsResponsePtrInput interface {
	pulumi.Input

	ToPrivateRegistryCredentialsResponsePtrOutput() PrivateRegistryCredentialsResponsePtrOutput
	ToPrivateRegistryCredentialsResponsePtrOutputWithContext(context.Context) PrivateRegistryCredentialsResponsePtrOutput
}

type privateRegistryCredentialsResponsePtrType PrivateRegistryCredentialsResponseArgs

func PrivateRegistryCredentialsResponsePtr(v *PrivateRegistryCredentialsResponseArgs) PrivateRegistryCredentialsResponsePtrInput {
	return (*privateRegistryCredentialsResponsePtrType)(v)
}

func (*privateRegistryCredentialsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateRegistryCredentialsResponse)(nil)).Elem()
}

func (i *privateRegistryCredentialsResponsePtrType) ToPrivateRegistryCredentialsResponsePtrOutput() PrivateRegistryCredentialsResponsePtrOutput {
	return i.ToPrivateRegistryCredentialsResponsePtrOutputWithContext(context.Background())
}

func (i *privateRegistryCredentialsResponsePtrType) ToPrivateRegistryCredentialsResponsePtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateRegistryCredentialsResponsePtrOutput)
}

// Credentials to access a container image in a private repository.
type PrivateRegistryCredentialsResponseOutput struct{ *pulumi.OutputState }

func (PrivateRegistryCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateRegistryCredentialsResponse)(nil)).Elem()
}

func (o PrivateRegistryCredentialsResponseOutput) ToPrivateRegistryCredentialsResponseOutput() PrivateRegistryCredentialsResponseOutput {
	return o
}

func (o PrivateRegistryCredentialsResponseOutput) ToPrivateRegistryCredentialsResponseOutputWithContext(ctx context.Context) PrivateRegistryCredentialsResponseOutput {
	return o
}

func (o PrivateRegistryCredentialsResponseOutput) ToPrivateRegistryCredentialsResponsePtrOutput() PrivateRegistryCredentialsResponsePtrOutput {
	return o.ToPrivateRegistryCredentialsResponsePtrOutputWithContext(context.Background())
}

func (o PrivateRegistryCredentialsResponseOutput) ToPrivateRegistryCredentialsResponsePtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsResponsePtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentialsResponse) *PrivateRegistryCredentialsResponse {
		return &v
	}).(PrivateRegistryCredentialsResponsePtrOutput)
}

// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentialsResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsResponseOutput) PasswordSecretReference() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v PrivateRegistryCredentialsResponse) *KeyVaultSecretReferenceResponse {
		return v.PasswordSecretReference
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// User name to login to the repository.
func (o PrivateRegistryCredentialsResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateRegistryCredentialsResponse) string { return v.Username }).(pulumi.StringOutput)
}

type PrivateRegistryCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateRegistryCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateRegistryCredentialsResponse)(nil)).Elem()
}

func (o PrivateRegistryCredentialsResponsePtrOutput) ToPrivateRegistryCredentialsResponsePtrOutput() PrivateRegistryCredentialsResponsePtrOutput {
	return o
}

func (o PrivateRegistryCredentialsResponsePtrOutput) ToPrivateRegistryCredentialsResponsePtrOutputWithContext(ctx context.Context) PrivateRegistryCredentialsResponsePtrOutput {
	return o
}

func (o PrivateRegistryCredentialsResponsePtrOutput) Elem() PrivateRegistryCredentialsResponseOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentialsResponse) PrivateRegistryCredentialsResponse { return *v }).(PrivateRegistryCredentialsResponseOutput)
}

// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// KeyVault Secret storing the password. Users can store their secrets in Azure KeyVault and pass it to the Batch AI service to integrate with KeyVault. One of password or passwordSecretReference must be specified.
func (o PrivateRegistryCredentialsResponsePtrOutput) PasswordSecretReference() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentialsResponse) *KeyVaultSecretReferenceResponse {
		if v == nil {
			return nil
		}
		return v.PasswordSecretReference
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// User name to login to the repository.
func (o PrivateRegistryCredentialsResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateRegistryCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// pyTorch job settings.
type PyTorchSettings struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
	CommunicationBackend *string `pulumi:"communicationBackend"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// PyTorchSettingsInput is an input type that accepts PyTorchSettingsArgs and PyTorchSettingsOutput values.
// You can construct a concrete instance of `PyTorchSettingsInput` via:
//
//          PyTorchSettingsArgs{...}
type PyTorchSettingsInput interface {
	pulumi.Input

	ToPyTorchSettingsOutput() PyTorchSettingsOutput
	ToPyTorchSettingsOutputWithContext(context.Context) PyTorchSettingsOutput
}

// pyTorch job settings.
type PyTorchSettingsArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
	CommunicationBackend pulumi.StringPtrInput `pulumi:"communicationBackend"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (PyTorchSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchSettings)(nil)).Elem()
}

func (i PyTorchSettingsArgs) ToPyTorchSettingsOutput() PyTorchSettingsOutput {
	return i.ToPyTorchSettingsOutputWithContext(context.Background())
}

func (i PyTorchSettingsArgs) ToPyTorchSettingsOutputWithContext(ctx context.Context) PyTorchSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchSettingsOutput)
}

func (i PyTorchSettingsArgs) ToPyTorchSettingsPtrOutput() PyTorchSettingsPtrOutput {
	return i.ToPyTorchSettingsPtrOutputWithContext(context.Background())
}

func (i PyTorchSettingsArgs) ToPyTorchSettingsPtrOutputWithContext(ctx context.Context) PyTorchSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchSettingsOutput).ToPyTorchSettingsPtrOutputWithContext(ctx)
}

// PyTorchSettingsPtrInput is an input type that accepts PyTorchSettingsArgs, PyTorchSettingsPtr and PyTorchSettingsPtrOutput values.
// You can construct a concrete instance of `PyTorchSettingsPtrInput` via:
//
//          PyTorchSettingsArgs{...}
//
//  or:
//
//          nil
type PyTorchSettingsPtrInput interface {
	pulumi.Input

	ToPyTorchSettingsPtrOutput() PyTorchSettingsPtrOutput
	ToPyTorchSettingsPtrOutputWithContext(context.Context) PyTorchSettingsPtrOutput
}

type pyTorchSettingsPtrType PyTorchSettingsArgs

func PyTorchSettingsPtr(v *PyTorchSettingsArgs) PyTorchSettingsPtrInput {
	return (*pyTorchSettingsPtrType)(v)
}

func (*pyTorchSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorchSettings)(nil)).Elem()
}

func (i *pyTorchSettingsPtrType) ToPyTorchSettingsPtrOutput() PyTorchSettingsPtrOutput {
	return i.ToPyTorchSettingsPtrOutputWithContext(context.Background())
}

func (i *pyTorchSettingsPtrType) ToPyTorchSettingsPtrOutputWithContext(ctx context.Context) PyTorchSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchSettingsPtrOutput)
}

// pyTorch job settings.
type PyTorchSettingsOutput struct{ *pulumi.OutputState }

func (PyTorchSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchSettings)(nil)).Elem()
}

func (o PyTorchSettingsOutput) ToPyTorchSettingsOutput() PyTorchSettingsOutput {
	return o
}

func (o PyTorchSettingsOutput) ToPyTorchSettingsOutputWithContext(ctx context.Context) PyTorchSettingsOutput {
	return o
}

func (o PyTorchSettingsOutput) ToPyTorchSettingsPtrOutput() PyTorchSettingsPtrOutput {
	return o.ToPyTorchSettingsPtrOutputWithContext(context.Background())
}

func (o PyTorchSettingsOutput) ToPyTorchSettingsPtrOutputWithContext(ctx context.Context) PyTorchSettingsPtrOutput {
	return o.ApplyT(func(v PyTorchSettings) *PyTorchSettings {
		return &v
	}).(PyTorchSettingsPtrOutput)
}

// Command line arguments that need to be passed to the python script.
func (o PyTorchSettingsOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettings) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
func (o PyTorchSettingsOutput) CommunicationBackend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettings) *string { return v.CommunicationBackend }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o PyTorchSettingsOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorchSettings) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o PyTorchSettingsOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettings) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o PyTorchSettingsOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorchSettings) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

type PyTorchSettingsPtrOutput struct{ *pulumi.OutputState }

func (PyTorchSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorchSettings)(nil)).Elem()
}

func (o PyTorchSettingsPtrOutput) ToPyTorchSettingsPtrOutput() PyTorchSettingsPtrOutput {
	return o
}

func (o PyTorchSettingsPtrOutput) ToPyTorchSettingsPtrOutputWithContext(ctx context.Context) PyTorchSettingsPtrOutput {
	return o
}

func (o PyTorchSettingsPtrOutput) Elem() PyTorchSettingsOutput {
	return o.ApplyT(func(v *PyTorchSettings) PyTorchSettings { return *v }).(PyTorchSettingsOutput)
}

// Command line arguments that need to be passed to the python script.
func (o PyTorchSettingsPtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchSettings) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
func (o PyTorchSettingsPtrOutput) CommunicationBackend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchSettings) *string {
		if v == nil {
			return nil
		}
		return v.CommunicationBackend
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o PyTorchSettingsPtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PyTorchSettings) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o PyTorchSettingsPtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchSettings) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o PyTorchSettingsPtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchSettings) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// pyTorch job settings.
type PyTorchSettingsInvokeResponse struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
	CommunicationBackend *string `pulumi:"communicationBackend"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// PyTorchSettingsInvokeResponseInput is an input type that accepts PyTorchSettingsInvokeResponseArgs and PyTorchSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `PyTorchSettingsInvokeResponseInput` via:
//
//          PyTorchSettingsInvokeResponseArgs{...}
type PyTorchSettingsInvokeResponseInput interface {
	pulumi.Input

	ToPyTorchSettingsInvokeResponseOutput() PyTorchSettingsInvokeResponseOutput
	ToPyTorchSettingsInvokeResponseOutputWithContext(context.Context) PyTorchSettingsInvokeResponseOutput
}

// pyTorch job settings.
type PyTorchSettingsInvokeResponseArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
	CommunicationBackend pulumi.StringPtrInput `pulumi:"communicationBackend"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (PyTorchSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchSettingsInvokeResponse)(nil)).Elem()
}

func (i PyTorchSettingsInvokeResponseArgs) ToPyTorchSettingsInvokeResponseOutput() PyTorchSettingsInvokeResponseOutput {
	return i.ToPyTorchSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i PyTorchSettingsInvokeResponseArgs) ToPyTorchSettingsInvokeResponseOutputWithContext(ctx context.Context) PyTorchSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchSettingsInvokeResponseOutput)
}

// pyTorch job settings.
type PyTorchSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (PyTorchSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchSettingsInvokeResponse)(nil)).Elem()
}

func (o PyTorchSettingsInvokeResponseOutput) ToPyTorchSettingsInvokeResponseOutput() PyTorchSettingsInvokeResponseOutput {
	return o
}

func (o PyTorchSettingsInvokeResponseOutput) ToPyTorchSettingsInvokeResponseOutputWithContext(ctx context.Context) PyTorchSettingsInvokeResponseOutput {
	return o
}

// Command line arguments that need to be passed to the python script.
func (o PyTorchSettingsInvokeResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettingsInvokeResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
func (o PyTorchSettingsInvokeResponseOutput) CommunicationBackend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettingsInvokeResponse) *string { return v.CommunicationBackend }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o PyTorchSettingsInvokeResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorchSettingsInvokeResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o PyTorchSettingsInvokeResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettingsInvokeResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o PyTorchSettingsInvokeResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorchSettingsInvokeResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

// pyTorch job settings.
type PyTorchSettingsResponse struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs *string `pulumi:"commandLineArgs"`
	// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
	CommunicationBackend *string `pulumi:"communicationBackend"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount *int `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
}

// PyTorchSettingsResponseInput is an input type that accepts PyTorchSettingsResponseArgs and PyTorchSettingsResponseOutput values.
// You can construct a concrete instance of `PyTorchSettingsResponseInput` via:
//
//          PyTorchSettingsResponseArgs{...}
type PyTorchSettingsResponseInput interface {
	pulumi.Input

	ToPyTorchSettingsResponseOutput() PyTorchSettingsResponseOutput
	ToPyTorchSettingsResponseOutputWithContext(context.Context) PyTorchSettingsResponseOutput
}

// pyTorch job settings.
type PyTorchSettingsResponseArgs struct {
	// Command line arguments that need to be passed to the python script.
	CommandLineArgs pulumi.StringPtrInput `pulumi:"commandLineArgs"`
	// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
	CommunicationBackend pulumi.StringPtrInput `pulumi:"communicationBackend"`
	// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
	ProcessCount pulumi.IntPtrInput `pulumi:"processCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
}

func (PyTorchSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchSettingsResponse)(nil)).Elem()
}

func (i PyTorchSettingsResponseArgs) ToPyTorchSettingsResponseOutput() PyTorchSettingsResponseOutput {
	return i.ToPyTorchSettingsResponseOutputWithContext(context.Background())
}

func (i PyTorchSettingsResponseArgs) ToPyTorchSettingsResponseOutputWithContext(ctx context.Context) PyTorchSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchSettingsResponseOutput)
}

func (i PyTorchSettingsResponseArgs) ToPyTorchSettingsResponsePtrOutput() PyTorchSettingsResponsePtrOutput {
	return i.ToPyTorchSettingsResponsePtrOutputWithContext(context.Background())
}

func (i PyTorchSettingsResponseArgs) ToPyTorchSettingsResponsePtrOutputWithContext(ctx context.Context) PyTorchSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchSettingsResponseOutput).ToPyTorchSettingsResponsePtrOutputWithContext(ctx)
}

// PyTorchSettingsResponsePtrInput is an input type that accepts PyTorchSettingsResponseArgs, PyTorchSettingsResponsePtr and PyTorchSettingsResponsePtrOutput values.
// You can construct a concrete instance of `PyTorchSettingsResponsePtrInput` via:
//
//          PyTorchSettingsResponseArgs{...}
//
//  or:
//
//          nil
type PyTorchSettingsResponsePtrInput interface {
	pulumi.Input

	ToPyTorchSettingsResponsePtrOutput() PyTorchSettingsResponsePtrOutput
	ToPyTorchSettingsResponsePtrOutputWithContext(context.Context) PyTorchSettingsResponsePtrOutput
}

type pyTorchSettingsResponsePtrType PyTorchSettingsResponseArgs

func PyTorchSettingsResponsePtr(v *PyTorchSettingsResponseArgs) PyTorchSettingsResponsePtrInput {
	return (*pyTorchSettingsResponsePtrType)(v)
}

func (*pyTorchSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorchSettingsResponse)(nil)).Elem()
}

func (i *pyTorchSettingsResponsePtrType) ToPyTorchSettingsResponsePtrOutput() PyTorchSettingsResponsePtrOutput {
	return i.ToPyTorchSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *pyTorchSettingsResponsePtrType) ToPyTorchSettingsResponsePtrOutputWithContext(ctx context.Context) PyTorchSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchSettingsResponsePtrOutput)
}

// pyTorch job settings.
type PyTorchSettingsResponseOutput struct{ *pulumi.OutputState }

func (PyTorchSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchSettingsResponse)(nil)).Elem()
}

func (o PyTorchSettingsResponseOutput) ToPyTorchSettingsResponseOutput() PyTorchSettingsResponseOutput {
	return o
}

func (o PyTorchSettingsResponseOutput) ToPyTorchSettingsResponseOutputWithContext(ctx context.Context) PyTorchSettingsResponseOutput {
	return o
}

func (o PyTorchSettingsResponseOutput) ToPyTorchSettingsResponsePtrOutput() PyTorchSettingsResponsePtrOutput {
	return o.ToPyTorchSettingsResponsePtrOutputWithContext(context.Background())
}

func (o PyTorchSettingsResponseOutput) ToPyTorchSettingsResponsePtrOutputWithContext(ctx context.Context) PyTorchSettingsResponsePtrOutput {
	return o.ApplyT(func(v PyTorchSettingsResponse) *PyTorchSettingsResponse {
		return &v
	}).(PyTorchSettingsResponsePtrOutput)
}

// Command line arguments that need to be passed to the python script.
func (o PyTorchSettingsResponseOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettingsResponse) *string { return v.CommandLineArgs }).(pulumi.StringPtrOutput)
}

// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
func (o PyTorchSettingsResponseOutput) CommunicationBackend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettingsResponse) *string { return v.CommunicationBackend }).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o PyTorchSettingsResponseOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorchSettingsResponse) *int { return v.ProcessCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o PyTorchSettingsResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PyTorchSettingsResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o PyTorchSettingsResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorchSettingsResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

type PyTorchSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PyTorchSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorchSettingsResponse)(nil)).Elem()
}

func (o PyTorchSettingsResponsePtrOutput) ToPyTorchSettingsResponsePtrOutput() PyTorchSettingsResponsePtrOutput {
	return o
}

func (o PyTorchSettingsResponsePtrOutput) ToPyTorchSettingsResponsePtrOutputWithContext(ctx context.Context) PyTorchSettingsResponsePtrOutput {
	return o
}

func (o PyTorchSettingsResponsePtrOutput) Elem() PyTorchSettingsResponseOutput {
	return o.ApplyT(func(v *PyTorchSettingsResponse) PyTorchSettingsResponse { return *v }).(PyTorchSettingsResponseOutput)
}

// Command line arguments that need to be passed to the python script.
func (o PyTorchSettingsResponsePtrOutput) CommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
func (o PyTorchSettingsResponsePtrOutput) CommunicationBackend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommunicationBackend
	}).(pulumi.StringPtrOutput)
}

// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
func (o PyTorchSettingsResponsePtrOutput) ProcessCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PyTorchSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o PyTorchSettingsResponsePtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o PyTorchSettingsResponsePtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Login details to SSH to a compute node in cluster.
type RemoteLoginInformationInvokeResponse struct {
	// Public IP address of the compute node.
	IpAddress string `pulumi:"ipAddress"`
	// ID of the compute node.
	NodeId string `pulumi:"nodeId"`
	// SSH port number of the node.
	Port float64 `pulumi:"port"`
}

// RemoteLoginInformationInvokeResponseInput is an input type that accepts RemoteLoginInformationInvokeResponseArgs and RemoteLoginInformationInvokeResponseOutput values.
// You can construct a concrete instance of `RemoteLoginInformationInvokeResponseInput` via:
//
//          RemoteLoginInformationInvokeResponseArgs{...}
type RemoteLoginInformationInvokeResponseInput interface {
	pulumi.Input

	ToRemoteLoginInformationInvokeResponseOutput() RemoteLoginInformationInvokeResponseOutput
	ToRemoteLoginInformationInvokeResponseOutputWithContext(context.Context) RemoteLoginInformationInvokeResponseOutput
}

// Login details to SSH to a compute node in cluster.
type RemoteLoginInformationInvokeResponseArgs struct {
	// Public IP address of the compute node.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// ID of the compute node.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// SSH port number of the node.
	Port pulumi.Float64Input `pulumi:"port"`
}

func (RemoteLoginInformationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteLoginInformationInvokeResponse)(nil)).Elem()
}

func (i RemoteLoginInformationInvokeResponseArgs) ToRemoteLoginInformationInvokeResponseOutput() RemoteLoginInformationInvokeResponseOutput {
	return i.ToRemoteLoginInformationInvokeResponseOutputWithContext(context.Background())
}

func (i RemoteLoginInformationInvokeResponseArgs) ToRemoteLoginInformationInvokeResponseOutputWithContext(ctx context.Context) RemoteLoginInformationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteLoginInformationInvokeResponseOutput)
}

// RemoteLoginInformationInvokeResponseArrayInput is an input type that accepts RemoteLoginInformationInvokeResponseArray and RemoteLoginInformationInvokeResponseArrayOutput values.
// You can construct a concrete instance of `RemoteLoginInformationInvokeResponseArrayInput` via:
//
//          RemoteLoginInformationInvokeResponseArray{ RemoteLoginInformationInvokeResponseArgs{...} }
type RemoteLoginInformationInvokeResponseArrayInput interface {
	pulumi.Input

	ToRemoteLoginInformationInvokeResponseArrayOutput() RemoteLoginInformationInvokeResponseArrayOutput
	ToRemoteLoginInformationInvokeResponseArrayOutputWithContext(context.Context) RemoteLoginInformationInvokeResponseArrayOutput
}

type RemoteLoginInformationInvokeResponseArray []RemoteLoginInformationInvokeResponseInput

func (RemoteLoginInformationInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemoteLoginInformationInvokeResponse)(nil)).Elem()
}

func (i RemoteLoginInformationInvokeResponseArray) ToRemoteLoginInformationInvokeResponseArrayOutput() RemoteLoginInformationInvokeResponseArrayOutput {
	return i.ToRemoteLoginInformationInvokeResponseArrayOutputWithContext(context.Background())
}

func (i RemoteLoginInformationInvokeResponseArray) ToRemoteLoginInformationInvokeResponseArrayOutputWithContext(ctx context.Context) RemoteLoginInformationInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteLoginInformationInvokeResponseArrayOutput)
}

// Login details to SSH to a compute node in cluster.
type RemoteLoginInformationInvokeResponseOutput struct{ *pulumi.OutputState }

func (RemoteLoginInformationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteLoginInformationInvokeResponse)(nil)).Elem()
}

func (o RemoteLoginInformationInvokeResponseOutput) ToRemoteLoginInformationInvokeResponseOutput() RemoteLoginInformationInvokeResponseOutput {
	return o
}

func (o RemoteLoginInformationInvokeResponseOutput) ToRemoteLoginInformationInvokeResponseOutputWithContext(ctx context.Context) RemoteLoginInformationInvokeResponseOutput {
	return o
}

// Public IP address of the compute node.
func (o RemoteLoginInformationInvokeResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteLoginInformationInvokeResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// ID of the compute node.
func (o RemoteLoginInformationInvokeResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteLoginInformationInvokeResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// SSH port number of the node.
func (o RemoteLoginInformationInvokeResponseOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v RemoteLoginInformationInvokeResponse) float64 { return v.Port }).(pulumi.Float64Output)
}

type RemoteLoginInformationInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (RemoteLoginInformationInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemoteLoginInformationInvokeResponse)(nil)).Elem()
}

func (o RemoteLoginInformationInvokeResponseArrayOutput) ToRemoteLoginInformationInvokeResponseArrayOutput() RemoteLoginInformationInvokeResponseArrayOutput {
	return o
}

func (o RemoteLoginInformationInvokeResponseArrayOutput) ToRemoteLoginInformationInvokeResponseArrayOutputWithContext(ctx context.Context) RemoteLoginInformationInvokeResponseArrayOutput {
	return o
}

func (o RemoteLoginInformationInvokeResponseArrayOutput) Index(i pulumi.IntInput) RemoteLoginInformationInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RemoteLoginInformationInvokeResponse {
		return vs[0].([]RemoteLoginInformationInvokeResponse)[vs[1].(int)]
	}).(RemoteLoginInformationInvokeResponseOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceId struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

// ResourceIdInput is an input type that accepts ResourceIdArgs and ResourceIdOutput values.
// You can construct a concrete instance of `ResourceIdInput` via:
//
//          ResourceIdArgs{...}
type ResourceIdInput interface {
	pulumi.Input

	ToResourceIdOutput() ResourceIdOutput
	ToResourceIdOutputWithContext(context.Context) ResourceIdOutput
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdArgs struct {
	// The ID of the resource
	Id pulumi.StringInput `pulumi:"id"`
}

func (ResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceId)(nil)).Elem()
}

func (i ResourceIdArgs) ToResourceIdOutput() ResourceIdOutput {
	return i.ToResourceIdOutputWithContext(context.Background())
}

func (i ResourceIdArgs) ToResourceIdOutputWithContext(ctx context.Context) ResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdOutput)
}

func (i ResourceIdArgs) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return i.ToResourceIdPtrOutputWithContext(context.Background())
}

func (i ResourceIdArgs) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdOutput).ToResourceIdPtrOutputWithContext(ctx)
}

// ResourceIdPtrInput is an input type that accepts ResourceIdArgs, ResourceIdPtr and ResourceIdPtrOutput values.
// You can construct a concrete instance of `ResourceIdPtrInput` via:
//
//          ResourceIdArgs{...}
//
//  or:
//
//          nil
type ResourceIdPtrInput interface {
	pulumi.Input

	ToResourceIdPtrOutput() ResourceIdPtrOutput
	ToResourceIdPtrOutputWithContext(context.Context) ResourceIdPtrOutput
}

type resourceIdPtrType ResourceIdArgs

func ResourceIdPtr(v *ResourceIdArgs) ResourceIdPtrInput {
	return (*resourceIdPtrType)(v)
}

func (*resourceIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceId)(nil)).Elem()
}

func (i *resourceIdPtrType) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return i.ToResourceIdPtrOutputWithContext(context.Background())
}

func (i *resourceIdPtrType) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdPtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdOutput struct{ *pulumi.OutputState }

func (ResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceId)(nil)).Elem()
}

func (o ResourceIdOutput) ToResourceIdOutput() ResourceIdOutput {
	return o
}

func (o ResourceIdOutput) ToResourceIdOutputWithContext(ctx context.Context) ResourceIdOutput {
	return o
}

func (o ResourceIdOutput) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return o.ToResourceIdPtrOutputWithContext(context.Background())
}

func (o ResourceIdOutput) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return o.ApplyT(func(v ResourceId) *ResourceId {
		return &v
	}).(ResourceIdPtrOutput)
}

// The ID of the resource
func (o ResourceIdOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceId) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceIdPtrOutput struct{ *pulumi.OutputState }

func (ResourceIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceId)(nil)).Elem()
}

func (o ResourceIdPtrOutput) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return o
}

func (o ResourceIdPtrOutput) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return o
}

func (o ResourceIdPtrOutput) Elem() ResourceIdOutput {
	return o.ApplyT(func(v *ResourceId) ResourceId { return *v }).(ResourceIdOutput)
}

// The ID of the resource
func (o ResourceIdPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceId) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdInvokeResponse struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

// ResourceIdInvokeResponseInput is an input type that accepts ResourceIdInvokeResponseArgs and ResourceIdInvokeResponseOutput values.
// You can construct a concrete instance of `ResourceIdInvokeResponseInput` via:
//
//          ResourceIdInvokeResponseArgs{...}
type ResourceIdInvokeResponseInput interface {
	pulumi.Input

	ToResourceIdInvokeResponseOutput() ResourceIdInvokeResponseOutput
	ToResourceIdInvokeResponseOutputWithContext(context.Context) ResourceIdInvokeResponseOutput
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdInvokeResponseArgs struct {
	// The ID of the resource
	Id pulumi.StringInput `pulumi:"id"`
}

func (ResourceIdInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdInvokeResponse)(nil)).Elem()
}

func (i ResourceIdInvokeResponseArgs) ToResourceIdInvokeResponseOutput() ResourceIdInvokeResponseOutput {
	return i.ToResourceIdInvokeResponseOutputWithContext(context.Background())
}

func (i ResourceIdInvokeResponseArgs) ToResourceIdInvokeResponseOutputWithContext(ctx context.Context) ResourceIdInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdInvokeResponseOutput)
}

func (i ResourceIdInvokeResponseArgs) ToResourceIdInvokeResponsePtrOutput() ResourceIdInvokeResponsePtrOutput {
	return i.ToResourceIdInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ResourceIdInvokeResponseArgs) ToResourceIdInvokeResponsePtrOutputWithContext(ctx context.Context) ResourceIdInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdInvokeResponseOutput).ToResourceIdInvokeResponsePtrOutputWithContext(ctx)
}

// ResourceIdInvokeResponsePtrInput is an input type that accepts ResourceIdInvokeResponseArgs, ResourceIdInvokeResponsePtr and ResourceIdInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ResourceIdInvokeResponsePtrInput` via:
//
//          ResourceIdInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ResourceIdInvokeResponsePtrInput interface {
	pulumi.Input

	ToResourceIdInvokeResponsePtrOutput() ResourceIdInvokeResponsePtrOutput
	ToResourceIdInvokeResponsePtrOutputWithContext(context.Context) ResourceIdInvokeResponsePtrOutput
}

type resourceIdInvokeResponsePtrType ResourceIdInvokeResponseArgs

func ResourceIdInvokeResponsePtr(v *ResourceIdInvokeResponseArgs) ResourceIdInvokeResponsePtrInput {
	return (*resourceIdInvokeResponsePtrType)(v)
}

func (*resourceIdInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdInvokeResponse)(nil)).Elem()
}

func (i *resourceIdInvokeResponsePtrType) ToResourceIdInvokeResponsePtrOutput() ResourceIdInvokeResponsePtrOutput {
	return i.ToResourceIdInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *resourceIdInvokeResponsePtrType) ToResourceIdInvokeResponsePtrOutputWithContext(ctx context.Context) ResourceIdInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdInvokeResponsePtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdInvokeResponseOutput struct{ *pulumi.OutputState }

func (ResourceIdInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdInvokeResponse)(nil)).Elem()
}

func (o ResourceIdInvokeResponseOutput) ToResourceIdInvokeResponseOutput() ResourceIdInvokeResponseOutput {
	return o
}

func (o ResourceIdInvokeResponseOutput) ToResourceIdInvokeResponseOutputWithContext(ctx context.Context) ResourceIdInvokeResponseOutput {
	return o
}

func (o ResourceIdInvokeResponseOutput) ToResourceIdInvokeResponsePtrOutput() ResourceIdInvokeResponsePtrOutput {
	return o.ToResourceIdInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ResourceIdInvokeResponseOutput) ToResourceIdInvokeResponsePtrOutputWithContext(ctx context.Context) ResourceIdInvokeResponsePtrOutput {
	return o.ApplyT(func(v ResourceIdInvokeResponse) *ResourceIdInvokeResponse {
		return &v
	}).(ResourceIdInvokeResponsePtrOutput)
}

// The ID of the resource
func (o ResourceIdInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceIdInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdInvokeResponse)(nil)).Elem()
}

func (o ResourceIdInvokeResponsePtrOutput) ToResourceIdInvokeResponsePtrOutput() ResourceIdInvokeResponsePtrOutput {
	return o
}

func (o ResourceIdInvokeResponsePtrOutput) ToResourceIdInvokeResponsePtrOutputWithContext(ctx context.Context) ResourceIdInvokeResponsePtrOutput {
	return o
}

func (o ResourceIdInvokeResponsePtrOutput) Elem() ResourceIdInvokeResponseOutput {
	return o.ApplyT(func(v *ResourceIdInvokeResponse) ResourceIdInvokeResponse { return *v }).(ResourceIdInvokeResponseOutput)
}

// The ID of the resource
func (o ResourceIdInvokeResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdResponse struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

// ResourceIdResponseInput is an input type that accepts ResourceIdResponseArgs and ResourceIdResponseOutput values.
// You can construct a concrete instance of `ResourceIdResponseInput` via:
//
//          ResourceIdResponseArgs{...}
type ResourceIdResponseInput interface {
	pulumi.Input

	ToResourceIdResponseOutput() ResourceIdResponseOutput
	ToResourceIdResponseOutputWithContext(context.Context) ResourceIdResponseOutput
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdResponseArgs struct {
	// The ID of the resource
	Id pulumi.StringInput `pulumi:"id"`
}

func (ResourceIdResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdResponse)(nil)).Elem()
}

func (i ResourceIdResponseArgs) ToResourceIdResponseOutput() ResourceIdResponseOutput {
	return i.ToResourceIdResponseOutputWithContext(context.Background())
}

func (i ResourceIdResponseArgs) ToResourceIdResponseOutputWithContext(ctx context.Context) ResourceIdResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdResponseOutput)
}

func (i ResourceIdResponseArgs) ToResourceIdResponsePtrOutput() ResourceIdResponsePtrOutput {
	return i.ToResourceIdResponsePtrOutputWithContext(context.Background())
}

func (i ResourceIdResponseArgs) ToResourceIdResponsePtrOutputWithContext(ctx context.Context) ResourceIdResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdResponseOutput).ToResourceIdResponsePtrOutputWithContext(ctx)
}

// ResourceIdResponsePtrInput is an input type that accepts ResourceIdResponseArgs, ResourceIdResponsePtr and ResourceIdResponsePtrOutput values.
// You can construct a concrete instance of `ResourceIdResponsePtrInput` via:
//
//          ResourceIdResponseArgs{...}
//
//  or:
//
//          nil
type ResourceIdResponsePtrInput interface {
	pulumi.Input

	ToResourceIdResponsePtrOutput() ResourceIdResponsePtrOutput
	ToResourceIdResponsePtrOutputWithContext(context.Context) ResourceIdResponsePtrOutput
}

type resourceIdResponsePtrType ResourceIdResponseArgs

func ResourceIdResponsePtr(v *ResourceIdResponseArgs) ResourceIdResponsePtrInput {
	return (*resourceIdResponsePtrType)(v)
}

func (*resourceIdResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdResponse)(nil)).Elem()
}

func (i *resourceIdResponsePtrType) ToResourceIdResponsePtrOutput() ResourceIdResponsePtrOutput {
	return i.ToResourceIdResponsePtrOutputWithContext(context.Background())
}

func (i *resourceIdResponsePtrType) ToResourceIdResponsePtrOutputWithContext(ctx context.Context) ResourceIdResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdResponsePtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdResponseOutput struct{ *pulumi.OutputState }

func (ResourceIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdResponse)(nil)).Elem()
}

func (o ResourceIdResponseOutput) ToResourceIdResponseOutput() ResourceIdResponseOutput {
	return o
}

func (o ResourceIdResponseOutput) ToResourceIdResponseOutputWithContext(ctx context.Context) ResourceIdResponseOutput {
	return o
}

func (o ResourceIdResponseOutput) ToResourceIdResponsePtrOutput() ResourceIdResponsePtrOutput {
	return o.ToResourceIdResponsePtrOutputWithContext(context.Background())
}

func (o ResourceIdResponseOutput) ToResourceIdResponsePtrOutputWithContext(ctx context.Context) ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v ResourceIdResponse) *ResourceIdResponse {
		return &v
	}).(ResourceIdResponsePtrOutput)
}

// The ID of the resource
func (o ResourceIdResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceIdResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdResponse)(nil)).Elem()
}

func (o ResourceIdResponsePtrOutput) ToResourceIdResponsePtrOutput() ResourceIdResponsePtrOutput {
	return o
}

func (o ResourceIdResponsePtrOutput) ToResourceIdResponsePtrOutputWithContext(ctx context.Context) ResourceIdResponsePtrOutput {
	return o
}

func (o ResourceIdResponsePtrOutput) Elem() ResourceIdResponseOutput {
	return o.ApplyT(func(v *ResourceIdResponse) ResourceIdResponse { return *v }).(ResourceIdResponseOutput)
}

// The ID of the resource
func (o ResourceIdResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettings struct {
	// Auto-scale settings for the cluster.
	AutoScale *AutoScaleSettings `pulumi:"autoScale"`
	// Manual scale settings for the cluster.
	Manual *ManualScaleSettings `pulumi:"manual"`
}

// ScaleSettingsInput is an input type that accepts ScaleSettingsArgs and ScaleSettingsOutput values.
// You can construct a concrete instance of `ScaleSettingsInput` via:
//
//          ScaleSettingsArgs{...}
type ScaleSettingsInput interface {
	pulumi.Input

	ToScaleSettingsOutput() ScaleSettingsOutput
	ToScaleSettingsOutputWithContext(context.Context) ScaleSettingsOutput
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettingsArgs struct {
	// Auto-scale settings for the cluster.
	AutoScale AutoScaleSettingsPtrInput `pulumi:"autoScale"`
	// Manual scale settings for the cluster.
	Manual ManualScaleSettingsPtrInput `pulumi:"manual"`
}

func (ScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (i ScaleSettingsArgs) ToScaleSettingsOutput() ScaleSettingsOutput {
	return i.ToScaleSettingsOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput)
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput).ToScaleSettingsPtrOutputWithContext(ctx)
}

// ScaleSettingsPtrInput is an input type that accepts ScaleSettingsArgs, ScaleSettingsPtr and ScaleSettingsPtrOutput values.
// You can construct a concrete instance of `ScaleSettingsPtrInput` via:
//
//          ScaleSettingsArgs{...}
//
//  or:
//
//          nil
type ScaleSettingsPtrInput interface {
	pulumi.Input

	ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput
	ToScaleSettingsPtrOutputWithContext(context.Context) ScaleSettingsPtrOutput
}

type scaleSettingsPtrType ScaleSettingsArgs

func ScaleSettingsPtr(v *ScaleSettingsArgs) ScaleSettingsPtrInput {
	return (*scaleSettingsPtrType)(v)
}

func (*scaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsPtrOutput)
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettingsOutput struct{ *pulumi.OutputState }

func (ScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (o ScaleSettingsOutput) ToScaleSettingsOutput() ScaleSettingsOutput {
	return o
}

func (o ScaleSettingsOutput) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return o
}

func (o ScaleSettingsOutput) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return o.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (o ScaleSettingsOutput) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *ScaleSettings {
		return &v
	}).(ScaleSettingsPtrOutput)
}

// Auto-scale settings for the cluster.
func (o ScaleSettingsOutput) AutoScale() AutoScaleSettingsPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *AutoScaleSettings { return v.AutoScale }).(AutoScaleSettingsPtrOutput)
}

// Manual scale settings for the cluster.
func (o ScaleSettingsOutput) Manual() ManualScaleSettingsPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *ManualScaleSettings { return v.Manual }).(ManualScaleSettingsPtrOutput)
}

type ScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (o ScaleSettingsPtrOutput) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return o
}

func (o ScaleSettingsPtrOutput) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return o
}

func (o ScaleSettingsPtrOutput) Elem() ScaleSettingsOutput {
	return o.ApplyT(func(v *ScaleSettings) ScaleSettings { return *v }).(ScaleSettingsOutput)
}

// Auto-scale settings for the cluster.
func (o ScaleSettingsPtrOutput) AutoScale() AutoScaleSettingsPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *AutoScaleSettings {
		if v == nil {
			return nil
		}
		return v.AutoScale
	}).(AutoScaleSettingsPtrOutput)
}

// Manual scale settings for the cluster.
func (o ScaleSettingsPtrOutput) Manual() ManualScaleSettingsPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *ManualScaleSettings {
		if v == nil {
			return nil
		}
		return v.Manual
	}).(ManualScaleSettingsPtrOutput)
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettingsInvokeResponse struct {
	// Auto-scale settings for the cluster.
	AutoScale *AutoScaleSettingsInvokeResponse `pulumi:"autoScale"`
	// Manual scale settings for the cluster.
	Manual *ManualScaleSettingsInvokeResponse `pulumi:"manual"`
}

// ScaleSettingsInvokeResponseInput is an input type that accepts ScaleSettingsInvokeResponseArgs and ScaleSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `ScaleSettingsInvokeResponseInput` via:
//
//          ScaleSettingsInvokeResponseArgs{...}
type ScaleSettingsInvokeResponseInput interface {
	pulumi.Input

	ToScaleSettingsInvokeResponseOutput() ScaleSettingsInvokeResponseOutput
	ToScaleSettingsInvokeResponseOutputWithContext(context.Context) ScaleSettingsInvokeResponseOutput
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettingsInvokeResponseArgs struct {
	// Auto-scale settings for the cluster.
	AutoScale AutoScaleSettingsInvokeResponsePtrInput `pulumi:"autoScale"`
	// Manual scale settings for the cluster.
	Manual ManualScaleSettingsInvokeResponsePtrInput `pulumi:"manual"`
}

func (ScaleSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsInvokeResponse)(nil)).Elem()
}

func (i ScaleSettingsInvokeResponseArgs) ToScaleSettingsInvokeResponseOutput() ScaleSettingsInvokeResponseOutput {
	return i.ToScaleSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i ScaleSettingsInvokeResponseArgs) ToScaleSettingsInvokeResponseOutputWithContext(ctx context.Context) ScaleSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsInvokeResponseOutput)
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ScaleSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsInvokeResponse)(nil)).Elem()
}

func (o ScaleSettingsInvokeResponseOutput) ToScaleSettingsInvokeResponseOutput() ScaleSettingsInvokeResponseOutput {
	return o
}

func (o ScaleSettingsInvokeResponseOutput) ToScaleSettingsInvokeResponseOutputWithContext(ctx context.Context) ScaleSettingsInvokeResponseOutput {
	return o
}

// Auto-scale settings for the cluster.
func (o ScaleSettingsInvokeResponseOutput) AutoScale() AutoScaleSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsInvokeResponse) *AutoScaleSettingsInvokeResponse { return v.AutoScale }).(AutoScaleSettingsInvokeResponsePtrOutput)
}

// Manual scale settings for the cluster.
func (o ScaleSettingsInvokeResponseOutput) Manual() ManualScaleSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsInvokeResponse) *ManualScaleSettingsInvokeResponse { return v.Manual }).(ManualScaleSettingsInvokeResponsePtrOutput)
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettingsResponse struct {
	// Auto-scale settings for the cluster.
	AutoScale *AutoScaleSettingsResponse `pulumi:"autoScale"`
	// Manual scale settings for the cluster.
	Manual *ManualScaleSettingsResponse `pulumi:"manual"`
}

// ScaleSettingsResponseInput is an input type that accepts ScaleSettingsResponseArgs and ScaleSettingsResponseOutput values.
// You can construct a concrete instance of `ScaleSettingsResponseInput` via:
//
//          ScaleSettingsResponseArgs{...}
type ScaleSettingsResponseInput interface {
	pulumi.Input

	ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput
	ToScaleSettingsResponseOutputWithContext(context.Context) ScaleSettingsResponseOutput
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettingsResponseArgs struct {
	// Auto-scale settings for the cluster.
	AutoScale AutoScaleSettingsResponsePtrInput `pulumi:"autoScale"`
	// Manual scale settings for the cluster.
	Manual ManualScaleSettingsResponsePtrInput `pulumi:"manual"`
}

func (ScaleSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsResponse)(nil)).Elem()
}

func (i ScaleSettingsResponseArgs) ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput {
	return i.ToScaleSettingsResponseOutputWithContext(context.Background())
}

func (i ScaleSettingsResponseArgs) ToScaleSettingsResponseOutputWithContext(ctx context.Context) ScaleSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsResponseOutput)
}

func (i ScaleSettingsResponseArgs) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return i.ToScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ScaleSettingsResponseArgs) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsResponseOutput).ToScaleSettingsResponsePtrOutputWithContext(ctx)
}

// ScaleSettingsResponsePtrInput is an input type that accepts ScaleSettingsResponseArgs, ScaleSettingsResponsePtr and ScaleSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ScaleSettingsResponsePtrInput` via:
//
//          ScaleSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ScaleSettingsResponsePtrInput interface {
	pulumi.Input

	ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput
	ToScaleSettingsResponsePtrOutputWithContext(context.Context) ScaleSettingsResponsePtrOutput
}

type scaleSettingsResponsePtrType ScaleSettingsResponseArgs

func ScaleSettingsResponsePtr(v *ScaleSettingsResponseArgs) ScaleSettingsResponsePtrInput {
	return (*scaleSettingsResponsePtrType)(v)
}

func (*scaleSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettingsResponse)(nil)).Elem()
}

func (i *scaleSettingsResponsePtrType) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return i.ToScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *scaleSettingsResponsePtrType) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsResponsePtrOutput)
}

// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
type ScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput {
	return o
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutputWithContext(ctx context.Context) ScaleSettingsResponseOutput {
	return o
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return o.ToScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *ScaleSettingsResponse {
		return &v
	}).(ScaleSettingsResponsePtrOutput)
}

// Auto-scale settings for the cluster.
func (o ScaleSettingsResponseOutput) AutoScale() AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *AutoScaleSettingsResponse { return v.AutoScale }).(AutoScaleSettingsResponsePtrOutput)
}

// Manual scale settings for the cluster.
func (o ScaleSettingsResponseOutput) Manual() ManualScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *ManualScaleSettingsResponse { return v.Manual }).(ManualScaleSettingsResponsePtrOutput)
}

type ScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) Elem() ScaleSettingsResponseOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) ScaleSettingsResponse { return *v }).(ScaleSettingsResponseOutput)
}

// Auto-scale settings for the cluster.
func (o ScaleSettingsResponsePtrOutput) AutoScale() AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *AutoScaleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AutoScale
	}).(AutoScaleSettingsResponsePtrOutput)
}

// Manual scale settings for the cluster.
func (o ScaleSettingsResponsePtrOutput) Manual() ManualScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *ManualScaleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.Manual
	}).(ManualScaleSettingsResponsePtrOutput)
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTask struct {
	// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
	CommandLine string `pulumi:"commandLine"`
	// A collection of user defined environment variables to be set for setup task.
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
	Secrets []EnvironmentVariableWithSecretValue `pulumi:"secrets"`
	// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
	StdOutErrPathPrefix string `pulumi:"stdOutErrPathPrefix"`
}

// SetupTaskInput is an input type that accepts SetupTaskArgs and SetupTaskOutput values.
// You can construct a concrete instance of `SetupTaskInput` via:
//
//          SetupTaskArgs{...}
type SetupTaskInput interface {
	pulumi.Input

	ToSetupTaskOutput() SetupTaskOutput
	ToSetupTaskOutputWithContext(context.Context) SetupTaskOutput
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTaskArgs struct {
	// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
	// A collection of user defined environment variables to be set for setup task.
	EnvironmentVariables EnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
	Secrets EnvironmentVariableWithSecretValueArrayInput `pulumi:"secrets"`
	// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
	StdOutErrPathPrefix pulumi.StringInput `pulumi:"stdOutErrPathPrefix"`
}

func (SetupTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupTask)(nil)).Elem()
}

func (i SetupTaskArgs) ToSetupTaskOutput() SetupTaskOutput {
	return i.ToSetupTaskOutputWithContext(context.Background())
}

func (i SetupTaskArgs) ToSetupTaskOutputWithContext(ctx context.Context) SetupTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskOutput)
}

func (i SetupTaskArgs) ToSetupTaskPtrOutput() SetupTaskPtrOutput {
	return i.ToSetupTaskPtrOutputWithContext(context.Background())
}

func (i SetupTaskArgs) ToSetupTaskPtrOutputWithContext(ctx context.Context) SetupTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskOutput).ToSetupTaskPtrOutputWithContext(ctx)
}

// SetupTaskPtrInput is an input type that accepts SetupTaskArgs, SetupTaskPtr and SetupTaskPtrOutput values.
// You can construct a concrete instance of `SetupTaskPtrInput` via:
//
//          SetupTaskArgs{...}
//
//  or:
//
//          nil
type SetupTaskPtrInput interface {
	pulumi.Input

	ToSetupTaskPtrOutput() SetupTaskPtrOutput
	ToSetupTaskPtrOutputWithContext(context.Context) SetupTaskPtrOutput
}

type setupTaskPtrType SetupTaskArgs

func SetupTaskPtr(v *SetupTaskArgs) SetupTaskPtrInput {
	return (*setupTaskPtrType)(v)
}

func (*setupTaskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupTask)(nil)).Elem()
}

func (i *setupTaskPtrType) ToSetupTaskPtrOutput() SetupTaskPtrOutput {
	return i.ToSetupTaskPtrOutputWithContext(context.Background())
}

func (i *setupTaskPtrType) ToSetupTaskPtrOutputWithContext(ctx context.Context) SetupTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskPtrOutput)
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTaskOutput struct{ *pulumi.OutputState }

func (SetupTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupTask)(nil)).Elem()
}

func (o SetupTaskOutput) ToSetupTaskOutput() SetupTaskOutput {
	return o
}

func (o SetupTaskOutput) ToSetupTaskOutputWithContext(ctx context.Context) SetupTaskOutput {
	return o
}

func (o SetupTaskOutput) ToSetupTaskPtrOutput() SetupTaskPtrOutput {
	return o.ToSetupTaskPtrOutputWithContext(context.Background())
}

func (o SetupTaskOutput) ToSetupTaskPtrOutputWithContext(ctx context.Context) SetupTaskPtrOutput {
	return o.ApplyT(func(v SetupTask) *SetupTask {
		return &v
	}).(SetupTaskPtrOutput)
}

// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
func (o SetupTaskOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v SetupTask) string { return v.CommandLine }).(pulumi.StringOutput)
}

// A collection of user defined environment variables to be set for setup task.
func (o SetupTaskOutput) EnvironmentVariables() EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v SetupTask) []EnvironmentVariable { return v.EnvironmentVariables }).(EnvironmentVariableArrayOutput)
}

// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
func (o SetupTaskOutput) Secrets() EnvironmentVariableWithSecretValueArrayOutput {
	return o.ApplyT(func(v SetupTask) []EnvironmentVariableWithSecretValue { return v.Secrets }).(EnvironmentVariableWithSecretValueArrayOutput)
}

// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
func (o SetupTaskOutput) StdOutErrPathPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SetupTask) string { return v.StdOutErrPathPrefix }).(pulumi.StringOutput)
}

type SetupTaskPtrOutput struct{ *pulumi.OutputState }

func (SetupTaskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupTask)(nil)).Elem()
}

func (o SetupTaskPtrOutput) ToSetupTaskPtrOutput() SetupTaskPtrOutput {
	return o
}

func (o SetupTaskPtrOutput) ToSetupTaskPtrOutputWithContext(ctx context.Context) SetupTaskPtrOutput {
	return o
}

func (o SetupTaskPtrOutput) Elem() SetupTaskOutput {
	return o.ApplyT(func(v *SetupTask) SetupTask { return *v }).(SetupTaskOutput)
}

// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
func (o SetupTaskPtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetupTask) *string {
		if v == nil {
			return nil
		}
		return &v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// A collection of user defined environment variables to be set for setup task.
func (o SetupTaskPtrOutput) EnvironmentVariables() EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *SetupTask) []EnvironmentVariable {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(EnvironmentVariableArrayOutput)
}

// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
func (o SetupTaskPtrOutput) Secrets() EnvironmentVariableWithSecretValueArrayOutput {
	return o.ApplyT(func(v *SetupTask) []EnvironmentVariableWithSecretValue {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(EnvironmentVariableWithSecretValueArrayOutput)
}

// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
func (o SetupTaskPtrOutput) StdOutErrPathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetupTask) *string {
		if v == nil {
			return nil
		}
		return &v.StdOutErrPathPrefix
	}).(pulumi.StringPtrOutput)
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTaskInvokeResponse struct {
	// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
	CommandLine string `pulumi:"commandLine"`
	// A collection of user defined environment variables to be set for setup task.
	EnvironmentVariables []EnvironmentVariableInvokeResponse `pulumi:"environmentVariables"`
	// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
	Secrets []EnvironmentVariableWithSecretValueInvokeResponse `pulumi:"secrets"`
	// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
	StdOutErrPathPrefix string `pulumi:"stdOutErrPathPrefix"`
	// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
	StdOutErrPathSuffix string `pulumi:"stdOutErrPathSuffix"`
}

// SetupTaskInvokeResponseInput is an input type that accepts SetupTaskInvokeResponseArgs and SetupTaskInvokeResponseOutput values.
// You can construct a concrete instance of `SetupTaskInvokeResponseInput` via:
//
//          SetupTaskInvokeResponseArgs{...}
type SetupTaskInvokeResponseInput interface {
	pulumi.Input

	ToSetupTaskInvokeResponseOutput() SetupTaskInvokeResponseOutput
	ToSetupTaskInvokeResponseOutputWithContext(context.Context) SetupTaskInvokeResponseOutput
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTaskInvokeResponseArgs struct {
	// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
	// A collection of user defined environment variables to be set for setup task.
	EnvironmentVariables EnvironmentVariableInvokeResponseArrayInput `pulumi:"environmentVariables"`
	// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
	Secrets EnvironmentVariableWithSecretValueInvokeResponseArrayInput `pulumi:"secrets"`
	// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
	StdOutErrPathPrefix pulumi.StringInput `pulumi:"stdOutErrPathPrefix"`
	// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
	StdOutErrPathSuffix pulumi.StringInput `pulumi:"stdOutErrPathSuffix"`
}

func (SetupTaskInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupTaskInvokeResponse)(nil)).Elem()
}

func (i SetupTaskInvokeResponseArgs) ToSetupTaskInvokeResponseOutput() SetupTaskInvokeResponseOutput {
	return i.ToSetupTaskInvokeResponseOutputWithContext(context.Background())
}

func (i SetupTaskInvokeResponseArgs) ToSetupTaskInvokeResponseOutputWithContext(ctx context.Context) SetupTaskInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskInvokeResponseOutput)
}

func (i SetupTaskInvokeResponseArgs) ToSetupTaskInvokeResponsePtrOutput() SetupTaskInvokeResponsePtrOutput {
	return i.ToSetupTaskInvokeResponsePtrOutputWithContext(context.Background())
}

func (i SetupTaskInvokeResponseArgs) ToSetupTaskInvokeResponsePtrOutputWithContext(ctx context.Context) SetupTaskInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskInvokeResponseOutput).ToSetupTaskInvokeResponsePtrOutputWithContext(ctx)
}

// SetupTaskInvokeResponsePtrInput is an input type that accepts SetupTaskInvokeResponseArgs, SetupTaskInvokeResponsePtr and SetupTaskInvokeResponsePtrOutput values.
// You can construct a concrete instance of `SetupTaskInvokeResponsePtrInput` via:
//
//          SetupTaskInvokeResponseArgs{...}
//
//  or:
//
//          nil
type SetupTaskInvokeResponsePtrInput interface {
	pulumi.Input

	ToSetupTaskInvokeResponsePtrOutput() SetupTaskInvokeResponsePtrOutput
	ToSetupTaskInvokeResponsePtrOutputWithContext(context.Context) SetupTaskInvokeResponsePtrOutput
}

type setupTaskInvokeResponsePtrType SetupTaskInvokeResponseArgs

func SetupTaskInvokeResponsePtr(v *SetupTaskInvokeResponseArgs) SetupTaskInvokeResponsePtrInput {
	return (*setupTaskInvokeResponsePtrType)(v)
}

func (*setupTaskInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupTaskInvokeResponse)(nil)).Elem()
}

func (i *setupTaskInvokeResponsePtrType) ToSetupTaskInvokeResponsePtrOutput() SetupTaskInvokeResponsePtrOutput {
	return i.ToSetupTaskInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *setupTaskInvokeResponsePtrType) ToSetupTaskInvokeResponsePtrOutputWithContext(ctx context.Context) SetupTaskInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskInvokeResponsePtrOutput)
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTaskInvokeResponseOutput struct{ *pulumi.OutputState }

func (SetupTaskInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupTaskInvokeResponse)(nil)).Elem()
}

func (o SetupTaskInvokeResponseOutput) ToSetupTaskInvokeResponseOutput() SetupTaskInvokeResponseOutput {
	return o
}

func (o SetupTaskInvokeResponseOutput) ToSetupTaskInvokeResponseOutputWithContext(ctx context.Context) SetupTaskInvokeResponseOutput {
	return o
}

func (o SetupTaskInvokeResponseOutput) ToSetupTaskInvokeResponsePtrOutput() SetupTaskInvokeResponsePtrOutput {
	return o.ToSetupTaskInvokeResponsePtrOutputWithContext(context.Background())
}

func (o SetupTaskInvokeResponseOutput) ToSetupTaskInvokeResponsePtrOutputWithContext(ctx context.Context) SetupTaskInvokeResponsePtrOutput {
	return o.ApplyT(func(v SetupTaskInvokeResponse) *SetupTaskInvokeResponse {
		return &v
	}).(SetupTaskInvokeResponsePtrOutput)
}

// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
func (o SetupTaskInvokeResponseOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v SetupTaskInvokeResponse) string { return v.CommandLine }).(pulumi.StringOutput)
}

// A collection of user defined environment variables to be set for setup task.
func (o SetupTaskInvokeResponseOutput) EnvironmentVariables() EnvironmentVariableInvokeResponseArrayOutput {
	return o.ApplyT(func(v SetupTaskInvokeResponse) []EnvironmentVariableInvokeResponse { return v.EnvironmentVariables }).(EnvironmentVariableInvokeResponseArrayOutput)
}

// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
func (o SetupTaskInvokeResponseOutput) Secrets() EnvironmentVariableWithSecretValueInvokeResponseArrayOutput {
	return o.ApplyT(func(v SetupTaskInvokeResponse) []EnvironmentVariableWithSecretValueInvokeResponse { return v.Secrets }).(EnvironmentVariableWithSecretValueInvokeResponseArrayOutput)
}

// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
func (o SetupTaskInvokeResponseOutput) StdOutErrPathPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SetupTaskInvokeResponse) string { return v.StdOutErrPathPrefix }).(pulumi.StringOutput)
}

// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
func (o SetupTaskInvokeResponseOutput) StdOutErrPathSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v SetupTaskInvokeResponse) string { return v.StdOutErrPathSuffix }).(pulumi.StringOutput)
}

type SetupTaskInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (SetupTaskInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupTaskInvokeResponse)(nil)).Elem()
}

func (o SetupTaskInvokeResponsePtrOutput) ToSetupTaskInvokeResponsePtrOutput() SetupTaskInvokeResponsePtrOutput {
	return o
}

func (o SetupTaskInvokeResponsePtrOutput) ToSetupTaskInvokeResponsePtrOutputWithContext(ctx context.Context) SetupTaskInvokeResponsePtrOutput {
	return o
}

func (o SetupTaskInvokeResponsePtrOutput) Elem() SetupTaskInvokeResponseOutput {
	return o.ApplyT(func(v *SetupTaskInvokeResponse) SetupTaskInvokeResponse { return *v }).(SetupTaskInvokeResponseOutput)
}

// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
func (o SetupTaskInvokeResponsePtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetupTaskInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// A collection of user defined environment variables to be set for setup task.
func (o SetupTaskInvokeResponsePtrOutput) EnvironmentVariables() EnvironmentVariableInvokeResponseArrayOutput {
	return o.ApplyT(func(v *SetupTaskInvokeResponse) []EnvironmentVariableInvokeResponse {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(EnvironmentVariableInvokeResponseArrayOutput)
}

// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
func (o SetupTaskInvokeResponsePtrOutput) Secrets() EnvironmentVariableWithSecretValueInvokeResponseArrayOutput {
	return o.ApplyT(func(v *SetupTaskInvokeResponse) []EnvironmentVariableWithSecretValueInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(EnvironmentVariableWithSecretValueInvokeResponseArrayOutput)
}

// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
func (o SetupTaskInvokeResponsePtrOutput) StdOutErrPathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetupTaskInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StdOutErrPathPrefix
	}).(pulumi.StringPtrOutput)
}

// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
func (o SetupTaskInvokeResponsePtrOutput) StdOutErrPathSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetupTaskInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StdOutErrPathSuffix
	}).(pulumi.StringPtrOutput)
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTaskResponse struct {
	// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
	CommandLine string `pulumi:"commandLine"`
	// A collection of user defined environment variables to be set for setup task.
	EnvironmentVariables []EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
	Secrets []EnvironmentVariableWithSecretValueResponse `pulumi:"secrets"`
	// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
	StdOutErrPathPrefix string `pulumi:"stdOutErrPathPrefix"`
	// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
	StdOutErrPathSuffix string `pulumi:"stdOutErrPathSuffix"`
}

// SetupTaskResponseInput is an input type that accepts SetupTaskResponseArgs and SetupTaskResponseOutput values.
// You can construct a concrete instance of `SetupTaskResponseInput` via:
//
//          SetupTaskResponseArgs{...}
type SetupTaskResponseInput interface {
	pulumi.Input

	ToSetupTaskResponseOutput() SetupTaskResponseOutput
	ToSetupTaskResponseOutputWithContext(context.Context) SetupTaskResponseOutput
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTaskResponseArgs struct {
	// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
	CommandLine pulumi.StringInput `pulumi:"commandLine"`
	// A collection of user defined environment variables to be set for setup task.
	EnvironmentVariables EnvironmentVariableResponseArrayInput `pulumi:"environmentVariables"`
	// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
	Secrets EnvironmentVariableWithSecretValueResponseArrayInput `pulumi:"secrets"`
	// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
	StdOutErrPathPrefix pulumi.StringInput `pulumi:"stdOutErrPathPrefix"`
	// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
	StdOutErrPathSuffix pulumi.StringInput `pulumi:"stdOutErrPathSuffix"`
}

func (SetupTaskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupTaskResponse)(nil)).Elem()
}

func (i SetupTaskResponseArgs) ToSetupTaskResponseOutput() SetupTaskResponseOutput {
	return i.ToSetupTaskResponseOutputWithContext(context.Background())
}

func (i SetupTaskResponseArgs) ToSetupTaskResponseOutputWithContext(ctx context.Context) SetupTaskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskResponseOutput)
}

func (i SetupTaskResponseArgs) ToSetupTaskResponsePtrOutput() SetupTaskResponsePtrOutput {
	return i.ToSetupTaskResponsePtrOutputWithContext(context.Background())
}

func (i SetupTaskResponseArgs) ToSetupTaskResponsePtrOutputWithContext(ctx context.Context) SetupTaskResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskResponseOutput).ToSetupTaskResponsePtrOutputWithContext(ctx)
}

// SetupTaskResponsePtrInput is an input type that accepts SetupTaskResponseArgs, SetupTaskResponsePtr and SetupTaskResponsePtrOutput values.
// You can construct a concrete instance of `SetupTaskResponsePtrInput` via:
//
//          SetupTaskResponseArgs{...}
//
//  or:
//
//          nil
type SetupTaskResponsePtrInput interface {
	pulumi.Input

	ToSetupTaskResponsePtrOutput() SetupTaskResponsePtrOutput
	ToSetupTaskResponsePtrOutputWithContext(context.Context) SetupTaskResponsePtrOutput
}

type setupTaskResponsePtrType SetupTaskResponseArgs

func SetupTaskResponsePtr(v *SetupTaskResponseArgs) SetupTaskResponsePtrInput {
	return (*setupTaskResponsePtrType)(v)
}

func (*setupTaskResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupTaskResponse)(nil)).Elem()
}

func (i *setupTaskResponsePtrType) ToSetupTaskResponsePtrOutput() SetupTaskResponsePtrOutput {
	return i.ToSetupTaskResponsePtrOutputWithContext(context.Background())
}

func (i *setupTaskResponsePtrType) ToSetupTaskResponsePtrOutputWithContext(ctx context.Context) SetupTaskResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupTaskResponsePtrOutput)
}

// Specifies a setup task which can be used to customize the compute nodes of the cluster.
type SetupTaskResponseOutput struct{ *pulumi.OutputState }

func (SetupTaskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupTaskResponse)(nil)).Elem()
}

func (o SetupTaskResponseOutput) ToSetupTaskResponseOutput() SetupTaskResponseOutput {
	return o
}

func (o SetupTaskResponseOutput) ToSetupTaskResponseOutputWithContext(ctx context.Context) SetupTaskResponseOutput {
	return o
}

func (o SetupTaskResponseOutput) ToSetupTaskResponsePtrOutput() SetupTaskResponsePtrOutput {
	return o.ToSetupTaskResponsePtrOutputWithContext(context.Background())
}

func (o SetupTaskResponseOutput) ToSetupTaskResponsePtrOutputWithContext(ctx context.Context) SetupTaskResponsePtrOutput {
	return o.ApplyT(func(v SetupTaskResponse) *SetupTaskResponse {
		return &v
	}).(SetupTaskResponsePtrOutput)
}

// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
func (o SetupTaskResponseOutput) CommandLine() pulumi.StringOutput {
	return o.ApplyT(func(v SetupTaskResponse) string { return v.CommandLine }).(pulumi.StringOutput)
}

// A collection of user defined environment variables to be set for setup task.
func (o SetupTaskResponseOutput) EnvironmentVariables() EnvironmentVariableResponseArrayOutput {
	return o.ApplyT(func(v SetupTaskResponse) []EnvironmentVariableResponse { return v.EnvironmentVariables }).(EnvironmentVariableResponseArrayOutput)
}

// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
func (o SetupTaskResponseOutput) Secrets() EnvironmentVariableWithSecretValueResponseArrayOutput {
	return o.ApplyT(func(v SetupTaskResponse) []EnvironmentVariableWithSecretValueResponse { return v.Secrets }).(EnvironmentVariableWithSecretValueResponseArrayOutput)
}

// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
func (o SetupTaskResponseOutput) StdOutErrPathPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SetupTaskResponse) string { return v.StdOutErrPathPrefix }).(pulumi.StringOutput)
}

// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
func (o SetupTaskResponseOutput) StdOutErrPathSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v SetupTaskResponse) string { return v.StdOutErrPathSuffix }).(pulumi.StringOutput)
}

type SetupTaskResponsePtrOutput struct{ *pulumi.OutputState }

func (SetupTaskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupTaskResponse)(nil)).Elem()
}

func (o SetupTaskResponsePtrOutput) ToSetupTaskResponsePtrOutput() SetupTaskResponsePtrOutput {
	return o
}

func (o SetupTaskResponsePtrOutput) ToSetupTaskResponsePtrOutputWithContext(ctx context.Context) SetupTaskResponsePtrOutput {
	return o
}

func (o SetupTaskResponsePtrOutput) Elem() SetupTaskResponseOutput {
	return o.ApplyT(func(v *SetupTaskResponse) SetupTaskResponse { return *v }).(SetupTaskResponseOutput)
}

// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
func (o SetupTaskResponsePtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetupTaskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// A collection of user defined environment variables to be set for setup task.
func (o SetupTaskResponsePtrOutput) EnvironmentVariables() EnvironmentVariableResponseArrayOutput {
	return o.ApplyT(func(v *SetupTaskResponse) []EnvironmentVariableResponse {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(EnvironmentVariableResponseArrayOutput)
}

// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
func (o SetupTaskResponsePtrOutput) Secrets() EnvironmentVariableWithSecretValueResponseArrayOutput {
	return o.ApplyT(func(v *SetupTaskResponse) []EnvironmentVariableWithSecretValueResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(EnvironmentVariableWithSecretValueResponseArrayOutput)
}

// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
func (o SetupTaskResponsePtrOutput) StdOutErrPathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetupTaskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StdOutErrPathPrefix
	}).(pulumi.StringPtrOutput)
}

// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
func (o SetupTaskResponsePtrOutput) StdOutErrPathSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetupTaskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StdOutErrPathSuffix
	}).(pulumi.StringPtrOutput)
}

// SSH configuration.
type SshConfiguration struct {
	// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
	PublicIPsToAllow []string `pulumi:"publicIPsToAllow"`
	// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
	UserAccountSettings UserAccountSettings `pulumi:"userAccountSettings"`
}

// SshConfigurationInput is an input type that accepts SshConfigurationArgs and SshConfigurationOutput values.
// You can construct a concrete instance of `SshConfigurationInput` via:
//
//          SshConfigurationArgs{...}
type SshConfigurationInput interface {
	pulumi.Input

	ToSshConfigurationOutput() SshConfigurationOutput
	ToSshConfigurationOutputWithContext(context.Context) SshConfigurationOutput
}

// SSH configuration.
type SshConfigurationArgs struct {
	// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
	PublicIPsToAllow pulumi.StringArrayInput `pulumi:"publicIPsToAllow"`
	// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
	UserAccountSettings UserAccountSettingsInput `pulumi:"userAccountSettings"`
}

func (SshConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfiguration)(nil)).Elem()
}

func (i SshConfigurationArgs) ToSshConfigurationOutput() SshConfigurationOutput {
	return i.ToSshConfigurationOutputWithContext(context.Background())
}

func (i SshConfigurationArgs) ToSshConfigurationOutputWithContext(ctx context.Context) SshConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationOutput)
}

func (i SshConfigurationArgs) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return i.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (i SshConfigurationArgs) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationOutput).ToSshConfigurationPtrOutputWithContext(ctx)
}

// SshConfigurationPtrInput is an input type that accepts SshConfigurationArgs, SshConfigurationPtr and SshConfigurationPtrOutput values.
// You can construct a concrete instance of `SshConfigurationPtrInput` via:
//
//          SshConfigurationArgs{...}
//
//  or:
//
//          nil
type SshConfigurationPtrInput interface {
	pulumi.Input

	ToSshConfigurationPtrOutput() SshConfigurationPtrOutput
	ToSshConfigurationPtrOutputWithContext(context.Context) SshConfigurationPtrOutput
}

type sshConfigurationPtrType SshConfigurationArgs

func SshConfigurationPtr(v *SshConfigurationArgs) SshConfigurationPtrInput {
	return (*sshConfigurationPtrType)(v)
}

func (*sshConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfiguration)(nil)).Elem()
}

func (i *sshConfigurationPtrType) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return i.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (i *sshConfigurationPtrType) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationPtrOutput)
}

// SSH configuration.
type SshConfigurationOutput struct{ *pulumi.OutputState }

func (SshConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfiguration)(nil)).Elem()
}

func (o SshConfigurationOutput) ToSshConfigurationOutput() SshConfigurationOutput {
	return o
}

func (o SshConfigurationOutput) ToSshConfigurationOutputWithContext(ctx context.Context) SshConfigurationOutput {
	return o
}

func (o SshConfigurationOutput) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return o.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (o SshConfigurationOutput) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return o.ApplyT(func(v SshConfiguration) *SshConfiguration {
		return &v
	}).(SshConfigurationPtrOutput)
}

// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
func (o SshConfigurationOutput) PublicIPsToAllow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SshConfiguration) []string { return v.PublicIPsToAllow }).(pulumi.StringArrayOutput)
}

// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
func (o SshConfigurationOutput) UserAccountSettings() UserAccountSettingsOutput {
	return o.ApplyT(func(v SshConfiguration) UserAccountSettings { return v.UserAccountSettings }).(UserAccountSettingsOutput)
}

type SshConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SshConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfiguration)(nil)).Elem()
}

func (o SshConfigurationPtrOutput) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return o
}

func (o SshConfigurationPtrOutput) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return o
}

func (o SshConfigurationPtrOutput) Elem() SshConfigurationOutput {
	return o.ApplyT(func(v *SshConfiguration) SshConfiguration { return *v }).(SshConfigurationOutput)
}

// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
func (o SshConfigurationPtrOutput) PublicIPsToAllow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SshConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.PublicIPsToAllow
	}).(pulumi.StringArrayOutput)
}

// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
func (o SshConfigurationPtrOutput) UserAccountSettings() UserAccountSettingsPtrOutput {
	return o.ApplyT(func(v *SshConfiguration) *UserAccountSettings {
		if v == nil {
			return nil
		}
		return &v.UserAccountSettings
	}).(UserAccountSettingsPtrOutput)
}

// SSH configuration.
type SshConfigurationInvokeResponse struct {
	// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
	PublicIPsToAllow []string `pulumi:"publicIPsToAllow"`
	// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
	UserAccountSettings UserAccountSettingsInvokeResponse `pulumi:"userAccountSettings"`
}

// SshConfigurationInvokeResponseInput is an input type that accepts SshConfigurationInvokeResponseArgs and SshConfigurationInvokeResponseOutput values.
// You can construct a concrete instance of `SshConfigurationInvokeResponseInput` via:
//
//          SshConfigurationInvokeResponseArgs{...}
type SshConfigurationInvokeResponseInput interface {
	pulumi.Input

	ToSshConfigurationInvokeResponseOutput() SshConfigurationInvokeResponseOutput
	ToSshConfigurationInvokeResponseOutputWithContext(context.Context) SshConfigurationInvokeResponseOutput
}

// SSH configuration.
type SshConfigurationInvokeResponseArgs struct {
	// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
	PublicIPsToAllow pulumi.StringArrayInput `pulumi:"publicIPsToAllow"`
	// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
	UserAccountSettings UserAccountSettingsInvokeResponseInput `pulumi:"userAccountSettings"`
}

func (SshConfigurationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfigurationInvokeResponse)(nil)).Elem()
}

func (i SshConfigurationInvokeResponseArgs) ToSshConfigurationInvokeResponseOutput() SshConfigurationInvokeResponseOutput {
	return i.ToSshConfigurationInvokeResponseOutputWithContext(context.Background())
}

func (i SshConfigurationInvokeResponseArgs) ToSshConfigurationInvokeResponseOutputWithContext(ctx context.Context) SshConfigurationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationInvokeResponseOutput)
}

// SSH configuration.
type SshConfigurationInvokeResponseOutput struct{ *pulumi.OutputState }

func (SshConfigurationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfigurationInvokeResponse)(nil)).Elem()
}

func (o SshConfigurationInvokeResponseOutput) ToSshConfigurationInvokeResponseOutput() SshConfigurationInvokeResponseOutput {
	return o
}

func (o SshConfigurationInvokeResponseOutput) ToSshConfigurationInvokeResponseOutputWithContext(ctx context.Context) SshConfigurationInvokeResponseOutput {
	return o
}

// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
func (o SshConfigurationInvokeResponseOutput) PublicIPsToAllow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SshConfigurationInvokeResponse) []string { return v.PublicIPsToAllow }).(pulumi.StringArrayOutput)
}

// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
func (o SshConfigurationInvokeResponseOutput) UserAccountSettings() UserAccountSettingsInvokeResponseOutput {
	return o.ApplyT(func(v SshConfigurationInvokeResponse) UserAccountSettingsInvokeResponse { return v.UserAccountSettings }).(UserAccountSettingsInvokeResponseOutput)
}

// SSH configuration.
type SshConfigurationResponse struct {
	// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
	PublicIPsToAllow []string `pulumi:"publicIPsToAllow"`
	// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
	UserAccountSettings UserAccountSettingsResponse `pulumi:"userAccountSettings"`
}

// SshConfigurationResponseInput is an input type that accepts SshConfigurationResponseArgs and SshConfigurationResponseOutput values.
// You can construct a concrete instance of `SshConfigurationResponseInput` via:
//
//          SshConfigurationResponseArgs{...}
type SshConfigurationResponseInput interface {
	pulumi.Input

	ToSshConfigurationResponseOutput() SshConfigurationResponseOutput
	ToSshConfigurationResponseOutputWithContext(context.Context) SshConfigurationResponseOutput
}

// SSH configuration.
type SshConfigurationResponseArgs struct {
	// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
	PublicIPsToAllow pulumi.StringArrayInput `pulumi:"publicIPsToAllow"`
	// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
	UserAccountSettings UserAccountSettingsResponseInput `pulumi:"userAccountSettings"`
}

func (SshConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfigurationResponse)(nil)).Elem()
}

func (i SshConfigurationResponseArgs) ToSshConfigurationResponseOutput() SshConfigurationResponseOutput {
	return i.ToSshConfigurationResponseOutputWithContext(context.Background())
}

func (i SshConfigurationResponseArgs) ToSshConfigurationResponseOutputWithContext(ctx context.Context) SshConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationResponseOutput)
}

func (i SshConfigurationResponseArgs) ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput {
	return i.ToSshConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i SshConfigurationResponseArgs) ToSshConfigurationResponsePtrOutputWithContext(ctx context.Context) SshConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationResponseOutput).ToSshConfigurationResponsePtrOutputWithContext(ctx)
}

// SshConfigurationResponsePtrInput is an input type that accepts SshConfigurationResponseArgs, SshConfigurationResponsePtr and SshConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `SshConfigurationResponsePtrInput` via:
//
//          SshConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type SshConfigurationResponsePtrInput interface {
	pulumi.Input

	ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput
	ToSshConfigurationResponsePtrOutputWithContext(context.Context) SshConfigurationResponsePtrOutput
}

type sshConfigurationResponsePtrType SshConfigurationResponseArgs

func SshConfigurationResponsePtr(v *SshConfigurationResponseArgs) SshConfigurationResponsePtrInput {
	return (*sshConfigurationResponsePtrType)(v)
}

func (*sshConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfigurationResponse)(nil)).Elem()
}

func (i *sshConfigurationResponsePtrType) ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput {
	return i.ToSshConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *sshConfigurationResponsePtrType) ToSshConfigurationResponsePtrOutputWithContext(ctx context.Context) SshConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationResponsePtrOutput)
}

// SSH configuration.
type SshConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SshConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfigurationResponse)(nil)).Elem()
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponseOutput() SshConfigurationResponseOutput {
	return o
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponseOutputWithContext(ctx context.Context) SshConfigurationResponseOutput {
	return o
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput {
	return o.ToSshConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponsePtrOutputWithContext(ctx context.Context) SshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SshConfigurationResponse) *SshConfigurationResponse {
		return &v
	}).(SshConfigurationResponsePtrOutput)
}

// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
func (o SshConfigurationResponseOutput) PublicIPsToAllow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SshConfigurationResponse) []string { return v.PublicIPsToAllow }).(pulumi.StringArrayOutput)
}

// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
func (o SshConfigurationResponseOutput) UserAccountSettings() UserAccountSettingsResponseOutput {
	return o.ApplyT(func(v SshConfigurationResponse) UserAccountSettingsResponse { return v.UserAccountSettings }).(UserAccountSettingsResponseOutput)
}

type SshConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SshConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfigurationResponse)(nil)).Elem()
}

func (o SshConfigurationResponsePtrOutput) ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput {
	return o
}

func (o SshConfigurationResponsePtrOutput) ToSshConfigurationResponsePtrOutputWithContext(ctx context.Context) SshConfigurationResponsePtrOutput {
	return o
}

func (o SshConfigurationResponsePtrOutput) Elem() SshConfigurationResponseOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) SshConfigurationResponse { return *v }).(SshConfigurationResponseOutput)
}

// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
func (o SshConfigurationResponsePtrOutput) PublicIPsToAllow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.PublicIPsToAllow
	}).(pulumi.StringArrayOutput)
}

// Settings for administrator user account to be created on a node. The account can be used to establish SSH connection to the node.
func (o SshConfigurationResponsePtrOutput) UserAccountSettings() UserAccountSettingsResponsePtrOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) *UserAccountSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.UserAccountSettings
	}).(UserAccountSettingsResponsePtrOutput)
}

// TensorFlow job settings.
type TensorFlowSettings struct {
	// Command line arguments that need to be passed to the python script for the master task.
	MasterCommandLineArgs *string `pulumi:"masterCommandLineArgs"`
	// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
	ParameterServerCommandLineArgs *string `pulumi:"parameterServerCommandLineArgs"`
	// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
	// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
	WorkerCommandLineArgs *string `pulumi:"workerCommandLineArgs"`
	// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
	WorkerCount *int `pulumi:"workerCount"`
}

// TensorFlowSettingsInput is an input type that accepts TensorFlowSettingsArgs and TensorFlowSettingsOutput values.
// You can construct a concrete instance of `TensorFlowSettingsInput` via:
//
//          TensorFlowSettingsArgs{...}
type TensorFlowSettingsInput interface {
	pulumi.Input

	ToTensorFlowSettingsOutput() TensorFlowSettingsOutput
	ToTensorFlowSettingsOutputWithContext(context.Context) TensorFlowSettingsOutput
}

// TensorFlow job settings.
type TensorFlowSettingsArgs struct {
	// Command line arguments that need to be passed to the python script for the master task.
	MasterCommandLineArgs pulumi.StringPtrInput `pulumi:"masterCommandLineArgs"`
	// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
	ParameterServerCommandLineArgs pulumi.StringPtrInput `pulumi:"parameterServerCommandLineArgs"`
	// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
	ParameterServerCount pulumi.IntPtrInput `pulumi:"parameterServerCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
	// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
	WorkerCommandLineArgs pulumi.StringPtrInput `pulumi:"workerCommandLineArgs"`
	// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
	WorkerCount pulumi.IntPtrInput `pulumi:"workerCount"`
}

func (TensorFlowSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowSettings)(nil)).Elem()
}

func (i TensorFlowSettingsArgs) ToTensorFlowSettingsOutput() TensorFlowSettingsOutput {
	return i.ToTensorFlowSettingsOutputWithContext(context.Background())
}

func (i TensorFlowSettingsArgs) ToTensorFlowSettingsOutputWithContext(ctx context.Context) TensorFlowSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowSettingsOutput)
}

func (i TensorFlowSettingsArgs) ToTensorFlowSettingsPtrOutput() TensorFlowSettingsPtrOutput {
	return i.ToTensorFlowSettingsPtrOutputWithContext(context.Background())
}

func (i TensorFlowSettingsArgs) ToTensorFlowSettingsPtrOutputWithContext(ctx context.Context) TensorFlowSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowSettingsOutput).ToTensorFlowSettingsPtrOutputWithContext(ctx)
}

// TensorFlowSettingsPtrInput is an input type that accepts TensorFlowSettingsArgs, TensorFlowSettingsPtr and TensorFlowSettingsPtrOutput values.
// You can construct a concrete instance of `TensorFlowSettingsPtrInput` via:
//
//          TensorFlowSettingsArgs{...}
//
//  or:
//
//          nil
type TensorFlowSettingsPtrInput interface {
	pulumi.Input

	ToTensorFlowSettingsPtrOutput() TensorFlowSettingsPtrOutput
	ToTensorFlowSettingsPtrOutputWithContext(context.Context) TensorFlowSettingsPtrOutput
}

type tensorFlowSettingsPtrType TensorFlowSettingsArgs

func TensorFlowSettingsPtr(v *TensorFlowSettingsArgs) TensorFlowSettingsPtrInput {
	return (*tensorFlowSettingsPtrType)(v)
}

func (*tensorFlowSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlowSettings)(nil)).Elem()
}

func (i *tensorFlowSettingsPtrType) ToTensorFlowSettingsPtrOutput() TensorFlowSettingsPtrOutput {
	return i.ToTensorFlowSettingsPtrOutputWithContext(context.Background())
}

func (i *tensorFlowSettingsPtrType) ToTensorFlowSettingsPtrOutputWithContext(ctx context.Context) TensorFlowSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowSettingsPtrOutput)
}

// TensorFlow job settings.
type TensorFlowSettingsOutput struct{ *pulumi.OutputState }

func (TensorFlowSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowSettings)(nil)).Elem()
}

func (o TensorFlowSettingsOutput) ToTensorFlowSettingsOutput() TensorFlowSettingsOutput {
	return o
}

func (o TensorFlowSettingsOutput) ToTensorFlowSettingsOutputWithContext(ctx context.Context) TensorFlowSettingsOutput {
	return o
}

func (o TensorFlowSettingsOutput) ToTensorFlowSettingsPtrOutput() TensorFlowSettingsPtrOutput {
	return o.ToTensorFlowSettingsPtrOutputWithContext(context.Background())
}

func (o TensorFlowSettingsOutput) ToTensorFlowSettingsPtrOutputWithContext(ctx context.Context) TensorFlowSettingsPtrOutput {
	return o.ApplyT(func(v TensorFlowSettings) *TensorFlowSettings {
		return &v
	}).(TensorFlowSettingsPtrOutput)
}

// Command line arguments that need to be passed to the python script for the master task.
func (o TensorFlowSettingsOutput) MasterCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettings) *string { return v.MasterCommandLineArgs }).(pulumi.StringPtrOutput)
}

// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
func (o TensorFlowSettingsOutput) ParameterServerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettings) *string { return v.ParameterServerCommandLineArgs }).(pulumi.StringPtrOutput)
}

// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowSettings) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o TensorFlowSettingsOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettings) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o TensorFlowSettingsOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlowSettings) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
func (o TensorFlowSettingsOutput) WorkerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettings) *string { return v.WorkerCommandLineArgs }).(pulumi.StringPtrOutput)
}

// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowSettings) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type TensorFlowSettingsPtrOutput struct{ *pulumi.OutputState }

func (TensorFlowSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlowSettings)(nil)).Elem()
}

func (o TensorFlowSettingsPtrOutput) ToTensorFlowSettingsPtrOutput() TensorFlowSettingsPtrOutput {
	return o
}

func (o TensorFlowSettingsPtrOutput) ToTensorFlowSettingsPtrOutputWithContext(ctx context.Context) TensorFlowSettingsPtrOutput {
	return o
}

func (o TensorFlowSettingsPtrOutput) Elem() TensorFlowSettingsOutput {
	return o.ApplyT(func(v *TensorFlowSettings) TensorFlowSettings { return *v }).(TensorFlowSettingsOutput)
}

// Command line arguments that need to be passed to the python script for the master task.
func (o TensorFlowSettingsPtrOutput) MasterCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettings) *string {
		if v == nil {
			return nil
		}
		return v.MasterCommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
func (o TensorFlowSettingsPtrOutput) ParameterServerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettings) *string {
		if v == nil {
			return nil
		}
		return v.ParameterServerCommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsPtrOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettings) *int {
		if v == nil {
			return nil
		}
		return v.ParameterServerCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o TensorFlowSettingsPtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettings) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o TensorFlowSettingsPtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettings) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
func (o TensorFlowSettingsPtrOutput) WorkerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettings) *string {
		if v == nil {
			return nil
		}
		return v.WorkerCommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsPtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettings) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// TensorFlow job settings.
type TensorFlowSettingsInvokeResponse struct {
	// Command line arguments that need to be passed to the python script for the master task.
	MasterCommandLineArgs *string `pulumi:"masterCommandLineArgs"`
	// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
	ParameterServerCommandLineArgs *string `pulumi:"parameterServerCommandLineArgs"`
	// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
	// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
	WorkerCommandLineArgs *string `pulumi:"workerCommandLineArgs"`
	// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
	WorkerCount *int `pulumi:"workerCount"`
}

// TensorFlowSettingsInvokeResponseInput is an input type that accepts TensorFlowSettingsInvokeResponseArgs and TensorFlowSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `TensorFlowSettingsInvokeResponseInput` via:
//
//          TensorFlowSettingsInvokeResponseArgs{...}
type TensorFlowSettingsInvokeResponseInput interface {
	pulumi.Input

	ToTensorFlowSettingsInvokeResponseOutput() TensorFlowSettingsInvokeResponseOutput
	ToTensorFlowSettingsInvokeResponseOutputWithContext(context.Context) TensorFlowSettingsInvokeResponseOutput
}

// TensorFlow job settings.
type TensorFlowSettingsInvokeResponseArgs struct {
	// Command line arguments that need to be passed to the python script for the master task.
	MasterCommandLineArgs pulumi.StringPtrInput `pulumi:"masterCommandLineArgs"`
	// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
	ParameterServerCommandLineArgs pulumi.StringPtrInput `pulumi:"parameterServerCommandLineArgs"`
	// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
	ParameterServerCount pulumi.IntPtrInput `pulumi:"parameterServerCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
	// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
	WorkerCommandLineArgs pulumi.StringPtrInput `pulumi:"workerCommandLineArgs"`
	// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
	WorkerCount pulumi.IntPtrInput `pulumi:"workerCount"`
}

func (TensorFlowSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowSettingsInvokeResponse)(nil)).Elem()
}

func (i TensorFlowSettingsInvokeResponseArgs) ToTensorFlowSettingsInvokeResponseOutput() TensorFlowSettingsInvokeResponseOutput {
	return i.ToTensorFlowSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i TensorFlowSettingsInvokeResponseArgs) ToTensorFlowSettingsInvokeResponseOutputWithContext(ctx context.Context) TensorFlowSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowSettingsInvokeResponseOutput)
}

// TensorFlow job settings.
type TensorFlowSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (TensorFlowSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowSettingsInvokeResponse)(nil)).Elem()
}

func (o TensorFlowSettingsInvokeResponseOutput) ToTensorFlowSettingsInvokeResponseOutput() TensorFlowSettingsInvokeResponseOutput {
	return o
}

func (o TensorFlowSettingsInvokeResponseOutput) ToTensorFlowSettingsInvokeResponseOutputWithContext(ctx context.Context) TensorFlowSettingsInvokeResponseOutput {
	return o
}

// Command line arguments that need to be passed to the python script for the master task.
func (o TensorFlowSettingsInvokeResponseOutput) MasterCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsInvokeResponse) *string { return v.MasterCommandLineArgs }).(pulumi.StringPtrOutput)
}

// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
func (o TensorFlowSettingsInvokeResponseOutput) ParameterServerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsInvokeResponse) *string { return v.ParameterServerCommandLineArgs }).(pulumi.StringPtrOutput)
}

// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsInvokeResponseOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsInvokeResponse) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o TensorFlowSettingsInvokeResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsInvokeResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o TensorFlowSettingsInvokeResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlowSettingsInvokeResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
func (o TensorFlowSettingsInvokeResponseOutput) WorkerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsInvokeResponse) *string { return v.WorkerCommandLineArgs }).(pulumi.StringPtrOutput)
}

// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsInvokeResponseOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsInvokeResponse) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

// TensorFlow job settings.
type TensorFlowSettingsResponse struct {
	// Command line arguments that need to be passed to the python script for the master task.
	MasterCommandLineArgs *string `pulumi:"masterCommandLineArgs"`
	// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
	ParameterServerCommandLineArgs *string `pulumi:"parameterServerCommandLineArgs"`
	// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath *string `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath string `pulumi:"pythonScriptFilePath"`
	// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
	WorkerCommandLineArgs *string `pulumi:"workerCommandLineArgs"`
	// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
	WorkerCount *int `pulumi:"workerCount"`
}

// TensorFlowSettingsResponseInput is an input type that accepts TensorFlowSettingsResponseArgs and TensorFlowSettingsResponseOutput values.
// You can construct a concrete instance of `TensorFlowSettingsResponseInput` via:
//
//          TensorFlowSettingsResponseArgs{...}
type TensorFlowSettingsResponseInput interface {
	pulumi.Input

	ToTensorFlowSettingsResponseOutput() TensorFlowSettingsResponseOutput
	ToTensorFlowSettingsResponseOutputWithContext(context.Context) TensorFlowSettingsResponseOutput
}

// TensorFlow job settings.
type TensorFlowSettingsResponseArgs struct {
	// Command line arguments that need to be passed to the python script for the master task.
	MasterCommandLineArgs pulumi.StringPtrInput `pulumi:"masterCommandLineArgs"`
	// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
	ParameterServerCommandLineArgs pulumi.StringPtrInput `pulumi:"parameterServerCommandLineArgs"`
	// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
	ParameterServerCount pulumi.IntPtrInput `pulumi:"parameterServerCount"`
	// The path to the Python interpreter.
	PythonInterpreterPath pulumi.StringPtrInput `pulumi:"pythonInterpreterPath"`
	// The python script to execute.
	PythonScriptFilePath pulumi.StringInput `pulumi:"pythonScriptFilePath"`
	// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
	WorkerCommandLineArgs pulumi.StringPtrInput `pulumi:"workerCommandLineArgs"`
	// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
	WorkerCount pulumi.IntPtrInput `pulumi:"workerCount"`
}

func (TensorFlowSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowSettingsResponse)(nil)).Elem()
}

func (i TensorFlowSettingsResponseArgs) ToTensorFlowSettingsResponseOutput() TensorFlowSettingsResponseOutput {
	return i.ToTensorFlowSettingsResponseOutputWithContext(context.Background())
}

func (i TensorFlowSettingsResponseArgs) ToTensorFlowSettingsResponseOutputWithContext(ctx context.Context) TensorFlowSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowSettingsResponseOutput)
}

func (i TensorFlowSettingsResponseArgs) ToTensorFlowSettingsResponsePtrOutput() TensorFlowSettingsResponsePtrOutput {
	return i.ToTensorFlowSettingsResponsePtrOutputWithContext(context.Background())
}

func (i TensorFlowSettingsResponseArgs) ToTensorFlowSettingsResponsePtrOutputWithContext(ctx context.Context) TensorFlowSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowSettingsResponseOutput).ToTensorFlowSettingsResponsePtrOutputWithContext(ctx)
}

// TensorFlowSettingsResponsePtrInput is an input type that accepts TensorFlowSettingsResponseArgs, TensorFlowSettingsResponsePtr and TensorFlowSettingsResponsePtrOutput values.
// You can construct a concrete instance of `TensorFlowSettingsResponsePtrInput` via:
//
//          TensorFlowSettingsResponseArgs{...}
//
//  or:
//
//          nil
type TensorFlowSettingsResponsePtrInput interface {
	pulumi.Input

	ToTensorFlowSettingsResponsePtrOutput() TensorFlowSettingsResponsePtrOutput
	ToTensorFlowSettingsResponsePtrOutputWithContext(context.Context) TensorFlowSettingsResponsePtrOutput
}

type tensorFlowSettingsResponsePtrType TensorFlowSettingsResponseArgs

func TensorFlowSettingsResponsePtr(v *TensorFlowSettingsResponseArgs) TensorFlowSettingsResponsePtrInput {
	return (*tensorFlowSettingsResponsePtrType)(v)
}

func (*tensorFlowSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlowSettingsResponse)(nil)).Elem()
}

func (i *tensorFlowSettingsResponsePtrType) ToTensorFlowSettingsResponsePtrOutput() TensorFlowSettingsResponsePtrOutput {
	return i.ToTensorFlowSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *tensorFlowSettingsResponsePtrType) ToTensorFlowSettingsResponsePtrOutputWithContext(ctx context.Context) TensorFlowSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowSettingsResponsePtrOutput)
}

// TensorFlow job settings.
type TensorFlowSettingsResponseOutput struct{ *pulumi.OutputState }

func (TensorFlowSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowSettingsResponse)(nil)).Elem()
}

func (o TensorFlowSettingsResponseOutput) ToTensorFlowSettingsResponseOutput() TensorFlowSettingsResponseOutput {
	return o
}

func (o TensorFlowSettingsResponseOutput) ToTensorFlowSettingsResponseOutputWithContext(ctx context.Context) TensorFlowSettingsResponseOutput {
	return o
}

func (o TensorFlowSettingsResponseOutput) ToTensorFlowSettingsResponsePtrOutput() TensorFlowSettingsResponsePtrOutput {
	return o.ToTensorFlowSettingsResponsePtrOutputWithContext(context.Background())
}

func (o TensorFlowSettingsResponseOutput) ToTensorFlowSettingsResponsePtrOutputWithContext(ctx context.Context) TensorFlowSettingsResponsePtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsResponse) *TensorFlowSettingsResponse {
		return &v
	}).(TensorFlowSettingsResponsePtrOutput)
}

// Command line arguments that need to be passed to the python script for the master task.
func (o TensorFlowSettingsResponseOutput) MasterCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsResponse) *string { return v.MasterCommandLineArgs }).(pulumi.StringPtrOutput)
}

// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
func (o TensorFlowSettingsResponseOutput) ParameterServerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsResponse) *string { return v.ParameterServerCommandLineArgs }).(pulumi.StringPtrOutput)
}

// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsResponseOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsResponse) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o TensorFlowSettingsResponseOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsResponse) *string { return v.PythonInterpreterPath }).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o TensorFlowSettingsResponseOutput) PythonScriptFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlowSettingsResponse) string { return v.PythonScriptFilePath }).(pulumi.StringOutput)
}

// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
func (o TensorFlowSettingsResponseOutput) WorkerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsResponse) *string { return v.WorkerCommandLineArgs }).(pulumi.StringPtrOutput)
}

// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsResponseOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowSettingsResponse) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type TensorFlowSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TensorFlowSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlowSettingsResponse)(nil)).Elem()
}

func (o TensorFlowSettingsResponsePtrOutput) ToTensorFlowSettingsResponsePtrOutput() TensorFlowSettingsResponsePtrOutput {
	return o
}

func (o TensorFlowSettingsResponsePtrOutput) ToTensorFlowSettingsResponsePtrOutputWithContext(ctx context.Context) TensorFlowSettingsResponsePtrOutput {
	return o
}

func (o TensorFlowSettingsResponsePtrOutput) Elem() TensorFlowSettingsResponseOutput {
	return o.ApplyT(func(v *TensorFlowSettingsResponse) TensorFlowSettingsResponse { return *v }).(TensorFlowSettingsResponseOutput)
}

// Command line arguments that need to be passed to the python script for the master task.
func (o TensorFlowSettingsResponsePtrOutput) MasterCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MasterCommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
func (o TensorFlowSettingsResponsePtrOutput) ParameterServerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ParameterServerCommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsResponsePtrOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ParameterServerCount
	}).(pulumi.IntPtrOutput)
}

// The path to the Python interpreter.
func (o TensorFlowSettingsResponsePtrOutput) PythonInterpreterPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PythonInterpreterPath
	}).(pulumi.StringPtrOutput)
}

// The python script to execute.
func (o TensorFlowSettingsResponsePtrOutput) PythonScriptFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PythonScriptFilePath
	}).(pulumi.StringPtrOutput)
}

// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
func (o TensorFlowSettingsResponsePtrOutput) WorkerCommandLineArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.WorkerCommandLineArgs
	}).(pulumi.StringPtrOutput)
}

// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
func (o TensorFlowSettingsResponsePtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReference struct {
	// Mount command line. Note, Batch AI will append mount path to the command on its own.
	MountCommand string `pulumi:"mountCommand"`
	// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// UnmanagedFileSystemReferenceInput is an input type that accepts UnmanagedFileSystemReferenceArgs and UnmanagedFileSystemReferenceOutput values.
// You can construct a concrete instance of `UnmanagedFileSystemReferenceInput` via:
//
//          UnmanagedFileSystemReferenceArgs{...}
type UnmanagedFileSystemReferenceInput interface {
	pulumi.Input

	ToUnmanagedFileSystemReferenceOutput() UnmanagedFileSystemReferenceOutput
	ToUnmanagedFileSystemReferenceOutputWithContext(context.Context) UnmanagedFileSystemReferenceOutput
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReferenceArgs struct {
	// Mount command line. Note, Batch AI will append mount path to the command on its own.
	MountCommand pulumi.StringInput `pulumi:"mountCommand"`
	// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (UnmanagedFileSystemReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnmanagedFileSystemReference)(nil)).Elem()
}

func (i UnmanagedFileSystemReferenceArgs) ToUnmanagedFileSystemReferenceOutput() UnmanagedFileSystemReferenceOutput {
	return i.ToUnmanagedFileSystemReferenceOutputWithContext(context.Background())
}

func (i UnmanagedFileSystemReferenceArgs) ToUnmanagedFileSystemReferenceOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnmanagedFileSystemReferenceOutput)
}

// UnmanagedFileSystemReferenceArrayInput is an input type that accepts UnmanagedFileSystemReferenceArray and UnmanagedFileSystemReferenceArrayOutput values.
// You can construct a concrete instance of `UnmanagedFileSystemReferenceArrayInput` via:
//
//          UnmanagedFileSystemReferenceArray{ UnmanagedFileSystemReferenceArgs{...} }
type UnmanagedFileSystemReferenceArrayInput interface {
	pulumi.Input

	ToUnmanagedFileSystemReferenceArrayOutput() UnmanagedFileSystemReferenceArrayOutput
	ToUnmanagedFileSystemReferenceArrayOutputWithContext(context.Context) UnmanagedFileSystemReferenceArrayOutput
}

type UnmanagedFileSystemReferenceArray []UnmanagedFileSystemReferenceInput

func (UnmanagedFileSystemReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnmanagedFileSystemReference)(nil)).Elem()
}

func (i UnmanagedFileSystemReferenceArray) ToUnmanagedFileSystemReferenceArrayOutput() UnmanagedFileSystemReferenceArrayOutput {
	return i.ToUnmanagedFileSystemReferenceArrayOutputWithContext(context.Background())
}

func (i UnmanagedFileSystemReferenceArray) ToUnmanagedFileSystemReferenceArrayOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnmanagedFileSystemReferenceArrayOutput)
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReferenceOutput struct{ *pulumi.OutputState }

func (UnmanagedFileSystemReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnmanagedFileSystemReference)(nil)).Elem()
}

func (o UnmanagedFileSystemReferenceOutput) ToUnmanagedFileSystemReferenceOutput() UnmanagedFileSystemReferenceOutput {
	return o
}

func (o UnmanagedFileSystemReferenceOutput) ToUnmanagedFileSystemReferenceOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceOutput {
	return o
}

// Mount command line. Note, Batch AI will append mount path to the command on its own.
func (o UnmanagedFileSystemReferenceOutput) MountCommand() pulumi.StringOutput {
	return o.ApplyT(func(v UnmanagedFileSystemReference) string { return v.MountCommand }).(pulumi.StringOutput)
}

// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o UnmanagedFileSystemReferenceOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v UnmanagedFileSystemReference) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type UnmanagedFileSystemReferenceArrayOutput struct{ *pulumi.OutputState }

func (UnmanagedFileSystemReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnmanagedFileSystemReference)(nil)).Elem()
}

func (o UnmanagedFileSystemReferenceArrayOutput) ToUnmanagedFileSystemReferenceArrayOutput() UnmanagedFileSystemReferenceArrayOutput {
	return o
}

func (o UnmanagedFileSystemReferenceArrayOutput) ToUnmanagedFileSystemReferenceArrayOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceArrayOutput {
	return o
}

func (o UnmanagedFileSystemReferenceArrayOutput) Index(i pulumi.IntInput) UnmanagedFileSystemReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UnmanagedFileSystemReference {
		return vs[0].([]UnmanagedFileSystemReference)[vs[1].(int)]
	}).(UnmanagedFileSystemReferenceOutput)
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReferenceInvokeResponse struct {
	// Mount command line. Note, Batch AI will append mount path to the command on its own.
	MountCommand string `pulumi:"mountCommand"`
	// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// UnmanagedFileSystemReferenceInvokeResponseInput is an input type that accepts UnmanagedFileSystemReferenceInvokeResponseArgs and UnmanagedFileSystemReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `UnmanagedFileSystemReferenceInvokeResponseInput` via:
//
//          UnmanagedFileSystemReferenceInvokeResponseArgs{...}
type UnmanagedFileSystemReferenceInvokeResponseInput interface {
	pulumi.Input

	ToUnmanagedFileSystemReferenceInvokeResponseOutput() UnmanagedFileSystemReferenceInvokeResponseOutput
	ToUnmanagedFileSystemReferenceInvokeResponseOutputWithContext(context.Context) UnmanagedFileSystemReferenceInvokeResponseOutput
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReferenceInvokeResponseArgs struct {
	// Mount command line. Note, Batch AI will append mount path to the command on its own.
	MountCommand pulumi.StringInput `pulumi:"mountCommand"`
	// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (UnmanagedFileSystemReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnmanagedFileSystemReferenceInvokeResponse)(nil)).Elem()
}

func (i UnmanagedFileSystemReferenceInvokeResponseArgs) ToUnmanagedFileSystemReferenceInvokeResponseOutput() UnmanagedFileSystemReferenceInvokeResponseOutput {
	return i.ToUnmanagedFileSystemReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i UnmanagedFileSystemReferenceInvokeResponseArgs) ToUnmanagedFileSystemReferenceInvokeResponseOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnmanagedFileSystemReferenceInvokeResponseOutput)
}

// UnmanagedFileSystemReferenceInvokeResponseArrayInput is an input type that accepts UnmanagedFileSystemReferenceInvokeResponseArray and UnmanagedFileSystemReferenceInvokeResponseArrayOutput values.
// You can construct a concrete instance of `UnmanagedFileSystemReferenceInvokeResponseArrayInput` via:
//
//          UnmanagedFileSystemReferenceInvokeResponseArray{ UnmanagedFileSystemReferenceInvokeResponseArgs{...} }
type UnmanagedFileSystemReferenceInvokeResponseArrayInput interface {
	pulumi.Input

	ToUnmanagedFileSystemReferenceInvokeResponseArrayOutput() UnmanagedFileSystemReferenceInvokeResponseArrayOutput
	ToUnmanagedFileSystemReferenceInvokeResponseArrayOutputWithContext(context.Context) UnmanagedFileSystemReferenceInvokeResponseArrayOutput
}

type UnmanagedFileSystemReferenceInvokeResponseArray []UnmanagedFileSystemReferenceInvokeResponseInput

func (UnmanagedFileSystemReferenceInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnmanagedFileSystemReferenceInvokeResponse)(nil)).Elem()
}

func (i UnmanagedFileSystemReferenceInvokeResponseArray) ToUnmanagedFileSystemReferenceInvokeResponseArrayOutput() UnmanagedFileSystemReferenceInvokeResponseArrayOutput {
	return i.ToUnmanagedFileSystemReferenceInvokeResponseArrayOutputWithContext(context.Background())
}

func (i UnmanagedFileSystemReferenceInvokeResponseArray) ToUnmanagedFileSystemReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnmanagedFileSystemReferenceInvokeResponseArrayOutput)
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (UnmanagedFileSystemReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnmanagedFileSystemReferenceInvokeResponse)(nil)).Elem()
}

func (o UnmanagedFileSystemReferenceInvokeResponseOutput) ToUnmanagedFileSystemReferenceInvokeResponseOutput() UnmanagedFileSystemReferenceInvokeResponseOutput {
	return o
}

func (o UnmanagedFileSystemReferenceInvokeResponseOutput) ToUnmanagedFileSystemReferenceInvokeResponseOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceInvokeResponseOutput {
	return o
}

// Mount command line. Note, Batch AI will append mount path to the command on its own.
func (o UnmanagedFileSystemReferenceInvokeResponseOutput) MountCommand() pulumi.StringOutput {
	return o.ApplyT(func(v UnmanagedFileSystemReferenceInvokeResponse) string { return v.MountCommand }).(pulumi.StringOutput)
}

// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o UnmanagedFileSystemReferenceInvokeResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v UnmanagedFileSystemReferenceInvokeResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type UnmanagedFileSystemReferenceInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (UnmanagedFileSystemReferenceInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnmanagedFileSystemReferenceInvokeResponse)(nil)).Elem()
}

func (o UnmanagedFileSystemReferenceInvokeResponseArrayOutput) ToUnmanagedFileSystemReferenceInvokeResponseArrayOutput() UnmanagedFileSystemReferenceInvokeResponseArrayOutput {
	return o
}

func (o UnmanagedFileSystemReferenceInvokeResponseArrayOutput) ToUnmanagedFileSystemReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceInvokeResponseArrayOutput {
	return o
}

func (o UnmanagedFileSystemReferenceInvokeResponseArrayOutput) Index(i pulumi.IntInput) UnmanagedFileSystemReferenceInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UnmanagedFileSystemReferenceInvokeResponse {
		return vs[0].([]UnmanagedFileSystemReferenceInvokeResponse)[vs[1].(int)]
	}).(UnmanagedFileSystemReferenceInvokeResponseOutput)
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReferenceResponse struct {
	// Mount command line. Note, Batch AI will append mount path to the command on its own.
	MountCommand string `pulumi:"mountCommand"`
	// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// UnmanagedFileSystemReferenceResponseInput is an input type that accepts UnmanagedFileSystemReferenceResponseArgs and UnmanagedFileSystemReferenceResponseOutput values.
// You can construct a concrete instance of `UnmanagedFileSystemReferenceResponseInput` via:
//
//          UnmanagedFileSystemReferenceResponseArgs{...}
type UnmanagedFileSystemReferenceResponseInput interface {
	pulumi.Input

	ToUnmanagedFileSystemReferenceResponseOutput() UnmanagedFileSystemReferenceResponseOutput
	ToUnmanagedFileSystemReferenceResponseOutputWithContext(context.Context) UnmanagedFileSystemReferenceResponseOutput
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReferenceResponseArgs struct {
	// Mount command line. Note, Batch AI will append mount path to the command on its own.
	MountCommand pulumi.StringInput `pulumi:"mountCommand"`
	// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (UnmanagedFileSystemReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnmanagedFileSystemReferenceResponse)(nil)).Elem()
}

func (i UnmanagedFileSystemReferenceResponseArgs) ToUnmanagedFileSystemReferenceResponseOutput() UnmanagedFileSystemReferenceResponseOutput {
	return i.ToUnmanagedFileSystemReferenceResponseOutputWithContext(context.Background())
}

func (i UnmanagedFileSystemReferenceResponseArgs) ToUnmanagedFileSystemReferenceResponseOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnmanagedFileSystemReferenceResponseOutput)
}

// UnmanagedFileSystemReferenceResponseArrayInput is an input type that accepts UnmanagedFileSystemReferenceResponseArray and UnmanagedFileSystemReferenceResponseArrayOutput values.
// You can construct a concrete instance of `UnmanagedFileSystemReferenceResponseArrayInput` via:
//
//          UnmanagedFileSystemReferenceResponseArray{ UnmanagedFileSystemReferenceResponseArgs{...} }
type UnmanagedFileSystemReferenceResponseArrayInput interface {
	pulumi.Input

	ToUnmanagedFileSystemReferenceResponseArrayOutput() UnmanagedFileSystemReferenceResponseArrayOutput
	ToUnmanagedFileSystemReferenceResponseArrayOutputWithContext(context.Context) UnmanagedFileSystemReferenceResponseArrayOutput
}

type UnmanagedFileSystemReferenceResponseArray []UnmanagedFileSystemReferenceResponseInput

func (UnmanagedFileSystemReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnmanagedFileSystemReferenceResponse)(nil)).Elem()
}

func (i UnmanagedFileSystemReferenceResponseArray) ToUnmanagedFileSystemReferenceResponseArrayOutput() UnmanagedFileSystemReferenceResponseArrayOutput {
	return i.ToUnmanagedFileSystemReferenceResponseArrayOutputWithContext(context.Background())
}

func (i UnmanagedFileSystemReferenceResponseArray) ToUnmanagedFileSystemReferenceResponseArrayOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnmanagedFileSystemReferenceResponseArrayOutput)
}

// Unmanaged file system mounting configuration.
type UnmanagedFileSystemReferenceResponseOutput struct{ *pulumi.OutputState }

func (UnmanagedFileSystemReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnmanagedFileSystemReferenceResponse)(nil)).Elem()
}

func (o UnmanagedFileSystemReferenceResponseOutput) ToUnmanagedFileSystemReferenceResponseOutput() UnmanagedFileSystemReferenceResponseOutput {
	return o
}

func (o UnmanagedFileSystemReferenceResponseOutput) ToUnmanagedFileSystemReferenceResponseOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceResponseOutput {
	return o
}

// Mount command line. Note, Batch AI will append mount path to the command on its own.
func (o UnmanagedFileSystemReferenceResponseOutput) MountCommand() pulumi.StringOutput {
	return o.ApplyT(func(v UnmanagedFileSystemReferenceResponse) string { return v.MountCommand }).(pulumi.StringOutput)
}

// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
func (o UnmanagedFileSystemReferenceResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v UnmanagedFileSystemReferenceResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type UnmanagedFileSystemReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (UnmanagedFileSystemReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UnmanagedFileSystemReferenceResponse)(nil)).Elem()
}

func (o UnmanagedFileSystemReferenceResponseArrayOutput) ToUnmanagedFileSystemReferenceResponseArrayOutput() UnmanagedFileSystemReferenceResponseArrayOutput {
	return o
}

func (o UnmanagedFileSystemReferenceResponseArrayOutput) ToUnmanagedFileSystemReferenceResponseArrayOutputWithContext(ctx context.Context) UnmanagedFileSystemReferenceResponseArrayOutput {
	return o
}

func (o UnmanagedFileSystemReferenceResponseArrayOutput) Index(i pulumi.IntInput) UnmanagedFileSystemReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UnmanagedFileSystemReferenceResponse {
		return vs[0].([]UnmanagedFileSystemReferenceResponse)[vs[1].(int)]
	}).(UnmanagedFileSystemReferenceResponseOutput)
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettings struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName string `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey *string `pulumi:"adminUserSshPublicKey"`
}

// UserAccountSettingsInput is an input type that accepts UserAccountSettingsArgs and UserAccountSettingsOutput values.
// You can construct a concrete instance of `UserAccountSettingsInput` via:
//
//          UserAccountSettingsArgs{...}
type UserAccountSettingsInput interface {
	pulumi.Input

	ToUserAccountSettingsOutput() UserAccountSettingsOutput
	ToUserAccountSettingsOutputWithContext(context.Context) UserAccountSettingsOutput
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettingsArgs struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName pulumi.StringInput `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword pulumi.StringPtrInput `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey pulumi.StringPtrInput `pulumi:"adminUserSshPublicKey"`
}

func (UserAccountSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountSettings)(nil)).Elem()
}

func (i UserAccountSettingsArgs) ToUserAccountSettingsOutput() UserAccountSettingsOutput {
	return i.ToUserAccountSettingsOutputWithContext(context.Background())
}

func (i UserAccountSettingsArgs) ToUserAccountSettingsOutputWithContext(ctx context.Context) UserAccountSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountSettingsOutput)
}

func (i UserAccountSettingsArgs) ToUserAccountSettingsPtrOutput() UserAccountSettingsPtrOutput {
	return i.ToUserAccountSettingsPtrOutputWithContext(context.Background())
}

func (i UserAccountSettingsArgs) ToUserAccountSettingsPtrOutputWithContext(ctx context.Context) UserAccountSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountSettingsOutput).ToUserAccountSettingsPtrOutputWithContext(ctx)
}

// UserAccountSettingsPtrInput is an input type that accepts UserAccountSettingsArgs, UserAccountSettingsPtr and UserAccountSettingsPtrOutput values.
// You can construct a concrete instance of `UserAccountSettingsPtrInput` via:
//
//          UserAccountSettingsArgs{...}
//
//  or:
//
//          nil
type UserAccountSettingsPtrInput interface {
	pulumi.Input

	ToUserAccountSettingsPtrOutput() UserAccountSettingsPtrOutput
	ToUserAccountSettingsPtrOutputWithContext(context.Context) UserAccountSettingsPtrOutput
}

type userAccountSettingsPtrType UserAccountSettingsArgs

func UserAccountSettingsPtr(v *UserAccountSettingsArgs) UserAccountSettingsPtrInput {
	return (*userAccountSettingsPtrType)(v)
}

func (*userAccountSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountSettings)(nil)).Elem()
}

func (i *userAccountSettingsPtrType) ToUserAccountSettingsPtrOutput() UserAccountSettingsPtrOutput {
	return i.ToUserAccountSettingsPtrOutputWithContext(context.Background())
}

func (i *userAccountSettingsPtrType) ToUserAccountSettingsPtrOutputWithContext(ctx context.Context) UserAccountSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountSettingsPtrOutput)
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettingsOutput struct{ *pulumi.OutputState }

func (UserAccountSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountSettings)(nil)).Elem()
}

func (o UserAccountSettingsOutput) ToUserAccountSettingsOutput() UserAccountSettingsOutput {
	return o
}

func (o UserAccountSettingsOutput) ToUserAccountSettingsOutputWithContext(ctx context.Context) UserAccountSettingsOutput {
	return o
}

func (o UserAccountSettingsOutput) ToUserAccountSettingsPtrOutput() UserAccountSettingsPtrOutput {
	return o.ToUserAccountSettingsPtrOutputWithContext(context.Background())
}

func (o UserAccountSettingsOutput) ToUserAccountSettingsPtrOutputWithContext(ctx context.Context) UserAccountSettingsPtrOutput {
	return o.ApplyT(func(v UserAccountSettings) *UserAccountSettings {
		return &v
	}).(UserAccountSettingsPtrOutput)
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountSettingsOutput) AdminUserName() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountSettings) string { return v.AdminUserName }).(pulumi.StringOutput)
}

// Password of the administrator user account.
func (o UserAccountSettingsOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountSettings) *string { return v.AdminUserPassword }).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountSettingsOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountSettings) *string { return v.AdminUserSshPublicKey }).(pulumi.StringPtrOutput)
}

type UserAccountSettingsPtrOutput struct{ *pulumi.OutputState }

func (UserAccountSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountSettings)(nil)).Elem()
}

func (o UserAccountSettingsPtrOutput) ToUserAccountSettingsPtrOutput() UserAccountSettingsPtrOutput {
	return o
}

func (o UserAccountSettingsPtrOutput) ToUserAccountSettingsPtrOutputWithContext(ctx context.Context) UserAccountSettingsPtrOutput {
	return o
}

func (o UserAccountSettingsPtrOutput) Elem() UserAccountSettingsOutput {
	return o.ApplyT(func(v *UserAccountSettings) UserAccountSettings { return *v }).(UserAccountSettingsOutput)
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountSettingsPtrOutput) AdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountSettings) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUserName
	}).(pulumi.StringPtrOutput)
}

// Password of the administrator user account.
func (o UserAccountSettingsPtrOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountSettings) *string {
		if v == nil {
			return nil
		}
		return v.AdminUserPassword
	}).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountSettingsPtrOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountSettings) *string {
		if v == nil {
			return nil
		}
		return v.AdminUserSshPublicKey
	}).(pulumi.StringPtrOutput)
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettingsInvokeResponse struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName string `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey *string `pulumi:"adminUserSshPublicKey"`
}

// UserAccountSettingsInvokeResponseInput is an input type that accepts UserAccountSettingsInvokeResponseArgs and UserAccountSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `UserAccountSettingsInvokeResponseInput` via:
//
//          UserAccountSettingsInvokeResponseArgs{...}
type UserAccountSettingsInvokeResponseInput interface {
	pulumi.Input

	ToUserAccountSettingsInvokeResponseOutput() UserAccountSettingsInvokeResponseOutput
	ToUserAccountSettingsInvokeResponseOutputWithContext(context.Context) UserAccountSettingsInvokeResponseOutput
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettingsInvokeResponseArgs struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName pulumi.StringInput `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword pulumi.StringPtrInput `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey pulumi.StringPtrInput `pulumi:"adminUserSshPublicKey"`
}

func (UserAccountSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountSettingsInvokeResponse)(nil)).Elem()
}

func (i UserAccountSettingsInvokeResponseArgs) ToUserAccountSettingsInvokeResponseOutput() UserAccountSettingsInvokeResponseOutput {
	return i.ToUserAccountSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i UserAccountSettingsInvokeResponseArgs) ToUserAccountSettingsInvokeResponseOutputWithContext(ctx context.Context) UserAccountSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountSettingsInvokeResponseOutput)
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (UserAccountSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountSettingsInvokeResponse)(nil)).Elem()
}

func (o UserAccountSettingsInvokeResponseOutput) ToUserAccountSettingsInvokeResponseOutput() UserAccountSettingsInvokeResponseOutput {
	return o
}

func (o UserAccountSettingsInvokeResponseOutput) ToUserAccountSettingsInvokeResponseOutputWithContext(ctx context.Context) UserAccountSettingsInvokeResponseOutput {
	return o
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountSettingsInvokeResponseOutput) AdminUserName() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountSettingsInvokeResponse) string { return v.AdminUserName }).(pulumi.StringOutput)
}

// Password of the administrator user account.
func (o UserAccountSettingsInvokeResponseOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountSettingsInvokeResponse) *string { return v.AdminUserPassword }).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountSettingsInvokeResponseOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountSettingsInvokeResponse) *string { return v.AdminUserSshPublicKey }).(pulumi.StringPtrOutput)
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettingsResponse struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName string `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey *string `pulumi:"adminUserSshPublicKey"`
}

// UserAccountSettingsResponseInput is an input type that accepts UserAccountSettingsResponseArgs and UserAccountSettingsResponseOutput values.
// You can construct a concrete instance of `UserAccountSettingsResponseInput` via:
//
//          UserAccountSettingsResponseArgs{...}
type UserAccountSettingsResponseInput interface {
	pulumi.Input

	ToUserAccountSettingsResponseOutput() UserAccountSettingsResponseOutput
	ToUserAccountSettingsResponseOutputWithContext(context.Context) UserAccountSettingsResponseOutput
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettingsResponseArgs struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName pulumi.StringInput `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword pulumi.StringPtrInput `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey pulumi.StringPtrInput `pulumi:"adminUserSshPublicKey"`
}

func (UserAccountSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountSettingsResponse)(nil)).Elem()
}

func (i UserAccountSettingsResponseArgs) ToUserAccountSettingsResponseOutput() UserAccountSettingsResponseOutput {
	return i.ToUserAccountSettingsResponseOutputWithContext(context.Background())
}

func (i UserAccountSettingsResponseArgs) ToUserAccountSettingsResponseOutputWithContext(ctx context.Context) UserAccountSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountSettingsResponseOutput)
}

func (i UserAccountSettingsResponseArgs) ToUserAccountSettingsResponsePtrOutput() UserAccountSettingsResponsePtrOutput {
	return i.ToUserAccountSettingsResponsePtrOutputWithContext(context.Background())
}

func (i UserAccountSettingsResponseArgs) ToUserAccountSettingsResponsePtrOutputWithContext(ctx context.Context) UserAccountSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountSettingsResponseOutput).ToUserAccountSettingsResponsePtrOutputWithContext(ctx)
}

// UserAccountSettingsResponsePtrInput is an input type that accepts UserAccountSettingsResponseArgs, UserAccountSettingsResponsePtr and UserAccountSettingsResponsePtrOutput values.
// You can construct a concrete instance of `UserAccountSettingsResponsePtrInput` via:
//
//          UserAccountSettingsResponseArgs{...}
//
//  or:
//
//          nil
type UserAccountSettingsResponsePtrInput interface {
	pulumi.Input

	ToUserAccountSettingsResponsePtrOutput() UserAccountSettingsResponsePtrOutput
	ToUserAccountSettingsResponsePtrOutputWithContext(context.Context) UserAccountSettingsResponsePtrOutput
}

type userAccountSettingsResponsePtrType UserAccountSettingsResponseArgs

func UserAccountSettingsResponsePtr(v *UserAccountSettingsResponseArgs) UserAccountSettingsResponsePtrInput {
	return (*userAccountSettingsResponsePtrType)(v)
}

func (*userAccountSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountSettingsResponse)(nil)).Elem()
}

func (i *userAccountSettingsResponsePtrType) ToUserAccountSettingsResponsePtrOutput() UserAccountSettingsResponsePtrOutput {
	return i.ToUserAccountSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *userAccountSettingsResponsePtrType) ToUserAccountSettingsResponsePtrOutputWithContext(ctx context.Context) UserAccountSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountSettingsResponsePtrOutput)
}

// Settings for user account that gets created on each on the nodes of a cluster.
type UserAccountSettingsResponseOutput struct{ *pulumi.OutputState }

func (UserAccountSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountSettingsResponse)(nil)).Elem()
}

func (o UserAccountSettingsResponseOutput) ToUserAccountSettingsResponseOutput() UserAccountSettingsResponseOutput {
	return o
}

func (o UserAccountSettingsResponseOutput) ToUserAccountSettingsResponseOutputWithContext(ctx context.Context) UserAccountSettingsResponseOutput {
	return o
}

func (o UserAccountSettingsResponseOutput) ToUserAccountSettingsResponsePtrOutput() UserAccountSettingsResponsePtrOutput {
	return o.ToUserAccountSettingsResponsePtrOutputWithContext(context.Background())
}

func (o UserAccountSettingsResponseOutput) ToUserAccountSettingsResponsePtrOutputWithContext(ctx context.Context) UserAccountSettingsResponsePtrOutput {
	return o.ApplyT(func(v UserAccountSettingsResponse) *UserAccountSettingsResponse {
		return &v
	}).(UserAccountSettingsResponsePtrOutput)
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountSettingsResponseOutput) AdminUserName() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountSettingsResponse) string { return v.AdminUserName }).(pulumi.StringOutput)
}

// Password of the administrator user account.
func (o UserAccountSettingsResponseOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountSettingsResponse) *string { return v.AdminUserPassword }).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountSettingsResponseOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountSettingsResponse) *string { return v.AdminUserSshPublicKey }).(pulumi.StringPtrOutput)
}

type UserAccountSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAccountSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountSettingsResponse)(nil)).Elem()
}

func (o UserAccountSettingsResponsePtrOutput) ToUserAccountSettingsResponsePtrOutput() UserAccountSettingsResponsePtrOutput {
	return o
}

func (o UserAccountSettingsResponsePtrOutput) ToUserAccountSettingsResponsePtrOutputWithContext(ctx context.Context) UserAccountSettingsResponsePtrOutput {
	return o
}

func (o UserAccountSettingsResponsePtrOutput) Elem() UserAccountSettingsResponseOutput {
	return o.ApplyT(func(v *UserAccountSettingsResponse) UserAccountSettingsResponse { return *v }).(UserAccountSettingsResponseOutput)
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountSettingsResponsePtrOutput) AdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUserName
	}).(pulumi.StringPtrOutput)
}

// Password of the administrator user account.
func (o UserAccountSettingsResponsePtrOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUserPassword
	}).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountSettingsResponsePtrOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUserSshPublicKey
	}).(pulumi.StringPtrOutput)
}

// VM configuration.
type VirtualMachineConfiguration struct {
	// OS image reference for cluster nodes.
	ImageReference *ImageReference `pulumi:"imageReference"`
}

// VirtualMachineConfigurationInput is an input type that accepts VirtualMachineConfigurationArgs and VirtualMachineConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationInput` via:
//
//          VirtualMachineConfigurationArgs{...}
type VirtualMachineConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput
	ToVirtualMachineConfigurationOutputWithContext(context.Context) VirtualMachineConfigurationOutput
}

// VM configuration.
type VirtualMachineConfigurationArgs struct {
	// OS image reference for cluster nodes.
	ImageReference ImageReferencePtrInput `pulumi:"imageReference"`
}

func (VirtualMachineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfiguration)(nil)).Elem()
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput {
	return i.ToVirtualMachineConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationOutputWithContext(ctx context.Context) VirtualMachineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationOutput)
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return i.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationOutput).ToVirtualMachineConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineConfigurationPtrInput is an input type that accepts VirtualMachineConfigurationArgs, VirtualMachineConfigurationPtr and VirtualMachineConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationPtrInput` via:
//
//          VirtualMachineConfigurationArgs{...}
//
//  or:
//
//          nil
type VirtualMachineConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput
	ToVirtualMachineConfigurationPtrOutputWithContext(context.Context) VirtualMachineConfigurationPtrOutput
}

type virtualMachineConfigurationPtrType VirtualMachineConfigurationArgs

func VirtualMachineConfigurationPtr(v *VirtualMachineConfigurationArgs) VirtualMachineConfigurationPtrInput {
	return (*virtualMachineConfigurationPtrType)(v)
}

func (*virtualMachineConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfiguration)(nil)).Elem()
}

func (i *virtualMachineConfigurationPtrType) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return i.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineConfigurationPtrType) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationPtrOutput)
}

// VM configuration.
type VirtualMachineConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfiguration)(nil)).Elem()
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput {
	return o
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationOutputWithContext(ctx context.Context) VirtualMachineConfigurationOutput {
	return o
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return o.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) *VirtualMachineConfiguration {
		return &v
	}).(VirtualMachineConfigurationPtrOutput)
}

// OS image reference for cluster nodes.
func (o VirtualMachineConfigurationOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) *ImageReference { return v.ImageReference }).(ImageReferencePtrOutput)
}

type VirtualMachineConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfiguration)(nil)).Elem()
}

func (o VirtualMachineConfigurationPtrOutput) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return o
}

func (o VirtualMachineConfigurationPtrOutput) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return o
}

func (o VirtualMachineConfigurationPtrOutput) Elem() VirtualMachineConfigurationOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) VirtualMachineConfiguration { return *v }).(VirtualMachineConfigurationOutput)
}

// OS image reference for cluster nodes.
func (o VirtualMachineConfigurationPtrOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *ImageReference {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageReferencePtrOutput)
}

// VM configuration.
type VirtualMachineConfigurationInvokeResponse struct {
	// OS image reference for cluster nodes.
	ImageReference *ImageReferenceInvokeResponse `pulumi:"imageReference"`
}

// VirtualMachineConfigurationInvokeResponseInput is an input type that accepts VirtualMachineConfigurationInvokeResponseArgs and VirtualMachineConfigurationInvokeResponseOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationInvokeResponseInput` via:
//
//          VirtualMachineConfigurationInvokeResponseArgs{...}
type VirtualMachineConfigurationInvokeResponseInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationInvokeResponseOutput() VirtualMachineConfigurationInvokeResponseOutput
	ToVirtualMachineConfigurationInvokeResponseOutputWithContext(context.Context) VirtualMachineConfigurationInvokeResponseOutput
}

// VM configuration.
type VirtualMachineConfigurationInvokeResponseArgs struct {
	// OS image reference for cluster nodes.
	ImageReference ImageReferenceInvokeResponsePtrInput `pulumi:"imageReference"`
}

func (VirtualMachineConfigurationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationInvokeResponse)(nil)).Elem()
}

func (i VirtualMachineConfigurationInvokeResponseArgs) ToVirtualMachineConfigurationInvokeResponseOutput() VirtualMachineConfigurationInvokeResponseOutput {
	return i.ToVirtualMachineConfigurationInvokeResponseOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationInvokeResponseArgs) ToVirtualMachineConfigurationInvokeResponseOutputWithContext(ctx context.Context) VirtualMachineConfigurationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationInvokeResponseOutput)
}

// VM configuration.
type VirtualMachineConfigurationInvokeResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationInvokeResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationInvokeResponseOutput) ToVirtualMachineConfigurationInvokeResponseOutput() VirtualMachineConfigurationInvokeResponseOutput {
	return o
}

func (o VirtualMachineConfigurationInvokeResponseOutput) ToVirtualMachineConfigurationInvokeResponseOutputWithContext(ctx context.Context) VirtualMachineConfigurationInvokeResponseOutput {
	return o
}

// OS image reference for cluster nodes.
func (o VirtualMachineConfigurationInvokeResponseOutput) ImageReference() ImageReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationInvokeResponse) *ImageReferenceInvokeResponse {
		return v.ImageReference
	}).(ImageReferenceInvokeResponsePtrOutput)
}

// VM configuration.
type VirtualMachineConfigurationResponse struct {
	// OS image reference for cluster nodes.
	ImageReference *ImageReferenceResponse `pulumi:"imageReference"`
}

// VirtualMachineConfigurationResponseInput is an input type that accepts VirtualMachineConfigurationResponseArgs and VirtualMachineConfigurationResponseOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationResponseInput` via:
//
//          VirtualMachineConfigurationResponseArgs{...}
type VirtualMachineConfigurationResponseInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationResponseOutput() VirtualMachineConfigurationResponseOutput
	ToVirtualMachineConfigurationResponseOutputWithContext(context.Context) VirtualMachineConfigurationResponseOutput
}

// VM configuration.
type VirtualMachineConfigurationResponseArgs struct {
	// OS image reference for cluster nodes.
	ImageReference ImageReferenceResponsePtrInput `pulumi:"imageReference"`
}

func (VirtualMachineConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (i VirtualMachineConfigurationResponseArgs) ToVirtualMachineConfigurationResponseOutput() VirtualMachineConfigurationResponseOutput {
	return i.ToVirtualMachineConfigurationResponseOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationResponseArgs) ToVirtualMachineConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationResponseOutput)
}

func (i VirtualMachineConfigurationResponseArgs) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return i.ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationResponseArgs) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationResponseOutput).ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx)
}

// VirtualMachineConfigurationResponsePtrInput is an input type that accepts VirtualMachineConfigurationResponseArgs, VirtualMachineConfigurationResponsePtr and VirtualMachineConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationResponsePtrInput` via:
//
//          VirtualMachineConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type VirtualMachineConfigurationResponsePtrInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput
	ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Context) VirtualMachineConfigurationResponsePtrOutput
}

type virtualMachineConfigurationResponsePtrType VirtualMachineConfigurationResponseArgs

func VirtualMachineConfigurationResponsePtr(v *VirtualMachineConfigurationResponseArgs) VirtualMachineConfigurationResponsePtrInput {
	return (*virtualMachineConfigurationResponsePtrType)(v)
}

func (*virtualMachineConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (i *virtualMachineConfigurationResponsePtrType) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return i.ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *virtualMachineConfigurationResponsePtrType) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationResponsePtrOutput)
}

// VM configuration.
type VirtualMachineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponseOutput() VirtualMachineConfigurationResponseOutput {
	return o
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponseOutput {
	return o
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return o.ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *VirtualMachineConfigurationResponse {
		return &v
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

// OS image reference for cluster nodes.
func (o VirtualMachineConfigurationResponseOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *ImageReferenceResponse { return v.ImageReference }).(ImageReferenceResponsePtrOutput)
}

type VirtualMachineConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationResponsePtrOutput) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineConfigurationResponsePtrOutput) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineConfigurationResponsePtrOutput) Elem() VirtualMachineConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) VirtualMachineConfigurationResponse { return *v }).(VirtualMachineConfigurationResponseOutput)
}

// OS image reference for cluster nodes.
func (o VirtualMachineConfigurationResponsePtrOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *ImageReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppInsightsReferenceOutput{})
	pulumi.RegisterOutputType(AppInsightsReferencePtrOutput{})
	pulumi.RegisterOutputType(AppInsightsReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(AppInsightsReferenceInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(AppInsightsReferenceResponseOutput{})
	pulumi.RegisterOutputType(AppInsightsReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemReferenceOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemReferenceArrayOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemReferenceInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemReferenceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureFileShareReferenceOutput{})
	pulumi.RegisterOutputType(AzureFileShareReferenceArrayOutput{})
	pulumi.RegisterOutputType(AzureFileShareReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(AzureFileShareReferenceInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureFileShareReferenceResponseOutput{})
	pulumi.RegisterOutputType(AzureFileShareReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureStorageCredentialsInfoOutput{})
	pulumi.RegisterOutputType(AzureStorageCredentialsInfoInvokeResponseOutput{})
	pulumi.RegisterOutputType(AzureStorageCredentialsInfoResponseOutput{})
	pulumi.RegisterOutputType(BatchAIErrorInvokeResponseOutput{})
	pulumi.RegisterOutputType(BatchAIErrorInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(BatchAIErrorResponseOutput{})
	pulumi.RegisterOutputType(BatchAIErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(CNTKsettingsOutput{})
	pulumi.RegisterOutputType(CNTKsettingsPtrOutput{})
	pulumi.RegisterOutputType(CNTKsettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CNTKsettingsResponseOutput{})
	pulumi.RegisterOutputType(CNTKsettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(Caffe2SettingsOutput{})
	pulumi.RegisterOutputType(Caffe2SettingsPtrOutput{})
	pulumi.RegisterOutputType(Caffe2SettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(Caffe2SettingsResponseOutput{})
	pulumi.RegisterOutputType(Caffe2SettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CaffeSettingsOutput{})
	pulumi.RegisterOutputType(CaffeSettingsPtrOutput{})
	pulumi.RegisterOutputType(CaffeSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CaffeSettingsResponseOutput{})
	pulumi.RegisterOutputType(CaffeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ChainerSettingsOutput{})
	pulumi.RegisterOutputType(ChainerSettingsPtrOutput{})
	pulumi.RegisterOutputType(ChainerSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ChainerSettingsResponseOutput{})
	pulumi.RegisterOutputType(ChainerSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerSettingsOutput{})
	pulumi.RegisterOutputType(ContainerSettingsPtrOutput{})
	pulumi.RegisterOutputType(ContainerSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerSettingsResponseOutput{})
	pulumi.RegisterOutputType(ContainerSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomMpiSettingsOutput{})
	pulumi.RegisterOutputType(CustomMpiSettingsPtrOutput{})
	pulumi.RegisterOutputType(CustomMpiSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CustomMpiSettingsResponseOutput{})
	pulumi.RegisterOutputType(CustomMpiSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomToolkitSettingsOutput{})
	pulumi.RegisterOutputType(CustomToolkitSettingsPtrOutput{})
	pulumi.RegisterOutputType(CustomToolkitSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CustomToolkitSettingsResponseOutput{})
	pulumi.RegisterOutputType(CustomToolkitSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DataDisksOutput{})
	pulumi.RegisterOutputType(DataDisksPtrOutput{})
	pulumi.RegisterOutputType(DataDisksInvokeResponseOutput{})
	pulumi.RegisterOutputType(DataDisksResponseOutput{})
	pulumi.RegisterOutputType(DataDisksResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableInvokeResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableWithSecretValueOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableWithSecretValueArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableWithSecretValueInvokeResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableWithSecretValueInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableWithSecretValueResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableWithSecretValueResponseArrayOutput{})
	pulumi.RegisterOutputType(FileInvokeResponseOutput{})
	pulumi.RegisterOutputType(FileInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(FileServerReferenceOutput{})
	pulumi.RegisterOutputType(FileServerReferenceArrayOutput{})
	pulumi.RegisterOutputType(FileServerReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(FileServerReferenceInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(FileServerReferenceResponseOutput{})
	pulumi.RegisterOutputType(FileServerReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(HorovodSettingsOutput{})
	pulumi.RegisterOutputType(HorovodSettingsPtrOutput{})
	pulumi.RegisterOutputType(HorovodSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(HorovodSettingsResponseOutput{})
	pulumi.RegisterOutputType(HorovodSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceOutput{})
	pulumi.RegisterOutputType(ImageReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageReferenceInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageSourceRegistryOutput{})
	pulumi.RegisterOutputType(ImageSourceRegistryPtrOutput{})
	pulumi.RegisterOutputType(ImageSourceRegistryInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageSourceRegistryResponseOutput{})
	pulumi.RegisterOutputType(ImageSourceRegistryResponsePtrOutput{})
	pulumi.RegisterOutputType(InputDirectoryOutput{})
	pulumi.RegisterOutputType(InputDirectoryArrayOutput{})
	pulumi.RegisterOutputType(InputDirectoryInvokeResponseOutput{})
	pulumi.RegisterOutputType(InputDirectoryInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(InputDirectoryResponseOutput{})
	pulumi.RegisterOutputType(InputDirectoryResponseArrayOutput{})
	pulumi.RegisterOutputType(JobBasePropertiesConstraintsOutput{})
	pulumi.RegisterOutputType(JobBasePropertiesConstraintsPtrOutput{})
	pulumi.RegisterOutputType(JobPreparationOutput{})
	pulumi.RegisterOutputType(JobPreparationPtrOutput{})
	pulumi.RegisterOutputType(JobPreparationInvokeResponseOutput{})
	pulumi.RegisterOutputType(JobPreparationResponseOutput{})
	pulumi.RegisterOutputType(JobPreparationResponsePtrOutput{})
	pulumi.RegisterOutputType(JobPropertiesInvokeResponseConstraintsOutput{})
	pulumi.RegisterOutputType(JobPropertiesInvokeResponseExecutionInfoOutput{})
	pulumi.RegisterOutputType(JobPropertiesResponseConstraintsOutput{})
	pulumi.RegisterOutputType(JobPropertiesResponseConstraintsPtrOutput{})
	pulumi.RegisterOutputType(JobPropertiesResponseExecutionInfoOutput{})
	pulumi.RegisterOutputType(JobPropertiesResponseExecutionInfoPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ManualScaleSettingsOutput{})
	pulumi.RegisterOutputType(ManualScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(ManualScaleSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ManualScaleSettingsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ManualScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(ManualScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MountSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(MountSettingsResponseOutput{})
	pulumi.RegisterOutputType(MountSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MountVolumesOutput{})
	pulumi.RegisterOutputType(MountVolumesPtrOutput{})
	pulumi.RegisterOutputType(MountVolumesInvokeResponseOutput{})
	pulumi.RegisterOutputType(MountVolumesInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(MountVolumesResponseOutput{})
	pulumi.RegisterOutputType(MountVolumesResponsePtrOutput{})
	pulumi.RegisterOutputType(NameValuePairInvokeResponseOutput{})
	pulumi.RegisterOutputType(NameValuePairInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(NameValuePairResponseOutput{})
	pulumi.RegisterOutputType(NameValuePairResponseArrayOutput{})
	pulumi.RegisterOutputType(NodeSetupOutput{})
	pulumi.RegisterOutputType(NodeSetupPtrOutput{})
	pulumi.RegisterOutputType(NodeSetupInvokeResponseOutput{})
	pulumi.RegisterOutputType(NodeSetupResponseOutput{})
	pulumi.RegisterOutputType(NodeSetupResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeStateCountsInvokeResponseOutput{})
	pulumi.RegisterOutputType(NodeStateCountsResponseOutput{})
	pulumi.RegisterOutputType(NodeStateCountsResponsePtrOutput{})
	pulumi.RegisterOutputType(OutputDirectoryOutput{})
	pulumi.RegisterOutputType(OutputDirectoryArrayOutput{})
	pulumi.RegisterOutputType(OutputDirectoryInvokeResponseOutput{})
	pulumi.RegisterOutputType(OutputDirectoryInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(OutputDirectoryResponseOutput{})
	pulumi.RegisterOutputType(OutputDirectoryResponseArrayOutput{})
	pulumi.RegisterOutputType(PerformanceCountersSettingsOutput{})
	pulumi.RegisterOutputType(PerformanceCountersSettingsPtrOutput{})
	pulumi.RegisterOutputType(PerformanceCountersSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(PerformanceCountersSettingsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(PerformanceCountersSettingsResponseOutput{})
	pulumi.RegisterOutputType(PerformanceCountersSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateRegistryCredentialsOutput{})
	pulumi.RegisterOutputType(PrivateRegistryCredentialsPtrOutput{})
	pulumi.RegisterOutputType(PrivateRegistryCredentialsInvokeResponseOutput{})
	pulumi.RegisterOutputType(PrivateRegistryCredentialsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateRegistryCredentialsResponseOutput{})
	pulumi.RegisterOutputType(PrivateRegistryCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(PyTorchSettingsOutput{})
	pulumi.RegisterOutputType(PyTorchSettingsPtrOutput{})
	pulumi.RegisterOutputType(PyTorchSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(PyTorchSettingsResponseOutput{})
	pulumi.RegisterOutputType(PyTorchSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(RemoteLoginInformationInvokeResponseOutput{})
	pulumi.RegisterOutputType(RemoteLoginInformationInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceIdOutput{})
	pulumi.RegisterOutputType(ResourceIdPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdInvokeResponseOutput{})
	pulumi.RegisterOutputType(ResourceIdInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceIdResponseOutput{})
	pulumi.RegisterOutputType(ResourceIdResponsePtrOutput{})
	pulumi.RegisterOutputType(ScaleSettingsOutput{})
	pulumi.RegisterOutputType(ScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(ScaleSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SetupTaskOutput{})
	pulumi.RegisterOutputType(SetupTaskPtrOutput{})
	pulumi.RegisterOutputType(SetupTaskInvokeResponseOutput{})
	pulumi.RegisterOutputType(SetupTaskInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(SetupTaskResponseOutput{})
	pulumi.RegisterOutputType(SetupTaskResponsePtrOutput{})
	pulumi.RegisterOutputType(SshConfigurationOutput{})
	pulumi.RegisterOutputType(SshConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SshConfigurationInvokeResponseOutput{})
	pulumi.RegisterOutputType(SshConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SshConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(TensorFlowSettingsOutput{})
	pulumi.RegisterOutputType(TensorFlowSettingsPtrOutput{})
	pulumi.RegisterOutputType(TensorFlowSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(TensorFlowSettingsResponseOutput{})
	pulumi.RegisterOutputType(TensorFlowSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(UnmanagedFileSystemReferenceOutput{})
	pulumi.RegisterOutputType(UnmanagedFileSystemReferenceArrayOutput{})
	pulumi.RegisterOutputType(UnmanagedFileSystemReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(UnmanagedFileSystemReferenceInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(UnmanagedFileSystemReferenceResponseOutput{})
	pulumi.RegisterOutputType(UnmanagedFileSystemReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(UserAccountSettingsOutput{})
	pulumi.RegisterOutputType(UserAccountSettingsPtrOutput{})
	pulumi.RegisterOutputType(UserAccountSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(UserAccountSettingsResponseOutput{})
	pulumi.RegisterOutputType(UserAccountSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationInvokeResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationResponsePtrOutput{})
}
