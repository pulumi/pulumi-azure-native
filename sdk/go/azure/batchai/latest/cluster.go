// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Information about a Cluster.
type Cluster struct {
	pulumi.CustomResourceState

	// Allocation state of the cluster. Possible values are: steady - Indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing - Indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
	AllocationState pulumi.StringOutput `pulumi:"allocationState"`
	// The time at which the cluster entered its current allocation state.
	AllocationStateTransitionTime pulumi.StringOutput `pulumi:"allocationStateTransitionTime"`
	// The time when the cluster was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The number of compute nodes currently assigned to the cluster.
	CurrentNodeCount pulumi.IntOutput `pulumi:"currentNodeCount"`
	// Collection of errors encountered by various compute nodes during node setup.
	Errors BatchAIErrorResponseArrayOutput `pulumi:"errors"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Setup (mount file systems, performance counters settings and custom setup task) to be performed on each compute node in the cluster.
	NodeSetup NodeSetupResponsePtrOutput `pulumi:"nodeSetup"`
	// Counts of various node states on the cluster.
	NodeStateCounts NodeStateCountsResponseOutput `pulumi:"nodeStateCounts"`
	// Provisioning state of the cluster. Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Time when the provisioning state was changed.
	ProvisioningStateTransitionTime pulumi.StringOutput `pulumi:"provisioningStateTransitionTime"`
	// Scale settings of the cluster.
	ScaleSettings ScaleSettingsResponsePtrOutput `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the cluster nodes belong to.
	Subnet ResourceIdResponsePtrOutput `pulumi:"subnet"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// Administrator user account settings which can be used to SSH to compute nodes.
	UserAccountSettings UserAccountSettingsResponsePtrOutput `pulumi:"userAccountSettings"`
	// Virtual machine configuration (OS image) of the compute nodes. All nodes in a cluster have the same OS image configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponsePtrOutput `pulumi:"virtualMachineConfiguration"`
	// VM priority of cluster nodes.
	VmPriority pulumi.StringPtrOutput `pulumi:"vmPriority"`
	// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size.
	VmSize pulumi.StringPtrOutput `pulumi:"vmSize"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.UserAccountSettings == nil {
		return nil, errors.New("missing required argument 'UserAccountSettings'")
	}
	if args == nil || args.VmSize == nil {
		return nil, errors.New("missing required argument 'VmSize'")
	}
	if args == nil || args.WorkspaceName == nil {
		return nil, errors.New("missing required argument 'WorkspaceName'")
	}
	if args == nil {
		args = &ClusterArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:batchai/v20180501:Cluster"),
		},
	})
	opts = append(opts, aliases)
	var resource Cluster
	err := ctx.RegisterResource("azure-nextgen:batchai/latest:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("azure-nextgen:batchai/latest:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Allocation state of the cluster. Possible values are: steady - Indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing - Indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
	AllocationState *string `pulumi:"allocationState"`
	// The time at which the cluster entered its current allocation state.
	AllocationStateTransitionTime *string `pulumi:"allocationStateTransitionTime"`
	// The time when the cluster was created.
	CreationTime *string `pulumi:"creationTime"`
	// The number of compute nodes currently assigned to the cluster.
	CurrentNodeCount *int `pulumi:"currentNodeCount"`
	// Collection of errors encountered by various compute nodes during node setup.
	Errors []BatchAIErrorResponse `pulumi:"errors"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// Setup (mount file systems, performance counters settings and custom setup task) to be performed on each compute node in the cluster.
	NodeSetup *NodeSetupResponse `pulumi:"nodeSetup"`
	// Counts of various node states on the cluster.
	NodeStateCounts *NodeStateCountsResponse `pulumi:"nodeStateCounts"`
	// Provisioning state of the cluster. Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Time when the provisioning state was changed.
	ProvisioningStateTransitionTime *string `pulumi:"provisioningStateTransitionTime"`
	// Scale settings of the cluster.
	ScaleSettings *ScaleSettingsResponse `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the cluster nodes belong to.
	Subnet *ResourceIdResponse `pulumi:"subnet"`
	// The type of the resource.
	Type *string `pulumi:"type"`
	// Administrator user account settings which can be used to SSH to compute nodes.
	UserAccountSettings *UserAccountSettingsResponse `pulumi:"userAccountSettings"`
	// Virtual machine configuration (OS image) of the compute nodes. All nodes in a cluster have the same OS image configuration.
	VirtualMachineConfiguration *VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
	// VM priority of cluster nodes.
	VmPriority *string `pulumi:"vmPriority"`
	// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size.
	VmSize *string `pulumi:"vmSize"`
}

type ClusterState struct {
	// Allocation state of the cluster. Possible values are: steady - Indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing - Indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
	AllocationState pulumi.StringPtrInput
	// The time at which the cluster entered its current allocation state.
	AllocationStateTransitionTime pulumi.StringPtrInput
	// The time when the cluster was created.
	CreationTime pulumi.StringPtrInput
	// The number of compute nodes currently assigned to the cluster.
	CurrentNodeCount pulumi.IntPtrInput
	// Collection of errors encountered by various compute nodes during node setup.
	Errors BatchAIErrorResponseArrayInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// Setup (mount file systems, performance counters settings and custom setup task) to be performed on each compute node in the cluster.
	NodeSetup NodeSetupResponsePtrInput
	// Counts of various node states on the cluster.
	NodeStateCounts NodeStateCountsResponsePtrInput
	// Provisioning state of the cluster. Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
	ProvisioningState pulumi.StringPtrInput
	// Time when the provisioning state was changed.
	ProvisioningStateTransitionTime pulumi.StringPtrInput
	// Scale settings of the cluster.
	ScaleSettings ScaleSettingsResponsePtrInput
	// Virtual network subnet resource ID the cluster nodes belong to.
	Subnet ResourceIdResponsePtrInput
	// The type of the resource.
	Type pulumi.StringPtrInput
	// Administrator user account settings which can be used to SSH to compute nodes.
	UserAccountSettings UserAccountSettingsResponsePtrInput
	// Virtual machine configuration (OS image) of the compute nodes. All nodes in a cluster have the same OS image configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponsePtrInput
	// VM priority of cluster nodes.
	VmPriority pulumi.StringPtrInput
	// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size.
	VmSize pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
	ClusterName string `pulumi:"clusterName"`
	// Setup to be performed on each compute node in the cluster.
	NodeSetup *NodeSetup `pulumi:"nodeSetup"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Scale settings for the cluster. Batch AI service supports manual and auto scale clusters.
	ScaleSettings *ScaleSettings `pulumi:"scaleSettings"`
	// Existing virtual network subnet to put the cluster nodes in. Note, if a File Server mount configured in node setup, the File Server's subnet will be used automatically.
	Subnet *ResourceId `pulumi:"subnet"`
	// Settings for an administrator user account that will be created on each compute node in the cluster.
	UserAccountSettings UserAccountSettings `pulumi:"userAccountSettings"`
	// OS image configuration for cluster nodes. All nodes in a cluster have the same OS image.
	VirtualMachineConfiguration *VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
	// VM priority. Allowed values are: dedicated (default) and lowpriority.
	VmPriority *string `pulumi:"vmPriority"`
	// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size. For information about available VM sizes for clusters using images from the Virtual Machines Marketplace see Sizes for Virtual Machines (Linux). Batch AI service supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
	VmSize string `pulumi:"vmSize"`
	// The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
	ClusterName pulumi.StringInput
	// Setup to be performed on each compute node in the cluster.
	NodeSetup NodeSetupPtrInput
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput
	// Scale settings for the cluster. Batch AI service supports manual and auto scale clusters.
	ScaleSettings ScaleSettingsPtrInput
	// Existing virtual network subnet to put the cluster nodes in. Note, if a File Server mount configured in node setup, the File Server's subnet will be used automatically.
	Subnet ResourceIdPtrInput
	// Settings for an administrator user account that will be created on each compute node in the cluster.
	UserAccountSettings UserAccountSettingsInput
	// OS image configuration for cluster nodes. All nodes in a cluster have the same OS image.
	VirtualMachineConfiguration VirtualMachineConfigurationPtrInput
	// VM priority. Allowed values are: dedicated (default) and lowpriority.
	VmPriority pulumi.StringPtrInput
	// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size. For information about available VM sizes for clusters using images from the Virtual Machines Marketplace see Sizes for Virtual Machines (Linux). Batch AI service supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
	VmSize pulumi.StringInput
	// The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
	WorkspaceName pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}
