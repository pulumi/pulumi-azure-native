// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Network ACL
type NetworkACL struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []string `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []string `pulumi:"deny"`
}

// NetworkACLInput is an input type that accepts NetworkACLArgs and NetworkACLOutput values.
// You can construct a concrete instance of `NetworkACLInput` via:
//
//          NetworkACLArgs{...}
type NetworkACLInput interface {
	pulumi.Input

	ToNetworkACLOutput() NetworkACLOutput
	ToNetworkACLOutputWithContext(context.Context) NetworkACLOutput
}

// Network ACL
type NetworkACLArgs struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow pulumi.StringArrayInput `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny pulumi.StringArrayInput `pulumi:"deny"`
}

func (NetworkACLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACL)(nil)).Elem()
}

func (i NetworkACLArgs) ToNetworkACLOutput() NetworkACLOutput {
	return i.ToNetworkACLOutputWithContext(context.Background())
}

func (i NetworkACLArgs) ToNetworkACLOutputWithContext(ctx context.Context) NetworkACLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLOutput)
}

func (i NetworkACLArgs) ToNetworkACLPtrOutput() NetworkACLPtrOutput {
	return i.ToNetworkACLPtrOutputWithContext(context.Background())
}

func (i NetworkACLArgs) ToNetworkACLPtrOutputWithContext(ctx context.Context) NetworkACLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLOutput).ToNetworkACLPtrOutputWithContext(ctx)
}

// NetworkACLPtrInput is an input type that accepts NetworkACLArgs, NetworkACLPtr and NetworkACLPtrOutput values.
// You can construct a concrete instance of `NetworkACLPtrInput` via:
//
//          NetworkACLArgs{...}
//
//  or:
//
//          nil
type NetworkACLPtrInput interface {
	pulumi.Input

	ToNetworkACLPtrOutput() NetworkACLPtrOutput
	ToNetworkACLPtrOutputWithContext(context.Context) NetworkACLPtrOutput
}

type networkACLPtrType NetworkACLArgs

func NetworkACLPtr(v *NetworkACLArgs) NetworkACLPtrInput {
	return (*networkACLPtrType)(v)
}

func (*networkACLPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACL)(nil)).Elem()
}

func (i *networkACLPtrType) ToNetworkACLPtrOutput() NetworkACLPtrOutput {
	return i.ToNetworkACLPtrOutputWithContext(context.Background())
}

func (i *networkACLPtrType) ToNetworkACLPtrOutputWithContext(ctx context.Context) NetworkACLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLPtrOutput)
}

// Network ACL
type NetworkACLOutput struct{ *pulumi.OutputState }

func (NetworkACLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACL)(nil)).Elem()
}

func (o NetworkACLOutput) ToNetworkACLOutput() NetworkACLOutput {
	return o
}

func (o NetworkACLOutput) ToNetworkACLOutputWithContext(ctx context.Context) NetworkACLOutput {
	return o
}

func (o NetworkACLOutput) ToNetworkACLPtrOutput() NetworkACLPtrOutput {
	return o.ToNetworkACLPtrOutputWithContext(context.Background())
}

func (o NetworkACLOutput) ToNetworkACLPtrOutputWithContext(ctx context.Context) NetworkACLPtrOutput {
	return o.ApplyT(func(v NetworkACL) *NetworkACL {
		return &v
	}).(NetworkACLPtrOutput)
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACL) []string { return v.Allow }).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACL) []string { return v.Deny }).(pulumi.StringArrayOutput)
}

type NetworkACLPtrOutput struct{ *pulumi.OutputState }

func (NetworkACLPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACL)(nil)).Elem()
}

func (o NetworkACLPtrOutput) ToNetworkACLPtrOutput() NetworkACLPtrOutput {
	return o
}

func (o NetworkACLPtrOutput) ToNetworkACLPtrOutputWithContext(ctx context.Context) NetworkACLPtrOutput {
	return o
}

func (o NetworkACLPtrOutput) Elem() NetworkACLOutput {
	return o.ApplyT(func(v *NetworkACL) NetworkACL { return *v }).(NetworkACLOutput)
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLPtrOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkACL) []string {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLPtrOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkACL) []string {
		if v == nil {
			return nil
		}
		return v.Deny
	}).(pulumi.StringArrayOutput)
}

// Network ACL
type NetworkACLResponse struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []string `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []string `pulumi:"deny"`
}

// NetworkACLResponseInput is an input type that accepts NetworkACLResponseArgs and NetworkACLResponseOutput values.
// You can construct a concrete instance of `NetworkACLResponseInput` via:
//
//          NetworkACLResponseArgs{...}
type NetworkACLResponseInput interface {
	pulumi.Input

	ToNetworkACLResponseOutput() NetworkACLResponseOutput
	ToNetworkACLResponseOutputWithContext(context.Context) NetworkACLResponseOutput
}

// Network ACL
type NetworkACLResponseArgs struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow pulumi.StringArrayInput `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny pulumi.StringArrayInput `pulumi:"deny"`
}

func (NetworkACLResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACLResponse)(nil)).Elem()
}

func (i NetworkACLResponseArgs) ToNetworkACLResponseOutput() NetworkACLResponseOutput {
	return i.ToNetworkACLResponseOutputWithContext(context.Background())
}

func (i NetworkACLResponseArgs) ToNetworkACLResponseOutputWithContext(ctx context.Context) NetworkACLResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLResponseOutput)
}

func (i NetworkACLResponseArgs) ToNetworkACLResponsePtrOutput() NetworkACLResponsePtrOutput {
	return i.ToNetworkACLResponsePtrOutputWithContext(context.Background())
}

func (i NetworkACLResponseArgs) ToNetworkACLResponsePtrOutputWithContext(ctx context.Context) NetworkACLResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLResponseOutput).ToNetworkACLResponsePtrOutputWithContext(ctx)
}

// NetworkACLResponsePtrInput is an input type that accepts NetworkACLResponseArgs, NetworkACLResponsePtr and NetworkACLResponsePtrOutput values.
// You can construct a concrete instance of `NetworkACLResponsePtrInput` via:
//
//          NetworkACLResponseArgs{...}
//
//  or:
//
//          nil
type NetworkACLResponsePtrInput interface {
	pulumi.Input

	ToNetworkACLResponsePtrOutput() NetworkACLResponsePtrOutput
	ToNetworkACLResponsePtrOutputWithContext(context.Context) NetworkACLResponsePtrOutput
}

type networkACLResponsePtrType NetworkACLResponseArgs

func NetworkACLResponsePtr(v *NetworkACLResponseArgs) NetworkACLResponsePtrInput {
	return (*networkACLResponsePtrType)(v)
}

func (*networkACLResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACLResponse)(nil)).Elem()
}

func (i *networkACLResponsePtrType) ToNetworkACLResponsePtrOutput() NetworkACLResponsePtrOutput {
	return i.ToNetworkACLResponsePtrOutputWithContext(context.Background())
}

func (i *networkACLResponsePtrType) ToNetworkACLResponsePtrOutputWithContext(ctx context.Context) NetworkACLResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLResponsePtrOutput)
}

// Network ACL
type NetworkACLResponseOutput struct{ *pulumi.OutputState }

func (NetworkACLResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACLResponse)(nil)).Elem()
}

func (o NetworkACLResponseOutput) ToNetworkACLResponseOutput() NetworkACLResponseOutput {
	return o
}

func (o NetworkACLResponseOutput) ToNetworkACLResponseOutputWithContext(ctx context.Context) NetworkACLResponseOutput {
	return o
}

func (o NetworkACLResponseOutput) ToNetworkACLResponsePtrOutput() NetworkACLResponsePtrOutput {
	return o.ToNetworkACLResponsePtrOutputWithContext(context.Background())
}

func (o NetworkACLResponseOutput) ToNetworkACLResponsePtrOutputWithContext(ctx context.Context) NetworkACLResponsePtrOutput {
	return o.ApplyT(func(v NetworkACLResponse) *NetworkACLResponse {
		return &v
	}).(NetworkACLResponsePtrOutput)
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLResponseOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACLResponse) []string { return v.Allow }).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLResponseOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACLResponse) []string { return v.Deny }).(pulumi.StringArrayOutput)
}

type NetworkACLResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkACLResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACLResponse)(nil)).Elem()
}

func (o NetworkACLResponsePtrOutput) ToNetworkACLResponsePtrOutput() NetworkACLResponsePtrOutput {
	return o
}

func (o NetworkACLResponsePtrOutput) ToNetworkACLResponsePtrOutputWithContext(ctx context.Context) NetworkACLResponsePtrOutput {
	return o
}

func (o NetworkACLResponsePtrOutput) Elem() NetworkACLResponseOutput {
	return o.ApplyT(func(v *NetworkACLResponse) NetworkACLResponse { return *v }).(NetworkACLResponseOutput)
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLResponsePtrOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkACLResponse) []string {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLResponsePtrOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkACLResponse) []string {
		if v == nil {
			return nil
		}
		return v.Deny
	}).(pulumi.StringArrayOutput)
}

// Private endpoint
type PrivateEndpoint struct {
	// Full qualified Id of the private endpoint
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//          PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// Private endpoint
type PrivateEndpointArgs struct {
	// Full qualified Id of the private endpoint
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//          PrivateEndpointArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// Private endpoint
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

// Full qualified Id of the private endpoint
func (o PrivateEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint { return *v }).(PrivateEndpointOutput)
}

// Full qualified Id of the private endpoint
func (o PrivateEndpointPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// ACL for a private endpoint
type PrivateEndpointACL struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []string `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []string `pulumi:"deny"`
	// Name of the private endpoint connection
	Name string `pulumi:"name"`
}

// PrivateEndpointACLInput is an input type that accepts PrivateEndpointACLArgs and PrivateEndpointACLOutput values.
// You can construct a concrete instance of `PrivateEndpointACLInput` via:
//
//          PrivateEndpointACLArgs{...}
type PrivateEndpointACLInput interface {
	pulumi.Input

	ToPrivateEndpointACLOutput() PrivateEndpointACLOutput
	ToPrivateEndpointACLOutputWithContext(context.Context) PrivateEndpointACLOutput
}

// ACL for a private endpoint
type PrivateEndpointACLArgs struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow pulumi.StringArrayInput `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny pulumi.StringArrayInput `pulumi:"deny"`
	// Name of the private endpoint connection
	Name pulumi.StringInput `pulumi:"name"`
}

func (PrivateEndpointACLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointACL)(nil)).Elem()
}

func (i PrivateEndpointACLArgs) ToPrivateEndpointACLOutput() PrivateEndpointACLOutput {
	return i.ToPrivateEndpointACLOutputWithContext(context.Background())
}

func (i PrivateEndpointACLArgs) ToPrivateEndpointACLOutputWithContext(ctx context.Context) PrivateEndpointACLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointACLOutput)
}

// PrivateEndpointACLArrayInput is an input type that accepts PrivateEndpointACLArray and PrivateEndpointACLArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointACLArrayInput` via:
//
//          PrivateEndpointACLArray{ PrivateEndpointACLArgs{...} }
type PrivateEndpointACLArrayInput interface {
	pulumi.Input

	ToPrivateEndpointACLArrayOutput() PrivateEndpointACLArrayOutput
	ToPrivateEndpointACLArrayOutputWithContext(context.Context) PrivateEndpointACLArrayOutput
}

type PrivateEndpointACLArray []PrivateEndpointACLInput

func (PrivateEndpointACLArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointACL)(nil)).Elem()
}

func (i PrivateEndpointACLArray) ToPrivateEndpointACLArrayOutput() PrivateEndpointACLArrayOutput {
	return i.ToPrivateEndpointACLArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointACLArray) ToPrivateEndpointACLArrayOutputWithContext(ctx context.Context) PrivateEndpointACLArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointACLArrayOutput)
}

// ACL for a private endpoint
type PrivateEndpointACLOutput struct{ *pulumi.OutputState }

func (PrivateEndpointACLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointACL)(nil)).Elem()
}

func (o PrivateEndpointACLOutput) ToPrivateEndpointACLOutput() PrivateEndpointACLOutput {
	return o
}

func (o PrivateEndpointACLOutput) ToPrivateEndpointACLOutputWithContext(ctx context.Context) PrivateEndpointACLOutput {
	return o
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o PrivateEndpointACLOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointACL) []string { return v.Allow }).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o PrivateEndpointACLOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointACL) []string { return v.Deny }).(pulumi.StringArrayOutput)
}

// Name of the private endpoint connection
func (o PrivateEndpointACLOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointACL) string { return v.Name }).(pulumi.StringOutput)
}

type PrivateEndpointACLArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointACLArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointACL)(nil)).Elem()
}

func (o PrivateEndpointACLArrayOutput) ToPrivateEndpointACLArrayOutput() PrivateEndpointACLArrayOutput {
	return o
}

func (o PrivateEndpointACLArrayOutput) ToPrivateEndpointACLArrayOutputWithContext(ctx context.Context) PrivateEndpointACLArrayOutput {
	return o
}

func (o PrivateEndpointACLArrayOutput) Index(i pulumi.IntInput) PrivateEndpointACLOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointACL {
		return vs[0].([]PrivateEndpointACL)[vs[1].(int)]
	}).(PrivateEndpointACLOutput)
}

// ACL for a private endpoint
type PrivateEndpointACLResponse struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []string `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []string `pulumi:"deny"`
	// Name of the private endpoint connection
	Name string `pulumi:"name"`
}

// PrivateEndpointACLResponseInput is an input type that accepts PrivateEndpointACLResponseArgs and PrivateEndpointACLResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointACLResponseInput` via:
//
//          PrivateEndpointACLResponseArgs{...}
type PrivateEndpointACLResponseInput interface {
	pulumi.Input

	ToPrivateEndpointACLResponseOutput() PrivateEndpointACLResponseOutput
	ToPrivateEndpointACLResponseOutputWithContext(context.Context) PrivateEndpointACLResponseOutput
}

// ACL for a private endpoint
type PrivateEndpointACLResponseArgs struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow pulumi.StringArrayInput `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny pulumi.StringArrayInput `pulumi:"deny"`
	// Name of the private endpoint connection
	Name pulumi.StringInput `pulumi:"name"`
}

func (PrivateEndpointACLResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointACLResponse)(nil)).Elem()
}

func (i PrivateEndpointACLResponseArgs) ToPrivateEndpointACLResponseOutput() PrivateEndpointACLResponseOutput {
	return i.ToPrivateEndpointACLResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointACLResponseArgs) ToPrivateEndpointACLResponseOutputWithContext(ctx context.Context) PrivateEndpointACLResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointACLResponseOutput)
}

// PrivateEndpointACLResponseArrayInput is an input type that accepts PrivateEndpointACLResponseArray and PrivateEndpointACLResponseArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointACLResponseArrayInput` via:
//
//          PrivateEndpointACLResponseArray{ PrivateEndpointACLResponseArgs{...} }
type PrivateEndpointACLResponseArrayInput interface {
	pulumi.Input

	ToPrivateEndpointACLResponseArrayOutput() PrivateEndpointACLResponseArrayOutput
	ToPrivateEndpointACLResponseArrayOutputWithContext(context.Context) PrivateEndpointACLResponseArrayOutput
}

type PrivateEndpointACLResponseArray []PrivateEndpointACLResponseInput

func (PrivateEndpointACLResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointACLResponse)(nil)).Elem()
}

func (i PrivateEndpointACLResponseArray) ToPrivateEndpointACLResponseArrayOutput() PrivateEndpointACLResponseArrayOutput {
	return i.ToPrivateEndpointACLResponseArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointACLResponseArray) ToPrivateEndpointACLResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointACLResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointACLResponseArrayOutput)
}

// ACL for a private endpoint
type PrivateEndpointACLResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointACLResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointACLResponse)(nil)).Elem()
}

func (o PrivateEndpointACLResponseOutput) ToPrivateEndpointACLResponseOutput() PrivateEndpointACLResponseOutput {
	return o
}

func (o PrivateEndpointACLResponseOutput) ToPrivateEndpointACLResponseOutputWithContext(ctx context.Context) PrivateEndpointACLResponseOutput {
	return o
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o PrivateEndpointACLResponseOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointACLResponse) []string { return v.Allow }).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o PrivateEndpointACLResponseOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointACLResponse) []string { return v.Deny }).(pulumi.StringArrayOutput)
}

// Name of the private endpoint connection
func (o PrivateEndpointACLResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointACLResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PrivateEndpointACLResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointACLResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointACLResponse)(nil)).Elem()
}

func (o PrivateEndpointACLResponseArrayOutput) ToPrivateEndpointACLResponseArrayOutput() PrivateEndpointACLResponseArrayOutput {
	return o
}

func (o PrivateEndpointACLResponseArrayOutput) ToPrivateEndpointACLResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointACLResponseArrayOutput {
	return o
}

func (o PrivateEndpointACLResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointACLResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointACLResponse {
		return vs[0].([]PrivateEndpointACLResponse)[vs[1].(int)]
	}).(PrivateEndpointACLResponseOutput)
}

// A private endpoint connection to SignalR resource
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource Id for the resource.
	Id string `pulumi:"id"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// Private endpoint associated with the private endpoint connection
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// Connection state
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the private endpoint connection
	ProvisioningState string `pulumi:"provisioningState"`
	// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type string `pulumi:"type"`
}

// PrivateEndpointConnectionResponseInput is an input type that accepts PrivateEndpointConnectionResponseArgs and PrivateEndpointConnectionResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionResponseInput` via:
//
//          PrivateEndpointConnectionResponseArgs{...}
type PrivateEndpointConnectionResponseInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput
	ToPrivateEndpointConnectionResponseOutputWithContext(context.Context) PrivateEndpointConnectionResponseOutput
}

// A private endpoint connection to SignalR resource
type PrivateEndpointConnectionResponseArgs struct {
	// Fully qualified resource Id for the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Private endpoint associated with the private endpoint connection
	PrivateEndpoint PrivateEndpointResponsePtrInput `pulumi:"privateEndpoint"`
	// Connection state
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponsePtrInput `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the private endpoint connection
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrivateEndpointConnectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (i PrivateEndpointConnectionResponseArgs) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return i.ToPrivateEndpointConnectionResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionResponseArgs) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionResponseOutput)
}

// PrivateEndpointConnectionResponseArrayInput is an input type that accepts PrivateEndpointConnectionResponseArray and PrivateEndpointConnectionResponseArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionResponseArrayInput` via:
//
//          PrivateEndpointConnectionResponseArray{ PrivateEndpointConnectionResponseArgs{...} }
type PrivateEndpointConnectionResponseArrayInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput
	ToPrivateEndpointConnectionResponseArrayOutputWithContext(context.Context) PrivateEndpointConnectionResponseArrayOutput
}

type PrivateEndpointConnectionResponseArray []PrivateEndpointConnectionResponseInput

func (PrivateEndpointConnectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (i PrivateEndpointConnectionResponseArray) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return i.ToPrivateEndpointConnectionResponseArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionResponseArray) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionResponseArrayOutput)
}

// A private endpoint connection to SignalR resource
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource Id for the resource.
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource.
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Private endpoint associated with the private endpoint connection
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// Connection state
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// Provisioning state of the private endpoint connection
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// Private endpoint
type PrivateEndpointResponse struct {
	// Full qualified Id of the private endpoint
	Id *string `pulumi:"id"`
}

// PrivateEndpointResponseInput is an input type that accepts PrivateEndpointResponseArgs and PrivateEndpointResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointResponseInput` via:
//
//          PrivateEndpointResponseArgs{...}
type PrivateEndpointResponseInput interface {
	pulumi.Input

	ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput
	ToPrivateEndpointResponseOutputWithContext(context.Context) PrivateEndpointResponseOutput
}

// Private endpoint
type PrivateEndpointResponseArgs struct {
	// Full qualified Id of the private endpoint
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return i.ToPrivateEndpointResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput)
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput).ToPrivateEndpointResponsePtrOutputWithContext(ctx)
}

// PrivateEndpointResponsePtrInput is an input type that accepts PrivateEndpointResponseArgs, PrivateEndpointResponsePtr and PrivateEndpointResponsePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointResponsePtrInput` via:
//
//          PrivateEndpointResponseArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointResponsePtrInput interface {
	pulumi.Input

	ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput
	ToPrivateEndpointResponsePtrOutputWithContext(context.Context) PrivateEndpointResponsePtrOutput
}

type privateEndpointResponsePtrType PrivateEndpointResponseArgs

func PrivateEndpointResponsePtr(v *PrivateEndpointResponseArgs) PrivateEndpointResponsePtrInput {
	return (*privateEndpointResponsePtrType)(v)
}

func (*privateEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponsePtrOutput)
}

// Private endpoint
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *PrivateEndpointResponse {
		return &v
	}).(PrivateEndpointResponsePtrOutput)
}

// Full qualified Id of the private endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse { return *v }).(PrivateEndpointResponseOutput)
}

// Full qualified Id of the private endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//          PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput).ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStatePtrInput is an input type that accepts PrivateLinkServiceConnectionStateArgs, PrivateLinkServiceConnectionStatePtr and PrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStatePtrInput` via:
//
//          PrivateLinkServiceConnectionStateArgs{...}
//
//  or:
//
//          nil
type PrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput
	ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStatePtrOutput
}

type privateLinkServiceConnectionStatePtrType PrivateLinkServiceConnectionStateArgs

func PrivateLinkServiceConnectionStatePtr(v *PrivateLinkServiceConnectionStateArgs) PrivateLinkServiceConnectionStatePtrInput {
	return (*privateLinkServiceConnectionStatePtrType)(v)
}

func (*privateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStatePtrOutput)
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *PrivateLinkServiceConnectionState {
		return &v
	}).(PrivateLinkServiceConnectionStatePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) Elem() PrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) PrivateLinkServiceConnectionState { return *v }).(PrivateLinkServiceConnectionStateOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateResponseInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs and PrivateLinkServiceConnectionStateResponseOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponseInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
type PrivateLinkServiceConnectionStateResponseInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput
	ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponseOutput
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateResponseArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return i.ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput)
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput).ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStateResponsePtrInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs, PrivateLinkServiceConnectionStateResponsePtr and PrivateLinkServiceConnectionStateResponsePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponsePtrInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
//
//  or:
//
//          nil
type PrivateLinkServiceConnectionStateResponsePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput
	ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput
}

type privateLinkServiceConnectionStateResponsePtrType PrivateLinkServiceConnectionStateResponseArgs

func PrivateLinkServiceConnectionStateResponsePtr(v *PrivateLinkServiceConnectionStateResponseArgs) PrivateLinkServiceConnectionStateResponsePtrInput {
	return (*privateLinkServiceConnectionStateResponsePtrType)(v)
}

func (*privateLinkServiceConnectionStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *PrivateLinkServiceConnectionStateResponse {
		return &v
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		return *v
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The billing information of the SignalR resource.
type ResourceSku struct {
	// Optional, integer. The unit count of SignalR resource. 1 by default.
	//
	// If present, following values are allowed:
	//     Free: 1
	//     Standard: 1,2,5,10,20,50,100
	Capacity *int `pulumi:"capacity"`
	// Optional string. For future use.
	Family *string `pulumi:"family"`
	// The name of the SKU. Required.
	//
	// Allowed values: Standard_S1, Free_F1
	Name string `pulumi:"name"`
	// Optional string. For future use.
	Size *string `pulumi:"size"`
	// Optional tier of this particular SKU. 'Standard' or 'Free'.
	//
	// `Basic` is deprecated, use `Standard` instead.
	Tier *string `pulumi:"tier"`
}

// ResourceSkuInput is an input type that accepts ResourceSkuArgs and ResourceSkuOutput values.
// You can construct a concrete instance of `ResourceSkuInput` via:
//
//          ResourceSkuArgs{...}
type ResourceSkuInput interface {
	pulumi.Input

	ToResourceSkuOutput() ResourceSkuOutput
	ToResourceSkuOutputWithContext(context.Context) ResourceSkuOutput
}

// The billing information of the SignalR resource.
type ResourceSkuArgs struct {
	// Optional, integer. The unit count of SignalR resource. 1 by default.
	//
	// If present, following values are allowed:
	//     Free: 1
	//     Standard: 1,2,5,10,20,50,100
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Optional string. For future use.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Required.
	//
	// Allowed values: Standard_S1, Free_F1
	Name pulumi.StringInput `pulumi:"name"`
	// Optional string. For future use.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// Optional tier of this particular SKU. 'Standard' or 'Free'.
	//
	// `Basic` is deprecated, use `Standard` instead.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ResourceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSku)(nil)).Elem()
}

func (i ResourceSkuArgs) ToResourceSkuOutput() ResourceSkuOutput {
	return i.ToResourceSkuOutputWithContext(context.Background())
}

func (i ResourceSkuArgs) ToResourceSkuOutputWithContext(ctx context.Context) ResourceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuOutput)
}

func (i ResourceSkuArgs) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return i.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (i ResourceSkuArgs) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuOutput).ToResourceSkuPtrOutputWithContext(ctx)
}

// ResourceSkuPtrInput is an input type that accepts ResourceSkuArgs, ResourceSkuPtr and ResourceSkuPtrOutput values.
// You can construct a concrete instance of `ResourceSkuPtrInput` via:
//
//          ResourceSkuArgs{...}
//
//  or:
//
//          nil
type ResourceSkuPtrInput interface {
	pulumi.Input

	ToResourceSkuPtrOutput() ResourceSkuPtrOutput
	ToResourceSkuPtrOutputWithContext(context.Context) ResourceSkuPtrOutput
}

type resourceSkuPtrType ResourceSkuArgs

func ResourceSkuPtr(v *ResourceSkuArgs) ResourceSkuPtrInput {
	return (*resourceSkuPtrType)(v)
}

func (*resourceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSku)(nil)).Elem()
}

func (i *resourceSkuPtrType) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return i.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (i *resourceSkuPtrType) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuPtrOutput)
}

// The billing information of the SignalR resource.
type ResourceSkuOutput struct{ *pulumi.OutputState }

func (ResourceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSku)(nil)).Elem()
}

func (o ResourceSkuOutput) ToResourceSkuOutput() ResourceSkuOutput {
	return o
}

func (o ResourceSkuOutput) ToResourceSkuOutputWithContext(ctx context.Context) ResourceSkuOutput {
	return o
}

func (o ResourceSkuOutput) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return o.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (o ResourceSkuOutput) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return o.ApplyT(func(v ResourceSku) *ResourceSku {
		return &v
	}).(ResourceSkuPtrOutput)
}

// Optional, integer. The unit count of SignalR resource. 1 by default.
//
// If present, following values are allowed:
//     Free: 1
//     Standard: 1,2,5,10,20,50,100
func (o ResourceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Optional string. For future use.
func (o ResourceSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Required.
//
// Allowed values: Standard_S1, Free_F1
func (o ResourceSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSku) string { return v.Name }).(pulumi.StringOutput)
}

// Optional string. For future use.
func (o ResourceSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// Optional tier of this particular SKU. 'Standard' or 'Free'.
//
// `Basic` is deprecated, use `Standard` instead.
func (o ResourceSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ResourceSkuPtrOutput struct{ *pulumi.OutputState }

func (ResourceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSku)(nil)).Elem()
}

func (o ResourceSkuPtrOutput) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return o
}

func (o ResourceSkuPtrOutput) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return o
}

func (o ResourceSkuPtrOutput) Elem() ResourceSkuOutput {
	return o.ApplyT(func(v *ResourceSku) ResourceSku { return *v }).(ResourceSkuOutput)
}

// Optional, integer. The unit count of SignalR resource. 1 by default.
//
// If present, following values are allowed:
//     Free: 1
//     Standard: 1,2,5,10,20,50,100
func (o ResourceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Optional string. For future use.
func (o ResourceSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Required.
//
// Allowed values: Standard_S1, Free_F1
func (o ResourceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Optional string. For future use.
func (o ResourceSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// Optional tier of this particular SKU. 'Standard' or 'Free'.
//
// `Basic` is deprecated, use `Standard` instead.
func (o ResourceSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The billing information of the SignalR resource.
type ResourceSkuResponse struct {
	// Optional, integer. The unit count of SignalR resource. 1 by default.
	//
	// If present, following values are allowed:
	//     Free: 1
	//     Standard: 1,2,5,10,20,50,100
	Capacity *int `pulumi:"capacity"`
	// Optional string. For future use.
	Family *string `pulumi:"family"`
	// The name of the SKU. Required.
	//
	// Allowed values: Standard_S1, Free_F1
	Name string `pulumi:"name"`
	// Optional string. For future use.
	Size *string `pulumi:"size"`
	// Optional tier of this particular SKU. 'Standard' or 'Free'.
	//
	// `Basic` is deprecated, use `Standard` instead.
	Tier *string `pulumi:"tier"`
}

// ResourceSkuResponseInput is an input type that accepts ResourceSkuResponseArgs and ResourceSkuResponseOutput values.
// You can construct a concrete instance of `ResourceSkuResponseInput` via:
//
//          ResourceSkuResponseArgs{...}
type ResourceSkuResponseInput interface {
	pulumi.Input

	ToResourceSkuResponseOutput() ResourceSkuResponseOutput
	ToResourceSkuResponseOutputWithContext(context.Context) ResourceSkuResponseOutput
}

// The billing information of the SignalR resource.
type ResourceSkuResponseArgs struct {
	// Optional, integer. The unit count of SignalR resource. 1 by default.
	//
	// If present, following values are allowed:
	//     Free: 1
	//     Standard: 1,2,5,10,20,50,100
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Optional string. For future use.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Required.
	//
	// Allowed values: Standard_S1, Free_F1
	Name pulumi.StringInput `pulumi:"name"`
	// Optional string. For future use.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// Optional tier of this particular SKU. 'Standard' or 'Free'.
	//
	// `Basic` is deprecated, use `Standard` instead.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ResourceSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSkuResponse)(nil)).Elem()
}

func (i ResourceSkuResponseArgs) ToResourceSkuResponseOutput() ResourceSkuResponseOutput {
	return i.ToResourceSkuResponseOutputWithContext(context.Background())
}

func (i ResourceSkuResponseArgs) ToResourceSkuResponseOutputWithContext(ctx context.Context) ResourceSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuResponseOutput)
}

func (i ResourceSkuResponseArgs) ToResourceSkuResponsePtrOutput() ResourceSkuResponsePtrOutput {
	return i.ToResourceSkuResponsePtrOutputWithContext(context.Background())
}

func (i ResourceSkuResponseArgs) ToResourceSkuResponsePtrOutputWithContext(ctx context.Context) ResourceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuResponseOutput).ToResourceSkuResponsePtrOutputWithContext(ctx)
}

// ResourceSkuResponsePtrInput is an input type that accepts ResourceSkuResponseArgs, ResourceSkuResponsePtr and ResourceSkuResponsePtrOutput values.
// You can construct a concrete instance of `ResourceSkuResponsePtrInput` via:
//
//          ResourceSkuResponseArgs{...}
//
//  or:
//
//          nil
type ResourceSkuResponsePtrInput interface {
	pulumi.Input

	ToResourceSkuResponsePtrOutput() ResourceSkuResponsePtrOutput
	ToResourceSkuResponsePtrOutputWithContext(context.Context) ResourceSkuResponsePtrOutput
}

type resourceSkuResponsePtrType ResourceSkuResponseArgs

func ResourceSkuResponsePtr(v *ResourceSkuResponseArgs) ResourceSkuResponsePtrInput {
	return (*resourceSkuResponsePtrType)(v)
}

func (*resourceSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSkuResponse)(nil)).Elem()
}

func (i *resourceSkuResponsePtrType) ToResourceSkuResponsePtrOutput() ResourceSkuResponsePtrOutput {
	return i.ToResourceSkuResponsePtrOutputWithContext(context.Background())
}

func (i *resourceSkuResponsePtrType) ToResourceSkuResponsePtrOutputWithContext(ctx context.Context) ResourceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuResponsePtrOutput)
}

// The billing information of the SignalR resource.
type ResourceSkuResponseOutput struct{ *pulumi.OutputState }

func (ResourceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSkuResponse)(nil)).Elem()
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponseOutput() ResourceSkuResponseOutput {
	return o
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponseOutputWithContext(ctx context.Context) ResourceSkuResponseOutput {
	return o
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponsePtrOutput() ResourceSkuResponsePtrOutput {
	return o.ToResourceSkuResponsePtrOutputWithContext(context.Background())
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponsePtrOutputWithContext(ctx context.Context) ResourceSkuResponsePtrOutput {
	return o.ApplyT(func(v ResourceSkuResponse) *ResourceSkuResponse {
		return &v
	}).(ResourceSkuResponsePtrOutput)
}

// Optional, integer. The unit count of SignalR resource. 1 by default.
//
// If present, following values are allowed:
//     Free: 1
//     Standard: 1,2,5,10,20,50,100
func (o ResourceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Optional string. For future use.
func (o ResourceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Required.
//
// Allowed values: Standard_S1, Free_F1
func (o ResourceSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional string. For future use.
func (o ResourceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// Optional tier of this particular SKU. 'Standard' or 'Free'.
//
// `Basic` is deprecated, use `Standard` instead.
func (o ResourceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ResourceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSkuResponse)(nil)).Elem()
}

func (o ResourceSkuResponsePtrOutput) ToResourceSkuResponsePtrOutput() ResourceSkuResponsePtrOutput {
	return o
}

func (o ResourceSkuResponsePtrOutput) ToResourceSkuResponsePtrOutputWithContext(ctx context.Context) ResourceSkuResponsePtrOutput {
	return o
}

func (o ResourceSkuResponsePtrOutput) Elem() ResourceSkuResponseOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) ResourceSkuResponse { return *v }).(ResourceSkuResponseOutput)
}

// Optional, integer. The unit count of SignalR resource. 1 by default.
//
// If present, following values are allowed:
//     Free: 1
//     Standard: 1,2,5,10,20,50,100
func (o ResourceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Optional string. For future use.
func (o ResourceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Required.
//
// Allowed values: Standard_S1, Free_F1
func (o ResourceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Optional string. For future use.
func (o ResourceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// Optional tier of this particular SKU. 'Standard' or 'Free'.
//
// `Basic` is deprecated, use `Standard` instead.
func (o ResourceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The settings for the Upstream when the Azure SignalR is in server-less mode.
type ServerlessUpstreamSettings struct {
	// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates []UpstreamTemplate `pulumi:"templates"`
}

// ServerlessUpstreamSettingsInput is an input type that accepts ServerlessUpstreamSettingsArgs and ServerlessUpstreamSettingsOutput values.
// You can construct a concrete instance of `ServerlessUpstreamSettingsInput` via:
//
//          ServerlessUpstreamSettingsArgs{...}
type ServerlessUpstreamSettingsInput interface {
	pulumi.Input

	ToServerlessUpstreamSettingsOutput() ServerlessUpstreamSettingsOutput
	ToServerlessUpstreamSettingsOutputWithContext(context.Context) ServerlessUpstreamSettingsOutput
}

// The settings for the Upstream when the Azure SignalR is in server-less mode.
type ServerlessUpstreamSettingsArgs struct {
	// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates UpstreamTemplateArrayInput `pulumi:"templates"`
}

func (ServerlessUpstreamSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessUpstreamSettings)(nil)).Elem()
}

func (i ServerlessUpstreamSettingsArgs) ToServerlessUpstreamSettingsOutput() ServerlessUpstreamSettingsOutput {
	return i.ToServerlessUpstreamSettingsOutputWithContext(context.Background())
}

func (i ServerlessUpstreamSettingsArgs) ToServerlessUpstreamSettingsOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsOutput)
}

func (i ServerlessUpstreamSettingsArgs) ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput {
	return i.ToServerlessUpstreamSettingsPtrOutputWithContext(context.Background())
}

func (i ServerlessUpstreamSettingsArgs) ToServerlessUpstreamSettingsPtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsOutput).ToServerlessUpstreamSettingsPtrOutputWithContext(ctx)
}

// ServerlessUpstreamSettingsPtrInput is an input type that accepts ServerlessUpstreamSettingsArgs, ServerlessUpstreamSettingsPtr and ServerlessUpstreamSettingsPtrOutput values.
// You can construct a concrete instance of `ServerlessUpstreamSettingsPtrInput` via:
//
//          ServerlessUpstreamSettingsArgs{...}
//
//  or:
//
//          nil
type ServerlessUpstreamSettingsPtrInput interface {
	pulumi.Input

	ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput
	ToServerlessUpstreamSettingsPtrOutputWithContext(context.Context) ServerlessUpstreamSettingsPtrOutput
}

type serverlessUpstreamSettingsPtrType ServerlessUpstreamSettingsArgs

func ServerlessUpstreamSettingsPtr(v *ServerlessUpstreamSettingsArgs) ServerlessUpstreamSettingsPtrInput {
	return (*serverlessUpstreamSettingsPtrType)(v)
}

func (*serverlessUpstreamSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessUpstreamSettings)(nil)).Elem()
}

func (i *serverlessUpstreamSettingsPtrType) ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput {
	return i.ToServerlessUpstreamSettingsPtrOutputWithContext(context.Background())
}

func (i *serverlessUpstreamSettingsPtrType) ToServerlessUpstreamSettingsPtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsPtrOutput)
}

// The settings for the Upstream when the Azure SignalR is in server-less mode.
type ServerlessUpstreamSettingsOutput struct{ *pulumi.OutputState }

func (ServerlessUpstreamSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessUpstreamSettings)(nil)).Elem()
}

func (o ServerlessUpstreamSettingsOutput) ToServerlessUpstreamSettingsOutput() ServerlessUpstreamSettingsOutput {
	return o
}

func (o ServerlessUpstreamSettingsOutput) ToServerlessUpstreamSettingsOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsOutput {
	return o
}

func (o ServerlessUpstreamSettingsOutput) ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput {
	return o.ToServerlessUpstreamSettingsPtrOutputWithContext(context.Background())
}

func (o ServerlessUpstreamSettingsOutput) ToServerlessUpstreamSettingsPtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsPtrOutput {
	return o.ApplyT(func(v ServerlessUpstreamSettings) *ServerlessUpstreamSettings {
		return &v
	}).(ServerlessUpstreamSettingsPtrOutput)
}

// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
func (o ServerlessUpstreamSettingsOutput) Templates() UpstreamTemplateArrayOutput {
	return o.ApplyT(func(v ServerlessUpstreamSettings) []UpstreamTemplate { return v.Templates }).(UpstreamTemplateArrayOutput)
}

type ServerlessUpstreamSettingsPtrOutput struct{ *pulumi.OutputState }

func (ServerlessUpstreamSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessUpstreamSettings)(nil)).Elem()
}

func (o ServerlessUpstreamSettingsPtrOutput) ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput {
	return o
}

func (o ServerlessUpstreamSettingsPtrOutput) ToServerlessUpstreamSettingsPtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsPtrOutput {
	return o
}

func (o ServerlessUpstreamSettingsPtrOutput) Elem() ServerlessUpstreamSettingsOutput {
	return o.ApplyT(func(v *ServerlessUpstreamSettings) ServerlessUpstreamSettings { return *v }).(ServerlessUpstreamSettingsOutput)
}

// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
func (o ServerlessUpstreamSettingsPtrOutput) Templates() UpstreamTemplateArrayOutput {
	return o.ApplyT(func(v *ServerlessUpstreamSettings) []UpstreamTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(UpstreamTemplateArrayOutput)
}

// The settings for the Upstream when the Azure SignalR is in server-less mode.
type ServerlessUpstreamSettingsResponse struct {
	// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates []UpstreamTemplateResponse `pulumi:"templates"`
}

// ServerlessUpstreamSettingsResponseInput is an input type that accepts ServerlessUpstreamSettingsResponseArgs and ServerlessUpstreamSettingsResponseOutput values.
// You can construct a concrete instance of `ServerlessUpstreamSettingsResponseInput` via:
//
//          ServerlessUpstreamSettingsResponseArgs{...}
type ServerlessUpstreamSettingsResponseInput interface {
	pulumi.Input

	ToServerlessUpstreamSettingsResponseOutput() ServerlessUpstreamSettingsResponseOutput
	ToServerlessUpstreamSettingsResponseOutputWithContext(context.Context) ServerlessUpstreamSettingsResponseOutput
}

// The settings for the Upstream when the Azure SignalR is in server-less mode.
type ServerlessUpstreamSettingsResponseArgs struct {
	// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates UpstreamTemplateResponseArrayInput `pulumi:"templates"`
}

func (ServerlessUpstreamSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessUpstreamSettingsResponse)(nil)).Elem()
}

func (i ServerlessUpstreamSettingsResponseArgs) ToServerlessUpstreamSettingsResponseOutput() ServerlessUpstreamSettingsResponseOutput {
	return i.ToServerlessUpstreamSettingsResponseOutputWithContext(context.Background())
}

func (i ServerlessUpstreamSettingsResponseArgs) ToServerlessUpstreamSettingsResponseOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsResponseOutput)
}

func (i ServerlessUpstreamSettingsResponseArgs) ToServerlessUpstreamSettingsResponsePtrOutput() ServerlessUpstreamSettingsResponsePtrOutput {
	return i.ToServerlessUpstreamSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ServerlessUpstreamSettingsResponseArgs) ToServerlessUpstreamSettingsResponsePtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsResponseOutput).ToServerlessUpstreamSettingsResponsePtrOutputWithContext(ctx)
}

// ServerlessUpstreamSettingsResponsePtrInput is an input type that accepts ServerlessUpstreamSettingsResponseArgs, ServerlessUpstreamSettingsResponsePtr and ServerlessUpstreamSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ServerlessUpstreamSettingsResponsePtrInput` via:
//
//          ServerlessUpstreamSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ServerlessUpstreamSettingsResponsePtrInput interface {
	pulumi.Input

	ToServerlessUpstreamSettingsResponsePtrOutput() ServerlessUpstreamSettingsResponsePtrOutput
	ToServerlessUpstreamSettingsResponsePtrOutputWithContext(context.Context) ServerlessUpstreamSettingsResponsePtrOutput
}

type serverlessUpstreamSettingsResponsePtrType ServerlessUpstreamSettingsResponseArgs

func ServerlessUpstreamSettingsResponsePtr(v *ServerlessUpstreamSettingsResponseArgs) ServerlessUpstreamSettingsResponsePtrInput {
	return (*serverlessUpstreamSettingsResponsePtrType)(v)
}

func (*serverlessUpstreamSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessUpstreamSettingsResponse)(nil)).Elem()
}

func (i *serverlessUpstreamSettingsResponsePtrType) ToServerlessUpstreamSettingsResponsePtrOutput() ServerlessUpstreamSettingsResponsePtrOutput {
	return i.ToServerlessUpstreamSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *serverlessUpstreamSettingsResponsePtrType) ToServerlessUpstreamSettingsResponsePtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsResponsePtrOutput)
}

// The settings for the Upstream when the Azure SignalR is in server-less mode.
type ServerlessUpstreamSettingsResponseOutput struct{ *pulumi.OutputState }

func (ServerlessUpstreamSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessUpstreamSettingsResponse)(nil)).Elem()
}

func (o ServerlessUpstreamSettingsResponseOutput) ToServerlessUpstreamSettingsResponseOutput() ServerlessUpstreamSettingsResponseOutput {
	return o
}

func (o ServerlessUpstreamSettingsResponseOutput) ToServerlessUpstreamSettingsResponseOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsResponseOutput {
	return o
}

func (o ServerlessUpstreamSettingsResponseOutput) ToServerlessUpstreamSettingsResponsePtrOutput() ServerlessUpstreamSettingsResponsePtrOutput {
	return o.ToServerlessUpstreamSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ServerlessUpstreamSettingsResponseOutput) ToServerlessUpstreamSettingsResponsePtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsResponsePtrOutput {
	return o.ApplyT(func(v ServerlessUpstreamSettingsResponse) *ServerlessUpstreamSettingsResponse {
		return &v
	}).(ServerlessUpstreamSettingsResponsePtrOutput)
}

// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
func (o ServerlessUpstreamSettingsResponseOutput) Templates() UpstreamTemplateResponseArrayOutput {
	return o.ApplyT(func(v ServerlessUpstreamSettingsResponse) []UpstreamTemplateResponse { return v.Templates }).(UpstreamTemplateResponseArrayOutput)
}

type ServerlessUpstreamSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerlessUpstreamSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessUpstreamSettingsResponse)(nil)).Elem()
}

func (o ServerlessUpstreamSettingsResponsePtrOutput) ToServerlessUpstreamSettingsResponsePtrOutput() ServerlessUpstreamSettingsResponsePtrOutput {
	return o
}

func (o ServerlessUpstreamSettingsResponsePtrOutput) ToServerlessUpstreamSettingsResponsePtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsResponsePtrOutput {
	return o
}

func (o ServerlessUpstreamSettingsResponsePtrOutput) Elem() ServerlessUpstreamSettingsResponseOutput {
	return o.ApplyT(func(v *ServerlessUpstreamSettingsResponse) ServerlessUpstreamSettingsResponse { return *v }).(ServerlessUpstreamSettingsResponseOutput)
}

// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
func (o ServerlessUpstreamSettingsResponsePtrOutput) Templates() UpstreamTemplateResponseArrayOutput {
	return o.ApplyT(func(v *ServerlessUpstreamSettingsResponse) []UpstreamTemplateResponse {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(UpstreamTemplateResponseArrayOutput)
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettings struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
}

// SignalRCorsSettingsInput is an input type that accepts SignalRCorsSettingsArgs and SignalRCorsSettingsOutput values.
// You can construct a concrete instance of `SignalRCorsSettingsInput` via:
//
//          SignalRCorsSettingsArgs{...}
type SignalRCorsSettingsInput interface {
	pulumi.Input

	ToSignalRCorsSettingsOutput() SignalRCorsSettingsOutput
	ToSignalRCorsSettingsOutputWithContext(context.Context) SignalRCorsSettingsOutput
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsArgs struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
}

func (SignalRCorsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRCorsSettings)(nil)).Elem()
}

func (i SignalRCorsSettingsArgs) ToSignalRCorsSettingsOutput() SignalRCorsSettingsOutput {
	return i.ToSignalRCorsSettingsOutputWithContext(context.Background())
}

func (i SignalRCorsSettingsArgs) ToSignalRCorsSettingsOutputWithContext(ctx context.Context) SignalRCorsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsOutput)
}

func (i SignalRCorsSettingsArgs) ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput {
	return i.ToSignalRCorsSettingsPtrOutputWithContext(context.Background())
}

func (i SignalRCorsSettingsArgs) ToSignalRCorsSettingsPtrOutputWithContext(ctx context.Context) SignalRCorsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsOutput).ToSignalRCorsSettingsPtrOutputWithContext(ctx)
}

// SignalRCorsSettingsPtrInput is an input type that accepts SignalRCorsSettingsArgs, SignalRCorsSettingsPtr and SignalRCorsSettingsPtrOutput values.
// You can construct a concrete instance of `SignalRCorsSettingsPtrInput` via:
//
//          SignalRCorsSettingsArgs{...}
//
//  or:
//
//          nil
type SignalRCorsSettingsPtrInput interface {
	pulumi.Input

	ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput
	ToSignalRCorsSettingsPtrOutputWithContext(context.Context) SignalRCorsSettingsPtrOutput
}

type signalRCorsSettingsPtrType SignalRCorsSettingsArgs

func SignalRCorsSettingsPtr(v *SignalRCorsSettingsArgs) SignalRCorsSettingsPtrInput {
	return (*signalRCorsSettingsPtrType)(v)
}

func (*signalRCorsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRCorsSettings)(nil)).Elem()
}

func (i *signalRCorsSettingsPtrType) ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput {
	return i.ToSignalRCorsSettingsPtrOutputWithContext(context.Background())
}

func (i *signalRCorsSettingsPtrType) ToSignalRCorsSettingsPtrOutputWithContext(ctx context.Context) SignalRCorsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsPtrOutput)
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsOutput struct{ *pulumi.OutputState }

func (SignalRCorsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRCorsSettings)(nil)).Elem()
}

func (o SignalRCorsSettingsOutput) ToSignalRCorsSettingsOutput() SignalRCorsSettingsOutput {
	return o
}

func (o SignalRCorsSettingsOutput) ToSignalRCorsSettingsOutputWithContext(ctx context.Context) SignalRCorsSettingsOutput {
	return o
}

func (o SignalRCorsSettingsOutput) ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput {
	return o.ToSignalRCorsSettingsPtrOutputWithContext(context.Background())
}

func (o SignalRCorsSettingsOutput) ToSignalRCorsSettingsPtrOutputWithContext(ctx context.Context) SignalRCorsSettingsPtrOutput {
	return o.ApplyT(func(v SignalRCorsSettings) *SignalRCorsSettings {
		return &v
	}).(SignalRCorsSettingsPtrOutput)
}

// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
func (o SignalRCorsSettingsOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalRCorsSettings) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

type SignalRCorsSettingsPtrOutput struct{ *pulumi.OutputState }

func (SignalRCorsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRCorsSettings)(nil)).Elem()
}

func (o SignalRCorsSettingsPtrOutput) ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput {
	return o
}

func (o SignalRCorsSettingsPtrOutput) ToSignalRCorsSettingsPtrOutputWithContext(ctx context.Context) SignalRCorsSettingsPtrOutput {
	return o
}

func (o SignalRCorsSettingsPtrOutput) Elem() SignalRCorsSettingsOutput {
	return o.ApplyT(func(v *SignalRCorsSettings) SignalRCorsSettings { return *v }).(SignalRCorsSettingsOutput)
}

// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
func (o SignalRCorsSettingsPtrOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalRCorsSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOrigins
	}).(pulumi.StringArrayOutput)
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsResponse struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
}

// SignalRCorsSettingsResponseInput is an input type that accepts SignalRCorsSettingsResponseArgs and SignalRCorsSettingsResponseOutput values.
// You can construct a concrete instance of `SignalRCorsSettingsResponseInput` via:
//
//          SignalRCorsSettingsResponseArgs{...}
type SignalRCorsSettingsResponseInput interface {
	pulumi.Input

	ToSignalRCorsSettingsResponseOutput() SignalRCorsSettingsResponseOutput
	ToSignalRCorsSettingsResponseOutputWithContext(context.Context) SignalRCorsSettingsResponseOutput
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsResponseArgs struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
}

func (SignalRCorsSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRCorsSettingsResponse)(nil)).Elem()
}

func (i SignalRCorsSettingsResponseArgs) ToSignalRCorsSettingsResponseOutput() SignalRCorsSettingsResponseOutput {
	return i.ToSignalRCorsSettingsResponseOutputWithContext(context.Background())
}

func (i SignalRCorsSettingsResponseArgs) ToSignalRCorsSettingsResponseOutputWithContext(ctx context.Context) SignalRCorsSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsResponseOutput)
}

func (i SignalRCorsSettingsResponseArgs) ToSignalRCorsSettingsResponsePtrOutput() SignalRCorsSettingsResponsePtrOutput {
	return i.ToSignalRCorsSettingsResponsePtrOutputWithContext(context.Background())
}

func (i SignalRCorsSettingsResponseArgs) ToSignalRCorsSettingsResponsePtrOutputWithContext(ctx context.Context) SignalRCorsSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsResponseOutput).ToSignalRCorsSettingsResponsePtrOutputWithContext(ctx)
}

// SignalRCorsSettingsResponsePtrInput is an input type that accepts SignalRCorsSettingsResponseArgs, SignalRCorsSettingsResponsePtr and SignalRCorsSettingsResponsePtrOutput values.
// You can construct a concrete instance of `SignalRCorsSettingsResponsePtrInput` via:
//
//          SignalRCorsSettingsResponseArgs{...}
//
//  or:
//
//          nil
type SignalRCorsSettingsResponsePtrInput interface {
	pulumi.Input

	ToSignalRCorsSettingsResponsePtrOutput() SignalRCorsSettingsResponsePtrOutput
	ToSignalRCorsSettingsResponsePtrOutputWithContext(context.Context) SignalRCorsSettingsResponsePtrOutput
}

type signalRCorsSettingsResponsePtrType SignalRCorsSettingsResponseArgs

func SignalRCorsSettingsResponsePtr(v *SignalRCorsSettingsResponseArgs) SignalRCorsSettingsResponsePtrInput {
	return (*signalRCorsSettingsResponsePtrType)(v)
}

func (*signalRCorsSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRCorsSettingsResponse)(nil)).Elem()
}

func (i *signalRCorsSettingsResponsePtrType) ToSignalRCorsSettingsResponsePtrOutput() SignalRCorsSettingsResponsePtrOutput {
	return i.ToSignalRCorsSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *signalRCorsSettingsResponsePtrType) ToSignalRCorsSettingsResponsePtrOutputWithContext(ctx context.Context) SignalRCorsSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsResponsePtrOutput)
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsResponseOutput struct{ *pulumi.OutputState }

func (SignalRCorsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRCorsSettingsResponse)(nil)).Elem()
}

func (o SignalRCorsSettingsResponseOutput) ToSignalRCorsSettingsResponseOutput() SignalRCorsSettingsResponseOutput {
	return o
}

func (o SignalRCorsSettingsResponseOutput) ToSignalRCorsSettingsResponseOutputWithContext(ctx context.Context) SignalRCorsSettingsResponseOutput {
	return o
}

func (o SignalRCorsSettingsResponseOutput) ToSignalRCorsSettingsResponsePtrOutput() SignalRCorsSettingsResponsePtrOutput {
	return o.ToSignalRCorsSettingsResponsePtrOutputWithContext(context.Background())
}

func (o SignalRCorsSettingsResponseOutput) ToSignalRCorsSettingsResponsePtrOutputWithContext(ctx context.Context) SignalRCorsSettingsResponsePtrOutput {
	return o.ApplyT(func(v SignalRCorsSettingsResponse) *SignalRCorsSettingsResponse {
		return &v
	}).(SignalRCorsSettingsResponsePtrOutput)
}

// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
func (o SignalRCorsSettingsResponseOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalRCorsSettingsResponse) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

type SignalRCorsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SignalRCorsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRCorsSettingsResponse)(nil)).Elem()
}

func (o SignalRCorsSettingsResponsePtrOutput) ToSignalRCorsSettingsResponsePtrOutput() SignalRCorsSettingsResponsePtrOutput {
	return o
}

func (o SignalRCorsSettingsResponsePtrOutput) ToSignalRCorsSettingsResponsePtrOutputWithContext(ctx context.Context) SignalRCorsSettingsResponsePtrOutput {
	return o
}

func (o SignalRCorsSettingsResponsePtrOutput) Elem() SignalRCorsSettingsResponseOutput {
	return o.ApplyT(func(v *SignalRCorsSettingsResponse) SignalRCorsSettingsResponse { return *v }).(SignalRCorsSettingsResponseOutput)
}

// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
func (o SignalRCorsSettingsResponsePtrOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalRCorsSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOrigins
	}).(pulumi.StringArrayOutput)
}

// Feature of a SignalR resource, which controls the SignalR runtime behavior.
type SignalRFeature struct {
	// FeatureFlags is the supported features of Azure SignalR service.
	// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
	// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	Flag string `pulumi:"flag"`
	// Optional properties related to this feature.
	Properties map[string]string `pulumi:"properties"`
	// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value string `pulumi:"value"`
}

// SignalRFeatureInput is an input type that accepts SignalRFeatureArgs and SignalRFeatureOutput values.
// You can construct a concrete instance of `SignalRFeatureInput` via:
//
//          SignalRFeatureArgs{...}
type SignalRFeatureInput interface {
	pulumi.Input

	ToSignalRFeatureOutput() SignalRFeatureOutput
	ToSignalRFeatureOutputWithContext(context.Context) SignalRFeatureOutput
}

// Feature of a SignalR resource, which controls the SignalR runtime behavior.
type SignalRFeatureArgs struct {
	// FeatureFlags is the supported features of Azure SignalR service.
	// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
	// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	Flag pulumi.StringInput `pulumi:"flag"`
	// Optional properties related to this feature.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SignalRFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRFeature)(nil)).Elem()
}

func (i SignalRFeatureArgs) ToSignalRFeatureOutput() SignalRFeatureOutput {
	return i.ToSignalRFeatureOutputWithContext(context.Background())
}

func (i SignalRFeatureArgs) ToSignalRFeatureOutputWithContext(ctx context.Context) SignalRFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRFeatureOutput)
}

// SignalRFeatureArrayInput is an input type that accepts SignalRFeatureArray and SignalRFeatureArrayOutput values.
// You can construct a concrete instance of `SignalRFeatureArrayInput` via:
//
//          SignalRFeatureArray{ SignalRFeatureArgs{...} }
type SignalRFeatureArrayInput interface {
	pulumi.Input

	ToSignalRFeatureArrayOutput() SignalRFeatureArrayOutput
	ToSignalRFeatureArrayOutputWithContext(context.Context) SignalRFeatureArrayOutput
}

type SignalRFeatureArray []SignalRFeatureInput

func (SignalRFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalRFeature)(nil)).Elem()
}

func (i SignalRFeatureArray) ToSignalRFeatureArrayOutput() SignalRFeatureArrayOutput {
	return i.ToSignalRFeatureArrayOutputWithContext(context.Background())
}

func (i SignalRFeatureArray) ToSignalRFeatureArrayOutputWithContext(ctx context.Context) SignalRFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRFeatureArrayOutput)
}

// Feature of a SignalR resource, which controls the SignalR runtime behavior.
type SignalRFeatureOutput struct{ *pulumi.OutputState }

func (SignalRFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRFeature)(nil)).Elem()
}

func (o SignalRFeatureOutput) ToSignalRFeatureOutput() SignalRFeatureOutput {
	return o
}

func (o SignalRFeatureOutput) ToSignalRFeatureOutputWithContext(ctx context.Context) SignalRFeatureOutput {
	return o
}

// FeatureFlags is the supported features of Azure SignalR service.
// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
func (o SignalRFeatureOutput) Flag() pulumi.StringOutput {
	return o.ApplyT(func(v SignalRFeature) string { return v.Flag }).(pulumi.StringOutput)
}

// Optional properties related to this feature.
func (o SignalRFeatureOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SignalRFeature) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
func (o SignalRFeatureOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SignalRFeature) string { return v.Value }).(pulumi.StringOutput)
}

type SignalRFeatureArrayOutput struct{ *pulumi.OutputState }

func (SignalRFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalRFeature)(nil)).Elem()
}

func (o SignalRFeatureArrayOutput) ToSignalRFeatureArrayOutput() SignalRFeatureArrayOutput {
	return o
}

func (o SignalRFeatureArrayOutput) ToSignalRFeatureArrayOutputWithContext(ctx context.Context) SignalRFeatureArrayOutput {
	return o
}

func (o SignalRFeatureArrayOutput) Index(i pulumi.IntInput) SignalRFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignalRFeature {
		return vs[0].([]SignalRFeature)[vs[1].(int)]
	}).(SignalRFeatureOutput)
}

// Feature of a SignalR resource, which controls the SignalR runtime behavior.
type SignalRFeatureResponse struct {
	// FeatureFlags is the supported features of Azure SignalR service.
	// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
	// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	Flag string `pulumi:"flag"`
	// Optional properties related to this feature.
	Properties map[string]string `pulumi:"properties"`
	// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value string `pulumi:"value"`
}

// SignalRFeatureResponseInput is an input type that accepts SignalRFeatureResponseArgs and SignalRFeatureResponseOutput values.
// You can construct a concrete instance of `SignalRFeatureResponseInput` via:
//
//          SignalRFeatureResponseArgs{...}
type SignalRFeatureResponseInput interface {
	pulumi.Input

	ToSignalRFeatureResponseOutput() SignalRFeatureResponseOutput
	ToSignalRFeatureResponseOutputWithContext(context.Context) SignalRFeatureResponseOutput
}

// Feature of a SignalR resource, which controls the SignalR runtime behavior.
type SignalRFeatureResponseArgs struct {
	// FeatureFlags is the supported features of Azure SignalR service.
	// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
	// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	Flag pulumi.StringInput `pulumi:"flag"`
	// Optional properties related to this feature.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SignalRFeatureResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRFeatureResponse)(nil)).Elem()
}

func (i SignalRFeatureResponseArgs) ToSignalRFeatureResponseOutput() SignalRFeatureResponseOutput {
	return i.ToSignalRFeatureResponseOutputWithContext(context.Background())
}

func (i SignalRFeatureResponseArgs) ToSignalRFeatureResponseOutputWithContext(ctx context.Context) SignalRFeatureResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRFeatureResponseOutput)
}

// SignalRFeatureResponseArrayInput is an input type that accepts SignalRFeatureResponseArray and SignalRFeatureResponseArrayOutput values.
// You can construct a concrete instance of `SignalRFeatureResponseArrayInput` via:
//
//          SignalRFeatureResponseArray{ SignalRFeatureResponseArgs{...} }
type SignalRFeatureResponseArrayInput interface {
	pulumi.Input

	ToSignalRFeatureResponseArrayOutput() SignalRFeatureResponseArrayOutput
	ToSignalRFeatureResponseArrayOutputWithContext(context.Context) SignalRFeatureResponseArrayOutput
}

type SignalRFeatureResponseArray []SignalRFeatureResponseInput

func (SignalRFeatureResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalRFeatureResponse)(nil)).Elem()
}

func (i SignalRFeatureResponseArray) ToSignalRFeatureResponseArrayOutput() SignalRFeatureResponseArrayOutput {
	return i.ToSignalRFeatureResponseArrayOutputWithContext(context.Background())
}

func (i SignalRFeatureResponseArray) ToSignalRFeatureResponseArrayOutputWithContext(ctx context.Context) SignalRFeatureResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRFeatureResponseArrayOutput)
}

// Feature of a SignalR resource, which controls the SignalR runtime behavior.
type SignalRFeatureResponseOutput struct{ *pulumi.OutputState }

func (SignalRFeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRFeatureResponse)(nil)).Elem()
}

func (o SignalRFeatureResponseOutput) ToSignalRFeatureResponseOutput() SignalRFeatureResponseOutput {
	return o
}

func (o SignalRFeatureResponseOutput) ToSignalRFeatureResponseOutputWithContext(ctx context.Context) SignalRFeatureResponseOutput {
	return o
}

// FeatureFlags is the supported features of Azure SignalR service.
// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
func (o SignalRFeatureResponseOutput) Flag() pulumi.StringOutput {
	return o.ApplyT(func(v SignalRFeatureResponse) string { return v.Flag }).(pulumi.StringOutput)
}

// Optional properties related to this feature.
func (o SignalRFeatureResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SignalRFeatureResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
func (o SignalRFeatureResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SignalRFeatureResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SignalRFeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (SignalRFeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalRFeatureResponse)(nil)).Elem()
}

func (o SignalRFeatureResponseArrayOutput) ToSignalRFeatureResponseArrayOutput() SignalRFeatureResponseArrayOutput {
	return o
}

func (o SignalRFeatureResponseArrayOutput) ToSignalRFeatureResponseArrayOutputWithContext(ctx context.Context) SignalRFeatureResponseArrayOutput {
	return o
}

func (o SignalRFeatureResponseArrayOutput) Index(i pulumi.IntInput) SignalRFeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignalRFeatureResponse {
		return vs[0].([]SignalRFeatureResponse)[vs[1].(int)]
	}).(SignalRFeatureResponseOutput)
}

// Network ACLs for SignalR
type SignalRNetworkACLs struct {
	// Default action when no other rule matches
	DefaultAction *string `pulumi:"defaultAction"`
	// ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACL `pulumi:"privateEndpoints"`
	// ACL for requests from public network
	PublicNetwork *NetworkACL `pulumi:"publicNetwork"`
}

// SignalRNetworkACLsInput is an input type that accepts SignalRNetworkACLsArgs and SignalRNetworkACLsOutput values.
// You can construct a concrete instance of `SignalRNetworkACLsInput` via:
//
//          SignalRNetworkACLsArgs{...}
type SignalRNetworkACLsInput interface {
	pulumi.Input

	ToSignalRNetworkACLsOutput() SignalRNetworkACLsOutput
	ToSignalRNetworkACLsOutputWithContext(context.Context) SignalRNetworkACLsOutput
}

// Network ACLs for SignalR
type SignalRNetworkACLsArgs struct {
	// Default action when no other rule matches
	DefaultAction pulumi.StringPtrInput `pulumi:"defaultAction"`
	// ACLs for requests from private endpoints
	PrivateEndpoints PrivateEndpointACLArrayInput `pulumi:"privateEndpoints"`
	// ACL for requests from public network
	PublicNetwork NetworkACLPtrInput `pulumi:"publicNetwork"`
}

func (SignalRNetworkACLsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRNetworkACLs)(nil)).Elem()
}

func (i SignalRNetworkACLsArgs) ToSignalRNetworkACLsOutput() SignalRNetworkACLsOutput {
	return i.ToSignalRNetworkACLsOutputWithContext(context.Background())
}

func (i SignalRNetworkACLsArgs) ToSignalRNetworkACLsOutputWithContext(ctx context.Context) SignalRNetworkACLsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsOutput)
}

func (i SignalRNetworkACLsArgs) ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput {
	return i.ToSignalRNetworkACLsPtrOutputWithContext(context.Background())
}

func (i SignalRNetworkACLsArgs) ToSignalRNetworkACLsPtrOutputWithContext(ctx context.Context) SignalRNetworkACLsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsOutput).ToSignalRNetworkACLsPtrOutputWithContext(ctx)
}

// SignalRNetworkACLsPtrInput is an input type that accepts SignalRNetworkACLsArgs, SignalRNetworkACLsPtr and SignalRNetworkACLsPtrOutput values.
// You can construct a concrete instance of `SignalRNetworkACLsPtrInput` via:
//
//          SignalRNetworkACLsArgs{...}
//
//  or:
//
//          nil
type SignalRNetworkACLsPtrInput interface {
	pulumi.Input

	ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput
	ToSignalRNetworkACLsPtrOutputWithContext(context.Context) SignalRNetworkACLsPtrOutput
}

type signalRNetworkACLsPtrType SignalRNetworkACLsArgs

func SignalRNetworkACLsPtr(v *SignalRNetworkACLsArgs) SignalRNetworkACLsPtrInput {
	return (*signalRNetworkACLsPtrType)(v)
}

func (*signalRNetworkACLsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRNetworkACLs)(nil)).Elem()
}

func (i *signalRNetworkACLsPtrType) ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput {
	return i.ToSignalRNetworkACLsPtrOutputWithContext(context.Background())
}

func (i *signalRNetworkACLsPtrType) ToSignalRNetworkACLsPtrOutputWithContext(ctx context.Context) SignalRNetworkACLsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsPtrOutput)
}

// Network ACLs for SignalR
type SignalRNetworkACLsOutput struct{ *pulumi.OutputState }

func (SignalRNetworkACLsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRNetworkACLs)(nil)).Elem()
}

func (o SignalRNetworkACLsOutput) ToSignalRNetworkACLsOutput() SignalRNetworkACLsOutput {
	return o
}

func (o SignalRNetworkACLsOutput) ToSignalRNetworkACLsOutputWithContext(ctx context.Context) SignalRNetworkACLsOutput {
	return o
}

func (o SignalRNetworkACLsOutput) ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput {
	return o.ToSignalRNetworkACLsPtrOutputWithContext(context.Background())
}

func (o SignalRNetworkACLsOutput) ToSignalRNetworkACLsPtrOutputWithContext(ctx context.Context) SignalRNetworkACLsPtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLs) *SignalRNetworkACLs {
		return &v
	}).(SignalRNetworkACLsPtrOutput)
}

// Default action when no other rule matches
func (o SignalRNetworkACLsOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLs) *string { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// ACLs for requests from private endpoints
func (o SignalRNetworkACLsOutput) PrivateEndpoints() PrivateEndpointACLArrayOutput {
	return o.ApplyT(func(v SignalRNetworkACLs) []PrivateEndpointACL { return v.PrivateEndpoints }).(PrivateEndpointACLArrayOutput)
}

// ACL for requests from public network
func (o SignalRNetworkACLsOutput) PublicNetwork() NetworkACLPtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLs) *NetworkACL { return v.PublicNetwork }).(NetworkACLPtrOutput)
}

type SignalRNetworkACLsPtrOutput struct{ *pulumi.OutputState }

func (SignalRNetworkACLsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRNetworkACLs)(nil)).Elem()
}

func (o SignalRNetworkACLsPtrOutput) ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput {
	return o
}

func (o SignalRNetworkACLsPtrOutput) ToSignalRNetworkACLsPtrOutputWithContext(ctx context.Context) SignalRNetworkACLsPtrOutput {
	return o
}

func (o SignalRNetworkACLsPtrOutput) Elem() SignalRNetworkACLsOutput {
	return o.ApplyT(func(v *SignalRNetworkACLs) SignalRNetworkACLs { return *v }).(SignalRNetworkACLsOutput)
}

// Default action when no other rule matches
func (o SignalRNetworkACLsPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalRNetworkACLs) *string {
		if v == nil {
			return nil
		}
		return v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// ACLs for requests from private endpoints
func (o SignalRNetworkACLsPtrOutput) PrivateEndpoints() PrivateEndpointACLArrayOutput {
	return o.ApplyT(func(v *SignalRNetworkACLs) []PrivateEndpointACL {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoints
	}).(PrivateEndpointACLArrayOutput)
}

// ACL for requests from public network
func (o SignalRNetworkACLsPtrOutput) PublicNetwork() NetworkACLPtrOutput {
	return o.ApplyT(func(v *SignalRNetworkACLs) *NetworkACL {
		if v == nil {
			return nil
		}
		return v.PublicNetwork
	}).(NetworkACLPtrOutput)
}

// Network ACLs for SignalR
type SignalRNetworkACLsResponse struct {
	// Default action when no other rule matches
	DefaultAction *string `pulumi:"defaultAction"`
	// ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACLResponse `pulumi:"privateEndpoints"`
	// ACL for requests from public network
	PublicNetwork *NetworkACLResponse `pulumi:"publicNetwork"`
}

// SignalRNetworkACLsResponseInput is an input type that accepts SignalRNetworkACLsResponseArgs and SignalRNetworkACLsResponseOutput values.
// You can construct a concrete instance of `SignalRNetworkACLsResponseInput` via:
//
//          SignalRNetworkACLsResponseArgs{...}
type SignalRNetworkACLsResponseInput interface {
	pulumi.Input

	ToSignalRNetworkACLsResponseOutput() SignalRNetworkACLsResponseOutput
	ToSignalRNetworkACLsResponseOutputWithContext(context.Context) SignalRNetworkACLsResponseOutput
}

// Network ACLs for SignalR
type SignalRNetworkACLsResponseArgs struct {
	// Default action when no other rule matches
	DefaultAction pulumi.StringPtrInput `pulumi:"defaultAction"`
	// ACLs for requests from private endpoints
	PrivateEndpoints PrivateEndpointACLResponseArrayInput `pulumi:"privateEndpoints"`
	// ACL for requests from public network
	PublicNetwork NetworkACLResponsePtrInput `pulumi:"publicNetwork"`
}

func (SignalRNetworkACLsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRNetworkACLsResponse)(nil)).Elem()
}

func (i SignalRNetworkACLsResponseArgs) ToSignalRNetworkACLsResponseOutput() SignalRNetworkACLsResponseOutput {
	return i.ToSignalRNetworkACLsResponseOutputWithContext(context.Background())
}

func (i SignalRNetworkACLsResponseArgs) ToSignalRNetworkACLsResponseOutputWithContext(ctx context.Context) SignalRNetworkACLsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsResponseOutput)
}

func (i SignalRNetworkACLsResponseArgs) ToSignalRNetworkACLsResponsePtrOutput() SignalRNetworkACLsResponsePtrOutput {
	return i.ToSignalRNetworkACLsResponsePtrOutputWithContext(context.Background())
}

func (i SignalRNetworkACLsResponseArgs) ToSignalRNetworkACLsResponsePtrOutputWithContext(ctx context.Context) SignalRNetworkACLsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsResponseOutput).ToSignalRNetworkACLsResponsePtrOutputWithContext(ctx)
}

// SignalRNetworkACLsResponsePtrInput is an input type that accepts SignalRNetworkACLsResponseArgs, SignalRNetworkACLsResponsePtr and SignalRNetworkACLsResponsePtrOutput values.
// You can construct a concrete instance of `SignalRNetworkACLsResponsePtrInput` via:
//
//          SignalRNetworkACLsResponseArgs{...}
//
//  or:
//
//          nil
type SignalRNetworkACLsResponsePtrInput interface {
	pulumi.Input

	ToSignalRNetworkACLsResponsePtrOutput() SignalRNetworkACLsResponsePtrOutput
	ToSignalRNetworkACLsResponsePtrOutputWithContext(context.Context) SignalRNetworkACLsResponsePtrOutput
}

type signalRNetworkACLsResponsePtrType SignalRNetworkACLsResponseArgs

func SignalRNetworkACLsResponsePtr(v *SignalRNetworkACLsResponseArgs) SignalRNetworkACLsResponsePtrInput {
	return (*signalRNetworkACLsResponsePtrType)(v)
}

func (*signalRNetworkACLsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRNetworkACLsResponse)(nil)).Elem()
}

func (i *signalRNetworkACLsResponsePtrType) ToSignalRNetworkACLsResponsePtrOutput() SignalRNetworkACLsResponsePtrOutput {
	return i.ToSignalRNetworkACLsResponsePtrOutputWithContext(context.Background())
}

func (i *signalRNetworkACLsResponsePtrType) ToSignalRNetworkACLsResponsePtrOutputWithContext(ctx context.Context) SignalRNetworkACLsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsResponsePtrOutput)
}

// Network ACLs for SignalR
type SignalRNetworkACLsResponseOutput struct{ *pulumi.OutputState }

func (SignalRNetworkACLsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRNetworkACLsResponse)(nil)).Elem()
}

func (o SignalRNetworkACLsResponseOutput) ToSignalRNetworkACLsResponseOutput() SignalRNetworkACLsResponseOutput {
	return o
}

func (o SignalRNetworkACLsResponseOutput) ToSignalRNetworkACLsResponseOutputWithContext(ctx context.Context) SignalRNetworkACLsResponseOutput {
	return o
}

func (o SignalRNetworkACLsResponseOutput) ToSignalRNetworkACLsResponsePtrOutput() SignalRNetworkACLsResponsePtrOutput {
	return o.ToSignalRNetworkACLsResponsePtrOutputWithContext(context.Background())
}

func (o SignalRNetworkACLsResponseOutput) ToSignalRNetworkACLsResponsePtrOutputWithContext(ctx context.Context) SignalRNetworkACLsResponsePtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLsResponse) *SignalRNetworkACLsResponse {
		return &v
	}).(SignalRNetworkACLsResponsePtrOutput)
}

// Default action when no other rule matches
func (o SignalRNetworkACLsResponseOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLsResponse) *string { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// ACLs for requests from private endpoints
func (o SignalRNetworkACLsResponseOutput) PrivateEndpoints() PrivateEndpointACLResponseArrayOutput {
	return o.ApplyT(func(v SignalRNetworkACLsResponse) []PrivateEndpointACLResponse { return v.PrivateEndpoints }).(PrivateEndpointACLResponseArrayOutput)
}

// ACL for requests from public network
func (o SignalRNetworkACLsResponseOutput) PublicNetwork() NetworkACLResponsePtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLsResponse) *NetworkACLResponse { return v.PublicNetwork }).(NetworkACLResponsePtrOutput)
}

type SignalRNetworkACLsResponsePtrOutput struct{ *pulumi.OutputState }

func (SignalRNetworkACLsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRNetworkACLsResponse)(nil)).Elem()
}

func (o SignalRNetworkACLsResponsePtrOutput) ToSignalRNetworkACLsResponsePtrOutput() SignalRNetworkACLsResponsePtrOutput {
	return o
}

func (o SignalRNetworkACLsResponsePtrOutput) ToSignalRNetworkACLsResponsePtrOutputWithContext(ctx context.Context) SignalRNetworkACLsResponsePtrOutput {
	return o
}

func (o SignalRNetworkACLsResponsePtrOutput) Elem() SignalRNetworkACLsResponseOutput {
	return o.ApplyT(func(v *SignalRNetworkACLsResponse) SignalRNetworkACLsResponse { return *v }).(SignalRNetworkACLsResponseOutput)
}

// Default action when no other rule matches
func (o SignalRNetworkACLsResponsePtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalRNetworkACLsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// ACLs for requests from private endpoints
func (o SignalRNetworkACLsResponsePtrOutput) PrivateEndpoints() PrivateEndpointACLResponseArrayOutput {
	return o.ApplyT(func(v *SignalRNetworkACLsResponse) []PrivateEndpointACLResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoints
	}).(PrivateEndpointACLResponseArrayOutput)
}

// ACL for requests from public network
func (o SignalRNetworkACLsResponsePtrOutput) PublicNetwork() NetworkACLResponsePtrOutput {
	return o.ApplyT(func(v *SignalRNetworkACLsResponse) *NetworkACLResponse {
		if v == nil {
			return nil
		}
		return v.PublicNetwork
	}).(NetworkACLResponsePtrOutput)
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplate struct {
	// Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any category name
	//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
	//     3. The single category name, for example, "connections", it matches the category "connections"
	CategoryPattern *string `pulumi:"categoryPattern"`
	// Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name
	//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
	//     3. The single event name, for example, "connect", it matches "connect"
	EventPattern *string `pulumi:"eventPattern"`
	// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any hub name
	//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
	//     3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern *string `pulumi:"hubPattern"`
	// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate string `pulumi:"urlTemplate"`
}

// UpstreamTemplateInput is an input type that accepts UpstreamTemplateArgs and UpstreamTemplateOutput values.
// You can construct a concrete instance of `UpstreamTemplateInput` via:
//
//          UpstreamTemplateArgs{...}
type UpstreamTemplateInput interface {
	pulumi.Input

	ToUpstreamTemplateOutput() UpstreamTemplateOutput
	ToUpstreamTemplateOutputWithContext(context.Context) UpstreamTemplateOutput
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateArgs struct {
	// Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any category name
	//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
	//     3. The single category name, for example, "connections", it matches the category "connections"
	CategoryPattern pulumi.StringPtrInput `pulumi:"categoryPattern"`
	// Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name
	//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
	//     3. The single event name, for example, "connect", it matches "connect"
	EventPattern pulumi.StringPtrInput `pulumi:"eventPattern"`
	// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any hub name
	//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
	//     3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern pulumi.StringPtrInput `pulumi:"hubPattern"`
	// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate pulumi.StringInput `pulumi:"urlTemplate"`
}

func (UpstreamTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamTemplate)(nil)).Elem()
}

func (i UpstreamTemplateArgs) ToUpstreamTemplateOutput() UpstreamTemplateOutput {
	return i.ToUpstreamTemplateOutputWithContext(context.Background())
}

func (i UpstreamTemplateArgs) ToUpstreamTemplateOutputWithContext(ctx context.Context) UpstreamTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamTemplateOutput)
}

// UpstreamTemplateArrayInput is an input type that accepts UpstreamTemplateArray and UpstreamTemplateArrayOutput values.
// You can construct a concrete instance of `UpstreamTemplateArrayInput` via:
//
//          UpstreamTemplateArray{ UpstreamTemplateArgs{...} }
type UpstreamTemplateArrayInput interface {
	pulumi.Input

	ToUpstreamTemplateArrayOutput() UpstreamTemplateArrayOutput
	ToUpstreamTemplateArrayOutputWithContext(context.Context) UpstreamTemplateArrayOutput
}

type UpstreamTemplateArray []UpstreamTemplateInput

func (UpstreamTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamTemplate)(nil)).Elem()
}

func (i UpstreamTemplateArray) ToUpstreamTemplateArrayOutput() UpstreamTemplateArrayOutput {
	return i.ToUpstreamTemplateArrayOutputWithContext(context.Background())
}

func (i UpstreamTemplateArray) ToUpstreamTemplateArrayOutputWithContext(ctx context.Context) UpstreamTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamTemplateArrayOutput)
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateOutput struct{ *pulumi.OutputState }

func (UpstreamTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamTemplate)(nil)).Elem()
}

func (o UpstreamTemplateOutput) ToUpstreamTemplateOutput() UpstreamTemplateOutput {
	return o
}

func (o UpstreamTemplateOutput) ToUpstreamTemplateOutputWithContext(ctx context.Context) UpstreamTemplateOutput {
	return o
}

// Gets or sets the matching pattern for category names. If not set, it matches any category.
// There are 3 kind of patterns supported:
//     1. "*", it to matches any category name
//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
//     3. The single category name, for example, "connections", it matches the category "connections"
func (o UpstreamTemplateOutput) CategoryPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplate) *string { return v.CategoryPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the matching pattern for event names. If not set, it matches any event.
// There are 3 kind of patterns supported:
//     1. "*", it to matches any event name
//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
//     3. The single event name, for example, "connect", it matches "connect"
func (o UpstreamTemplateOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplate) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
// There are 3 kind of patterns supported:
//     1. "*", it to matches any hub name
//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
//     3. The single hub name, for example, "hub1", it matches "hub1"
func (o UpstreamTemplateOutput) HubPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplate) *string { return v.HubPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
func (o UpstreamTemplateOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v UpstreamTemplate) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

type UpstreamTemplateArrayOutput struct{ *pulumi.OutputState }

func (UpstreamTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamTemplate)(nil)).Elem()
}

func (o UpstreamTemplateArrayOutput) ToUpstreamTemplateArrayOutput() UpstreamTemplateArrayOutput {
	return o
}

func (o UpstreamTemplateArrayOutput) ToUpstreamTemplateArrayOutputWithContext(ctx context.Context) UpstreamTemplateArrayOutput {
	return o
}

func (o UpstreamTemplateArrayOutput) Index(i pulumi.IntInput) UpstreamTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpstreamTemplate {
		return vs[0].([]UpstreamTemplate)[vs[1].(int)]
	}).(UpstreamTemplateOutput)
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateResponse struct {
	// Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any category name
	//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
	//     3. The single category name, for example, "connections", it matches the category "connections"
	CategoryPattern *string `pulumi:"categoryPattern"`
	// Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name
	//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
	//     3. The single event name, for example, "connect", it matches "connect"
	EventPattern *string `pulumi:"eventPattern"`
	// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any hub name
	//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
	//     3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern *string `pulumi:"hubPattern"`
	// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate string `pulumi:"urlTemplate"`
}

// UpstreamTemplateResponseInput is an input type that accepts UpstreamTemplateResponseArgs and UpstreamTemplateResponseOutput values.
// You can construct a concrete instance of `UpstreamTemplateResponseInput` via:
//
//          UpstreamTemplateResponseArgs{...}
type UpstreamTemplateResponseInput interface {
	pulumi.Input

	ToUpstreamTemplateResponseOutput() UpstreamTemplateResponseOutput
	ToUpstreamTemplateResponseOutputWithContext(context.Context) UpstreamTemplateResponseOutput
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateResponseArgs struct {
	// Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any category name
	//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
	//     3. The single category name, for example, "connections", it matches the category "connections"
	CategoryPattern pulumi.StringPtrInput `pulumi:"categoryPattern"`
	// Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name
	//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
	//     3. The single event name, for example, "connect", it matches "connect"
	EventPattern pulumi.StringPtrInput `pulumi:"eventPattern"`
	// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any hub name
	//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
	//     3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern pulumi.StringPtrInput `pulumi:"hubPattern"`
	// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate pulumi.StringInput `pulumi:"urlTemplate"`
}

func (UpstreamTemplateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamTemplateResponse)(nil)).Elem()
}

func (i UpstreamTemplateResponseArgs) ToUpstreamTemplateResponseOutput() UpstreamTemplateResponseOutput {
	return i.ToUpstreamTemplateResponseOutputWithContext(context.Background())
}

func (i UpstreamTemplateResponseArgs) ToUpstreamTemplateResponseOutputWithContext(ctx context.Context) UpstreamTemplateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamTemplateResponseOutput)
}

// UpstreamTemplateResponseArrayInput is an input type that accepts UpstreamTemplateResponseArray and UpstreamTemplateResponseArrayOutput values.
// You can construct a concrete instance of `UpstreamTemplateResponseArrayInput` via:
//
//          UpstreamTemplateResponseArray{ UpstreamTemplateResponseArgs{...} }
type UpstreamTemplateResponseArrayInput interface {
	pulumi.Input

	ToUpstreamTemplateResponseArrayOutput() UpstreamTemplateResponseArrayOutput
	ToUpstreamTemplateResponseArrayOutputWithContext(context.Context) UpstreamTemplateResponseArrayOutput
}

type UpstreamTemplateResponseArray []UpstreamTemplateResponseInput

func (UpstreamTemplateResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamTemplateResponse)(nil)).Elem()
}

func (i UpstreamTemplateResponseArray) ToUpstreamTemplateResponseArrayOutput() UpstreamTemplateResponseArrayOutput {
	return i.ToUpstreamTemplateResponseArrayOutputWithContext(context.Background())
}

func (i UpstreamTemplateResponseArray) ToUpstreamTemplateResponseArrayOutputWithContext(ctx context.Context) UpstreamTemplateResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamTemplateResponseArrayOutput)
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateResponseOutput struct{ *pulumi.OutputState }

func (UpstreamTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamTemplateResponse)(nil)).Elem()
}

func (o UpstreamTemplateResponseOutput) ToUpstreamTemplateResponseOutput() UpstreamTemplateResponseOutput {
	return o
}

func (o UpstreamTemplateResponseOutput) ToUpstreamTemplateResponseOutputWithContext(ctx context.Context) UpstreamTemplateResponseOutput {
	return o
}

// Gets or sets the matching pattern for category names. If not set, it matches any category.
// There are 3 kind of patterns supported:
//     1. "*", it to matches any category name
//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
//     3. The single category name, for example, "connections", it matches the category "connections"
func (o UpstreamTemplateResponseOutput) CategoryPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) *string { return v.CategoryPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the matching pattern for event names. If not set, it matches any event.
// There are 3 kind of patterns supported:
//     1. "*", it to matches any event name
//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
//     3. The single event name, for example, "connect", it matches "connect"
func (o UpstreamTemplateResponseOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
// There are 3 kind of patterns supported:
//     1. "*", it to matches any hub name
//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
//     3. The single hub name, for example, "hub1", it matches "hub1"
func (o UpstreamTemplateResponseOutput) HubPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) *string { return v.HubPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
func (o UpstreamTemplateResponseOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

type UpstreamTemplateResponseArrayOutput struct{ *pulumi.OutputState }

func (UpstreamTemplateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamTemplateResponse)(nil)).Elem()
}

func (o UpstreamTemplateResponseArrayOutput) ToUpstreamTemplateResponseArrayOutput() UpstreamTemplateResponseArrayOutput {
	return o
}

func (o UpstreamTemplateResponseArrayOutput) ToUpstreamTemplateResponseArrayOutputWithContext(ctx context.Context) UpstreamTemplateResponseArrayOutput {
	return o
}

func (o UpstreamTemplateResponseArrayOutput) Index(i pulumi.IntInput) UpstreamTemplateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpstreamTemplateResponse {
		return vs[0].([]UpstreamTemplateResponse)[vs[1].(int)]
	}).(UpstreamTemplateResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkACLOutput{})
	pulumi.RegisterOutputType(NetworkACLPtrOutput{})
	pulumi.RegisterOutputType(NetworkACLResponseOutput{})
	pulumi.RegisterOutputType(NetworkACLResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointACLOutput{})
	pulumi.RegisterOutputType(PrivateEndpointACLArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointACLResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointACLResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceSkuOutput{})
	pulumi.RegisterOutputType(ResourceSkuPtrOutput{})
	pulumi.RegisterOutputType(ResourceSkuResponseOutput{})
	pulumi.RegisterOutputType(ResourceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(ServerlessUpstreamSettingsOutput{})
	pulumi.RegisterOutputType(ServerlessUpstreamSettingsPtrOutput{})
	pulumi.RegisterOutputType(ServerlessUpstreamSettingsResponseOutput{})
	pulumi.RegisterOutputType(ServerlessUpstreamSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SignalRCorsSettingsOutput{})
	pulumi.RegisterOutputType(SignalRCorsSettingsPtrOutput{})
	pulumi.RegisterOutputType(SignalRCorsSettingsResponseOutput{})
	pulumi.RegisterOutputType(SignalRCorsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SignalRFeatureOutput{})
	pulumi.RegisterOutputType(SignalRFeatureArrayOutput{})
	pulumi.RegisterOutputType(SignalRFeatureResponseOutput{})
	pulumi.RegisterOutputType(SignalRFeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(SignalRNetworkACLsOutput{})
	pulumi.RegisterOutputType(SignalRNetworkACLsPtrOutput{})
	pulumi.RegisterOutputType(SignalRNetworkACLsResponseOutput{})
	pulumi.RegisterOutputType(SignalRNetworkACLsResponsePtrOutput{})
	pulumi.RegisterOutputType(UpstreamTemplateOutput{})
	pulumi.RegisterOutputType(UpstreamTemplateArrayOutput{})
	pulumi.RegisterOutputType(UpstreamTemplateResponseOutput{})
	pulumi.RegisterOutputType(UpstreamTemplateResponseArrayOutput{})
}
