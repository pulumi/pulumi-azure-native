// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Live trace category configuration of a Microsoft.SignalRService resource.
type LiveTraceCategory struct {
	// Indicates whether or the live trace category is enabled.
	// Available values: true, false.
	// Case insensitive.
	Enabled *string `pulumi:"enabled"`
	// Gets or sets the live trace category's name.
	// Available values: ConnectivityLogs, MessagingLogs.
	// Case insensitive.
	Name *string `pulumi:"name"`
}

// LiveTraceCategoryInput is an input type that accepts LiveTraceCategoryArgs and LiveTraceCategoryOutput values.
// You can construct a concrete instance of `LiveTraceCategoryInput` via:
//
//	LiveTraceCategoryArgs{...}
type LiveTraceCategoryInput interface {
	pulumi.Input

	ToLiveTraceCategoryOutput() LiveTraceCategoryOutput
	ToLiveTraceCategoryOutputWithContext(context.Context) LiveTraceCategoryOutput
}

// Live trace category configuration of a Microsoft.SignalRService resource.
type LiveTraceCategoryArgs struct {
	// Indicates whether or the live trace category is enabled.
	// Available values: true, false.
	// Case insensitive.
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
	// Gets or sets the live trace category's name.
	// Available values: ConnectivityLogs, MessagingLogs.
	// Case insensitive.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LiveTraceCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveTraceCategory)(nil)).Elem()
}

func (i LiveTraceCategoryArgs) ToLiveTraceCategoryOutput() LiveTraceCategoryOutput {
	return i.ToLiveTraceCategoryOutputWithContext(context.Background())
}

func (i LiveTraceCategoryArgs) ToLiveTraceCategoryOutputWithContext(ctx context.Context) LiveTraceCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveTraceCategoryOutput)
}

// LiveTraceCategoryArrayInput is an input type that accepts LiveTraceCategoryArray and LiveTraceCategoryArrayOutput values.
// You can construct a concrete instance of `LiveTraceCategoryArrayInput` via:
//
//	LiveTraceCategoryArray{ LiveTraceCategoryArgs{...} }
type LiveTraceCategoryArrayInput interface {
	pulumi.Input

	ToLiveTraceCategoryArrayOutput() LiveTraceCategoryArrayOutput
	ToLiveTraceCategoryArrayOutputWithContext(context.Context) LiveTraceCategoryArrayOutput
}

type LiveTraceCategoryArray []LiveTraceCategoryInput

func (LiveTraceCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveTraceCategory)(nil)).Elem()
}

func (i LiveTraceCategoryArray) ToLiveTraceCategoryArrayOutput() LiveTraceCategoryArrayOutput {
	return i.ToLiveTraceCategoryArrayOutputWithContext(context.Background())
}

func (i LiveTraceCategoryArray) ToLiveTraceCategoryArrayOutputWithContext(ctx context.Context) LiveTraceCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveTraceCategoryArrayOutput)
}

// Live trace category configuration of a Microsoft.SignalRService resource.
type LiveTraceCategoryOutput struct{ *pulumi.OutputState }

func (LiveTraceCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveTraceCategory)(nil)).Elem()
}

func (o LiveTraceCategoryOutput) ToLiveTraceCategoryOutput() LiveTraceCategoryOutput {
	return o
}

func (o LiveTraceCategoryOutput) ToLiveTraceCategoryOutputWithContext(ctx context.Context) LiveTraceCategoryOutput {
	return o
}

// Indicates whether or the live trace category is enabled.
// Available values: true, false.
// Case insensitive.
func (o LiveTraceCategoryOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveTraceCategory) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// Gets or sets the live trace category's name.
// Available values: ConnectivityLogs, MessagingLogs.
// Case insensitive.
func (o LiveTraceCategoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveTraceCategory) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LiveTraceCategoryArrayOutput struct{ *pulumi.OutputState }

func (LiveTraceCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveTraceCategory)(nil)).Elem()
}

func (o LiveTraceCategoryArrayOutput) ToLiveTraceCategoryArrayOutput() LiveTraceCategoryArrayOutput {
	return o
}

func (o LiveTraceCategoryArrayOutput) ToLiveTraceCategoryArrayOutputWithContext(ctx context.Context) LiveTraceCategoryArrayOutput {
	return o
}

func (o LiveTraceCategoryArrayOutput) Index(i pulumi.IntInput) LiveTraceCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveTraceCategory {
		return vs[0].([]LiveTraceCategory)[vs[1].(int)]
	}).(LiveTraceCategoryOutput)
}

// Live trace category configuration of a Microsoft.SignalRService resource.
type LiveTraceCategoryResponse struct {
	// Indicates whether or the live trace category is enabled.
	// Available values: true, false.
	// Case insensitive.
	Enabled *string `pulumi:"enabled"`
	// Gets or sets the live trace category's name.
	// Available values: ConnectivityLogs, MessagingLogs.
	// Case insensitive.
	Name *string `pulumi:"name"`
}

// Live trace category configuration of a Microsoft.SignalRService resource.
type LiveTraceCategoryResponseOutput struct{ *pulumi.OutputState }

func (LiveTraceCategoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveTraceCategoryResponse)(nil)).Elem()
}

func (o LiveTraceCategoryResponseOutput) ToLiveTraceCategoryResponseOutput() LiveTraceCategoryResponseOutput {
	return o
}

func (o LiveTraceCategoryResponseOutput) ToLiveTraceCategoryResponseOutputWithContext(ctx context.Context) LiveTraceCategoryResponseOutput {
	return o
}

// Indicates whether or the live trace category is enabled.
// Available values: true, false.
// Case insensitive.
func (o LiveTraceCategoryResponseOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveTraceCategoryResponse) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// Gets or sets the live trace category's name.
// Available values: ConnectivityLogs, MessagingLogs.
// Case insensitive.
func (o LiveTraceCategoryResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveTraceCategoryResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LiveTraceCategoryResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveTraceCategoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveTraceCategoryResponse)(nil)).Elem()
}

func (o LiveTraceCategoryResponseArrayOutput) ToLiveTraceCategoryResponseArrayOutput() LiveTraceCategoryResponseArrayOutput {
	return o
}

func (o LiveTraceCategoryResponseArrayOutput) ToLiveTraceCategoryResponseArrayOutputWithContext(ctx context.Context) LiveTraceCategoryResponseArrayOutput {
	return o
}

func (o LiveTraceCategoryResponseArrayOutput) Index(i pulumi.IntInput) LiveTraceCategoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveTraceCategoryResponse {
		return vs[0].([]LiveTraceCategoryResponse)[vs[1].(int)]
	}).(LiveTraceCategoryResponseOutput)
}

// Live trace configuration of a Microsoft.SignalRService resource.
type LiveTraceConfiguration struct {
	// Gets or sets the list of category configurations.
	Categories []LiveTraceCategory `pulumi:"categories"`
	// Indicates whether or not enable live trace.
	// When it's set to true, live trace client can connect to the service.
	// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in "categories".
	// Available values: true, false.
	// Case insensitive.
	Enabled *string `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for LiveTraceConfiguration
func (val *LiveTraceConfiguration) Defaults() *LiveTraceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Enabled) {
		enabled_ := "false"
		tmp.Enabled = &enabled_
	}
	return &tmp
}

// LiveTraceConfigurationInput is an input type that accepts LiveTraceConfigurationArgs and LiveTraceConfigurationOutput values.
// You can construct a concrete instance of `LiveTraceConfigurationInput` via:
//
//	LiveTraceConfigurationArgs{...}
type LiveTraceConfigurationInput interface {
	pulumi.Input

	ToLiveTraceConfigurationOutput() LiveTraceConfigurationOutput
	ToLiveTraceConfigurationOutputWithContext(context.Context) LiveTraceConfigurationOutput
}

// Live trace configuration of a Microsoft.SignalRService resource.
type LiveTraceConfigurationArgs struct {
	// Gets or sets the list of category configurations.
	Categories LiveTraceCategoryArrayInput `pulumi:"categories"`
	// Indicates whether or not enable live trace.
	// When it's set to true, live trace client can connect to the service.
	// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in "categories".
	// Available values: true, false.
	// Case insensitive.
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for LiveTraceConfigurationArgs
func (val *LiveTraceConfigurationArgs) Defaults() *LiveTraceConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Enabled) {
		tmp.Enabled = pulumi.StringPtr("false")
	}
	return &tmp
}
func (LiveTraceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveTraceConfiguration)(nil)).Elem()
}

func (i LiveTraceConfigurationArgs) ToLiveTraceConfigurationOutput() LiveTraceConfigurationOutput {
	return i.ToLiveTraceConfigurationOutputWithContext(context.Background())
}

func (i LiveTraceConfigurationArgs) ToLiveTraceConfigurationOutputWithContext(ctx context.Context) LiveTraceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveTraceConfigurationOutput)
}

func (i LiveTraceConfigurationArgs) ToLiveTraceConfigurationPtrOutput() LiveTraceConfigurationPtrOutput {
	return i.ToLiveTraceConfigurationPtrOutputWithContext(context.Background())
}

func (i LiveTraceConfigurationArgs) ToLiveTraceConfigurationPtrOutputWithContext(ctx context.Context) LiveTraceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveTraceConfigurationOutput).ToLiveTraceConfigurationPtrOutputWithContext(ctx)
}

// LiveTraceConfigurationPtrInput is an input type that accepts LiveTraceConfigurationArgs, LiveTraceConfigurationPtr and LiveTraceConfigurationPtrOutput values.
// You can construct a concrete instance of `LiveTraceConfigurationPtrInput` via:
//
//	        LiveTraceConfigurationArgs{...}
//
//	or:
//
//	        nil
type LiveTraceConfigurationPtrInput interface {
	pulumi.Input

	ToLiveTraceConfigurationPtrOutput() LiveTraceConfigurationPtrOutput
	ToLiveTraceConfigurationPtrOutputWithContext(context.Context) LiveTraceConfigurationPtrOutput
}

type liveTraceConfigurationPtrType LiveTraceConfigurationArgs

func LiveTraceConfigurationPtr(v *LiveTraceConfigurationArgs) LiveTraceConfigurationPtrInput {
	return (*liveTraceConfigurationPtrType)(v)
}

func (*liveTraceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveTraceConfiguration)(nil)).Elem()
}

func (i *liveTraceConfigurationPtrType) ToLiveTraceConfigurationPtrOutput() LiveTraceConfigurationPtrOutput {
	return i.ToLiveTraceConfigurationPtrOutputWithContext(context.Background())
}

func (i *liveTraceConfigurationPtrType) ToLiveTraceConfigurationPtrOutputWithContext(ctx context.Context) LiveTraceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveTraceConfigurationPtrOutput)
}

// Live trace configuration of a Microsoft.SignalRService resource.
type LiveTraceConfigurationOutput struct{ *pulumi.OutputState }

func (LiveTraceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveTraceConfiguration)(nil)).Elem()
}

func (o LiveTraceConfigurationOutput) ToLiveTraceConfigurationOutput() LiveTraceConfigurationOutput {
	return o
}

func (o LiveTraceConfigurationOutput) ToLiveTraceConfigurationOutputWithContext(ctx context.Context) LiveTraceConfigurationOutput {
	return o
}

func (o LiveTraceConfigurationOutput) ToLiveTraceConfigurationPtrOutput() LiveTraceConfigurationPtrOutput {
	return o.ToLiveTraceConfigurationPtrOutputWithContext(context.Background())
}

func (o LiveTraceConfigurationOutput) ToLiveTraceConfigurationPtrOutputWithContext(ctx context.Context) LiveTraceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveTraceConfiguration) *LiveTraceConfiguration {
		return &v
	}).(LiveTraceConfigurationPtrOutput)
}

// Gets or sets the list of category configurations.
func (o LiveTraceConfigurationOutput) Categories() LiveTraceCategoryArrayOutput {
	return o.ApplyT(func(v LiveTraceConfiguration) []LiveTraceCategory { return v.Categories }).(LiveTraceCategoryArrayOutput)
}

// Indicates whether or not enable live trace.
// When it's set to true, live trace client can connect to the service.
// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in "categories".
// Available values: true, false.
// Case insensitive.
func (o LiveTraceConfigurationOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveTraceConfiguration) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type LiveTraceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LiveTraceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveTraceConfiguration)(nil)).Elem()
}

func (o LiveTraceConfigurationPtrOutput) ToLiveTraceConfigurationPtrOutput() LiveTraceConfigurationPtrOutput {
	return o
}

func (o LiveTraceConfigurationPtrOutput) ToLiveTraceConfigurationPtrOutputWithContext(ctx context.Context) LiveTraceConfigurationPtrOutput {
	return o
}

func (o LiveTraceConfigurationPtrOutput) Elem() LiveTraceConfigurationOutput {
	return o.ApplyT(func(v *LiveTraceConfiguration) LiveTraceConfiguration {
		if v != nil {
			return *v
		}
		var ret LiveTraceConfiguration
		return ret
	}).(LiveTraceConfigurationOutput)
}

// Gets or sets the list of category configurations.
func (o LiveTraceConfigurationPtrOutput) Categories() LiveTraceCategoryArrayOutput {
	return o.ApplyT(func(v *LiveTraceConfiguration) []LiveTraceCategory {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(LiveTraceCategoryArrayOutput)
}

// Indicates whether or not enable live trace.
// When it's set to true, live trace client can connect to the service.
// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in "categories".
// Available values: true, false.
// Case insensitive.
func (o LiveTraceConfigurationPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveTraceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// Live trace configuration of a Microsoft.SignalRService resource.
type LiveTraceConfigurationResponse struct {
	// Gets or sets the list of category configurations.
	Categories []LiveTraceCategoryResponse `pulumi:"categories"`
	// Indicates whether or not enable live trace.
	// When it's set to true, live trace client can connect to the service.
	// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in "categories".
	// Available values: true, false.
	// Case insensitive.
	Enabled *string `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for LiveTraceConfigurationResponse
func (val *LiveTraceConfigurationResponse) Defaults() *LiveTraceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Enabled) {
		enabled_ := "false"
		tmp.Enabled = &enabled_
	}
	return &tmp
}

// Live trace configuration of a Microsoft.SignalRService resource.
type LiveTraceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LiveTraceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveTraceConfigurationResponse)(nil)).Elem()
}

func (o LiveTraceConfigurationResponseOutput) ToLiveTraceConfigurationResponseOutput() LiveTraceConfigurationResponseOutput {
	return o
}

func (o LiveTraceConfigurationResponseOutput) ToLiveTraceConfigurationResponseOutputWithContext(ctx context.Context) LiveTraceConfigurationResponseOutput {
	return o
}

// Gets or sets the list of category configurations.
func (o LiveTraceConfigurationResponseOutput) Categories() LiveTraceCategoryResponseArrayOutput {
	return o.ApplyT(func(v LiveTraceConfigurationResponse) []LiveTraceCategoryResponse { return v.Categories }).(LiveTraceCategoryResponseArrayOutput)
}

// Indicates whether or not enable live trace.
// When it's set to true, live trace client can connect to the service.
// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in "categories".
// Available values: true, false.
// Case insensitive.
func (o LiveTraceConfigurationResponseOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveTraceConfigurationResponse) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type LiveTraceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveTraceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveTraceConfigurationResponse)(nil)).Elem()
}

func (o LiveTraceConfigurationResponsePtrOutput) ToLiveTraceConfigurationResponsePtrOutput() LiveTraceConfigurationResponsePtrOutput {
	return o
}

func (o LiveTraceConfigurationResponsePtrOutput) ToLiveTraceConfigurationResponsePtrOutputWithContext(ctx context.Context) LiveTraceConfigurationResponsePtrOutput {
	return o
}

func (o LiveTraceConfigurationResponsePtrOutput) Elem() LiveTraceConfigurationResponseOutput {
	return o.ApplyT(func(v *LiveTraceConfigurationResponse) LiveTraceConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret LiveTraceConfigurationResponse
		return ret
	}).(LiveTraceConfigurationResponseOutput)
}

// Gets or sets the list of category configurations.
func (o LiveTraceConfigurationResponsePtrOutput) Categories() LiveTraceCategoryResponseArrayOutput {
	return o.ApplyT(func(v *LiveTraceConfigurationResponse) []LiveTraceCategoryResponse {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(LiveTraceCategoryResponseArrayOutput)
}

// Indicates whether or not enable live trace.
// When it's set to true, live trace client can connect to the service.
// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in "categories".
// Available values: true, false.
// Case insensitive.
func (o LiveTraceConfigurationResponsePtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveTraceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// A class represent managed identities used for request and response
type ManagedIdentity struct {
	// Represents the identity type: systemAssigned, userAssigned, None
	Type *string `pulumi:"type"`
	// Get or set the user assigned identities
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// ManagedIdentityInput is an input type that accepts ManagedIdentityArgs and ManagedIdentityOutput values.
// You can construct a concrete instance of `ManagedIdentityInput` via:
//
//	ManagedIdentityArgs{...}
type ManagedIdentityInput interface {
	pulumi.Input

	ToManagedIdentityOutput() ManagedIdentityOutput
	ToManagedIdentityOutputWithContext(context.Context) ManagedIdentityOutput
}

// A class represent managed identities used for request and response
type ManagedIdentityArgs struct {
	// Represents the identity type: systemAssigned, userAssigned, None
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Get or set the user assigned identities
	UserAssignedIdentities pulumi.MapInput `pulumi:"userAssignedIdentities"`
}

func (ManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (i ManagedIdentityArgs) ToManagedIdentityOutput() ManagedIdentityOutput {
	return i.ToManagedIdentityOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput)
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput).ToManagedIdentityPtrOutputWithContext(ctx)
}

// ManagedIdentityPtrInput is an input type that accepts ManagedIdentityArgs, ManagedIdentityPtr and ManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityPtrInput` via:
//
//	        ManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityPtrInput interface {
	pulumi.Input

	ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput
	ToManagedIdentityPtrOutputWithContext(context.Context) ManagedIdentityPtrOutput
}

type managedIdentityPtrType ManagedIdentityArgs

func ManagedIdentityPtr(v *ManagedIdentityArgs) ManagedIdentityPtrInput {
	return (*managedIdentityPtrType)(v)
}

func (*managedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityPtrOutput)
}

// A class represent managed identities used for request and response
type ManagedIdentityOutput struct{ *pulumi.OutputState }

func (ManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityOutput) ToManagedIdentityOutput() ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentity) *ManagedIdentity {
		return &v
	}).(ManagedIdentityPtrOutput)
}

// Represents the identity type: systemAssigned, userAssigned, None
func (o ManagedIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Get or set the user assigned identities
func (o ManagedIdentityOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v ManagedIdentity) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type ManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) Elem() ManagedIdentityOutput {
	return o.ApplyT(func(v *ManagedIdentity) ManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedIdentity
		return ret
	}).(ManagedIdentityOutput)
}

// Represents the identity type: systemAssigned, userAssigned, None
func (o ManagedIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Get or set the user assigned identities
func (o ManagedIdentityPtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *ManagedIdentity) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// A class represent managed identities used for request and response
type ManagedIdentityResponse struct {
	// Get the principal id for the system assigned identity.
	// Only be used in response.
	PrincipalId string `pulumi:"principalId"`
	// Get the tenant id for the system assigned identity.
	// Only be used in response
	TenantId string `pulumi:"tenantId"`
	// Represents the identity type: systemAssigned, userAssigned, None
	Type *string `pulumi:"type"`
	// Get or set the user assigned identities
	UserAssignedIdentities map[string]UserAssignedIdentityPropertyResponse `pulumi:"userAssignedIdentities"`
}

// A class represent managed identities used for request and response
type ManagedIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutput() ManagedIdentityResponseOutput {
	return o
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutputWithContext(ctx context.Context) ManagedIdentityResponseOutput {
	return o
}

// Get the principal id for the system assigned identity.
// Only be used in response.
func (o ManagedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Get the tenant id for the system assigned identity.
// Only be used in response
func (o ManagedIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Represents the identity type: systemAssigned, userAssigned, None
func (o ManagedIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Get or set the user assigned identities
func (o ManagedIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityPropertyResponseMapOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) map[string]UserAssignedIdentityPropertyResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityPropertyResponseMapOutput)
}

type ManagedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) Elem() ManagedIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) ManagedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityResponse
		return ret
	}).(ManagedIdentityResponseOutput)
}

// Get the principal id for the system assigned identity.
// Only be used in response.
func (o ManagedIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Get the tenant id for the system assigned identity.
// Only be used in response
func (o ManagedIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Represents the identity type: systemAssigned, userAssigned, None
func (o ManagedIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Get or set the user assigned identities
func (o ManagedIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityPropertyResponseMapOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) map[string]UserAssignedIdentityPropertyResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityPropertyResponseMapOutput)
}

// Managed identity settings for upstream.
type ManagedIdentitySettings struct {
	// The Resource indicating the App ID URI of the target resource.
	// It also appears in the aud (audience) claim of the issued token.
	Resource *string `pulumi:"resource"`
}

// ManagedIdentitySettingsInput is an input type that accepts ManagedIdentitySettingsArgs and ManagedIdentitySettingsOutput values.
// You can construct a concrete instance of `ManagedIdentitySettingsInput` via:
//
//	ManagedIdentitySettingsArgs{...}
type ManagedIdentitySettingsInput interface {
	pulumi.Input

	ToManagedIdentitySettingsOutput() ManagedIdentitySettingsOutput
	ToManagedIdentitySettingsOutputWithContext(context.Context) ManagedIdentitySettingsOutput
}

// Managed identity settings for upstream.
type ManagedIdentitySettingsArgs struct {
	// The Resource indicating the App ID URI of the target resource.
	// It also appears in the aud (audience) claim of the issued token.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (ManagedIdentitySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySettings)(nil)).Elem()
}

func (i ManagedIdentitySettingsArgs) ToManagedIdentitySettingsOutput() ManagedIdentitySettingsOutput {
	return i.ToManagedIdentitySettingsOutputWithContext(context.Background())
}

func (i ManagedIdentitySettingsArgs) ToManagedIdentitySettingsOutputWithContext(ctx context.Context) ManagedIdentitySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySettingsOutput)
}

func (i ManagedIdentitySettingsArgs) ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput {
	return i.ToManagedIdentitySettingsPtrOutputWithContext(context.Background())
}

func (i ManagedIdentitySettingsArgs) ToManagedIdentitySettingsPtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySettingsOutput).ToManagedIdentitySettingsPtrOutputWithContext(ctx)
}

// ManagedIdentitySettingsPtrInput is an input type that accepts ManagedIdentitySettingsArgs, ManagedIdentitySettingsPtr and ManagedIdentitySettingsPtrOutput values.
// You can construct a concrete instance of `ManagedIdentitySettingsPtrInput` via:
//
//	        ManagedIdentitySettingsArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentitySettingsPtrInput interface {
	pulumi.Input

	ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput
	ToManagedIdentitySettingsPtrOutputWithContext(context.Context) ManagedIdentitySettingsPtrOutput
}

type managedIdentitySettingsPtrType ManagedIdentitySettingsArgs

func ManagedIdentitySettingsPtr(v *ManagedIdentitySettingsArgs) ManagedIdentitySettingsPtrInput {
	return (*managedIdentitySettingsPtrType)(v)
}

func (*managedIdentitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentitySettings)(nil)).Elem()
}

func (i *managedIdentitySettingsPtrType) ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput {
	return i.ToManagedIdentitySettingsPtrOutputWithContext(context.Background())
}

func (i *managedIdentitySettingsPtrType) ToManagedIdentitySettingsPtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySettingsPtrOutput)
}

// Managed identity settings for upstream.
type ManagedIdentitySettingsOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySettings)(nil)).Elem()
}

func (o ManagedIdentitySettingsOutput) ToManagedIdentitySettingsOutput() ManagedIdentitySettingsOutput {
	return o
}

func (o ManagedIdentitySettingsOutput) ToManagedIdentitySettingsOutputWithContext(ctx context.Context) ManagedIdentitySettingsOutput {
	return o
}

func (o ManagedIdentitySettingsOutput) ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput {
	return o.ToManagedIdentitySettingsPtrOutputWithContext(context.Background())
}

func (o ManagedIdentitySettingsOutput) ToManagedIdentitySettingsPtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentitySettings) *ManagedIdentitySettings {
		return &v
	}).(ManagedIdentitySettingsPtrOutput)
}

// The Resource indicating the App ID URI of the target resource.
// It also appears in the aud (audience) claim of the issued token.
func (o ManagedIdentitySettingsOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentitySettings) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type ManagedIdentitySettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentitySettings)(nil)).Elem()
}

func (o ManagedIdentitySettingsPtrOutput) ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput {
	return o
}

func (o ManagedIdentitySettingsPtrOutput) ToManagedIdentitySettingsPtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsPtrOutput {
	return o
}

func (o ManagedIdentitySettingsPtrOutput) Elem() ManagedIdentitySettingsOutput {
	return o.ApplyT(func(v *ManagedIdentitySettings) ManagedIdentitySettings {
		if v != nil {
			return *v
		}
		var ret ManagedIdentitySettings
		return ret
	}).(ManagedIdentitySettingsOutput)
}

// The Resource indicating the App ID URI of the target resource.
// It also appears in the aud (audience) claim of the issued token.
func (o ManagedIdentitySettingsPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentitySettings) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Managed identity settings for upstream.
type ManagedIdentitySettingsResponse struct {
	// The Resource indicating the App ID URI of the target resource.
	// It also appears in the aud (audience) claim of the issued token.
	Resource *string `pulumi:"resource"`
}

// Managed identity settings for upstream.
type ManagedIdentitySettingsResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySettingsResponse)(nil)).Elem()
}

func (o ManagedIdentitySettingsResponseOutput) ToManagedIdentitySettingsResponseOutput() ManagedIdentitySettingsResponseOutput {
	return o
}

func (o ManagedIdentitySettingsResponseOutput) ToManagedIdentitySettingsResponseOutputWithContext(ctx context.Context) ManagedIdentitySettingsResponseOutput {
	return o
}

// The Resource indicating the App ID URI of the target resource.
// It also appears in the aud (audience) claim of the issued token.
func (o ManagedIdentitySettingsResponseOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentitySettingsResponse) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type ManagedIdentitySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentitySettingsResponse)(nil)).Elem()
}

func (o ManagedIdentitySettingsResponsePtrOutput) ToManagedIdentitySettingsResponsePtrOutput() ManagedIdentitySettingsResponsePtrOutput {
	return o
}

func (o ManagedIdentitySettingsResponsePtrOutput) ToManagedIdentitySettingsResponsePtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsResponsePtrOutput {
	return o
}

func (o ManagedIdentitySettingsResponsePtrOutput) Elem() ManagedIdentitySettingsResponseOutput {
	return o.ApplyT(func(v *ManagedIdentitySettingsResponse) ManagedIdentitySettingsResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentitySettingsResponse
		return ret
	}).(ManagedIdentitySettingsResponseOutput)
}

// The Resource indicating the App ID URI of the target resource.
// It also appears in the aud (audience) claim of the issued token.
func (o ManagedIdentitySettingsResponsePtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentitySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Network ACL
type NetworkACL struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []string `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []string `pulumi:"deny"`
}

// NetworkACLInput is an input type that accepts NetworkACLArgs and NetworkACLOutput values.
// You can construct a concrete instance of `NetworkACLInput` via:
//
//	NetworkACLArgs{...}
type NetworkACLInput interface {
	pulumi.Input

	ToNetworkACLOutput() NetworkACLOutput
	ToNetworkACLOutputWithContext(context.Context) NetworkACLOutput
}

// Network ACL
type NetworkACLArgs struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow pulumi.StringArrayInput `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny pulumi.StringArrayInput `pulumi:"deny"`
}

func (NetworkACLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACL)(nil)).Elem()
}

func (i NetworkACLArgs) ToNetworkACLOutput() NetworkACLOutput {
	return i.ToNetworkACLOutputWithContext(context.Background())
}

func (i NetworkACLArgs) ToNetworkACLOutputWithContext(ctx context.Context) NetworkACLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLOutput)
}

func (i NetworkACLArgs) ToNetworkACLPtrOutput() NetworkACLPtrOutput {
	return i.ToNetworkACLPtrOutputWithContext(context.Background())
}

func (i NetworkACLArgs) ToNetworkACLPtrOutputWithContext(ctx context.Context) NetworkACLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLOutput).ToNetworkACLPtrOutputWithContext(ctx)
}

// NetworkACLPtrInput is an input type that accepts NetworkACLArgs, NetworkACLPtr and NetworkACLPtrOutput values.
// You can construct a concrete instance of `NetworkACLPtrInput` via:
//
//	        NetworkACLArgs{...}
//
//	or:
//
//	        nil
type NetworkACLPtrInput interface {
	pulumi.Input

	ToNetworkACLPtrOutput() NetworkACLPtrOutput
	ToNetworkACLPtrOutputWithContext(context.Context) NetworkACLPtrOutput
}

type networkACLPtrType NetworkACLArgs

func NetworkACLPtr(v *NetworkACLArgs) NetworkACLPtrInput {
	return (*networkACLPtrType)(v)
}

func (*networkACLPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACL)(nil)).Elem()
}

func (i *networkACLPtrType) ToNetworkACLPtrOutput() NetworkACLPtrOutput {
	return i.ToNetworkACLPtrOutputWithContext(context.Background())
}

func (i *networkACLPtrType) ToNetworkACLPtrOutputWithContext(ctx context.Context) NetworkACLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLPtrOutput)
}

// Network ACL
type NetworkACLOutput struct{ *pulumi.OutputState }

func (NetworkACLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACL)(nil)).Elem()
}

func (o NetworkACLOutput) ToNetworkACLOutput() NetworkACLOutput {
	return o
}

func (o NetworkACLOutput) ToNetworkACLOutputWithContext(ctx context.Context) NetworkACLOutput {
	return o
}

func (o NetworkACLOutput) ToNetworkACLPtrOutput() NetworkACLPtrOutput {
	return o.ToNetworkACLPtrOutputWithContext(context.Background())
}

func (o NetworkACLOutput) ToNetworkACLPtrOutputWithContext(ctx context.Context) NetworkACLPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkACL) *NetworkACL {
		return &v
	}).(NetworkACLPtrOutput)
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACL) []string { return v.Allow }).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACL) []string { return v.Deny }).(pulumi.StringArrayOutput)
}

type NetworkACLPtrOutput struct{ *pulumi.OutputState }

func (NetworkACLPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACL)(nil)).Elem()
}

func (o NetworkACLPtrOutput) ToNetworkACLPtrOutput() NetworkACLPtrOutput {
	return o
}

func (o NetworkACLPtrOutput) ToNetworkACLPtrOutputWithContext(ctx context.Context) NetworkACLPtrOutput {
	return o
}

func (o NetworkACLPtrOutput) Elem() NetworkACLOutput {
	return o.ApplyT(func(v *NetworkACL) NetworkACL {
		if v != nil {
			return *v
		}
		var ret NetworkACL
		return ret
	}).(NetworkACLOutput)
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLPtrOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkACL) []string {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLPtrOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkACL) []string {
		if v == nil {
			return nil
		}
		return v.Deny
	}).(pulumi.StringArrayOutput)
}

// Network ACL
type NetworkACLResponse struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []string `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []string `pulumi:"deny"`
}

// Network ACL
type NetworkACLResponseOutput struct{ *pulumi.OutputState }

func (NetworkACLResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACLResponse)(nil)).Elem()
}

func (o NetworkACLResponseOutput) ToNetworkACLResponseOutput() NetworkACLResponseOutput {
	return o
}

func (o NetworkACLResponseOutput) ToNetworkACLResponseOutputWithContext(ctx context.Context) NetworkACLResponseOutput {
	return o
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLResponseOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACLResponse) []string { return v.Allow }).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLResponseOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACLResponse) []string { return v.Deny }).(pulumi.StringArrayOutput)
}

type NetworkACLResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkACLResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACLResponse)(nil)).Elem()
}

func (o NetworkACLResponsePtrOutput) ToNetworkACLResponsePtrOutput() NetworkACLResponsePtrOutput {
	return o
}

func (o NetworkACLResponsePtrOutput) ToNetworkACLResponsePtrOutputWithContext(ctx context.Context) NetworkACLResponsePtrOutput {
	return o
}

func (o NetworkACLResponsePtrOutput) Elem() NetworkACLResponseOutput {
	return o.ApplyT(func(v *NetworkACLResponse) NetworkACLResponse {
		if v != nil {
			return *v
		}
		var ret NetworkACLResponse
		return ret
	}).(NetworkACLResponseOutput)
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLResponsePtrOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkACLResponse) []string {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o NetworkACLResponsePtrOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkACLResponse) []string {
		if v == nil {
			return nil
		}
		return v.Deny
	}).(pulumi.StringArrayOutput)
}

// Private endpoint
type PrivateEndpoint struct {
	// Full qualified Id of the private endpoint
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//	PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// Private endpoint
type PrivateEndpointArgs struct {
	// Full qualified Id of the private endpoint
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//	        PrivateEndpointArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// Private endpoint
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

// Full qualified Id of the private endpoint
func (o PrivateEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint {
		if v != nil {
			return *v
		}
		var ret PrivateEndpoint
		return ret
	}).(PrivateEndpointOutput)
}

// Full qualified Id of the private endpoint
func (o PrivateEndpointPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// ACL for a private endpoint
type PrivateEndpointACL struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []string `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []string `pulumi:"deny"`
	// Name of the private endpoint connection
	Name string `pulumi:"name"`
}

// PrivateEndpointACLInput is an input type that accepts PrivateEndpointACLArgs and PrivateEndpointACLOutput values.
// You can construct a concrete instance of `PrivateEndpointACLInput` via:
//
//	PrivateEndpointACLArgs{...}
type PrivateEndpointACLInput interface {
	pulumi.Input

	ToPrivateEndpointACLOutput() PrivateEndpointACLOutput
	ToPrivateEndpointACLOutputWithContext(context.Context) PrivateEndpointACLOutput
}

// ACL for a private endpoint
type PrivateEndpointACLArgs struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow pulumi.StringArrayInput `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny pulumi.StringArrayInput `pulumi:"deny"`
	// Name of the private endpoint connection
	Name pulumi.StringInput `pulumi:"name"`
}

func (PrivateEndpointACLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointACL)(nil)).Elem()
}

func (i PrivateEndpointACLArgs) ToPrivateEndpointACLOutput() PrivateEndpointACLOutput {
	return i.ToPrivateEndpointACLOutputWithContext(context.Background())
}

func (i PrivateEndpointACLArgs) ToPrivateEndpointACLOutputWithContext(ctx context.Context) PrivateEndpointACLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointACLOutput)
}

// PrivateEndpointACLArrayInput is an input type that accepts PrivateEndpointACLArray and PrivateEndpointACLArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointACLArrayInput` via:
//
//	PrivateEndpointACLArray{ PrivateEndpointACLArgs{...} }
type PrivateEndpointACLArrayInput interface {
	pulumi.Input

	ToPrivateEndpointACLArrayOutput() PrivateEndpointACLArrayOutput
	ToPrivateEndpointACLArrayOutputWithContext(context.Context) PrivateEndpointACLArrayOutput
}

type PrivateEndpointACLArray []PrivateEndpointACLInput

func (PrivateEndpointACLArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointACL)(nil)).Elem()
}

func (i PrivateEndpointACLArray) ToPrivateEndpointACLArrayOutput() PrivateEndpointACLArrayOutput {
	return i.ToPrivateEndpointACLArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointACLArray) ToPrivateEndpointACLArrayOutputWithContext(ctx context.Context) PrivateEndpointACLArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointACLArrayOutput)
}

// ACL for a private endpoint
type PrivateEndpointACLOutput struct{ *pulumi.OutputState }

func (PrivateEndpointACLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointACL)(nil)).Elem()
}

func (o PrivateEndpointACLOutput) ToPrivateEndpointACLOutput() PrivateEndpointACLOutput {
	return o
}

func (o PrivateEndpointACLOutput) ToPrivateEndpointACLOutputWithContext(ctx context.Context) PrivateEndpointACLOutput {
	return o
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o PrivateEndpointACLOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointACL) []string { return v.Allow }).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o PrivateEndpointACLOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointACL) []string { return v.Deny }).(pulumi.StringArrayOutput)
}

// Name of the private endpoint connection
func (o PrivateEndpointACLOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointACL) string { return v.Name }).(pulumi.StringOutput)
}

type PrivateEndpointACLArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointACLArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointACL)(nil)).Elem()
}

func (o PrivateEndpointACLArrayOutput) ToPrivateEndpointACLArrayOutput() PrivateEndpointACLArrayOutput {
	return o
}

func (o PrivateEndpointACLArrayOutput) ToPrivateEndpointACLArrayOutputWithContext(ctx context.Context) PrivateEndpointACLArrayOutput {
	return o
}

func (o PrivateEndpointACLArrayOutput) Index(i pulumi.IntInput) PrivateEndpointACLOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointACL {
		return vs[0].([]PrivateEndpointACL)[vs[1].(int)]
	}).(PrivateEndpointACLOutput)
}

// ACL for a private endpoint
type PrivateEndpointACLResponse struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []string `pulumi:"allow"`
	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []string `pulumi:"deny"`
	// Name of the private endpoint connection
	Name string `pulumi:"name"`
}

// ACL for a private endpoint
type PrivateEndpointACLResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointACLResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointACLResponse)(nil)).Elem()
}

func (o PrivateEndpointACLResponseOutput) ToPrivateEndpointACLResponseOutput() PrivateEndpointACLResponseOutput {
	return o
}

func (o PrivateEndpointACLResponseOutput) ToPrivateEndpointACLResponseOutputWithContext(ctx context.Context) PrivateEndpointACLResponseOutput {
	return o
}

// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o PrivateEndpointACLResponseOutput) Allow() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointACLResponse) []string { return v.Allow }).(pulumi.StringArrayOutput)
}

// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
func (o PrivateEndpointACLResponseOutput) Deny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointACLResponse) []string { return v.Deny }).(pulumi.StringArrayOutput)
}

// Name of the private endpoint connection
func (o PrivateEndpointACLResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointACLResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PrivateEndpointACLResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointACLResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointACLResponse)(nil)).Elem()
}

func (o PrivateEndpointACLResponseArrayOutput) ToPrivateEndpointACLResponseArrayOutput() PrivateEndpointACLResponseArrayOutput {
	return o
}

func (o PrivateEndpointACLResponseArrayOutput) ToPrivateEndpointACLResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointACLResponseArrayOutput {
	return o
}

func (o PrivateEndpointACLResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointACLResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointACLResponse {
		return vs[0].([]PrivateEndpointACLResponse)[vs[1].(int)]
	}).(PrivateEndpointACLResponseOutput)
}

// A private endpoint connection to an azure resource
type PrivateEndpointConnectionResponse struct {
	// Group IDs
	GroupIds []string `pulumi:"groupIds"`
	// Fully qualified resource Id for the resource.
	Id string `pulumi:"id"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// Private endpoint
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// Connection state of the private endpoint connection
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type string `pulumi:"type"`
}

// A private endpoint connection to an azure resource
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Group IDs
func (o PrivateEndpointConnectionResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// Fully qualified resource Id for the resource.
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource.
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Private endpoint
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// Connection state of the private endpoint connection
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// Provisioning state of the resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// Private endpoint
type PrivateEndpointResponse struct {
	// Full qualified Id of the private endpoint
	Id *string `pulumi:"id"`
}

// Private endpoint
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// Full qualified Id of the private endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// Full qualified Id of the private endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput).ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStatePtrInput is an input type that accepts PrivateLinkServiceConnectionStateArgs, PrivateLinkServiceConnectionStatePtr and PrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStatePtrInput` via:
//
//	        PrivateLinkServiceConnectionStateArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput
	ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStatePtrOutput
}

type privateLinkServiceConnectionStatePtrType PrivateLinkServiceConnectionStateArgs

func PrivateLinkServiceConnectionStatePtr(v *PrivateLinkServiceConnectionStateArgs) PrivateLinkServiceConnectionStatePtrInput {
	return (*privateLinkServiceConnectionStatePtrType)(v)
}

func (*privateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStatePtrOutput)
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkServiceConnectionState) *PrivateLinkServiceConnectionState {
		return &v
	}).(PrivateLinkServiceConnectionStatePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) Elem() PrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) PrivateLinkServiceConnectionState {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionState
		return ret
	}).(PrivateLinkServiceConnectionStateOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// Connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionStateResponse
		return ret
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Resource log category configuration of a Microsoft.SignalRService resource.
type ResourceLogCategory struct {
	// Indicates whether or the resource log category is enabled.
	// Available values: true, false.
	// Case insensitive.
	Enabled *string `pulumi:"enabled"`
	// Gets or sets the resource log category's name.
	// Available values: ConnectivityLogs, MessagingLogs.
	// Case insensitive.
	Name *string `pulumi:"name"`
}

// ResourceLogCategoryInput is an input type that accepts ResourceLogCategoryArgs and ResourceLogCategoryOutput values.
// You can construct a concrete instance of `ResourceLogCategoryInput` via:
//
//	ResourceLogCategoryArgs{...}
type ResourceLogCategoryInput interface {
	pulumi.Input

	ToResourceLogCategoryOutput() ResourceLogCategoryOutput
	ToResourceLogCategoryOutputWithContext(context.Context) ResourceLogCategoryOutput
}

// Resource log category configuration of a Microsoft.SignalRService resource.
type ResourceLogCategoryArgs struct {
	// Indicates whether or the resource log category is enabled.
	// Available values: true, false.
	// Case insensitive.
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
	// Gets or sets the resource log category's name.
	// Available values: ConnectivityLogs, MessagingLogs.
	// Case insensitive.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ResourceLogCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLogCategory)(nil)).Elem()
}

func (i ResourceLogCategoryArgs) ToResourceLogCategoryOutput() ResourceLogCategoryOutput {
	return i.ToResourceLogCategoryOutputWithContext(context.Background())
}

func (i ResourceLogCategoryArgs) ToResourceLogCategoryOutputWithContext(ctx context.Context) ResourceLogCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLogCategoryOutput)
}

// ResourceLogCategoryArrayInput is an input type that accepts ResourceLogCategoryArray and ResourceLogCategoryArrayOutput values.
// You can construct a concrete instance of `ResourceLogCategoryArrayInput` via:
//
//	ResourceLogCategoryArray{ ResourceLogCategoryArgs{...} }
type ResourceLogCategoryArrayInput interface {
	pulumi.Input

	ToResourceLogCategoryArrayOutput() ResourceLogCategoryArrayOutput
	ToResourceLogCategoryArrayOutputWithContext(context.Context) ResourceLogCategoryArrayOutput
}

type ResourceLogCategoryArray []ResourceLogCategoryInput

func (ResourceLogCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLogCategory)(nil)).Elem()
}

func (i ResourceLogCategoryArray) ToResourceLogCategoryArrayOutput() ResourceLogCategoryArrayOutput {
	return i.ToResourceLogCategoryArrayOutputWithContext(context.Background())
}

func (i ResourceLogCategoryArray) ToResourceLogCategoryArrayOutputWithContext(ctx context.Context) ResourceLogCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLogCategoryArrayOutput)
}

// Resource log category configuration of a Microsoft.SignalRService resource.
type ResourceLogCategoryOutput struct{ *pulumi.OutputState }

func (ResourceLogCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLogCategory)(nil)).Elem()
}

func (o ResourceLogCategoryOutput) ToResourceLogCategoryOutput() ResourceLogCategoryOutput {
	return o
}

func (o ResourceLogCategoryOutput) ToResourceLogCategoryOutputWithContext(ctx context.Context) ResourceLogCategoryOutput {
	return o
}

// Indicates whether or the resource log category is enabled.
// Available values: true, false.
// Case insensitive.
func (o ResourceLogCategoryOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLogCategory) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// Gets or sets the resource log category's name.
// Available values: ConnectivityLogs, MessagingLogs.
// Case insensitive.
func (o ResourceLogCategoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLogCategory) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceLogCategoryArrayOutput struct{ *pulumi.OutputState }

func (ResourceLogCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLogCategory)(nil)).Elem()
}

func (o ResourceLogCategoryArrayOutput) ToResourceLogCategoryArrayOutput() ResourceLogCategoryArrayOutput {
	return o
}

func (o ResourceLogCategoryArrayOutput) ToResourceLogCategoryArrayOutputWithContext(ctx context.Context) ResourceLogCategoryArrayOutput {
	return o
}

func (o ResourceLogCategoryArrayOutput) Index(i pulumi.IntInput) ResourceLogCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLogCategory {
		return vs[0].([]ResourceLogCategory)[vs[1].(int)]
	}).(ResourceLogCategoryOutput)
}

// Resource log category configuration of a Microsoft.SignalRService resource.
type ResourceLogCategoryResponse struct {
	// Indicates whether or the resource log category is enabled.
	// Available values: true, false.
	// Case insensitive.
	Enabled *string `pulumi:"enabled"`
	// Gets or sets the resource log category's name.
	// Available values: ConnectivityLogs, MessagingLogs.
	// Case insensitive.
	Name *string `pulumi:"name"`
}

// Resource log category configuration of a Microsoft.SignalRService resource.
type ResourceLogCategoryResponseOutput struct{ *pulumi.OutputState }

func (ResourceLogCategoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLogCategoryResponse)(nil)).Elem()
}

func (o ResourceLogCategoryResponseOutput) ToResourceLogCategoryResponseOutput() ResourceLogCategoryResponseOutput {
	return o
}

func (o ResourceLogCategoryResponseOutput) ToResourceLogCategoryResponseOutputWithContext(ctx context.Context) ResourceLogCategoryResponseOutput {
	return o
}

// Indicates whether or the resource log category is enabled.
// Available values: true, false.
// Case insensitive.
func (o ResourceLogCategoryResponseOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLogCategoryResponse) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// Gets or sets the resource log category's name.
// Available values: ConnectivityLogs, MessagingLogs.
// Case insensitive.
func (o ResourceLogCategoryResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLogCategoryResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceLogCategoryResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceLogCategoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLogCategoryResponse)(nil)).Elem()
}

func (o ResourceLogCategoryResponseArrayOutput) ToResourceLogCategoryResponseArrayOutput() ResourceLogCategoryResponseArrayOutput {
	return o
}

func (o ResourceLogCategoryResponseArrayOutput) ToResourceLogCategoryResponseArrayOutputWithContext(ctx context.Context) ResourceLogCategoryResponseArrayOutput {
	return o
}

func (o ResourceLogCategoryResponseArrayOutput) Index(i pulumi.IntInput) ResourceLogCategoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLogCategoryResponse {
		return vs[0].([]ResourceLogCategoryResponse)[vs[1].(int)]
	}).(ResourceLogCategoryResponseOutput)
}

// Resource log configuration of a Microsoft.SignalRService resource.
type ResourceLogConfiguration struct {
	// Gets or sets the list of category configurations.
	Categories []ResourceLogCategory `pulumi:"categories"`
}

// ResourceLogConfigurationInput is an input type that accepts ResourceLogConfigurationArgs and ResourceLogConfigurationOutput values.
// You can construct a concrete instance of `ResourceLogConfigurationInput` via:
//
//	ResourceLogConfigurationArgs{...}
type ResourceLogConfigurationInput interface {
	pulumi.Input

	ToResourceLogConfigurationOutput() ResourceLogConfigurationOutput
	ToResourceLogConfigurationOutputWithContext(context.Context) ResourceLogConfigurationOutput
}

// Resource log configuration of a Microsoft.SignalRService resource.
type ResourceLogConfigurationArgs struct {
	// Gets or sets the list of category configurations.
	Categories ResourceLogCategoryArrayInput `pulumi:"categories"`
}

func (ResourceLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLogConfiguration)(nil)).Elem()
}

func (i ResourceLogConfigurationArgs) ToResourceLogConfigurationOutput() ResourceLogConfigurationOutput {
	return i.ToResourceLogConfigurationOutputWithContext(context.Background())
}

func (i ResourceLogConfigurationArgs) ToResourceLogConfigurationOutputWithContext(ctx context.Context) ResourceLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLogConfigurationOutput)
}

func (i ResourceLogConfigurationArgs) ToResourceLogConfigurationPtrOutput() ResourceLogConfigurationPtrOutput {
	return i.ToResourceLogConfigurationPtrOutputWithContext(context.Background())
}

func (i ResourceLogConfigurationArgs) ToResourceLogConfigurationPtrOutputWithContext(ctx context.Context) ResourceLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLogConfigurationOutput).ToResourceLogConfigurationPtrOutputWithContext(ctx)
}

// ResourceLogConfigurationPtrInput is an input type that accepts ResourceLogConfigurationArgs, ResourceLogConfigurationPtr and ResourceLogConfigurationPtrOutput values.
// You can construct a concrete instance of `ResourceLogConfigurationPtrInput` via:
//
//	        ResourceLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ResourceLogConfigurationPtrInput interface {
	pulumi.Input

	ToResourceLogConfigurationPtrOutput() ResourceLogConfigurationPtrOutput
	ToResourceLogConfigurationPtrOutputWithContext(context.Context) ResourceLogConfigurationPtrOutput
}

type resourceLogConfigurationPtrType ResourceLogConfigurationArgs

func ResourceLogConfigurationPtr(v *ResourceLogConfigurationArgs) ResourceLogConfigurationPtrInput {
	return (*resourceLogConfigurationPtrType)(v)
}

func (*resourceLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLogConfiguration)(nil)).Elem()
}

func (i *resourceLogConfigurationPtrType) ToResourceLogConfigurationPtrOutput() ResourceLogConfigurationPtrOutput {
	return i.ToResourceLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *resourceLogConfigurationPtrType) ToResourceLogConfigurationPtrOutputWithContext(ctx context.Context) ResourceLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLogConfigurationPtrOutput)
}

// Resource log configuration of a Microsoft.SignalRService resource.
type ResourceLogConfigurationOutput struct{ *pulumi.OutputState }

func (ResourceLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLogConfiguration)(nil)).Elem()
}

func (o ResourceLogConfigurationOutput) ToResourceLogConfigurationOutput() ResourceLogConfigurationOutput {
	return o
}

func (o ResourceLogConfigurationOutput) ToResourceLogConfigurationOutputWithContext(ctx context.Context) ResourceLogConfigurationOutput {
	return o
}

func (o ResourceLogConfigurationOutput) ToResourceLogConfigurationPtrOutput() ResourceLogConfigurationPtrOutput {
	return o.ToResourceLogConfigurationPtrOutputWithContext(context.Background())
}

func (o ResourceLogConfigurationOutput) ToResourceLogConfigurationPtrOutputWithContext(ctx context.Context) ResourceLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceLogConfiguration) *ResourceLogConfiguration {
		return &v
	}).(ResourceLogConfigurationPtrOutput)
}

// Gets or sets the list of category configurations.
func (o ResourceLogConfigurationOutput) Categories() ResourceLogCategoryArrayOutput {
	return o.ApplyT(func(v ResourceLogConfiguration) []ResourceLogCategory { return v.Categories }).(ResourceLogCategoryArrayOutput)
}

type ResourceLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ResourceLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLogConfiguration)(nil)).Elem()
}

func (o ResourceLogConfigurationPtrOutput) ToResourceLogConfigurationPtrOutput() ResourceLogConfigurationPtrOutput {
	return o
}

func (o ResourceLogConfigurationPtrOutput) ToResourceLogConfigurationPtrOutputWithContext(ctx context.Context) ResourceLogConfigurationPtrOutput {
	return o
}

func (o ResourceLogConfigurationPtrOutput) Elem() ResourceLogConfigurationOutput {
	return o.ApplyT(func(v *ResourceLogConfiguration) ResourceLogConfiguration {
		if v != nil {
			return *v
		}
		var ret ResourceLogConfiguration
		return ret
	}).(ResourceLogConfigurationOutput)
}

// Gets or sets the list of category configurations.
func (o ResourceLogConfigurationPtrOutput) Categories() ResourceLogCategoryArrayOutput {
	return o.ApplyT(func(v *ResourceLogConfiguration) []ResourceLogCategory {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(ResourceLogCategoryArrayOutput)
}

// Resource log configuration of a Microsoft.SignalRService resource.
type ResourceLogConfigurationResponse struct {
	// Gets or sets the list of category configurations.
	Categories []ResourceLogCategoryResponse `pulumi:"categories"`
}

// Resource log configuration of a Microsoft.SignalRService resource.
type ResourceLogConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ResourceLogConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLogConfigurationResponse)(nil)).Elem()
}

func (o ResourceLogConfigurationResponseOutput) ToResourceLogConfigurationResponseOutput() ResourceLogConfigurationResponseOutput {
	return o
}

func (o ResourceLogConfigurationResponseOutput) ToResourceLogConfigurationResponseOutputWithContext(ctx context.Context) ResourceLogConfigurationResponseOutput {
	return o
}

// Gets or sets the list of category configurations.
func (o ResourceLogConfigurationResponseOutput) Categories() ResourceLogCategoryResponseArrayOutput {
	return o.ApplyT(func(v ResourceLogConfigurationResponse) []ResourceLogCategoryResponse { return v.Categories }).(ResourceLogCategoryResponseArrayOutput)
}

type ResourceLogConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceLogConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLogConfigurationResponse)(nil)).Elem()
}

func (o ResourceLogConfigurationResponsePtrOutput) ToResourceLogConfigurationResponsePtrOutput() ResourceLogConfigurationResponsePtrOutput {
	return o
}

func (o ResourceLogConfigurationResponsePtrOutput) ToResourceLogConfigurationResponsePtrOutputWithContext(ctx context.Context) ResourceLogConfigurationResponsePtrOutput {
	return o
}

func (o ResourceLogConfigurationResponsePtrOutput) Elem() ResourceLogConfigurationResponseOutput {
	return o.ApplyT(func(v *ResourceLogConfigurationResponse) ResourceLogConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ResourceLogConfigurationResponse
		return ret
	}).(ResourceLogConfigurationResponseOutput)
}

// Gets or sets the list of category configurations.
func (o ResourceLogConfigurationResponsePtrOutput) Categories() ResourceLogCategoryResponseArrayOutput {
	return o.ApplyT(func(v *ResourceLogConfigurationResponse) []ResourceLogCategoryResponse {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(ResourceLogCategoryResponseArrayOutput)
}

// Reference to a resource.
type ResourceReference struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// ResourceReferenceInput is an input type that accepts ResourceReferenceArgs and ResourceReferenceOutput values.
// You can construct a concrete instance of `ResourceReferenceInput` via:
//
//	ResourceReferenceArgs{...}
type ResourceReferenceInput interface {
	pulumi.Input

	ToResourceReferenceOutput() ResourceReferenceOutput
	ToResourceReferenceOutputWithContext(context.Context) ResourceReferenceOutput
}

// Reference to a resource.
type ResourceReferenceArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ResourceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReference)(nil)).Elem()
}

func (i ResourceReferenceArgs) ToResourceReferenceOutput() ResourceReferenceOutput {
	return i.ToResourceReferenceOutputWithContext(context.Background())
}

func (i ResourceReferenceArgs) ToResourceReferenceOutputWithContext(ctx context.Context) ResourceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferenceOutput)
}

// Reference to a resource.
type ResourceReferenceOutput struct{ *pulumi.OutputState }

func (ResourceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReference)(nil)).Elem()
}

func (o ResourceReferenceOutput) ToResourceReferenceOutput() ResourceReferenceOutput {
	return o
}

func (o ResourceReferenceOutput) ToResourceReferenceOutputWithContext(ctx context.Context) ResourceReferenceOutput {
	return o
}

// Resource ID.
func (o ResourceReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Reference to a resource.
type ResourceReferenceResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// Reference to a resource.
type ResourceReferenceResponseOutput struct{ *pulumi.OutputState }

func (ResourceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReferenceResponse)(nil)).Elem()
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponseOutput() ResourceReferenceResponseOutput {
	return o
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponseOutputWithContext(ctx context.Context) ResourceReferenceResponseOutput {
	return o
}

// Resource ID.
func (o ResourceReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The billing information of the resource.
type ResourceSku struct {
	// Optional, integer. The unit count of the resource. 1 by default.
	//
	// If present, following values are allowed:
	//     Free: 1
	//     Standard: 1,2,5,10,20,50,100
	Capacity *int `pulumi:"capacity"`
	// The name of the SKU. Required.
	//
	// Allowed values: Standard_S1, Free_F1
	Name string `pulumi:"name"`
	// Optional tier of this particular SKU. 'Standard' or 'Free'.
	//
	// `Basic` is deprecated, use `Standard` instead.
	Tier *string `pulumi:"tier"`
}

// ResourceSkuInput is an input type that accepts ResourceSkuArgs and ResourceSkuOutput values.
// You can construct a concrete instance of `ResourceSkuInput` via:
//
//	ResourceSkuArgs{...}
type ResourceSkuInput interface {
	pulumi.Input

	ToResourceSkuOutput() ResourceSkuOutput
	ToResourceSkuOutputWithContext(context.Context) ResourceSkuOutput
}

// The billing information of the resource.
type ResourceSkuArgs struct {
	// Optional, integer. The unit count of the resource. 1 by default.
	//
	// If present, following values are allowed:
	//     Free: 1
	//     Standard: 1,2,5,10,20,50,100
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The name of the SKU. Required.
	//
	// Allowed values: Standard_S1, Free_F1
	Name pulumi.StringInput `pulumi:"name"`
	// Optional tier of this particular SKU. 'Standard' or 'Free'.
	//
	// `Basic` is deprecated, use `Standard` instead.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ResourceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSku)(nil)).Elem()
}

func (i ResourceSkuArgs) ToResourceSkuOutput() ResourceSkuOutput {
	return i.ToResourceSkuOutputWithContext(context.Background())
}

func (i ResourceSkuArgs) ToResourceSkuOutputWithContext(ctx context.Context) ResourceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuOutput)
}

func (i ResourceSkuArgs) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return i.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (i ResourceSkuArgs) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuOutput).ToResourceSkuPtrOutputWithContext(ctx)
}

// ResourceSkuPtrInput is an input type that accepts ResourceSkuArgs, ResourceSkuPtr and ResourceSkuPtrOutput values.
// You can construct a concrete instance of `ResourceSkuPtrInput` via:
//
//	        ResourceSkuArgs{...}
//
//	or:
//
//	        nil
type ResourceSkuPtrInput interface {
	pulumi.Input

	ToResourceSkuPtrOutput() ResourceSkuPtrOutput
	ToResourceSkuPtrOutputWithContext(context.Context) ResourceSkuPtrOutput
}

type resourceSkuPtrType ResourceSkuArgs

func ResourceSkuPtr(v *ResourceSkuArgs) ResourceSkuPtrInput {
	return (*resourceSkuPtrType)(v)
}

func (*resourceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSku)(nil)).Elem()
}

func (i *resourceSkuPtrType) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return i.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (i *resourceSkuPtrType) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuPtrOutput)
}

// The billing information of the resource.
type ResourceSkuOutput struct{ *pulumi.OutputState }

func (ResourceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSku)(nil)).Elem()
}

func (o ResourceSkuOutput) ToResourceSkuOutput() ResourceSkuOutput {
	return o
}

func (o ResourceSkuOutput) ToResourceSkuOutputWithContext(ctx context.Context) ResourceSkuOutput {
	return o
}

func (o ResourceSkuOutput) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return o.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (o ResourceSkuOutput) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSku) *ResourceSku {
		return &v
	}).(ResourceSkuPtrOutput)
}

// Optional, integer. The unit count of the resource. 1 by default.
//
// If present, following values are allowed:
//
//	Free: 1
//	Standard: 1,2,5,10,20,50,100
func (o ResourceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The name of the SKU. Required.
//
// Allowed values: Standard_S1, Free_F1
func (o ResourceSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSku) string { return v.Name }).(pulumi.StringOutput)
}

// Optional tier of this particular SKU. 'Standard' or 'Free'.
//
// `Basic` is deprecated, use `Standard` instead.
func (o ResourceSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ResourceSkuPtrOutput struct{ *pulumi.OutputState }

func (ResourceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSku)(nil)).Elem()
}

func (o ResourceSkuPtrOutput) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return o
}

func (o ResourceSkuPtrOutput) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return o
}

func (o ResourceSkuPtrOutput) Elem() ResourceSkuOutput {
	return o.ApplyT(func(v *ResourceSku) ResourceSku {
		if v != nil {
			return *v
		}
		var ret ResourceSku
		return ret
	}).(ResourceSkuOutput)
}

// Optional, integer. The unit count of the resource. 1 by default.
//
// If present, following values are allowed:
//
//	Free: 1
//	Standard: 1,2,5,10,20,50,100
func (o ResourceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The name of the SKU. Required.
//
// Allowed values: Standard_S1, Free_F1
func (o ResourceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Optional tier of this particular SKU. 'Standard' or 'Free'.
//
// `Basic` is deprecated, use `Standard` instead.
func (o ResourceSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The billing information of the resource.
type ResourceSkuResponse struct {
	// Optional, integer. The unit count of the resource. 1 by default.
	//
	// If present, following values are allowed:
	//     Free: 1
	//     Standard: 1,2,5,10,20,50,100
	Capacity *int `pulumi:"capacity"`
	// Not used. Retained for future use.
	Family string `pulumi:"family"`
	// The name of the SKU. Required.
	//
	// Allowed values: Standard_S1, Free_F1
	Name string `pulumi:"name"`
	// Not used. Retained for future use.
	Size string `pulumi:"size"`
	// Optional tier of this particular SKU. 'Standard' or 'Free'.
	//
	// `Basic` is deprecated, use `Standard` instead.
	Tier *string `pulumi:"tier"`
}

// The billing information of the resource.
type ResourceSkuResponseOutput struct{ *pulumi.OutputState }

func (ResourceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSkuResponse)(nil)).Elem()
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponseOutput() ResourceSkuResponseOutput {
	return o
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponseOutputWithContext(ctx context.Context) ResourceSkuResponseOutput {
	return o
}

// Optional, integer. The unit count of the resource. 1 by default.
//
// If present, following values are allowed:
//
//	Free: 1
//	Standard: 1,2,5,10,20,50,100
func (o ResourceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Not used. Retained for future use.
func (o ResourceSkuResponseOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSkuResponse) string { return v.Family }).(pulumi.StringOutput)
}

// The name of the SKU. Required.
//
// Allowed values: Standard_S1, Free_F1
func (o ResourceSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Not used. Retained for future use.
func (o ResourceSkuResponseOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSkuResponse) string { return v.Size }).(pulumi.StringOutput)
}

// Optional tier of this particular SKU. 'Standard' or 'Free'.
//
// `Basic` is deprecated, use `Standard` instead.
func (o ResourceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ResourceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSkuResponse)(nil)).Elem()
}

func (o ResourceSkuResponsePtrOutput) ToResourceSkuResponsePtrOutput() ResourceSkuResponsePtrOutput {
	return o
}

func (o ResourceSkuResponsePtrOutput) ToResourceSkuResponsePtrOutputWithContext(ctx context.Context) ResourceSkuResponsePtrOutput {
	return o
}

func (o ResourceSkuResponsePtrOutput) Elem() ResourceSkuResponseOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) ResourceSkuResponse {
		if v != nil {
			return *v
		}
		var ret ResourceSkuResponse
		return ret
	}).(ResourceSkuResponseOutput)
}

// Optional, integer. The unit count of the resource. 1 by default.
//
// If present, following values are allowed:
//
//	Free: 1
//	Standard: 1,2,5,10,20,50,100
func (o ResourceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Not used. Retained for future use.
func (o ResourceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Required.
//
// Allowed values: Standard_S1, Free_F1
func (o ResourceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Not used. Retained for future use.
func (o ResourceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.StringPtrOutput)
}

// Optional tier of this particular SKU. 'Standard' or 'Free'.
//
// `Basic` is deprecated, use `Standard` instead.
func (o ResourceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The settings for the Upstream when the service is in server-less mode.
type ServerlessUpstreamSettings struct {
	// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates []UpstreamTemplate `pulumi:"templates"`
}

// ServerlessUpstreamSettingsInput is an input type that accepts ServerlessUpstreamSettingsArgs and ServerlessUpstreamSettingsOutput values.
// You can construct a concrete instance of `ServerlessUpstreamSettingsInput` via:
//
//	ServerlessUpstreamSettingsArgs{...}
type ServerlessUpstreamSettingsInput interface {
	pulumi.Input

	ToServerlessUpstreamSettingsOutput() ServerlessUpstreamSettingsOutput
	ToServerlessUpstreamSettingsOutputWithContext(context.Context) ServerlessUpstreamSettingsOutput
}

// The settings for the Upstream when the service is in server-less mode.
type ServerlessUpstreamSettingsArgs struct {
	// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates UpstreamTemplateArrayInput `pulumi:"templates"`
}

func (ServerlessUpstreamSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessUpstreamSettings)(nil)).Elem()
}

func (i ServerlessUpstreamSettingsArgs) ToServerlessUpstreamSettingsOutput() ServerlessUpstreamSettingsOutput {
	return i.ToServerlessUpstreamSettingsOutputWithContext(context.Background())
}

func (i ServerlessUpstreamSettingsArgs) ToServerlessUpstreamSettingsOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsOutput)
}

func (i ServerlessUpstreamSettingsArgs) ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput {
	return i.ToServerlessUpstreamSettingsPtrOutputWithContext(context.Background())
}

func (i ServerlessUpstreamSettingsArgs) ToServerlessUpstreamSettingsPtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsOutput).ToServerlessUpstreamSettingsPtrOutputWithContext(ctx)
}

// ServerlessUpstreamSettingsPtrInput is an input type that accepts ServerlessUpstreamSettingsArgs, ServerlessUpstreamSettingsPtr and ServerlessUpstreamSettingsPtrOutput values.
// You can construct a concrete instance of `ServerlessUpstreamSettingsPtrInput` via:
//
//	        ServerlessUpstreamSettingsArgs{...}
//
//	or:
//
//	        nil
type ServerlessUpstreamSettingsPtrInput interface {
	pulumi.Input

	ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput
	ToServerlessUpstreamSettingsPtrOutputWithContext(context.Context) ServerlessUpstreamSettingsPtrOutput
}

type serverlessUpstreamSettingsPtrType ServerlessUpstreamSettingsArgs

func ServerlessUpstreamSettingsPtr(v *ServerlessUpstreamSettingsArgs) ServerlessUpstreamSettingsPtrInput {
	return (*serverlessUpstreamSettingsPtrType)(v)
}

func (*serverlessUpstreamSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessUpstreamSettings)(nil)).Elem()
}

func (i *serverlessUpstreamSettingsPtrType) ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput {
	return i.ToServerlessUpstreamSettingsPtrOutputWithContext(context.Background())
}

func (i *serverlessUpstreamSettingsPtrType) ToServerlessUpstreamSettingsPtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessUpstreamSettingsPtrOutput)
}

// The settings for the Upstream when the service is in server-less mode.
type ServerlessUpstreamSettingsOutput struct{ *pulumi.OutputState }

func (ServerlessUpstreamSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessUpstreamSettings)(nil)).Elem()
}

func (o ServerlessUpstreamSettingsOutput) ToServerlessUpstreamSettingsOutput() ServerlessUpstreamSettingsOutput {
	return o
}

func (o ServerlessUpstreamSettingsOutput) ToServerlessUpstreamSettingsOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsOutput {
	return o
}

func (o ServerlessUpstreamSettingsOutput) ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput {
	return o.ToServerlessUpstreamSettingsPtrOutputWithContext(context.Background())
}

func (o ServerlessUpstreamSettingsOutput) ToServerlessUpstreamSettingsPtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerlessUpstreamSettings) *ServerlessUpstreamSettings {
		return &v
	}).(ServerlessUpstreamSettingsPtrOutput)
}

// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
func (o ServerlessUpstreamSettingsOutput) Templates() UpstreamTemplateArrayOutput {
	return o.ApplyT(func(v ServerlessUpstreamSettings) []UpstreamTemplate { return v.Templates }).(UpstreamTemplateArrayOutput)
}

type ServerlessUpstreamSettingsPtrOutput struct{ *pulumi.OutputState }

func (ServerlessUpstreamSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessUpstreamSettings)(nil)).Elem()
}

func (o ServerlessUpstreamSettingsPtrOutput) ToServerlessUpstreamSettingsPtrOutput() ServerlessUpstreamSettingsPtrOutput {
	return o
}

func (o ServerlessUpstreamSettingsPtrOutput) ToServerlessUpstreamSettingsPtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsPtrOutput {
	return o
}

func (o ServerlessUpstreamSettingsPtrOutput) Elem() ServerlessUpstreamSettingsOutput {
	return o.ApplyT(func(v *ServerlessUpstreamSettings) ServerlessUpstreamSettings {
		if v != nil {
			return *v
		}
		var ret ServerlessUpstreamSettings
		return ret
	}).(ServerlessUpstreamSettingsOutput)
}

// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
func (o ServerlessUpstreamSettingsPtrOutput) Templates() UpstreamTemplateArrayOutput {
	return o.ApplyT(func(v *ServerlessUpstreamSettings) []UpstreamTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(UpstreamTemplateArrayOutput)
}

// The settings for the Upstream when the service is in server-less mode.
type ServerlessUpstreamSettingsResponse struct {
	// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates []UpstreamTemplateResponse `pulumi:"templates"`
}

// The settings for the Upstream when the service is in server-less mode.
type ServerlessUpstreamSettingsResponseOutput struct{ *pulumi.OutputState }

func (ServerlessUpstreamSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessUpstreamSettingsResponse)(nil)).Elem()
}

func (o ServerlessUpstreamSettingsResponseOutput) ToServerlessUpstreamSettingsResponseOutput() ServerlessUpstreamSettingsResponseOutput {
	return o
}

func (o ServerlessUpstreamSettingsResponseOutput) ToServerlessUpstreamSettingsResponseOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsResponseOutput {
	return o
}

// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
func (o ServerlessUpstreamSettingsResponseOutput) Templates() UpstreamTemplateResponseArrayOutput {
	return o.ApplyT(func(v ServerlessUpstreamSettingsResponse) []UpstreamTemplateResponse { return v.Templates }).(UpstreamTemplateResponseArrayOutput)
}

type ServerlessUpstreamSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerlessUpstreamSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessUpstreamSettingsResponse)(nil)).Elem()
}

func (o ServerlessUpstreamSettingsResponsePtrOutput) ToServerlessUpstreamSettingsResponsePtrOutput() ServerlessUpstreamSettingsResponsePtrOutput {
	return o
}

func (o ServerlessUpstreamSettingsResponsePtrOutput) ToServerlessUpstreamSettingsResponsePtrOutputWithContext(ctx context.Context) ServerlessUpstreamSettingsResponsePtrOutput {
	return o
}

func (o ServerlessUpstreamSettingsResponsePtrOutput) Elem() ServerlessUpstreamSettingsResponseOutput {
	return o.ApplyT(func(v *ServerlessUpstreamSettingsResponse) ServerlessUpstreamSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ServerlessUpstreamSettingsResponse
		return ret
	}).(ServerlessUpstreamSettingsResponseOutput)
}

// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
func (o ServerlessUpstreamSettingsResponsePtrOutput) Templates() UpstreamTemplateResponseArrayOutput {
	return o.ApplyT(func(v *ServerlessUpstreamSettingsResponse) []UpstreamTemplateResponse {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(UpstreamTemplateResponseArrayOutput)
}

// Describes a Shared Private Link Resource
type SharedPrivateLinkResourceResponse struct {
	// The group id from the provider of resource the shared private link resource is for
	GroupId string `pulumi:"groupId"`
	// Fully qualified resource Id for the resource.
	Id string `pulumi:"id"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The resource id of the resource the shared private link resource is for
	PrivateLinkResourceId string `pulumi:"privateLinkResourceId"`
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The request message for requesting approval of the shared private link resource
	RequestMessage *string `pulumi:"requestMessage"`
	// Status of the shared private link resource
	Status string `pulumi:"status"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type string `pulumi:"type"`
}

// Describes a Shared Private Link Resource
type SharedPrivateLinkResourceResponseOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResourceResponse)(nil)).Elem()
}

func (o SharedPrivateLinkResourceResponseOutput) ToSharedPrivateLinkResourceResponseOutput() SharedPrivateLinkResourceResponseOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseOutput) ToSharedPrivateLinkResourceResponseOutputWithContext(ctx context.Context) SharedPrivateLinkResourceResponseOutput {
	return o
}

// The group id from the provider of resource the shared private link resource is for
func (o SharedPrivateLinkResourceResponseOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) string { return v.GroupId }).(pulumi.StringOutput)
}

// Fully qualified resource Id for the resource.
func (o SharedPrivateLinkResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource.
func (o SharedPrivateLinkResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource id of the resource the shared private link resource is for
func (o SharedPrivateLinkResourceResponseOutput) PrivateLinkResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) string { return v.PrivateLinkResourceId }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o SharedPrivateLinkResourceResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The request message for requesting approval of the shared private link resource
func (o SharedPrivateLinkResourceResponseOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// Status of the shared private link resource
func (o SharedPrivateLinkResourceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o SharedPrivateLinkResourceResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
func (o SharedPrivateLinkResourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type SharedPrivateLinkResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResourceResponse)(nil)).Elem()
}

func (o SharedPrivateLinkResourceResponseArrayOutput) ToSharedPrivateLinkResourceResponseArrayOutput() SharedPrivateLinkResourceResponseArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseArrayOutput) ToSharedPrivateLinkResourceResponseArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceResponseArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedPrivateLinkResourceResponse {
		return vs[0].([]SharedPrivateLinkResourceResponse)[vs[1].(int)]
	}).(SharedPrivateLinkResourceResponseOutput)
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettings struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
}

// SignalRCorsSettingsInput is an input type that accepts SignalRCorsSettingsArgs and SignalRCorsSettingsOutput values.
// You can construct a concrete instance of `SignalRCorsSettingsInput` via:
//
//	SignalRCorsSettingsArgs{...}
type SignalRCorsSettingsInput interface {
	pulumi.Input

	ToSignalRCorsSettingsOutput() SignalRCorsSettingsOutput
	ToSignalRCorsSettingsOutputWithContext(context.Context) SignalRCorsSettingsOutput
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsArgs struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
}

func (SignalRCorsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRCorsSettings)(nil)).Elem()
}

func (i SignalRCorsSettingsArgs) ToSignalRCorsSettingsOutput() SignalRCorsSettingsOutput {
	return i.ToSignalRCorsSettingsOutputWithContext(context.Background())
}

func (i SignalRCorsSettingsArgs) ToSignalRCorsSettingsOutputWithContext(ctx context.Context) SignalRCorsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsOutput)
}

func (i SignalRCorsSettingsArgs) ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput {
	return i.ToSignalRCorsSettingsPtrOutputWithContext(context.Background())
}

func (i SignalRCorsSettingsArgs) ToSignalRCorsSettingsPtrOutputWithContext(ctx context.Context) SignalRCorsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsOutput).ToSignalRCorsSettingsPtrOutputWithContext(ctx)
}

// SignalRCorsSettingsPtrInput is an input type that accepts SignalRCorsSettingsArgs, SignalRCorsSettingsPtr and SignalRCorsSettingsPtrOutput values.
// You can construct a concrete instance of `SignalRCorsSettingsPtrInput` via:
//
//	        SignalRCorsSettingsArgs{...}
//
//	or:
//
//	        nil
type SignalRCorsSettingsPtrInput interface {
	pulumi.Input

	ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput
	ToSignalRCorsSettingsPtrOutputWithContext(context.Context) SignalRCorsSettingsPtrOutput
}

type signalRCorsSettingsPtrType SignalRCorsSettingsArgs

func SignalRCorsSettingsPtr(v *SignalRCorsSettingsArgs) SignalRCorsSettingsPtrInput {
	return (*signalRCorsSettingsPtrType)(v)
}

func (*signalRCorsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRCorsSettings)(nil)).Elem()
}

func (i *signalRCorsSettingsPtrType) ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput {
	return i.ToSignalRCorsSettingsPtrOutputWithContext(context.Background())
}

func (i *signalRCorsSettingsPtrType) ToSignalRCorsSettingsPtrOutputWithContext(ctx context.Context) SignalRCorsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRCorsSettingsPtrOutput)
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsOutput struct{ *pulumi.OutputState }

func (SignalRCorsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRCorsSettings)(nil)).Elem()
}

func (o SignalRCorsSettingsOutput) ToSignalRCorsSettingsOutput() SignalRCorsSettingsOutput {
	return o
}

func (o SignalRCorsSettingsOutput) ToSignalRCorsSettingsOutputWithContext(ctx context.Context) SignalRCorsSettingsOutput {
	return o
}

func (o SignalRCorsSettingsOutput) ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput {
	return o.ToSignalRCorsSettingsPtrOutputWithContext(context.Background())
}

func (o SignalRCorsSettingsOutput) ToSignalRCorsSettingsPtrOutputWithContext(ctx context.Context) SignalRCorsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalRCorsSettings) *SignalRCorsSettings {
		return &v
	}).(SignalRCorsSettingsPtrOutput)
}

// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
func (o SignalRCorsSettingsOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalRCorsSettings) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

type SignalRCorsSettingsPtrOutput struct{ *pulumi.OutputState }

func (SignalRCorsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRCorsSettings)(nil)).Elem()
}

func (o SignalRCorsSettingsPtrOutput) ToSignalRCorsSettingsPtrOutput() SignalRCorsSettingsPtrOutput {
	return o
}

func (o SignalRCorsSettingsPtrOutput) ToSignalRCorsSettingsPtrOutputWithContext(ctx context.Context) SignalRCorsSettingsPtrOutput {
	return o
}

func (o SignalRCorsSettingsPtrOutput) Elem() SignalRCorsSettingsOutput {
	return o.ApplyT(func(v *SignalRCorsSettings) SignalRCorsSettings {
		if v != nil {
			return *v
		}
		var ret SignalRCorsSettings
		return ret
	}).(SignalRCorsSettingsOutput)
}

// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
func (o SignalRCorsSettingsPtrOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalRCorsSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOrigins
	}).(pulumi.StringArrayOutput)
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsResponse struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
}

// Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettingsResponseOutput struct{ *pulumi.OutputState }

func (SignalRCorsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRCorsSettingsResponse)(nil)).Elem()
}

func (o SignalRCorsSettingsResponseOutput) ToSignalRCorsSettingsResponseOutput() SignalRCorsSettingsResponseOutput {
	return o
}

func (o SignalRCorsSettingsResponseOutput) ToSignalRCorsSettingsResponseOutputWithContext(ctx context.Context) SignalRCorsSettingsResponseOutput {
	return o
}

// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
func (o SignalRCorsSettingsResponseOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalRCorsSettingsResponse) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

type SignalRCorsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SignalRCorsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRCorsSettingsResponse)(nil)).Elem()
}

func (o SignalRCorsSettingsResponsePtrOutput) ToSignalRCorsSettingsResponsePtrOutput() SignalRCorsSettingsResponsePtrOutput {
	return o
}

func (o SignalRCorsSettingsResponsePtrOutput) ToSignalRCorsSettingsResponsePtrOutputWithContext(ctx context.Context) SignalRCorsSettingsResponsePtrOutput {
	return o
}

func (o SignalRCorsSettingsResponsePtrOutput) Elem() SignalRCorsSettingsResponseOutput {
	return o.ApplyT(func(v *SignalRCorsSettingsResponse) SignalRCorsSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SignalRCorsSettingsResponse
		return ret
	}).(SignalRCorsSettingsResponseOutput)
}

// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
func (o SignalRCorsSettingsResponsePtrOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalRCorsSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOrigins
	}).(pulumi.StringArrayOutput)
}

// Feature of a resource, which controls the runtime behavior.
type SignalRFeature struct {
	// FeatureFlags is the supported features of Azure SignalR service.
	// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
	// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	// - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	// - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false", to enable/disable live trace feature.
	Flag string `pulumi:"flag"`
	// Optional properties related to this feature.
	Properties map[string]string `pulumi:"properties"`
	// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value string `pulumi:"value"`
}

// SignalRFeatureInput is an input type that accepts SignalRFeatureArgs and SignalRFeatureOutput values.
// You can construct a concrete instance of `SignalRFeatureInput` via:
//
//	SignalRFeatureArgs{...}
type SignalRFeatureInput interface {
	pulumi.Input

	ToSignalRFeatureOutput() SignalRFeatureOutput
	ToSignalRFeatureOutputWithContext(context.Context) SignalRFeatureOutput
}

// Feature of a resource, which controls the runtime behavior.
type SignalRFeatureArgs struct {
	// FeatureFlags is the supported features of Azure SignalR service.
	// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
	// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	// - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	// - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false", to enable/disable live trace feature.
	Flag pulumi.StringInput `pulumi:"flag"`
	// Optional properties related to this feature.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SignalRFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRFeature)(nil)).Elem()
}

func (i SignalRFeatureArgs) ToSignalRFeatureOutput() SignalRFeatureOutput {
	return i.ToSignalRFeatureOutputWithContext(context.Background())
}

func (i SignalRFeatureArgs) ToSignalRFeatureOutputWithContext(ctx context.Context) SignalRFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRFeatureOutput)
}

// SignalRFeatureArrayInput is an input type that accepts SignalRFeatureArray and SignalRFeatureArrayOutput values.
// You can construct a concrete instance of `SignalRFeatureArrayInput` via:
//
//	SignalRFeatureArray{ SignalRFeatureArgs{...} }
type SignalRFeatureArrayInput interface {
	pulumi.Input

	ToSignalRFeatureArrayOutput() SignalRFeatureArrayOutput
	ToSignalRFeatureArrayOutputWithContext(context.Context) SignalRFeatureArrayOutput
}

type SignalRFeatureArray []SignalRFeatureInput

func (SignalRFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalRFeature)(nil)).Elem()
}

func (i SignalRFeatureArray) ToSignalRFeatureArrayOutput() SignalRFeatureArrayOutput {
	return i.ToSignalRFeatureArrayOutputWithContext(context.Background())
}

func (i SignalRFeatureArray) ToSignalRFeatureArrayOutputWithContext(ctx context.Context) SignalRFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRFeatureArrayOutput)
}

// Feature of a resource, which controls the runtime behavior.
type SignalRFeatureOutput struct{ *pulumi.OutputState }

func (SignalRFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRFeature)(nil)).Elem()
}

func (o SignalRFeatureOutput) ToSignalRFeatureOutput() SignalRFeatureOutput {
	return o
}

func (o SignalRFeatureOutput) ToSignalRFeatureOutputWithContext(ctx context.Context) SignalRFeatureOutput {
	return o
}

// FeatureFlags is the supported features of Azure SignalR service.
// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
// - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
// - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false", to enable/disable live trace feature.
func (o SignalRFeatureOutput) Flag() pulumi.StringOutput {
	return o.ApplyT(func(v SignalRFeature) string { return v.Flag }).(pulumi.StringOutput)
}

// Optional properties related to this feature.
func (o SignalRFeatureOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SignalRFeature) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
func (o SignalRFeatureOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SignalRFeature) string { return v.Value }).(pulumi.StringOutput)
}

type SignalRFeatureArrayOutput struct{ *pulumi.OutputState }

func (SignalRFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalRFeature)(nil)).Elem()
}

func (o SignalRFeatureArrayOutput) ToSignalRFeatureArrayOutput() SignalRFeatureArrayOutput {
	return o
}

func (o SignalRFeatureArrayOutput) ToSignalRFeatureArrayOutputWithContext(ctx context.Context) SignalRFeatureArrayOutput {
	return o
}

func (o SignalRFeatureArrayOutput) Index(i pulumi.IntInput) SignalRFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignalRFeature {
		return vs[0].([]SignalRFeature)[vs[1].(int)]
	}).(SignalRFeatureOutput)
}

// Feature of a resource, which controls the runtime behavior.
type SignalRFeatureResponse struct {
	// FeatureFlags is the supported features of Azure SignalR service.
	// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
	// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	// - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	// - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false", to enable/disable live trace feature.
	Flag string `pulumi:"flag"`
	// Optional properties related to this feature.
	Properties map[string]string `pulumi:"properties"`
	// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value string `pulumi:"value"`
}

// Feature of a resource, which controls the runtime behavior.
type SignalRFeatureResponseOutput struct{ *pulumi.OutputState }

func (SignalRFeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRFeatureResponse)(nil)).Elem()
}

func (o SignalRFeatureResponseOutput) ToSignalRFeatureResponseOutput() SignalRFeatureResponseOutput {
	return o
}

func (o SignalRFeatureResponseOutput) ToSignalRFeatureResponseOutputWithContext(ctx context.Context) SignalRFeatureResponseOutput {
	return o
}

// FeatureFlags is the supported features of Azure SignalR service.
// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
// - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
// - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false", to enable/disable live trace feature.
func (o SignalRFeatureResponseOutput) Flag() pulumi.StringOutput {
	return o.ApplyT(func(v SignalRFeatureResponse) string { return v.Flag }).(pulumi.StringOutput)
}

// Optional properties related to this feature.
func (o SignalRFeatureResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SignalRFeatureResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
func (o SignalRFeatureResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SignalRFeatureResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SignalRFeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (SignalRFeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalRFeatureResponse)(nil)).Elem()
}

func (o SignalRFeatureResponseArrayOutput) ToSignalRFeatureResponseArrayOutput() SignalRFeatureResponseArrayOutput {
	return o
}

func (o SignalRFeatureResponseArrayOutput) ToSignalRFeatureResponseArrayOutputWithContext(ctx context.Context) SignalRFeatureResponseArrayOutput {
	return o
}

func (o SignalRFeatureResponseArrayOutput) Index(i pulumi.IntInput) SignalRFeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignalRFeatureResponse {
		return vs[0].([]SignalRFeatureResponse)[vs[1].(int)]
	}).(SignalRFeatureResponseOutput)
}

// Network ACLs for the resource
type SignalRNetworkACLs struct {
	// Azure Networking ACL Action.
	DefaultAction *string `pulumi:"defaultAction"`
	// ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACL `pulumi:"privateEndpoints"`
	// Network ACL
	PublicNetwork *NetworkACL `pulumi:"publicNetwork"`
}

// SignalRNetworkACLsInput is an input type that accepts SignalRNetworkACLsArgs and SignalRNetworkACLsOutput values.
// You can construct a concrete instance of `SignalRNetworkACLsInput` via:
//
//	SignalRNetworkACLsArgs{...}
type SignalRNetworkACLsInput interface {
	pulumi.Input

	ToSignalRNetworkACLsOutput() SignalRNetworkACLsOutput
	ToSignalRNetworkACLsOutputWithContext(context.Context) SignalRNetworkACLsOutput
}

// Network ACLs for the resource
type SignalRNetworkACLsArgs struct {
	// Azure Networking ACL Action.
	DefaultAction pulumi.StringPtrInput `pulumi:"defaultAction"`
	// ACLs for requests from private endpoints
	PrivateEndpoints PrivateEndpointACLArrayInput `pulumi:"privateEndpoints"`
	// Network ACL
	PublicNetwork NetworkACLPtrInput `pulumi:"publicNetwork"`
}

func (SignalRNetworkACLsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRNetworkACLs)(nil)).Elem()
}

func (i SignalRNetworkACLsArgs) ToSignalRNetworkACLsOutput() SignalRNetworkACLsOutput {
	return i.ToSignalRNetworkACLsOutputWithContext(context.Background())
}

func (i SignalRNetworkACLsArgs) ToSignalRNetworkACLsOutputWithContext(ctx context.Context) SignalRNetworkACLsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsOutput)
}

func (i SignalRNetworkACLsArgs) ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput {
	return i.ToSignalRNetworkACLsPtrOutputWithContext(context.Background())
}

func (i SignalRNetworkACLsArgs) ToSignalRNetworkACLsPtrOutputWithContext(ctx context.Context) SignalRNetworkACLsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsOutput).ToSignalRNetworkACLsPtrOutputWithContext(ctx)
}

// SignalRNetworkACLsPtrInput is an input type that accepts SignalRNetworkACLsArgs, SignalRNetworkACLsPtr and SignalRNetworkACLsPtrOutput values.
// You can construct a concrete instance of `SignalRNetworkACLsPtrInput` via:
//
//	        SignalRNetworkACLsArgs{...}
//
//	or:
//
//	        nil
type SignalRNetworkACLsPtrInput interface {
	pulumi.Input

	ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput
	ToSignalRNetworkACLsPtrOutputWithContext(context.Context) SignalRNetworkACLsPtrOutput
}

type signalRNetworkACLsPtrType SignalRNetworkACLsArgs

func SignalRNetworkACLsPtr(v *SignalRNetworkACLsArgs) SignalRNetworkACLsPtrInput {
	return (*signalRNetworkACLsPtrType)(v)
}

func (*signalRNetworkACLsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRNetworkACLs)(nil)).Elem()
}

func (i *signalRNetworkACLsPtrType) ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput {
	return i.ToSignalRNetworkACLsPtrOutputWithContext(context.Background())
}

func (i *signalRNetworkACLsPtrType) ToSignalRNetworkACLsPtrOutputWithContext(ctx context.Context) SignalRNetworkACLsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRNetworkACLsPtrOutput)
}

// Network ACLs for the resource
type SignalRNetworkACLsOutput struct{ *pulumi.OutputState }

func (SignalRNetworkACLsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRNetworkACLs)(nil)).Elem()
}

func (o SignalRNetworkACLsOutput) ToSignalRNetworkACLsOutput() SignalRNetworkACLsOutput {
	return o
}

func (o SignalRNetworkACLsOutput) ToSignalRNetworkACLsOutputWithContext(ctx context.Context) SignalRNetworkACLsOutput {
	return o
}

func (o SignalRNetworkACLsOutput) ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput {
	return o.ToSignalRNetworkACLsPtrOutputWithContext(context.Background())
}

func (o SignalRNetworkACLsOutput) ToSignalRNetworkACLsPtrOutputWithContext(ctx context.Context) SignalRNetworkACLsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalRNetworkACLs) *SignalRNetworkACLs {
		return &v
	}).(SignalRNetworkACLsPtrOutput)
}

// Azure Networking ACL Action.
func (o SignalRNetworkACLsOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLs) *string { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// ACLs for requests from private endpoints
func (o SignalRNetworkACLsOutput) PrivateEndpoints() PrivateEndpointACLArrayOutput {
	return o.ApplyT(func(v SignalRNetworkACLs) []PrivateEndpointACL { return v.PrivateEndpoints }).(PrivateEndpointACLArrayOutput)
}

// Network ACL
func (o SignalRNetworkACLsOutput) PublicNetwork() NetworkACLPtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLs) *NetworkACL { return v.PublicNetwork }).(NetworkACLPtrOutput)
}

type SignalRNetworkACLsPtrOutput struct{ *pulumi.OutputState }

func (SignalRNetworkACLsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRNetworkACLs)(nil)).Elem()
}

func (o SignalRNetworkACLsPtrOutput) ToSignalRNetworkACLsPtrOutput() SignalRNetworkACLsPtrOutput {
	return o
}

func (o SignalRNetworkACLsPtrOutput) ToSignalRNetworkACLsPtrOutputWithContext(ctx context.Context) SignalRNetworkACLsPtrOutput {
	return o
}

func (o SignalRNetworkACLsPtrOutput) Elem() SignalRNetworkACLsOutput {
	return o.ApplyT(func(v *SignalRNetworkACLs) SignalRNetworkACLs {
		if v != nil {
			return *v
		}
		var ret SignalRNetworkACLs
		return ret
	}).(SignalRNetworkACLsOutput)
}

// Azure Networking ACL Action.
func (o SignalRNetworkACLsPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalRNetworkACLs) *string {
		if v == nil {
			return nil
		}
		return v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// ACLs for requests from private endpoints
func (o SignalRNetworkACLsPtrOutput) PrivateEndpoints() PrivateEndpointACLArrayOutput {
	return o.ApplyT(func(v *SignalRNetworkACLs) []PrivateEndpointACL {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoints
	}).(PrivateEndpointACLArrayOutput)
}

// Network ACL
func (o SignalRNetworkACLsPtrOutput) PublicNetwork() NetworkACLPtrOutput {
	return o.ApplyT(func(v *SignalRNetworkACLs) *NetworkACL {
		if v == nil {
			return nil
		}
		return v.PublicNetwork
	}).(NetworkACLPtrOutput)
}

// Network ACLs for the resource
type SignalRNetworkACLsResponse struct {
	// Azure Networking ACL Action.
	DefaultAction *string `pulumi:"defaultAction"`
	// ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACLResponse `pulumi:"privateEndpoints"`
	// Network ACL
	PublicNetwork *NetworkACLResponse `pulumi:"publicNetwork"`
}

// Network ACLs for the resource
type SignalRNetworkACLsResponseOutput struct{ *pulumi.OutputState }

func (SignalRNetworkACLsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRNetworkACLsResponse)(nil)).Elem()
}

func (o SignalRNetworkACLsResponseOutput) ToSignalRNetworkACLsResponseOutput() SignalRNetworkACLsResponseOutput {
	return o
}

func (o SignalRNetworkACLsResponseOutput) ToSignalRNetworkACLsResponseOutputWithContext(ctx context.Context) SignalRNetworkACLsResponseOutput {
	return o
}

// Azure Networking ACL Action.
func (o SignalRNetworkACLsResponseOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLsResponse) *string { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// ACLs for requests from private endpoints
func (o SignalRNetworkACLsResponseOutput) PrivateEndpoints() PrivateEndpointACLResponseArrayOutput {
	return o.ApplyT(func(v SignalRNetworkACLsResponse) []PrivateEndpointACLResponse { return v.PrivateEndpoints }).(PrivateEndpointACLResponseArrayOutput)
}

// Network ACL
func (o SignalRNetworkACLsResponseOutput) PublicNetwork() NetworkACLResponsePtrOutput {
	return o.ApplyT(func(v SignalRNetworkACLsResponse) *NetworkACLResponse { return v.PublicNetwork }).(NetworkACLResponsePtrOutput)
}

type SignalRNetworkACLsResponsePtrOutput struct{ *pulumi.OutputState }

func (SignalRNetworkACLsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRNetworkACLsResponse)(nil)).Elem()
}

func (o SignalRNetworkACLsResponsePtrOutput) ToSignalRNetworkACLsResponsePtrOutput() SignalRNetworkACLsResponsePtrOutput {
	return o
}

func (o SignalRNetworkACLsResponsePtrOutput) ToSignalRNetworkACLsResponsePtrOutputWithContext(ctx context.Context) SignalRNetworkACLsResponsePtrOutput {
	return o
}

func (o SignalRNetworkACLsResponsePtrOutput) Elem() SignalRNetworkACLsResponseOutput {
	return o.ApplyT(func(v *SignalRNetworkACLsResponse) SignalRNetworkACLsResponse {
		if v != nil {
			return *v
		}
		var ret SignalRNetworkACLsResponse
		return ret
	}).(SignalRNetworkACLsResponseOutput)
}

// Azure Networking ACL Action.
func (o SignalRNetworkACLsResponsePtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalRNetworkACLsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// ACLs for requests from private endpoints
func (o SignalRNetworkACLsResponsePtrOutput) PrivateEndpoints() PrivateEndpointACLResponseArrayOutput {
	return o.ApplyT(func(v *SignalRNetworkACLsResponse) []PrivateEndpointACLResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoints
	}).(PrivateEndpointACLResponseArrayOutput)
}

// Network ACL
func (o SignalRNetworkACLsResponsePtrOutput) PublicNetwork() NetworkACLResponsePtrOutput {
	return o.ApplyT(func(v *SignalRNetworkACLsResponse) *NetworkACLResponse {
		if v == nil {
			return nil
		}
		return v.PublicNetwork
	}).(NetworkACLResponsePtrOutput)
}

// TLS settings for the resource
type SignalRTlsSettings struct {
	// Request client certificate during TLS handshake if enabled
	ClientCertEnabled *bool `pulumi:"clientCertEnabled"`
}

// Defaults sets the appropriate defaults for SignalRTlsSettings
func (val *SignalRTlsSettings) Defaults() *SignalRTlsSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ClientCertEnabled) {
		clientCertEnabled_ := true
		tmp.ClientCertEnabled = &clientCertEnabled_
	}
	return &tmp
}

// SignalRTlsSettingsInput is an input type that accepts SignalRTlsSettingsArgs and SignalRTlsSettingsOutput values.
// You can construct a concrete instance of `SignalRTlsSettingsInput` via:
//
//	SignalRTlsSettingsArgs{...}
type SignalRTlsSettingsInput interface {
	pulumi.Input

	ToSignalRTlsSettingsOutput() SignalRTlsSettingsOutput
	ToSignalRTlsSettingsOutputWithContext(context.Context) SignalRTlsSettingsOutput
}

// TLS settings for the resource
type SignalRTlsSettingsArgs struct {
	// Request client certificate during TLS handshake if enabled
	ClientCertEnabled pulumi.BoolPtrInput `pulumi:"clientCertEnabled"`
}

// Defaults sets the appropriate defaults for SignalRTlsSettingsArgs
func (val *SignalRTlsSettingsArgs) Defaults() *SignalRTlsSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ClientCertEnabled) {
		tmp.ClientCertEnabled = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (SignalRTlsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRTlsSettings)(nil)).Elem()
}

func (i SignalRTlsSettingsArgs) ToSignalRTlsSettingsOutput() SignalRTlsSettingsOutput {
	return i.ToSignalRTlsSettingsOutputWithContext(context.Background())
}

func (i SignalRTlsSettingsArgs) ToSignalRTlsSettingsOutputWithContext(ctx context.Context) SignalRTlsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRTlsSettingsOutput)
}

func (i SignalRTlsSettingsArgs) ToSignalRTlsSettingsPtrOutput() SignalRTlsSettingsPtrOutput {
	return i.ToSignalRTlsSettingsPtrOutputWithContext(context.Background())
}

func (i SignalRTlsSettingsArgs) ToSignalRTlsSettingsPtrOutputWithContext(ctx context.Context) SignalRTlsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRTlsSettingsOutput).ToSignalRTlsSettingsPtrOutputWithContext(ctx)
}

// SignalRTlsSettingsPtrInput is an input type that accepts SignalRTlsSettingsArgs, SignalRTlsSettingsPtr and SignalRTlsSettingsPtrOutput values.
// You can construct a concrete instance of `SignalRTlsSettingsPtrInput` via:
//
//	        SignalRTlsSettingsArgs{...}
//
//	or:
//
//	        nil
type SignalRTlsSettingsPtrInput interface {
	pulumi.Input

	ToSignalRTlsSettingsPtrOutput() SignalRTlsSettingsPtrOutput
	ToSignalRTlsSettingsPtrOutputWithContext(context.Context) SignalRTlsSettingsPtrOutput
}

type signalRTlsSettingsPtrType SignalRTlsSettingsArgs

func SignalRTlsSettingsPtr(v *SignalRTlsSettingsArgs) SignalRTlsSettingsPtrInput {
	return (*signalRTlsSettingsPtrType)(v)
}

func (*signalRTlsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRTlsSettings)(nil)).Elem()
}

func (i *signalRTlsSettingsPtrType) ToSignalRTlsSettingsPtrOutput() SignalRTlsSettingsPtrOutput {
	return i.ToSignalRTlsSettingsPtrOutputWithContext(context.Background())
}

func (i *signalRTlsSettingsPtrType) ToSignalRTlsSettingsPtrOutputWithContext(ctx context.Context) SignalRTlsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalRTlsSettingsPtrOutput)
}

// TLS settings for the resource
type SignalRTlsSettingsOutput struct{ *pulumi.OutputState }

func (SignalRTlsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRTlsSettings)(nil)).Elem()
}

func (o SignalRTlsSettingsOutput) ToSignalRTlsSettingsOutput() SignalRTlsSettingsOutput {
	return o
}

func (o SignalRTlsSettingsOutput) ToSignalRTlsSettingsOutputWithContext(ctx context.Context) SignalRTlsSettingsOutput {
	return o
}

func (o SignalRTlsSettingsOutput) ToSignalRTlsSettingsPtrOutput() SignalRTlsSettingsPtrOutput {
	return o.ToSignalRTlsSettingsPtrOutputWithContext(context.Background())
}

func (o SignalRTlsSettingsOutput) ToSignalRTlsSettingsPtrOutputWithContext(ctx context.Context) SignalRTlsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalRTlsSettings) *SignalRTlsSettings {
		return &v
	}).(SignalRTlsSettingsPtrOutput)
}

// Request client certificate during TLS handshake if enabled
func (o SignalRTlsSettingsOutput) ClientCertEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SignalRTlsSettings) *bool { return v.ClientCertEnabled }).(pulumi.BoolPtrOutput)
}

type SignalRTlsSettingsPtrOutput struct{ *pulumi.OutputState }

func (SignalRTlsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRTlsSettings)(nil)).Elem()
}

func (o SignalRTlsSettingsPtrOutput) ToSignalRTlsSettingsPtrOutput() SignalRTlsSettingsPtrOutput {
	return o
}

func (o SignalRTlsSettingsPtrOutput) ToSignalRTlsSettingsPtrOutputWithContext(ctx context.Context) SignalRTlsSettingsPtrOutput {
	return o
}

func (o SignalRTlsSettingsPtrOutput) Elem() SignalRTlsSettingsOutput {
	return o.ApplyT(func(v *SignalRTlsSettings) SignalRTlsSettings {
		if v != nil {
			return *v
		}
		var ret SignalRTlsSettings
		return ret
	}).(SignalRTlsSettingsOutput)
}

// Request client certificate during TLS handshake if enabled
func (o SignalRTlsSettingsPtrOutput) ClientCertEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SignalRTlsSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ClientCertEnabled
	}).(pulumi.BoolPtrOutput)
}

// TLS settings for the resource
type SignalRTlsSettingsResponse struct {
	// Request client certificate during TLS handshake if enabled
	ClientCertEnabled *bool `pulumi:"clientCertEnabled"`
}

// Defaults sets the appropriate defaults for SignalRTlsSettingsResponse
func (val *SignalRTlsSettingsResponse) Defaults() *SignalRTlsSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ClientCertEnabled) {
		clientCertEnabled_ := true
		tmp.ClientCertEnabled = &clientCertEnabled_
	}
	return &tmp
}

// TLS settings for the resource
type SignalRTlsSettingsResponseOutput struct{ *pulumi.OutputState }

func (SignalRTlsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalRTlsSettingsResponse)(nil)).Elem()
}

func (o SignalRTlsSettingsResponseOutput) ToSignalRTlsSettingsResponseOutput() SignalRTlsSettingsResponseOutput {
	return o
}

func (o SignalRTlsSettingsResponseOutput) ToSignalRTlsSettingsResponseOutputWithContext(ctx context.Context) SignalRTlsSettingsResponseOutput {
	return o
}

// Request client certificate during TLS handshake if enabled
func (o SignalRTlsSettingsResponseOutput) ClientCertEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SignalRTlsSettingsResponse) *bool { return v.ClientCertEnabled }).(pulumi.BoolPtrOutput)
}

type SignalRTlsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SignalRTlsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalRTlsSettingsResponse)(nil)).Elem()
}

func (o SignalRTlsSettingsResponsePtrOutput) ToSignalRTlsSettingsResponsePtrOutput() SignalRTlsSettingsResponsePtrOutput {
	return o
}

func (o SignalRTlsSettingsResponsePtrOutput) ToSignalRTlsSettingsResponsePtrOutputWithContext(ctx context.Context) SignalRTlsSettingsResponsePtrOutput {
	return o
}

func (o SignalRTlsSettingsResponsePtrOutput) Elem() SignalRTlsSettingsResponseOutput {
	return o.ApplyT(func(v *SignalRTlsSettingsResponse) SignalRTlsSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SignalRTlsSettingsResponse
		return ret
	}).(SignalRTlsSettingsResponseOutput)
}

// Request client certificate during TLS handshake if enabled
func (o SignalRTlsSettingsResponsePtrOutput) ClientCertEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SignalRTlsSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ClientCertEnabled
	}).(pulumi.BoolPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettings struct {
	// Managed identity settings for upstream.
	ManagedIdentity *ManagedIdentitySettings `pulumi:"managedIdentity"`
	// Upstream auth type enum.
	Type *string `pulumi:"type"`
}

// UpstreamAuthSettingsInput is an input type that accepts UpstreamAuthSettingsArgs and UpstreamAuthSettingsOutput values.
// You can construct a concrete instance of `UpstreamAuthSettingsInput` via:
//
//	UpstreamAuthSettingsArgs{...}
type UpstreamAuthSettingsInput interface {
	pulumi.Input

	ToUpstreamAuthSettingsOutput() UpstreamAuthSettingsOutput
	ToUpstreamAuthSettingsOutputWithContext(context.Context) UpstreamAuthSettingsOutput
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettingsArgs struct {
	// Managed identity settings for upstream.
	ManagedIdentity ManagedIdentitySettingsPtrInput `pulumi:"managedIdentity"`
	// Upstream auth type enum.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (UpstreamAuthSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamAuthSettings)(nil)).Elem()
}

func (i UpstreamAuthSettingsArgs) ToUpstreamAuthSettingsOutput() UpstreamAuthSettingsOutput {
	return i.ToUpstreamAuthSettingsOutputWithContext(context.Background())
}

func (i UpstreamAuthSettingsArgs) ToUpstreamAuthSettingsOutputWithContext(ctx context.Context) UpstreamAuthSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamAuthSettingsOutput)
}

func (i UpstreamAuthSettingsArgs) ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput {
	return i.ToUpstreamAuthSettingsPtrOutputWithContext(context.Background())
}

func (i UpstreamAuthSettingsArgs) ToUpstreamAuthSettingsPtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamAuthSettingsOutput).ToUpstreamAuthSettingsPtrOutputWithContext(ctx)
}

// UpstreamAuthSettingsPtrInput is an input type that accepts UpstreamAuthSettingsArgs, UpstreamAuthSettingsPtr and UpstreamAuthSettingsPtrOutput values.
// You can construct a concrete instance of `UpstreamAuthSettingsPtrInput` via:
//
//	        UpstreamAuthSettingsArgs{...}
//
//	or:
//
//	        nil
type UpstreamAuthSettingsPtrInput interface {
	pulumi.Input

	ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput
	ToUpstreamAuthSettingsPtrOutputWithContext(context.Context) UpstreamAuthSettingsPtrOutput
}

type upstreamAuthSettingsPtrType UpstreamAuthSettingsArgs

func UpstreamAuthSettingsPtr(v *UpstreamAuthSettingsArgs) UpstreamAuthSettingsPtrInput {
	return (*upstreamAuthSettingsPtrType)(v)
}

func (*upstreamAuthSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamAuthSettings)(nil)).Elem()
}

func (i *upstreamAuthSettingsPtrType) ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput {
	return i.ToUpstreamAuthSettingsPtrOutputWithContext(context.Background())
}

func (i *upstreamAuthSettingsPtrType) ToUpstreamAuthSettingsPtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamAuthSettingsPtrOutput)
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettingsOutput struct{ *pulumi.OutputState }

func (UpstreamAuthSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamAuthSettings)(nil)).Elem()
}

func (o UpstreamAuthSettingsOutput) ToUpstreamAuthSettingsOutput() UpstreamAuthSettingsOutput {
	return o
}

func (o UpstreamAuthSettingsOutput) ToUpstreamAuthSettingsOutputWithContext(ctx context.Context) UpstreamAuthSettingsOutput {
	return o
}

func (o UpstreamAuthSettingsOutput) ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput {
	return o.ToUpstreamAuthSettingsPtrOutputWithContext(context.Background())
}

func (o UpstreamAuthSettingsOutput) ToUpstreamAuthSettingsPtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpstreamAuthSettings) *UpstreamAuthSettings {
		return &v
	}).(UpstreamAuthSettingsPtrOutput)
}

// Managed identity settings for upstream.
func (o UpstreamAuthSettingsOutput) ManagedIdentity() ManagedIdentitySettingsPtrOutput {
	return o.ApplyT(func(v UpstreamAuthSettings) *ManagedIdentitySettings { return v.ManagedIdentity }).(ManagedIdentitySettingsPtrOutput)
}

// Upstream auth type enum.
func (o UpstreamAuthSettingsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamAuthSettings) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type UpstreamAuthSettingsPtrOutput struct{ *pulumi.OutputState }

func (UpstreamAuthSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamAuthSettings)(nil)).Elem()
}

func (o UpstreamAuthSettingsPtrOutput) ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput {
	return o
}

func (o UpstreamAuthSettingsPtrOutput) ToUpstreamAuthSettingsPtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsPtrOutput {
	return o
}

func (o UpstreamAuthSettingsPtrOutput) Elem() UpstreamAuthSettingsOutput {
	return o.ApplyT(func(v *UpstreamAuthSettings) UpstreamAuthSettings {
		if v != nil {
			return *v
		}
		var ret UpstreamAuthSettings
		return ret
	}).(UpstreamAuthSettingsOutput)
}

// Managed identity settings for upstream.
func (o UpstreamAuthSettingsPtrOutput) ManagedIdentity() ManagedIdentitySettingsPtrOutput {
	return o.ApplyT(func(v *UpstreamAuthSettings) *ManagedIdentitySettings {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ManagedIdentitySettingsPtrOutput)
}

// Upstream auth type enum.
func (o UpstreamAuthSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpstreamAuthSettings) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettingsResponse struct {
	// Managed identity settings for upstream.
	ManagedIdentity *ManagedIdentitySettingsResponse `pulumi:"managedIdentity"`
	// Upstream auth type enum.
	Type *string `pulumi:"type"`
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettingsResponseOutput struct{ *pulumi.OutputState }

func (UpstreamAuthSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamAuthSettingsResponse)(nil)).Elem()
}

func (o UpstreamAuthSettingsResponseOutput) ToUpstreamAuthSettingsResponseOutput() UpstreamAuthSettingsResponseOutput {
	return o
}

func (o UpstreamAuthSettingsResponseOutput) ToUpstreamAuthSettingsResponseOutputWithContext(ctx context.Context) UpstreamAuthSettingsResponseOutput {
	return o
}

// Managed identity settings for upstream.
func (o UpstreamAuthSettingsResponseOutput) ManagedIdentity() ManagedIdentitySettingsResponsePtrOutput {
	return o.ApplyT(func(v UpstreamAuthSettingsResponse) *ManagedIdentitySettingsResponse { return v.ManagedIdentity }).(ManagedIdentitySettingsResponsePtrOutput)
}

// Upstream auth type enum.
func (o UpstreamAuthSettingsResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamAuthSettingsResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type UpstreamAuthSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (UpstreamAuthSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamAuthSettingsResponse)(nil)).Elem()
}

func (o UpstreamAuthSettingsResponsePtrOutput) ToUpstreamAuthSettingsResponsePtrOutput() UpstreamAuthSettingsResponsePtrOutput {
	return o
}

func (o UpstreamAuthSettingsResponsePtrOutput) ToUpstreamAuthSettingsResponsePtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsResponsePtrOutput {
	return o
}

func (o UpstreamAuthSettingsResponsePtrOutput) Elem() UpstreamAuthSettingsResponseOutput {
	return o.ApplyT(func(v *UpstreamAuthSettingsResponse) UpstreamAuthSettingsResponse {
		if v != nil {
			return *v
		}
		var ret UpstreamAuthSettingsResponse
		return ret
	}).(UpstreamAuthSettingsResponseOutput)
}

// Managed identity settings for upstream.
func (o UpstreamAuthSettingsResponsePtrOutput) ManagedIdentity() ManagedIdentitySettingsResponsePtrOutput {
	return o.ApplyT(func(v *UpstreamAuthSettingsResponse) *ManagedIdentitySettingsResponse {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ManagedIdentitySettingsResponsePtrOutput)
}

// Upstream auth type enum.
func (o UpstreamAuthSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpstreamAuthSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplate struct {
	// Upstream auth settings. If not set, no auth is used for upstream messages.
	Auth *UpstreamAuthSettings `pulumi:"auth"`
	// Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any category name.
	//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
	//     3. The single category name, for example, "connections", it matches the category "connections".
	CategoryPattern *string `pulumi:"categoryPattern"`
	// Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name.
	//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
	//     3. The single event name, for example, "connect", it matches "connect".
	EventPattern *string `pulumi:"eventPattern"`
	// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any hub name.
	//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
	//     3. The single hub name, for example, "hub1", it matches "hub1".
	HubPattern *string `pulumi:"hubPattern"`
	// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate string `pulumi:"urlTemplate"`
}

// UpstreamTemplateInput is an input type that accepts UpstreamTemplateArgs and UpstreamTemplateOutput values.
// You can construct a concrete instance of `UpstreamTemplateInput` via:
//
//	UpstreamTemplateArgs{...}
type UpstreamTemplateInput interface {
	pulumi.Input

	ToUpstreamTemplateOutput() UpstreamTemplateOutput
	ToUpstreamTemplateOutputWithContext(context.Context) UpstreamTemplateOutput
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateArgs struct {
	// Upstream auth settings. If not set, no auth is used for upstream messages.
	Auth UpstreamAuthSettingsPtrInput `pulumi:"auth"`
	// Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any category name.
	//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
	//     3. The single category name, for example, "connections", it matches the category "connections".
	CategoryPattern pulumi.StringPtrInput `pulumi:"categoryPattern"`
	// Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name.
	//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
	//     3. The single event name, for example, "connect", it matches "connect".
	EventPattern pulumi.StringPtrInput `pulumi:"eventPattern"`
	// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any hub name.
	//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
	//     3. The single hub name, for example, "hub1", it matches "hub1".
	HubPattern pulumi.StringPtrInput `pulumi:"hubPattern"`
	// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate pulumi.StringInput `pulumi:"urlTemplate"`
}

func (UpstreamTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamTemplate)(nil)).Elem()
}

func (i UpstreamTemplateArgs) ToUpstreamTemplateOutput() UpstreamTemplateOutput {
	return i.ToUpstreamTemplateOutputWithContext(context.Background())
}

func (i UpstreamTemplateArgs) ToUpstreamTemplateOutputWithContext(ctx context.Context) UpstreamTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamTemplateOutput)
}

// UpstreamTemplateArrayInput is an input type that accepts UpstreamTemplateArray and UpstreamTemplateArrayOutput values.
// You can construct a concrete instance of `UpstreamTemplateArrayInput` via:
//
//	UpstreamTemplateArray{ UpstreamTemplateArgs{...} }
type UpstreamTemplateArrayInput interface {
	pulumi.Input

	ToUpstreamTemplateArrayOutput() UpstreamTemplateArrayOutput
	ToUpstreamTemplateArrayOutputWithContext(context.Context) UpstreamTemplateArrayOutput
}

type UpstreamTemplateArray []UpstreamTemplateInput

func (UpstreamTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamTemplate)(nil)).Elem()
}

func (i UpstreamTemplateArray) ToUpstreamTemplateArrayOutput() UpstreamTemplateArrayOutput {
	return i.ToUpstreamTemplateArrayOutputWithContext(context.Background())
}

func (i UpstreamTemplateArray) ToUpstreamTemplateArrayOutputWithContext(ctx context.Context) UpstreamTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamTemplateArrayOutput)
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateOutput struct{ *pulumi.OutputState }

func (UpstreamTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamTemplate)(nil)).Elem()
}

func (o UpstreamTemplateOutput) ToUpstreamTemplateOutput() UpstreamTemplateOutput {
	return o
}

func (o UpstreamTemplateOutput) ToUpstreamTemplateOutputWithContext(ctx context.Context) UpstreamTemplateOutput {
	return o
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
func (o UpstreamTemplateOutput) Auth() UpstreamAuthSettingsPtrOutput {
	return o.ApplyT(func(v UpstreamTemplate) *UpstreamAuthSettings { return v.Auth }).(UpstreamAuthSettingsPtrOutput)
}

// Gets or sets the matching pattern for category names. If not set, it matches any category.
// There are 3 kind of patterns supported:
//  1. "*", it to matches any category name.
//  2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
//  3. The single category name, for example, "connections", it matches the category "connections".
func (o UpstreamTemplateOutput) CategoryPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplate) *string { return v.CategoryPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the matching pattern for event names. If not set, it matches any event.
// There are 3 kind of patterns supported:
//  1. "*", it to matches any event name.
//  2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
//  3. The single event name, for example, "connect", it matches "connect".
func (o UpstreamTemplateOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplate) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
// There are 3 kind of patterns supported:
//  1. "*", it to matches any hub name.
//  2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
//  3. The single hub name, for example, "hub1", it matches "hub1".
func (o UpstreamTemplateOutput) HubPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplate) *string { return v.HubPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
func (o UpstreamTemplateOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v UpstreamTemplate) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

type UpstreamTemplateArrayOutput struct{ *pulumi.OutputState }

func (UpstreamTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamTemplate)(nil)).Elem()
}

func (o UpstreamTemplateArrayOutput) ToUpstreamTemplateArrayOutput() UpstreamTemplateArrayOutput {
	return o
}

func (o UpstreamTemplateArrayOutput) ToUpstreamTemplateArrayOutputWithContext(ctx context.Context) UpstreamTemplateArrayOutput {
	return o
}

func (o UpstreamTemplateArrayOutput) Index(i pulumi.IntInput) UpstreamTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpstreamTemplate {
		return vs[0].([]UpstreamTemplate)[vs[1].(int)]
	}).(UpstreamTemplateOutput)
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateResponse struct {
	// Upstream auth settings. If not set, no auth is used for upstream messages.
	Auth *UpstreamAuthSettingsResponse `pulumi:"auth"`
	// Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any category name.
	//     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
	//     3. The single category name, for example, "connections", it matches the category "connections".
	CategoryPattern *string `pulumi:"categoryPattern"`
	// Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name.
	//     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
	//     3. The single event name, for example, "connect", it matches "connect".
	EventPattern *string `pulumi:"eventPattern"`
	// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any hub name.
	//     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
	//     3. The single hub name, for example, "hub1", it matches "hub1".
	HubPattern *string `pulumi:"hubPattern"`
	// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate string `pulumi:"urlTemplate"`
}

// Upstream template item settings. It defines the Upstream URL of the incoming requests.
// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
type UpstreamTemplateResponseOutput struct{ *pulumi.OutputState }

func (UpstreamTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamTemplateResponse)(nil)).Elem()
}

func (o UpstreamTemplateResponseOutput) ToUpstreamTemplateResponseOutput() UpstreamTemplateResponseOutput {
	return o
}

func (o UpstreamTemplateResponseOutput) ToUpstreamTemplateResponseOutputWithContext(ctx context.Context) UpstreamTemplateResponseOutput {
	return o
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
func (o UpstreamTemplateResponseOutput) Auth() UpstreamAuthSettingsResponsePtrOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) *UpstreamAuthSettingsResponse { return v.Auth }).(UpstreamAuthSettingsResponsePtrOutput)
}

// Gets or sets the matching pattern for category names. If not set, it matches any category.
// There are 3 kind of patterns supported:
//  1. "*", it to matches any category name.
//  2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
//  3. The single category name, for example, "connections", it matches the category "connections".
func (o UpstreamTemplateResponseOutput) CategoryPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) *string { return v.CategoryPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the matching pattern for event names. If not set, it matches any event.
// There are 3 kind of patterns supported:
//  1. "*", it to matches any event name.
//  2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
//  3. The single event name, for example, "connect", it matches "connect".
func (o UpstreamTemplateResponseOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
// There are 3 kind of patterns supported:
//  1. "*", it to matches any hub name.
//  2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
//  3. The single hub name, for example, "hub1", it matches "hub1".
func (o UpstreamTemplateResponseOutput) HubPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) *string { return v.HubPattern }).(pulumi.StringPtrOutput)
}

// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
func (o UpstreamTemplateResponseOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v UpstreamTemplateResponse) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

type UpstreamTemplateResponseArrayOutput struct{ *pulumi.OutputState }

func (UpstreamTemplateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamTemplateResponse)(nil)).Elem()
}

func (o UpstreamTemplateResponseArrayOutput) ToUpstreamTemplateResponseArrayOutput() UpstreamTemplateResponseArrayOutput {
	return o
}

func (o UpstreamTemplateResponseArrayOutput) ToUpstreamTemplateResponseArrayOutputWithContext(ctx context.Context) UpstreamTemplateResponseArrayOutput {
	return o
}

func (o UpstreamTemplateResponseArrayOutput) Index(i pulumi.IntInput) UpstreamTemplateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpstreamTemplateResponse {
		return vs[0].([]UpstreamTemplateResponse)[vs[1].(int)]
	}).(UpstreamTemplateResponseOutput)
}

// Properties of user assigned identity.
type UserAssignedIdentityPropertyResponse struct {
	// Get the client id for the user assigned identity
	ClientId string `pulumi:"clientId"`
	// Get the principal id for the user assigned identity
	PrincipalId string `pulumi:"principalId"`
}

// Properties of user assigned identity.
type UserAssignedIdentityPropertyResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityPropertyResponse)(nil)).Elem()
}

func (o UserAssignedIdentityPropertyResponseOutput) ToUserAssignedIdentityPropertyResponseOutput() UserAssignedIdentityPropertyResponseOutput {
	return o
}

func (o UserAssignedIdentityPropertyResponseOutput) ToUserAssignedIdentityPropertyResponseOutputWithContext(ctx context.Context) UserAssignedIdentityPropertyResponseOutput {
	return o
}

// Get the client id for the user assigned identity
func (o UserAssignedIdentityPropertyResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityPropertyResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Get the principal id for the user assigned identity
func (o UserAssignedIdentityPropertyResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityPropertyResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityPropertyResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityPropertyResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityPropertyResponse)(nil)).Elem()
}

func (o UserAssignedIdentityPropertyResponseMapOutput) ToUserAssignedIdentityPropertyResponseMapOutput() UserAssignedIdentityPropertyResponseMapOutput {
	return o
}

func (o UserAssignedIdentityPropertyResponseMapOutput) ToUserAssignedIdentityPropertyResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityPropertyResponseMapOutput {
	return o
}

func (o UserAssignedIdentityPropertyResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityPropertyResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityPropertyResponse {
		return vs[0].(map[string]UserAssignedIdentityPropertyResponse)[vs[1].(string)]
	}).(UserAssignedIdentityPropertyResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LiveTraceCategoryOutput{})
	pulumi.RegisterOutputType(LiveTraceCategoryArrayOutput{})
	pulumi.RegisterOutputType(LiveTraceCategoryResponseOutput{})
	pulumi.RegisterOutputType(LiveTraceCategoryResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveTraceConfigurationOutput{})
	pulumi.RegisterOutputType(LiveTraceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LiveTraceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LiveTraceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityOutput{})
	pulumi.RegisterOutputType(ManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySettingsOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySettingsResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkACLOutput{})
	pulumi.RegisterOutputType(NetworkACLPtrOutput{})
	pulumi.RegisterOutputType(NetworkACLResponseOutput{})
	pulumi.RegisterOutputType(NetworkACLResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointACLOutput{})
	pulumi.RegisterOutputType(PrivateEndpointACLArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointACLResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointACLResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceLogCategoryOutput{})
	pulumi.RegisterOutputType(ResourceLogCategoryArrayOutput{})
	pulumi.RegisterOutputType(ResourceLogCategoryResponseOutput{})
	pulumi.RegisterOutputType(ResourceLogCategoryResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceLogConfigurationOutput{})
	pulumi.RegisterOutputType(ResourceLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ResourceLogConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ResourceLogConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceReferenceOutput{})
	pulumi.RegisterOutputType(ResourceReferenceResponseOutput{})
	pulumi.RegisterOutputType(ResourceSkuOutput{})
	pulumi.RegisterOutputType(ResourceSkuPtrOutput{})
	pulumi.RegisterOutputType(ResourceSkuResponseOutput{})
	pulumi.RegisterOutputType(ResourceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(ServerlessUpstreamSettingsOutput{})
	pulumi.RegisterOutputType(ServerlessUpstreamSettingsPtrOutput{})
	pulumi.RegisterOutputType(ServerlessUpstreamSettingsResponseOutput{})
	pulumi.RegisterOutputType(ServerlessUpstreamSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceResponseOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SignalRCorsSettingsOutput{})
	pulumi.RegisterOutputType(SignalRCorsSettingsPtrOutput{})
	pulumi.RegisterOutputType(SignalRCorsSettingsResponseOutput{})
	pulumi.RegisterOutputType(SignalRCorsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SignalRFeatureOutput{})
	pulumi.RegisterOutputType(SignalRFeatureArrayOutput{})
	pulumi.RegisterOutputType(SignalRFeatureResponseOutput{})
	pulumi.RegisterOutputType(SignalRFeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(SignalRNetworkACLsOutput{})
	pulumi.RegisterOutputType(SignalRNetworkACLsPtrOutput{})
	pulumi.RegisterOutputType(SignalRNetworkACLsResponseOutput{})
	pulumi.RegisterOutputType(SignalRNetworkACLsResponsePtrOutput{})
	pulumi.RegisterOutputType(SignalRTlsSettingsOutput{})
	pulumi.RegisterOutputType(SignalRTlsSettingsPtrOutput{})
	pulumi.RegisterOutputType(SignalRTlsSettingsResponseOutput{})
	pulumi.RegisterOutputType(SignalRTlsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UpstreamAuthSettingsOutput{})
	pulumi.RegisterOutputType(UpstreamAuthSettingsPtrOutput{})
	pulumi.RegisterOutputType(UpstreamAuthSettingsResponseOutput{})
	pulumi.RegisterOutputType(UpstreamAuthSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(UpstreamTemplateOutput{})
	pulumi.RegisterOutputType(UpstreamTemplateArrayOutput{})
	pulumi.RegisterOutputType(UpstreamTemplateResponseOutput{})
	pulumi.RegisterOutputType(UpstreamTemplateResponseArrayOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityPropertyResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityPropertyResponseMapOutput{})
}
