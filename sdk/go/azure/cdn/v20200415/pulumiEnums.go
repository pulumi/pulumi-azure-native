// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200415

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes what action to be applied when rule matches
type ActionType string

const (
	ActionTypeAllow    = ActionType("Allow")
	ActionTypeBlock    = ActionType("Block")
	ActionTypeLog      = ActionType("Log")
	ActionTypeRedirect = ActionType("Redirect")
)

func (ActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionType)(nil)).Elem()
}

func (e ActionType) ToActionTypeOutput() ActionTypeOutput {
	return pulumi.ToOutput(e).(ActionTypeOutput)
}

func (e ActionType) ToActionTypeOutputWithContext(ctx context.Context) ActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ActionTypeOutput)
}

func (e ActionType) ToActionTypePtrOutput() ActionTypePtrOutput {
	return e.ToActionTypePtrOutputWithContext(context.Background())
}

func (e ActionType) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return ActionType(e).ToActionTypeOutputWithContext(ctx).ToActionTypePtrOutputWithContext(ctx)
}

func (e ActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ActionTypeOutput struct{ *pulumi.OutputState }

func (ActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionType)(nil)).Elem()
}

func (o ActionTypeOutput) ToActionTypeOutput() ActionTypeOutput {
	return o
}

func (o ActionTypeOutput) ToActionTypeOutputWithContext(ctx context.Context) ActionTypeOutput {
	return o
}

func (o ActionTypeOutput) ToActionTypePtrOutput() ActionTypePtrOutput {
	return o.ToActionTypePtrOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionType) *ActionType {
		return &v
	}).(ActionTypePtrOutput)
}

func (o ActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ActionTypePtrOutput struct{ *pulumi.OutputState }

func (ActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionType)(nil)).Elem()
}

func (o ActionTypePtrOutput) ToActionTypePtrOutput() ActionTypePtrOutput {
	return o
}

func (o ActionTypePtrOutput) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return o
}

func (o ActionTypePtrOutput) Elem() ActionTypeOutput {
	return o.ApplyT(func(v *ActionType) ActionType {
		if v != nil {
			return *v
		}
		var ret ActionType
		return ret
	}).(ActionTypeOutput)
}

func (o ActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ActionTypeInput is an input type that accepts ActionTypeArgs and ActionTypeOutput values.
// You can construct a concrete instance of `ActionTypeInput` via:
//
//          ActionTypeArgs{...}
type ActionTypeInput interface {
	pulumi.Input

	ToActionTypeOutput() ActionTypeOutput
	ToActionTypeOutputWithContext(context.Context) ActionTypeOutput
}

var actionTypePtrType = reflect.TypeOf((**ActionType)(nil)).Elem()

type ActionTypePtrInput interface {
	pulumi.Input

	ToActionTypePtrOutput() ActionTypePtrOutput
	ToActionTypePtrOutputWithContext(context.Context) ActionTypePtrOutput
}

type actionTypePtr string

func ActionTypePtr(v string) ActionTypePtrInput {
	return (*actionTypePtr)(&v)
}

func (*actionTypePtr) ElementType() reflect.Type {
	return actionTypePtrType
}

func (in *actionTypePtr) ToActionTypePtrOutput() ActionTypePtrOutput {
	return pulumi.ToOutput(in).(ActionTypePtrOutput)
}

func (in *actionTypePtr) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ActionTypePtrOutput)
}

// Algorithm to use for URL signing
type Algorithm string

const (
	AlgorithmSHA256 = Algorithm("SHA256")
)

func (Algorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*Algorithm)(nil)).Elem()
}

func (e Algorithm) ToAlgorithmOutput() AlgorithmOutput {
	return pulumi.ToOutput(e).(AlgorithmOutput)
}

func (e Algorithm) ToAlgorithmOutputWithContext(ctx context.Context) AlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AlgorithmOutput)
}

func (e Algorithm) ToAlgorithmPtrOutput() AlgorithmPtrOutput {
	return e.ToAlgorithmPtrOutputWithContext(context.Background())
}

func (e Algorithm) ToAlgorithmPtrOutputWithContext(ctx context.Context) AlgorithmPtrOutput {
	return Algorithm(e).ToAlgorithmOutputWithContext(ctx).ToAlgorithmPtrOutputWithContext(ctx)
}

func (e Algorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Algorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Algorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Algorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AlgorithmOutput struct{ *pulumi.OutputState }

func (AlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Algorithm)(nil)).Elem()
}

func (o AlgorithmOutput) ToAlgorithmOutput() AlgorithmOutput {
	return o
}

func (o AlgorithmOutput) ToAlgorithmOutputWithContext(ctx context.Context) AlgorithmOutput {
	return o
}

func (o AlgorithmOutput) ToAlgorithmPtrOutput() AlgorithmPtrOutput {
	return o.ToAlgorithmPtrOutputWithContext(context.Background())
}

func (o AlgorithmOutput) ToAlgorithmPtrOutputWithContext(ctx context.Context) AlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Algorithm) *Algorithm {
		return &v
	}).(AlgorithmPtrOutput)
}

func (o AlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Algorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Algorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AlgorithmPtrOutput struct{ *pulumi.OutputState }

func (AlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Algorithm)(nil)).Elem()
}

func (o AlgorithmPtrOutput) ToAlgorithmPtrOutput() AlgorithmPtrOutput {
	return o
}

func (o AlgorithmPtrOutput) ToAlgorithmPtrOutputWithContext(ctx context.Context) AlgorithmPtrOutput {
	return o
}

func (o AlgorithmPtrOutput) Elem() AlgorithmOutput {
	return o.ApplyT(func(v *Algorithm) Algorithm {
		if v != nil {
			return *v
		}
		var ret Algorithm
		return ret
	}).(AlgorithmOutput)
}

func (o AlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Algorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AlgorithmInput is an input type that accepts AlgorithmArgs and AlgorithmOutput values.
// You can construct a concrete instance of `AlgorithmInput` via:
//
//          AlgorithmArgs{...}
type AlgorithmInput interface {
	pulumi.Input

	ToAlgorithmOutput() AlgorithmOutput
	ToAlgorithmOutputWithContext(context.Context) AlgorithmOutput
}

var algorithmPtrType = reflect.TypeOf((**Algorithm)(nil)).Elem()

type AlgorithmPtrInput interface {
	pulumi.Input

	ToAlgorithmPtrOutput() AlgorithmPtrOutput
	ToAlgorithmPtrOutputWithContext(context.Context) AlgorithmPtrOutput
}

type algorithmPtr string

func AlgorithmPtr(v string) AlgorithmPtrInput {
	return (*algorithmPtr)(&v)
}

func (*algorithmPtr) ElementType() reflect.Type {
	return algorithmPtrType
}

func (in *algorithmPtr) ToAlgorithmPtrOutput() AlgorithmPtrOutput {
	return pulumi.ToOutput(in).(AlgorithmPtrOutput)
}

func (in *algorithmPtr) ToAlgorithmPtrOutputWithContext(ctx context.Context) AlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AlgorithmPtrOutput)
}

// Caching behavior for the requests
type CacheBehavior string

const (
	CacheBehaviorBypassCache  = CacheBehavior("BypassCache")
	CacheBehaviorOverride     = CacheBehavior("Override")
	CacheBehaviorSetIfMissing = CacheBehavior("SetIfMissing")
)

func (CacheBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheBehavior)(nil)).Elem()
}

func (e CacheBehavior) ToCacheBehaviorOutput() CacheBehaviorOutput {
	return pulumi.ToOutput(e).(CacheBehaviorOutput)
}

func (e CacheBehavior) ToCacheBehaviorOutputWithContext(ctx context.Context) CacheBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CacheBehaviorOutput)
}

func (e CacheBehavior) ToCacheBehaviorPtrOutput() CacheBehaviorPtrOutput {
	return e.ToCacheBehaviorPtrOutputWithContext(context.Background())
}

func (e CacheBehavior) ToCacheBehaviorPtrOutputWithContext(ctx context.Context) CacheBehaviorPtrOutput {
	return CacheBehavior(e).ToCacheBehaviorOutputWithContext(ctx).ToCacheBehaviorPtrOutputWithContext(ctx)
}

func (e CacheBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CacheBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CacheBehaviorOutput struct{ *pulumi.OutputState }

func (CacheBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheBehavior)(nil)).Elem()
}

func (o CacheBehaviorOutput) ToCacheBehaviorOutput() CacheBehaviorOutput {
	return o
}

func (o CacheBehaviorOutput) ToCacheBehaviorOutputWithContext(ctx context.Context) CacheBehaviorOutput {
	return o
}

func (o CacheBehaviorOutput) ToCacheBehaviorPtrOutput() CacheBehaviorPtrOutput {
	return o.ToCacheBehaviorPtrOutputWithContext(context.Background())
}

func (o CacheBehaviorOutput) ToCacheBehaviorPtrOutputWithContext(ctx context.Context) CacheBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheBehavior) *CacheBehavior {
		return &v
	}).(CacheBehaviorPtrOutput)
}

func (o CacheBehaviorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CacheBehaviorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CacheBehavior) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CacheBehaviorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CacheBehaviorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CacheBehavior) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CacheBehaviorPtrOutput struct{ *pulumi.OutputState }

func (CacheBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheBehavior)(nil)).Elem()
}

func (o CacheBehaviorPtrOutput) ToCacheBehaviorPtrOutput() CacheBehaviorPtrOutput {
	return o
}

func (o CacheBehaviorPtrOutput) ToCacheBehaviorPtrOutputWithContext(ctx context.Context) CacheBehaviorPtrOutput {
	return o
}

func (o CacheBehaviorPtrOutput) Elem() CacheBehaviorOutput {
	return o.ApplyT(func(v *CacheBehavior) CacheBehavior {
		if v != nil {
			return *v
		}
		var ret CacheBehavior
		return ret
	}).(CacheBehaviorOutput)
}

func (o CacheBehaviorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CacheBehaviorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CacheBehavior) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CacheBehaviorInput is an input type that accepts CacheBehaviorArgs and CacheBehaviorOutput values.
// You can construct a concrete instance of `CacheBehaviorInput` via:
//
//          CacheBehaviorArgs{...}
type CacheBehaviorInput interface {
	pulumi.Input

	ToCacheBehaviorOutput() CacheBehaviorOutput
	ToCacheBehaviorOutputWithContext(context.Context) CacheBehaviorOutput
}

var cacheBehaviorPtrType = reflect.TypeOf((**CacheBehavior)(nil)).Elem()

type CacheBehaviorPtrInput interface {
	pulumi.Input

	ToCacheBehaviorPtrOutput() CacheBehaviorPtrOutput
	ToCacheBehaviorPtrOutputWithContext(context.Context) CacheBehaviorPtrOutput
}

type cacheBehaviorPtr string

func CacheBehaviorPtr(v string) CacheBehaviorPtrInput {
	return (*cacheBehaviorPtr)(&v)
}

func (*cacheBehaviorPtr) ElementType() reflect.Type {
	return cacheBehaviorPtrType
}

func (in *cacheBehaviorPtr) ToCacheBehaviorPtrOutput() CacheBehaviorPtrOutput {
	return pulumi.ToOutput(in).(CacheBehaviorPtrOutput)
}

func (in *cacheBehaviorPtr) ToCacheBehaviorPtrOutputWithContext(ctx context.Context) CacheBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CacheBehaviorPtrOutput)
}

// The level at which the content needs to be cached.
type CacheType string

const (
	CacheTypeAll = CacheType("All")
)

func (CacheType) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheType)(nil)).Elem()
}

func (e CacheType) ToCacheTypeOutput() CacheTypeOutput {
	return pulumi.ToOutput(e).(CacheTypeOutput)
}

func (e CacheType) ToCacheTypeOutputWithContext(ctx context.Context) CacheTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CacheTypeOutput)
}

func (e CacheType) ToCacheTypePtrOutput() CacheTypePtrOutput {
	return e.ToCacheTypePtrOutputWithContext(context.Background())
}

func (e CacheType) ToCacheTypePtrOutputWithContext(ctx context.Context) CacheTypePtrOutput {
	return CacheType(e).ToCacheTypeOutputWithContext(ctx).ToCacheTypePtrOutputWithContext(ctx)
}

func (e CacheType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CacheType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CacheTypeOutput struct{ *pulumi.OutputState }

func (CacheTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheType)(nil)).Elem()
}

func (o CacheTypeOutput) ToCacheTypeOutput() CacheTypeOutput {
	return o
}

func (o CacheTypeOutput) ToCacheTypeOutputWithContext(ctx context.Context) CacheTypeOutput {
	return o
}

func (o CacheTypeOutput) ToCacheTypePtrOutput() CacheTypePtrOutput {
	return o.ToCacheTypePtrOutputWithContext(context.Background())
}

func (o CacheTypeOutput) ToCacheTypePtrOutputWithContext(ctx context.Context) CacheTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheType) *CacheType {
		return &v
	}).(CacheTypePtrOutput)
}

func (o CacheTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CacheTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CacheType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CacheTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CacheTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CacheType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CacheTypePtrOutput struct{ *pulumi.OutputState }

func (CacheTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheType)(nil)).Elem()
}

func (o CacheTypePtrOutput) ToCacheTypePtrOutput() CacheTypePtrOutput {
	return o
}

func (o CacheTypePtrOutput) ToCacheTypePtrOutputWithContext(ctx context.Context) CacheTypePtrOutput {
	return o
}

func (o CacheTypePtrOutput) Elem() CacheTypeOutput {
	return o.ApplyT(func(v *CacheType) CacheType {
		if v != nil {
			return *v
		}
		var ret CacheType
		return ret
	}).(CacheTypeOutput)
}

func (o CacheTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CacheTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CacheType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CacheTypeInput is an input type that accepts CacheTypeArgs and CacheTypeOutput values.
// You can construct a concrete instance of `CacheTypeInput` via:
//
//          CacheTypeArgs{...}
type CacheTypeInput interface {
	pulumi.Input

	ToCacheTypeOutput() CacheTypeOutput
	ToCacheTypeOutputWithContext(context.Context) CacheTypeOutput
}

var cacheTypePtrType = reflect.TypeOf((**CacheType)(nil)).Elem()

type CacheTypePtrInput interface {
	pulumi.Input

	ToCacheTypePtrOutput() CacheTypePtrOutput
	ToCacheTypePtrOutputWithContext(context.Context) CacheTypePtrOutput
}

type cacheTypePtr string

func CacheTypePtr(v string) CacheTypePtrInput {
	return (*cacheTypePtr)(&v)
}

func (*cacheTypePtr) ElementType() reflect.Type {
	return cacheTypePtrType
}

func (in *cacheTypePtr) ToCacheTypePtrOutput() CacheTypePtrOutput {
	return pulumi.ToOutput(in).(CacheTypePtrOutput)
}

func (in *cacheTypePtr) ToCacheTypePtrOutputWithContext(ctx context.Context) CacheTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CacheTypePtrOutput)
}

// Describes operator to be matched
type CookiesOperator string

const (
	CookiesOperatorAny                = CookiesOperator("Any")
	CookiesOperatorEqual              = CookiesOperator("Equal")
	CookiesOperatorContains           = CookiesOperator("Contains")
	CookiesOperatorBeginsWith         = CookiesOperator("BeginsWith")
	CookiesOperatorEndsWith           = CookiesOperator("EndsWith")
	CookiesOperatorLessThan           = CookiesOperator("LessThan")
	CookiesOperatorLessThanOrEqual    = CookiesOperator("LessThanOrEqual")
	CookiesOperatorGreaterThan        = CookiesOperator("GreaterThan")
	CookiesOperatorGreaterThanOrEqual = CookiesOperator("GreaterThanOrEqual")
)

func (CookiesOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*CookiesOperator)(nil)).Elem()
}

func (e CookiesOperator) ToCookiesOperatorOutput() CookiesOperatorOutput {
	return pulumi.ToOutput(e).(CookiesOperatorOutput)
}

func (e CookiesOperator) ToCookiesOperatorOutputWithContext(ctx context.Context) CookiesOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CookiesOperatorOutput)
}

func (e CookiesOperator) ToCookiesOperatorPtrOutput() CookiesOperatorPtrOutput {
	return e.ToCookiesOperatorPtrOutputWithContext(context.Background())
}

func (e CookiesOperator) ToCookiesOperatorPtrOutputWithContext(ctx context.Context) CookiesOperatorPtrOutput {
	return CookiesOperator(e).ToCookiesOperatorOutputWithContext(ctx).ToCookiesOperatorPtrOutputWithContext(ctx)
}

func (e CookiesOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CookiesOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CookiesOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CookiesOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CookiesOperatorOutput struct{ *pulumi.OutputState }

func (CookiesOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CookiesOperator)(nil)).Elem()
}

func (o CookiesOperatorOutput) ToCookiesOperatorOutput() CookiesOperatorOutput {
	return o
}

func (o CookiesOperatorOutput) ToCookiesOperatorOutputWithContext(ctx context.Context) CookiesOperatorOutput {
	return o
}

func (o CookiesOperatorOutput) ToCookiesOperatorPtrOutput() CookiesOperatorPtrOutput {
	return o.ToCookiesOperatorPtrOutputWithContext(context.Background())
}

func (o CookiesOperatorOutput) ToCookiesOperatorPtrOutputWithContext(ctx context.Context) CookiesOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CookiesOperator) *CookiesOperator {
		return &v
	}).(CookiesOperatorPtrOutput)
}

func (o CookiesOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CookiesOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CookiesOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CookiesOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CookiesOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CookiesOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CookiesOperatorPtrOutput struct{ *pulumi.OutputState }

func (CookiesOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CookiesOperator)(nil)).Elem()
}

func (o CookiesOperatorPtrOutput) ToCookiesOperatorPtrOutput() CookiesOperatorPtrOutput {
	return o
}

func (o CookiesOperatorPtrOutput) ToCookiesOperatorPtrOutputWithContext(ctx context.Context) CookiesOperatorPtrOutput {
	return o
}

func (o CookiesOperatorPtrOutput) Elem() CookiesOperatorOutput {
	return o.ApplyT(func(v *CookiesOperator) CookiesOperator {
		if v != nil {
			return *v
		}
		var ret CookiesOperator
		return ret
	}).(CookiesOperatorOutput)
}

func (o CookiesOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CookiesOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CookiesOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CookiesOperatorInput is an input type that accepts CookiesOperatorArgs and CookiesOperatorOutput values.
// You can construct a concrete instance of `CookiesOperatorInput` via:
//
//          CookiesOperatorArgs{...}
type CookiesOperatorInput interface {
	pulumi.Input

	ToCookiesOperatorOutput() CookiesOperatorOutput
	ToCookiesOperatorOutputWithContext(context.Context) CookiesOperatorOutput
}

var cookiesOperatorPtrType = reflect.TypeOf((**CookiesOperator)(nil)).Elem()

type CookiesOperatorPtrInput interface {
	pulumi.Input

	ToCookiesOperatorPtrOutput() CookiesOperatorPtrOutput
	ToCookiesOperatorPtrOutputWithContext(context.Context) CookiesOperatorPtrOutput
}

type cookiesOperatorPtr string

func CookiesOperatorPtr(v string) CookiesOperatorPtrInput {
	return (*cookiesOperatorPtr)(&v)
}

func (*cookiesOperatorPtr) ElementType() reflect.Type {
	return cookiesOperatorPtrType
}

func (in *cookiesOperatorPtr) ToCookiesOperatorPtrOutput() CookiesOperatorPtrOutput {
	return pulumi.ToOutput(in).(CookiesOperatorPtrOutput)
}

func (in *cookiesOperatorPtr) ToCookiesOperatorPtrOutputWithContext(ctx context.Context) CookiesOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CookiesOperatorPtrOutput)
}

// Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
type CustomRuleEnabledState string

const (
	CustomRuleEnabledStateDisabled = CustomRuleEnabledState("Disabled")
	CustomRuleEnabledStateEnabled  = CustomRuleEnabledState("Enabled")
)

func (CustomRuleEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRuleEnabledState)(nil)).Elem()
}

func (e CustomRuleEnabledState) ToCustomRuleEnabledStateOutput() CustomRuleEnabledStateOutput {
	return pulumi.ToOutput(e).(CustomRuleEnabledStateOutput)
}

func (e CustomRuleEnabledState) ToCustomRuleEnabledStateOutputWithContext(ctx context.Context) CustomRuleEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CustomRuleEnabledStateOutput)
}

func (e CustomRuleEnabledState) ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput {
	return e.ToCustomRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (e CustomRuleEnabledState) ToCustomRuleEnabledStatePtrOutputWithContext(ctx context.Context) CustomRuleEnabledStatePtrOutput {
	return CustomRuleEnabledState(e).ToCustomRuleEnabledStateOutputWithContext(ctx).ToCustomRuleEnabledStatePtrOutputWithContext(ctx)
}

func (e CustomRuleEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CustomRuleEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CustomRuleEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CustomRuleEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CustomRuleEnabledStateOutput struct{ *pulumi.OutputState }

func (CustomRuleEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRuleEnabledState)(nil)).Elem()
}

func (o CustomRuleEnabledStateOutput) ToCustomRuleEnabledStateOutput() CustomRuleEnabledStateOutput {
	return o
}

func (o CustomRuleEnabledStateOutput) ToCustomRuleEnabledStateOutputWithContext(ctx context.Context) CustomRuleEnabledStateOutput {
	return o
}

func (o CustomRuleEnabledStateOutput) ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput {
	return o.ToCustomRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (o CustomRuleEnabledStateOutput) ToCustomRuleEnabledStatePtrOutputWithContext(ctx context.Context) CustomRuleEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomRuleEnabledState) *CustomRuleEnabledState {
		return &v
	}).(CustomRuleEnabledStatePtrOutput)
}

func (o CustomRuleEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CustomRuleEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CustomRuleEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CustomRuleEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CustomRuleEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CustomRuleEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CustomRuleEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (CustomRuleEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomRuleEnabledState)(nil)).Elem()
}

func (o CustomRuleEnabledStatePtrOutput) ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput {
	return o
}

func (o CustomRuleEnabledStatePtrOutput) ToCustomRuleEnabledStatePtrOutputWithContext(ctx context.Context) CustomRuleEnabledStatePtrOutput {
	return o
}

func (o CustomRuleEnabledStatePtrOutput) Elem() CustomRuleEnabledStateOutput {
	return o.ApplyT(func(v *CustomRuleEnabledState) CustomRuleEnabledState {
		if v != nil {
			return *v
		}
		var ret CustomRuleEnabledState
		return ret
	}).(CustomRuleEnabledStateOutput)
}

func (o CustomRuleEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CustomRuleEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CustomRuleEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CustomRuleEnabledStateInput is an input type that accepts CustomRuleEnabledStateArgs and CustomRuleEnabledStateOutput values.
// You can construct a concrete instance of `CustomRuleEnabledStateInput` via:
//
//          CustomRuleEnabledStateArgs{...}
type CustomRuleEnabledStateInput interface {
	pulumi.Input

	ToCustomRuleEnabledStateOutput() CustomRuleEnabledStateOutput
	ToCustomRuleEnabledStateOutputWithContext(context.Context) CustomRuleEnabledStateOutput
}

var customRuleEnabledStatePtrType = reflect.TypeOf((**CustomRuleEnabledState)(nil)).Elem()

type CustomRuleEnabledStatePtrInput interface {
	pulumi.Input

	ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput
	ToCustomRuleEnabledStatePtrOutputWithContext(context.Context) CustomRuleEnabledStatePtrOutput
}

type customRuleEnabledStatePtr string

func CustomRuleEnabledStatePtr(v string) CustomRuleEnabledStatePtrInput {
	return (*customRuleEnabledStatePtr)(&v)
}

func (*customRuleEnabledStatePtr) ElementType() reflect.Type {
	return customRuleEnabledStatePtrType
}

func (in *customRuleEnabledStatePtr) ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(CustomRuleEnabledStatePtrOutput)
}

func (in *customRuleEnabledStatePtr) ToCustomRuleEnabledStatePtrOutputWithContext(ctx context.Context) CustomRuleEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CustomRuleEnabledStatePtrOutput)
}

// The name of the action for the delivery rule.
type DeliveryRuleAction string

const (
	DeliveryRuleActionCacheExpiration      = DeliveryRuleAction("CacheExpiration")
	DeliveryRuleActionCacheKeyQueryString  = DeliveryRuleAction("CacheKeyQueryString")
	DeliveryRuleActionModifyRequestHeader  = DeliveryRuleAction("ModifyRequestHeader")
	DeliveryRuleActionModifyResponseHeader = DeliveryRuleAction("ModifyResponseHeader")
	DeliveryRuleActionUrlRedirect          = DeliveryRuleAction("UrlRedirect")
	DeliveryRuleActionUrlRewrite           = DeliveryRuleAction("UrlRewrite")
	DeliveryRuleActionUrlSigning           = DeliveryRuleAction("UrlSigning")
)

func (DeliveryRuleAction) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryRuleAction)(nil)).Elem()
}

func (e DeliveryRuleAction) ToDeliveryRuleActionOutput() DeliveryRuleActionOutput {
	return pulumi.ToOutput(e).(DeliveryRuleActionOutput)
}

func (e DeliveryRuleAction) ToDeliveryRuleActionOutputWithContext(ctx context.Context) DeliveryRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeliveryRuleActionOutput)
}

func (e DeliveryRuleAction) ToDeliveryRuleActionPtrOutput() DeliveryRuleActionPtrOutput {
	return e.ToDeliveryRuleActionPtrOutputWithContext(context.Background())
}

func (e DeliveryRuleAction) ToDeliveryRuleActionPtrOutputWithContext(ctx context.Context) DeliveryRuleActionPtrOutput {
	return DeliveryRuleAction(e).ToDeliveryRuleActionOutputWithContext(ctx).ToDeliveryRuleActionPtrOutputWithContext(ctx)
}

func (e DeliveryRuleAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeliveryRuleAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeliveryRuleAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeliveryRuleAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeliveryRuleActionOutput struct{ *pulumi.OutputState }

func (DeliveryRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryRuleAction)(nil)).Elem()
}

func (o DeliveryRuleActionOutput) ToDeliveryRuleActionOutput() DeliveryRuleActionOutput {
	return o
}

func (o DeliveryRuleActionOutput) ToDeliveryRuleActionOutputWithContext(ctx context.Context) DeliveryRuleActionOutput {
	return o
}

func (o DeliveryRuleActionOutput) ToDeliveryRuleActionPtrOutput() DeliveryRuleActionPtrOutput {
	return o.ToDeliveryRuleActionPtrOutputWithContext(context.Background())
}

func (o DeliveryRuleActionOutput) ToDeliveryRuleActionPtrOutputWithContext(ctx context.Context) DeliveryRuleActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeliveryRuleAction) *DeliveryRuleAction {
		return &v
	}).(DeliveryRuleActionPtrOutput)
}

func (o DeliveryRuleActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeliveryRuleActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeliveryRuleAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeliveryRuleActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeliveryRuleActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeliveryRuleAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeliveryRuleActionPtrOutput struct{ *pulumi.OutputState }

func (DeliveryRuleActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryRuleAction)(nil)).Elem()
}

func (o DeliveryRuleActionPtrOutput) ToDeliveryRuleActionPtrOutput() DeliveryRuleActionPtrOutput {
	return o
}

func (o DeliveryRuleActionPtrOutput) ToDeliveryRuleActionPtrOutputWithContext(ctx context.Context) DeliveryRuleActionPtrOutput {
	return o
}

func (o DeliveryRuleActionPtrOutput) Elem() DeliveryRuleActionOutput {
	return o.ApplyT(func(v *DeliveryRuleAction) DeliveryRuleAction {
		if v != nil {
			return *v
		}
		var ret DeliveryRuleAction
		return ret
	}).(DeliveryRuleActionOutput)
}

func (o DeliveryRuleActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeliveryRuleActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeliveryRuleAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DeliveryRuleActionInput is an input type that accepts DeliveryRuleActionArgs and DeliveryRuleActionOutput values.
// You can construct a concrete instance of `DeliveryRuleActionInput` via:
//
//          DeliveryRuleActionArgs{...}
type DeliveryRuleActionInput interface {
	pulumi.Input

	ToDeliveryRuleActionOutput() DeliveryRuleActionOutput
	ToDeliveryRuleActionOutputWithContext(context.Context) DeliveryRuleActionOutput
}

var deliveryRuleActionPtrType = reflect.TypeOf((**DeliveryRuleAction)(nil)).Elem()

type DeliveryRuleActionPtrInput interface {
	pulumi.Input

	ToDeliveryRuleActionPtrOutput() DeliveryRuleActionPtrOutput
	ToDeliveryRuleActionPtrOutputWithContext(context.Context) DeliveryRuleActionPtrOutput
}

type deliveryRuleActionPtr string

func DeliveryRuleActionPtr(v string) DeliveryRuleActionPtrInput {
	return (*deliveryRuleActionPtr)(&v)
}

func (*deliveryRuleActionPtr) ElementType() reflect.Type {
	return deliveryRuleActionPtrType
}

func (in *deliveryRuleActionPtr) ToDeliveryRuleActionPtrOutput() DeliveryRuleActionPtrOutput {
	return pulumi.ToOutput(in).(DeliveryRuleActionPtrOutput)
}

func (in *deliveryRuleActionPtr) ToDeliveryRuleActionPtrOutputWithContext(ctx context.Context) DeliveryRuleActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeliveryRuleActionPtrOutput)
}

// Protocol to use for the redirect. The default value is MatchRequest
type DestinationProtocol string

const (
	DestinationProtocolMatchRequest = DestinationProtocol("MatchRequest")
	DestinationProtocolHttp         = DestinationProtocol("Http")
	DestinationProtocolHttps        = DestinationProtocol("Https")
)

func (DestinationProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationProtocol)(nil)).Elem()
}

func (e DestinationProtocol) ToDestinationProtocolOutput() DestinationProtocolOutput {
	return pulumi.ToOutput(e).(DestinationProtocolOutput)
}

func (e DestinationProtocol) ToDestinationProtocolOutputWithContext(ctx context.Context) DestinationProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DestinationProtocolOutput)
}

func (e DestinationProtocol) ToDestinationProtocolPtrOutput() DestinationProtocolPtrOutput {
	return e.ToDestinationProtocolPtrOutputWithContext(context.Background())
}

func (e DestinationProtocol) ToDestinationProtocolPtrOutputWithContext(ctx context.Context) DestinationProtocolPtrOutput {
	return DestinationProtocol(e).ToDestinationProtocolOutputWithContext(ctx).ToDestinationProtocolPtrOutputWithContext(ctx)
}

func (e DestinationProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DestinationProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DestinationProtocolOutput struct{ *pulumi.OutputState }

func (DestinationProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationProtocol)(nil)).Elem()
}

func (o DestinationProtocolOutput) ToDestinationProtocolOutput() DestinationProtocolOutput {
	return o
}

func (o DestinationProtocolOutput) ToDestinationProtocolOutputWithContext(ctx context.Context) DestinationProtocolOutput {
	return o
}

func (o DestinationProtocolOutput) ToDestinationProtocolPtrOutput() DestinationProtocolPtrOutput {
	return o.ToDestinationProtocolPtrOutputWithContext(context.Background())
}

func (o DestinationProtocolOutput) ToDestinationProtocolPtrOutputWithContext(ctx context.Context) DestinationProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationProtocol) *DestinationProtocol {
		return &v
	}).(DestinationProtocolPtrOutput)
}

func (o DestinationProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DestinationProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DestinationProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DestinationProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DestinationProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DestinationProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DestinationProtocolPtrOutput struct{ *pulumi.OutputState }

func (DestinationProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationProtocol)(nil)).Elem()
}

func (o DestinationProtocolPtrOutput) ToDestinationProtocolPtrOutput() DestinationProtocolPtrOutput {
	return o
}

func (o DestinationProtocolPtrOutput) ToDestinationProtocolPtrOutputWithContext(ctx context.Context) DestinationProtocolPtrOutput {
	return o
}

func (o DestinationProtocolPtrOutput) Elem() DestinationProtocolOutput {
	return o.ApplyT(func(v *DestinationProtocol) DestinationProtocol {
		if v != nil {
			return *v
		}
		var ret DestinationProtocol
		return ret
	}).(DestinationProtocolOutput)
}

func (o DestinationProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DestinationProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DestinationProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DestinationProtocolInput is an input type that accepts DestinationProtocolArgs and DestinationProtocolOutput values.
// You can construct a concrete instance of `DestinationProtocolInput` via:
//
//          DestinationProtocolArgs{...}
type DestinationProtocolInput interface {
	pulumi.Input

	ToDestinationProtocolOutput() DestinationProtocolOutput
	ToDestinationProtocolOutputWithContext(context.Context) DestinationProtocolOutput
}

var destinationProtocolPtrType = reflect.TypeOf((**DestinationProtocol)(nil)).Elem()

type DestinationProtocolPtrInput interface {
	pulumi.Input

	ToDestinationProtocolPtrOutput() DestinationProtocolPtrOutput
	ToDestinationProtocolPtrOutputWithContext(context.Context) DestinationProtocolPtrOutput
}

type destinationProtocolPtr string

func DestinationProtocolPtr(v string) DestinationProtocolPtrInput {
	return (*destinationProtocolPtr)(&v)
}

func (*destinationProtocolPtr) ElementType() reflect.Type {
	return destinationProtocolPtrType
}

func (in *destinationProtocolPtr) ToDestinationProtocolPtrOutput() DestinationProtocolPtrOutput {
	return pulumi.ToOutput(in).(DestinationProtocolPtrOutput)
}

func (in *destinationProtocolPtr) ToDestinationProtocolPtrOutputWithContext(ctx context.Context) DestinationProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DestinationProtocolPtrOutput)
}

// Action of the geo filter, i.e. allow or block access.
type GeoFilterActions string

const (
	GeoFilterActionsBlock = GeoFilterActions("Block")
	GeoFilterActionsAllow = GeoFilterActions("Allow")
)

func (GeoFilterActions) ElementType() reflect.Type {
	return reflect.TypeOf((*GeoFilterActions)(nil)).Elem()
}

func (e GeoFilterActions) ToGeoFilterActionsOutput() GeoFilterActionsOutput {
	return pulumi.ToOutput(e).(GeoFilterActionsOutput)
}

func (e GeoFilterActions) ToGeoFilterActionsOutputWithContext(ctx context.Context) GeoFilterActionsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GeoFilterActionsOutput)
}

func (e GeoFilterActions) ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput {
	return e.ToGeoFilterActionsPtrOutputWithContext(context.Background())
}

func (e GeoFilterActions) ToGeoFilterActionsPtrOutputWithContext(ctx context.Context) GeoFilterActionsPtrOutput {
	return GeoFilterActions(e).ToGeoFilterActionsOutputWithContext(ctx).ToGeoFilterActionsPtrOutputWithContext(ctx)
}

func (e GeoFilterActions) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GeoFilterActions) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GeoFilterActions) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GeoFilterActions) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GeoFilterActionsOutput struct{ *pulumi.OutputState }

func (GeoFilterActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeoFilterActions)(nil)).Elem()
}

func (o GeoFilterActionsOutput) ToGeoFilterActionsOutput() GeoFilterActionsOutput {
	return o
}

func (o GeoFilterActionsOutput) ToGeoFilterActionsOutputWithContext(ctx context.Context) GeoFilterActionsOutput {
	return o
}

func (o GeoFilterActionsOutput) ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput {
	return o.ToGeoFilterActionsPtrOutputWithContext(context.Background())
}

func (o GeoFilterActionsOutput) ToGeoFilterActionsPtrOutputWithContext(ctx context.Context) GeoFilterActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GeoFilterActions) *GeoFilterActions {
		return &v
	}).(GeoFilterActionsPtrOutput)
}

func (o GeoFilterActionsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GeoFilterActionsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GeoFilterActions) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GeoFilterActionsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GeoFilterActionsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GeoFilterActions) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GeoFilterActionsPtrOutput struct{ *pulumi.OutputState }

func (GeoFilterActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeoFilterActions)(nil)).Elem()
}

func (o GeoFilterActionsPtrOutput) ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput {
	return o
}

func (o GeoFilterActionsPtrOutput) ToGeoFilterActionsPtrOutputWithContext(ctx context.Context) GeoFilterActionsPtrOutput {
	return o
}

func (o GeoFilterActionsPtrOutput) Elem() GeoFilterActionsOutput {
	return o.ApplyT(func(v *GeoFilterActions) GeoFilterActions {
		if v != nil {
			return *v
		}
		var ret GeoFilterActions
		return ret
	}).(GeoFilterActionsOutput)
}

func (o GeoFilterActionsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GeoFilterActionsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GeoFilterActions) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GeoFilterActionsInput is an input type that accepts GeoFilterActionsArgs and GeoFilterActionsOutput values.
// You can construct a concrete instance of `GeoFilterActionsInput` via:
//
//          GeoFilterActionsArgs{...}
type GeoFilterActionsInput interface {
	pulumi.Input

	ToGeoFilterActionsOutput() GeoFilterActionsOutput
	ToGeoFilterActionsOutputWithContext(context.Context) GeoFilterActionsOutput
}

var geoFilterActionsPtrType = reflect.TypeOf((**GeoFilterActions)(nil)).Elem()

type GeoFilterActionsPtrInput interface {
	pulumi.Input

	ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput
	ToGeoFilterActionsPtrOutputWithContext(context.Context) GeoFilterActionsPtrOutput
}

type geoFilterActionsPtr string

func GeoFilterActionsPtr(v string) GeoFilterActionsPtrInput {
	return (*geoFilterActionsPtr)(&v)
}

func (*geoFilterActionsPtr) ElementType() reflect.Type {
	return geoFilterActionsPtrType
}

func (in *geoFilterActionsPtr) ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput {
	return pulumi.ToOutput(in).(GeoFilterActionsPtrOutput)
}

func (in *geoFilterActionsPtr) ToGeoFilterActionsPtrOutputWithContext(ctx context.Context) GeoFilterActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GeoFilterActionsPtrOutput)
}

// Action to perform
type HeaderAction string

const (
	HeaderActionAppend    = HeaderAction("Append")
	HeaderActionOverwrite = HeaderAction("Overwrite")
	HeaderActionDelete    = HeaderAction("Delete")
)

func (HeaderAction) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderAction)(nil)).Elem()
}

func (e HeaderAction) ToHeaderActionOutput() HeaderActionOutput {
	return pulumi.ToOutput(e).(HeaderActionOutput)
}

func (e HeaderAction) ToHeaderActionOutputWithContext(ctx context.Context) HeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HeaderActionOutput)
}

func (e HeaderAction) ToHeaderActionPtrOutput() HeaderActionPtrOutput {
	return e.ToHeaderActionPtrOutputWithContext(context.Background())
}

func (e HeaderAction) ToHeaderActionPtrOutputWithContext(ctx context.Context) HeaderActionPtrOutput {
	return HeaderAction(e).ToHeaderActionOutputWithContext(ctx).ToHeaderActionPtrOutputWithContext(ctx)
}

func (e HeaderAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HeaderAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HeaderAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HeaderAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HeaderActionOutput struct{ *pulumi.OutputState }

func (HeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderAction)(nil)).Elem()
}

func (o HeaderActionOutput) ToHeaderActionOutput() HeaderActionOutput {
	return o
}

func (o HeaderActionOutput) ToHeaderActionOutputWithContext(ctx context.Context) HeaderActionOutput {
	return o
}

func (o HeaderActionOutput) ToHeaderActionPtrOutput() HeaderActionPtrOutput {
	return o.ToHeaderActionPtrOutputWithContext(context.Background())
}

func (o HeaderActionOutput) ToHeaderActionPtrOutputWithContext(ctx context.Context) HeaderActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeaderAction) *HeaderAction {
		return &v
	}).(HeaderActionPtrOutput)
}

func (o HeaderActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HeaderActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HeaderAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HeaderActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HeaderActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HeaderAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HeaderActionPtrOutput struct{ *pulumi.OutputState }

func (HeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeaderAction)(nil)).Elem()
}

func (o HeaderActionPtrOutput) ToHeaderActionPtrOutput() HeaderActionPtrOutput {
	return o
}

func (o HeaderActionPtrOutput) ToHeaderActionPtrOutputWithContext(ctx context.Context) HeaderActionPtrOutput {
	return o
}

func (o HeaderActionPtrOutput) Elem() HeaderActionOutput {
	return o.ApplyT(func(v *HeaderAction) HeaderAction {
		if v != nil {
			return *v
		}
		var ret HeaderAction
		return ret
	}).(HeaderActionOutput)
}

func (o HeaderActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HeaderActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HeaderAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HeaderActionInput is an input type that accepts HeaderActionArgs and HeaderActionOutput values.
// You can construct a concrete instance of `HeaderActionInput` via:
//
//          HeaderActionArgs{...}
type HeaderActionInput interface {
	pulumi.Input

	ToHeaderActionOutput() HeaderActionOutput
	ToHeaderActionOutputWithContext(context.Context) HeaderActionOutput
}

var headerActionPtrType = reflect.TypeOf((**HeaderAction)(nil)).Elem()

type HeaderActionPtrInput interface {
	pulumi.Input

	ToHeaderActionPtrOutput() HeaderActionPtrOutput
	ToHeaderActionPtrOutputWithContext(context.Context) HeaderActionPtrOutput
}

type headerActionPtr string

func HeaderActionPtr(v string) HeaderActionPtrInput {
	return (*headerActionPtr)(&v)
}

func (*headerActionPtr) ElementType() reflect.Type {
	return headerActionPtrType
}

func (in *headerActionPtr) ToHeaderActionPtrOutput() HeaderActionPtrOutput {
	return pulumi.ToOutput(in).(HeaderActionPtrOutput)
}

func (in *headerActionPtr) ToHeaderActionPtrOutputWithContext(ctx context.Context) HeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HeaderActionPtrOutput)
}

// The type of health probe request that is made.
type HealthProbeRequestType string

const (
	HealthProbeRequestTypeNotSet = HealthProbeRequestType("NotSet")
	HealthProbeRequestTypeGET    = HealthProbeRequestType("GET")
	HealthProbeRequestTypeHEAD   = HealthProbeRequestType("HEAD")
)

func (HealthProbeRequestType) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeRequestType)(nil)).Elem()
}

func (e HealthProbeRequestType) ToHealthProbeRequestTypeOutput() HealthProbeRequestTypeOutput {
	return pulumi.ToOutput(e).(HealthProbeRequestTypeOutput)
}

func (e HealthProbeRequestType) ToHealthProbeRequestTypeOutputWithContext(ctx context.Context) HealthProbeRequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HealthProbeRequestTypeOutput)
}

func (e HealthProbeRequestType) ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput {
	return e.ToHealthProbeRequestTypePtrOutputWithContext(context.Background())
}

func (e HealthProbeRequestType) ToHealthProbeRequestTypePtrOutputWithContext(ctx context.Context) HealthProbeRequestTypePtrOutput {
	return HealthProbeRequestType(e).ToHealthProbeRequestTypeOutputWithContext(ctx).ToHealthProbeRequestTypePtrOutputWithContext(ctx)
}

func (e HealthProbeRequestType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthProbeRequestType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthProbeRequestType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HealthProbeRequestType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HealthProbeRequestTypeOutput struct{ *pulumi.OutputState }

func (HealthProbeRequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeRequestType)(nil)).Elem()
}

func (o HealthProbeRequestTypeOutput) ToHealthProbeRequestTypeOutput() HealthProbeRequestTypeOutput {
	return o
}

func (o HealthProbeRequestTypeOutput) ToHealthProbeRequestTypeOutputWithContext(ctx context.Context) HealthProbeRequestTypeOutput {
	return o
}

func (o HealthProbeRequestTypeOutput) ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput {
	return o.ToHealthProbeRequestTypePtrOutputWithContext(context.Background())
}

func (o HealthProbeRequestTypeOutput) ToHealthProbeRequestTypePtrOutputWithContext(ctx context.Context) HealthProbeRequestTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HealthProbeRequestType) *HealthProbeRequestType {
		return &v
	}).(HealthProbeRequestTypePtrOutput)
}

func (o HealthProbeRequestTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HealthProbeRequestTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HealthProbeRequestType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HealthProbeRequestTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HealthProbeRequestTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HealthProbeRequestType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HealthProbeRequestTypePtrOutput struct{ *pulumi.OutputState }

func (HealthProbeRequestTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthProbeRequestType)(nil)).Elem()
}

func (o HealthProbeRequestTypePtrOutput) ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput {
	return o
}

func (o HealthProbeRequestTypePtrOutput) ToHealthProbeRequestTypePtrOutputWithContext(ctx context.Context) HealthProbeRequestTypePtrOutput {
	return o
}

func (o HealthProbeRequestTypePtrOutput) Elem() HealthProbeRequestTypeOutput {
	return o.ApplyT(func(v *HealthProbeRequestType) HealthProbeRequestType {
		if v != nil {
			return *v
		}
		var ret HealthProbeRequestType
		return ret
	}).(HealthProbeRequestTypeOutput)
}

func (o HealthProbeRequestTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HealthProbeRequestTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HealthProbeRequestType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HealthProbeRequestTypeInput is an input type that accepts HealthProbeRequestTypeArgs and HealthProbeRequestTypeOutput values.
// You can construct a concrete instance of `HealthProbeRequestTypeInput` via:
//
//          HealthProbeRequestTypeArgs{...}
type HealthProbeRequestTypeInput interface {
	pulumi.Input

	ToHealthProbeRequestTypeOutput() HealthProbeRequestTypeOutput
	ToHealthProbeRequestTypeOutputWithContext(context.Context) HealthProbeRequestTypeOutput
}

var healthProbeRequestTypePtrType = reflect.TypeOf((**HealthProbeRequestType)(nil)).Elem()

type HealthProbeRequestTypePtrInput interface {
	pulumi.Input

	ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput
	ToHealthProbeRequestTypePtrOutputWithContext(context.Context) HealthProbeRequestTypePtrOutput
}

type healthProbeRequestTypePtr string

func HealthProbeRequestTypePtr(v string) HealthProbeRequestTypePtrInput {
	return (*healthProbeRequestTypePtr)(&v)
}

func (*healthProbeRequestTypePtr) ElementType() reflect.Type {
	return healthProbeRequestTypePtrType
}

func (in *healthProbeRequestTypePtr) ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput {
	return pulumi.ToOutput(in).(HealthProbeRequestTypePtrOutput)
}

func (in *healthProbeRequestTypePtr) ToHealthProbeRequestTypePtrOutputWithContext(ctx context.Context) HealthProbeRequestTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HealthProbeRequestTypePtrOutput)
}

// Describes operator to be matched
type HttpVersionOperator string

const (
	HttpVersionOperatorEqual = HttpVersionOperator("Equal")
)

func (HttpVersionOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpVersionOperator)(nil)).Elem()
}

func (e HttpVersionOperator) ToHttpVersionOperatorOutput() HttpVersionOperatorOutput {
	return pulumi.ToOutput(e).(HttpVersionOperatorOutput)
}

func (e HttpVersionOperator) ToHttpVersionOperatorOutputWithContext(ctx context.Context) HttpVersionOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HttpVersionOperatorOutput)
}

func (e HttpVersionOperator) ToHttpVersionOperatorPtrOutput() HttpVersionOperatorPtrOutput {
	return e.ToHttpVersionOperatorPtrOutputWithContext(context.Background())
}

func (e HttpVersionOperator) ToHttpVersionOperatorPtrOutputWithContext(ctx context.Context) HttpVersionOperatorPtrOutput {
	return HttpVersionOperator(e).ToHttpVersionOperatorOutputWithContext(ctx).ToHttpVersionOperatorPtrOutputWithContext(ctx)
}

func (e HttpVersionOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpVersionOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpVersionOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpVersionOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HttpVersionOperatorOutput struct{ *pulumi.OutputState }

func (HttpVersionOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpVersionOperator)(nil)).Elem()
}

func (o HttpVersionOperatorOutput) ToHttpVersionOperatorOutput() HttpVersionOperatorOutput {
	return o
}

func (o HttpVersionOperatorOutput) ToHttpVersionOperatorOutputWithContext(ctx context.Context) HttpVersionOperatorOutput {
	return o
}

func (o HttpVersionOperatorOutput) ToHttpVersionOperatorPtrOutput() HttpVersionOperatorPtrOutput {
	return o.ToHttpVersionOperatorPtrOutputWithContext(context.Background())
}

func (o HttpVersionOperatorOutput) ToHttpVersionOperatorPtrOutputWithContext(ctx context.Context) HttpVersionOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpVersionOperator) *HttpVersionOperator {
		return &v
	}).(HttpVersionOperatorPtrOutput)
}

func (o HttpVersionOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HttpVersionOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpVersionOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HttpVersionOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpVersionOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpVersionOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HttpVersionOperatorPtrOutput struct{ *pulumi.OutputState }

func (HttpVersionOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpVersionOperator)(nil)).Elem()
}

func (o HttpVersionOperatorPtrOutput) ToHttpVersionOperatorPtrOutput() HttpVersionOperatorPtrOutput {
	return o
}

func (o HttpVersionOperatorPtrOutput) ToHttpVersionOperatorPtrOutputWithContext(ctx context.Context) HttpVersionOperatorPtrOutput {
	return o
}

func (o HttpVersionOperatorPtrOutput) Elem() HttpVersionOperatorOutput {
	return o.ApplyT(func(v *HttpVersionOperator) HttpVersionOperator {
		if v != nil {
			return *v
		}
		var ret HttpVersionOperator
		return ret
	}).(HttpVersionOperatorOutput)
}

func (o HttpVersionOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpVersionOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HttpVersionOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HttpVersionOperatorInput is an input type that accepts HttpVersionOperatorArgs and HttpVersionOperatorOutput values.
// You can construct a concrete instance of `HttpVersionOperatorInput` via:
//
//          HttpVersionOperatorArgs{...}
type HttpVersionOperatorInput interface {
	pulumi.Input

	ToHttpVersionOperatorOutput() HttpVersionOperatorOutput
	ToHttpVersionOperatorOutputWithContext(context.Context) HttpVersionOperatorOutput
}

var httpVersionOperatorPtrType = reflect.TypeOf((**HttpVersionOperator)(nil)).Elem()

type HttpVersionOperatorPtrInput interface {
	pulumi.Input

	ToHttpVersionOperatorPtrOutput() HttpVersionOperatorPtrOutput
	ToHttpVersionOperatorPtrOutputWithContext(context.Context) HttpVersionOperatorPtrOutput
}

type httpVersionOperatorPtr string

func HttpVersionOperatorPtr(v string) HttpVersionOperatorPtrInput {
	return (*httpVersionOperatorPtr)(&v)
}

func (*httpVersionOperatorPtr) ElementType() reflect.Type {
	return httpVersionOperatorPtrType
}

func (in *httpVersionOperatorPtr) ToHttpVersionOperatorPtrOutput() HttpVersionOperatorPtrOutput {
	return pulumi.ToOutput(in).(HttpVersionOperatorPtrOutput)
}

func (in *httpVersionOperatorPtr) ToHttpVersionOperatorPtrOutputWithContext(ctx context.Context) HttpVersionOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HttpVersionOperatorPtrOutput)
}

// Describes operator to be matched
type IsDeviceOperator string

const (
	IsDeviceOperatorEqual = IsDeviceOperator("Equal")
)

func (IsDeviceOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*IsDeviceOperator)(nil)).Elem()
}

func (e IsDeviceOperator) ToIsDeviceOperatorOutput() IsDeviceOperatorOutput {
	return pulumi.ToOutput(e).(IsDeviceOperatorOutput)
}

func (e IsDeviceOperator) ToIsDeviceOperatorOutputWithContext(ctx context.Context) IsDeviceOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IsDeviceOperatorOutput)
}

func (e IsDeviceOperator) ToIsDeviceOperatorPtrOutput() IsDeviceOperatorPtrOutput {
	return e.ToIsDeviceOperatorPtrOutputWithContext(context.Background())
}

func (e IsDeviceOperator) ToIsDeviceOperatorPtrOutputWithContext(ctx context.Context) IsDeviceOperatorPtrOutput {
	return IsDeviceOperator(e).ToIsDeviceOperatorOutputWithContext(ctx).ToIsDeviceOperatorPtrOutputWithContext(ctx)
}

func (e IsDeviceOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IsDeviceOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IsDeviceOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IsDeviceOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IsDeviceOperatorOutput struct{ *pulumi.OutputState }

func (IsDeviceOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsDeviceOperator)(nil)).Elem()
}

func (o IsDeviceOperatorOutput) ToIsDeviceOperatorOutput() IsDeviceOperatorOutput {
	return o
}

func (o IsDeviceOperatorOutput) ToIsDeviceOperatorOutputWithContext(ctx context.Context) IsDeviceOperatorOutput {
	return o
}

func (o IsDeviceOperatorOutput) ToIsDeviceOperatorPtrOutput() IsDeviceOperatorPtrOutput {
	return o.ToIsDeviceOperatorPtrOutputWithContext(context.Background())
}

func (o IsDeviceOperatorOutput) ToIsDeviceOperatorPtrOutputWithContext(ctx context.Context) IsDeviceOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IsDeviceOperator) *IsDeviceOperator {
		return &v
	}).(IsDeviceOperatorPtrOutput)
}

func (o IsDeviceOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IsDeviceOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IsDeviceOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IsDeviceOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IsDeviceOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IsDeviceOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IsDeviceOperatorPtrOutput struct{ *pulumi.OutputState }

func (IsDeviceOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IsDeviceOperator)(nil)).Elem()
}

func (o IsDeviceOperatorPtrOutput) ToIsDeviceOperatorPtrOutput() IsDeviceOperatorPtrOutput {
	return o
}

func (o IsDeviceOperatorPtrOutput) ToIsDeviceOperatorPtrOutputWithContext(ctx context.Context) IsDeviceOperatorPtrOutput {
	return o
}

func (o IsDeviceOperatorPtrOutput) Elem() IsDeviceOperatorOutput {
	return o.ApplyT(func(v *IsDeviceOperator) IsDeviceOperator {
		if v != nil {
			return *v
		}
		var ret IsDeviceOperator
		return ret
	}).(IsDeviceOperatorOutput)
}

func (o IsDeviceOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IsDeviceOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IsDeviceOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IsDeviceOperatorInput is an input type that accepts IsDeviceOperatorArgs and IsDeviceOperatorOutput values.
// You can construct a concrete instance of `IsDeviceOperatorInput` via:
//
//          IsDeviceOperatorArgs{...}
type IsDeviceOperatorInput interface {
	pulumi.Input

	ToIsDeviceOperatorOutput() IsDeviceOperatorOutput
	ToIsDeviceOperatorOutputWithContext(context.Context) IsDeviceOperatorOutput
}

var isDeviceOperatorPtrType = reflect.TypeOf((**IsDeviceOperator)(nil)).Elem()

type IsDeviceOperatorPtrInput interface {
	pulumi.Input

	ToIsDeviceOperatorPtrOutput() IsDeviceOperatorPtrOutput
	ToIsDeviceOperatorPtrOutputWithContext(context.Context) IsDeviceOperatorPtrOutput
}

type isDeviceOperatorPtr string

func IsDeviceOperatorPtr(v string) IsDeviceOperatorPtrInput {
	return (*isDeviceOperatorPtr)(&v)
}

func (*isDeviceOperatorPtr) ElementType() reflect.Type {
	return isDeviceOperatorPtrType
}

func (in *isDeviceOperatorPtr) ToIsDeviceOperatorPtrOutput() IsDeviceOperatorPtrOutput {
	return pulumi.ToOutput(in).(IsDeviceOperatorPtrOutput)
}

func (in *isDeviceOperatorPtr) ToIsDeviceOperatorPtrOutputWithContext(ctx context.Context) IsDeviceOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IsDeviceOperatorPtrOutput)
}

// Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
type ManagedRuleEnabledState string

const (
	ManagedRuleEnabledStateDisabled = ManagedRuleEnabledState("Disabled")
	ManagedRuleEnabledStateEnabled  = ManagedRuleEnabledState("Enabled")
)

func (ManagedRuleEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleEnabledState)(nil)).Elem()
}

func (e ManagedRuleEnabledState) ToManagedRuleEnabledStateOutput() ManagedRuleEnabledStateOutput {
	return pulumi.ToOutput(e).(ManagedRuleEnabledStateOutput)
}

func (e ManagedRuleEnabledState) ToManagedRuleEnabledStateOutputWithContext(ctx context.Context) ManagedRuleEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedRuleEnabledStateOutput)
}

func (e ManagedRuleEnabledState) ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput {
	return e.ToManagedRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (e ManagedRuleEnabledState) ToManagedRuleEnabledStatePtrOutputWithContext(ctx context.Context) ManagedRuleEnabledStatePtrOutput {
	return ManagedRuleEnabledState(e).ToManagedRuleEnabledStateOutputWithContext(ctx).ToManagedRuleEnabledStatePtrOutputWithContext(ctx)
}

func (e ManagedRuleEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedRuleEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedRuleEnabledStateOutput struct{ *pulumi.OutputState }

func (ManagedRuleEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleEnabledState)(nil)).Elem()
}

func (o ManagedRuleEnabledStateOutput) ToManagedRuleEnabledStateOutput() ManagedRuleEnabledStateOutput {
	return o
}

func (o ManagedRuleEnabledStateOutput) ToManagedRuleEnabledStateOutputWithContext(ctx context.Context) ManagedRuleEnabledStateOutput {
	return o
}

func (o ManagedRuleEnabledStateOutput) ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput {
	return o.ToManagedRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (o ManagedRuleEnabledStateOutput) ToManagedRuleEnabledStatePtrOutputWithContext(ctx context.Context) ManagedRuleEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedRuleEnabledState) *ManagedRuleEnabledState {
		return &v
	}).(ManagedRuleEnabledStatePtrOutput)
}

func (o ManagedRuleEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedRuleEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedRuleEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedRuleEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (ManagedRuleEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRuleEnabledState)(nil)).Elem()
}

func (o ManagedRuleEnabledStatePtrOutput) ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput {
	return o
}

func (o ManagedRuleEnabledStatePtrOutput) ToManagedRuleEnabledStatePtrOutputWithContext(ctx context.Context) ManagedRuleEnabledStatePtrOutput {
	return o
}

func (o ManagedRuleEnabledStatePtrOutput) Elem() ManagedRuleEnabledStateOutput {
	return o.ApplyT(func(v *ManagedRuleEnabledState) ManagedRuleEnabledState {
		if v != nil {
			return *v
		}
		var ret ManagedRuleEnabledState
		return ret
	}).(ManagedRuleEnabledStateOutput)
}

func (o ManagedRuleEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedRuleEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedRuleEnabledStateInput is an input type that accepts ManagedRuleEnabledStateArgs and ManagedRuleEnabledStateOutput values.
// You can construct a concrete instance of `ManagedRuleEnabledStateInput` via:
//
//          ManagedRuleEnabledStateArgs{...}
type ManagedRuleEnabledStateInput interface {
	pulumi.Input

	ToManagedRuleEnabledStateOutput() ManagedRuleEnabledStateOutput
	ToManagedRuleEnabledStateOutputWithContext(context.Context) ManagedRuleEnabledStateOutput
}

var managedRuleEnabledStatePtrType = reflect.TypeOf((**ManagedRuleEnabledState)(nil)).Elem()

type ManagedRuleEnabledStatePtrInput interface {
	pulumi.Input

	ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput
	ToManagedRuleEnabledStatePtrOutputWithContext(context.Context) ManagedRuleEnabledStatePtrOutput
}

type managedRuleEnabledStatePtr string

func ManagedRuleEnabledStatePtr(v string) ManagedRuleEnabledStatePtrInput {
	return (*managedRuleEnabledStatePtr)(&v)
}

func (*managedRuleEnabledStatePtr) ElementType() reflect.Type {
	return managedRuleEnabledStatePtrType
}

func (in *managedRuleEnabledStatePtr) ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(ManagedRuleEnabledStatePtrOutput)
}

func (in *managedRuleEnabledStatePtr) ToManagedRuleEnabledStatePtrOutputWithContext(ctx context.Context) ManagedRuleEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedRuleEnabledStatePtrOutput)
}

// Match variable to compare against.
type MatchVariable string

const (
	MatchVariableRemoteAddr    = MatchVariable("RemoteAddr")
	MatchVariableSocketAddr    = MatchVariable("SocketAddr")
	MatchVariableRequestMethod = MatchVariable("RequestMethod")
	MatchVariableRequestHeader = MatchVariable("RequestHeader")
	MatchVariableRequestUri    = MatchVariable("RequestUri")
	MatchVariableQueryString   = MatchVariable("QueryString")
	MatchVariableRequestBody   = MatchVariable("RequestBody")
	MatchVariableCookies       = MatchVariable("Cookies")
	MatchVariablePostArgs      = MatchVariable("PostArgs")
)

func (MatchVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchVariable)(nil)).Elem()
}

func (e MatchVariable) ToMatchVariableOutput() MatchVariableOutput {
	return pulumi.ToOutput(e).(MatchVariableOutput)
}

func (e MatchVariable) ToMatchVariableOutputWithContext(ctx context.Context) MatchVariableOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MatchVariableOutput)
}

func (e MatchVariable) ToMatchVariablePtrOutput() MatchVariablePtrOutput {
	return e.ToMatchVariablePtrOutputWithContext(context.Background())
}

func (e MatchVariable) ToMatchVariablePtrOutputWithContext(ctx context.Context) MatchVariablePtrOutput {
	return MatchVariable(e).ToMatchVariableOutputWithContext(ctx).ToMatchVariablePtrOutputWithContext(ctx)
}

func (e MatchVariable) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchVariable) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchVariable) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MatchVariable) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MatchVariableOutput struct{ *pulumi.OutputState }

func (MatchVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchVariable)(nil)).Elem()
}

func (o MatchVariableOutput) ToMatchVariableOutput() MatchVariableOutput {
	return o
}

func (o MatchVariableOutput) ToMatchVariableOutputWithContext(ctx context.Context) MatchVariableOutput {
	return o
}

func (o MatchVariableOutput) ToMatchVariablePtrOutput() MatchVariablePtrOutput {
	return o.ToMatchVariablePtrOutputWithContext(context.Background())
}

func (o MatchVariableOutput) ToMatchVariablePtrOutputWithContext(ctx context.Context) MatchVariablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchVariable) *MatchVariable {
		return &v
	}).(MatchVariablePtrOutput)
}

func (o MatchVariableOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MatchVariableOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MatchVariable) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MatchVariableOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MatchVariableOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MatchVariable) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MatchVariablePtrOutput struct{ *pulumi.OutputState }

func (MatchVariablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchVariable)(nil)).Elem()
}

func (o MatchVariablePtrOutput) ToMatchVariablePtrOutput() MatchVariablePtrOutput {
	return o
}

func (o MatchVariablePtrOutput) ToMatchVariablePtrOutputWithContext(ctx context.Context) MatchVariablePtrOutput {
	return o
}

func (o MatchVariablePtrOutput) Elem() MatchVariableOutput {
	return o.ApplyT(func(v *MatchVariable) MatchVariable {
		if v != nil {
			return *v
		}
		var ret MatchVariable
		return ret
	}).(MatchVariableOutput)
}

func (o MatchVariablePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MatchVariablePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MatchVariable) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MatchVariableInput is an input type that accepts MatchVariableArgs and MatchVariableOutput values.
// You can construct a concrete instance of `MatchVariableInput` via:
//
//          MatchVariableArgs{...}
type MatchVariableInput interface {
	pulumi.Input

	ToMatchVariableOutput() MatchVariableOutput
	ToMatchVariableOutputWithContext(context.Context) MatchVariableOutput
}

var matchVariablePtrType = reflect.TypeOf((**MatchVariable)(nil)).Elem()

type MatchVariablePtrInput interface {
	pulumi.Input

	ToMatchVariablePtrOutput() MatchVariablePtrOutput
	ToMatchVariablePtrOutputWithContext(context.Context) MatchVariablePtrOutput
}

type matchVariablePtr string

func MatchVariablePtr(v string) MatchVariablePtrInput {
	return (*matchVariablePtr)(&v)
}

func (*matchVariablePtr) ElementType() reflect.Type {
	return matchVariablePtrType
}

func (in *matchVariablePtr) ToMatchVariablePtrOutput() MatchVariablePtrOutput {
	return pulumi.ToOutput(in).(MatchVariablePtrOutput)
}

func (in *matchVariablePtr) ToMatchVariablePtrOutputWithContext(ctx context.Context) MatchVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MatchVariablePtrOutput)
}

// Describes operator to be matched
type Operator string

const (
	OperatorAny                = Operator("Any")
	OperatorIPMatch            = Operator("IPMatch")
	OperatorGeoMatch           = Operator("GeoMatch")
	OperatorEqual              = Operator("Equal")
	OperatorContains           = Operator("Contains")
	OperatorLessThan           = Operator("LessThan")
	OperatorGreaterThan        = Operator("GreaterThan")
	OperatorLessThanOrEqual    = Operator("LessThanOrEqual")
	OperatorGreaterThanOrEqual = Operator("GreaterThanOrEqual")
	OperatorBeginsWith         = Operator("BeginsWith")
	OperatorEndsWith           = Operator("EndsWith")
	OperatorRegEx              = Operator("RegEx")
)

func (Operator) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (e Operator) ToOperatorOutput() OperatorOutput {
	return pulumi.ToOutput(e).(OperatorOutput)
}

func (e Operator) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorOutput)
}

func (e Operator) ToOperatorPtrOutput() OperatorPtrOutput {
	return e.ToOperatorPtrOutputWithContext(context.Background())
}

func (e Operator) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return Operator(e).ToOperatorOutputWithContext(ctx).ToOperatorPtrOutputWithContext(ctx)
}

func (e Operator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Operator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorOutput struct{ *pulumi.OutputState }

func (OperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (o OperatorOutput) ToOperatorOutput() OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o.ToOperatorPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Operator) *Operator {
		return &v
	}).(OperatorPtrOutput)
}

func (o OperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorPtrOutput struct{ *pulumi.OutputState }

func (OperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Operator)(nil)).Elem()
}

func (o OperatorPtrOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) Elem() OperatorOutput {
	return o.ApplyT(func(v *Operator) Operator {
		if v != nil {
			return *v
		}
		var ret Operator
		return ret
	}).(OperatorOutput)
}

func (o OperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Operator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatorInput is an input type that accepts OperatorArgs and OperatorOutput values.
// You can construct a concrete instance of `OperatorInput` via:
//
//          OperatorArgs{...}
type OperatorInput interface {
	pulumi.Input

	ToOperatorOutput() OperatorOutput
	ToOperatorOutputWithContext(context.Context) OperatorOutput
}

var operatorPtrType = reflect.TypeOf((**Operator)(nil)).Elem()

type OperatorPtrInput interface {
	pulumi.Input

	ToOperatorPtrOutput() OperatorPtrOutput
	ToOperatorPtrOutputWithContext(context.Context) OperatorPtrOutput
}

type operatorPtr string

func OperatorPtr(v string) OperatorPtrInput {
	return (*operatorPtr)(&v)
}

func (*operatorPtr) ElementType() reflect.Type {
	return operatorPtrType
}

func (in *operatorPtr) ToOperatorPtrOutput() OperatorPtrOutput {
	return pulumi.ToOutput(in).(OperatorPtrOutput)
}

func (in *operatorPtr) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorPtrOutput)
}

// Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
type OptimizationType string

const (
	OptimizationTypeGeneralWebDelivery          = OptimizationType("GeneralWebDelivery")
	OptimizationTypeGeneralMediaStreaming       = OptimizationType("GeneralMediaStreaming")
	OptimizationTypeVideoOnDemandMediaStreaming = OptimizationType("VideoOnDemandMediaStreaming")
	OptimizationTypeLargeFileDownload           = OptimizationType("LargeFileDownload")
	OptimizationTypeDynamicSiteAcceleration     = OptimizationType("DynamicSiteAcceleration")
)

func (OptimizationType) ElementType() reflect.Type {
	return reflect.TypeOf((*OptimizationType)(nil)).Elem()
}

func (e OptimizationType) ToOptimizationTypeOutput() OptimizationTypeOutput {
	return pulumi.ToOutput(e).(OptimizationTypeOutput)
}

func (e OptimizationType) ToOptimizationTypeOutputWithContext(ctx context.Context) OptimizationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OptimizationTypeOutput)
}

func (e OptimizationType) ToOptimizationTypePtrOutput() OptimizationTypePtrOutput {
	return e.ToOptimizationTypePtrOutputWithContext(context.Background())
}

func (e OptimizationType) ToOptimizationTypePtrOutputWithContext(ctx context.Context) OptimizationTypePtrOutput {
	return OptimizationType(e).ToOptimizationTypeOutputWithContext(ctx).ToOptimizationTypePtrOutputWithContext(ctx)
}

func (e OptimizationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OptimizationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OptimizationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OptimizationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OptimizationTypeOutput struct{ *pulumi.OutputState }

func (OptimizationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptimizationType)(nil)).Elem()
}

func (o OptimizationTypeOutput) ToOptimizationTypeOutput() OptimizationTypeOutput {
	return o
}

func (o OptimizationTypeOutput) ToOptimizationTypeOutputWithContext(ctx context.Context) OptimizationTypeOutput {
	return o
}

func (o OptimizationTypeOutput) ToOptimizationTypePtrOutput() OptimizationTypePtrOutput {
	return o.ToOptimizationTypePtrOutputWithContext(context.Background())
}

func (o OptimizationTypeOutput) ToOptimizationTypePtrOutputWithContext(ctx context.Context) OptimizationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OptimizationType) *OptimizationType {
		return &v
	}).(OptimizationTypePtrOutput)
}

func (o OptimizationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OptimizationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OptimizationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OptimizationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OptimizationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OptimizationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OptimizationTypePtrOutput struct{ *pulumi.OutputState }

func (OptimizationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptimizationType)(nil)).Elem()
}

func (o OptimizationTypePtrOutput) ToOptimizationTypePtrOutput() OptimizationTypePtrOutput {
	return o
}

func (o OptimizationTypePtrOutput) ToOptimizationTypePtrOutputWithContext(ctx context.Context) OptimizationTypePtrOutput {
	return o
}

func (o OptimizationTypePtrOutput) Elem() OptimizationTypeOutput {
	return o.ApplyT(func(v *OptimizationType) OptimizationType {
		if v != nil {
			return *v
		}
		var ret OptimizationType
		return ret
	}).(OptimizationTypeOutput)
}

func (o OptimizationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OptimizationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OptimizationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OptimizationTypeInput is an input type that accepts OptimizationTypeArgs and OptimizationTypeOutput values.
// You can construct a concrete instance of `OptimizationTypeInput` via:
//
//          OptimizationTypeArgs{...}
type OptimizationTypeInput interface {
	pulumi.Input

	ToOptimizationTypeOutput() OptimizationTypeOutput
	ToOptimizationTypeOutputWithContext(context.Context) OptimizationTypeOutput
}

var optimizationTypePtrType = reflect.TypeOf((**OptimizationType)(nil)).Elem()

type OptimizationTypePtrInput interface {
	pulumi.Input

	ToOptimizationTypePtrOutput() OptimizationTypePtrOutput
	ToOptimizationTypePtrOutputWithContext(context.Context) OptimizationTypePtrOutput
}

type optimizationTypePtr string

func OptimizationTypePtr(v string) OptimizationTypePtrInput {
	return (*optimizationTypePtr)(&v)
}

func (*optimizationTypePtr) ElementType() reflect.Type {
	return optimizationTypePtrType
}

func (in *optimizationTypePtr) ToOptimizationTypePtrOutput() OptimizationTypePtrOutput {
	return pulumi.ToOutput(in).(OptimizationTypePtrOutput)
}

func (in *optimizationTypePtr) ToOptimizationTypePtrOutputWithContext(ctx context.Context) OptimizationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OptimizationTypePtrOutput)
}

// Indicates the purpose of the parameter
type ParamIndicator string

const (
	ParamIndicatorExpires   = ParamIndicator("Expires")
	ParamIndicatorKeyId     = ParamIndicator("KeyId")
	ParamIndicatorSignature = ParamIndicator("Signature")
)

func (ParamIndicator) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamIndicator)(nil)).Elem()
}

func (e ParamIndicator) ToParamIndicatorOutput() ParamIndicatorOutput {
	return pulumi.ToOutput(e).(ParamIndicatorOutput)
}

func (e ParamIndicator) ToParamIndicatorOutputWithContext(ctx context.Context) ParamIndicatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ParamIndicatorOutput)
}

func (e ParamIndicator) ToParamIndicatorPtrOutput() ParamIndicatorPtrOutput {
	return e.ToParamIndicatorPtrOutputWithContext(context.Background())
}

func (e ParamIndicator) ToParamIndicatorPtrOutputWithContext(ctx context.Context) ParamIndicatorPtrOutput {
	return ParamIndicator(e).ToParamIndicatorOutputWithContext(ctx).ToParamIndicatorPtrOutputWithContext(ctx)
}

func (e ParamIndicator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ParamIndicator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ParamIndicator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ParamIndicator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ParamIndicatorOutput struct{ *pulumi.OutputState }

func (ParamIndicatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamIndicator)(nil)).Elem()
}

func (o ParamIndicatorOutput) ToParamIndicatorOutput() ParamIndicatorOutput {
	return o
}

func (o ParamIndicatorOutput) ToParamIndicatorOutputWithContext(ctx context.Context) ParamIndicatorOutput {
	return o
}

func (o ParamIndicatorOutput) ToParamIndicatorPtrOutput() ParamIndicatorPtrOutput {
	return o.ToParamIndicatorPtrOutputWithContext(context.Background())
}

func (o ParamIndicatorOutput) ToParamIndicatorPtrOutputWithContext(ctx context.Context) ParamIndicatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParamIndicator) *ParamIndicator {
		return &v
	}).(ParamIndicatorPtrOutput)
}

func (o ParamIndicatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ParamIndicatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ParamIndicator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ParamIndicatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ParamIndicatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ParamIndicator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ParamIndicatorPtrOutput struct{ *pulumi.OutputState }

func (ParamIndicatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamIndicator)(nil)).Elem()
}

func (o ParamIndicatorPtrOutput) ToParamIndicatorPtrOutput() ParamIndicatorPtrOutput {
	return o
}

func (o ParamIndicatorPtrOutput) ToParamIndicatorPtrOutputWithContext(ctx context.Context) ParamIndicatorPtrOutput {
	return o
}

func (o ParamIndicatorPtrOutput) Elem() ParamIndicatorOutput {
	return o.ApplyT(func(v *ParamIndicator) ParamIndicator {
		if v != nil {
			return *v
		}
		var ret ParamIndicator
		return ret
	}).(ParamIndicatorOutput)
}

func (o ParamIndicatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ParamIndicatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ParamIndicator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ParamIndicatorInput is an input type that accepts ParamIndicatorArgs and ParamIndicatorOutput values.
// You can construct a concrete instance of `ParamIndicatorInput` via:
//
//          ParamIndicatorArgs{...}
type ParamIndicatorInput interface {
	pulumi.Input

	ToParamIndicatorOutput() ParamIndicatorOutput
	ToParamIndicatorOutputWithContext(context.Context) ParamIndicatorOutput
}

var paramIndicatorPtrType = reflect.TypeOf((**ParamIndicator)(nil)).Elem()

type ParamIndicatorPtrInput interface {
	pulumi.Input

	ToParamIndicatorPtrOutput() ParamIndicatorPtrOutput
	ToParamIndicatorPtrOutputWithContext(context.Context) ParamIndicatorPtrOutput
}

type paramIndicatorPtr string

func ParamIndicatorPtr(v string) ParamIndicatorPtrInput {
	return (*paramIndicatorPtr)(&v)
}

func (*paramIndicatorPtr) ElementType() reflect.Type {
	return paramIndicatorPtrType
}

func (in *paramIndicatorPtr) ToParamIndicatorPtrOutput() ParamIndicatorPtrOutput {
	return pulumi.ToOutput(in).(ParamIndicatorPtrOutput)
}

func (in *paramIndicatorPtr) ToParamIndicatorPtrOutputWithContext(ctx context.Context) ParamIndicatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ParamIndicatorPtrOutput)
}

// describes if the policy is in enabled state or disabled state
type PolicyEnabledState string

const (
	PolicyEnabledStateDisabled = PolicyEnabledState("Disabled")
	PolicyEnabledStateEnabled  = PolicyEnabledState("Enabled")
)

func (PolicyEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyEnabledState)(nil)).Elem()
}

func (e PolicyEnabledState) ToPolicyEnabledStateOutput() PolicyEnabledStateOutput {
	return pulumi.ToOutput(e).(PolicyEnabledStateOutput)
}

func (e PolicyEnabledState) ToPolicyEnabledStateOutputWithContext(ctx context.Context) PolicyEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyEnabledStateOutput)
}

func (e PolicyEnabledState) ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput {
	return e.ToPolicyEnabledStatePtrOutputWithContext(context.Background())
}

func (e PolicyEnabledState) ToPolicyEnabledStatePtrOutputWithContext(ctx context.Context) PolicyEnabledStatePtrOutput {
	return PolicyEnabledState(e).ToPolicyEnabledStateOutputWithContext(ctx).ToPolicyEnabledStatePtrOutputWithContext(ctx)
}

func (e PolicyEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyEnabledStateOutput struct{ *pulumi.OutputState }

func (PolicyEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyEnabledState)(nil)).Elem()
}

func (o PolicyEnabledStateOutput) ToPolicyEnabledStateOutput() PolicyEnabledStateOutput {
	return o
}

func (o PolicyEnabledStateOutput) ToPolicyEnabledStateOutputWithContext(ctx context.Context) PolicyEnabledStateOutput {
	return o
}

func (o PolicyEnabledStateOutput) ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput {
	return o.ToPolicyEnabledStatePtrOutputWithContext(context.Background())
}

func (o PolicyEnabledStateOutput) ToPolicyEnabledStatePtrOutputWithContext(ctx context.Context) PolicyEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyEnabledState) *PolicyEnabledState {
		return &v
	}).(PolicyEnabledStatePtrOutput)
}

func (o PolicyEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (PolicyEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyEnabledState)(nil)).Elem()
}

func (o PolicyEnabledStatePtrOutput) ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput {
	return o
}

func (o PolicyEnabledStatePtrOutput) ToPolicyEnabledStatePtrOutputWithContext(ctx context.Context) PolicyEnabledStatePtrOutput {
	return o
}

func (o PolicyEnabledStatePtrOutput) Elem() PolicyEnabledStateOutput {
	return o.ApplyT(func(v *PolicyEnabledState) PolicyEnabledState {
		if v != nil {
			return *v
		}
		var ret PolicyEnabledState
		return ret
	}).(PolicyEnabledStateOutput)
}

func (o PolicyEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyEnabledStateInput is an input type that accepts PolicyEnabledStateArgs and PolicyEnabledStateOutput values.
// You can construct a concrete instance of `PolicyEnabledStateInput` via:
//
//          PolicyEnabledStateArgs{...}
type PolicyEnabledStateInput interface {
	pulumi.Input

	ToPolicyEnabledStateOutput() PolicyEnabledStateOutput
	ToPolicyEnabledStateOutputWithContext(context.Context) PolicyEnabledStateOutput
}

var policyEnabledStatePtrType = reflect.TypeOf((**PolicyEnabledState)(nil)).Elem()

type PolicyEnabledStatePtrInput interface {
	pulumi.Input

	ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput
	ToPolicyEnabledStatePtrOutputWithContext(context.Context) PolicyEnabledStatePtrOutput
}

type policyEnabledStatePtr string

func PolicyEnabledStatePtr(v string) PolicyEnabledStatePtrInput {
	return (*policyEnabledStatePtr)(&v)
}

func (*policyEnabledStatePtr) ElementType() reflect.Type {
	return policyEnabledStatePtrType
}

func (in *policyEnabledStatePtr) ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(PolicyEnabledStatePtrOutput)
}

func (in *policyEnabledStatePtr) ToPolicyEnabledStatePtrOutputWithContext(ctx context.Context) PolicyEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyEnabledStatePtrOutput)
}

// Describes if it is in detection mode or prevention mode at policy level.
type PolicyMode string

const (
	PolicyModePrevention = PolicyMode("Prevention")
	PolicyModeDetection  = PolicyMode("Detection")
)

func (PolicyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyMode)(nil)).Elem()
}

func (e PolicyMode) ToPolicyModeOutput() PolicyModeOutput {
	return pulumi.ToOutput(e).(PolicyModeOutput)
}

func (e PolicyMode) ToPolicyModeOutputWithContext(ctx context.Context) PolicyModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyModeOutput)
}

func (e PolicyMode) ToPolicyModePtrOutput() PolicyModePtrOutput {
	return e.ToPolicyModePtrOutputWithContext(context.Background())
}

func (e PolicyMode) ToPolicyModePtrOutputWithContext(ctx context.Context) PolicyModePtrOutput {
	return PolicyMode(e).ToPolicyModeOutputWithContext(ctx).ToPolicyModePtrOutputWithContext(ctx)
}

func (e PolicyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyModeOutput struct{ *pulumi.OutputState }

func (PolicyModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyMode)(nil)).Elem()
}

func (o PolicyModeOutput) ToPolicyModeOutput() PolicyModeOutput {
	return o
}

func (o PolicyModeOutput) ToPolicyModeOutputWithContext(ctx context.Context) PolicyModeOutput {
	return o
}

func (o PolicyModeOutput) ToPolicyModePtrOutput() PolicyModePtrOutput {
	return o.ToPolicyModePtrOutputWithContext(context.Background())
}

func (o PolicyModeOutput) ToPolicyModePtrOutputWithContext(ctx context.Context) PolicyModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyMode) *PolicyMode {
		return &v
	}).(PolicyModePtrOutput)
}

func (o PolicyModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyModePtrOutput struct{ *pulumi.OutputState }

func (PolicyModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyMode)(nil)).Elem()
}

func (o PolicyModePtrOutput) ToPolicyModePtrOutput() PolicyModePtrOutput {
	return o
}

func (o PolicyModePtrOutput) ToPolicyModePtrOutputWithContext(ctx context.Context) PolicyModePtrOutput {
	return o
}

func (o PolicyModePtrOutput) Elem() PolicyModeOutput {
	return o.ApplyT(func(v *PolicyMode) PolicyMode {
		if v != nil {
			return *v
		}
		var ret PolicyMode
		return ret
	}).(PolicyModeOutput)
}

func (o PolicyModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyModeInput is an input type that accepts PolicyModeArgs and PolicyModeOutput values.
// You can construct a concrete instance of `PolicyModeInput` via:
//
//          PolicyModeArgs{...}
type PolicyModeInput interface {
	pulumi.Input

	ToPolicyModeOutput() PolicyModeOutput
	ToPolicyModeOutputWithContext(context.Context) PolicyModeOutput
}

var policyModePtrType = reflect.TypeOf((**PolicyMode)(nil)).Elem()

type PolicyModePtrInput interface {
	pulumi.Input

	ToPolicyModePtrOutput() PolicyModePtrOutput
	ToPolicyModePtrOutputWithContext(context.Context) PolicyModePtrOutput
}

type policyModePtr string

func PolicyModePtr(v string) PolicyModePtrInput {
	return (*policyModePtr)(&v)
}

func (*policyModePtr) ElementType() reflect.Type {
	return policyModePtrType
}

func (in *policyModePtr) ToPolicyModePtrOutput() PolicyModePtrOutput {
	return pulumi.ToOutput(in).(PolicyModePtrOutput)
}

func (in *policyModePtr) ToPolicyModePtrOutputWithContext(ctx context.Context) PolicyModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyModePtrOutput)
}

// Describes operator to be matched
type PostArgsOperator string

const (
	PostArgsOperatorAny                = PostArgsOperator("Any")
	PostArgsOperatorEqual              = PostArgsOperator("Equal")
	PostArgsOperatorContains           = PostArgsOperator("Contains")
	PostArgsOperatorBeginsWith         = PostArgsOperator("BeginsWith")
	PostArgsOperatorEndsWith           = PostArgsOperator("EndsWith")
	PostArgsOperatorLessThan           = PostArgsOperator("LessThan")
	PostArgsOperatorLessThanOrEqual    = PostArgsOperator("LessThanOrEqual")
	PostArgsOperatorGreaterThan        = PostArgsOperator("GreaterThan")
	PostArgsOperatorGreaterThanOrEqual = PostArgsOperator("GreaterThanOrEqual")
)

func (PostArgsOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*PostArgsOperator)(nil)).Elem()
}

func (e PostArgsOperator) ToPostArgsOperatorOutput() PostArgsOperatorOutput {
	return pulumi.ToOutput(e).(PostArgsOperatorOutput)
}

func (e PostArgsOperator) ToPostArgsOperatorOutputWithContext(ctx context.Context) PostArgsOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PostArgsOperatorOutput)
}

func (e PostArgsOperator) ToPostArgsOperatorPtrOutput() PostArgsOperatorPtrOutput {
	return e.ToPostArgsOperatorPtrOutputWithContext(context.Background())
}

func (e PostArgsOperator) ToPostArgsOperatorPtrOutputWithContext(ctx context.Context) PostArgsOperatorPtrOutput {
	return PostArgsOperator(e).ToPostArgsOperatorOutputWithContext(ctx).ToPostArgsOperatorPtrOutputWithContext(ctx)
}

func (e PostArgsOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PostArgsOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PostArgsOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PostArgsOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PostArgsOperatorOutput struct{ *pulumi.OutputState }

func (PostArgsOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostArgsOperator)(nil)).Elem()
}

func (o PostArgsOperatorOutput) ToPostArgsOperatorOutput() PostArgsOperatorOutput {
	return o
}

func (o PostArgsOperatorOutput) ToPostArgsOperatorOutputWithContext(ctx context.Context) PostArgsOperatorOutput {
	return o
}

func (o PostArgsOperatorOutput) ToPostArgsOperatorPtrOutput() PostArgsOperatorPtrOutput {
	return o.ToPostArgsOperatorPtrOutputWithContext(context.Background())
}

func (o PostArgsOperatorOutput) ToPostArgsOperatorPtrOutputWithContext(ctx context.Context) PostArgsOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostArgsOperator) *PostArgsOperator {
		return &v
	}).(PostArgsOperatorPtrOutput)
}

func (o PostArgsOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostArgsOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostArgsOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostArgsOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostArgsOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostArgsOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostArgsOperatorPtrOutput struct{ *pulumi.OutputState }

func (PostArgsOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostArgsOperator)(nil)).Elem()
}

func (o PostArgsOperatorPtrOutput) ToPostArgsOperatorPtrOutput() PostArgsOperatorPtrOutput {
	return o
}

func (o PostArgsOperatorPtrOutput) ToPostArgsOperatorPtrOutputWithContext(ctx context.Context) PostArgsOperatorPtrOutput {
	return o
}

func (o PostArgsOperatorPtrOutput) Elem() PostArgsOperatorOutput {
	return o.ApplyT(func(v *PostArgsOperator) PostArgsOperator {
		if v != nil {
			return *v
		}
		var ret PostArgsOperator
		return ret
	}).(PostArgsOperatorOutput)
}

func (o PostArgsOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostArgsOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostArgsOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PostArgsOperatorInput is an input type that accepts PostArgsOperatorArgs and PostArgsOperatorOutput values.
// You can construct a concrete instance of `PostArgsOperatorInput` via:
//
//          PostArgsOperatorArgs{...}
type PostArgsOperatorInput interface {
	pulumi.Input

	ToPostArgsOperatorOutput() PostArgsOperatorOutput
	ToPostArgsOperatorOutputWithContext(context.Context) PostArgsOperatorOutput
}

var postArgsOperatorPtrType = reflect.TypeOf((**PostArgsOperator)(nil)).Elem()

type PostArgsOperatorPtrInput interface {
	pulumi.Input

	ToPostArgsOperatorPtrOutput() PostArgsOperatorPtrOutput
	ToPostArgsOperatorPtrOutputWithContext(context.Context) PostArgsOperatorPtrOutput
}

type postArgsOperatorPtr string

func PostArgsOperatorPtr(v string) PostArgsOperatorPtrInput {
	return (*postArgsOperatorPtr)(&v)
}

func (*postArgsOperatorPtr) ElementType() reflect.Type {
	return postArgsOperatorPtrType
}

func (in *postArgsOperatorPtr) ToPostArgsOperatorPtrOutput() PostArgsOperatorPtrOutput {
	return pulumi.ToOutput(in).(PostArgsOperatorPtrOutput)
}

func (in *postArgsOperatorPtr) ToPostArgsOperatorPtrOutputWithContext(ctx context.Context) PostArgsOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PostArgsOperatorPtrOutput)
}

// Protocol to use for health probe.
type ProbeProtocol string

const (
	ProbeProtocolNotSet = ProbeProtocol("NotSet")
	ProbeProtocolHttp   = ProbeProtocol("Http")
	ProbeProtocolHttps  = ProbeProtocol("Https")
)

func (ProbeProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeProtocol)(nil)).Elem()
}

func (e ProbeProtocol) ToProbeProtocolOutput() ProbeProtocolOutput {
	return pulumi.ToOutput(e).(ProbeProtocolOutput)
}

func (e ProbeProtocol) ToProbeProtocolOutputWithContext(ctx context.Context) ProbeProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProbeProtocolOutput)
}

func (e ProbeProtocol) ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput {
	return e.ToProbeProtocolPtrOutputWithContext(context.Background())
}

func (e ProbeProtocol) ToProbeProtocolPtrOutputWithContext(ctx context.Context) ProbeProtocolPtrOutput {
	return ProbeProtocol(e).ToProbeProtocolOutputWithContext(ctx).ToProbeProtocolPtrOutputWithContext(ctx)
}

func (e ProbeProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProbeProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProbeProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProbeProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProbeProtocolOutput struct{ *pulumi.OutputState }

func (ProbeProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeProtocol)(nil)).Elem()
}

func (o ProbeProtocolOutput) ToProbeProtocolOutput() ProbeProtocolOutput {
	return o
}

func (o ProbeProtocolOutput) ToProbeProtocolOutputWithContext(ctx context.Context) ProbeProtocolOutput {
	return o
}

func (o ProbeProtocolOutput) ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput {
	return o.ToProbeProtocolPtrOutputWithContext(context.Background())
}

func (o ProbeProtocolOutput) ToProbeProtocolPtrOutputWithContext(ctx context.Context) ProbeProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProbeProtocol) *ProbeProtocol {
		return &v
	}).(ProbeProtocolPtrOutput)
}

func (o ProbeProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProbeProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProbeProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProbeProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProbeProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProbeProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProbeProtocolPtrOutput struct{ *pulumi.OutputState }

func (ProbeProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeProtocol)(nil)).Elem()
}

func (o ProbeProtocolPtrOutput) ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput {
	return o
}

func (o ProbeProtocolPtrOutput) ToProbeProtocolPtrOutputWithContext(ctx context.Context) ProbeProtocolPtrOutput {
	return o
}

func (o ProbeProtocolPtrOutput) Elem() ProbeProtocolOutput {
	return o.ApplyT(func(v *ProbeProtocol) ProbeProtocol {
		if v != nil {
			return *v
		}
		var ret ProbeProtocol
		return ret
	}).(ProbeProtocolOutput)
}

func (o ProbeProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProbeProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProbeProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProbeProtocolInput is an input type that accepts ProbeProtocolArgs and ProbeProtocolOutput values.
// You can construct a concrete instance of `ProbeProtocolInput` via:
//
//          ProbeProtocolArgs{...}
type ProbeProtocolInput interface {
	pulumi.Input

	ToProbeProtocolOutput() ProbeProtocolOutput
	ToProbeProtocolOutputWithContext(context.Context) ProbeProtocolOutput
}

var probeProtocolPtrType = reflect.TypeOf((**ProbeProtocol)(nil)).Elem()

type ProbeProtocolPtrInput interface {
	pulumi.Input

	ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput
	ToProbeProtocolPtrOutputWithContext(context.Context) ProbeProtocolPtrOutput
}

type probeProtocolPtr string

func ProbeProtocolPtr(v string) ProbeProtocolPtrInput {
	return (*probeProtocolPtr)(&v)
}

func (*probeProtocolPtr) ElementType() reflect.Type {
	return probeProtocolPtrType
}

func (in *probeProtocolPtr) ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput {
	return pulumi.ToOutput(in).(ProbeProtocolPtrOutput)
}

func (in *probeProtocolPtr) ToProbeProtocolPtrOutputWithContext(ctx context.Context) ProbeProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProbeProtocolPtrOutput)
}

// Caching behavior for the requests
type QueryStringBehavior string

const (
	QueryStringBehaviorInclude    = QueryStringBehavior("Include")
	QueryStringBehaviorIncludeAll = QueryStringBehavior("IncludeAll")
	QueryStringBehaviorExclude    = QueryStringBehavior("Exclude")
	QueryStringBehaviorExcludeAll = QueryStringBehavior("ExcludeAll")
)

func (QueryStringBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryStringBehavior)(nil)).Elem()
}

func (e QueryStringBehavior) ToQueryStringBehaviorOutput() QueryStringBehaviorOutput {
	return pulumi.ToOutput(e).(QueryStringBehaviorOutput)
}

func (e QueryStringBehavior) ToQueryStringBehaviorOutputWithContext(ctx context.Context) QueryStringBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(QueryStringBehaviorOutput)
}

func (e QueryStringBehavior) ToQueryStringBehaviorPtrOutput() QueryStringBehaviorPtrOutput {
	return e.ToQueryStringBehaviorPtrOutputWithContext(context.Background())
}

func (e QueryStringBehavior) ToQueryStringBehaviorPtrOutputWithContext(ctx context.Context) QueryStringBehaviorPtrOutput {
	return QueryStringBehavior(e).ToQueryStringBehaviorOutputWithContext(ctx).ToQueryStringBehaviorPtrOutputWithContext(ctx)
}

func (e QueryStringBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e QueryStringBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type QueryStringBehaviorOutput struct{ *pulumi.OutputState }

func (QueryStringBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryStringBehavior)(nil)).Elem()
}

func (o QueryStringBehaviorOutput) ToQueryStringBehaviorOutput() QueryStringBehaviorOutput {
	return o
}

func (o QueryStringBehaviorOutput) ToQueryStringBehaviorOutputWithContext(ctx context.Context) QueryStringBehaviorOutput {
	return o
}

func (o QueryStringBehaviorOutput) ToQueryStringBehaviorPtrOutput() QueryStringBehaviorPtrOutput {
	return o.ToQueryStringBehaviorPtrOutputWithContext(context.Background())
}

func (o QueryStringBehaviorOutput) ToQueryStringBehaviorPtrOutputWithContext(ctx context.Context) QueryStringBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryStringBehavior) *QueryStringBehavior {
		return &v
	}).(QueryStringBehaviorPtrOutput)
}

func (o QueryStringBehaviorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o QueryStringBehaviorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryStringBehavior) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o QueryStringBehaviorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryStringBehaviorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryStringBehavior) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type QueryStringBehaviorPtrOutput struct{ *pulumi.OutputState }

func (QueryStringBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryStringBehavior)(nil)).Elem()
}

func (o QueryStringBehaviorPtrOutput) ToQueryStringBehaviorPtrOutput() QueryStringBehaviorPtrOutput {
	return o
}

func (o QueryStringBehaviorPtrOutput) ToQueryStringBehaviorPtrOutputWithContext(ctx context.Context) QueryStringBehaviorPtrOutput {
	return o
}

func (o QueryStringBehaviorPtrOutput) Elem() QueryStringBehaviorOutput {
	return o.ApplyT(func(v *QueryStringBehavior) QueryStringBehavior {
		if v != nil {
			return *v
		}
		var ret QueryStringBehavior
		return ret
	}).(QueryStringBehaviorOutput)
}

func (o QueryStringBehaviorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryStringBehaviorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *QueryStringBehavior) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// QueryStringBehaviorInput is an input type that accepts QueryStringBehaviorArgs and QueryStringBehaviorOutput values.
// You can construct a concrete instance of `QueryStringBehaviorInput` via:
//
//          QueryStringBehaviorArgs{...}
type QueryStringBehaviorInput interface {
	pulumi.Input

	ToQueryStringBehaviorOutput() QueryStringBehaviorOutput
	ToQueryStringBehaviorOutputWithContext(context.Context) QueryStringBehaviorOutput
}

var queryStringBehaviorPtrType = reflect.TypeOf((**QueryStringBehavior)(nil)).Elem()

type QueryStringBehaviorPtrInput interface {
	pulumi.Input

	ToQueryStringBehaviorPtrOutput() QueryStringBehaviorPtrOutput
	ToQueryStringBehaviorPtrOutputWithContext(context.Context) QueryStringBehaviorPtrOutput
}

type queryStringBehaviorPtr string

func QueryStringBehaviorPtr(v string) QueryStringBehaviorPtrInput {
	return (*queryStringBehaviorPtr)(&v)
}

func (*queryStringBehaviorPtr) ElementType() reflect.Type {
	return queryStringBehaviorPtrType
}

func (in *queryStringBehaviorPtr) ToQueryStringBehaviorPtrOutput() QueryStringBehaviorPtrOutput {
	return pulumi.ToOutput(in).(QueryStringBehaviorPtrOutput)
}

func (in *queryStringBehaviorPtr) ToQueryStringBehaviorPtrOutputWithContext(ctx context.Context) QueryStringBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(QueryStringBehaviorPtrOutput)
}

// Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
type QueryStringCachingBehavior string

const (
	QueryStringCachingBehaviorIgnoreQueryString = QueryStringCachingBehavior("IgnoreQueryString")
	QueryStringCachingBehaviorBypassCaching     = QueryStringCachingBehavior("BypassCaching")
	QueryStringCachingBehaviorUseQueryString    = QueryStringCachingBehavior("UseQueryString")
	QueryStringCachingBehaviorNotSet            = QueryStringCachingBehavior("NotSet")
)

func (QueryStringCachingBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryStringCachingBehavior)(nil)).Elem()
}

func (e QueryStringCachingBehavior) ToQueryStringCachingBehaviorOutput() QueryStringCachingBehaviorOutput {
	return pulumi.ToOutput(e).(QueryStringCachingBehaviorOutput)
}

func (e QueryStringCachingBehavior) ToQueryStringCachingBehaviorOutputWithContext(ctx context.Context) QueryStringCachingBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(QueryStringCachingBehaviorOutput)
}

func (e QueryStringCachingBehavior) ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput {
	return e.ToQueryStringCachingBehaviorPtrOutputWithContext(context.Background())
}

func (e QueryStringCachingBehavior) ToQueryStringCachingBehaviorPtrOutputWithContext(ctx context.Context) QueryStringCachingBehaviorPtrOutput {
	return QueryStringCachingBehavior(e).ToQueryStringCachingBehaviorOutputWithContext(ctx).ToQueryStringCachingBehaviorPtrOutputWithContext(ctx)
}

func (e QueryStringCachingBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringCachingBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringCachingBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e QueryStringCachingBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type QueryStringCachingBehaviorOutput struct{ *pulumi.OutputState }

func (QueryStringCachingBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryStringCachingBehavior)(nil)).Elem()
}

func (o QueryStringCachingBehaviorOutput) ToQueryStringCachingBehaviorOutput() QueryStringCachingBehaviorOutput {
	return o
}

func (o QueryStringCachingBehaviorOutput) ToQueryStringCachingBehaviorOutputWithContext(ctx context.Context) QueryStringCachingBehaviorOutput {
	return o
}

func (o QueryStringCachingBehaviorOutput) ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput {
	return o.ToQueryStringCachingBehaviorPtrOutputWithContext(context.Background())
}

func (o QueryStringCachingBehaviorOutput) ToQueryStringCachingBehaviorPtrOutputWithContext(ctx context.Context) QueryStringCachingBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryStringCachingBehavior) *QueryStringCachingBehavior {
		return &v
	}).(QueryStringCachingBehaviorPtrOutput)
}

func (o QueryStringCachingBehaviorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o QueryStringCachingBehaviorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryStringCachingBehavior) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o QueryStringCachingBehaviorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryStringCachingBehaviorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryStringCachingBehavior) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type QueryStringCachingBehaviorPtrOutput struct{ *pulumi.OutputState }

func (QueryStringCachingBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryStringCachingBehavior)(nil)).Elem()
}

func (o QueryStringCachingBehaviorPtrOutput) ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput {
	return o
}

func (o QueryStringCachingBehaviorPtrOutput) ToQueryStringCachingBehaviorPtrOutputWithContext(ctx context.Context) QueryStringCachingBehaviorPtrOutput {
	return o
}

func (o QueryStringCachingBehaviorPtrOutput) Elem() QueryStringCachingBehaviorOutput {
	return o.ApplyT(func(v *QueryStringCachingBehavior) QueryStringCachingBehavior {
		if v != nil {
			return *v
		}
		var ret QueryStringCachingBehavior
		return ret
	}).(QueryStringCachingBehaviorOutput)
}

func (o QueryStringCachingBehaviorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryStringCachingBehaviorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *QueryStringCachingBehavior) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// QueryStringCachingBehaviorInput is an input type that accepts QueryStringCachingBehaviorArgs and QueryStringCachingBehaviorOutput values.
// You can construct a concrete instance of `QueryStringCachingBehaviorInput` via:
//
//          QueryStringCachingBehaviorArgs{...}
type QueryStringCachingBehaviorInput interface {
	pulumi.Input

	ToQueryStringCachingBehaviorOutput() QueryStringCachingBehaviorOutput
	ToQueryStringCachingBehaviorOutputWithContext(context.Context) QueryStringCachingBehaviorOutput
}

var queryStringCachingBehaviorPtrType = reflect.TypeOf((**QueryStringCachingBehavior)(nil)).Elem()

type QueryStringCachingBehaviorPtrInput interface {
	pulumi.Input

	ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput
	ToQueryStringCachingBehaviorPtrOutputWithContext(context.Context) QueryStringCachingBehaviorPtrOutput
}

type queryStringCachingBehaviorPtr string

func QueryStringCachingBehaviorPtr(v string) QueryStringCachingBehaviorPtrInput {
	return (*queryStringCachingBehaviorPtr)(&v)
}

func (*queryStringCachingBehaviorPtr) ElementType() reflect.Type {
	return queryStringCachingBehaviorPtrType
}

func (in *queryStringCachingBehaviorPtr) ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput {
	return pulumi.ToOutput(in).(QueryStringCachingBehaviorPtrOutput)
}

func (in *queryStringCachingBehaviorPtr) ToQueryStringCachingBehaviorPtrOutputWithContext(ctx context.Context) QueryStringCachingBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(QueryStringCachingBehaviorPtrOutput)
}

// Describes operator to be matched
type QueryStringOperator string

const (
	QueryStringOperatorAny                = QueryStringOperator("Any")
	QueryStringOperatorEqual              = QueryStringOperator("Equal")
	QueryStringOperatorContains           = QueryStringOperator("Contains")
	QueryStringOperatorBeginsWith         = QueryStringOperator("BeginsWith")
	QueryStringOperatorEndsWith           = QueryStringOperator("EndsWith")
	QueryStringOperatorLessThan           = QueryStringOperator("LessThan")
	QueryStringOperatorLessThanOrEqual    = QueryStringOperator("LessThanOrEqual")
	QueryStringOperatorGreaterThan        = QueryStringOperator("GreaterThan")
	QueryStringOperatorGreaterThanOrEqual = QueryStringOperator("GreaterThanOrEqual")
)

func (QueryStringOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryStringOperator)(nil)).Elem()
}

func (e QueryStringOperator) ToQueryStringOperatorOutput() QueryStringOperatorOutput {
	return pulumi.ToOutput(e).(QueryStringOperatorOutput)
}

func (e QueryStringOperator) ToQueryStringOperatorOutputWithContext(ctx context.Context) QueryStringOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(QueryStringOperatorOutput)
}

func (e QueryStringOperator) ToQueryStringOperatorPtrOutput() QueryStringOperatorPtrOutput {
	return e.ToQueryStringOperatorPtrOutputWithContext(context.Background())
}

func (e QueryStringOperator) ToQueryStringOperatorPtrOutputWithContext(ctx context.Context) QueryStringOperatorPtrOutput {
	return QueryStringOperator(e).ToQueryStringOperatorOutputWithContext(ctx).ToQueryStringOperatorPtrOutputWithContext(ctx)
}

func (e QueryStringOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e QueryStringOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type QueryStringOperatorOutput struct{ *pulumi.OutputState }

func (QueryStringOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryStringOperator)(nil)).Elem()
}

func (o QueryStringOperatorOutput) ToQueryStringOperatorOutput() QueryStringOperatorOutput {
	return o
}

func (o QueryStringOperatorOutput) ToQueryStringOperatorOutputWithContext(ctx context.Context) QueryStringOperatorOutput {
	return o
}

func (o QueryStringOperatorOutput) ToQueryStringOperatorPtrOutput() QueryStringOperatorPtrOutput {
	return o.ToQueryStringOperatorPtrOutputWithContext(context.Background())
}

func (o QueryStringOperatorOutput) ToQueryStringOperatorPtrOutputWithContext(ctx context.Context) QueryStringOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryStringOperator) *QueryStringOperator {
		return &v
	}).(QueryStringOperatorPtrOutput)
}

func (o QueryStringOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o QueryStringOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryStringOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o QueryStringOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryStringOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryStringOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type QueryStringOperatorPtrOutput struct{ *pulumi.OutputState }

func (QueryStringOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryStringOperator)(nil)).Elem()
}

func (o QueryStringOperatorPtrOutput) ToQueryStringOperatorPtrOutput() QueryStringOperatorPtrOutput {
	return o
}

func (o QueryStringOperatorPtrOutput) ToQueryStringOperatorPtrOutputWithContext(ctx context.Context) QueryStringOperatorPtrOutput {
	return o
}

func (o QueryStringOperatorPtrOutput) Elem() QueryStringOperatorOutput {
	return o.ApplyT(func(v *QueryStringOperator) QueryStringOperator {
		if v != nil {
			return *v
		}
		var ret QueryStringOperator
		return ret
	}).(QueryStringOperatorOutput)
}

func (o QueryStringOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryStringOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *QueryStringOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// QueryStringOperatorInput is an input type that accepts QueryStringOperatorArgs and QueryStringOperatorOutput values.
// You can construct a concrete instance of `QueryStringOperatorInput` via:
//
//          QueryStringOperatorArgs{...}
type QueryStringOperatorInput interface {
	pulumi.Input

	ToQueryStringOperatorOutput() QueryStringOperatorOutput
	ToQueryStringOperatorOutputWithContext(context.Context) QueryStringOperatorOutput
}

var queryStringOperatorPtrType = reflect.TypeOf((**QueryStringOperator)(nil)).Elem()

type QueryStringOperatorPtrInput interface {
	pulumi.Input

	ToQueryStringOperatorPtrOutput() QueryStringOperatorPtrOutput
	ToQueryStringOperatorPtrOutputWithContext(context.Context) QueryStringOperatorPtrOutput
}

type queryStringOperatorPtr string

func QueryStringOperatorPtr(v string) QueryStringOperatorPtrInput {
	return (*queryStringOperatorPtr)(&v)
}

func (*queryStringOperatorPtr) ElementType() reflect.Type {
	return queryStringOperatorPtrType
}

func (in *queryStringOperatorPtr) ToQueryStringOperatorPtrOutput() QueryStringOperatorPtrOutput {
	return pulumi.ToOutput(in).(QueryStringOperatorPtrOutput)
}

func (in *queryStringOperatorPtr) ToQueryStringOperatorPtrOutputWithContext(ctx context.Context) QueryStringOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(QueryStringOperatorPtrOutput)
}

// The redirect type the rule will use when redirecting traffic.
type RedirectType string

const (
	RedirectTypeMoved             = RedirectType("Moved")
	RedirectTypeFound             = RedirectType("Found")
	RedirectTypeTemporaryRedirect = RedirectType("TemporaryRedirect")
	RedirectTypePermanentRedirect = RedirectType("PermanentRedirect")
)

func (RedirectType) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectType)(nil)).Elem()
}

func (e RedirectType) ToRedirectTypeOutput() RedirectTypeOutput {
	return pulumi.ToOutput(e).(RedirectTypeOutput)
}

func (e RedirectType) ToRedirectTypeOutputWithContext(ctx context.Context) RedirectTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RedirectTypeOutput)
}

func (e RedirectType) ToRedirectTypePtrOutput() RedirectTypePtrOutput {
	return e.ToRedirectTypePtrOutputWithContext(context.Background())
}

func (e RedirectType) ToRedirectTypePtrOutputWithContext(ctx context.Context) RedirectTypePtrOutput {
	return RedirectType(e).ToRedirectTypeOutputWithContext(ctx).ToRedirectTypePtrOutputWithContext(ctx)
}

func (e RedirectType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RedirectType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RedirectType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RedirectType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RedirectTypeOutput struct{ *pulumi.OutputState }

func (RedirectTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectType)(nil)).Elem()
}

func (o RedirectTypeOutput) ToRedirectTypeOutput() RedirectTypeOutput {
	return o
}

func (o RedirectTypeOutput) ToRedirectTypeOutputWithContext(ctx context.Context) RedirectTypeOutput {
	return o
}

func (o RedirectTypeOutput) ToRedirectTypePtrOutput() RedirectTypePtrOutput {
	return o.ToRedirectTypePtrOutputWithContext(context.Background())
}

func (o RedirectTypeOutput) ToRedirectTypePtrOutputWithContext(ctx context.Context) RedirectTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedirectType) *RedirectType {
		return &v
	}).(RedirectTypePtrOutput)
}

func (o RedirectTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RedirectTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RedirectType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RedirectTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RedirectTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RedirectType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RedirectTypePtrOutput struct{ *pulumi.OutputState }

func (RedirectTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedirectType)(nil)).Elem()
}

func (o RedirectTypePtrOutput) ToRedirectTypePtrOutput() RedirectTypePtrOutput {
	return o
}

func (o RedirectTypePtrOutput) ToRedirectTypePtrOutputWithContext(ctx context.Context) RedirectTypePtrOutput {
	return o
}

func (o RedirectTypePtrOutput) Elem() RedirectTypeOutput {
	return o.ApplyT(func(v *RedirectType) RedirectType {
		if v != nil {
			return *v
		}
		var ret RedirectType
		return ret
	}).(RedirectTypeOutput)
}

func (o RedirectTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RedirectTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RedirectType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RedirectTypeInput is an input type that accepts RedirectTypeArgs and RedirectTypeOutput values.
// You can construct a concrete instance of `RedirectTypeInput` via:
//
//          RedirectTypeArgs{...}
type RedirectTypeInput interface {
	pulumi.Input

	ToRedirectTypeOutput() RedirectTypeOutput
	ToRedirectTypeOutputWithContext(context.Context) RedirectTypeOutput
}

var redirectTypePtrType = reflect.TypeOf((**RedirectType)(nil)).Elem()

type RedirectTypePtrInput interface {
	pulumi.Input

	ToRedirectTypePtrOutput() RedirectTypePtrOutput
	ToRedirectTypePtrOutputWithContext(context.Context) RedirectTypePtrOutput
}

type redirectTypePtr string

func RedirectTypePtr(v string) RedirectTypePtrInput {
	return (*redirectTypePtr)(&v)
}

func (*redirectTypePtr) ElementType() reflect.Type {
	return redirectTypePtrType
}

func (in *redirectTypePtr) ToRedirectTypePtrOutput() RedirectTypePtrOutput {
	return pulumi.ToOutput(in).(RedirectTypePtrOutput)
}

func (in *redirectTypePtr) ToRedirectTypePtrOutputWithContext(ctx context.Context) RedirectTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RedirectTypePtrOutput)
}

// Describes operator to be matched
type RemoteAddressOperator string

const (
	RemoteAddressOperatorAny      = RemoteAddressOperator("Any")
	RemoteAddressOperatorIPMatch  = RemoteAddressOperator("IPMatch")
	RemoteAddressOperatorGeoMatch = RemoteAddressOperator("GeoMatch")
)

func (RemoteAddressOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteAddressOperator)(nil)).Elem()
}

func (e RemoteAddressOperator) ToRemoteAddressOperatorOutput() RemoteAddressOperatorOutput {
	return pulumi.ToOutput(e).(RemoteAddressOperatorOutput)
}

func (e RemoteAddressOperator) ToRemoteAddressOperatorOutputWithContext(ctx context.Context) RemoteAddressOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RemoteAddressOperatorOutput)
}

func (e RemoteAddressOperator) ToRemoteAddressOperatorPtrOutput() RemoteAddressOperatorPtrOutput {
	return e.ToRemoteAddressOperatorPtrOutputWithContext(context.Background())
}

func (e RemoteAddressOperator) ToRemoteAddressOperatorPtrOutputWithContext(ctx context.Context) RemoteAddressOperatorPtrOutput {
	return RemoteAddressOperator(e).ToRemoteAddressOperatorOutputWithContext(ctx).ToRemoteAddressOperatorPtrOutputWithContext(ctx)
}

func (e RemoteAddressOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RemoteAddressOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RemoteAddressOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RemoteAddressOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RemoteAddressOperatorOutput struct{ *pulumi.OutputState }

func (RemoteAddressOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteAddressOperator)(nil)).Elem()
}

func (o RemoteAddressOperatorOutput) ToRemoteAddressOperatorOutput() RemoteAddressOperatorOutput {
	return o
}

func (o RemoteAddressOperatorOutput) ToRemoteAddressOperatorOutputWithContext(ctx context.Context) RemoteAddressOperatorOutput {
	return o
}

func (o RemoteAddressOperatorOutput) ToRemoteAddressOperatorPtrOutput() RemoteAddressOperatorPtrOutput {
	return o.ToRemoteAddressOperatorPtrOutputWithContext(context.Background())
}

func (o RemoteAddressOperatorOutput) ToRemoteAddressOperatorPtrOutputWithContext(ctx context.Context) RemoteAddressOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteAddressOperator) *RemoteAddressOperator {
		return &v
	}).(RemoteAddressOperatorPtrOutput)
}

func (o RemoteAddressOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RemoteAddressOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RemoteAddressOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RemoteAddressOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RemoteAddressOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RemoteAddressOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RemoteAddressOperatorPtrOutput struct{ *pulumi.OutputState }

func (RemoteAddressOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteAddressOperator)(nil)).Elem()
}

func (o RemoteAddressOperatorPtrOutput) ToRemoteAddressOperatorPtrOutput() RemoteAddressOperatorPtrOutput {
	return o
}

func (o RemoteAddressOperatorPtrOutput) ToRemoteAddressOperatorPtrOutputWithContext(ctx context.Context) RemoteAddressOperatorPtrOutput {
	return o
}

func (o RemoteAddressOperatorPtrOutput) Elem() RemoteAddressOperatorOutput {
	return o.ApplyT(func(v *RemoteAddressOperator) RemoteAddressOperator {
		if v != nil {
			return *v
		}
		var ret RemoteAddressOperator
		return ret
	}).(RemoteAddressOperatorOutput)
}

func (o RemoteAddressOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RemoteAddressOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RemoteAddressOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RemoteAddressOperatorInput is an input type that accepts RemoteAddressOperatorArgs and RemoteAddressOperatorOutput values.
// You can construct a concrete instance of `RemoteAddressOperatorInput` via:
//
//          RemoteAddressOperatorArgs{...}
type RemoteAddressOperatorInput interface {
	pulumi.Input

	ToRemoteAddressOperatorOutput() RemoteAddressOperatorOutput
	ToRemoteAddressOperatorOutputWithContext(context.Context) RemoteAddressOperatorOutput
}

var remoteAddressOperatorPtrType = reflect.TypeOf((**RemoteAddressOperator)(nil)).Elem()

type RemoteAddressOperatorPtrInput interface {
	pulumi.Input

	ToRemoteAddressOperatorPtrOutput() RemoteAddressOperatorPtrOutput
	ToRemoteAddressOperatorPtrOutputWithContext(context.Context) RemoteAddressOperatorPtrOutput
}

type remoteAddressOperatorPtr string

func RemoteAddressOperatorPtr(v string) RemoteAddressOperatorPtrInput {
	return (*remoteAddressOperatorPtr)(&v)
}

func (*remoteAddressOperatorPtr) ElementType() reflect.Type {
	return remoteAddressOperatorPtrType
}

func (in *remoteAddressOperatorPtr) ToRemoteAddressOperatorPtrOutput() RemoteAddressOperatorPtrOutput {
	return pulumi.ToOutput(in).(RemoteAddressOperatorPtrOutput)
}

func (in *remoteAddressOperatorPtr) ToRemoteAddressOperatorPtrOutputWithContext(ctx context.Context) RemoteAddressOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RemoteAddressOperatorPtrOutput)
}

// Describes operator to be matched
type RequestBodyOperator string

const (
	RequestBodyOperatorAny                = RequestBodyOperator("Any")
	RequestBodyOperatorEqual              = RequestBodyOperator("Equal")
	RequestBodyOperatorContains           = RequestBodyOperator("Contains")
	RequestBodyOperatorBeginsWith         = RequestBodyOperator("BeginsWith")
	RequestBodyOperatorEndsWith           = RequestBodyOperator("EndsWith")
	RequestBodyOperatorLessThan           = RequestBodyOperator("LessThan")
	RequestBodyOperatorLessThanOrEqual    = RequestBodyOperator("LessThanOrEqual")
	RequestBodyOperatorGreaterThan        = RequestBodyOperator("GreaterThan")
	RequestBodyOperatorGreaterThanOrEqual = RequestBodyOperator("GreaterThanOrEqual")
)

func (RequestBodyOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestBodyOperator)(nil)).Elem()
}

func (e RequestBodyOperator) ToRequestBodyOperatorOutput() RequestBodyOperatorOutput {
	return pulumi.ToOutput(e).(RequestBodyOperatorOutput)
}

func (e RequestBodyOperator) ToRequestBodyOperatorOutputWithContext(ctx context.Context) RequestBodyOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RequestBodyOperatorOutput)
}

func (e RequestBodyOperator) ToRequestBodyOperatorPtrOutput() RequestBodyOperatorPtrOutput {
	return e.ToRequestBodyOperatorPtrOutputWithContext(context.Background())
}

func (e RequestBodyOperator) ToRequestBodyOperatorPtrOutputWithContext(ctx context.Context) RequestBodyOperatorPtrOutput {
	return RequestBodyOperator(e).ToRequestBodyOperatorOutputWithContext(ctx).ToRequestBodyOperatorPtrOutputWithContext(ctx)
}

func (e RequestBodyOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestBodyOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestBodyOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RequestBodyOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RequestBodyOperatorOutput struct{ *pulumi.OutputState }

func (RequestBodyOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestBodyOperator)(nil)).Elem()
}

func (o RequestBodyOperatorOutput) ToRequestBodyOperatorOutput() RequestBodyOperatorOutput {
	return o
}

func (o RequestBodyOperatorOutput) ToRequestBodyOperatorOutputWithContext(ctx context.Context) RequestBodyOperatorOutput {
	return o
}

func (o RequestBodyOperatorOutput) ToRequestBodyOperatorPtrOutput() RequestBodyOperatorPtrOutput {
	return o.ToRequestBodyOperatorPtrOutputWithContext(context.Background())
}

func (o RequestBodyOperatorOutput) ToRequestBodyOperatorPtrOutputWithContext(ctx context.Context) RequestBodyOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequestBodyOperator) *RequestBodyOperator {
		return &v
	}).(RequestBodyOperatorPtrOutput)
}

func (o RequestBodyOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RequestBodyOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RequestBodyOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RequestBodyOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RequestBodyOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RequestBodyOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RequestBodyOperatorPtrOutput struct{ *pulumi.OutputState }

func (RequestBodyOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestBodyOperator)(nil)).Elem()
}

func (o RequestBodyOperatorPtrOutput) ToRequestBodyOperatorPtrOutput() RequestBodyOperatorPtrOutput {
	return o
}

func (o RequestBodyOperatorPtrOutput) ToRequestBodyOperatorPtrOutputWithContext(ctx context.Context) RequestBodyOperatorPtrOutput {
	return o
}

func (o RequestBodyOperatorPtrOutput) Elem() RequestBodyOperatorOutput {
	return o.ApplyT(func(v *RequestBodyOperator) RequestBodyOperator {
		if v != nil {
			return *v
		}
		var ret RequestBodyOperator
		return ret
	}).(RequestBodyOperatorOutput)
}

func (o RequestBodyOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RequestBodyOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RequestBodyOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RequestBodyOperatorInput is an input type that accepts RequestBodyOperatorArgs and RequestBodyOperatorOutput values.
// You can construct a concrete instance of `RequestBodyOperatorInput` via:
//
//          RequestBodyOperatorArgs{...}
type RequestBodyOperatorInput interface {
	pulumi.Input

	ToRequestBodyOperatorOutput() RequestBodyOperatorOutput
	ToRequestBodyOperatorOutputWithContext(context.Context) RequestBodyOperatorOutput
}

var requestBodyOperatorPtrType = reflect.TypeOf((**RequestBodyOperator)(nil)).Elem()

type RequestBodyOperatorPtrInput interface {
	pulumi.Input

	ToRequestBodyOperatorPtrOutput() RequestBodyOperatorPtrOutput
	ToRequestBodyOperatorPtrOutputWithContext(context.Context) RequestBodyOperatorPtrOutput
}

type requestBodyOperatorPtr string

func RequestBodyOperatorPtr(v string) RequestBodyOperatorPtrInput {
	return (*requestBodyOperatorPtr)(&v)
}

func (*requestBodyOperatorPtr) ElementType() reflect.Type {
	return requestBodyOperatorPtrType
}

func (in *requestBodyOperatorPtr) ToRequestBodyOperatorPtrOutput() RequestBodyOperatorPtrOutput {
	return pulumi.ToOutput(in).(RequestBodyOperatorPtrOutput)
}

func (in *requestBodyOperatorPtr) ToRequestBodyOperatorPtrOutputWithContext(ctx context.Context) RequestBodyOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RequestBodyOperatorPtrOutput)
}

// Describes operator to be matched
type RequestHeaderOperator string

const (
	RequestHeaderOperatorAny                = RequestHeaderOperator("Any")
	RequestHeaderOperatorEqual              = RequestHeaderOperator("Equal")
	RequestHeaderOperatorContains           = RequestHeaderOperator("Contains")
	RequestHeaderOperatorBeginsWith         = RequestHeaderOperator("BeginsWith")
	RequestHeaderOperatorEndsWith           = RequestHeaderOperator("EndsWith")
	RequestHeaderOperatorLessThan           = RequestHeaderOperator("LessThan")
	RequestHeaderOperatorLessThanOrEqual    = RequestHeaderOperator("LessThanOrEqual")
	RequestHeaderOperatorGreaterThan        = RequestHeaderOperator("GreaterThan")
	RequestHeaderOperatorGreaterThanOrEqual = RequestHeaderOperator("GreaterThanOrEqual")
)

func (RequestHeaderOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestHeaderOperator)(nil)).Elem()
}

func (e RequestHeaderOperator) ToRequestHeaderOperatorOutput() RequestHeaderOperatorOutput {
	return pulumi.ToOutput(e).(RequestHeaderOperatorOutput)
}

func (e RequestHeaderOperator) ToRequestHeaderOperatorOutputWithContext(ctx context.Context) RequestHeaderOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RequestHeaderOperatorOutput)
}

func (e RequestHeaderOperator) ToRequestHeaderOperatorPtrOutput() RequestHeaderOperatorPtrOutput {
	return e.ToRequestHeaderOperatorPtrOutputWithContext(context.Background())
}

func (e RequestHeaderOperator) ToRequestHeaderOperatorPtrOutputWithContext(ctx context.Context) RequestHeaderOperatorPtrOutput {
	return RequestHeaderOperator(e).ToRequestHeaderOperatorOutputWithContext(ctx).ToRequestHeaderOperatorPtrOutputWithContext(ctx)
}

func (e RequestHeaderOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestHeaderOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestHeaderOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RequestHeaderOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RequestHeaderOperatorOutput struct{ *pulumi.OutputState }

func (RequestHeaderOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestHeaderOperator)(nil)).Elem()
}

func (o RequestHeaderOperatorOutput) ToRequestHeaderOperatorOutput() RequestHeaderOperatorOutput {
	return o
}

func (o RequestHeaderOperatorOutput) ToRequestHeaderOperatorOutputWithContext(ctx context.Context) RequestHeaderOperatorOutput {
	return o
}

func (o RequestHeaderOperatorOutput) ToRequestHeaderOperatorPtrOutput() RequestHeaderOperatorPtrOutput {
	return o.ToRequestHeaderOperatorPtrOutputWithContext(context.Background())
}

func (o RequestHeaderOperatorOutput) ToRequestHeaderOperatorPtrOutputWithContext(ctx context.Context) RequestHeaderOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequestHeaderOperator) *RequestHeaderOperator {
		return &v
	}).(RequestHeaderOperatorPtrOutput)
}

func (o RequestHeaderOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RequestHeaderOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RequestHeaderOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RequestHeaderOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RequestHeaderOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RequestHeaderOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RequestHeaderOperatorPtrOutput struct{ *pulumi.OutputState }

func (RequestHeaderOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestHeaderOperator)(nil)).Elem()
}

func (o RequestHeaderOperatorPtrOutput) ToRequestHeaderOperatorPtrOutput() RequestHeaderOperatorPtrOutput {
	return o
}

func (o RequestHeaderOperatorPtrOutput) ToRequestHeaderOperatorPtrOutputWithContext(ctx context.Context) RequestHeaderOperatorPtrOutput {
	return o
}

func (o RequestHeaderOperatorPtrOutput) Elem() RequestHeaderOperatorOutput {
	return o.ApplyT(func(v *RequestHeaderOperator) RequestHeaderOperator {
		if v != nil {
			return *v
		}
		var ret RequestHeaderOperator
		return ret
	}).(RequestHeaderOperatorOutput)
}

func (o RequestHeaderOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RequestHeaderOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RequestHeaderOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RequestHeaderOperatorInput is an input type that accepts RequestHeaderOperatorArgs and RequestHeaderOperatorOutput values.
// You can construct a concrete instance of `RequestHeaderOperatorInput` via:
//
//          RequestHeaderOperatorArgs{...}
type RequestHeaderOperatorInput interface {
	pulumi.Input

	ToRequestHeaderOperatorOutput() RequestHeaderOperatorOutput
	ToRequestHeaderOperatorOutputWithContext(context.Context) RequestHeaderOperatorOutput
}

var requestHeaderOperatorPtrType = reflect.TypeOf((**RequestHeaderOperator)(nil)).Elem()

type RequestHeaderOperatorPtrInput interface {
	pulumi.Input

	ToRequestHeaderOperatorPtrOutput() RequestHeaderOperatorPtrOutput
	ToRequestHeaderOperatorPtrOutputWithContext(context.Context) RequestHeaderOperatorPtrOutput
}

type requestHeaderOperatorPtr string

func RequestHeaderOperatorPtr(v string) RequestHeaderOperatorPtrInput {
	return (*requestHeaderOperatorPtr)(&v)
}

func (*requestHeaderOperatorPtr) ElementType() reflect.Type {
	return requestHeaderOperatorPtrType
}

func (in *requestHeaderOperatorPtr) ToRequestHeaderOperatorPtrOutput() RequestHeaderOperatorPtrOutput {
	return pulumi.ToOutput(in).(RequestHeaderOperatorPtrOutput)
}

func (in *requestHeaderOperatorPtr) ToRequestHeaderOperatorPtrOutputWithContext(ctx context.Context) RequestHeaderOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RequestHeaderOperatorPtrOutput)
}

// Describes operator to be matched
type RequestMethodOperator string

const (
	RequestMethodOperatorEqual = RequestMethodOperator("Equal")
)

func (RequestMethodOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestMethodOperator)(nil)).Elem()
}

func (e RequestMethodOperator) ToRequestMethodOperatorOutput() RequestMethodOperatorOutput {
	return pulumi.ToOutput(e).(RequestMethodOperatorOutput)
}

func (e RequestMethodOperator) ToRequestMethodOperatorOutputWithContext(ctx context.Context) RequestMethodOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RequestMethodOperatorOutput)
}

func (e RequestMethodOperator) ToRequestMethodOperatorPtrOutput() RequestMethodOperatorPtrOutput {
	return e.ToRequestMethodOperatorPtrOutputWithContext(context.Background())
}

func (e RequestMethodOperator) ToRequestMethodOperatorPtrOutputWithContext(ctx context.Context) RequestMethodOperatorPtrOutput {
	return RequestMethodOperator(e).ToRequestMethodOperatorOutputWithContext(ctx).ToRequestMethodOperatorPtrOutputWithContext(ctx)
}

func (e RequestMethodOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestMethodOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestMethodOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RequestMethodOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RequestMethodOperatorOutput struct{ *pulumi.OutputState }

func (RequestMethodOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestMethodOperator)(nil)).Elem()
}

func (o RequestMethodOperatorOutput) ToRequestMethodOperatorOutput() RequestMethodOperatorOutput {
	return o
}

func (o RequestMethodOperatorOutput) ToRequestMethodOperatorOutputWithContext(ctx context.Context) RequestMethodOperatorOutput {
	return o
}

func (o RequestMethodOperatorOutput) ToRequestMethodOperatorPtrOutput() RequestMethodOperatorPtrOutput {
	return o.ToRequestMethodOperatorPtrOutputWithContext(context.Background())
}

func (o RequestMethodOperatorOutput) ToRequestMethodOperatorPtrOutputWithContext(ctx context.Context) RequestMethodOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequestMethodOperator) *RequestMethodOperator {
		return &v
	}).(RequestMethodOperatorPtrOutput)
}

func (o RequestMethodOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RequestMethodOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RequestMethodOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RequestMethodOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RequestMethodOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RequestMethodOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RequestMethodOperatorPtrOutput struct{ *pulumi.OutputState }

func (RequestMethodOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestMethodOperator)(nil)).Elem()
}

func (o RequestMethodOperatorPtrOutput) ToRequestMethodOperatorPtrOutput() RequestMethodOperatorPtrOutput {
	return o
}

func (o RequestMethodOperatorPtrOutput) ToRequestMethodOperatorPtrOutputWithContext(ctx context.Context) RequestMethodOperatorPtrOutput {
	return o
}

func (o RequestMethodOperatorPtrOutput) Elem() RequestMethodOperatorOutput {
	return o.ApplyT(func(v *RequestMethodOperator) RequestMethodOperator {
		if v != nil {
			return *v
		}
		var ret RequestMethodOperator
		return ret
	}).(RequestMethodOperatorOutput)
}

func (o RequestMethodOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RequestMethodOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RequestMethodOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RequestMethodOperatorInput is an input type that accepts RequestMethodOperatorArgs and RequestMethodOperatorOutput values.
// You can construct a concrete instance of `RequestMethodOperatorInput` via:
//
//          RequestMethodOperatorArgs{...}
type RequestMethodOperatorInput interface {
	pulumi.Input

	ToRequestMethodOperatorOutput() RequestMethodOperatorOutput
	ToRequestMethodOperatorOutputWithContext(context.Context) RequestMethodOperatorOutput
}

var requestMethodOperatorPtrType = reflect.TypeOf((**RequestMethodOperator)(nil)).Elem()

type RequestMethodOperatorPtrInput interface {
	pulumi.Input

	ToRequestMethodOperatorPtrOutput() RequestMethodOperatorPtrOutput
	ToRequestMethodOperatorPtrOutputWithContext(context.Context) RequestMethodOperatorPtrOutput
}

type requestMethodOperatorPtr string

func RequestMethodOperatorPtr(v string) RequestMethodOperatorPtrInput {
	return (*requestMethodOperatorPtr)(&v)
}

func (*requestMethodOperatorPtr) ElementType() reflect.Type {
	return requestMethodOperatorPtrType
}

func (in *requestMethodOperatorPtr) ToRequestMethodOperatorPtrOutput() RequestMethodOperatorPtrOutput {
	return pulumi.ToOutput(in).(RequestMethodOperatorPtrOutput)
}

func (in *requestMethodOperatorPtr) ToRequestMethodOperatorPtrOutputWithContext(ctx context.Context) RequestMethodOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RequestMethodOperatorPtrOutput)
}

// Describes operator to be matched
type RequestUriOperator string

const (
	RequestUriOperatorAny                = RequestUriOperator("Any")
	RequestUriOperatorEqual              = RequestUriOperator("Equal")
	RequestUriOperatorContains           = RequestUriOperator("Contains")
	RequestUriOperatorBeginsWith         = RequestUriOperator("BeginsWith")
	RequestUriOperatorEndsWith           = RequestUriOperator("EndsWith")
	RequestUriOperatorLessThan           = RequestUriOperator("LessThan")
	RequestUriOperatorLessThanOrEqual    = RequestUriOperator("LessThanOrEqual")
	RequestUriOperatorGreaterThan        = RequestUriOperator("GreaterThan")
	RequestUriOperatorGreaterThanOrEqual = RequestUriOperator("GreaterThanOrEqual")
)

func (RequestUriOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestUriOperator)(nil)).Elem()
}

func (e RequestUriOperator) ToRequestUriOperatorOutput() RequestUriOperatorOutput {
	return pulumi.ToOutput(e).(RequestUriOperatorOutput)
}

func (e RequestUriOperator) ToRequestUriOperatorOutputWithContext(ctx context.Context) RequestUriOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RequestUriOperatorOutput)
}

func (e RequestUriOperator) ToRequestUriOperatorPtrOutput() RequestUriOperatorPtrOutput {
	return e.ToRequestUriOperatorPtrOutputWithContext(context.Background())
}

func (e RequestUriOperator) ToRequestUriOperatorPtrOutputWithContext(ctx context.Context) RequestUriOperatorPtrOutput {
	return RequestUriOperator(e).ToRequestUriOperatorOutputWithContext(ctx).ToRequestUriOperatorPtrOutputWithContext(ctx)
}

func (e RequestUriOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestUriOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestUriOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RequestUriOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RequestUriOperatorOutput struct{ *pulumi.OutputState }

func (RequestUriOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestUriOperator)(nil)).Elem()
}

func (o RequestUriOperatorOutput) ToRequestUriOperatorOutput() RequestUriOperatorOutput {
	return o
}

func (o RequestUriOperatorOutput) ToRequestUriOperatorOutputWithContext(ctx context.Context) RequestUriOperatorOutput {
	return o
}

func (o RequestUriOperatorOutput) ToRequestUriOperatorPtrOutput() RequestUriOperatorPtrOutput {
	return o.ToRequestUriOperatorPtrOutputWithContext(context.Background())
}

func (o RequestUriOperatorOutput) ToRequestUriOperatorPtrOutputWithContext(ctx context.Context) RequestUriOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequestUriOperator) *RequestUriOperator {
		return &v
	}).(RequestUriOperatorPtrOutput)
}

func (o RequestUriOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RequestUriOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RequestUriOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RequestUriOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RequestUriOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RequestUriOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RequestUriOperatorPtrOutput struct{ *pulumi.OutputState }

func (RequestUriOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestUriOperator)(nil)).Elem()
}

func (o RequestUriOperatorPtrOutput) ToRequestUriOperatorPtrOutput() RequestUriOperatorPtrOutput {
	return o
}

func (o RequestUriOperatorPtrOutput) ToRequestUriOperatorPtrOutputWithContext(ctx context.Context) RequestUriOperatorPtrOutput {
	return o
}

func (o RequestUriOperatorPtrOutput) Elem() RequestUriOperatorOutput {
	return o.ApplyT(func(v *RequestUriOperator) RequestUriOperator {
		if v != nil {
			return *v
		}
		var ret RequestUriOperator
		return ret
	}).(RequestUriOperatorOutput)
}

func (o RequestUriOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RequestUriOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RequestUriOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RequestUriOperatorInput is an input type that accepts RequestUriOperatorArgs and RequestUriOperatorOutput values.
// You can construct a concrete instance of `RequestUriOperatorInput` via:
//
//          RequestUriOperatorArgs{...}
type RequestUriOperatorInput interface {
	pulumi.Input

	ToRequestUriOperatorOutput() RequestUriOperatorOutput
	ToRequestUriOperatorOutputWithContext(context.Context) RequestUriOperatorOutput
}

var requestUriOperatorPtrType = reflect.TypeOf((**RequestUriOperator)(nil)).Elem()

type RequestUriOperatorPtrInput interface {
	pulumi.Input

	ToRequestUriOperatorPtrOutput() RequestUriOperatorPtrOutput
	ToRequestUriOperatorPtrOutputWithContext(context.Context) RequestUriOperatorPtrOutput
}

type requestUriOperatorPtr string

func RequestUriOperatorPtr(v string) RequestUriOperatorPtrInput {
	return (*requestUriOperatorPtr)(&v)
}

func (*requestUriOperatorPtr) ElementType() reflect.Type {
	return requestUriOperatorPtrType
}

func (in *requestUriOperatorPtr) ToRequestUriOperatorPtrOutput() RequestUriOperatorPtrOutput {
	return pulumi.ToOutput(in).(RequestUriOperatorPtrOutput)
}

func (in *requestUriOperatorPtr) ToRequestUriOperatorPtrOutputWithContext(ctx context.Context) RequestUriOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RequestUriOperatorPtrOutput)
}

// Type of response errors for real user requests for which origin will be deemed unhealthy
type ResponseBasedDetectedErrorTypes string

const (
	ResponseBasedDetectedErrorTypesNone             = ResponseBasedDetectedErrorTypes("None")
	ResponseBasedDetectedErrorTypesTcpErrorsOnly    = ResponseBasedDetectedErrorTypes("TcpErrorsOnly")
	ResponseBasedDetectedErrorTypesTcpAndHttpErrors = ResponseBasedDetectedErrorTypes("TcpAndHttpErrors")
)

func (ResponseBasedDetectedErrorTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponseBasedDetectedErrorTypes)(nil)).Elem()
}

func (e ResponseBasedDetectedErrorTypes) ToResponseBasedDetectedErrorTypesOutput() ResponseBasedDetectedErrorTypesOutput {
	return pulumi.ToOutput(e).(ResponseBasedDetectedErrorTypesOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToResponseBasedDetectedErrorTypesOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResponseBasedDetectedErrorTypesOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput {
	return e.ToResponseBasedDetectedErrorTypesPtrOutputWithContext(context.Background())
}

func (e ResponseBasedDetectedErrorTypes) ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesPtrOutput {
	return ResponseBasedDetectedErrorTypes(e).ToResponseBasedDetectedErrorTypesOutputWithContext(ctx).ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx)
}

func (e ResponseBasedDetectedErrorTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResponseBasedDetectedErrorTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResponseBasedDetectedErrorTypesOutput struct{ *pulumi.OutputState }

func (ResponseBasedDetectedErrorTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponseBasedDetectedErrorTypes)(nil)).Elem()
}

func (o ResponseBasedDetectedErrorTypesOutput) ToResponseBasedDetectedErrorTypesOutput() ResponseBasedDetectedErrorTypesOutput {
	return o
}

func (o ResponseBasedDetectedErrorTypesOutput) ToResponseBasedDetectedErrorTypesOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesOutput {
	return o
}

func (o ResponseBasedDetectedErrorTypesOutput) ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput {
	return o.ToResponseBasedDetectedErrorTypesPtrOutputWithContext(context.Background())
}

func (o ResponseBasedDetectedErrorTypesOutput) ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResponseBasedDetectedErrorTypes) *ResponseBasedDetectedErrorTypes {
		return &v
	}).(ResponseBasedDetectedErrorTypesPtrOutput)
}

func (o ResponseBasedDetectedErrorTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResponseBasedDetectedErrorTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResponseBasedDetectedErrorTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResponseBasedDetectedErrorTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResponseBasedDetectedErrorTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResponseBasedDetectedErrorTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResponseBasedDetectedErrorTypesPtrOutput struct{ *pulumi.OutputState }

func (ResponseBasedDetectedErrorTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponseBasedDetectedErrorTypes)(nil)).Elem()
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput {
	return o
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesPtrOutput {
	return o
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) Elem() ResponseBasedDetectedErrorTypesOutput {
	return o.ApplyT(func(v *ResponseBasedDetectedErrorTypes) ResponseBasedDetectedErrorTypes {
		if v != nil {
			return *v
		}
		var ret ResponseBasedDetectedErrorTypes
		return ret
	}).(ResponseBasedDetectedErrorTypesOutput)
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResponseBasedDetectedErrorTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResponseBasedDetectedErrorTypesInput is an input type that accepts ResponseBasedDetectedErrorTypesArgs and ResponseBasedDetectedErrorTypesOutput values.
// You can construct a concrete instance of `ResponseBasedDetectedErrorTypesInput` via:
//
//          ResponseBasedDetectedErrorTypesArgs{...}
type ResponseBasedDetectedErrorTypesInput interface {
	pulumi.Input

	ToResponseBasedDetectedErrorTypesOutput() ResponseBasedDetectedErrorTypesOutput
	ToResponseBasedDetectedErrorTypesOutputWithContext(context.Context) ResponseBasedDetectedErrorTypesOutput
}

var responseBasedDetectedErrorTypesPtrType = reflect.TypeOf((**ResponseBasedDetectedErrorTypes)(nil)).Elem()

type ResponseBasedDetectedErrorTypesPtrInput interface {
	pulumi.Input

	ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput
	ToResponseBasedDetectedErrorTypesPtrOutputWithContext(context.Context) ResponseBasedDetectedErrorTypesPtrOutput
}

type responseBasedDetectedErrorTypesPtr string

func ResponseBasedDetectedErrorTypesPtr(v string) ResponseBasedDetectedErrorTypesPtrInput {
	return (*responseBasedDetectedErrorTypesPtr)(&v)
}

func (*responseBasedDetectedErrorTypesPtr) ElementType() reflect.Type {
	return responseBasedDetectedErrorTypesPtrType
}

func (in *responseBasedDetectedErrorTypesPtr) ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput {
	return pulumi.ToOutput(in).(ResponseBasedDetectedErrorTypesPtrOutput)
}

func (in *responseBasedDetectedErrorTypesPtr) ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResponseBasedDetectedErrorTypesPtrOutput)
}

// Name of the pricing tier.
type SkuName string

const (
	SkuName_Standard_Verizon   = SkuName("Standard_Verizon")
	SkuName_Premium_Verizon    = SkuName("Premium_Verizon")
	SkuName_Custom_Verizon     = SkuName("Custom_Verizon")
	SkuName_Standard_Akamai    = SkuName("Standard_Akamai")
	SkuName_Standard_ChinaCdn  = SkuName("Standard_ChinaCdn")
	SkuName_Standard_Microsoft = SkuName("Standard_Microsoft")
	SkuName_Premium_ChinaCdn   = SkuName("Premium_ChinaCdn")
)

func (SkuName) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuName)(nil)).Elem()
}

func (e SkuName) ToSkuNameOutput() SkuNameOutput {
	return pulumi.ToOutput(e).(SkuNameOutput)
}

func (e SkuName) ToSkuNameOutputWithContext(ctx context.Context) SkuNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SkuNameOutput)
}

func (e SkuName) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return e.ToSkuNamePtrOutputWithContext(context.Background())
}

func (e SkuName) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return SkuName(e).ToSkuNameOutputWithContext(ctx).ToSkuNamePtrOutputWithContext(ctx)
}

func (e SkuName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SkuName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SkuNameOutput struct{ *pulumi.OutputState }

func (SkuNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuName)(nil)).Elem()
}

func (o SkuNameOutput) ToSkuNameOutput() SkuNameOutput {
	return o
}

func (o SkuNameOutput) ToSkuNameOutputWithContext(ctx context.Context) SkuNameOutput {
	return o
}

func (o SkuNameOutput) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return o.ToSkuNamePtrOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkuName) *SkuName {
		return &v
	}).(SkuNamePtrOutput)
}

func (o SkuNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SkuNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SkuNamePtrOutput struct{ *pulumi.OutputState }

func (SkuNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuName)(nil)).Elem()
}

func (o SkuNamePtrOutput) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return o
}

func (o SkuNamePtrOutput) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return o
}

func (o SkuNamePtrOutput) Elem() SkuNameOutput {
	return o.ApplyT(func(v *SkuName) SkuName {
		if v != nil {
			return *v
		}
		var ret SkuName
		return ret
	}).(SkuNameOutput)
}

func (o SkuNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SkuName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SkuNameInput is an input type that accepts SkuNameArgs and SkuNameOutput values.
// You can construct a concrete instance of `SkuNameInput` via:
//
//          SkuNameArgs{...}
type SkuNameInput interface {
	pulumi.Input

	ToSkuNameOutput() SkuNameOutput
	ToSkuNameOutputWithContext(context.Context) SkuNameOutput
}

var skuNamePtrType = reflect.TypeOf((**SkuName)(nil)).Elem()

type SkuNamePtrInput interface {
	pulumi.Input

	ToSkuNamePtrOutput() SkuNamePtrOutput
	ToSkuNamePtrOutputWithContext(context.Context) SkuNamePtrOutput
}

type skuNamePtr string

func SkuNamePtr(v string) SkuNamePtrInput {
	return (*skuNamePtr)(&v)
}

func (*skuNamePtr) ElementType() reflect.Type {
	return skuNamePtrType
}

func (in *skuNamePtr) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return pulumi.ToOutput(in).(SkuNamePtrOutput)
}

func (in *skuNamePtr) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SkuNamePtrOutput)
}

// Describes what transforms are applied before matching
type Transform string

const (
	TransformLowercase = Transform("Lowercase")
	TransformUppercase = Transform("Uppercase")
)

func (Transform) ElementType() reflect.Type {
	return reflect.TypeOf((*Transform)(nil)).Elem()
}

func (e Transform) ToTransformOutput() TransformOutput {
	return pulumi.ToOutput(e).(TransformOutput)
}

func (e Transform) ToTransformOutputWithContext(ctx context.Context) TransformOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransformOutput)
}

func (e Transform) ToTransformPtrOutput() TransformPtrOutput {
	return e.ToTransformPtrOutputWithContext(context.Background())
}

func (e Transform) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return Transform(e).ToTransformOutputWithContext(ctx).ToTransformPtrOutputWithContext(ctx)
}

func (e Transform) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Transform) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Transform) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Transform) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransformOutput struct{ *pulumi.OutputState }

func (TransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Transform)(nil)).Elem()
}

func (o TransformOutput) ToTransformOutput() TransformOutput {
	return o
}

func (o TransformOutput) ToTransformOutputWithContext(ctx context.Context) TransformOutput {
	return o
}

func (o TransformOutput) ToTransformPtrOutput() TransformPtrOutput {
	return o.ToTransformPtrOutputWithContext(context.Background())
}

func (o TransformOutput) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Transform) *Transform {
		return &v
	}).(TransformPtrOutput)
}

func (o TransformOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransformOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Transform) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransformOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Transform) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransformPtrOutput struct{ *pulumi.OutputState }

func (TransformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transform)(nil)).Elem()
}

func (o TransformPtrOutput) ToTransformPtrOutput() TransformPtrOutput {
	return o
}

func (o TransformPtrOutput) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return o
}

func (o TransformPtrOutput) Elem() TransformOutput {
	return o.ApplyT(func(v *Transform) Transform {
		if v != nil {
			return *v
		}
		var ret Transform
		return ret
	}).(TransformOutput)
}

func (o TransformPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Transform) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransformInput is an input type that accepts TransformArgs and TransformOutput values.
// You can construct a concrete instance of `TransformInput` via:
//
//          TransformArgs{...}
type TransformInput interface {
	pulumi.Input

	ToTransformOutput() TransformOutput
	ToTransformOutputWithContext(context.Context) TransformOutput
}

var transformPtrType = reflect.TypeOf((**Transform)(nil)).Elem()

type TransformPtrInput interface {
	pulumi.Input

	ToTransformPtrOutput() TransformPtrOutput
	ToTransformPtrOutputWithContext(context.Context) TransformPtrOutput
}

type transformPtr string

func TransformPtr(v string) TransformPtrInput {
	return (*transformPtr)(&v)
}

func (*transformPtr) ElementType() reflect.Type {
	return transformPtrType
}

func (in *transformPtr) ToTransformPtrOutput() TransformPtrOutput {
	return pulumi.ToOutput(in).(TransformPtrOutput)
}

func (in *transformPtr) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransformPtrOutput)
}

// Describes what transforms were applied before matching.
type TransformType string

const (
	TransformTypeLowercase   = TransformType("Lowercase")
	TransformTypeUppercase   = TransformType("Uppercase")
	TransformTypeTrim        = TransformType("Trim")
	TransformTypeUrlDecode   = TransformType("UrlDecode")
	TransformTypeUrlEncode   = TransformType("UrlEncode")
	TransformTypeRemoveNulls = TransformType("RemoveNulls")
)

func (TransformType) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformType)(nil)).Elem()
}

func (e TransformType) ToTransformTypeOutput() TransformTypeOutput {
	return pulumi.ToOutput(e).(TransformTypeOutput)
}

func (e TransformType) ToTransformTypeOutputWithContext(ctx context.Context) TransformTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransformTypeOutput)
}

func (e TransformType) ToTransformTypePtrOutput() TransformTypePtrOutput {
	return e.ToTransformTypePtrOutputWithContext(context.Background())
}

func (e TransformType) ToTransformTypePtrOutputWithContext(ctx context.Context) TransformTypePtrOutput {
	return TransformType(e).ToTransformTypeOutputWithContext(ctx).ToTransformTypePtrOutputWithContext(ctx)
}

func (e TransformType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransformType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransformTypeOutput struct{ *pulumi.OutputState }

func (TransformTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformType)(nil)).Elem()
}

func (o TransformTypeOutput) ToTransformTypeOutput() TransformTypeOutput {
	return o
}

func (o TransformTypeOutput) ToTransformTypeOutputWithContext(ctx context.Context) TransformTypeOutput {
	return o
}

func (o TransformTypeOutput) ToTransformTypePtrOutput() TransformTypePtrOutput {
	return o.ToTransformTypePtrOutputWithContext(context.Background())
}

func (o TransformTypeOutput) ToTransformTypePtrOutputWithContext(ctx context.Context) TransformTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformType) *TransformType {
		return &v
	}).(TransformTypePtrOutput)
}

func (o TransformTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransformTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransformTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransformTypePtrOutput struct{ *pulumi.OutputState }

func (TransformTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformType)(nil)).Elem()
}

func (o TransformTypePtrOutput) ToTransformTypePtrOutput() TransformTypePtrOutput {
	return o
}

func (o TransformTypePtrOutput) ToTransformTypePtrOutputWithContext(ctx context.Context) TransformTypePtrOutput {
	return o
}

func (o TransformTypePtrOutput) Elem() TransformTypeOutput {
	return o.ApplyT(func(v *TransformType) TransformType {
		if v != nil {
			return *v
		}
		var ret TransformType
		return ret
	}).(TransformTypeOutput)
}

func (o TransformTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TransformType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransformTypeInput is an input type that accepts TransformTypeArgs and TransformTypeOutput values.
// You can construct a concrete instance of `TransformTypeInput` via:
//
//          TransformTypeArgs{...}
type TransformTypeInput interface {
	pulumi.Input

	ToTransformTypeOutput() TransformTypeOutput
	ToTransformTypeOutputWithContext(context.Context) TransformTypeOutput
}

var transformTypePtrType = reflect.TypeOf((**TransformType)(nil)).Elem()

type TransformTypePtrInput interface {
	pulumi.Input

	ToTransformTypePtrOutput() TransformTypePtrOutput
	ToTransformTypePtrOutputWithContext(context.Context) TransformTypePtrOutput
}

type transformTypePtr string

func TransformTypePtr(v string) TransformTypePtrInput {
	return (*transformTypePtr)(&v)
}

func (*transformTypePtr) ElementType() reflect.Type {
	return transformTypePtrType
}

func (in *transformTypePtr) ToTransformTypePtrOutput() TransformTypePtrOutput {
	return pulumi.ToOutput(in).(TransformTypePtrOutput)
}

func (in *transformTypePtr) ToTransformTypePtrOutputWithContext(ctx context.Context) TransformTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransformTypePtrOutput)
}

// Describes operator to be matched
type UrlFileExtensionOperator string

const (
	UrlFileExtensionOperatorAny                = UrlFileExtensionOperator("Any")
	UrlFileExtensionOperatorEqual              = UrlFileExtensionOperator("Equal")
	UrlFileExtensionOperatorContains           = UrlFileExtensionOperator("Contains")
	UrlFileExtensionOperatorBeginsWith         = UrlFileExtensionOperator("BeginsWith")
	UrlFileExtensionOperatorEndsWith           = UrlFileExtensionOperator("EndsWith")
	UrlFileExtensionOperatorLessThan           = UrlFileExtensionOperator("LessThan")
	UrlFileExtensionOperatorLessThanOrEqual    = UrlFileExtensionOperator("LessThanOrEqual")
	UrlFileExtensionOperatorGreaterThan        = UrlFileExtensionOperator("GreaterThan")
	UrlFileExtensionOperatorGreaterThanOrEqual = UrlFileExtensionOperator("GreaterThanOrEqual")
)

func (UrlFileExtensionOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlFileExtensionOperator)(nil)).Elem()
}

func (e UrlFileExtensionOperator) ToUrlFileExtensionOperatorOutput() UrlFileExtensionOperatorOutput {
	return pulumi.ToOutput(e).(UrlFileExtensionOperatorOutput)
}

func (e UrlFileExtensionOperator) ToUrlFileExtensionOperatorOutputWithContext(ctx context.Context) UrlFileExtensionOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UrlFileExtensionOperatorOutput)
}

func (e UrlFileExtensionOperator) ToUrlFileExtensionOperatorPtrOutput() UrlFileExtensionOperatorPtrOutput {
	return e.ToUrlFileExtensionOperatorPtrOutputWithContext(context.Background())
}

func (e UrlFileExtensionOperator) ToUrlFileExtensionOperatorPtrOutputWithContext(ctx context.Context) UrlFileExtensionOperatorPtrOutput {
	return UrlFileExtensionOperator(e).ToUrlFileExtensionOperatorOutputWithContext(ctx).ToUrlFileExtensionOperatorPtrOutputWithContext(ctx)
}

func (e UrlFileExtensionOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlFileExtensionOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlFileExtensionOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlFileExtensionOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UrlFileExtensionOperatorOutput struct{ *pulumi.OutputState }

func (UrlFileExtensionOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlFileExtensionOperator)(nil)).Elem()
}

func (o UrlFileExtensionOperatorOutput) ToUrlFileExtensionOperatorOutput() UrlFileExtensionOperatorOutput {
	return o
}

func (o UrlFileExtensionOperatorOutput) ToUrlFileExtensionOperatorOutputWithContext(ctx context.Context) UrlFileExtensionOperatorOutput {
	return o
}

func (o UrlFileExtensionOperatorOutput) ToUrlFileExtensionOperatorPtrOutput() UrlFileExtensionOperatorPtrOutput {
	return o.ToUrlFileExtensionOperatorPtrOutputWithContext(context.Background())
}

func (o UrlFileExtensionOperatorOutput) ToUrlFileExtensionOperatorPtrOutputWithContext(ctx context.Context) UrlFileExtensionOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UrlFileExtensionOperator) *UrlFileExtensionOperator {
		return &v
	}).(UrlFileExtensionOperatorPtrOutput)
}

func (o UrlFileExtensionOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UrlFileExtensionOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UrlFileExtensionOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UrlFileExtensionOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UrlFileExtensionOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UrlFileExtensionOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UrlFileExtensionOperatorPtrOutput struct{ *pulumi.OutputState }

func (UrlFileExtensionOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlFileExtensionOperator)(nil)).Elem()
}

func (o UrlFileExtensionOperatorPtrOutput) ToUrlFileExtensionOperatorPtrOutput() UrlFileExtensionOperatorPtrOutput {
	return o
}

func (o UrlFileExtensionOperatorPtrOutput) ToUrlFileExtensionOperatorPtrOutputWithContext(ctx context.Context) UrlFileExtensionOperatorPtrOutput {
	return o
}

func (o UrlFileExtensionOperatorPtrOutput) Elem() UrlFileExtensionOperatorOutput {
	return o.ApplyT(func(v *UrlFileExtensionOperator) UrlFileExtensionOperator {
		if v != nil {
			return *v
		}
		var ret UrlFileExtensionOperator
		return ret
	}).(UrlFileExtensionOperatorOutput)
}

func (o UrlFileExtensionOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UrlFileExtensionOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UrlFileExtensionOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UrlFileExtensionOperatorInput is an input type that accepts UrlFileExtensionOperatorArgs and UrlFileExtensionOperatorOutput values.
// You can construct a concrete instance of `UrlFileExtensionOperatorInput` via:
//
//          UrlFileExtensionOperatorArgs{...}
type UrlFileExtensionOperatorInput interface {
	pulumi.Input

	ToUrlFileExtensionOperatorOutput() UrlFileExtensionOperatorOutput
	ToUrlFileExtensionOperatorOutputWithContext(context.Context) UrlFileExtensionOperatorOutput
}

var urlFileExtensionOperatorPtrType = reflect.TypeOf((**UrlFileExtensionOperator)(nil)).Elem()

type UrlFileExtensionOperatorPtrInput interface {
	pulumi.Input

	ToUrlFileExtensionOperatorPtrOutput() UrlFileExtensionOperatorPtrOutput
	ToUrlFileExtensionOperatorPtrOutputWithContext(context.Context) UrlFileExtensionOperatorPtrOutput
}

type urlFileExtensionOperatorPtr string

func UrlFileExtensionOperatorPtr(v string) UrlFileExtensionOperatorPtrInput {
	return (*urlFileExtensionOperatorPtr)(&v)
}

func (*urlFileExtensionOperatorPtr) ElementType() reflect.Type {
	return urlFileExtensionOperatorPtrType
}

func (in *urlFileExtensionOperatorPtr) ToUrlFileExtensionOperatorPtrOutput() UrlFileExtensionOperatorPtrOutput {
	return pulumi.ToOutput(in).(UrlFileExtensionOperatorPtrOutput)
}

func (in *urlFileExtensionOperatorPtr) ToUrlFileExtensionOperatorPtrOutputWithContext(ctx context.Context) UrlFileExtensionOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UrlFileExtensionOperatorPtrOutput)
}

// Describes operator to be matched
type UrlFileNameOperator string

const (
	UrlFileNameOperatorAny                = UrlFileNameOperator("Any")
	UrlFileNameOperatorEqual              = UrlFileNameOperator("Equal")
	UrlFileNameOperatorContains           = UrlFileNameOperator("Contains")
	UrlFileNameOperatorBeginsWith         = UrlFileNameOperator("BeginsWith")
	UrlFileNameOperatorEndsWith           = UrlFileNameOperator("EndsWith")
	UrlFileNameOperatorLessThan           = UrlFileNameOperator("LessThan")
	UrlFileNameOperatorLessThanOrEqual    = UrlFileNameOperator("LessThanOrEqual")
	UrlFileNameOperatorGreaterThan        = UrlFileNameOperator("GreaterThan")
	UrlFileNameOperatorGreaterThanOrEqual = UrlFileNameOperator("GreaterThanOrEqual")
)

func (UrlFileNameOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlFileNameOperator)(nil)).Elem()
}

func (e UrlFileNameOperator) ToUrlFileNameOperatorOutput() UrlFileNameOperatorOutput {
	return pulumi.ToOutput(e).(UrlFileNameOperatorOutput)
}

func (e UrlFileNameOperator) ToUrlFileNameOperatorOutputWithContext(ctx context.Context) UrlFileNameOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UrlFileNameOperatorOutput)
}

func (e UrlFileNameOperator) ToUrlFileNameOperatorPtrOutput() UrlFileNameOperatorPtrOutput {
	return e.ToUrlFileNameOperatorPtrOutputWithContext(context.Background())
}

func (e UrlFileNameOperator) ToUrlFileNameOperatorPtrOutputWithContext(ctx context.Context) UrlFileNameOperatorPtrOutput {
	return UrlFileNameOperator(e).ToUrlFileNameOperatorOutputWithContext(ctx).ToUrlFileNameOperatorPtrOutputWithContext(ctx)
}

func (e UrlFileNameOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlFileNameOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlFileNameOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlFileNameOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UrlFileNameOperatorOutput struct{ *pulumi.OutputState }

func (UrlFileNameOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlFileNameOperator)(nil)).Elem()
}

func (o UrlFileNameOperatorOutput) ToUrlFileNameOperatorOutput() UrlFileNameOperatorOutput {
	return o
}

func (o UrlFileNameOperatorOutput) ToUrlFileNameOperatorOutputWithContext(ctx context.Context) UrlFileNameOperatorOutput {
	return o
}

func (o UrlFileNameOperatorOutput) ToUrlFileNameOperatorPtrOutput() UrlFileNameOperatorPtrOutput {
	return o.ToUrlFileNameOperatorPtrOutputWithContext(context.Background())
}

func (o UrlFileNameOperatorOutput) ToUrlFileNameOperatorPtrOutputWithContext(ctx context.Context) UrlFileNameOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UrlFileNameOperator) *UrlFileNameOperator {
		return &v
	}).(UrlFileNameOperatorPtrOutput)
}

func (o UrlFileNameOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UrlFileNameOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UrlFileNameOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UrlFileNameOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UrlFileNameOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UrlFileNameOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UrlFileNameOperatorPtrOutput struct{ *pulumi.OutputState }

func (UrlFileNameOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlFileNameOperator)(nil)).Elem()
}

func (o UrlFileNameOperatorPtrOutput) ToUrlFileNameOperatorPtrOutput() UrlFileNameOperatorPtrOutput {
	return o
}

func (o UrlFileNameOperatorPtrOutput) ToUrlFileNameOperatorPtrOutputWithContext(ctx context.Context) UrlFileNameOperatorPtrOutput {
	return o
}

func (o UrlFileNameOperatorPtrOutput) Elem() UrlFileNameOperatorOutput {
	return o.ApplyT(func(v *UrlFileNameOperator) UrlFileNameOperator {
		if v != nil {
			return *v
		}
		var ret UrlFileNameOperator
		return ret
	}).(UrlFileNameOperatorOutput)
}

func (o UrlFileNameOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UrlFileNameOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UrlFileNameOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UrlFileNameOperatorInput is an input type that accepts UrlFileNameOperatorArgs and UrlFileNameOperatorOutput values.
// You can construct a concrete instance of `UrlFileNameOperatorInput` via:
//
//          UrlFileNameOperatorArgs{...}
type UrlFileNameOperatorInput interface {
	pulumi.Input

	ToUrlFileNameOperatorOutput() UrlFileNameOperatorOutput
	ToUrlFileNameOperatorOutputWithContext(context.Context) UrlFileNameOperatorOutput
}

var urlFileNameOperatorPtrType = reflect.TypeOf((**UrlFileNameOperator)(nil)).Elem()

type UrlFileNameOperatorPtrInput interface {
	pulumi.Input

	ToUrlFileNameOperatorPtrOutput() UrlFileNameOperatorPtrOutput
	ToUrlFileNameOperatorPtrOutputWithContext(context.Context) UrlFileNameOperatorPtrOutput
}

type urlFileNameOperatorPtr string

func UrlFileNameOperatorPtr(v string) UrlFileNameOperatorPtrInput {
	return (*urlFileNameOperatorPtr)(&v)
}

func (*urlFileNameOperatorPtr) ElementType() reflect.Type {
	return urlFileNameOperatorPtrType
}

func (in *urlFileNameOperatorPtr) ToUrlFileNameOperatorPtrOutput() UrlFileNameOperatorPtrOutput {
	return pulumi.ToOutput(in).(UrlFileNameOperatorPtrOutput)
}

func (in *urlFileNameOperatorPtr) ToUrlFileNameOperatorPtrOutputWithContext(ctx context.Context) UrlFileNameOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UrlFileNameOperatorPtrOutput)
}

// Describes operator to be matched
type UrlPathOperator string

const (
	UrlPathOperatorAny                = UrlPathOperator("Any")
	UrlPathOperatorEqual              = UrlPathOperator("Equal")
	UrlPathOperatorContains           = UrlPathOperator("Contains")
	UrlPathOperatorBeginsWith         = UrlPathOperator("BeginsWith")
	UrlPathOperatorEndsWith           = UrlPathOperator("EndsWith")
	UrlPathOperatorLessThan           = UrlPathOperator("LessThan")
	UrlPathOperatorLessThanOrEqual    = UrlPathOperator("LessThanOrEqual")
	UrlPathOperatorGreaterThan        = UrlPathOperator("GreaterThan")
	UrlPathOperatorGreaterThanOrEqual = UrlPathOperator("GreaterThanOrEqual")
	UrlPathOperatorWildcard           = UrlPathOperator("Wildcard")
)

func (UrlPathOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlPathOperator)(nil)).Elem()
}

func (e UrlPathOperator) ToUrlPathOperatorOutput() UrlPathOperatorOutput {
	return pulumi.ToOutput(e).(UrlPathOperatorOutput)
}

func (e UrlPathOperator) ToUrlPathOperatorOutputWithContext(ctx context.Context) UrlPathOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UrlPathOperatorOutput)
}

func (e UrlPathOperator) ToUrlPathOperatorPtrOutput() UrlPathOperatorPtrOutput {
	return e.ToUrlPathOperatorPtrOutputWithContext(context.Background())
}

func (e UrlPathOperator) ToUrlPathOperatorPtrOutputWithContext(ctx context.Context) UrlPathOperatorPtrOutput {
	return UrlPathOperator(e).ToUrlPathOperatorOutputWithContext(ctx).ToUrlPathOperatorPtrOutputWithContext(ctx)
}

func (e UrlPathOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlPathOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlPathOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlPathOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UrlPathOperatorOutput struct{ *pulumi.OutputState }

func (UrlPathOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlPathOperator)(nil)).Elem()
}

func (o UrlPathOperatorOutput) ToUrlPathOperatorOutput() UrlPathOperatorOutput {
	return o
}

func (o UrlPathOperatorOutput) ToUrlPathOperatorOutputWithContext(ctx context.Context) UrlPathOperatorOutput {
	return o
}

func (o UrlPathOperatorOutput) ToUrlPathOperatorPtrOutput() UrlPathOperatorPtrOutput {
	return o.ToUrlPathOperatorPtrOutputWithContext(context.Background())
}

func (o UrlPathOperatorOutput) ToUrlPathOperatorPtrOutputWithContext(ctx context.Context) UrlPathOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UrlPathOperator) *UrlPathOperator {
		return &v
	}).(UrlPathOperatorPtrOutput)
}

func (o UrlPathOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UrlPathOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UrlPathOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UrlPathOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UrlPathOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UrlPathOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UrlPathOperatorPtrOutput struct{ *pulumi.OutputState }

func (UrlPathOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlPathOperator)(nil)).Elem()
}

func (o UrlPathOperatorPtrOutput) ToUrlPathOperatorPtrOutput() UrlPathOperatorPtrOutput {
	return o
}

func (o UrlPathOperatorPtrOutput) ToUrlPathOperatorPtrOutputWithContext(ctx context.Context) UrlPathOperatorPtrOutput {
	return o
}

func (o UrlPathOperatorPtrOutput) Elem() UrlPathOperatorOutput {
	return o.ApplyT(func(v *UrlPathOperator) UrlPathOperator {
		if v != nil {
			return *v
		}
		var ret UrlPathOperator
		return ret
	}).(UrlPathOperatorOutput)
}

func (o UrlPathOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UrlPathOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UrlPathOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UrlPathOperatorInput is an input type that accepts UrlPathOperatorArgs and UrlPathOperatorOutput values.
// You can construct a concrete instance of `UrlPathOperatorInput` via:
//
//          UrlPathOperatorArgs{...}
type UrlPathOperatorInput interface {
	pulumi.Input

	ToUrlPathOperatorOutput() UrlPathOperatorOutput
	ToUrlPathOperatorOutputWithContext(context.Context) UrlPathOperatorOutput
}

var urlPathOperatorPtrType = reflect.TypeOf((**UrlPathOperator)(nil)).Elem()

type UrlPathOperatorPtrInput interface {
	pulumi.Input

	ToUrlPathOperatorPtrOutput() UrlPathOperatorPtrOutput
	ToUrlPathOperatorPtrOutputWithContext(context.Context) UrlPathOperatorPtrOutput
}

type urlPathOperatorPtr string

func UrlPathOperatorPtr(v string) UrlPathOperatorPtrInput {
	return (*urlPathOperatorPtr)(&v)
}

func (*urlPathOperatorPtr) ElementType() reflect.Type {
	return urlPathOperatorPtrType
}

func (in *urlPathOperatorPtr) ToUrlPathOperatorPtrOutput() UrlPathOperatorPtrOutput {
	return pulumi.ToOutput(in).(UrlPathOperatorPtrOutput)
}

func (in *urlPathOperatorPtr) ToUrlPathOperatorPtrOutputWithContext(ctx context.Context) UrlPathOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UrlPathOperatorPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionTypeOutput{})
	pulumi.RegisterOutputType(ActionTypePtrOutput{})
	pulumi.RegisterOutputType(AlgorithmOutput{})
	pulumi.RegisterOutputType(AlgorithmPtrOutput{})
	pulumi.RegisterOutputType(CacheBehaviorOutput{})
	pulumi.RegisterOutputType(CacheBehaviorPtrOutput{})
	pulumi.RegisterOutputType(CacheTypeOutput{})
	pulumi.RegisterOutputType(CacheTypePtrOutput{})
	pulumi.RegisterOutputType(CookiesOperatorOutput{})
	pulumi.RegisterOutputType(CookiesOperatorPtrOutput{})
	pulumi.RegisterOutputType(CustomRuleEnabledStateOutput{})
	pulumi.RegisterOutputType(CustomRuleEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(DeliveryRuleActionOutput{})
	pulumi.RegisterOutputType(DeliveryRuleActionPtrOutput{})
	pulumi.RegisterOutputType(DestinationProtocolOutput{})
	pulumi.RegisterOutputType(DestinationProtocolPtrOutput{})
	pulumi.RegisterOutputType(GeoFilterActionsOutput{})
	pulumi.RegisterOutputType(GeoFilterActionsPtrOutput{})
	pulumi.RegisterOutputType(HeaderActionOutput{})
	pulumi.RegisterOutputType(HeaderActionPtrOutput{})
	pulumi.RegisterOutputType(HealthProbeRequestTypeOutput{})
	pulumi.RegisterOutputType(HealthProbeRequestTypePtrOutput{})
	pulumi.RegisterOutputType(HttpVersionOperatorOutput{})
	pulumi.RegisterOutputType(HttpVersionOperatorPtrOutput{})
	pulumi.RegisterOutputType(IsDeviceOperatorOutput{})
	pulumi.RegisterOutputType(IsDeviceOperatorPtrOutput{})
	pulumi.RegisterOutputType(ManagedRuleEnabledStateOutput{})
	pulumi.RegisterOutputType(ManagedRuleEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(MatchVariableOutput{})
	pulumi.RegisterOutputType(MatchVariablePtrOutput{})
	pulumi.RegisterOutputType(OperatorOutput{})
	pulumi.RegisterOutputType(OperatorPtrOutput{})
	pulumi.RegisterOutputType(OptimizationTypeOutput{})
	pulumi.RegisterOutputType(OptimizationTypePtrOutput{})
	pulumi.RegisterOutputType(ParamIndicatorOutput{})
	pulumi.RegisterOutputType(ParamIndicatorPtrOutput{})
	pulumi.RegisterOutputType(PolicyEnabledStateOutput{})
	pulumi.RegisterOutputType(PolicyEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(PolicyModeOutput{})
	pulumi.RegisterOutputType(PolicyModePtrOutput{})
	pulumi.RegisterOutputType(PostArgsOperatorOutput{})
	pulumi.RegisterOutputType(PostArgsOperatorPtrOutput{})
	pulumi.RegisterOutputType(ProbeProtocolOutput{})
	pulumi.RegisterOutputType(ProbeProtocolPtrOutput{})
	pulumi.RegisterOutputType(QueryStringBehaviorOutput{})
	pulumi.RegisterOutputType(QueryStringBehaviorPtrOutput{})
	pulumi.RegisterOutputType(QueryStringCachingBehaviorOutput{})
	pulumi.RegisterOutputType(QueryStringCachingBehaviorPtrOutput{})
	pulumi.RegisterOutputType(QueryStringOperatorOutput{})
	pulumi.RegisterOutputType(QueryStringOperatorPtrOutput{})
	pulumi.RegisterOutputType(RedirectTypeOutput{})
	pulumi.RegisterOutputType(RedirectTypePtrOutput{})
	pulumi.RegisterOutputType(RemoteAddressOperatorOutput{})
	pulumi.RegisterOutputType(RemoteAddressOperatorPtrOutput{})
	pulumi.RegisterOutputType(RequestBodyOperatorOutput{})
	pulumi.RegisterOutputType(RequestBodyOperatorPtrOutput{})
	pulumi.RegisterOutputType(RequestHeaderOperatorOutput{})
	pulumi.RegisterOutputType(RequestHeaderOperatorPtrOutput{})
	pulumi.RegisterOutputType(RequestMethodOperatorOutput{})
	pulumi.RegisterOutputType(RequestMethodOperatorPtrOutput{})
	pulumi.RegisterOutputType(RequestUriOperatorOutput{})
	pulumi.RegisterOutputType(RequestUriOperatorPtrOutput{})
	pulumi.RegisterOutputType(ResponseBasedDetectedErrorTypesOutput{})
	pulumi.RegisterOutputType(ResponseBasedDetectedErrorTypesPtrOutput{})
	pulumi.RegisterOutputType(SkuNameOutput{})
	pulumi.RegisterOutputType(SkuNamePtrOutput{})
	pulumi.RegisterOutputType(TransformOutput{})
	pulumi.RegisterOutputType(TransformPtrOutput{})
	pulumi.RegisterOutputType(TransformTypeOutput{})
	pulumi.RegisterOutputType(TransformTypePtrOutput{})
	pulumi.RegisterOutputType(UrlFileExtensionOperatorOutput{})
	pulumi.RegisterOutputType(UrlFileExtensionOperatorPtrOutput{})
	pulumi.RegisterOutputType(UrlFileNameOperatorOutput{})
	pulumi.RegisterOutputType(UrlFileNameOperatorPtrOutput{})
	pulumi.RegisterOutputType(UrlPathOperatorOutput{})
	pulumi.RegisterOutputType(UrlPathOperatorPtrOutput{})
}
