// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Supported protocols for the customer's endpoint.
type AFDEndpointProtocols pulumi.String

const (
	AFDEndpointProtocolsHttp  = AFDEndpointProtocols("Http")
	AFDEndpointProtocolsHttps = AFDEndpointProtocols("Https")
)

func (AFDEndpointProtocols) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AFDEndpointProtocols) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AFDEndpointProtocols) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AFDEndpointProtocols) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AFDEndpointProtocols) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes what action to be applied when rule matches
type ActionType pulumi.String

const (
	ActionTypeAllow    = ActionType("Allow")
	ActionTypeBlock    = ActionType("Block")
	ActionTypeLog      = ActionType("Log")
	ActionTypeRedirect = ActionType("Redirect")
)

func (ActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines the source of the SSL certificate.
type AfdCertificateType pulumi.String

const (
	AfdCertificateTypeCustomerCertificate = AfdCertificateType("CustomerCertificate")
	AfdCertificateTypeManagedCertificate  = AfdCertificateType("ManagedCertificate")
)

func (AfdCertificateType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AfdCertificateType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AfdCertificateType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AfdCertificateType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AfdCertificateType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// TLS protocol version that will be used for Https
type AfdMinimumTlsVersion pulumi.String

const (
	AfdMinimumTlsVersionTLS10 = AfdMinimumTlsVersion("TLS10")
	AfdMinimumTlsVersionTLS12 = AfdMinimumTlsVersion("TLS12")
)

func (AfdMinimumTlsVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AfdMinimumTlsVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AfdMinimumTlsVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AfdMinimumTlsVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AfdMinimumTlsVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
type AfdQueryStringCachingBehavior pulumi.String

const (
	AfdQueryStringCachingBehaviorIgnoreQueryString = AfdQueryStringCachingBehavior("IgnoreQueryString")
	AfdQueryStringCachingBehaviorUseQueryString    = AfdQueryStringCachingBehavior("UseQueryString")
	AfdQueryStringCachingBehaviorNotSet            = AfdQueryStringCachingBehavior("NotSet")
)

func (AfdQueryStringCachingBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AfdQueryStringCachingBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AfdQueryStringCachingBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AfdQueryStringCachingBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AfdQueryStringCachingBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Algorithm to use for URL signing
type Algorithm pulumi.String

const (
	AlgorithmSHA256 = Algorithm("SHA256")
)

func (Algorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e Algorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Algorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Algorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Algorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Caching behavior for the requests
type CacheBehavior pulumi.String

const (
	CacheBehaviorBypassCache  = CacheBehavior("BypassCache")
	CacheBehaviorOverride     = CacheBehavior("Override")
	CacheBehaviorSetIfMissing = CacheBehavior("SetIfMissing")
)

func (CacheBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CacheBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CacheBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The level at which the content needs to be cached.
type CacheType pulumi.String

const (
	CacheTypeAll = CacheType("All")
)

func (CacheType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CacheType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CacheType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type CookiesOperator pulumi.String

const (
	CookiesOperatorAny                = CookiesOperator("Any")
	CookiesOperatorEqual              = CookiesOperator("Equal")
	CookiesOperatorContains           = CookiesOperator("Contains")
	CookiesOperatorBeginsWith         = CookiesOperator("BeginsWith")
	CookiesOperatorEndsWith           = CookiesOperator("EndsWith")
	CookiesOperatorLessThan           = CookiesOperator("LessThan")
	CookiesOperatorLessThanOrEqual    = CookiesOperator("LessThanOrEqual")
	CookiesOperatorGreaterThan        = CookiesOperator("GreaterThan")
	CookiesOperatorGreaterThanOrEqual = CookiesOperator("GreaterThanOrEqual")
	CookiesOperatorRegEx              = CookiesOperator("RegEx")
)

func (CookiesOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CookiesOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CookiesOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CookiesOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CookiesOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
type CustomRuleEnabledState pulumi.String

const (
	CustomRuleEnabledStateDisabled = CustomRuleEnabledState("Disabled")
	CustomRuleEnabledStateEnabled  = CustomRuleEnabledState("Enabled")
)

func (CustomRuleEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CustomRuleEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CustomRuleEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CustomRuleEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CustomRuleEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The name of the action for the delivery rule.
type DeliveryRuleAction pulumi.String

const (
	DeliveryRuleActionCacheExpiration      = DeliveryRuleAction("CacheExpiration")
	DeliveryRuleActionCacheKeyQueryString  = DeliveryRuleAction("CacheKeyQueryString")
	DeliveryRuleActionModifyRequestHeader  = DeliveryRuleAction("ModifyRequestHeader")
	DeliveryRuleActionModifyResponseHeader = DeliveryRuleAction("ModifyResponseHeader")
	DeliveryRuleActionUrlRedirect          = DeliveryRuleAction("UrlRedirect")
	DeliveryRuleActionUrlRewrite           = DeliveryRuleAction("UrlRewrite")
	DeliveryRuleActionUrlSigning           = DeliveryRuleAction("UrlSigning")
	DeliveryRuleActionOriginGroupOverride  = DeliveryRuleAction("OriginGroupOverride")
)

func (DeliveryRuleAction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DeliveryRuleAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeliveryRuleAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeliveryRuleAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeliveryRuleAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Protocol to use for the redirect. The default value is MatchRequest
type DestinationProtocol pulumi.String

const (
	DestinationProtocolMatchRequest = DestinationProtocol("MatchRequest")
	DestinationProtocolHttp         = DestinationProtocol("Http")
	DestinationProtocolHttps        = DestinationProtocol("Https")
)

func (DestinationProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DestinationProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DestinationProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
type EnabledState pulumi.String

const (
	EnabledStateEnabled  = EnabledState("Enabled")
	EnabledStateDisabled = EnabledState("Disabled")
)

func (EnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e EnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Protocol this rule will use when forwarding traffic to backends.
type ForwardingProtocol pulumi.String

const (
	ForwardingProtocolHttpOnly     = ForwardingProtocol("HttpOnly")
	ForwardingProtocolHttpsOnly    = ForwardingProtocol("HttpsOnly")
	ForwardingProtocolMatchRequest = ForwardingProtocol("MatchRequest")
)

func (ForwardingProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ForwardingProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ForwardingProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Action of the geo filter, i.e. allow or block access.
type GeoFilterActions pulumi.String

const (
	GeoFilterActionsBlock = GeoFilterActions("Block")
	GeoFilterActionsAllow = GeoFilterActions("Allow")
)

func (GeoFilterActions) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GeoFilterActions) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GeoFilterActions) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GeoFilterActions) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GeoFilterActions) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Action to perform
type HeaderAction pulumi.String

const (
	HeaderActionAppend    = HeaderAction("Append")
	HeaderActionOverwrite = HeaderAction("Overwrite")
	HeaderActionDelete    = HeaderAction("Delete")
)

func (HeaderAction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HeaderAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HeaderAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HeaderAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HeaderAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of health probe request that is made.
type HealthProbeRequestType pulumi.String

const (
	HealthProbeRequestTypeNotSet = HealthProbeRequestType("NotSet")
	HealthProbeRequestTypeGET    = HealthProbeRequestType("GET")
	HealthProbeRequestTypeHEAD   = HealthProbeRequestType("HEAD")
)

func (HealthProbeRequestType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HealthProbeRequestType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthProbeRequestType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthProbeRequestType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HealthProbeRequestType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type HttpVersionOperator pulumi.String

const (
	HttpVersionOperatorEqual = HttpVersionOperator("Equal")
)

func (HttpVersionOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HttpVersionOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpVersionOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpVersionOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpVersionOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
type HttpsRedirect pulumi.String

const (
	HttpsRedirectEnabled  = HttpsRedirect("Enabled")
	HttpsRedirectDisabled = HttpsRedirect("Disabled")
)

func (HttpsRedirect) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HttpsRedirect) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpsRedirect) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpsRedirect) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpsRedirect) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type IsDeviceOperator pulumi.String

const (
	IsDeviceOperatorEqual = IsDeviceOperator("Equal")
)

func (IsDeviceOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e IsDeviceOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IsDeviceOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IsDeviceOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IsDeviceOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// whether this route will be linked to the default endpoint domain.
type LinkToDefaultDomain pulumi.String

const (
	LinkToDefaultDomainEnabled  = LinkToDefaultDomain("Enabled")
	LinkToDefaultDomainDisabled = LinkToDefaultDomain("Disabled")
)

func (LinkToDefaultDomain) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e LinkToDefaultDomain) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LinkToDefaultDomain) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LinkToDefaultDomain) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LinkToDefaultDomain) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
type ManagedRuleEnabledState pulumi.String

const (
	ManagedRuleEnabledStateDisabled = ManagedRuleEnabledState("Disabled")
	ManagedRuleEnabledStateEnabled  = ManagedRuleEnabledState("Enabled")
)

func (ManagedRuleEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ManagedRuleEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedRuleEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
type MatchProcessingBehavior pulumi.String

const (
	MatchProcessingBehaviorContinue = MatchProcessingBehavior("Continue")
	MatchProcessingBehaviorStop     = MatchProcessingBehavior("Stop")
)

func (MatchProcessingBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e MatchProcessingBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchProcessingBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchProcessingBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MatchProcessingBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The name of the condition for the delivery rule.
type MatchVariable pulumi.String

const (
	MatchVariableRemoteAddress    = MatchVariable("RemoteAddress")
	MatchVariableRequestMethod    = MatchVariable("RequestMethod")
	MatchVariableQueryString      = MatchVariable("QueryString")
	MatchVariablePostArgs         = MatchVariable("PostArgs")
	MatchVariableRequestUri       = MatchVariable("RequestUri")
	MatchVariableRequestHeader    = MatchVariable("RequestHeader")
	MatchVariableRequestBody      = MatchVariable("RequestBody")
	MatchVariableRequestScheme    = MatchVariable("RequestScheme")
	MatchVariableUrlPath          = MatchVariable("UrlPath")
	MatchVariableUrlFileExtension = MatchVariable("UrlFileExtension")
	MatchVariableUrlFileName      = MatchVariable("UrlFileName")
	MatchVariableHttpVersion      = MatchVariable("HttpVersion")
	MatchVariableCookies          = MatchVariable("Cookies")
	MatchVariableIsDevice         = MatchVariable("IsDevice")
)

func (MatchVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e MatchVariable) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchVariable) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchVariable) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MatchVariable) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type Operator pulumi.String

const (
	OperatorAny                = Operator("Any")
	OperatorIPMatch            = Operator("IPMatch")
	OperatorGeoMatch           = Operator("GeoMatch")
	OperatorEqual              = Operator("Equal")
	OperatorContains           = Operator("Contains")
	OperatorLessThan           = Operator("LessThan")
	OperatorGreaterThan        = Operator("GreaterThan")
	OperatorLessThanOrEqual    = Operator("LessThanOrEqual")
	OperatorGreaterThanOrEqual = Operator("GreaterThanOrEqual")
	OperatorBeginsWith         = Operator("BeginsWith")
	OperatorEndsWith           = Operator("EndsWith")
	OperatorRegEx              = Operator("RegEx")
)

func (Operator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e Operator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Operator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
type OptimizationType pulumi.String

const (
	OptimizationTypeGeneralWebDelivery          = OptimizationType("GeneralWebDelivery")
	OptimizationTypeGeneralMediaStreaming       = OptimizationType("GeneralMediaStreaming")
	OptimizationTypeVideoOnDemandMediaStreaming = OptimizationType("VideoOnDemandMediaStreaming")
	OptimizationTypeLargeFileDownload           = OptimizationType("LargeFileDownload")
	OptimizationTypeDynamicSiteAcceleration     = OptimizationType("DynamicSiteAcceleration")
)

func (OptimizationType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e OptimizationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OptimizationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OptimizationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OptimizationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates the purpose of the parameter
type ParamIndicator pulumi.String

const (
	ParamIndicatorExpires   = ParamIndicator("Expires")
	ParamIndicatorKeyId     = ParamIndicator("KeyId")
	ParamIndicatorSignature = ParamIndicator("Signature")
)

func (ParamIndicator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ParamIndicator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ParamIndicator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ParamIndicator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ParamIndicator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// describes if the policy is in enabled state or disabled state
type PolicyEnabledState pulumi.String

const (
	PolicyEnabledStateDisabled = PolicyEnabledState("Disabled")
	PolicyEnabledStateEnabled  = PolicyEnabledState("Enabled")
)

func (PolicyEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PolicyEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes if it is in detection mode or prevention mode at policy level.
type PolicyMode pulumi.String

const (
	PolicyModePrevention = PolicyMode("Prevention")
	PolicyModeDetection  = PolicyMode("Detection")
)

func (PolicyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PolicyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type PostArgsOperator pulumi.String

const (
	PostArgsOperatorAny                = PostArgsOperator("Any")
	PostArgsOperatorEqual              = PostArgsOperator("Equal")
	PostArgsOperatorContains           = PostArgsOperator("Contains")
	PostArgsOperatorBeginsWith         = PostArgsOperator("BeginsWith")
	PostArgsOperatorEndsWith           = PostArgsOperator("EndsWith")
	PostArgsOperatorLessThan           = PostArgsOperator("LessThan")
	PostArgsOperatorLessThanOrEqual    = PostArgsOperator("LessThanOrEqual")
	PostArgsOperatorGreaterThan        = PostArgsOperator("GreaterThan")
	PostArgsOperatorGreaterThanOrEqual = PostArgsOperator("GreaterThanOrEqual")
	PostArgsOperatorRegEx              = PostArgsOperator("RegEx")
)

func (PostArgsOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PostArgsOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PostArgsOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PostArgsOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PostArgsOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Protocol to use for health probe.
type ProbeProtocol pulumi.String

const (
	ProbeProtocolNotSet = ProbeProtocol("NotSet")
	ProbeProtocolHttp   = ProbeProtocol("Http")
	ProbeProtocolHttps  = ProbeProtocol("Https")
)

func (ProbeProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ProbeProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProbeProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProbeProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProbeProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Caching behavior for the requests
type QueryStringBehavior pulumi.String

const (
	QueryStringBehaviorInclude    = QueryStringBehavior("Include")
	QueryStringBehaviorIncludeAll = QueryStringBehavior("IncludeAll")
	QueryStringBehaviorExclude    = QueryStringBehavior("Exclude")
	QueryStringBehaviorExcludeAll = QueryStringBehavior("ExcludeAll")
)

func (QueryStringBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e QueryStringBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e QueryStringBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
type QueryStringCachingBehavior pulumi.String

const (
	QueryStringCachingBehaviorIgnoreQueryString = QueryStringCachingBehavior("IgnoreQueryString")
	QueryStringCachingBehaviorBypassCaching     = QueryStringCachingBehavior("BypassCaching")
	QueryStringCachingBehaviorUseQueryString    = QueryStringCachingBehavior("UseQueryString")
	QueryStringCachingBehaviorNotSet            = QueryStringCachingBehavior("NotSet")
)

func (QueryStringCachingBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e QueryStringCachingBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringCachingBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringCachingBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e QueryStringCachingBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type QueryStringOperator pulumi.String

const (
	QueryStringOperatorAny                = QueryStringOperator("Any")
	QueryStringOperatorEqual              = QueryStringOperator("Equal")
	QueryStringOperatorContains           = QueryStringOperator("Contains")
	QueryStringOperatorBeginsWith         = QueryStringOperator("BeginsWith")
	QueryStringOperatorEndsWith           = QueryStringOperator("EndsWith")
	QueryStringOperatorLessThan           = QueryStringOperator("LessThan")
	QueryStringOperatorLessThanOrEqual    = QueryStringOperator("LessThanOrEqual")
	QueryStringOperatorGreaterThan        = QueryStringOperator("GreaterThan")
	QueryStringOperatorGreaterThanOrEqual = QueryStringOperator("GreaterThanOrEqual")
	QueryStringOperatorRegEx              = QueryStringOperator("RegEx")
)

func (QueryStringOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e QueryStringOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e QueryStringOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The redirect type the rule will use when redirecting traffic.
type RedirectType pulumi.String

const (
	RedirectTypeMoved             = RedirectType("Moved")
	RedirectTypeFound             = RedirectType("Found")
	RedirectTypeTemporaryRedirect = RedirectType("TemporaryRedirect")
	RedirectTypePermanentRedirect = RedirectType("PermanentRedirect")
)

func (RedirectType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RedirectType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RedirectType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RedirectType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RedirectType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type RemoteAddressOperator pulumi.String

const (
	RemoteAddressOperatorAny      = RemoteAddressOperator("Any")
	RemoteAddressOperatorIPMatch  = RemoteAddressOperator("IPMatch")
	RemoteAddressOperatorGeoMatch = RemoteAddressOperator("GeoMatch")
)

func (RemoteAddressOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RemoteAddressOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RemoteAddressOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RemoteAddressOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RemoteAddressOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type RequestBodyOperator pulumi.String

const (
	RequestBodyOperatorAny                = RequestBodyOperator("Any")
	RequestBodyOperatorEqual              = RequestBodyOperator("Equal")
	RequestBodyOperatorContains           = RequestBodyOperator("Contains")
	RequestBodyOperatorBeginsWith         = RequestBodyOperator("BeginsWith")
	RequestBodyOperatorEndsWith           = RequestBodyOperator("EndsWith")
	RequestBodyOperatorLessThan           = RequestBodyOperator("LessThan")
	RequestBodyOperatorLessThanOrEqual    = RequestBodyOperator("LessThanOrEqual")
	RequestBodyOperatorGreaterThan        = RequestBodyOperator("GreaterThan")
	RequestBodyOperatorGreaterThanOrEqual = RequestBodyOperator("GreaterThanOrEqual")
	RequestBodyOperatorRegEx              = RequestBodyOperator("RegEx")
)

func (RequestBodyOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RequestBodyOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestBodyOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestBodyOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RequestBodyOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type RequestHeaderOperator pulumi.String

const (
	RequestHeaderOperatorAny                = RequestHeaderOperator("Any")
	RequestHeaderOperatorEqual              = RequestHeaderOperator("Equal")
	RequestHeaderOperatorContains           = RequestHeaderOperator("Contains")
	RequestHeaderOperatorBeginsWith         = RequestHeaderOperator("BeginsWith")
	RequestHeaderOperatorEndsWith           = RequestHeaderOperator("EndsWith")
	RequestHeaderOperatorLessThan           = RequestHeaderOperator("LessThan")
	RequestHeaderOperatorLessThanOrEqual    = RequestHeaderOperator("LessThanOrEqual")
	RequestHeaderOperatorGreaterThan        = RequestHeaderOperator("GreaterThan")
	RequestHeaderOperatorGreaterThanOrEqual = RequestHeaderOperator("GreaterThanOrEqual")
	RequestHeaderOperatorRegEx              = RequestHeaderOperator("RegEx")
)

func (RequestHeaderOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RequestHeaderOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestHeaderOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestHeaderOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RequestHeaderOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type RequestMethodOperator pulumi.String

const (
	RequestMethodOperatorEqual = RequestMethodOperator("Equal")
)

func (RequestMethodOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RequestMethodOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestMethodOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestMethodOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RequestMethodOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type RequestUriOperator pulumi.String

const (
	RequestUriOperatorAny                = RequestUriOperator("Any")
	RequestUriOperatorEqual              = RequestUriOperator("Equal")
	RequestUriOperatorContains           = RequestUriOperator("Contains")
	RequestUriOperatorBeginsWith         = RequestUriOperator("BeginsWith")
	RequestUriOperatorEndsWith           = RequestUriOperator("EndsWith")
	RequestUriOperatorLessThan           = RequestUriOperator("LessThan")
	RequestUriOperatorLessThanOrEqual    = RequestUriOperator("LessThanOrEqual")
	RequestUriOperatorGreaterThan        = RequestUriOperator("GreaterThan")
	RequestUriOperatorGreaterThanOrEqual = RequestUriOperator("GreaterThanOrEqual")
	RequestUriOperatorRegEx              = RequestUriOperator("RegEx")
)

func (RequestUriOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RequestUriOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestUriOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RequestUriOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RequestUriOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of response errors for real user requests for which origin will be deemed unhealthy
type ResponseBasedDetectedErrorTypes pulumi.String

const (
	ResponseBasedDetectedErrorTypesNone             = ResponseBasedDetectedErrorTypes("None")
	ResponseBasedDetectedErrorTypesTcpErrorsOnly    = ResponseBasedDetectedErrorTypes("TcpErrorsOnly")
	ResponseBasedDetectedErrorTypesTcpAndHttpErrors = ResponseBasedDetectedErrorTypes("TcpAndHttpErrors")
)

func (ResponseBasedDetectedErrorTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResponseBasedDetectedErrorTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResponseBasedDetectedErrorTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of the Secret to create.
type SecretType pulumi.String

const (
	SecretTypeUrlSigningKey       = SecretType("UrlSigningKey")
	SecretTypeCustomerCertificate = SecretType("CustomerCertificate")
	SecretTypeManagedCertificate  = SecretType("ManagedCertificate")
)

func (SecretType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SecretType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecretType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecretType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SecretType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of the Security policy to create.
type SecurityPolicyType pulumi.String

const (
	SecurityPolicyTypeWebApplicationFirewall = SecurityPolicyType("WebApplicationFirewall")
)

func (SecurityPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SecurityPolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityPolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityPolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SecurityPolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Status of the shared private link resource. Can be Pending, Approved, Rejected, Disconnected, or Timeout.
type SharedPrivateLinkResourceStatus pulumi.String

const (
	SharedPrivateLinkResourceStatusPending      = SharedPrivateLinkResourceStatus("Pending")
	SharedPrivateLinkResourceStatusApproved     = SharedPrivateLinkResourceStatus("Approved")
	SharedPrivateLinkResourceStatusRejected     = SharedPrivateLinkResourceStatus("Rejected")
	SharedPrivateLinkResourceStatusDisconnected = SharedPrivateLinkResourceStatus("Disconnected")
	SharedPrivateLinkResourceStatusTimeout      = SharedPrivateLinkResourceStatus("Timeout")
)

func (SharedPrivateLinkResourceStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SharedPrivateLinkResourceStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SharedPrivateLinkResourceStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SharedPrivateLinkResourceStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SharedPrivateLinkResourceStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Name of the pricing tier.
type SkuName pulumi.String

const (
	SkuName_Standard_Verizon                   = SkuName("Standard_Verizon")
	SkuName_Premium_Verizon                    = SkuName("Premium_Verizon")
	SkuName_Custom_Verizon                     = SkuName("Custom_Verizon")
	SkuName_Standard_Akamai                    = SkuName("Standard_Akamai")
	SkuName_Standard_ChinaCdn                  = SkuName("Standard_ChinaCdn")
	SkuName_Standard_Microsoft                 = SkuName("Standard_Microsoft")
	SkuName_Premium_ChinaCdn                   = SkuName("Premium_ChinaCdn")
	SkuName_Standard_AzureFrontDoor            = SkuName("Standard_AzureFrontDoor")
	SkuName_Premium_AzureFrontDoor             = SkuName("Premium_AzureFrontDoor")
	SkuName_Standard_955BandWidth_ChinaCdn     = SkuName("Standard_955BandWidth_ChinaCdn")
	SkuName_Standard_AvgBandWidth_ChinaCdn     = SkuName("Standard_AvgBandWidth_ChinaCdn")
	SkuName_StandardPlus_ChinaCdn              = SkuName("StandardPlus_ChinaCdn")
	SkuName_StandardPlus_955BandWidth_ChinaCdn = SkuName("StandardPlus_955BandWidth_ChinaCdn")
	SkuName_StandardPlus_AvgBandWidth_ChinaCdn = SkuName("StandardPlus_AvgBandWidth_ChinaCdn")
)

func (SkuName) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SkuName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SkuName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes what transforms are applied before matching
type Transform pulumi.String

const (
	TransformLowercase = Transform("Lowercase")
	TransformUppercase = Transform("Uppercase")
)

func (Transform) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e Transform) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Transform) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Transform) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Transform) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes what transforms were applied before matching.
type TransformType pulumi.String

const (
	TransformTypeLowercase   = TransformType("Lowercase")
	TransformTypeUppercase   = TransformType("Uppercase")
	TransformTypeTrim        = TransformType("Trim")
	TransformTypeUrlDecode   = TransformType("UrlDecode")
	TransformTypeUrlEncode   = TransformType("UrlEncode")
	TransformTypeRemoveNulls = TransformType("RemoveNulls")
)

func (TransformType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TransformType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransformType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type UrlFileExtensionOperator pulumi.String

const (
	UrlFileExtensionOperatorAny                = UrlFileExtensionOperator("Any")
	UrlFileExtensionOperatorEqual              = UrlFileExtensionOperator("Equal")
	UrlFileExtensionOperatorContains           = UrlFileExtensionOperator("Contains")
	UrlFileExtensionOperatorBeginsWith         = UrlFileExtensionOperator("BeginsWith")
	UrlFileExtensionOperatorEndsWith           = UrlFileExtensionOperator("EndsWith")
	UrlFileExtensionOperatorLessThan           = UrlFileExtensionOperator("LessThan")
	UrlFileExtensionOperatorLessThanOrEqual    = UrlFileExtensionOperator("LessThanOrEqual")
	UrlFileExtensionOperatorGreaterThan        = UrlFileExtensionOperator("GreaterThan")
	UrlFileExtensionOperatorGreaterThanOrEqual = UrlFileExtensionOperator("GreaterThanOrEqual")
	UrlFileExtensionOperatorRegEx              = UrlFileExtensionOperator("RegEx")
)

func (UrlFileExtensionOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e UrlFileExtensionOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlFileExtensionOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlFileExtensionOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlFileExtensionOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type UrlFileNameOperator pulumi.String

const (
	UrlFileNameOperatorAny                = UrlFileNameOperator("Any")
	UrlFileNameOperatorEqual              = UrlFileNameOperator("Equal")
	UrlFileNameOperatorContains           = UrlFileNameOperator("Contains")
	UrlFileNameOperatorBeginsWith         = UrlFileNameOperator("BeginsWith")
	UrlFileNameOperatorEndsWith           = UrlFileNameOperator("EndsWith")
	UrlFileNameOperatorLessThan           = UrlFileNameOperator("LessThan")
	UrlFileNameOperatorLessThanOrEqual    = UrlFileNameOperator("LessThanOrEqual")
	UrlFileNameOperatorGreaterThan        = UrlFileNameOperator("GreaterThan")
	UrlFileNameOperatorGreaterThanOrEqual = UrlFileNameOperator("GreaterThanOrEqual")
	UrlFileNameOperatorRegEx              = UrlFileNameOperator("RegEx")
)

func (UrlFileNameOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e UrlFileNameOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlFileNameOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlFileNameOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlFileNameOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Describes operator to be matched
type UrlPathOperator pulumi.String

const (
	UrlPathOperatorAny                = UrlPathOperator("Any")
	UrlPathOperatorEqual              = UrlPathOperator("Equal")
	UrlPathOperatorContains           = UrlPathOperator("Contains")
	UrlPathOperatorBeginsWith         = UrlPathOperator("BeginsWith")
	UrlPathOperatorEndsWith           = UrlPathOperator("EndsWith")
	UrlPathOperatorLessThan           = UrlPathOperator("LessThan")
	UrlPathOperatorLessThanOrEqual    = UrlPathOperator("LessThanOrEqual")
	UrlPathOperatorGreaterThan        = UrlPathOperator("GreaterThan")
	UrlPathOperatorGreaterThanOrEqual = UrlPathOperator("GreaterThanOrEqual")
	UrlPathOperatorWildcard           = UrlPathOperator("Wildcard")
	UrlPathOperatorRegEx              = UrlPathOperator("RegEx")
)

func (UrlPathOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e UrlPathOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlPathOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlPathOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlPathOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
