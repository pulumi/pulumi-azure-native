// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200901

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes, e.g. www.contoso.com.
type AFDCustomDomain struct {
	pulumi.CustomResourceState

	// Resource reference to the Azure DNS zone
	AzureDnsZone     ResourceReferenceResponsePtrOutput `pulumi:"azureDnsZone"`
	DeploymentStatus pulumi.StringOutput                `pulumi:"deploymentStatus"`
	// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step. DCV stands for DomainControlValidation.
	DomainValidationState pulumi.StringOutput `pulumi:"domainValidationState"`
	// The host name of the domain. Must be a domain name.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning status
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Read only system data
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user's own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
	TlsSettings AFDDomainHttpsParametersResponsePtrOutput `pulumi:"tlsSettings"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Values the customer needs to validate domain ownership
	ValidationProperties DomainValidationPropertiesResponseOutput `pulumi:"validationProperties"`
}

// NewAFDCustomDomain registers a new resource with the given unique name, arguments, and options.
func NewAFDCustomDomain(ctx *pulumi.Context,
	name string, args *AFDCustomDomainArgs, opts ...pulumi.ResourceOption) (*AFDCustomDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	if args.ProfileName == nil {
		return nil, errors.New("invalid value for required argument 'ProfileName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cdn:AFDCustomDomain"),
		},
		{
			Type: pulumi.String("azure-native:cdn/v20210601:AFDCustomDomain"),
		},
	})
	opts = append(opts, aliases)
	var resource AFDCustomDomain
	err := ctx.RegisterResource("azure-native:cdn/v20200901:AFDCustomDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAFDCustomDomain gets an existing AFDCustomDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAFDCustomDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AFDCustomDomainState, opts ...pulumi.ResourceOption) (*AFDCustomDomain, error) {
	var resource AFDCustomDomain
	err := ctx.ReadResource("azure-native:cdn/v20200901:AFDCustomDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AFDCustomDomain resources.
type afdcustomDomainState struct {
}

type AFDCustomDomainState struct {
}

func (AFDCustomDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*afdcustomDomainState)(nil)).Elem()
}

type afdcustomDomainArgs struct {
	// Resource reference to the Azure DNS zone
	AzureDnsZone *ResourceReference `pulumi:"azureDnsZone"`
	// Name of the domain under the profile which is unique globally
	CustomDomainName *string `pulumi:"customDomainName"`
	// The host name of the domain. Must be a domain name.
	HostName string `pulumi:"hostName"`
	// Name of the CDN profile which is unique within the resource group.
	ProfileName string `pulumi:"profileName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user's own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
	TlsSettings *AFDDomainHttpsParameters `pulumi:"tlsSettings"`
}

// The set of arguments for constructing a AFDCustomDomain resource.
type AFDCustomDomainArgs struct {
	// Resource reference to the Azure DNS zone
	AzureDnsZone ResourceReferencePtrInput
	// Name of the domain under the profile which is unique globally
	CustomDomainName pulumi.StringPtrInput
	// The host name of the domain. Must be a domain name.
	HostName pulumi.StringInput
	// Name of the CDN profile which is unique within the resource group.
	ProfileName pulumi.StringInput
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
	// The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user's own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
	TlsSettings AFDDomainHttpsParametersPtrInput
}

func (AFDCustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*afdcustomDomainArgs)(nil)).Elem()
}

type AFDCustomDomainInput interface {
	pulumi.Input

	ToAFDCustomDomainOutput() AFDCustomDomainOutput
	ToAFDCustomDomainOutputWithContext(ctx context.Context) AFDCustomDomainOutput
}

func (*AFDCustomDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**AFDCustomDomain)(nil)).Elem()
}

func (i *AFDCustomDomain) ToAFDCustomDomainOutput() AFDCustomDomainOutput {
	return i.ToAFDCustomDomainOutputWithContext(context.Background())
}

func (i *AFDCustomDomain) ToAFDCustomDomainOutputWithContext(ctx context.Context) AFDCustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AFDCustomDomainOutput)
}

type AFDCustomDomainOutput struct{ *pulumi.OutputState }

func (AFDCustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AFDCustomDomain)(nil)).Elem()
}

func (o AFDCustomDomainOutput) ToAFDCustomDomainOutput() AFDCustomDomainOutput {
	return o
}

func (o AFDCustomDomainOutput) ToAFDCustomDomainOutputWithContext(ctx context.Context) AFDCustomDomainOutput {
	return o
}

// Resource reference to the Azure DNS zone
func (o AFDCustomDomainOutput) AzureDnsZone() ResourceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *AFDCustomDomain) ResourceReferenceResponsePtrOutput { return v.AzureDnsZone }).(ResourceReferenceResponsePtrOutput)
}

func (o AFDCustomDomainOutput) DeploymentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *AFDCustomDomain) pulumi.StringOutput { return v.DeploymentStatus }).(pulumi.StringOutput)
}

// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step. DCV stands for DomainControlValidation.
func (o AFDCustomDomainOutput) DomainValidationState() pulumi.StringOutput {
	return o.ApplyT(func(v *AFDCustomDomain) pulumi.StringOutput { return v.DomainValidationState }).(pulumi.StringOutput)
}

// The host name of the domain. Must be a domain name.
func (o AFDCustomDomainOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *AFDCustomDomain) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// Resource name.
func (o AFDCustomDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AFDCustomDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning status
func (o AFDCustomDomainOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *AFDCustomDomain) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Read only system data
func (o AFDCustomDomainOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *AFDCustomDomain) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user's own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
func (o AFDCustomDomainOutput) TlsSettings() AFDDomainHttpsParametersResponsePtrOutput {
	return o.ApplyT(func(v *AFDCustomDomain) AFDDomainHttpsParametersResponsePtrOutput { return v.TlsSettings }).(AFDDomainHttpsParametersResponsePtrOutput)
}

// Resource type.
func (o AFDCustomDomainOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AFDCustomDomain) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Values the customer needs to validate domain ownership
func (o AFDCustomDomainOutput) ValidationProperties() DomainValidationPropertiesResponseOutput {
	return o.ApplyT(func(v *AFDCustomDomain) DomainValidationPropertiesResponseOutput { return v.ValidationProperties }).(DomainValidationPropertiesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AFDCustomDomainOutput{})
}
