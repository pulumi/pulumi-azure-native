// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Supported protocols for the customer's endpoint.
type AFDEndpointProtocols string

const (
	AFDEndpointProtocolsHttp  = AFDEndpointProtocols("Http")
	AFDEndpointProtocolsHttps = AFDEndpointProtocols("Https")
)

// Describes what action to be applied when rule matches
type ActionType string

const (
	ActionTypeAllow    = ActionType("Allow")
	ActionTypeBlock    = ActionType("Block")
	ActionTypeLog      = ActionType("Log")
	ActionTypeRedirect = ActionType("Redirect")
)

// Defines the source of the SSL certificate.
type AfdCertificateType string

const (
	AfdCertificateTypeCustomerCertificate               = AfdCertificateType("CustomerCertificate")
	AfdCertificateTypeManagedCertificate                = AfdCertificateType("ManagedCertificate")
	AfdCertificateTypeAzureFirstPartyManagedCertificate = AfdCertificateType("AzureFirstPartyManagedCertificate")
)

// TLS protocol version that will be used for Https
type AfdMinimumTlsVersion string

const (
	AfdMinimumTlsVersionTLS10 = AfdMinimumTlsVersion("TLS10")
	AfdMinimumTlsVersionTLS12 = AfdMinimumTlsVersion("TLS12")
)

func (AfdMinimumTlsVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*AfdMinimumTlsVersion)(nil)).Elem()
}

func (e AfdMinimumTlsVersion) ToAfdMinimumTlsVersionOutput() AfdMinimumTlsVersionOutput {
	return pulumi.ToOutput(e).(AfdMinimumTlsVersionOutput)
}

func (e AfdMinimumTlsVersion) ToAfdMinimumTlsVersionOutputWithContext(ctx context.Context) AfdMinimumTlsVersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AfdMinimumTlsVersionOutput)
}

func (e AfdMinimumTlsVersion) ToAfdMinimumTlsVersionPtrOutput() AfdMinimumTlsVersionPtrOutput {
	return e.ToAfdMinimumTlsVersionPtrOutputWithContext(context.Background())
}

func (e AfdMinimumTlsVersion) ToAfdMinimumTlsVersionPtrOutputWithContext(ctx context.Context) AfdMinimumTlsVersionPtrOutput {
	return AfdMinimumTlsVersion(e).ToAfdMinimumTlsVersionOutputWithContext(ctx).ToAfdMinimumTlsVersionPtrOutputWithContext(ctx)
}

func (e AfdMinimumTlsVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AfdMinimumTlsVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AfdMinimumTlsVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AfdMinimumTlsVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AfdMinimumTlsVersionOutput struct{ *pulumi.OutputState }

func (AfdMinimumTlsVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AfdMinimumTlsVersion)(nil)).Elem()
}

func (o AfdMinimumTlsVersionOutput) ToAfdMinimumTlsVersionOutput() AfdMinimumTlsVersionOutput {
	return o
}

func (o AfdMinimumTlsVersionOutput) ToAfdMinimumTlsVersionOutputWithContext(ctx context.Context) AfdMinimumTlsVersionOutput {
	return o
}

func (o AfdMinimumTlsVersionOutput) ToAfdMinimumTlsVersionPtrOutput() AfdMinimumTlsVersionPtrOutput {
	return o.ToAfdMinimumTlsVersionPtrOutputWithContext(context.Background())
}

func (o AfdMinimumTlsVersionOutput) ToAfdMinimumTlsVersionPtrOutputWithContext(ctx context.Context) AfdMinimumTlsVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AfdMinimumTlsVersion) *AfdMinimumTlsVersion {
		return &v
	}).(AfdMinimumTlsVersionPtrOutput)
}

func (o AfdMinimumTlsVersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AfdMinimumTlsVersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AfdMinimumTlsVersion) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AfdMinimumTlsVersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AfdMinimumTlsVersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AfdMinimumTlsVersion) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AfdMinimumTlsVersionPtrOutput struct{ *pulumi.OutputState }

func (AfdMinimumTlsVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AfdMinimumTlsVersion)(nil)).Elem()
}

func (o AfdMinimumTlsVersionPtrOutput) ToAfdMinimumTlsVersionPtrOutput() AfdMinimumTlsVersionPtrOutput {
	return o
}

func (o AfdMinimumTlsVersionPtrOutput) ToAfdMinimumTlsVersionPtrOutputWithContext(ctx context.Context) AfdMinimumTlsVersionPtrOutput {
	return o
}

func (o AfdMinimumTlsVersionPtrOutput) Elem() AfdMinimumTlsVersionOutput {
	return o.ApplyT(func(v *AfdMinimumTlsVersion) AfdMinimumTlsVersion {
		if v != nil {
			return *v
		}
		var ret AfdMinimumTlsVersion
		return ret
	}).(AfdMinimumTlsVersionOutput)
}

func (o AfdMinimumTlsVersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AfdMinimumTlsVersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AfdMinimumTlsVersion) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AfdMinimumTlsVersionInput is an input type that accepts AfdMinimumTlsVersionArgs and AfdMinimumTlsVersionOutput values.
// You can construct a concrete instance of `AfdMinimumTlsVersionInput` via:
//
//	AfdMinimumTlsVersionArgs{...}
type AfdMinimumTlsVersionInput interface {
	pulumi.Input

	ToAfdMinimumTlsVersionOutput() AfdMinimumTlsVersionOutput
	ToAfdMinimumTlsVersionOutputWithContext(context.Context) AfdMinimumTlsVersionOutput
}

var afdMinimumTlsVersionPtrType = reflect.TypeOf((**AfdMinimumTlsVersion)(nil)).Elem()

type AfdMinimumTlsVersionPtrInput interface {
	pulumi.Input

	ToAfdMinimumTlsVersionPtrOutput() AfdMinimumTlsVersionPtrOutput
	ToAfdMinimumTlsVersionPtrOutputWithContext(context.Context) AfdMinimumTlsVersionPtrOutput
}

type afdMinimumTlsVersionPtr string

func AfdMinimumTlsVersionPtr(v string) AfdMinimumTlsVersionPtrInput {
	return (*afdMinimumTlsVersionPtr)(&v)
}

func (*afdMinimumTlsVersionPtr) ElementType() reflect.Type {
	return afdMinimumTlsVersionPtrType
}

func (in *afdMinimumTlsVersionPtr) ToAfdMinimumTlsVersionPtrOutput() AfdMinimumTlsVersionPtrOutput {
	return pulumi.ToOutput(in).(AfdMinimumTlsVersionPtrOutput)
}

func (in *afdMinimumTlsVersionPtr) ToAfdMinimumTlsVersionPtrOutputWithContext(ctx context.Context) AfdMinimumTlsVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AfdMinimumTlsVersionPtrOutput)
}

// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings.
type AfdQueryStringCachingBehavior string

const (
	AfdQueryStringCachingBehaviorIgnoreQueryString            = AfdQueryStringCachingBehavior("IgnoreQueryString")
	AfdQueryStringCachingBehaviorUseQueryString               = AfdQueryStringCachingBehavior("UseQueryString")
	AfdQueryStringCachingBehaviorIgnoreSpecifiedQueryStrings  = AfdQueryStringCachingBehavior("IgnoreSpecifiedQueryStrings")
	AfdQueryStringCachingBehaviorIncludeSpecifiedQueryStrings = AfdQueryStringCachingBehavior("IncludeSpecifiedQueryStrings")
)

// Algorithm to use for URL signing
type Algorithm string

const (
	AlgorithmSHA256 = Algorithm("SHA256")
)

// Indicates the endpoint name reuse scope. The default value is TenantReuse.
type AutoGeneratedDomainNameLabelScope string

const (
	AutoGeneratedDomainNameLabelScopeTenantReuse        = AutoGeneratedDomainNameLabelScope("TenantReuse")
	AutoGeneratedDomainNameLabelScopeSubscriptionReuse  = AutoGeneratedDomainNameLabelScope("SubscriptionReuse")
	AutoGeneratedDomainNameLabelScopeResourceGroupReuse = AutoGeneratedDomainNameLabelScope("ResourceGroupReuse")
	AutoGeneratedDomainNameLabelScopeNoReuse            = AutoGeneratedDomainNameLabelScope("NoReuse")
)

// Caching behavior for the requests
type CacheBehavior string

const (
	CacheBehaviorBypassCache  = CacheBehavior("BypassCache")
	CacheBehaviorOverride     = CacheBehavior("Override")
	CacheBehaviorSetIfMissing = CacheBehavior("SetIfMissing")
)

// The level at which the content needs to be cached.
type CacheType string

const (
	CacheTypeAll = CacheType("All")
)

// Describes operator to be matched
type ClientPortOperator string

const (
	ClientPortOperatorAny                = ClientPortOperator("Any")
	ClientPortOperatorEqual              = ClientPortOperator("Equal")
	ClientPortOperatorContains           = ClientPortOperator("Contains")
	ClientPortOperatorBeginsWith         = ClientPortOperator("BeginsWith")
	ClientPortOperatorEndsWith           = ClientPortOperator("EndsWith")
	ClientPortOperatorLessThan           = ClientPortOperator("LessThan")
	ClientPortOperatorLessThanOrEqual    = ClientPortOperator("LessThanOrEqual")
	ClientPortOperatorGreaterThan        = ClientPortOperator("GreaterThan")
	ClientPortOperatorGreaterThanOrEqual = ClientPortOperator("GreaterThanOrEqual")
	ClientPortOperatorRegEx              = ClientPortOperator("RegEx")
)

// Describes operator to be matched
type CookiesOperator string

const (
	CookiesOperatorAny                = CookiesOperator("Any")
	CookiesOperatorEqual              = CookiesOperator("Equal")
	CookiesOperatorContains           = CookiesOperator("Contains")
	CookiesOperatorBeginsWith         = CookiesOperator("BeginsWith")
	CookiesOperatorEndsWith           = CookiesOperator("EndsWith")
	CookiesOperatorLessThan           = CookiesOperator("LessThan")
	CookiesOperatorLessThanOrEqual    = CookiesOperator("LessThanOrEqual")
	CookiesOperatorGreaterThan        = CookiesOperator("GreaterThan")
	CookiesOperatorGreaterThanOrEqual = CookiesOperator("GreaterThanOrEqual")
	CookiesOperatorRegEx              = CookiesOperator("RegEx")
)

// Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
type CustomRuleEnabledState string

const (
	CustomRuleEnabledStateDisabled = CustomRuleEnabledState("Disabled")
	CustomRuleEnabledStateEnabled  = CustomRuleEnabledState("Enabled")
)

// The name of the action for the delivery rule.
type DeliveryRuleAction string

const (
	DeliveryRuleActionCacheExpiration            = DeliveryRuleAction("CacheExpiration")
	DeliveryRuleActionCacheKeyQueryString        = DeliveryRuleAction("CacheKeyQueryString")
	DeliveryRuleActionModifyRequestHeader        = DeliveryRuleAction("ModifyRequestHeader")
	DeliveryRuleActionModifyResponseHeader       = DeliveryRuleAction("ModifyResponseHeader")
	DeliveryRuleActionUrlRedirect                = DeliveryRuleAction("UrlRedirect")
	DeliveryRuleActionUrlRewrite                 = DeliveryRuleAction("UrlRewrite")
	DeliveryRuleActionUrlSigning                 = DeliveryRuleAction("UrlSigning")
	DeliveryRuleActionOriginGroupOverride        = DeliveryRuleAction("OriginGroupOverride")
	DeliveryRuleActionRouteConfigurationOverride = DeliveryRuleAction("RouteConfigurationOverride")
)

// Protocol to use for the redirect. The default value is MatchRequest
type DestinationProtocol string

const (
	DestinationProtocolMatchRequest = DestinationProtocol("MatchRequest")
	DestinationProtocolHttp         = DestinationProtocol("Http")
	DestinationProtocolHttps        = DestinationProtocol("Https")
)

// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
type EnabledState string

const (
	EnabledStateEnabled  = EnabledState("Enabled")
	EnabledStateDisabled = EnabledState("Disabled")
)

// Protocol this rule will use when forwarding traffic to backends.
type ForwardingProtocol string

const (
	ForwardingProtocolHttpOnly     = ForwardingProtocol("HttpOnly")
	ForwardingProtocolHttpsOnly    = ForwardingProtocol("HttpsOnly")
	ForwardingProtocolMatchRequest = ForwardingProtocol("MatchRequest")
)

// Action of the geo filter, i.e. allow or block access.
type GeoFilterActions string

const (
	GeoFilterActionsBlock = GeoFilterActions("Block")
	GeoFilterActionsAllow = GeoFilterActions("Allow")
)

func (GeoFilterActions) ElementType() reflect.Type {
	return reflect.TypeOf((*GeoFilterActions)(nil)).Elem()
}

func (e GeoFilterActions) ToGeoFilterActionsOutput() GeoFilterActionsOutput {
	return pulumi.ToOutput(e).(GeoFilterActionsOutput)
}

func (e GeoFilterActions) ToGeoFilterActionsOutputWithContext(ctx context.Context) GeoFilterActionsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GeoFilterActionsOutput)
}

func (e GeoFilterActions) ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput {
	return e.ToGeoFilterActionsPtrOutputWithContext(context.Background())
}

func (e GeoFilterActions) ToGeoFilterActionsPtrOutputWithContext(ctx context.Context) GeoFilterActionsPtrOutput {
	return GeoFilterActions(e).ToGeoFilterActionsOutputWithContext(ctx).ToGeoFilterActionsPtrOutputWithContext(ctx)
}

func (e GeoFilterActions) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GeoFilterActions) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GeoFilterActions) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GeoFilterActions) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GeoFilterActionsOutput struct{ *pulumi.OutputState }

func (GeoFilterActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeoFilterActions)(nil)).Elem()
}

func (o GeoFilterActionsOutput) ToGeoFilterActionsOutput() GeoFilterActionsOutput {
	return o
}

func (o GeoFilterActionsOutput) ToGeoFilterActionsOutputWithContext(ctx context.Context) GeoFilterActionsOutput {
	return o
}

func (o GeoFilterActionsOutput) ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput {
	return o.ToGeoFilterActionsPtrOutputWithContext(context.Background())
}

func (o GeoFilterActionsOutput) ToGeoFilterActionsPtrOutputWithContext(ctx context.Context) GeoFilterActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GeoFilterActions) *GeoFilterActions {
		return &v
	}).(GeoFilterActionsPtrOutput)
}

func (o GeoFilterActionsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GeoFilterActionsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GeoFilterActions) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GeoFilterActionsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GeoFilterActionsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GeoFilterActions) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GeoFilterActionsPtrOutput struct{ *pulumi.OutputState }

func (GeoFilterActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeoFilterActions)(nil)).Elem()
}

func (o GeoFilterActionsPtrOutput) ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput {
	return o
}

func (o GeoFilterActionsPtrOutput) ToGeoFilterActionsPtrOutputWithContext(ctx context.Context) GeoFilterActionsPtrOutput {
	return o
}

func (o GeoFilterActionsPtrOutput) Elem() GeoFilterActionsOutput {
	return o.ApplyT(func(v *GeoFilterActions) GeoFilterActions {
		if v != nil {
			return *v
		}
		var ret GeoFilterActions
		return ret
	}).(GeoFilterActionsOutput)
}

func (o GeoFilterActionsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GeoFilterActionsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GeoFilterActions) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GeoFilterActionsInput is an input type that accepts GeoFilterActionsArgs and GeoFilterActionsOutput values.
// You can construct a concrete instance of `GeoFilterActionsInput` via:
//
//	GeoFilterActionsArgs{...}
type GeoFilterActionsInput interface {
	pulumi.Input

	ToGeoFilterActionsOutput() GeoFilterActionsOutput
	ToGeoFilterActionsOutputWithContext(context.Context) GeoFilterActionsOutput
}

var geoFilterActionsPtrType = reflect.TypeOf((**GeoFilterActions)(nil)).Elem()

type GeoFilterActionsPtrInput interface {
	pulumi.Input

	ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput
	ToGeoFilterActionsPtrOutputWithContext(context.Context) GeoFilterActionsPtrOutput
}

type geoFilterActionsPtr string

func GeoFilterActionsPtr(v string) GeoFilterActionsPtrInput {
	return (*geoFilterActionsPtr)(&v)
}

func (*geoFilterActionsPtr) ElementType() reflect.Type {
	return geoFilterActionsPtrType
}

func (in *geoFilterActionsPtr) ToGeoFilterActionsPtrOutput() GeoFilterActionsPtrOutput {
	return pulumi.ToOutput(in).(GeoFilterActionsPtrOutput)
}

func (in *geoFilterActionsPtr) ToGeoFilterActionsPtrOutputWithContext(ctx context.Context) GeoFilterActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GeoFilterActionsPtrOutput)
}

// Action to perform
type HeaderAction string

const (
	HeaderActionAppend    = HeaderAction("Append")
	HeaderActionOverwrite = HeaderAction("Overwrite")
	HeaderActionDelete    = HeaderAction("Delete")
)

// The type of health probe request that is made.
type HealthProbeRequestType string

const (
	HealthProbeRequestTypeNotSet = HealthProbeRequestType("NotSet")
	HealthProbeRequestTypeGET    = HealthProbeRequestType("GET")
	HealthProbeRequestTypeHEAD   = HealthProbeRequestType("HEAD")
)

func (HealthProbeRequestType) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeRequestType)(nil)).Elem()
}

func (e HealthProbeRequestType) ToHealthProbeRequestTypeOutput() HealthProbeRequestTypeOutput {
	return pulumi.ToOutput(e).(HealthProbeRequestTypeOutput)
}

func (e HealthProbeRequestType) ToHealthProbeRequestTypeOutputWithContext(ctx context.Context) HealthProbeRequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HealthProbeRequestTypeOutput)
}

func (e HealthProbeRequestType) ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput {
	return e.ToHealthProbeRequestTypePtrOutputWithContext(context.Background())
}

func (e HealthProbeRequestType) ToHealthProbeRequestTypePtrOutputWithContext(ctx context.Context) HealthProbeRequestTypePtrOutput {
	return HealthProbeRequestType(e).ToHealthProbeRequestTypeOutputWithContext(ctx).ToHealthProbeRequestTypePtrOutputWithContext(ctx)
}

func (e HealthProbeRequestType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthProbeRequestType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthProbeRequestType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HealthProbeRequestType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HealthProbeRequestTypeOutput struct{ *pulumi.OutputState }

func (HealthProbeRequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeRequestType)(nil)).Elem()
}

func (o HealthProbeRequestTypeOutput) ToHealthProbeRequestTypeOutput() HealthProbeRequestTypeOutput {
	return o
}

func (o HealthProbeRequestTypeOutput) ToHealthProbeRequestTypeOutputWithContext(ctx context.Context) HealthProbeRequestTypeOutput {
	return o
}

func (o HealthProbeRequestTypeOutput) ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput {
	return o.ToHealthProbeRequestTypePtrOutputWithContext(context.Background())
}

func (o HealthProbeRequestTypeOutput) ToHealthProbeRequestTypePtrOutputWithContext(ctx context.Context) HealthProbeRequestTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HealthProbeRequestType) *HealthProbeRequestType {
		return &v
	}).(HealthProbeRequestTypePtrOutput)
}

func (o HealthProbeRequestTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HealthProbeRequestTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HealthProbeRequestType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HealthProbeRequestTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HealthProbeRequestTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HealthProbeRequestType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HealthProbeRequestTypePtrOutput struct{ *pulumi.OutputState }

func (HealthProbeRequestTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthProbeRequestType)(nil)).Elem()
}

func (o HealthProbeRequestTypePtrOutput) ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput {
	return o
}

func (o HealthProbeRequestTypePtrOutput) ToHealthProbeRequestTypePtrOutputWithContext(ctx context.Context) HealthProbeRequestTypePtrOutput {
	return o
}

func (o HealthProbeRequestTypePtrOutput) Elem() HealthProbeRequestTypeOutput {
	return o.ApplyT(func(v *HealthProbeRequestType) HealthProbeRequestType {
		if v != nil {
			return *v
		}
		var ret HealthProbeRequestType
		return ret
	}).(HealthProbeRequestTypeOutput)
}

func (o HealthProbeRequestTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HealthProbeRequestTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HealthProbeRequestType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HealthProbeRequestTypeInput is an input type that accepts HealthProbeRequestTypeArgs and HealthProbeRequestTypeOutput values.
// You can construct a concrete instance of `HealthProbeRequestTypeInput` via:
//
//	HealthProbeRequestTypeArgs{...}
type HealthProbeRequestTypeInput interface {
	pulumi.Input

	ToHealthProbeRequestTypeOutput() HealthProbeRequestTypeOutput
	ToHealthProbeRequestTypeOutputWithContext(context.Context) HealthProbeRequestTypeOutput
}

var healthProbeRequestTypePtrType = reflect.TypeOf((**HealthProbeRequestType)(nil)).Elem()

type HealthProbeRequestTypePtrInput interface {
	pulumi.Input

	ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput
	ToHealthProbeRequestTypePtrOutputWithContext(context.Context) HealthProbeRequestTypePtrOutput
}

type healthProbeRequestTypePtr string

func HealthProbeRequestTypePtr(v string) HealthProbeRequestTypePtrInput {
	return (*healthProbeRequestTypePtr)(&v)
}

func (*healthProbeRequestTypePtr) ElementType() reflect.Type {
	return healthProbeRequestTypePtrType
}

func (in *healthProbeRequestTypePtr) ToHealthProbeRequestTypePtrOutput() HealthProbeRequestTypePtrOutput {
	return pulumi.ToOutput(in).(HealthProbeRequestTypePtrOutput)
}

func (in *healthProbeRequestTypePtr) ToHealthProbeRequestTypePtrOutputWithContext(ctx context.Context) HealthProbeRequestTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HealthProbeRequestTypePtrOutput)
}

// Describes operator to be matched
type HostNameOperator string

const (
	HostNameOperatorAny                = HostNameOperator("Any")
	HostNameOperatorEqual              = HostNameOperator("Equal")
	HostNameOperatorContains           = HostNameOperator("Contains")
	HostNameOperatorBeginsWith         = HostNameOperator("BeginsWith")
	HostNameOperatorEndsWith           = HostNameOperator("EndsWith")
	HostNameOperatorLessThan           = HostNameOperator("LessThan")
	HostNameOperatorLessThanOrEqual    = HostNameOperator("LessThanOrEqual")
	HostNameOperatorGreaterThan        = HostNameOperator("GreaterThan")
	HostNameOperatorGreaterThanOrEqual = HostNameOperator("GreaterThanOrEqual")
	HostNameOperatorRegEx              = HostNameOperator("RegEx")
)

// Describes operator to be matched
type HttpVersionOperator string

const (
	HttpVersionOperatorEqual = HttpVersionOperator("Equal")
)

// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
type HttpsRedirect string

const (
	HttpsRedirectEnabled  = HttpsRedirect("Enabled")
	HttpsRedirectDisabled = HttpsRedirect("Disabled")
)

// Describes operator to be matched
type IsDeviceOperator string

const (
	IsDeviceOperatorEqual = IsDeviceOperator("Equal")
)

// whether this route will be linked to the default endpoint domain.
type LinkToDefaultDomain string

const (
	LinkToDefaultDomainEnabled  = LinkToDefaultDomain("Enabled")
	LinkToDefaultDomainDisabled = LinkToDefaultDomain("Disabled")
)

// Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
type ManagedRuleEnabledState string

const (
	ManagedRuleEnabledStateDisabled = ManagedRuleEnabledState("Disabled")
	ManagedRuleEnabledStateEnabled  = ManagedRuleEnabledState("Enabled")
)

// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
type MatchProcessingBehavior string

const (
	MatchProcessingBehaviorContinue = MatchProcessingBehavior("Continue")
	MatchProcessingBehaviorStop     = MatchProcessingBehavior("Stop")
)

// The name of the condition for the delivery rule.
type MatchVariable string

const (
	MatchVariableRemoteAddress    = MatchVariable("RemoteAddress")
	MatchVariableRequestMethod    = MatchVariable("RequestMethod")
	MatchVariableQueryString      = MatchVariable("QueryString")
	MatchVariablePostArgs         = MatchVariable("PostArgs")
	MatchVariableRequestUri       = MatchVariable("RequestUri")
	MatchVariableRequestHeader    = MatchVariable("RequestHeader")
	MatchVariableRequestBody      = MatchVariable("RequestBody")
	MatchVariableRequestScheme    = MatchVariable("RequestScheme")
	MatchVariableUrlPath          = MatchVariable("UrlPath")
	MatchVariableUrlFileExtension = MatchVariable("UrlFileExtension")
	MatchVariableUrlFileName      = MatchVariable("UrlFileName")
	MatchVariableHttpVersion      = MatchVariable("HttpVersion")
	MatchVariableCookies          = MatchVariable("Cookies")
	MatchVariableIsDevice         = MatchVariable("IsDevice")
	MatchVariableSocketAddr       = MatchVariable("SocketAddr")
	MatchVariableClientPort       = MatchVariable("ClientPort")
	MatchVariableServerPort       = MatchVariable("ServerPort")
	MatchVariableHostName         = MatchVariable("HostName")
	MatchVariableSslProtocol      = MatchVariable("SslProtocol")
)

// Describes operator to be matched
type Operator string

const (
	OperatorAny                = Operator("Any")
	OperatorIPMatch            = Operator("IPMatch")
	OperatorGeoMatch           = Operator("GeoMatch")
	OperatorEqual              = Operator("Equal")
	OperatorContains           = Operator("Contains")
	OperatorLessThan           = Operator("LessThan")
	OperatorGreaterThan        = Operator("GreaterThan")
	OperatorLessThanOrEqual    = Operator("LessThanOrEqual")
	OperatorGreaterThanOrEqual = Operator("GreaterThanOrEqual")
	OperatorBeginsWith         = Operator("BeginsWith")
	OperatorEndsWith           = Operator("EndsWith")
	OperatorRegEx              = Operator("RegEx")
)

// Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
type OptimizationType string

const (
	OptimizationTypeGeneralWebDelivery          = OptimizationType("GeneralWebDelivery")
	OptimizationTypeGeneralMediaStreaming       = OptimizationType("GeneralMediaStreaming")
	OptimizationTypeVideoOnDemandMediaStreaming = OptimizationType("VideoOnDemandMediaStreaming")
	OptimizationTypeLargeFileDownload           = OptimizationType("LargeFileDownload")
	OptimizationTypeDynamicSiteAcceleration     = OptimizationType("DynamicSiteAcceleration")
)

// Indicates the purpose of the parameter
type ParamIndicator string

const (
	ParamIndicatorExpires   = ParamIndicator("Expires")
	ParamIndicatorKeyId     = ParamIndicator("KeyId")
	ParamIndicatorSignature = ParamIndicator("Signature")
)

// describes if the policy is in enabled state or disabled state
type PolicyEnabledState string

const (
	PolicyEnabledStateDisabled = PolicyEnabledState("Disabled")
	PolicyEnabledStateEnabled  = PolicyEnabledState("Enabled")
)

// Describes if it is in detection mode or prevention mode at policy level.
type PolicyMode string

const (
	PolicyModePrevention = PolicyMode("Prevention")
	PolicyModeDetection  = PolicyMode("Detection")
)

// Describes operator to be matched
type PostArgsOperator string

const (
	PostArgsOperatorAny                = PostArgsOperator("Any")
	PostArgsOperatorEqual              = PostArgsOperator("Equal")
	PostArgsOperatorContains           = PostArgsOperator("Contains")
	PostArgsOperatorBeginsWith         = PostArgsOperator("BeginsWith")
	PostArgsOperatorEndsWith           = PostArgsOperator("EndsWith")
	PostArgsOperatorLessThan           = PostArgsOperator("LessThan")
	PostArgsOperatorLessThanOrEqual    = PostArgsOperator("LessThanOrEqual")
	PostArgsOperatorGreaterThan        = PostArgsOperator("GreaterThan")
	PostArgsOperatorGreaterThanOrEqual = PostArgsOperator("GreaterThanOrEqual")
	PostArgsOperatorRegEx              = PostArgsOperator("RegEx")
)

// Protocol to use for health probe.
type ProbeProtocol string

const (
	ProbeProtocolNotSet = ProbeProtocol("NotSet")
	ProbeProtocolHttp   = ProbeProtocol("Http")
	ProbeProtocolHttps  = ProbeProtocol("Https")
)

func (ProbeProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeProtocol)(nil)).Elem()
}

func (e ProbeProtocol) ToProbeProtocolOutput() ProbeProtocolOutput {
	return pulumi.ToOutput(e).(ProbeProtocolOutput)
}

func (e ProbeProtocol) ToProbeProtocolOutputWithContext(ctx context.Context) ProbeProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProbeProtocolOutput)
}

func (e ProbeProtocol) ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput {
	return e.ToProbeProtocolPtrOutputWithContext(context.Background())
}

func (e ProbeProtocol) ToProbeProtocolPtrOutputWithContext(ctx context.Context) ProbeProtocolPtrOutput {
	return ProbeProtocol(e).ToProbeProtocolOutputWithContext(ctx).ToProbeProtocolPtrOutputWithContext(ctx)
}

func (e ProbeProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProbeProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProbeProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProbeProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProbeProtocolOutput struct{ *pulumi.OutputState }

func (ProbeProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeProtocol)(nil)).Elem()
}

func (o ProbeProtocolOutput) ToProbeProtocolOutput() ProbeProtocolOutput {
	return o
}

func (o ProbeProtocolOutput) ToProbeProtocolOutputWithContext(ctx context.Context) ProbeProtocolOutput {
	return o
}

func (o ProbeProtocolOutput) ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput {
	return o.ToProbeProtocolPtrOutputWithContext(context.Background())
}

func (o ProbeProtocolOutput) ToProbeProtocolPtrOutputWithContext(ctx context.Context) ProbeProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProbeProtocol) *ProbeProtocol {
		return &v
	}).(ProbeProtocolPtrOutput)
}

func (o ProbeProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProbeProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProbeProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProbeProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProbeProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProbeProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProbeProtocolPtrOutput struct{ *pulumi.OutputState }

func (ProbeProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeProtocol)(nil)).Elem()
}

func (o ProbeProtocolPtrOutput) ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput {
	return o
}

func (o ProbeProtocolPtrOutput) ToProbeProtocolPtrOutputWithContext(ctx context.Context) ProbeProtocolPtrOutput {
	return o
}

func (o ProbeProtocolPtrOutput) Elem() ProbeProtocolOutput {
	return o.ApplyT(func(v *ProbeProtocol) ProbeProtocol {
		if v != nil {
			return *v
		}
		var ret ProbeProtocol
		return ret
	}).(ProbeProtocolOutput)
}

func (o ProbeProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProbeProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProbeProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProbeProtocolInput is an input type that accepts ProbeProtocolArgs and ProbeProtocolOutput values.
// You can construct a concrete instance of `ProbeProtocolInput` via:
//
//	ProbeProtocolArgs{...}
type ProbeProtocolInput interface {
	pulumi.Input

	ToProbeProtocolOutput() ProbeProtocolOutput
	ToProbeProtocolOutputWithContext(context.Context) ProbeProtocolOutput
}

var probeProtocolPtrType = reflect.TypeOf((**ProbeProtocol)(nil)).Elem()

type ProbeProtocolPtrInput interface {
	pulumi.Input

	ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput
	ToProbeProtocolPtrOutputWithContext(context.Context) ProbeProtocolPtrOutput
}

type probeProtocolPtr string

func ProbeProtocolPtr(v string) ProbeProtocolPtrInput {
	return (*probeProtocolPtr)(&v)
}

func (*probeProtocolPtr) ElementType() reflect.Type {
	return probeProtocolPtrType
}

func (in *probeProtocolPtr) ToProbeProtocolPtrOutput() ProbeProtocolPtrOutput {
	return pulumi.ToOutput(in).(ProbeProtocolPtrOutput)
}

func (in *probeProtocolPtr) ToProbeProtocolPtrOutputWithContext(ctx context.Context) ProbeProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProbeProtocolPtrOutput)
}

// Caching behavior for the requests
type QueryStringBehavior string

const (
	QueryStringBehaviorInclude    = QueryStringBehavior("Include")
	QueryStringBehaviorIncludeAll = QueryStringBehavior("IncludeAll")
	QueryStringBehaviorExclude    = QueryStringBehavior("Exclude")
	QueryStringBehaviorExcludeAll = QueryStringBehavior("ExcludeAll")
)

// Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
type QueryStringCachingBehavior string

const (
	QueryStringCachingBehaviorIgnoreQueryString = QueryStringCachingBehavior("IgnoreQueryString")
	QueryStringCachingBehaviorBypassCaching     = QueryStringCachingBehavior("BypassCaching")
	QueryStringCachingBehaviorUseQueryString    = QueryStringCachingBehavior("UseQueryString")
	QueryStringCachingBehaviorNotSet            = QueryStringCachingBehavior("NotSet")
)

func (QueryStringCachingBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryStringCachingBehavior)(nil)).Elem()
}

func (e QueryStringCachingBehavior) ToQueryStringCachingBehaviorOutput() QueryStringCachingBehaviorOutput {
	return pulumi.ToOutput(e).(QueryStringCachingBehaviorOutput)
}

func (e QueryStringCachingBehavior) ToQueryStringCachingBehaviorOutputWithContext(ctx context.Context) QueryStringCachingBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(QueryStringCachingBehaviorOutput)
}

func (e QueryStringCachingBehavior) ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput {
	return e.ToQueryStringCachingBehaviorPtrOutputWithContext(context.Background())
}

func (e QueryStringCachingBehavior) ToQueryStringCachingBehaviorPtrOutputWithContext(ctx context.Context) QueryStringCachingBehaviorPtrOutput {
	return QueryStringCachingBehavior(e).ToQueryStringCachingBehaviorOutputWithContext(ctx).ToQueryStringCachingBehaviorPtrOutputWithContext(ctx)
}

func (e QueryStringCachingBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringCachingBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryStringCachingBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e QueryStringCachingBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type QueryStringCachingBehaviorOutput struct{ *pulumi.OutputState }

func (QueryStringCachingBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryStringCachingBehavior)(nil)).Elem()
}

func (o QueryStringCachingBehaviorOutput) ToQueryStringCachingBehaviorOutput() QueryStringCachingBehaviorOutput {
	return o
}

func (o QueryStringCachingBehaviorOutput) ToQueryStringCachingBehaviorOutputWithContext(ctx context.Context) QueryStringCachingBehaviorOutput {
	return o
}

func (o QueryStringCachingBehaviorOutput) ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput {
	return o.ToQueryStringCachingBehaviorPtrOutputWithContext(context.Background())
}

func (o QueryStringCachingBehaviorOutput) ToQueryStringCachingBehaviorPtrOutputWithContext(ctx context.Context) QueryStringCachingBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryStringCachingBehavior) *QueryStringCachingBehavior {
		return &v
	}).(QueryStringCachingBehaviorPtrOutput)
}

func (o QueryStringCachingBehaviorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o QueryStringCachingBehaviorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryStringCachingBehavior) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o QueryStringCachingBehaviorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryStringCachingBehaviorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryStringCachingBehavior) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type QueryStringCachingBehaviorPtrOutput struct{ *pulumi.OutputState }

func (QueryStringCachingBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryStringCachingBehavior)(nil)).Elem()
}

func (o QueryStringCachingBehaviorPtrOutput) ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput {
	return o
}

func (o QueryStringCachingBehaviorPtrOutput) ToQueryStringCachingBehaviorPtrOutputWithContext(ctx context.Context) QueryStringCachingBehaviorPtrOutput {
	return o
}

func (o QueryStringCachingBehaviorPtrOutput) Elem() QueryStringCachingBehaviorOutput {
	return o.ApplyT(func(v *QueryStringCachingBehavior) QueryStringCachingBehavior {
		if v != nil {
			return *v
		}
		var ret QueryStringCachingBehavior
		return ret
	}).(QueryStringCachingBehaviorOutput)
}

func (o QueryStringCachingBehaviorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryStringCachingBehaviorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *QueryStringCachingBehavior) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// QueryStringCachingBehaviorInput is an input type that accepts QueryStringCachingBehaviorArgs and QueryStringCachingBehaviorOutput values.
// You can construct a concrete instance of `QueryStringCachingBehaviorInput` via:
//
//	QueryStringCachingBehaviorArgs{...}
type QueryStringCachingBehaviorInput interface {
	pulumi.Input

	ToQueryStringCachingBehaviorOutput() QueryStringCachingBehaviorOutput
	ToQueryStringCachingBehaviorOutputWithContext(context.Context) QueryStringCachingBehaviorOutput
}

var queryStringCachingBehaviorPtrType = reflect.TypeOf((**QueryStringCachingBehavior)(nil)).Elem()

type QueryStringCachingBehaviorPtrInput interface {
	pulumi.Input

	ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput
	ToQueryStringCachingBehaviorPtrOutputWithContext(context.Context) QueryStringCachingBehaviorPtrOutput
}

type queryStringCachingBehaviorPtr string

func QueryStringCachingBehaviorPtr(v string) QueryStringCachingBehaviorPtrInput {
	return (*queryStringCachingBehaviorPtr)(&v)
}

func (*queryStringCachingBehaviorPtr) ElementType() reflect.Type {
	return queryStringCachingBehaviorPtrType
}

func (in *queryStringCachingBehaviorPtr) ToQueryStringCachingBehaviorPtrOutput() QueryStringCachingBehaviorPtrOutput {
	return pulumi.ToOutput(in).(QueryStringCachingBehaviorPtrOutput)
}

func (in *queryStringCachingBehaviorPtr) ToQueryStringCachingBehaviorPtrOutputWithContext(ctx context.Context) QueryStringCachingBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(QueryStringCachingBehaviorPtrOutput)
}

// Describes operator to be matched
type QueryStringOperator string

const (
	QueryStringOperatorAny                = QueryStringOperator("Any")
	QueryStringOperatorEqual              = QueryStringOperator("Equal")
	QueryStringOperatorContains           = QueryStringOperator("Contains")
	QueryStringOperatorBeginsWith         = QueryStringOperator("BeginsWith")
	QueryStringOperatorEndsWith           = QueryStringOperator("EndsWith")
	QueryStringOperatorLessThan           = QueryStringOperator("LessThan")
	QueryStringOperatorLessThanOrEqual    = QueryStringOperator("LessThanOrEqual")
	QueryStringOperatorGreaterThan        = QueryStringOperator("GreaterThan")
	QueryStringOperatorGreaterThanOrEqual = QueryStringOperator("GreaterThanOrEqual")
	QueryStringOperatorRegEx              = QueryStringOperator("RegEx")
)

// The redirect type the rule will use when redirecting traffic.
type RedirectType string

const (
	RedirectTypeMoved             = RedirectType("Moved")
	RedirectTypeFound             = RedirectType("Found")
	RedirectTypeTemporaryRedirect = RedirectType("TemporaryRedirect")
	RedirectTypePermanentRedirect = RedirectType("PermanentRedirect")
)

// Describes operator to be matched
type RemoteAddressOperator string

const (
	RemoteAddressOperatorAny      = RemoteAddressOperator("Any")
	RemoteAddressOperatorIPMatch  = RemoteAddressOperator("IPMatch")
	RemoteAddressOperatorGeoMatch = RemoteAddressOperator("GeoMatch")
)

// Describes operator to be matched
type RequestBodyOperator string

const (
	RequestBodyOperatorAny                = RequestBodyOperator("Any")
	RequestBodyOperatorEqual              = RequestBodyOperator("Equal")
	RequestBodyOperatorContains           = RequestBodyOperator("Contains")
	RequestBodyOperatorBeginsWith         = RequestBodyOperator("BeginsWith")
	RequestBodyOperatorEndsWith           = RequestBodyOperator("EndsWith")
	RequestBodyOperatorLessThan           = RequestBodyOperator("LessThan")
	RequestBodyOperatorLessThanOrEqual    = RequestBodyOperator("LessThanOrEqual")
	RequestBodyOperatorGreaterThan        = RequestBodyOperator("GreaterThan")
	RequestBodyOperatorGreaterThanOrEqual = RequestBodyOperator("GreaterThanOrEqual")
	RequestBodyOperatorRegEx              = RequestBodyOperator("RegEx")
)

// Describes operator to be matched
type RequestHeaderOperator string

const (
	RequestHeaderOperatorAny                = RequestHeaderOperator("Any")
	RequestHeaderOperatorEqual              = RequestHeaderOperator("Equal")
	RequestHeaderOperatorContains           = RequestHeaderOperator("Contains")
	RequestHeaderOperatorBeginsWith         = RequestHeaderOperator("BeginsWith")
	RequestHeaderOperatorEndsWith           = RequestHeaderOperator("EndsWith")
	RequestHeaderOperatorLessThan           = RequestHeaderOperator("LessThan")
	RequestHeaderOperatorLessThanOrEqual    = RequestHeaderOperator("LessThanOrEqual")
	RequestHeaderOperatorGreaterThan        = RequestHeaderOperator("GreaterThan")
	RequestHeaderOperatorGreaterThanOrEqual = RequestHeaderOperator("GreaterThanOrEqual")
	RequestHeaderOperatorRegEx              = RequestHeaderOperator("RegEx")
)

// Describes operator to be matched
type RequestMethodOperator string

const (
	RequestMethodOperatorEqual = RequestMethodOperator("Equal")
)

// Describes operator to be matched
type RequestUriOperator string

const (
	RequestUriOperatorAny                = RequestUriOperator("Any")
	RequestUriOperatorEqual              = RequestUriOperator("Equal")
	RequestUriOperatorContains           = RequestUriOperator("Contains")
	RequestUriOperatorBeginsWith         = RequestUriOperator("BeginsWith")
	RequestUriOperatorEndsWith           = RequestUriOperator("EndsWith")
	RequestUriOperatorLessThan           = RequestUriOperator("LessThan")
	RequestUriOperatorLessThanOrEqual    = RequestUriOperator("LessThanOrEqual")
	RequestUriOperatorGreaterThan        = RequestUriOperator("GreaterThan")
	RequestUriOperatorGreaterThanOrEqual = RequestUriOperator("GreaterThanOrEqual")
	RequestUriOperatorRegEx              = RequestUriOperator("RegEx")
)

// Type of response errors for real user requests for which origin will be deemed unhealthy
type ResponseBasedDetectedErrorTypes string

const (
	ResponseBasedDetectedErrorTypesNone             = ResponseBasedDetectedErrorTypes("None")
	ResponseBasedDetectedErrorTypesTcpErrorsOnly    = ResponseBasedDetectedErrorTypes("TcpErrorsOnly")
	ResponseBasedDetectedErrorTypesTcpAndHttpErrors = ResponseBasedDetectedErrorTypes("TcpAndHttpErrors")
)

func (ResponseBasedDetectedErrorTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponseBasedDetectedErrorTypes)(nil)).Elem()
}

func (e ResponseBasedDetectedErrorTypes) ToResponseBasedDetectedErrorTypesOutput() ResponseBasedDetectedErrorTypesOutput {
	return pulumi.ToOutput(e).(ResponseBasedDetectedErrorTypesOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToResponseBasedDetectedErrorTypesOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResponseBasedDetectedErrorTypesOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput {
	return e.ToResponseBasedDetectedErrorTypesPtrOutputWithContext(context.Background())
}

func (e ResponseBasedDetectedErrorTypes) ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesPtrOutput {
	return ResponseBasedDetectedErrorTypes(e).ToResponseBasedDetectedErrorTypesOutputWithContext(ctx).ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx)
}

func (e ResponseBasedDetectedErrorTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponseBasedDetectedErrorTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResponseBasedDetectedErrorTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResponseBasedDetectedErrorTypesOutput struct{ *pulumi.OutputState }

func (ResponseBasedDetectedErrorTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponseBasedDetectedErrorTypes)(nil)).Elem()
}

func (o ResponseBasedDetectedErrorTypesOutput) ToResponseBasedDetectedErrorTypesOutput() ResponseBasedDetectedErrorTypesOutput {
	return o
}

func (o ResponseBasedDetectedErrorTypesOutput) ToResponseBasedDetectedErrorTypesOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesOutput {
	return o
}

func (o ResponseBasedDetectedErrorTypesOutput) ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput {
	return o.ToResponseBasedDetectedErrorTypesPtrOutputWithContext(context.Background())
}

func (o ResponseBasedDetectedErrorTypesOutput) ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResponseBasedDetectedErrorTypes) *ResponseBasedDetectedErrorTypes {
		return &v
	}).(ResponseBasedDetectedErrorTypesPtrOutput)
}

func (o ResponseBasedDetectedErrorTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResponseBasedDetectedErrorTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResponseBasedDetectedErrorTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResponseBasedDetectedErrorTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResponseBasedDetectedErrorTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResponseBasedDetectedErrorTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResponseBasedDetectedErrorTypesPtrOutput struct{ *pulumi.OutputState }

func (ResponseBasedDetectedErrorTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponseBasedDetectedErrorTypes)(nil)).Elem()
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput {
	return o
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesPtrOutput {
	return o
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) Elem() ResponseBasedDetectedErrorTypesOutput {
	return o.ApplyT(func(v *ResponseBasedDetectedErrorTypes) ResponseBasedDetectedErrorTypes {
		if v != nil {
			return *v
		}
		var ret ResponseBasedDetectedErrorTypes
		return ret
	}).(ResponseBasedDetectedErrorTypesOutput)
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResponseBasedDetectedErrorTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResponseBasedDetectedErrorTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResponseBasedDetectedErrorTypesInput is an input type that accepts ResponseBasedDetectedErrorTypesArgs and ResponseBasedDetectedErrorTypesOutput values.
// You can construct a concrete instance of `ResponseBasedDetectedErrorTypesInput` via:
//
//	ResponseBasedDetectedErrorTypesArgs{...}
type ResponseBasedDetectedErrorTypesInput interface {
	pulumi.Input

	ToResponseBasedDetectedErrorTypesOutput() ResponseBasedDetectedErrorTypesOutput
	ToResponseBasedDetectedErrorTypesOutputWithContext(context.Context) ResponseBasedDetectedErrorTypesOutput
}

var responseBasedDetectedErrorTypesPtrType = reflect.TypeOf((**ResponseBasedDetectedErrorTypes)(nil)).Elem()

type ResponseBasedDetectedErrorTypesPtrInput interface {
	pulumi.Input

	ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput
	ToResponseBasedDetectedErrorTypesPtrOutputWithContext(context.Context) ResponseBasedDetectedErrorTypesPtrOutput
}

type responseBasedDetectedErrorTypesPtr string

func ResponseBasedDetectedErrorTypesPtr(v string) ResponseBasedDetectedErrorTypesPtrInput {
	return (*responseBasedDetectedErrorTypesPtr)(&v)
}

func (*responseBasedDetectedErrorTypesPtr) ElementType() reflect.Type {
	return responseBasedDetectedErrorTypesPtrType
}

func (in *responseBasedDetectedErrorTypesPtr) ToResponseBasedDetectedErrorTypesPtrOutput() ResponseBasedDetectedErrorTypesPtrOutput {
	return pulumi.ToOutput(in).(ResponseBasedDetectedErrorTypesPtrOutput)
}

func (in *responseBasedDetectedErrorTypesPtr) ToResponseBasedDetectedErrorTypesPtrOutputWithContext(ctx context.Context) ResponseBasedDetectedErrorTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResponseBasedDetectedErrorTypesPtrOutput)
}

// Caching behavior for the requests
type RuleCacheBehavior string

const (
	RuleCacheBehaviorHonorOrigin             = RuleCacheBehavior("HonorOrigin")
	RuleCacheBehaviorOverrideAlways          = RuleCacheBehavior("OverrideAlways")
	RuleCacheBehaviorOverrideIfOriginMissing = RuleCacheBehavior("OverrideIfOriginMissing")
)

// Indicates whether content compression is enabled. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB.
type RuleIsCompressionEnabled string

const (
	RuleIsCompressionEnabledEnabled  = RuleIsCompressionEnabled("Enabled")
	RuleIsCompressionEnabledDisabled = RuleIsCompressionEnabled("Disabled")
)

// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings.
type RuleQueryStringCachingBehavior string

const (
	RuleQueryStringCachingBehaviorIgnoreQueryString            = RuleQueryStringCachingBehavior("IgnoreQueryString")
	RuleQueryStringCachingBehaviorUseQueryString               = RuleQueryStringCachingBehavior("UseQueryString")
	RuleQueryStringCachingBehaviorIgnoreSpecifiedQueryStrings  = RuleQueryStringCachingBehavior("IgnoreSpecifiedQueryStrings")
	RuleQueryStringCachingBehaviorIncludeSpecifiedQueryStrings = RuleQueryStringCachingBehavior("IncludeSpecifiedQueryStrings")
)

// The type of the secret resource.
type SecretType string

const (
	SecretTypeUrlSigningKey                     = SecretType("UrlSigningKey")
	SecretTypeCustomerCertificate               = SecretType("CustomerCertificate")
	SecretTypeManagedCertificate                = SecretType("ManagedCertificate")
	SecretTypeAzureFirstPartyManagedCertificate = SecretType("AzureFirstPartyManagedCertificate")
)

// The type of the Security policy to create.
type SecurityPolicyType string

const (
	SecurityPolicyTypeWebApplicationFirewall = SecurityPolicyType("WebApplicationFirewall")
)

// Describes operator to be matched
type ServerPortOperator string

const (
	ServerPortOperatorAny                = ServerPortOperator("Any")
	ServerPortOperatorEqual              = ServerPortOperator("Equal")
	ServerPortOperatorContains           = ServerPortOperator("Contains")
	ServerPortOperatorBeginsWith         = ServerPortOperator("BeginsWith")
	ServerPortOperatorEndsWith           = ServerPortOperator("EndsWith")
	ServerPortOperatorLessThan           = ServerPortOperator("LessThan")
	ServerPortOperatorLessThanOrEqual    = ServerPortOperator("LessThanOrEqual")
	ServerPortOperatorGreaterThan        = ServerPortOperator("GreaterThan")
	ServerPortOperatorGreaterThanOrEqual = ServerPortOperator("GreaterThanOrEqual")
	ServerPortOperatorRegEx              = ServerPortOperator("RegEx")
)

// Status of the shared private link resource. Can be Pending, Approved, Rejected, Disconnected, or Timeout.
type SharedPrivateLinkResourceStatus string

const (
	SharedPrivateLinkResourceStatusPending      = SharedPrivateLinkResourceStatus("Pending")
	SharedPrivateLinkResourceStatusApproved     = SharedPrivateLinkResourceStatus("Approved")
	SharedPrivateLinkResourceStatusRejected     = SharedPrivateLinkResourceStatus("Rejected")
	SharedPrivateLinkResourceStatusDisconnected = SharedPrivateLinkResourceStatus("Disconnected")
	SharedPrivateLinkResourceStatusTimeout      = SharedPrivateLinkResourceStatus("Timeout")
)

func (SharedPrivateLinkResourceStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResourceStatus)(nil)).Elem()
}

func (e SharedPrivateLinkResourceStatus) ToSharedPrivateLinkResourceStatusOutput() SharedPrivateLinkResourceStatusOutput {
	return pulumi.ToOutput(e).(SharedPrivateLinkResourceStatusOutput)
}

func (e SharedPrivateLinkResourceStatus) ToSharedPrivateLinkResourceStatusOutputWithContext(ctx context.Context) SharedPrivateLinkResourceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SharedPrivateLinkResourceStatusOutput)
}

func (e SharedPrivateLinkResourceStatus) ToSharedPrivateLinkResourceStatusPtrOutput() SharedPrivateLinkResourceStatusPtrOutput {
	return e.ToSharedPrivateLinkResourceStatusPtrOutputWithContext(context.Background())
}

func (e SharedPrivateLinkResourceStatus) ToSharedPrivateLinkResourceStatusPtrOutputWithContext(ctx context.Context) SharedPrivateLinkResourceStatusPtrOutput {
	return SharedPrivateLinkResourceStatus(e).ToSharedPrivateLinkResourceStatusOutputWithContext(ctx).ToSharedPrivateLinkResourceStatusPtrOutputWithContext(ctx)
}

func (e SharedPrivateLinkResourceStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SharedPrivateLinkResourceStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SharedPrivateLinkResourceStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SharedPrivateLinkResourceStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SharedPrivateLinkResourceStatusOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResourceStatus)(nil)).Elem()
}

func (o SharedPrivateLinkResourceStatusOutput) ToSharedPrivateLinkResourceStatusOutput() SharedPrivateLinkResourceStatusOutput {
	return o
}

func (o SharedPrivateLinkResourceStatusOutput) ToSharedPrivateLinkResourceStatusOutputWithContext(ctx context.Context) SharedPrivateLinkResourceStatusOutput {
	return o
}

func (o SharedPrivateLinkResourceStatusOutput) ToSharedPrivateLinkResourceStatusPtrOutput() SharedPrivateLinkResourceStatusPtrOutput {
	return o.ToSharedPrivateLinkResourceStatusPtrOutputWithContext(context.Background())
}

func (o SharedPrivateLinkResourceStatusOutput) ToSharedPrivateLinkResourceStatusPtrOutputWithContext(ctx context.Context) SharedPrivateLinkResourceStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedPrivateLinkResourceStatus) *SharedPrivateLinkResourceStatus {
		return &v
	}).(SharedPrivateLinkResourceStatusPtrOutput)
}

func (o SharedPrivateLinkResourceStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SharedPrivateLinkResourceStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SharedPrivateLinkResourceStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SharedPrivateLinkResourceStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SharedPrivateLinkResourceStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SharedPrivateLinkResourceStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SharedPrivateLinkResourceStatusPtrOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedPrivateLinkResourceStatus)(nil)).Elem()
}

func (o SharedPrivateLinkResourceStatusPtrOutput) ToSharedPrivateLinkResourceStatusPtrOutput() SharedPrivateLinkResourceStatusPtrOutput {
	return o
}

func (o SharedPrivateLinkResourceStatusPtrOutput) ToSharedPrivateLinkResourceStatusPtrOutputWithContext(ctx context.Context) SharedPrivateLinkResourceStatusPtrOutput {
	return o
}

func (o SharedPrivateLinkResourceStatusPtrOutput) Elem() SharedPrivateLinkResourceStatusOutput {
	return o.ApplyT(func(v *SharedPrivateLinkResourceStatus) SharedPrivateLinkResourceStatus {
		if v != nil {
			return *v
		}
		var ret SharedPrivateLinkResourceStatus
		return ret
	}).(SharedPrivateLinkResourceStatusOutput)
}

func (o SharedPrivateLinkResourceStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SharedPrivateLinkResourceStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SharedPrivateLinkResourceStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SharedPrivateLinkResourceStatusInput is an input type that accepts SharedPrivateLinkResourceStatusArgs and SharedPrivateLinkResourceStatusOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceStatusInput` via:
//
//	SharedPrivateLinkResourceStatusArgs{...}
type SharedPrivateLinkResourceStatusInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceStatusOutput() SharedPrivateLinkResourceStatusOutput
	ToSharedPrivateLinkResourceStatusOutputWithContext(context.Context) SharedPrivateLinkResourceStatusOutput
}

var sharedPrivateLinkResourceStatusPtrType = reflect.TypeOf((**SharedPrivateLinkResourceStatus)(nil)).Elem()

type SharedPrivateLinkResourceStatusPtrInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceStatusPtrOutput() SharedPrivateLinkResourceStatusPtrOutput
	ToSharedPrivateLinkResourceStatusPtrOutputWithContext(context.Context) SharedPrivateLinkResourceStatusPtrOutput
}

type sharedPrivateLinkResourceStatusPtr string

func SharedPrivateLinkResourceStatusPtr(v string) SharedPrivateLinkResourceStatusPtrInput {
	return (*sharedPrivateLinkResourceStatusPtr)(&v)
}

func (*sharedPrivateLinkResourceStatusPtr) ElementType() reflect.Type {
	return sharedPrivateLinkResourceStatusPtrType
}

func (in *sharedPrivateLinkResourceStatusPtr) ToSharedPrivateLinkResourceStatusPtrOutput() SharedPrivateLinkResourceStatusPtrOutput {
	return pulumi.ToOutput(in).(SharedPrivateLinkResourceStatusPtrOutput)
}

func (in *sharedPrivateLinkResourceStatusPtr) ToSharedPrivateLinkResourceStatusPtrOutputWithContext(ctx context.Context) SharedPrivateLinkResourceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SharedPrivateLinkResourceStatusPtrOutput)
}

// Name of the pricing tier.
type SkuName string

const (
	SkuName_Standard_Verizon                   = SkuName("Standard_Verizon")
	SkuName_Premium_Verizon                    = SkuName("Premium_Verizon")
	SkuName_Custom_Verizon                     = SkuName("Custom_Verizon")
	SkuName_Standard_Akamai                    = SkuName("Standard_Akamai")
	SkuName_Standard_ChinaCdn                  = SkuName("Standard_ChinaCdn")
	SkuName_Standard_Microsoft                 = SkuName("Standard_Microsoft")
	SkuName_Standard_AzureFrontDoor            = SkuName("Standard_AzureFrontDoor")
	SkuName_Premium_AzureFrontDoor             = SkuName("Premium_AzureFrontDoor")
	SkuName_Standard_955BandWidth_ChinaCdn     = SkuName("Standard_955BandWidth_ChinaCdn")
	SkuName_Standard_AvgBandWidth_ChinaCdn     = SkuName("Standard_AvgBandWidth_ChinaCdn")
	SkuName_StandardPlus_ChinaCdn              = SkuName("StandardPlus_ChinaCdn")
	SkuName_StandardPlus_955BandWidth_ChinaCdn = SkuName("StandardPlus_955BandWidth_ChinaCdn")
	SkuName_StandardPlus_AvgBandWidth_ChinaCdn = SkuName("StandardPlus_AvgBandWidth_ChinaCdn")
)

// Describes operator to be matched
type SocketAddrOperator string

const (
	SocketAddrOperatorAny     = SocketAddrOperator("Any")
	SocketAddrOperatorIPMatch = SocketAddrOperator("IPMatch")
)

// The protocol of an established TLS connection.
type SslProtocol string

const (
	SslProtocolTLSv1    = SslProtocol("TLSv1")
	SslProtocol_TLSv1_1 = SslProtocol("TLSv1.1")
	SslProtocol_TLSv1_2 = SslProtocol("TLSv1.2")
)

// Describes operator to be matched
type SslProtocolOperator string

const (
	SslProtocolOperatorEqual = SslProtocolOperator("Equal")
)

// Describes what transforms are applied before matching
type Transform string

const (
	TransformLowercase   = Transform("Lowercase")
	TransformUppercase   = Transform("Uppercase")
	TransformTrim        = Transform("Trim")
	TransformUrlDecode   = Transform("UrlDecode")
	TransformUrlEncode   = Transform("UrlEncode")
	TransformRemoveNulls = Transform("RemoveNulls")
)

// Describes what transforms were applied before matching.
type TransformType string

const (
	TransformTypeLowercase   = TransformType("Lowercase")
	TransformTypeUppercase   = TransformType("Uppercase")
	TransformTypeTrim        = TransformType("Trim")
	TransformTypeUrlDecode   = TransformType("UrlDecode")
	TransformTypeUrlEncode   = TransformType("UrlEncode")
	TransformTypeRemoveNulls = TransformType("RemoveNulls")
)

// Describes operator to be matched
type UrlFileExtensionOperator string

const (
	UrlFileExtensionOperatorAny                = UrlFileExtensionOperator("Any")
	UrlFileExtensionOperatorEqual              = UrlFileExtensionOperator("Equal")
	UrlFileExtensionOperatorContains           = UrlFileExtensionOperator("Contains")
	UrlFileExtensionOperatorBeginsWith         = UrlFileExtensionOperator("BeginsWith")
	UrlFileExtensionOperatorEndsWith           = UrlFileExtensionOperator("EndsWith")
	UrlFileExtensionOperatorLessThan           = UrlFileExtensionOperator("LessThan")
	UrlFileExtensionOperatorLessThanOrEqual    = UrlFileExtensionOperator("LessThanOrEqual")
	UrlFileExtensionOperatorGreaterThan        = UrlFileExtensionOperator("GreaterThan")
	UrlFileExtensionOperatorGreaterThanOrEqual = UrlFileExtensionOperator("GreaterThanOrEqual")
	UrlFileExtensionOperatorRegEx              = UrlFileExtensionOperator("RegEx")
)

// Describes operator to be matched
type UrlFileNameOperator string

const (
	UrlFileNameOperatorAny                = UrlFileNameOperator("Any")
	UrlFileNameOperatorEqual              = UrlFileNameOperator("Equal")
	UrlFileNameOperatorContains           = UrlFileNameOperator("Contains")
	UrlFileNameOperatorBeginsWith         = UrlFileNameOperator("BeginsWith")
	UrlFileNameOperatorEndsWith           = UrlFileNameOperator("EndsWith")
	UrlFileNameOperatorLessThan           = UrlFileNameOperator("LessThan")
	UrlFileNameOperatorLessThanOrEqual    = UrlFileNameOperator("LessThanOrEqual")
	UrlFileNameOperatorGreaterThan        = UrlFileNameOperator("GreaterThan")
	UrlFileNameOperatorGreaterThanOrEqual = UrlFileNameOperator("GreaterThanOrEqual")
	UrlFileNameOperatorRegEx              = UrlFileNameOperator("RegEx")
)

// Describes operator to be matched
type UrlPathOperator string

const (
	UrlPathOperatorAny                = UrlPathOperator("Any")
	UrlPathOperatorEqual              = UrlPathOperator("Equal")
	UrlPathOperatorContains           = UrlPathOperator("Contains")
	UrlPathOperatorBeginsWith         = UrlPathOperator("BeginsWith")
	UrlPathOperatorEndsWith           = UrlPathOperator("EndsWith")
	UrlPathOperatorLessThan           = UrlPathOperator("LessThan")
	UrlPathOperatorLessThanOrEqual    = UrlPathOperator("LessThanOrEqual")
	UrlPathOperatorGreaterThan        = UrlPathOperator("GreaterThan")
	UrlPathOperatorGreaterThanOrEqual = UrlPathOperator("GreaterThanOrEqual")
	UrlPathOperatorWildcard           = UrlPathOperator("Wildcard")
	UrlPathOperatorRegEx              = UrlPathOperator("RegEx")
)

// Match variable to compare against.
type WafMatchVariable string

const (
	WafMatchVariableRemoteAddr    = WafMatchVariable("RemoteAddr")
	WafMatchVariableSocketAddr    = WafMatchVariable("SocketAddr")
	WafMatchVariableRequestMethod = WafMatchVariable("RequestMethod")
	WafMatchVariableRequestHeader = WafMatchVariable("RequestHeader")
	WafMatchVariableRequestUri    = WafMatchVariable("RequestUri")
	WafMatchVariableQueryString   = WafMatchVariable("QueryString")
	WafMatchVariableRequestBody   = WafMatchVariable("RequestBody")
	WafMatchVariableCookies       = WafMatchVariable("Cookies")
	WafMatchVariablePostArgs      = WafMatchVariable("PostArgs")
)

func init() {
	pulumi.RegisterOutputType(AfdMinimumTlsVersionOutput{})
	pulumi.RegisterOutputType(AfdMinimumTlsVersionPtrOutput{})
	pulumi.RegisterOutputType(GeoFilterActionsOutput{})
	pulumi.RegisterOutputType(GeoFilterActionsPtrOutput{})
	pulumi.RegisterOutputType(HealthProbeRequestTypeOutput{})
	pulumi.RegisterOutputType(HealthProbeRequestTypePtrOutput{})
	pulumi.RegisterOutputType(ProbeProtocolOutput{})
	pulumi.RegisterOutputType(ProbeProtocolPtrOutput{})
	pulumi.RegisterOutputType(QueryStringCachingBehaviorOutput{})
	pulumi.RegisterOutputType(QueryStringCachingBehaviorPtrOutput{})
	pulumi.RegisterOutputType(ResponseBasedDetectedErrorTypesOutput{})
	pulumi.RegisterOutputType(ResponseBasedDetectedErrorTypesPtrOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceStatusOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceStatusPtrOutput{})
}
