// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180315preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Blob container storage information.
type BlobShare struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// BlobShareInput is an input type that accepts BlobShareArgs and BlobShareOutput values.
// You can construct a concrete instance of `BlobShareInput` via:
//
//          BlobShareArgs{...}
type BlobShareInput interface {
	pulumi.Input

	ToBlobShareOutput() BlobShareOutput
	ToBlobShareOutputWithContext(context.Context) BlobShareOutput
}

// Blob container storage information.
type BlobShareArgs struct {
	// SAS URI of Azure Storage Account Container.
	SasUri pulumi.StringInput `pulumi:"sasUri"`
}

func (BlobShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShare)(nil)).Elem()
}

func (i BlobShareArgs) ToBlobShareOutput() BlobShareOutput {
	return i.ToBlobShareOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobShareOutputWithContext(ctx context.Context) BlobShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput)
}

func (i BlobShareArgs) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput).ToBlobSharePtrOutputWithContext(ctx)
}

// BlobSharePtrInput is an input type that accepts BlobShareArgs, BlobSharePtr and BlobSharePtrOutput values.
// You can construct a concrete instance of `BlobSharePtrInput` via:
//
//          BlobShareArgs{...}
//
//  or:
//
//          nil
type BlobSharePtrInput interface {
	pulumi.Input

	ToBlobSharePtrOutput() BlobSharePtrOutput
	ToBlobSharePtrOutputWithContext(context.Context) BlobSharePtrOutput
}

type blobSharePtrType BlobShareArgs

func BlobSharePtr(v *BlobShareArgs) BlobSharePtrInput {
	return (*blobSharePtrType)(v)
}

func (*blobSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShare)(nil)).Elem()
}

func (i *blobSharePtrType) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i *blobSharePtrType) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobSharePtrOutput)
}

// Blob container storage information.
type BlobShareOutput struct{ *pulumi.OutputState }

func (BlobShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShare)(nil)).Elem()
}

func (o BlobShareOutput) ToBlobShareOutput() BlobShareOutput {
	return o
}

func (o BlobShareOutput) ToBlobShareOutputWithContext(ctx context.Context) BlobShareOutput {
	return o
}

func (o BlobShareOutput) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return o.ToBlobSharePtrOutputWithContext(context.Background())
}

func (o BlobShareOutput) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return o.ApplyT(func(v BlobShare) *BlobShare {
		return &v
	}).(BlobSharePtrOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v BlobShare) string { return v.SasUri }).(pulumi.StringOutput)
}

type BlobSharePtrOutput struct{ *pulumi.OutputState }

func (BlobSharePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShare)(nil)).Elem()
}

func (o BlobSharePtrOutput) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return o
}

func (o BlobSharePtrOutput) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return o
}

func (o BlobSharePtrOutput) Elem() BlobShareOutput {
	return o.ApplyT(func(v *BlobShare) BlobShare { return *v }).(BlobShareOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobSharePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShare) *string {
		if v == nil {
			return nil
		}
		return &v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Blob container storage information.
type BlobShareInvokeResponse struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// BlobShareInvokeResponseInput is an input type that accepts BlobShareInvokeResponseArgs and BlobShareInvokeResponseOutput values.
// You can construct a concrete instance of `BlobShareInvokeResponseInput` via:
//
//          BlobShareInvokeResponseArgs{...}
type BlobShareInvokeResponseInput interface {
	pulumi.Input

	ToBlobShareInvokeResponseOutput() BlobShareInvokeResponseOutput
	ToBlobShareInvokeResponseOutputWithContext(context.Context) BlobShareInvokeResponseOutput
}

// Blob container storage information.
type BlobShareInvokeResponseArgs struct {
	// SAS URI of Azure Storage Account Container.
	SasUri pulumi.StringInput `pulumi:"sasUri"`
}

func (BlobShareInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareInvokeResponse)(nil)).Elem()
}

func (i BlobShareInvokeResponseArgs) ToBlobShareInvokeResponseOutput() BlobShareInvokeResponseOutput {
	return i.ToBlobShareInvokeResponseOutputWithContext(context.Background())
}

func (i BlobShareInvokeResponseArgs) ToBlobShareInvokeResponseOutputWithContext(ctx context.Context) BlobShareInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareInvokeResponseOutput)
}

func (i BlobShareInvokeResponseArgs) ToBlobShareInvokeResponsePtrOutput() BlobShareInvokeResponsePtrOutput {
	return i.ToBlobShareInvokeResponsePtrOutputWithContext(context.Background())
}

func (i BlobShareInvokeResponseArgs) ToBlobShareInvokeResponsePtrOutputWithContext(ctx context.Context) BlobShareInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareInvokeResponseOutput).ToBlobShareInvokeResponsePtrOutputWithContext(ctx)
}

// BlobShareInvokeResponsePtrInput is an input type that accepts BlobShareInvokeResponseArgs, BlobShareInvokeResponsePtr and BlobShareInvokeResponsePtrOutput values.
// You can construct a concrete instance of `BlobShareInvokeResponsePtrInput` via:
//
//          BlobShareInvokeResponseArgs{...}
//
//  or:
//
//          nil
type BlobShareInvokeResponsePtrInput interface {
	pulumi.Input

	ToBlobShareInvokeResponsePtrOutput() BlobShareInvokeResponsePtrOutput
	ToBlobShareInvokeResponsePtrOutputWithContext(context.Context) BlobShareInvokeResponsePtrOutput
}

type blobShareInvokeResponsePtrType BlobShareInvokeResponseArgs

func BlobShareInvokeResponsePtr(v *BlobShareInvokeResponseArgs) BlobShareInvokeResponsePtrInput {
	return (*blobShareInvokeResponsePtrType)(v)
}

func (*blobShareInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareInvokeResponse)(nil)).Elem()
}

func (i *blobShareInvokeResponsePtrType) ToBlobShareInvokeResponsePtrOutput() BlobShareInvokeResponsePtrOutput {
	return i.ToBlobShareInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *blobShareInvokeResponsePtrType) ToBlobShareInvokeResponsePtrOutputWithContext(ctx context.Context) BlobShareInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareInvokeResponsePtrOutput)
}

// Blob container storage information.
type BlobShareInvokeResponseOutput struct{ *pulumi.OutputState }

func (BlobShareInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareInvokeResponse)(nil)).Elem()
}

func (o BlobShareInvokeResponseOutput) ToBlobShareInvokeResponseOutput() BlobShareInvokeResponseOutput {
	return o
}

func (o BlobShareInvokeResponseOutput) ToBlobShareInvokeResponseOutputWithContext(ctx context.Context) BlobShareInvokeResponseOutput {
	return o
}

func (o BlobShareInvokeResponseOutput) ToBlobShareInvokeResponsePtrOutput() BlobShareInvokeResponsePtrOutput {
	return o.ToBlobShareInvokeResponsePtrOutputWithContext(context.Background())
}

func (o BlobShareInvokeResponseOutput) ToBlobShareInvokeResponsePtrOutputWithContext(ctx context.Context) BlobShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v BlobShareInvokeResponse) *BlobShareInvokeResponse {
		return &v
	}).(BlobShareInvokeResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareInvokeResponseOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v BlobShareInvokeResponse) string { return v.SasUri }).(pulumi.StringOutput)
}

type BlobShareInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobShareInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareInvokeResponse)(nil)).Elem()
}

func (o BlobShareInvokeResponsePtrOutput) ToBlobShareInvokeResponsePtrOutput() BlobShareInvokeResponsePtrOutput {
	return o
}

func (o BlobShareInvokeResponsePtrOutput) ToBlobShareInvokeResponsePtrOutputWithContext(ctx context.Context) BlobShareInvokeResponsePtrOutput {
	return o
}

func (o BlobShareInvokeResponsePtrOutput) Elem() BlobShareInvokeResponseOutput {
	return o.ApplyT(func(v *BlobShareInvokeResponse) BlobShareInvokeResponse { return *v }).(BlobShareInvokeResponseOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareInvokeResponsePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShareInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Blob container storage information.
type BlobShareResponse struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// BlobShareResponseInput is an input type that accepts BlobShareResponseArgs and BlobShareResponseOutput values.
// You can construct a concrete instance of `BlobShareResponseInput` via:
//
//          BlobShareResponseArgs{...}
type BlobShareResponseInput interface {
	pulumi.Input

	ToBlobShareResponseOutput() BlobShareResponseOutput
	ToBlobShareResponseOutputWithContext(context.Context) BlobShareResponseOutput
}

// Blob container storage information.
type BlobShareResponseArgs struct {
	// SAS URI of Azure Storage Account Container.
	SasUri pulumi.StringInput `pulumi:"sasUri"`
}

func (BlobShareResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareResponse)(nil)).Elem()
}

func (i BlobShareResponseArgs) ToBlobShareResponseOutput() BlobShareResponseOutput {
	return i.ToBlobShareResponseOutputWithContext(context.Background())
}

func (i BlobShareResponseArgs) ToBlobShareResponseOutputWithContext(ctx context.Context) BlobShareResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareResponseOutput)
}

func (i BlobShareResponseArgs) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return i.ToBlobShareResponsePtrOutputWithContext(context.Background())
}

func (i BlobShareResponseArgs) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareResponseOutput).ToBlobShareResponsePtrOutputWithContext(ctx)
}

// BlobShareResponsePtrInput is an input type that accepts BlobShareResponseArgs, BlobShareResponsePtr and BlobShareResponsePtrOutput values.
// You can construct a concrete instance of `BlobShareResponsePtrInput` via:
//
//          BlobShareResponseArgs{...}
//
//  or:
//
//          nil
type BlobShareResponsePtrInput interface {
	pulumi.Input

	ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput
	ToBlobShareResponsePtrOutputWithContext(context.Context) BlobShareResponsePtrOutput
}

type blobShareResponsePtrType BlobShareResponseArgs

func BlobShareResponsePtr(v *BlobShareResponseArgs) BlobShareResponsePtrInput {
	return (*blobShareResponsePtrType)(v)
}

func (*blobShareResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareResponse)(nil)).Elem()
}

func (i *blobShareResponsePtrType) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return i.ToBlobShareResponsePtrOutputWithContext(context.Background())
}

func (i *blobShareResponsePtrType) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareResponsePtrOutput)
}

// Blob container storage information.
type BlobShareResponseOutput struct{ *pulumi.OutputState }

func (BlobShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutput() BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutputWithContext(ctx context.Context) BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o.ToBlobShareResponsePtrOutputWithContext(context.Background())
}

func (o BlobShareResponseOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o.ApplyT(func(v BlobShareResponse) *BlobShareResponse {
		return &v
	}).(BlobShareResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponseOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v BlobShareResponse) string { return v.SasUri }).(pulumi.StringOutput)
}

type BlobShareResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) Elem() BlobShareResponseOutput {
	return o.ApplyT(func(v *BlobShareResponse) BlobShareResponse { return *v }).(BlobShareResponseOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponsePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInput struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourceSqlServerTaskInputInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs and ConnectToSourceSqlServerTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputInput` via:
//
//          ConnectToSourceSqlServerTaskInputArgs{...}
type ConnectToSourceSqlServerTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput
	ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputOutput
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourceSqlServerTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput {
	return i.ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput)
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput).ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskInputPtrInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs, ConnectToSourceSqlServerTaskInputPtr and ConnectToSourceSqlServerTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputPtrInput` via:
//
//          ConnectToSourceSqlServerTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceSqlServerTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput
	ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputPtrOutput
}

type connectToSourceSqlServerTaskInputPtrType ConnectToSourceSqlServerTaskInputArgs

func ConnectToSourceSqlServerTaskInputPtr(v *ConnectToSourceSqlServerTaskInputArgs) ConnectToSourceSqlServerTaskInputPtrInput {
	return (*connectToSourceSqlServerTaskInputPtrType)(v)
}

func (*connectToSourceSqlServerTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *ConnectToSourceSqlServerTaskInput {
		return &v
	}).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

type ConnectToSourceSqlServerTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) Elem() ConnectToSourceSqlServerTaskInputOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) ConnectToSourceSqlServerTaskInput { return *v }).(ConnectToSourceSqlServerTaskInputOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputInvokeResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourceSqlServerTaskInputInvokeResponseInput is an input type that accepts ConnectToSourceSqlServerTaskInputInvokeResponseArgs and ConnectToSourceSqlServerTaskInputInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputInvokeResponseInput` via:
//
//          ConnectToSourceSqlServerTaskInputInvokeResponseArgs{...}
type ConnectToSourceSqlServerTaskInputInvokeResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputInvokeResponseOutput() ConnectToSourceSqlServerTaskInputInvokeResponseOutput
	ToConnectToSourceSqlServerTaskInputInvokeResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputInvokeResponseOutput
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputInvokeResponseArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourceSqlServerTaskInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputInvokeResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskInputInvokeResponseArgs) ToConnectToSourceSqlServerTaskInputInvokeResponseOutput() ConnectToSourceSqlServerTaskInputInvokeResponseOutput {
	return i.ToConnectToSourceSqlServerTaskInputInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputInvokeResponseArgs) ToConnectToSourceSqlServerTaskInputInvokeResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputInvokeResponseOutput)
}

func (i ConnectToSourceSqlServerTaskInputInvokeResponseArgs) ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput() ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputInvokeResponseArgs) ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputInvokeResponseOutput).ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskInputInvokeResponsePtrInput is an input type that accepts ConnectToSourceSqlServerTaskInputInvokeResponseArgs, ConnectToSourceSqlServerTaskInputInvokeResponsePtr and ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputInvokeResponsePtrInput` via:
//
//          ConnectToSourceSqlServerTaskInputInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceSqlServerTaskInputInvokeResponsePtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput() ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput
	ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput
}

type connectToSourceSqlServerTaskInputInvokeResponsePtrType ConnectToSourceSqlServerTaskInputInvokeResponseArgs

func ConnectToSourceSqlServerTaskInputInvokeResponsePtr(v *ConnectToSourceSqlServerTaskInputInvokeResponseArgs) ConnectToSourceSqlServerTaskInputInvokeResponsePtrInput {
	return (*connectToSourceSqlServerTaskInputInvokeResponsePtrType)(v)
}

func (*connectToSourceSqlServerTaskInputInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputInvokeResponse)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskInputInvokeResponsePtrType) ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput() ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskInputInvokeResponsePtrType) ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputInvokeResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputInvokeResponseOutput) ToConnectToSourceSqlServerTaskInputInvokeResponseOutput() ConnectToSourceSqlServerTaskInputInvokeResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputInvokeResponseOutput) ToConnectToSourceSqlServerTaskInputInvokeResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputInvokeResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputInvokeResponseOutput) ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput() ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return o.ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskInputInvokeResponseOutput) ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputInvokeResponse) *ConnectToSourceSqlServerTaskInputInvokeResponse {
		return &v
	}).(ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputInvokeResponseOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputInvokeResponse) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputInvokeResponseOutput) SourceConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

type ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputInvokeResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput) ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput() ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput) ToConnectToSourceSqlServerTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput) Elem() ConnectToSourceSqlServerTaskInputInvokeResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputInvokeResponse) ConnectToSourceSqlServerTaskInputInvokeResponse {
		return *v
	}).(ConnectToSourceSqlServerTaskInputInvokeResponseOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourceSqlServerTaskInputResponseInput is an input type that accepts ConnectToSourceSqlServerTaskInputResponseArgs and ConnectToSourceSqlServerTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputResponseInput` via:
//
//          ConnectToSourceSqlServerTaskInputResponseArgs{...}
type ConnectToSourceSqlServerTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput
	ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputResponseOutput
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponseArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourceSqlServerTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskInputResponseArgs) ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput {
	return i.ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputResponseArgs) ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputResponseOutput)
}

func (i ConnectToSourceSqlServerTaskInputResponseArgs) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputResponseArgs) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputResponseOutput).ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskInputResponsePtrInput is an input type that accepts ConnectToSourceSqlServerTaskInputResponseArgs, ConnectToSourceSqlServerTaskInputResponsePtr and ConnectToSourceSqlServerTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputResponsePtrInput` via:
//
//          ConnectToSourceSqlServerTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceSqlServerTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput
	ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput
}

type connectToSourceSqlServerTaskInputResponsePtrType ConnectToSourceSqlServerTaskInputResponseArgs

func ConnectToSourceSqlServerTaskInputResponsePtr(v *ConnectToSourceSqlServerTaskInputResponseArgs) ConnectToSourceSqlServerTaskInputResponsePtrInput {
	return (*connectToSourceSqlServerTaskInputResponsePtrType)(v)
}

func (*connectToSourceSqlServerTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskInputResponsePtrType) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskInputResponsePtrType) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return &v
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ConnectToSourceSqlServerTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) Elem() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) ConnectToSourceSqlServerTaskInputResponse {
		return *v
	}).(ConnectToSourceSqlServerTaskInputResponseOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse struct {
	// SQL Server compatibility level of database
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles []DatabaseFileInfoInvokeResponse `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState string `pulumi:"databaseState"`
	// Result identifier
	Id string `pulumi:"id"`
	// Database name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
}

// ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseInput is an input type that accepts ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseArgs and ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseInput` via:
//
//          ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseArgs{...}
type ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput
	ToConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseArgs struct {
	// SQL Server compatibility level of database
	CompatibilityLevel pulumi.StringInput `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles DatabaseFileInfoInvokeResponseArrayInput `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState pulumi.StringInput `pulumi:"databaseState"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Database name
	Name pulumi.StringInput `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'DatabaseLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB pulumi.Float64Input `pulumi:"sizeMB"`
}

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseArgs) ToConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput {
	return i.ToConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseArgs) ToConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput {
	return o
}

// SQL Server compatibility level of database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse) string {
		return v.CompatibilityLevel
	}).(pulumi.StringOutput)
}

// The list of database files
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) DatabaseFiles() DatabaseFileInfoInvokeResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse) []DatabaseFileInfoInvokeResponse {
		return v.DatabaseFiles
	}).(DatabaseFileInfoInvokeResponseArrayOutput)
}

// State of the database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) DatabaseState() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse) string { return v.DatabaseState }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Database name
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
// Expected value is 'DatabaseLevelOutput'.
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the file in megabytes
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse struct {
	// SQL Server compatibility level of database
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles []DatabaseFileInfoResponse `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState string `pulumi:"databaseState"`
	// Result identifier
	Id string `pulumi:"id"`
	// Database name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
}

// ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseInput is an input type that accepts ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs and ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseInput` via:
//
//          ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs{...}
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput
	ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs struct {
	// SQL Server compatibility level of database
	CompatibilityLevel pulumi.StringInput `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles DatabaseFileInfoResponseArrayInput `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState pulumi.StringInput `pulumi:"databaseState"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Database name
	Name pulumi.StringInput `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'DatabaseLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB pulumi.Float64Input `pulumi:"sizeMB"`
}

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return i.ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

// SQL Server compatibility level of database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.CompatibilityLevel }).(pulumi.StringOutput)
}

// The list of database files
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseFiles() DatabaseFileInfoResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) []DatabaseFileInfoResponse {
		return v.DatabaseFiles
	}).(DatabaseFileInfoResponseArrayOutput)
}

// State of the database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseState() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.DatabaseState }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Database name
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
// Expected value is 'DatabaseLevelOutput'.
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the file in megabytes
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse struct {
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Type of result - database level or task level
	// Expected value is 'TaskLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionInvokeResponse `pulumi:"validationErrors"`
}

// ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseInput is an input type that accepts ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseArgs and ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseInput` via:
//
//          ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseArgs{...}
type ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput
	ToConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseArgs struct {
	// Source databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Type of result - database level or task level
	// Expected value is 'TaskLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors ReportableExceptionInvokeResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseArgs) ToConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput {
	return i.ToConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseArgs) ToConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput {
	return o
}

// Source databases as a map from database name to database id
func (o ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse) map[string]string {
		return v.Databases
	}).(pulumi.StringMapOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Type of result - database level or task level
// Expected value is 'TaskLevelOutput'.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput) ValidationErrors() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.ValidationErrors
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponse struct {
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Type of result - database level or task level
	// Expected value is 'TaskLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToSourceSqlServerTaskOutputTaskLevelResponseInput is an input type that accepts ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs and ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskOutputTaskLevelResponseInput` via:
//
//          ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs{...}
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput
	ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs struct {
	// Source databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Type of result - database level or task level
	// Expected value is 'TaskLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return i.ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

// Source databases as a map from database name to database id
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Type of result - database level or task level
// Expected value is 'TaskLevelOutput'.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Source server version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskProperties struct {
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerTaskPropertiesInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesArgs and ConnectToSourceSqlServerTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesInput` via:
//
//          ConnectToSourceSqlServerTaskPropertiesArgs{...}
type ConnectToSourceSqlServerTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput
	ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesArgs struct {
	// Task input
	Input ConnectToSourceSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesOutput) ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesOutput) ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesOutput {
	return o
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesOutput) Input() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) *ConnectToSourceSqlServerTaskInput { return v.Input }).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer'.
func (o ConnectToSourceSqlServerTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesInvokeResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorInvokeResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputInvokeResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerTaskPropertiesInvokeResponseInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesInvokeResponseArgs and ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesInvokeResponseInput` via:
//
//          ConnectToSourceSqlServerTaskPropertiesInvokeResponseArgs{...}
type ConnectToSourceSqlServerTaskPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput() ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput
	ToConnectToSourceSqlServerTaskPropertiesInvokeResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesInvokeResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorInvokeResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputInvokeResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerTaskPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesInvokeResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskPropertiesInvokeResponseArgs) ToConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput() ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesInvokeResponseArgs) ToConnectToSourceSqlServerTaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesInvokeResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput) ToConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput() ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput) ToConnectToSourceSqlServerTaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput) Errors() ODataErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesInvokeResponse) []ODataErrorInvokeResponse {
		return v.Errors
	}).(ODataErrorInvokeResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput) Input() ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesInvokeResponse) *ConnectToSourceSqlServerTaskInputInvokeResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesInvokeResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer'.
func (o ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesInvokeResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerTaskPropertiesResponseInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesResponseArgs and ConnectToSourceSqlServerTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesResponseInput` via:
//
//          ConnectToSourceSqlServerTaskPropertiesResponseArgs{...}
type ConnectToSourceSqlServerTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput
	ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskPropertiesResponseArgs) ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesResponseArgs) ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Input() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer'.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInput struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlDbTaskInputInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs and ConnectToTargetSqlDbTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputInput` via:
//
//          ConnectToTargetSqlDbTaskInputArgs{...}
type ConnectToTargetSqlDbTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput
	ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputOutput
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputArgs struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput {
	return i.ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput)
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput).ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskInputPtrInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs, ConnectToTargetSqlDbTaskInputPtr and ConnectToTargetSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputPtrInput` via:
//
//          ConnectToTargetSqlDbTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput
	ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputPtrOutput
}

type connectToTargetSqlDbTaskInputPtrType ConnectToTargetSqlDbTaskInputArgs

func ConnectToTargetSqlDbTaskInputPtr(v *ConnectToTargetSqlDbTaskInputArgs) ConnectToTargetSqlDbTaskInputPtrInput {
	return (*connectToTargetSqlDbTaskInputPtrType)(v)
}

func (*connectToTargetSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInput) *ConnectToTargetSqlDbTaskInput {
		return &v
	}).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ConnectToTargetSqlDbTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) Elem() ConnectToTargetSqlDbTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInput) ConnectToTargetSqlDbTaskInput { return *v }).(ConnectToTargetSqlDbTaskInputOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputInvokeResponse struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlDbTaskInputInvokeResponseInput is an input type that accepts ConnectToTargetSqlDbTaskInputInvokeResponseArgs and ConnectToTargetSqlDbTaskInputInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputInvokeResponseInput` via:
//
//          ConnectToTargetSqlDbTaskInputInvokeResponseArgs{...}
type ConnectToTargetSqlDbTaskInputInvokeResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputInvokeResponseOutput() ConnectToTargetSqlDbTaskInputInvokeResponseOutput
	ToConnectToTargetSqlDbTaskInputInvokeResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputInvokeResponseOutput
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputInvokeResponseArgs struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlDbTaskInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputInvokeResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskInputInvokeResponseArgs) ToConnectToTargetSqlDbTaskInputInvokeResponseOutput() ConnectToTargetSqlDbTaskInputInvokeResponseOutput {
	return i.ToConnectToTargetSqlDbTaskInputInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputInvokeResponseArgs) ToConnectToTargetSqlDbTaskInputInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputInvokeResponseOutput)
}

func (i ConnectToTargetSqlDbTaskInputInvokeResponseArgs) ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput() ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputInvokeResponseArgs) ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputInvokeResponseOutput).ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskInputInvokeResponsePtrInput is an input type that accepts ConnectToTargetSqlDbTaskInputInvokeResponseArgs, ConnectToTargetSqlDbTaskInputInvokeResponsePtr and ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputInvokeResponsePtrInput` via:
//
//          ConnectToTargetSqlDbTaskInputInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlDbTaskInputInvokeResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput() ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput
	ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput
}

type connectToTargetSqlDbTaskInputInvokeResponsePtrType ConnectToTargetSqlDbTaskInputInvokeResponseArgs

func ConnectToTargetSqlDbTaskInputInvokeResponsePtr(v *ConnectToTargetSqlDbTaskInputInvokeResponseArgs) ConnectToTargetSqlDbTaskInputInvokeResponsePtrInput {
	return (*connectToTargetSqlDbTaskInputInvokeResponsePtrType)(v)
}

func (*connectToTargetSqlDbTaskInputInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputInvokeResponse)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskInputInvokeResponsePtrType) ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput() ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskInputInvokeResponsePtrType) ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputInvokeResponseOutput) ToConnectToTargetSqlDbTaskInputInvokeResponseOutput() ConnectToTargetSqlDbTaskInputInvokeResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputInvokeResponseOutput) ToConnectToTargetSqlDbTaskInputInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputInvokeResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputInvokeResponseOutput) ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput() ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return o.ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskInputInvokeResponseOutput) ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputInvokeResponse) *ConnectToTargetSqlDbTaskInputInvokeResponse {
		return &v
	}).(ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputInvokeResponseOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

type ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput) ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput() ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput) ToConnectToTargetSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput) Elem() ConnectToTargetSqlDbTaskInputInvokeResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputInvokeResponse) ConnectToTargetSqlDbTaskInputInvokeResponse {
		return *v
	}).(ConnectToTargetSqlDbTaskInputInvokeResponseOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponse struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlDbTaskInputResponseInput is an input type that accepts ConnectToTargetSqlDbTaskInputResponseArgs and ConnectToTargetSqlDbTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputResponseInput` via:
//
//          ConnectToTargetSqlDbTaskInputResponseArgs{...}
type ConnectToTargetSqlDbTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput
	ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputResponseOutput
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponseArgs struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlDbTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskInputResponseArgs) ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput {
	return i.ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputResponseArgs) ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputResponseOutput)
}

func (i ConnectToTargetSqlDbTaskInputResponseArgs) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputResponseArgs) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputResponseOutput).ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskInputResponsePtrInput is an input type that accepts ConnectToTargetSqlDbTaskInputResponseArgs, ConnectToTargetSqlDbTaskInputResponsePtr and ConnectToTargetSqlDbTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputResponsePtrInput` via:
//
//          ConnectToTargetSqlDbTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlDbTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput
	ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput
}

type connectToTargetSqlDbTaskInputResponsePtrType ConnectToTargetSqlDbTaskInputResponseArgs

func ConnectToTargetSqlDbTaskInputResponsePtr(v *ConnectToTargetSqlDbTaskInputResponseArgs) ConnectToTargetSqlDbTaskInputResponsePtrInput {
	return (*connectToTargetSqlDbTaskInputResponsePtrType)(v)
}

func (*connectToTargetSqlDbTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskInputResponsePtrType) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskInputResponsePtrType) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return &v
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) ConnectToTargetSqlDbTaskInputResponse { return *v }).(ConnectToTargetSqlDbTaskInputResponseOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputInvokeResponse struct {
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// ConnectToTargetSqlDbTaskOutputInvokeResponseInput is an input type that accepts ConnectToTargetSqlDbTaskOutputInvokeResponseArgs and ConnectToTargetSqlDbTaskOutputInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskOutputInvokeResponseInput` via:
//
//          ConnectToTargetSqlDbTaskOutputInvokeResponseArgs{...}
type ConnectToTargetSqlDbTaskOutputInvokeResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskOutputInvokeResponseOutput() ConnectToTargetSqlDbTaskOutputInvokeResponseOutput
	ToConnectToTargetSqlDbTaskOutputInvokeResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskOutputInvokeResponseOutput
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputInvokeResponseArgs struct {
	// Source databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (ConnectToTargetSqlDbTaskOutputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputInvokeResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskOutputInvokeResponseArgs) ToConnectToTargetSqlDbTaskOutputInvokeResponseOutput() ConnectToTargetSqlDbTaskOutputInvokeResponseOutput {
	return i.ToConnectToTargetSqlDbTaskOutputInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskOutputInvokeResponseArgs) ToConnectToTargetSqlDbTaskOutputInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskOutputInvokeResponseOutput)
}

// ConnectToTargetSqlDbTaskOutputInvokeResponseArrayInput is an input type that accepts ConnectToTargetSqlDbTaskOutputInvokeResponseArray and ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskOutputInvokeResponseArrayInput` via:
//
//          ConnectToTargetSqlDbTaskOutputInvokeResponseArray{ ConnectToTargetSqlDbTaskOutputInvokeResponseArgs{...} }
type ConnectToTargetSqlDbTaskOutputInvokeResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput() ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput
	ToConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutputWithContext(context.Context) ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput
}

type ConnectToTargetSqlDbTaskOutputInvokeResponseArray []ConnectToTargetSqlDbTaskOutputInvokeResponseInput

func (ConnectToTargetSqlDbTaskOutputInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputInvokeResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskOutputInvokeResponseArray) ToConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput() ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput {
	return i.ToConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskOutputInvokeResponseArray) ToConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputInvokeResponseOutput) ToConnectToTargetSqlDbTaskOutputInvokeResponseOutput() ConnectToTargetSqlDbTaskOutputInvokeResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputInvokeResponseOutput) ToConnectToTargetSqlDbTaskOutputInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputInvokeResponseOutput {
	return o
}

// Source databases as a map from database name to database id
func (o ConnectToTargetSqlDbTaskOutputInvokeResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputInvokeResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Result identifier
func (o ConnectToTargetSqlDbTaskOutputInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetSqlDbTaskOutputInvokeResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputInvokeResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetSqlDbTaskOutputInvokeResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputInvokeResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput() ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlDbTaskOutputInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlDbTaskOutputInvokeResponse {
		return vs[0].([]ConnectToTargetSqlDbTaskOutputInvokeResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlDbTaskOutputInvokeResponseOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponse struct {
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// ConnectToTargetSqlDbTaskOutputResponseInput is an input type that accepts ConnectToTargetSqlDbTaskOutputResponseArgs and ConnectToTargetSqlDbTaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskOutputResponseInput` via:
//
//          ConnectToTargetSqlDbTaskOutputResponseArgs{...}
type ConnectToTargetSqlDbTaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput
	ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponseArgs struct {
	// Source databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (ConnectToTargetSqlDbTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskOutputResponseArgs) ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput {
	return i.ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskOutputResponseArgs) ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskOutputResponseOutput)
}

// ConnectToTargetSqlDbTaskOutputResponseArrayInput is an input type that accepts ConnectToTargetSqlDbTaskOutputResponseArray and ConnectToTargetSqlDbTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskOutputResponseArrayInput` via:
//
//          ConnectToTargetSqlDbTaskOutputResponseArray{ ConnectToTargetSqlDbTaskOutputResponseArgs{...} }
type ConnectToTargetSqlDbTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput
	ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput
}

type ConnectToTargetSqlDbTaskOutputResponseArray []ConnectToTargetSqlDbTaskOutputResponseInput

func (ConnectToTargetSqlDbTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskOutputResponseArray) ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return i.ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskOutputResponseArray) ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

// Source databases as a map from database name to database id
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Result identifier
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type ConnectToTargetSqlDbTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlDbTaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlDbTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlDbTaskOutputResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskProperties struct {
	// Task input
	Input *ConnectToTargetSqlDbTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlDbTaskPropertiesInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesArgs and ConnectToTargetSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesInput` via:
//
//          ConnectToTargetSqlDbTaskPropertiesArgs{...}
type ConnectToTargetSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput
	ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesArgs struct {
	// Task input
	Input ConnectToTargetSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesOutput) ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesOutput) ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesOutput {
	return o
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesOutput) Input() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) *ConnectToTargetSqlDbTaskInput { return v.Input }).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb'.
func (o ConnectToTargetSqlDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesInvokeResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorInvokeResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInputInvokeResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputInvokeResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlDbTaskPropertiesInvokeResponseInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesInvokeResponseArgs and ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesInvokeResponseInput` via:
//
//          ConnectToTargetSqlDbTaskPropertiesInvokeResponseArgs{...}
type ConnectToTargetSqlDbTaskPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput() ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput
	ToConnectToTargetSqlDbTaskPropertiesInvokeResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesInvokeResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorInvokeResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetSqlDbTaskInputInvokeResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetSqlDbTaskOutputInvokeResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlDbTaskPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesInvokeResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskPropertiesInvokeResponseArgs) ToConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput() ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesInvokeResponseArgs) ToConnectToTargetSqlDbTaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput) ToConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput() ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput) ToConnectToTargetSqlDbTaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput) Errors() ODataErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesInvokeResponse) []ODataErrorInvokeResponse { return v.Errors }).(ODataErrorInvokeResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput) Input() ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesInvokeResponse) *ConnectToTargetSqlDbTaskInputInvokeResponse {
		return v.Input
	}).(ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput) Output() ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesInvokeResponse) []ConnectToTargetSqlDbTaskOutputInvokeResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb'.
func (o ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesInvokeResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlDbTaskPropertiesResponseInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesResponseArgs and ConnectToTargetSqlDbTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesResponseInput` via:
//
//          ConnectToTargetSqlDbTaskPropertiesResponseArgs{...}
type ConnectToTargetSqlDbTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput
	ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetSqlDbTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetSqlDbTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlDbTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskPropertiesResponseArgs) ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesResponseArgs) ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Input() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Output() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ConnectToTargetSqlDbTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb'.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInput struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlMITaskInputInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs and ConnectToTargetSqlMITaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputInput` via:
//
//          ConnectToTargetSqlMITaskInputArgs{...}
type ConnectToTargetSqlMITaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput
	ToConnectToTargetSqlMITaskInputOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputArgs struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput {
	return i.ToConnectToTargetSqlMITaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput)
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput).ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskInputPtrInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs, ConnectToTargetSqlMITaskInputPtr and ConnectToTargetSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputPtrInput` via:
//
//          ConnectToTargetSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput
	ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputPtrOutput
}

type connectToTargetSqlMITaskInputPtrType ConnectToTargetSqlMITaskInputArgs

func ConnectToTargetSqlMITaskInputPtr(v *ConnectToTargetSqlMITaskInputArgs) ConnectToTargetSqlMITaskInputPtrInput {
	return (*connectToTargetSqlMITaskInputPtrType)(v)
}

func (*connectToTargetSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) *ConnectToTargetSqlMITaskInput {
		return &v
	}).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ConnectToTargetSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) Elem() ConnectToTargetSqlMITaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) ConnectToTargetSqlMITaskInput { return *v }).(ConnectToTargetSqlMITaskInputOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputInvokeResponse struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlMITaskInputInvokeResponseInput is an input type that accepts ConnectToTargetSqlMITaskInputInvokeResponseArgs and ConnectToTargetSqlMITaskInputInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputInvokeResponseInput` via:
//
//          ConnectToTargetSqlMITaskInputInvokeResponseArgs{...}
type ConnectToTargetSqlMITaskInputInvokeResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputInvokeResponseOutput() ConnectToTargetSqlMITaskInputInvokeResponseOutput
	ToConnectToTargetSqlMITaskInputInvokeResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputInvokeResponseOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputInvokeResponseArgs struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlMITaskInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskInputInvokeResponseArgs) ToConnectToTargetSqlMITaskInputInvokeResponseOutput() ConnectToTargetSqlMITaskInputInvokeResponseOutput {
	return i.ToConnectToTargetSqlMITaskInputInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputInvokeResponseArgs) ToConnectToTargetSqlMITaskInputInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputInvokeResponseOutput)
}

func (i ConnectToTargetSqlMITaskInputInvokeResponseArgs) ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutput() ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return i.ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputInvokeResponseArgs) ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputInvokeResponseOutput).ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskInputInvokeResponsePtrInput is an input type that accepts ConnectToTargetSqlMITaskInputInvokeResponseArgs, ConnectToTargetSqlMITaskInputInvokeResponsePtr and ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputInvokeResponsePtrInput` via:
//
//          ConnectToTargetSqlMITaskInputInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMITaskInputInvokeResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutput() ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput
	ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput
}

type connectToTargetSqlMITaskInputInvokeResponsePtrType ConnectToTargetSqlMITaskInputInvokeResponseArgs

func ConnectToTargetSqlMITaskInputInvokeResponsePtr(v *ConnectToTargetSqlMITaskInputInvokeResponseArgs) ConnectToTargetSqlMITaskInputInvokeResponsePtrInput {
	return (*connectToTargetSqlMITaskInputInvokeResponsePtrType)(v)
}

func (*connectToTargetSqlMITaskInputInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskInputInvokeResponsePtrType) ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutput() ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return i.ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskInputInvokeResponsePtrType) ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputInvokeResponseOutput) ToConnectToTargetSqlMITaskInputInvokeResponseOutput() ConnectToTargetSqlMITaskInputInvokeResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputInvokeResponseOutput) ToConnectToTargetSqlMITaskInputInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputInvokeResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputInvokeResponseOutput) ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutput() ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return o.ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskInputInvokeResponseOutput) ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputInvokeResponse) *ConnectToTargetSqlMITaskInputInvokeResponse {
		return &v
	}).(ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputInvokeResponseOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

type ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput) ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutput() ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput) ToConnectToTargetSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput) Elem() ConnectToTargetSqlMITaskInputInvokeResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputInvokeResponse) ConnectToTargetSqlMITaskInputInvokeResponse {
		return *v
	}).(ConnectToTargetSqlMITaskInputInvokeResponseOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponse struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlMITaskInputResponseInput is an input type that accepts ConnectToTargetSqlMITaskInputResponseArgs and ConnectToTargetSqlMITaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputResponseInput` via:
//
//          ConnectToTargetSqlMITaskInputResponseArgs{...}
type ConnectToTargetSqlMITaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput
	ToConnectToTargetSqlMITaskInputResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputResponseOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponseArgs struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlMITaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskInputResponseArgs) ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput {
	return i.ToConnectToTargetSqlMITaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputResponseArgs) ToConnectToTargetSqlMITaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputResponseOutput)
}

func (i ConnectToTargetSqlMITaskInputResponseArgs) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputResponseArgs) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputResponseOutput).ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskInputResponsePtrInput is an input type that accepts ConnectToTargetSqlMITaskInputResponseArgs, ConnectToTargetSqlMITaskInputResponsePtr and ConnectToTargetSqlMITaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputResponsePtrInput` via:
//
//          ConnectToTargetSqlMITaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMITaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput
	ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput
}

type connectToTargetSqlMITaskInputResponsePtrType ConnectToTargetSqlMITaskInputResponseArgs

func ConnectToTargetSqlMITaskInputResponsePtr(v *ConnectToTargetSqlMITaskInputResponseArgs) ConnectToTargetSqlMITaskInputResponsePtrInput {
	return (*connectToTargetSqlMITaskInputResponsePtrType)(v)
}

func (*connectToTargetSqlMITaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskInputResponsePtrType) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskInputResponsePtrType) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *ConnectToTargetSqlMITaskInputResponse {
		return &v
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) Elem() ConnectToTargetSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) ConnectToTargetSqlMITaskInputResponse { return *v }).(ConnectToTargetSqlMITaskInputResponseOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputInvokeResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionInvokeResponse `pulumi:"validationErrors"`
}

// ConnectToTargetSqlMITaskOutputInvokeResponseInput is an input type that accepts ConnectToTargetSqlMITaskOutputInvokeResponseArgs and ConnectToTargetSqlMITaskOutputInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskOutputInvokeResponseInput` via:
//
//          ConnectToTargetSqlMITaskOutputInvokeResponseArgs{...}
type ConnectToTargetSqlMITaskOutputInvokeResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskOutputInvokeResponseOutput() ConnectToTargetSqlMITaskOutputInvokeResponseOutput
	ToConnectToTargetSqlMITaskOutputInvokeResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskOutputInvokeResponseOutput
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputInvokeResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors ReportableExceptionInvokeResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToTargetSqlMITaskOutputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputInvokeResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskOutputInvokeResponseArgs) ToConnectToTargetSqlMITaskOutputInvokeResponseOutput() ConnectToTargetSqlMITaskOutputInvokeResponseOutput {
	return i.ToConnectToTargetSqlMITaskOutputInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskOutputInvokeResponseArgs) ToConnectToTargetSqlMITaskOutputInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskOutputInvokeResponseOutput)
}

// ConnectToTargetSqlMITaskOutputInvokeResponseArrayInput is an input type that accepts ConnectToTargetSqlMITaskOutputInvokeResponseArray and ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskOutputInvokeResponseArrayInput` via:
//
//          ConnectToTargetSqlMITaskOutputInvokeResponseArray{ ConnectToTargetSqlMITaskOutputInvokeResponseArgs{...} }
type ConnectToTargetSqlMITaskOutputInvokeResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput() ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput
	ToConnectToTargetSqlMITaskOutputInvokeResponseArrayOutputWithContext(context.Context) ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput
}

type ConnectToTargetSqlMITaskOutputInvokeResponseArray []ConnectToTargetSqlMITaskOutputInvokeResponseInput

func (ConnectToTargetSqlMITaskOutputInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputInvokeResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskOutputInvokeResponseArray) ToConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput() ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput {
	return i.ToConnectToTargetSqlMITaskOutputInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskOutputInvokeResponseArray) ToConnectToTargetSqlMITaskOutputInvokeResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputInvokeResponseOutput) ToConnectToTargetSqlMITaskOutputInvokeResponseOutput() ConnectToTargetSqlMITaskOutputInvokeResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputInvokeResponseOutput) ToConnectToTargetSqlMITaskOutputInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputInvokeResponseOutput {
	return o
}

// Result identifier
func (o ConnectToTargetSqlMITaskOutputInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetSqlMITaskOutputInvokeResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputInvokeResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMITaskOutputInvokeResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputInvokeResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMITaskOutputInvokeResponseOutput) ValidationErrors() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.ValidationErrors
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

type ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput) ToConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput() ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput) ToConnectToTargetSqlMITaskOutputInvokeResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMITaskOutputInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMITaskOutputInvokeResponse {
		return vs[0].([]ConnectToTargetSqlMITaskOutputInvokeResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMITaskOutputInvokeResponseOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToTargetSqlMITaskOutputResponseInput is an input type that accepts ConnectToTargetSqlMITaskOutputResponseArgs and ConnectToTargetSqlMITaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskOutputResponseInput` via:
//
//          ConnectToTargetSqlMITaskOutputResponseArgs{...}
type ConnectToTargetSqlMITaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput
	ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskOutputResponseOutput
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToTargetSqlMITaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskOutputResponseArgs) ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput {
	return i.ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskOutputResponseArgs) ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskOutputResponseOutput)
}

// ConnectToTargetSqlMITaskOutputResponseArrayInput is an input type that accepts ConnectToTargetSqlMITaskOutputResponseArray and ConnectToTargetSqlMITaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskOutputResponseArrayInput` via:
//
//          ConnectToTargetSqlMITaskOutputResponseArray{ ConnectToTargetSqlMITaskOutputResponseArgs{...} }
type ConnectToTargetSqlMITaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput
	ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput
}

type ConnectToTargetSqlMITaskOutputResponseArray []ConnectToTargetSqlMITaskOutputResponseInput

func (ConnectToTargetSqlMITaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskOutputResponseArray) ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return i.ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskOutputResponseArray) ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

// Result identifier
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMITaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMITaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMITaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskProperties struct {
	// Task input
	Input *ConnectToTargetSqlMITaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMITaskPropertiesInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesArgs and ConnectToTargetSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesInput` via:
//
//          ConnectToTargetSqlMITaskPropertiesArgs{...}
type ConnectToTargetSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput
	ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesArgs struct {
	// Task input
	Input ConnectToTargetSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesOutput) ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesOutput) ToConnectToTargetSqlMITaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesOutput {
	return o
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesOutput) Input() ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskProperties) *ConnectToTargetSqlMITaskInput { return v.Input }).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
func (o ConnectToTargetSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesInvokeResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorInvokeResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMITaskInputInvokeResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMITaskOutputInvokeResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMITaskPropertiesInvokeResponseInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesInvokeResponseArgs and ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesInvokeResponseInput` via:
//
//          ConnectToTargetSqlMITaskPropertiesInvokeResponseArgs{...}
type ConnectToTargetSqlMITaskPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesInvokeResponseOutput() ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput
	ToConnectToTargetSqlMITaskPropertiesInvokeResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesInvokeResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorInvokeResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetSqlMITaskInputInvokeResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetSqlMITaskOutputInvokeResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMITaskPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesInvokeResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskPropertiesInvokeResponseArgs) ToConnectToTargetSqlMITaskPropertiesInvokeResponseOutput() ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesInvokeResponseArgs) ToConnectToTargetSqlMITaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesInvokeResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput) ToConnectToTargetSqlMITaskPropertiesInvokeResponseOutput() ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput) ToConnectToTargetSqlMITaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput) Errors() ODataErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesInvokeResponse) []ODataErrorInvokeResponse { return v.Errors }).(ODataErrorInvokeResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput) Input() ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesInvokeResponse) *ConnectToTargetSqlMITaskInputInvokeResponse {
		return v.Input
	}).(ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput) Output() ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesInvokeResponse) []ConnectToTargetSqlMITaskOutputInvokeResponse {
		return v.Output
	}).(ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
func (o ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesInvokeResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMITaskPropertiesResponseInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesResponseArgs and ConnectToTargetSqlMITaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesResponseInput` via:
//
//          ConnectToTargetSqlMITaskPropertiesResponseArgs{...}
type ConnectToTargetSqlMITaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput
	ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetSqlMITaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetSqlMITaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMITaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskPropertiesResponseArgs) ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesResponseArgs) ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Input() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) *ConnectToTargetSqlMITaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Output() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ConnectToTargetSqlMITaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultInvokeResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// DataItemMigrationSummaryResultInvokeResponseInput is an input type that accepts DataItemMigrationSummaryResultInvokeResponseArgs and DataItemMigrationSummaryResultInvokeResponseOutput values.
// You can construct a concrete instance of `DataItemMigrationSummaryResultInvokeResponseInput` via:
//
//          DataItemMigrationSummaryResultInvokeResponseArgs{...}
type DataItemMigrationSummaryResultInvokeResponseInput interface {
	pulumi.Input

	ToDataItemMigrationSummaryResultInvokeResponseOutput() DataItemMigrationSummaryResultInvokeResponseOutput
	ToDataItemMigrationSummaryResultInvokeResponseOutputWithContext(context.Context) DataItemMigrationSummaryResultInvokeResponseOutput
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultInvokeResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.Float64Input `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.Float64Input `pulumi:"itemsCount"`
	// Name of the item
	Name pulumi.StringInput `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (DataItemMigrationSummaryResultInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataItemMigrationSummaryResultInvokeResponse)(nil)).Elem()
}

func (i DataItemMigrationSummaryResultInvokeResponseArgs) ToDataItemMigrationSummaryResultInvokeResponseOutput() DataItemMigrationSummaryResultInvokeResponseOutput {
	return i.ToDataItemMigrationSummaryResultInvokeResponseOutputWithContext(context.Background())
}

func (i DataItemMigrationSummaryResultInvokeResponseArgs) ToDataItemMigrationSummaryResultInvokeResponseOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataItemMigrationSummaryResultInvokeResponseOutput)
}

// DataItemMigrationSummaryResultInvokeResponseMapInput is an input type that accepts DataItemMigrationSummaryResultInvokeResponseMap and DataItemMigrationSummaryResultInvokeResponseMapOutput values.
// You can construct a concrete instance of `DataItemMigrationSummaryResultInvokeResponseMapInput` via:
//
//          DataItemMigrationSummaryResultInvokeResponseMap{ "key": DataItemMigrationSummaryResultInvokeResponseArgs{...} }
type DataItemMigrationSummaryResultInvokeResponseMapInput interface {
	pulumi.Input

	ToDataItemMigrationSummaryResultInvokeResponseMapOutput() DataItemMigrationSummaryResultInvokeResponseMapOutput
	ToDataItemMigrationSummaryResultInvokeResponseMapOutputWithContext(context.Context) DataItemMigrationSummaryResultInvokeResponseMapOutput
}

type DataItemMigrationSummaryResultInvokeResponseMap map[string]DataItemMigrationSummaryResultInvokeResponseInput

func (DataItemMigrationSummaryResultInvokeResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataItemMigrationSummaryResultInvokeResponse)(nil)).Elem()
}

func (i DataItemMigrationSummaryResultInvokeResponseMap) ToDataItemMigrationSummaryResultInvokeResponseMapOutput() DataItemMigrationSummaryResultInvokeResponseMapOutput {
	return i.ToDataItemMigrationSummaryResultInvokeResponseMapOutputWithContext(context.Background())
}

func (i DataItemMigrationSummaryResultInvokeResponseMap) ToDataItemMigrationSummaryResultInvokeResponseMapOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultInvokeResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataItemMigrationSummaryResultInvokeResponseMapOutput)
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultInvokeResponseOutput struct{ *pulumi.OutputState }

func (DataItemMigrationSummaryResultInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataItemMigrationSummaryResultInvokeResponse)(nil)).Elem()
}

func (o DataItemMigrationSummaryResultInvokeResponseOutput) ToDataItemMigrationSummaryResultInvokeResponseOutput() DataItemMigrationSummaryResultInvokeResponseOutput {
	return o
}

func (o DataItemMigrationSummaryResultInvokeResponseOutput) ToDataItemMigrationSummaryResultInvokeResponseOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultInvokeResponseOutput {
	return o
}

// Migration end time
func (o DataItemMigrationSummaryResultInvokeResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o DataItemMigrationSummaryResultInvokeResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o DataItemMigrationSummaryResultInvokeResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o DataItemMigrationSummaryResultInvokeResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o DataItemMigrationSummaryResultInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o DataItemMigrationSummaryResultInvokeResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Migration start time
func (o DataItemMigrationSummaryResultInvokeResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o DataItemMigrationSummaryResultInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o DataItemMigrationSummaryResultInvokeResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultInvokeResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type DataItemMigrationSummaryResultInvokeResponseMapOutput struct{ *pulumi.OutputState }

func (DataItemMigrationSummaryResultInvokeResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataItemMigrationSummaryResultInvokeResponse)(nil)).Elem()
}

func (o DataItemMigrationSummaryResultInvokeResponseMapOutput) ToDataItemMigrationSummaryResultInvokeResponseMapOutput() DataItemMigrationSummaryResultInvokeResponseMapOutput {
	return o
}

func (o DataItemMigrationSummaryResultInvokeResponseMapOutput) ToDataItemMigrationSummaryResultInvokeResponseMapOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultInvokeResponseMapOutput {
	return o
}

func (o DataItemMigrationSummaryResultInvokeResponseMapOutput) MapIndex(k pulumi.StringInput) DataItemMigrationSummaryResultInvokeResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataItemMigrationSummaryResultInvokeResponse {
		return vs[0].(map[string]DataItemMigrationSummaryResultInvokeResponse)[vs[1].(string)]
	}).(DataItemMigrationSummaryResultInvokeResponseOutput)
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// DataItemMigrationSummaryResultResponseInput is an input type that accepts DataItemMigrationSummaryResultResponseArgs and DataItemMigrationSummaryResultResponseOutput values.
// You can construct a concrete instance of `DataItemMigrationSummaryResultResponseInput` via:
//
//          DataItemMigrationSummaryResultResponseArgs{...}
type DataItemMigrationSummaryResultResponseInput interface {
	pulumi.Input

	ToDataItemMigrationSummaryResultResponseOutput() DataItemMigrationSummaryResultResponseOutput
	ToDataItemMigrationSummaryResultResponseOutputWithContext(context.Context) DataItemMigrationSummaryResultResponseOutput
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.Float64Input `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.Float64Input `pulumi:"itemsCount"`
	// Name of the item
	Name pulumi.StringInput `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (DataItemMigrationSummaryResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (i DataItemMigrationSummaryResultResponseArgs) ToDataItemMigrationSummaryResultResponseOutput() DataItemMigrationSummaryResultResponseOutput {
	return i.ToDataItemMigrationSummaryResultResponseOutputWithContext(context.Background())
}

func (i DataItemMigrationSummaryResultResponseArgs) ToDataItemMigrationSummaryResultResponseOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataItemMigrationSummaryResultResponseOutput)
}

// DataItemMigrationSummaryResultResponseMapInput is an input type that accepts DataItemMigrationSummaryResultResponseMap and DataItemMigrationSummaryResultResponseMapOutput values.
// You can construct a concrete instance of `DataItemMigrationSummaryResultResponseMapInput` via:
//
//          DataItemMigrationSummaryResultResponseMap{ "key": DataItemMigrationSummaryResultResponseArgs{...} }
type DataItemMigrationSummaryResultResponseMapInput interface {
	pulumi.Input

	ToDataItemMigrationSummaryResultResponseMapOutput() DataItemMigrationSummaryResultResponseMapOutput
	ToDataItemMigrationSummaryResultResponseMapOutputWithContext(context.Context) DataItemMigrationSummaryResultResponseMapOutput
}

type DataItemMigrationSummaryResultResponseMap map[string]DataItemMigrationSummaryResultResponseInput

func (DataItemMigrationSummaryResultResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (i DataItemMigrationSummaryResultResponseMap) ToDataItemMigrationSummaryResultResponseMapOutput() DataItemMigrationSummaryResultResponseMapOutput {
	return i.ToDataItemMigrationSummaryResultResponseMapOutputWithContext(context.Background())
}

func (i DataItemMigrationSummaryResultResponseMap) ToDataItemMigrationSummaryResultResponseMapOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataItemMigrationSummaryResultResponseMapOutput)
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (DataItemMigrationSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (o DataItemMigrationSummaryResultResponseOutput) ToDataItemMigrationSummaryResultResponseOutput() DataItemMigrationSummaryResultResponseOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseOutput) ToDataItemMigrationSummaryResultResponseOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseOutput {
	return o
}

// Migration end time
func (o DataItemMigrationSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o DataItemMigrationSummaryResultResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o DataItemMigrationSummaryResultResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o DataItemMigrationSummaryResultResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o DataItemMigrationSummaryResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o DataItemMigrationSummaryResultResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Migration start time
func (o DataItemMigrationSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o DataItemMigrationSummaryResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o DataItemMigrationSummaryResultResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type DataItemMigrationSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (DataItemMigrationSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (o DataItemMigrationSummaryResultResponseMapOutput) ToDataItemMigrationSummaryResultResponseMapOutput() DataItemMigrationSummaryResultResponseMapOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseMapOutput) ToDataItemMigrationSummaryResultResponseMapOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseMapOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) DataItemMigrationSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataItemMigrationSummaryResultResponse {
		return vs[0].(map[string]DataItemMigrationSummaryResultResponse)[vs[1].(string)]
	}).(DataItemMigrationSummaryResultResponseOutput)
}

// Database file specific information
type DatabaseFileInfoInvokeResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Database file type
	FileType *string `pulumi:"fileType"`
	// Unique identifier for database file
	Id *string `pulumi:"id"`
	// Logical name of the file
	LogicalName *string `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName *string `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName *string `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB *float64 `pulumi:"sizeMB"`
}

// DatabaseFileInfoInvokeResponseInput is an input type that accepts DatabaseFileInfoInvokeResponseArgs and DatabaseFileInfoInvokeResponseOutput values.
// You can construct a concrete instance of `DatabaseFileInfoInvokeResponseInput` via:
//
//          DatabaseFileInfoInvokeResponseArgs{...}
type DatabaseFileInfoInvokeResponseInput interface {
	pulumi.Input

	ToDatabaseFileInfoInvokeResponseOutput() DatabaseFileInfoInvokeResponseOutput
	ToDatabaseFileInfoInvokeResponseOutputWithContext(context.Context) DatabaseFileInfoInvokeResponseOutput
}

// Database file specific information
type DatabaseFileInfoInvokeResponseArgs struct {
	// Name of the database
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Database file type
	FileType pulumi.StringPtrInput `pulumi:"fileType"`
	// Unique identifier for database file
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Logical name of the file
	LogicalName pulumi.StringPtrInput `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName pulumi.StringPtrInput `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName pulumi.StringPtrInput `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB pulumi.Float64PtrInput `pulumi:"sizeMB"`
}

func (DatabaseFileInfoInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoInvokeResponse)(nil)).Elem()
}

func (i DatabaseFileInfoInvokeResponseArgs) ToDatabaseFileInfoInvokeResponseOutput() DatabaseFileInfoInvokeResponseOutput {
	return i.ToDatabaseFileInfoInvokeResponseOutputWithContext(context.Background())
}

func (i DatabaseFileInfoInvokeResponseArgs) ToDatabaseFileInfoInvokeResponseOutputWithContext(ctx context.Context) DatabaseFileInfoInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFileInfoInvokeResponseOutput)
}

// DatabaseFileInfoInvokeResponseArrayInput is an input type that accepts DatabaseFileInfoInvokeResponseArray and DatabaseFileInfoInvokeResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseFileInfoInvokeResponseArrayInput` via:
//
//          DatabaseFileInfoInvokeResponseArray{ DatabaseFileInfoInvokeResponseArgs{...} }
type DatabaseFileInfoInvokeResponseArrayInput interface {
	pulumi.Input

	ToDatabaseFileInfoInvokeResponseArrayOutput() DatabaseFileInfoInvokeResponseArrayOutput
	ToDatabaseFileInfoInvokeResponseArrayOutputWithContext(context.Context) DatabaseFileInfoInvokeResponseArrayOutput
}

type DatabaseFileInfoInvokeResponseArray []DatabaseFileInfoInvokeResponseInput

func (DatabaseFileInfoInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoInvokeResponse)(nil)).Elem()
}

func (i DatabaseFileInfoInvokeResponseArray) ToDatabaseFileInfoInvokeResponseArrayOutput() DatabaseFileInfoInvokeResponseArrayOutput {
	return i.ToDatabaseFileInfoInvokeResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseFileInfoInvokeResponseArray) ToDatabaseFileInfoInvokeResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFileInfoInvokeResponseArrayOutput)
}

// Database file specific information
type DatabaseFileInfoInvokeResponseOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoInvokeResponse)(nil)).Elem()
}

func (o DatabaseFileInfoInvokeResponseOutput) ToDatabaseFileInfoInvokeResponseOutput() DatabaseFileInfoInvokeResponseOutput {
	return o
}

func (o DatabaseFileInfoInvokeResponseOutput) ToDatabaseFileInfoInvokeResponseOutputWithContext(ctx context.Context) DatabaseFileInfoInvokeResponseOutput {
	return o
}

// Name of the database
func (o DatabaseFileInfoInvokeResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoInvokeResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Database file type
func (o DatabaseFileInfoInvokeResponseOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoInvokeResponse) *string { return v.FileType }).(pulumi.StringPtrOutput)
}

// Unique identifier for database file
func (o DatabaseFileInfoInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Logical name of the file
func (o DatabaseFileInfoInvokeResponseOutput) LogicalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoInvokeResponse) *string { return v.LogicalName }).(pulumi.StringPtrOutput)
}

// Operating-system full path of the file
func (o DatabaseFileInfoInvokeResponseOutput) PhysicalFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoInvokeResponse) *string { return v.PhysicalFullName }).(pulumi.StringPtrOutput)
}

// Suggested full path of the file for restoring
func (o DatabaseFileInfoInvokeResponseOutput) RestoreFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoInvokeResponse) *string { return v.RestoreFullName }).(pulumi.StringPtrOutput)
}

// Size of the file in megabytes
func (o DatabaseFileInfoInvokeResponseOutput) SizeMB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoInvokeResponse) *float64 { return v.SizeMB }).(pulumi.Float64PtrOutput)
}

type DatabaseFileInfoInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoInvokeResponse)(nil)).Elem()
}

func (o DatabaseFileInfoInvokeResponseArrayOutput) ToDatabaseFileInfoInvokeResponseArrayOutput() DatabaseFileInfoInvokeResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoInvokeResponseArrayOutput) ToDatabaseFileInfoInvokeResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoInvokeResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoInvokeResponseArrayOutput) Index(i pulumi.IntInput) DatabaseFileInfoInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFileInfoInvokeResponse {
		return vs[0].([]DatabaseFileInfoInvokeResponse)[vs[1].(int)]
	}).(DatabaseFileInfoInvokeResponseOutput)
}

// Database file specific information
type DatabaseFileInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Database file type
	FileType *string `pulumi:"fileType"`
	// Unique identifier for database file
	Id *string `pulumi:"id"`
	// Logical name of the file
	LogicalName *string `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName *string `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName *string `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB *float64 `pulumi:"sizeMB"`
}

// DatabaseFileInfoResponseInput is an input type that accepts DatabaseFileInfoResponseArgs and DatabaseFileInfoResponseOutput values.
// You can construct a concrete instance of `DatabaseFileInfoResponseInput` via:
//
//          DatabaseFileInfoResponseArgs{...}
type DatabaseFileInfoResponseInput interface {
	pulumi.Input

	ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput
	ToDatabaseFileInfoResponseOutputWithContext(context.Context) DatabaseFileInfoResponseOutput
}

// Database file specific information
type DatabaseFileInfoResponseArgs struct {
	// Name of the database
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Database file type
	FileType pulumi.StringPtrInput `pulumi:"fileType"`
	// Unique identifier for database file
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Logical name of the file
	LogicalName pulumi.StringPtrInput `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName pulumi.StringPtrInput `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName pulumi.StringPtrInput `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB pulumi.Float64PtrInput `pulumi:"sizeMB"`
}

func (DatabaseFileInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoResponse)(nil)).Elem()
}

func (i DatabaseFileInfoResponseArgs) ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput {
	return i.ToDatabaseFileInfoResponseOutputWithContext(context.Background())
}

func (i DatabaseFileInfoResponseArgs) ToDatabaseFileInfoResponseOutputWithContext(ctx context.Context) DatabaseFileInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFileInfoResponseOutput)
}

// DatabaseFileInfoResponseArrayInput is an input type that accepts DatabaseFileInfoResponseArray and DatabaseFileInfoResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseFileInfoResponseArrayInput` via:
//
//          DatabaseFileInfoResponseArray{ DatabaseFileInfoResponseArgs{...} }
type DatabaseFileInfoResponseArrayInput interface {
	pulumi.Input

	ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput
	ToDatabaseFileInfoResponseArrayOutputWithContext(context.Context) DatabaseFileInfoResponseArrayOutput
}

type DatabaseFileInfoResponseArray []DatabaseFileInfoResponseInput

func (DatabaseFileInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoResponse)(nil)).Elem()
}

func (i DatabaseFileInfoResponseArray) ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput {
	return i.ToDatabaseFileInfoResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseFileInfoResponseArray) ToDatabaseFileInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFileInfoResponseArrayOutput)
}

// Database file specific information
type DatabaseFileInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput {
	return o
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutputWithContext(ctx context.Context) DatabaseFileInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseFileInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Database file type
func (o DatabaseFileInfoResponseOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.FileType }).(pulumi.StringPtrOutput)
}

// Unique identifier for database file
func (o DatabaseFileInfoResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Logical name of the file
func (o DatabaseFileInfoResponseOutput) LogicalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.LogicalName }).(pulumi.StringPtrOutput)
}

// Operating-system full path of the file
func (o DatabaseFileInfoResponseOutput) PhysicalFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.PhysicalFullName }).(pulumi.StringPtrOutput)
}

// Suggested full path of the file for restoring
func (o DatabaseFileInfoResponseOutput) RestoreFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.RestoreFullName }).(pulumi.StringPtrOutput)
}

// Size of the file in megabytes
func (o DatabaseFileInfoResponseOutput) SizeMB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *float64 { return v.SizeMB }).(pulumi.Float64PtrOutput)
}

type DatabaseFileInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseFileInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFileInfoResponse {
		return vs[0].([]DatabaseFileInfoResponse)[vs[1].(int)]
	}).(DatabaseFileInfoResponseOutput)
}

// Project Database Details
type DatabaseInfo struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInput is an input type that accepts DatabaseInfoArgs and DatabaseInfoOutput values.
// You can construct a concrete instance of `DatabaseInfoInput` via:
//
//          DatabaseInfoArgs{...}
type DatabaseInfoInput interface {
	pulumi.Input

	ToDatabaseInfoOutput() DatabaseInfoOutput
	ToDatabaseInfoOutputWithContext(context.Context) DatabaseInfoOutput
}

// Project Database Details
type DatabaseInfoArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return i.ToDatabaseInfoOutputWithContext(context.Background())
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoOutput)
}

// DatabaseInfoArrayInput is an input type that accepts DatabaseInfoArray and DatabaseInfoArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoArrayInput` via:
//
//          DatabaseInfoArray{ DatabaseInfoArgs{...} }
type DatabaseInfoArrayInput interface {
	pulumi.Input

	ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput
	ToDatabaseInfoArrayOutputWithContext(context.Context) DatabaseInfoArrayOutput
}

type DatabaseInfoArray []DatabaseInfoInput

func (DatabaseInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return i.ToDatabaseInfoArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoArrayOutput)
}

// Project Database Details
type DatabaseInfoOutput struct{ *pulumi.OutputState }

func (DatabaseInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return o
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return o
}

// Name of the database
func (o DatabaseInfoOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfo) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) Index(i pulumi.IntInput) DatabaseInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfo {
		return vs[0].([]DatabaseInfo)[vs[1].(int)]
	}).(DatabaseInfoOutput)
}

// Project Database Details
type DatabaseInfoInvokeResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInvokeResponseInput is an input type that accepts DatabaseInfoInvokeResponseArgs and DatabaseInfoInvokeResponseOutput values.
// You can construct a concrete instance of `DatabaseInfoInvokeResponseInput` via:
//
//          DatabaseInfoInvokeResponseArgs{...}
type DatabaseInfoInvokeResponseInput interface {
	pulumi.Input

	ToDatabaseInfoInvokeResponseOutput() DatabaseInfoInvokeResponseOutput
	ToDatabaseInfoInvokeResponseOutputWithContext(context.Context) DatabaseInfoInvokeResponseOutput
}

// Project Database Details
type DatabaseInfoInvokeResponseArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoInvokeResponse)(nil)).Elem()
}

func (i DatabaseInfoInvokeResponseArgs) ToDatabaseInfoInvokeResponseOutput() DatabaseInfoInvokeResponseOutput {
	return i.ToDatabaseInfoInvokeResponseOutputWithContext(context.Background())
}

func (i DatabaseInfoInvokeResponseArgs) ToDatabaseInfoInvokeResponseOutputWithContext(ctx context.Context) DatabaseInfoInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoInvokeResponseOutput)
}

// DatabaseInfoInvokeResponseArrayInput is an input type that accepts DatabaseInfoInvokeResponseArray and DatabaseInfoInvokeResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoInvokeResponseArrayInput` via:
//
//          DatabaseInfoInvokeResponseArray{ DatabaseInfoInvokeResponseArgs{...} }
type DatabaseInfoInvokeResponseArrayInput interface {
	pulumi.Input

	ToDatabaseInfoInvokeResponseArrayOutput() DatabaseInfoInvokeResponseArrayOutput
	ToDatabaseInfoInvokeResponseArrayOutputWithContext(context.Context) DatabaseInfoInvokeResponseArrayOutput
}

type DatabaseInfoInvokeResponseArray []DatabaseInfoInvokeResponseInput

func (DatabaseInfoInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoInvokeResponse)(nil)).Elem()
}

func (i DatabaseInfoInvokeResponseArray) ToDatabaseInfoInvokeResponseArrayOutput() DatabaseInfoInvokeResponseArrayOutput {
	return i.ToDatabaseInfoInvokeResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoInvokeResponseArray) ToDatabaseInfoInvokeResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoInvokeResponseArrayOutput)
}

// Project Database Details
type DatabaseInfoInvokeResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoInvokeResponse)(nil)).Elem()
}

func (o DatabaseInfoInvokeResponseOutput) ToDatabaseInfoInvokeResponseOutput() DatabaseInfoInvokeResponseOutput {
	return o
}

func (o DatabaseInfoInvokeResponseOutput) ToDatabaseInfoInvokeResponseOutputWithContext(ctx context.Context) DatabaseInfoInvokeResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoInvokeResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoInvokeResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoInvokeResponse)(nil)).Elem()
}

func (o DatabaseInfoInvokeResponseArrayOutput) ToDatabaseInfoInvokeResponseArrayOutput() DatabaseInfoInvokeResponseArrayOutput {
	return o
}

func (o DatabaseInfoInvokeResponseArrayOutput) ToDatabaseInfoInvokeResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoInvokeResponseArrayOutput {
	return o
}

func (o DatabaseInfoInvokeResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoInvokeResponse {
		return vs[0].([]DatabaseInfoInvokeResponse)[vs[1].(int)]
	}).(DatabaseInfoInvokeResponseOutput)
}

// Project Database Details
type DatabaseInfoResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoResponseInput is an input type that accepts DatabaseInfoResponseArgs and DatabaseInfoResponseOutput values.
// You can construct a concrete instance of `DatabaseInfoResponseInput` via:
//
//          DatabaseInfoResponseArgs{...}
type DatabaseInfoResponseInput interface {
	pulumi.Input

	ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput
	ToDatabaseInfoResponseOutputWithContext(context.Context) DatabaseInfoResponseOutput
}

// Project Database Details
type DatabaseInfoResponseArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (i DatabaseInfoResponseArgs) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return i.ToDatabaseInfoResponseOutputWithContext(context.Background())
}

func (i DatabaseInfoResponseArgs) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoResponseOutput)
}

// DatabaseInfoResponseArrayInput is an input type that accepts DatabaseInfoResponseArray and DatabaseInfoResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoResponseArrayInput` via:
//
//          DatabaseInfoResponseArray{ DatabaseInfoResponseArgs{...} }
type DatabaseInfoResponseArrayInput interface {
	pulumi.Input

	ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput
	ToDatabaseInfoResponseArrayOutputWithContext(context.Context) DatabaseInfoResponseArrayOutput
}

type DatabaseInfoResponseArray []DatabaseInfoResponseInput

func (DatabaseInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (i DatabaseInfoResponseArray) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return i.ToDatabaseInfoResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoResponseArray) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoResponseArrayOutput)
}

// Project Database Details
type DatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return o
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoResponse {
		return vs[0].([]DatabaseInfoResponse)[vs[1].(int)]
	}).(DatabaseInfoResponseOutput)
}

// Summary of database results in the migration
type DatabaseSummaryResultInvokeResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// DatabaseSummaryResultInvokeResponseInput is an input type that accepts DatabaseSummaryResultInvokeResponseArgs and DatabaseSummaryResultInvokeResponseOutput values.
// You can construct a concrete instance of `DatabaseSummaryResultInvokeResponseInput` via:
//
//          DatabaseSummaryResultInvokeResponseArgs{...}
type DatabaseSummaryResultInvokeResponseInput interface {
	pulumi.Input

	ToDatabaseSummaryResultInvokeResponseOutput() DatabaseSummaryResultInvokeResponseOutput
	ToDatabaseSummaryResultInvokeResponseOutputWithContext(context.Context) DatabaseSummaryResultInvokeResponseOutput
}

// Summary of database results in the migration
type DatabaseSummaryResultInvokeResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.Float64Input `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.Float64Input `pulumi:"itemsCount"`
	// Name of the item
	Name pulumi.StringInput `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Size of the database in megabytes
	SizeMB pulumi.Float64Input `pulumi:"sizeMB"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (DatabaseSummaryResultInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSummaryResultInvokeResponse)(nil)).Elem()
}

func (i DatabaseSummaryResultInvokeResponseArgs) ToDatabaseSummaryResultInvokeResponseOutput() DatabaseSummaryResultInvokeResponseOutput {
	return i.ToDatabaseSummaryResultInvokeResponseOutputWithContext(context.Background())
}

func (i DatabaseSummaryResultInvokeResponseArgs) ToDatabaseSummaryResultInvokeResponseOutputWithContext(ctx context.Context) DatabaseSummaryResultInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSummaryResultInvokeResponseOutput)
}

// DatabaseSummaryResultInvokeResponseMapInput is an input type that accepts DatabaseSummaryResultInvokeResponseMap and DatabaseSummaryResultInvokeResponseMapOutput values.
// You can construct a concrete instance of `DatabaseSummaryResultInvokeResponseMapInput` via:
//
//          DatabaseSummaryResultInvokeResponseMap{ "key": DatabaseSummaryResultInvokeResponseArgs{...} }
type DatabaseSummaryResultInvokeResponseMapInput interface {
	pulumi.Input

	ToDatabaseSummaryResultInvokeResponseMapOutput() DatabaseSummaryResultInvokeResponseMapOutput
	ToDatabaseSummaryResultInvokeResponseMapOutputWithContext(context.Context) DatabaseSummaryResultInvokeResponseMapOutput
}

type DatabaseSummaryResultInvokeResponseMap map[string]DatabaseSummaryResultInvokeResponseInput

func (DatabaseSummaryResultInvokeResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseSummaryResultInvokeResponse)(nil)).Elem()
}

func (i DatabaseSummaryResultInvokeResponseMap) ToDatabaseSummaryResultInvokeResponseMapOutput() DatabaseSummaryResultInvokeResponseMapOutput {
	return i.ToDatabaseSummaryResultInvokeResponseMapOutputWithContext(context.Background())
}

func (i DatabaseSummaryResultInvokeResponseMap) ToDatabaseSummaryResultInvokeResponseMapOutputWithContext(ctx context.Context) DatabaseSummaryResultInvokeResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSummaryResultInvokeResponseMapOutput)
}

// Summary of database results in the migration
type DatabaseSummaryResultInvokeResponseOutput struct{ *pulumi.OutputState }

func (DatabaseSummaryResultInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSummaryResultInvokeResponse)(nil)).Elem()
}

func (o DatabaseSummaryResultInvokeResponseOutput) ToDatabaseSummaryResultInvokeResponseOutput() DatabaseSummaryResultInvokeResponseOutput {
	return o
}

func (o DatabaseSummaryResultInvokeResponseOutput) ToDatabaseSummaryResultInvokeResponseOutputWithContext(ctx context.Context) DatabaseSummaryResultInvokeResponseOutput {
	return o
}

// Migration end time
func (o DatabaseSummaryResultInvokeResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o DatabaseSummaryResultInvokeResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o DatabaseSummaryResultInvokeResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o DatabaseSummaryResultInvokeResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o DatabaseSummaryResultInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o DatabaseSummaryResultInvokeResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Size of the database in megabytes
func (o DatabaseSummaryResultInvokeResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Migration start time
func (o DatabaseSummaryResultInvokeResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o DatabaseSummaryResultInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o DatabaseSummaryResultInvokeResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultInvokeResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type DatabaseSummaryResultInvokeResponseMapOutput struct{ *pulumi.OutputState }

func (DatabaseSummaryResultInvokeResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseSummaryResultInvokeResponse)(nil)).Elem()
}

func (o DatabaseSummaryResultInvokeResponseMapOutput) ToDatabaseSummaryResultInvokeResponseMapOutput() DatabaseSummaryResultInvokeResponseMapOutput {
	return o
}

func (o DatabaseSummaryResultInvokeResponseMapOutput) ToDatabaseSummaryResultInvokeResponseMapOutputWithContext(ctx context.Context) DatabaseSummaryResultInvokeResponseMapOutput {
	return o
}

func (o DatabaseSummaryResultInvokeResponseMapOutput) MapIndex(k pulumi.StringInput) DatabaseSummaryResultInvokeResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseSummaryResultInvokeResponse {
		return vs[0].(map[string]DatabaseSummaryResultInvokeResponse)[vs[1].(string)]
	}).(DatabaseSummaryResultInvokeResponseOutput)
}

// Summary of database results in the migration
type DatabaseSummaryResultResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// DatabaseSummaryResultResponseInput is an input type that accepts DatabaseSummaryResultResponseArgs and DatabaseSummaryResultResponseOutput values.
// You can construct a concrete instance of `DatabaseSummaryResultResponseInput` via:
//
//          DatabaseSummaryResultResponseArgs{...}
type DatabaseSummaryResultResponseInput interface {
	pulumi.Input

	ToDatabaseSummaryResultResponseOutput() DatabaseSummaryResultResponseOutput
	ToDatabaseSummaryResultResponseOutputWithContext(context.Context) DatabaseSummaryResultResponseOutput
}

// Summary of database results in the migration
type DatabaseSummaryResultResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.Float64Input `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.Float64Input `pulumi:"itemsCount"`
	// Name of the item
	Name pulumi.StringInput `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Size of the database in megabytes
	SizeMB pulumi.Float64Input `pulumi:"sizeMB"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (DatabaseSummaryResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSummaryResultResponse)(nil)).Elem()
}

func (i DatabaseSummaryResultResponseArgs) ToDatabaseSummaryResultResponseOutput() DatabaseSummaryResultResponseOutput {
	return i.ToDatabaseSummaryResultResponseOutputWithContext(context.Background())
}

func (i DatabaseSummaryResultResponseArgs) ToDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSummaryResultResponseOutput)
}

// DatabaseSummaryResultResponseMapInput is an input type that accepts DatabaseSummaryResultResponseMap and DatabaseSummaryResultResponseMapOutput values.
// You can construct a concrete instance of `DatabaseSummaryResultResponseMapInput` via:
//
//          DatabaseSummaryResultResponseMap{ "key": DatabaseSummaryResultResponseArgs{...} }
type DatabaseSummaryResultResponseMapInput interface {
	pulumi.Input

	ToDatabaseSummaryResultResponseMapOutput() DatabaseSummaryResultResponseMapOutput
	ToDatabaseSummaryResultResponseMapOutputWithContext(context.Context) DatabaseSummaryResultResponseMapOutput
}

type DatabaseSummaryResultResponseMap map[string]DatabaseSummaryResultResponseInput

func (DatabaseSummaryResultResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseSummaryResultResponse)(nil)).Elem()
}

func (i DatabaseSummaryResultResponseMap) ToDatabaseSummaryResultResponseMapOutput() DatabaseSummaryResultResponseMapOutput {
	return i.ToDatabaseSummaryResultResponseMapOutputWithContext(context.Background())
}

func (i DatabaseSummaryResultResponseMap) ToDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSummaryResultResponseMapOutput)
}

// Summary of database results in the migration
type DatabaseSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (DatabaseSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSummaryResultResponse)(nil)).Elem()
}

func (o DatabaseSummaryResultResponseOutput) ToDatabaseSummaryResultResponseOutput() DatabaseSummaryResultResponseOutput {
	return o
}

func (o DatabaseSummaryResultResponseOutput) ToDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseOutput {
	return o
}

// Migration end time
func (o DatabaseSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o DatabaseSummaryResultResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o DatabaseSummaryResultResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o DatabaseSummaryResultResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o DatabaseSummaryResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o DatabaseSummaryResultResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Size of the database in megabytes
func (o DatabaseSummaryResultResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Migration start time
func (o DatabaseSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o DatabaseSummaryResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o DatabaseSummaryResultResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type DatabaseSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (DatabaseSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseSummaryResultResponse)(nil)).Elem()
}

func (o DatabaseSummaryResultResponseMapOutput) ToDatabaseSummaryResultResponseMapOutput() DatabaseSummaryResultResponseMapOutput {
	return o
}

func (o DatabaseSummaryResultResponseMapOutput) ToDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseMapOutput {
	return o
}

func (o DatabaseSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) DatabaseSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseSummaryResultResponse {
		return vs[0].(map[string]DatabaseSummaryResultResponse)[vs[1].(string)]
	}).(DatabaseSummaryResultResponseOutput)
}

// Table properties
type DatabaseTableInvokeResponse struct {
	// Indicates whether table is empty or not
	HasRows bool `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name string `pulumi:"name"`
}

// DatabaseTableInvokeResponseInput is an input type that accepts DatabaseTableInvokeResponseArgs and DatabaseTableInvokeResponseOutput values.
// You can construct a concrete instance of `DatabaseTableInvokeResponseInput` via:
//
//          DatabaseTableInvokeResponseArgs{...}
type DatabaseTableInvokeResponseInput interface {
	pulumi.Input

	ToDatabaseTableInvokeResponseOutput() DatabaseTableInvokeResponseOutput
	ToDatabaseTableInvokeResponseOutputWithContext(context.Context) DatabaseTableInvokeResponseOutput
}

// Table properties
type DatabaseTableInvokeResponseArgs struct {
	// Indicates whether table is empty or not
	HasRows pulumi.BoolInput `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name pulumi.StringInput `pulumi:"name"`
}

func (DatabaseTableInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTableInvokeResponse)(nil)).Elem()
}

func (i DatabaseTableInvokeResponseArgs) ToDatabaseTableInvokeResponseOutput() DatabaseTableInvokeResponseOutput {
	return i.ToDatabaseTableInvokeResponseOutputWithContext(context.Background())
}

func (i DatabaseTableInvokeResponseArgs) ToDatabaseTableInvokeResponseOutputWithContext(ctx context.Context) DatabaseTableInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTableInvokeResponseOutput)
}

// DatabaseTableInvokeResponseArrayInput is an input type that accepts DatabaseTableInvokeResponseArray and DatabaseTableInvokeResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseTableInvokeResponseArrayInput` via:
//
//          DatabaseTableInvokeResponseArray{ DatabaseTableInvokeResponseArgs{...} }
type DatabaseTableInvokeResponseArrayInput interface {
	pulumi.Input

	ToDatabaseTableInvokeResponseArrayOutput() DatabaseTableInvokeResponseArrayOutput
	ToDatabaseTableInvokeResponseArrayOutputWithContext(context.Context) DatabaseTableInvokeResponseArrayOutput
}

type DatabaseTableInvokeResponseArray []DatabaseTableInvokeResponseInput

func (DatabaseTableInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTableInvokeResponse)(nil)).Elem()
}

func (i DatabaseTableInvokeResponseArray) ToDatabaseTableInvokeResponseArrayOutput() DatabaseTableInvokeResponseArrayOutput {
	return i.ToDatabaseTableInvokeResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseTableInvokeResponseArray) ToDatabaseTableInvokeResponseArrayOutputWithContext(ctx context.Context) DatabaseTableInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTableInvokeResponseArrayOutput)
}

// Table properties
type DatabaseTableInvokeResponseOutput struct{ *pulumi.OutputState }

func (DatabaseTableInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTableInvokeResponse)(nil)).Elem()
}

func (o DatabaseTableInvokeResponseOutput) ToDatabaseTableInvokeResponseOutput() DatabaseTableInvokeResponseOutput {
	return o
}

func (o DatabaseTableInvokeResponseOutput) ToDatabaseTableInvokeResponseOutputWithContext(ctx context.Context) DatabaseTableInvokeResponseOutput {
	return o
}

// Indicates whether table is empty or not
func (o DatabaseTableInvokeResponseOutput) HasRows() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseTableInvokeResponse) bool { return v.HasRows }).(pulumi.BoolOutput)
}

// Schema-qualified name of the table
func (o DatabaseTableInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTableInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type DatabaseTableInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTableInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTableInvokeResponse)(nil)).Elem()
}

func (o DatabaseTableInvokeResponseArrayOutput) ToDatabaseTableInvokeResponseArrayOutput() DatabaseTableInvokeResponseArrayOutput {
	return o
}

func (o DatabaseTableInvokeResponseArrayOutput) ToDatabaseTableInvokeResponseArrayOutputWithContext(ctx context.Context) DatabaseTableInvokeResponseArrayOutput {
	return o
}

func (o DatabaseTableInvokeResponseArrayOutput) Index(i pulumi.IntInput) DatabaseTableInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseTableInvokeResponse {
		return vs[0].([]DatabaseTableInvokeResponse)[vs[1].(int)]
	}).(DatabaseTableInvokeResponseOutput)
}

// Table properties
type DatabaseTableResponse struct {
	// Indicates whether table is empty or not
	HasRows bool `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name string `pulumi:"name"`
}

// DatabaseTableResponseInput is an input type that accepts DatabaseTableResponseArgs and DatabaseTableResponseOutput values.
// You can construct a concrete instance of `DatabaseTableResponseInput` via:
//
//          DatabaseTableResponseArgs{...}
type DatabaseTableResponseInput interface {
	pulumi.Input

	ToDatabaseTableResponseOutput() DatabaseTableResponseOutput
	ToDatabaseTableResponseOutputWithContext(context.Context) DatabaseTableResponseOutput
}

// Table properties
type DatabaseTableResponseArgs struct {
	// Indicates whether table is empty or not
	HasRows pulumi.BoolInput `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name pulumi.StringInput `pulumi:"name"`
}

func (DatabaseTableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTableResponse)(nil)).Elem()
}

func (i DatabaseTableResponseArgs) ToDatabaseTableResponseOutput() DatabaseTableResponseOutput {
	return i.ToDatabaseTableResponseOutputWithContext(context.Background())
}

func (i DatabaseTableResponseArgs) ToDatabaseTableResponseOutputWithContext(ctx context.Context) DatabaseTableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTableResponseOutput)
}

// DatabaseTableResponseArrayInput is an input type that accepts DatabaseTableResponseArray and DatabaseTableResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseTableResponseArrayInput` via:
//
//          DatabaseTableResponseArray{ DatabaseTableResponseArgs{...} }
type DatabaseTableResponseArrayInput interface {
	pulumi.Input

	ToDatabaseTableResponseArrayOutput() DatabaseTableResponseArrayOutput
	ToDatabaseTableResponseArrayOutputWithContext(context.Context) DatabaseTableResponseArrayOutput
}

type DatabaseTableResponseArray []DatabaseTableResponseInput

func (DatabaseTableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTableResponse)(nil)).Elem()
}

func (i DatabaseTableResponseArray) ToDatabaseTableResponseArrayOutput() DatabaseTableResponseArrayOutput {
	return i.ToDatabaseTableResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseTableResponseArray) ToDatabaseTableResponseArrayOutputWithContext(ctx context.Context) DatabaseTableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTableResponseArrayOutput)
}

// Table properties
type DatabaseTableResponseOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseOutput) ToDatabaseTableResponseOutput() DatabaseTableResponseOutput {
	return o
}

func (o DatabaseTableResponseOutput) ToDatabaseTableResponseOutputWithContext(ctx context.Context) DatabaseTableResponseOutput {
	return o
}

// Indicates whether table is empty or not
func (o DatabaseTableResponseOutput) HasRows() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseTableResponse) bool { return v.HasRows }).(pulumi.BoolOutput)
}

// Schema-qualified name of the table
func (o DatabaseTableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTableResponse) string { return v.Name }).(pulumi.StringOutput)
}

type DatabaseTableResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseArrayOutput) ToDatabaseTableResponseArrayOutput() DatabaseTableResponseArrayOutput {
	return o
}

func (o DatabaseTableResponseArrayOutput) ToDatabaseTableResponseArrayOutputWithContext(ctx context.Context) DatabaseTableResponseArrayOutput {
	return o
}

func (o DatabaseTableResponseArrayOutput) Index(i pulumi.IntInput) DatabaseTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseTableResponse {
		return vs[0].([]DatabaseTableResponse)[vs[1].(int)]
	}).(DatabaseTableResponseOutput)
}

// File share information with Path, Username, and Password.
type FileShare struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// FileShareInput is an input type that accepts FileShareArgs and FileShareOutput values.
// You can construct a concrete instance of `FileShareInput` via:
//
//          FileShareArgs{...}
type FileShareInput interface {
	pulumi.Input

	ToFileShareOutput() FileShareOutput
	ToFileShareOutputWithContext(context.Context) FileShareOutput
}

// File share information with Path, Username, and Password.
type FileShareArgs struct {
	// Password credential used to connect to the share location.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The folder path for this share.
	Path pulumi.StringInput `pulumi:"path"`
	// User name credential to connect to the share location
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (FileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil)).Elem()
}

func (i FileShareArgs) ToFileShareOutput() FileShareOutput {
	return i.ToFileShareOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput)
}

func (i FileShareArgs) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput).ToFileSharePtrOutputWithContext(ctx)
}

// FileSharePtrInput is an input type that accepts FileShareArgs, FileSharePtr and FileSharePtrOutput values.
// You can construct a concrete instance of `FileSharePtrInput` via:
//
//          FileShareArgs{...}
//
//  or:
//
//          nil
type FileSharePtrInput interface {
	pulumi.Input

	ToFileSharePtrOutput() FileSharePtrOutput
	ToFileSharePtrOutputWithContext(context.Context) FileSharePtrOutput
}

type fileSharePtrType FileShareArgs

func FileSharePtr(v *FileShareArgs) FileSharePtrInput {
	return (*fileSharePtrType)(v)
}

func (*fileSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShare)(nil)).Elem()
}

func (i *fileSharePtrType) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i *fileSharePtrType) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSharePtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareOutput struct{ *pulumi.OutputState }

func (FileShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil)).Elem()
}

func (o FileShareOutput) ToFileShareOutput() FileShareOutput {
	return o
}

func (o FileShareOutput) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return o
}

func (o FileShareOutput) ToFileSharePtrOutput() FileSharePtrOutput {
	return o.ToFileSharePtrOutputWithContext(context.Background())
}

func (o FileShareOutput) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return o.ApplyT(func(v FileShare) *FileShare {
		return &v
	}).(FileSharePtrOutput)
}

// Password credential used to connect to the share location.
func (o FileShareOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShare) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShare) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShare) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileSharePtrOutput struct{ *pulumi.OutputState }

func (FileSharePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShare)(nil)).Elem()
}

func (o FileSharePtrOutput) ToFileSharePtrOutput() FileSharePtrOutput {
	return o
}

func (o FileSharePtrOutput) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return o
}

func (o FileSharePtrOutput) Elem() FileShareOutput {
	return o.ApplyT(func(v *FileShare) FileShare { return *v }).(FileShareOutput)
}

// Password credential used to connect to the share location.
func (o FileSharePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileSharePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileSharePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareInvokeResponse struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// FileShareInvokeResponseInput is an input type that accepts FileShareInvokeResponseArgs and FileShareInvokeResponseOutput values.
// You can construct a concrete instance of `FileShareInvokeResponseInput` via:
//
//          FileShareInvokeResponseArgs{...}
type FileShareInvokeResponseInput interface {
	pulumi.Input

	ToFileShareInvokeResponseOutput() FileShareInvokeResponseOutput
	ToFileShareInvokeResponseOutputWithContext(context.Context) FileShareInvokeResponseOutput
}

// File share information with Path, Username, and Password.
type FileShareInvokeResponseArgs struct {
	// Password credential used to connect to the share location.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The folder path for this share.
	Path pulumi.StringInput `pulumi:"path"`
	// User name credential to connect to the share location
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (FileShareInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareInvokeResponse)(nil)).Elem()
}

func (i FileShareInvokeResponseArgs) ToFileShareInvokeResponseOutput() FileShareInvokeResponseOutput {
	return i.ToFileShareInvokeResponseOutputWithContext(context.Background())
}

func (i FileShareInvokeResponseArgs) ToFileShareInvokeResponseOutputWithContext(ctx context.Context) FileShareInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareInvokeResponseOutput)
}

func (i FileShareInvokeResponseArgs) ToFileShareInvokeResponsePtrOutput() FileShareInvokeResponsePtrOutput {
	return i.ToFileShareInvokeResponsePtrOutputWithContext(context.Background())
}

func (i FileShareInvokeResponseArgs) ToFileShareInvokeResponsePtrOutputWithContext(ctx context.Context) FileShareInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareInvokeResponseOutput).ToFileShareInvokeResponsePtrOutputWithContext(ctx)
}

// FileShareInvokeResponsePtrInput is an input type that accepts FileShareInvokeResponseArgs, FileShareInvokeResponsePtr and FileShareInvokeResponsePtrOutput values.
// You can construct a concrete instance of `FileShareInvokeResponsePtrInput` via:
//
//          FileShareInvokeResponseArgs{...}
//
//  or:
//
//          nil
type FileShareInvokeResponsePtrInput interface {
	pulumi.Input

	ToFileShareInvokeResponsePtrOutput() FileShareInvokeResponsePtrOutput
	ToFileShareInvokeResponsePtrOutputWithContext(context.Context) FileShareInvokeResponsePtrOutput
}

type fileShareInvokeResponsePtrType FileShareInvokeResponseArgs

func FileShareInvokeResponsePtr(v *FileShareInvokeResponseArgs) FileShareInvokeResponsePtrInput {
	return (*fileShareInvokeResponsePtrType)(v)
}

func (*fileShareInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareInvokeResponse)(nil)).Elem()
}

func (i *fileShareInvokeResponsePtrType) ToFileShareInvokeResponsePtrOutput() FileShareInvokeResponsePtrOutput {
	return i.ToFileShareInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *fileShareInvokeResponsePtrType) ToFileShareInvokeResponsePtrOutputWithContext(ctx context.Context) FileShareInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareInvokeResponsePtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareInvokeResponseOutput struct{ *pulumi.OutputState }

func (FileShareInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareInvokeResponse)(nil)).Elem()
}

func (o FileShareInvokeResponseOutput) ToFileShareInvokeResponseOutput() FileShareInvokeResponseOutput {
	return o
}

func (o FileShareInvokeResponseOutput) ToFileShareInvokeResponseOutputWithContext(ctx context.Context) FileShareInvokeResponseOutput {
	return o
}

func (o FileShareInvokeResponseOutput) ToFileShareInvokeResponsePtrOutput() FileShareInvokeResponsePtrOutput {
	return o.ToFileShareInvokeResponsePtrOutputWithContext(context.Background())
}

func (o FileShareInvokeResponseOutput) ToFileShareInvokeResponsePtrOutputWithContext(ctx context.Context) FileShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v FileShareInvokeResponse) *FileShareInvokeResponse {
		return &v
	}).(FileShareInvokeResponsePtrOutput)
}

// Password credential used to connect to the share location.
func (o FileShareInvokeResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareInvokeResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareInvokeResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareInvokeResponse) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareInvokeResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareInvokeResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileShareInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (FileShareInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareInvokeResponse)(nil)).Elem()
}

func (o FileShareInvokeResponsePtrOutput) ToFileShareInvokeResponsePtrOutput() FileShareInvokeResponsePtrOutput {
	return o
}

func (o FileShareInvokeResponsePtrOutput) ToFileShareInvokeResponsePtrOutputWithContext(ctx context.Context) FileShareInvokeResponsePtrOutput {
	return o
}

func (o FileShareInvokeResponsePtrOutput) Elem() FileShareInvokeResponseOutput {
	return o.ApplyT(func(v *FileShareInvokeResponse) FileShareInvokeResponse { return *v }).(FileShareInvokeResponseOutput)
}

// Password credential used to connect to the share location.
func (o FileShareInvokeResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareInvokeResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileShareInvokeResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareResponse struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// FileShareResponseInput is an input type that accepts FileShareResponseArgs and FileShareResponseOutput values.
// You can construct a concrete instance of `FileShareResponseInput` via:
//
//          FileShareResponseArgs{...}
type FileShareResponseInput interface {
	pulumi.Input

	ToFileShareResponseOutput() FileShareResponseOutput
	ToFileShareResponseOutputWithContext(context.Context) FileShareResponseOutput
}

// File share information with Path, Username, and Password.
type FileShareResponseArgs struct {
	// Password credential used to connect to the share location.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The folder path for this share.
	Path pulumi.StringInput `pulumi:"path"`
	// User name credential to connect to the share location
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (FileShareResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareResponse)(nil)).Elem()
}

func (i FileShareResponseArgs) ToFileShareResponseOutput() FileShareResponseOutput {
	return i.ToFileShareResponseOutputWithContext(context.Background())
}

func (i FileShareResponseArgs) ToFileShareResponseOutputWithContext(ctx context.Context) FileShareResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareResponseOutput)
}

func (i FileShareResponseArgs) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return i.ToFileShareResponsePtrOutputWithContext(context.Background())
}

func (i FileShareResponseArgs) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareResponseOutput).ToFileShareResponsePtrOutputWithContext(ctx)
}

// FileShareResponsePtrInput is an input type that accepts FileShareResponseArgs, FileShareResponsePtr and FileShareResponsePtrOutput values.
// You can construct a concrete instance of `FileShareResponsePtrInput` via:
//
//          FileShareResponseArgs{...}
//
//  or:
//
//          nil
type FileShareResponsePtrInput interface {
	pulumi.Input

	ToFileShareResponsePtrOutput() FileShareResponsePtrOutput
	ToFileShareResponsePtrOutputWithContext(context.Context) FileShareResponsePtrOutput
}

type fileShareResponsePtrType FileShareResponseArgs

func FileShareResponsePtr(v *FileShareResponseArgs) FileShareResponsePtrInput {
	return (*fileShareResponsePtrType)(v)
}

func (*fileShareResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareResponse)(nil)).Elem()
}

func (i *fileShareResponsePtrType) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return i.ToFileShareResponsePtrOutputWithContext(context.Background())
}

func (i *fileShareResponsePtrType) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareResponsePtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareResponseOutput struct{ *pulumi.OutputState }

func (FileShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareResponse)(nil)).Elem()
}

func (o FileShareResponseOutput) ToFileShareResponseOutput() FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponseOutputWithContext(ctx context.Context) FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o.ToFileShareResponsePtrOutputWithContext(context.Background())
}

func (o FileShareResponseOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o.ApplyT(func(v FileShareResponse) *FileShareResponse {
		return &v
	}).(FileShareResponsePtrOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareResponse) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileShareResponsePtrOutput struct{ *pulumi.OutputState }

func (FileShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareResponse)(nil)).Elem()
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) Elem() FileShareResponseOutput {
	return o.ApplyT(func(v *FileShareResponse) FileShareResponse { return *v }).(FileShareResponseOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileShareResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInput struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesSqlTaskInputInput is an input type that accepts GetUserTablesSqlTaskInputArgs and GetUserTablesSqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputInput` via:
//
//          GetUserTablesSqlTaskInputArgs{...}
type GetUserTablesSqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput
	ToGetUserTablesSqlTaskInputOutputWithContext(context.Context) GetUserTablesSqlTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputArgs struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput {
	return i.ToGetUserTablesSqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput)
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput).ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskInputPtrInput is an input type that accepts GetUserTablesSqlTaskInputArgs, GetUserTablesSqlTaskInputPtr and GetUserTablesSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputPtrInput` via:
//
//          GetUserTablesSqlTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput
	ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesSqlTaskInputPtrOutput
}

type getUserTablesSqlTaskInputPtrType GetUserTablesSqlTaskInputArgs

func GetUserTablesSqlTaskInputPtr(v *GetUserTablesSqlTaskInputArgs) GetUserTablesSqlTaskInputPtrInput {
	return (*getUserTablesSqlTaskInputPtrType)(v)
}

func (*getUserTablesSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput {
	return o
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputOutput {
	return o
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return o.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) *GetUserTablesSqlTaskInput {
		return &v
	}).(GetUserTablesSqlTaskInputPtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputOutput) ConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) SqlConnectionInfo { return v.ConnectionInfo }).(SqlConnectionInfoOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputPtrOutput) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputPtrOutput) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputPtrOutput) Elem() GetUserTablesSqlTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) GetUserTablesSqlTaskInput { return *v }).(GetUserTablesSqlTaskInputOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputPtrOutput) ConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputPtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputInvokeResponse struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesSqlTaskInputInvokeResponseInput is an input type that accepts GetUserTablesSqlTaskInputInvokeResponseArgs and GetUserTablesSqlTaskInputInvokeResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputInvokeResponseInput` via:
//
//          GetUserTablesSqlTaskInputInvokeResponseArgs{...}
type GetUserTablesSqlTaskInputInvokeResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputInvokeResponseOutput() GetUserTablesSqlTaskInputInvokeResponseOutput
	ToGetUserTablesSqlTaskInputInvokeResponseOutputWithContext(context.Context) GetUserTablesSqlTaskInputInvokeResponseOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputInvokeResponseArgs struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesSqlTaskInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputInvokeResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskInputInvokeResponseArgs) ToGetUserTablesSqlTaskInputInvokeResponseOutput() GetUserTablesSqlTaskInputInvokeResponseOutput {
	return i.ToGetUserTablesSqlTaskInputInvokeResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputInvokeResponseArgs) ToGetUserTablesSqlTaskInputInvokeResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputInvokeResponseOutput)
}

func (i GetUserTablesSqlTaskInputInvokeResponseArgs) ToGetUserTablesSqlTaskInputInvokeResponsePtrOutput() GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return i.ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputInvokeResponseArgs) ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputInvokeResponseOutput).ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskInputInvokeResponsePtrInput is an input type that accepts GetUserTablesSqlTaskInputInvokeResponseArgs, GetUserTablesSqlTaskInputInvokeResponsePtr and GetUserTablesSqlTaskInputInvokeResponsePtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputInvokeResponsePtrInput` via:
//
//          GetUserTablesSqlTaskInputInvokeResponseArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlTaskInputInvokeResponsePtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputInvokeResponsePtrOutput() GetUserTablesSqlTaskInputInvokeResponsePtrOutput
	ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(context.Context) GetUserTablesSqlTaskInputInvokeResponsePtrOutput
}

type getUserTablesSqlTaskInputInvokeResponsePtrType GetUserTablesSqlTaskInputInvokeResponseArgs

func GetUserTablesSqlTaskInputInvokeResponsePtr(v *GetUserTablesSqlTaskInputInvokeResponseArgs) GetUserTablesSqlTaskInputInvokeResponsePtrInput {
	return (*getUserTablesSqlTaskInputInvokeResponsePtrType)(v)
}

func (*getUserTablesSqlTaskInputInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputInvokeResponse)(nil)).Elem()
}

func (i *getUserTablesSqlTaskInputInvokeResponsePtrType) ToGetUserTablesSqlTaskInputInvokeResponsePtrOutput() GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return i.ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskInputInvokeResponsePtrType) ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputInvokeResponsePtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputInvokeResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputInvokeResponseOutput) ToGetUserTablesSqlTaskInputInvokeResponseOutput() GetUserTablesSqlTaskInputInvokeResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputInvokeResponseOutput) ToGetUserTablesSqlTaskInputInvokeResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputInvokeResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputInvokeResponseOutput) ToGetUserTablesSqlTaskInputInvokeResponsePtrOutput() GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return o.ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskInputInvokeResponseOutput) ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputInvokeResponse) *GetUserTablesSqlTaskInputInvokeResponse {
		return &v
	}).(GetUserTablesSqlTaskInputInvokeResponsePtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputInvokeResponseOutput) ConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.ConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputInvokeResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputInvokeResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputInvokeResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputInvokeResponsePtrOutput) ToGetUserTablesSqlTaskInputInvokeResponsePtrOutput() GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputInvokeResponsePtrOutput) ToGetUserTablesSqlTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputInvokeResponsePtrOutput) Elem() GetUserTablesSqlTaskInputInvokeResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputInvokeResponse) GetUserTablesSqlTaskInputInvokeResponse { return *v }).(GetUserTablesSqlTaskInputInvokeResponseOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputInvokeResponsePtrOutput) ConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputInvokeResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponse struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesSqlTaskInputResponseInput is an input type that accepts GetUserTablesSqlTaskInputResponseArgs and GetUserTablesSqlTaskInputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputResponseInput` via:
//
//          GetUserTablesSqlTaskInputResponseArgs{...}
type GetUserTablesSqlTaskInputResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput
	ToGetUserTablesSqlTaskInputResponseOutputWithContext(context.Context) GetUserTablesSqlTaskInputResponseOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponseArgs struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponseInput `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesSqlTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskInputResponseArgs) ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput {
	return i.ToGetUserTablesSqlTaskInputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputResponseArgs) ToGetUserTablesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputResponseOutput)
}

func (i GetUserTablesSqlTaskInputResponseArgs) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return i.ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputResponseArgs) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputResponseOutput).ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskInputResponsePtrInput is an input type that accepts GetUserTablesSqlTaskInputResponseArgs, GetUserTablesSqlTaskInputResponsePtr and GetUserTablesSqlTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputResponsePtrInput` via:
//
//          GetUserTablesSqlTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlTaskInputResponsePtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput
	ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Context) GetUserTablesSqlTaskInputResponsePtrOutput
}

type getUserTablesSqlTaskInputResponsePtrType GetUserTablesSqlTaskInputResponseArgs

func GetUserTablesSqlTaskInputResponsePtr(v *GetUserTablesSqlTaskInputResponseArgs) GetUserTablesSqlTaskInputResponsePtrInput {
	return (*getUserTablesSqlTaskInputResponsePtrType)(v)
}

func (*getUserTablesSqlTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (i *getUserTablesSqlTaskInputResponsePtrType) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return i.ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskInputResponsePtrType) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) *GetUserTablesSqlTaskInputResponse {
		return &v
	}).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponseOutput) ConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) SqlConnectionInfoResponse { return v.ConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) Elem() GetUserTablesSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) GetUserTablesSqlTaskInputResponse { return *v }).(GetUserTablesSqlTaskInputResponseOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponsePtrOutput) ConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputInvokeResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables map[string][]DatabaseTableInvokeResponse `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionInvokeResponse `pulumi:"validationErrors"`
}

// GetUserTablesSqlTaskOutputInvokeResponseInput is an input type that accepts GetUserTablesSqlTaskOutputInvokeResponseArgs and GetUserTablesSqlTaskOutputInvokeResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskOutputInvokeResponseInput` via:
//
//          GetUserTablesSqlTaskOutputInvokeResponseArgs{...}
type GetUserTablesSqlTaskOutputInvokeResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskOutputInvokeResponseOutput() GetUserTablesSqlTaskOutputInvokeResponseOutput
	ToGetUserTablesSqlTaskOutputInvokeResponseOutputWithContext(context.Context) GetUserTablesSqlTaskOutputInvokeResponseOutput
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputInvokeResponseArgs struct {
	// Mapping from database name to list of tables
	DatabasesToTables DatabaseTableInvokeResponseArrayMapInput `pulumi:"databasesToTables"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Validation errors
	ValidationErrors ReportableExceptionInvokeResponseArrayInput `pulumi:"validationErrors"`
}

func (GetUserTablesSqlTaskOutputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputInvokeResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskOutputInvokeResponseArgs) ToGetUserTablesSqlTaskOutputInvokeResponseOutput() GetUserTablesSqlTaskOutputInvokeResponseOutput {
	return i.ToGetUserTablesSqlTaskOutputInvokeResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskOutputInvokeResponseArgs) ToGetUserTablesSqlTaskOutputInvokeResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskOutputInvokeResponseOutput)
}

// GetUserTablesSqlTaskOutputInvokeResponseArrayInput is an input type that accepts GetUserTablesSqlTaskOutputInvokeResponseArray and GetUserTablesSqlTaskOutputInvokeResponseArrayOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskOutputInvokeResponseArrayInput` via:
//
//          GetUserTablesSqlTaskOutputInvokeResponseArray{ GetUserTablesSqlTaskOutputInvokeResponseArgs{...} }
type GetUserTablesSqlTaskOutputInvokeResponseArrayInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskOutputInvokeResponseArrayOutput() GetUserTablesSqlTaskOutputInvokeResponseArrayOutput
	ToGetUserTablesSqlTaskOutputInvokeResponseArrayOutputWithContext(context.Context) GetUserTablesSqlTaskOutputInvokeResponseArrayOutput
}

type GetUserTablesSqlTaskOutputInvokeResponseArray []GetUserTablesSqlTaskOutputInvokeResponseInput

func (GetUserTablesSqlTaskOutputInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputInvokeResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskOutputInvokeResponseArray) ToGetUserTablesSqlTaskOutputInvokeResponseArrayOutput() GetUserTablesSqlTaskOutputInvokeResponseArrayOutput {
	return i.ToGetUserTablesSqlTaskOutputInvokeResponseArrayOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskOutputInvokeResponseArray) ToGetUserTablesSqlTaskOutputInvokeResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskOutputInvokeResponseArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputInvokeResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputInvokeResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputInvokeResponseOutput) ToGetUserTablesSqlTaskOutputInvokeResponseOutput() GetUserTablesSqlTaskOutputInvokeResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputInvokeResponseOutput) ToGetUserTablesSqlTaskOutputInvokeResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputInvokeResponseOutput {
	return o
}

// Mapping from database name to list of tables
func (o GetUserTablesSqlTaskOutputInvokeResponseOutput) DatabasesToTables() DatabaseTableInvokeResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputInvokeResponse) map[string][]DatabaseTableInvokeResponse {
		return v.DatabasesToTables
	}).(DatabaseTableInvokeResponseArrayMapOutput)
}

// Result identifier
func (o GetUserTablesSqlTaskOutputInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Validation errors
func (o GetUserTablesSqlTaskOutputInvokeResponseOutput) ValidationErrors() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.ValidationErrors
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

type GetUserTablesSqlTaskOutputInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputInvokeResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputInvokeResponseArrayOutput) ToGetUserTablesSqlTaskOutputInvokeResponseArrayOutput() GetUserTablesSqlTaskOutputInvokeResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputInvokeResponseArrayOutput) ToGetUserTablesSqlTaskOutputInvokeResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputInvokeResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputInvokeResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlTaskOutputInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlTaskOutputInvokeResponse {
		return vs[0].([]GetUserTablesSqlTaskOutputInvokeResponse)[vs[1].(int)]
	}).(GetUserTablesSqlTaskOutputInvokeResponseOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables map[string][]DatabaseTableResponse `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// GetUserTablesSqlTaskOutputResponseInput is an input type that accepts GetUserTablesSqlTaskOutputResponseArgs and GetUserTablesSqlTaskOutputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskOutputResponseInput` via:
//
//          GetUserTablesSqlTaskOutputResponseArgs{...}
type GetUserTablesSqlTaskOutputResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput
	ToGetUserTablesSqlTaskOutputResponseOutputWithContext(context.Context) GetUserTablesSqlTaskOutputResponseOutput
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponseArgs struct {
	// Mapping from database name to list of tables
	DatabasesToTables DatabaseTableResponseArrayMapInput `pulumi:"databasesToTables"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (GetUserTablesSqlTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskOutputResponseArgs) ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput {
	return i.ToGetUserTablesSqlTaskOutputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskOutputResponseArgs) ToGetUserTablesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskOutputResponseOutput)
}

// GetUserTablesSqlTaskOutputResponseArrayInput is an input type that accepts GetUserTablesSqlTaskOutputResponseArray and GetUserTablesSqlTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskOutputResponseArrayInput` via:
//
//          GetUserTablesSqlTaskOutputResponseArray{ GetUserTablesSqlTaskOutputResponseArgs{...} }
type GetUserTablesSqlTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput
	ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput
}

type GetUserTablesSqlTaskOutputResponseArray []GetUserTablesSqlTaskOutputResponseInput

func (GetUserTablesSqlTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskOutputResponseArray) ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return i.ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskOutputResponseArray) ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskOutputResponseArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of tables
func (o GetUserTablesSqlTaskOutputResponseOutput) DatabasesToTables() DatabaseTableResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) map[string][]DatabaseTableResponse {
		return v.DatabasesToTables
	}).(DatabaseTableResponseArrayMapOutput)
}

// Result identifier
func (o GetUserTablesSqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Validation errors
func (o GetUserTablesSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlTaskOutputResponse {
		return vs[0].([]GetUserTablesSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesSqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskProperties struct {
	// Task input
	Input *GetUserTablesSqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlTaskPropertiesInput is an input type that accepts GetUserTablesSqlTaskPropertiesArgs and GetUserTablesSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesInput` via:
//
//          GetUserTablesSqlTaskPropertiesArgs{...}
type GetUserTablesSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput
	ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesArgs struct {
	// Task input
	Input GetUserTablesSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput {
	return i.ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesOutput) ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesOutput) ToGetUserTablesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesOutput {
	return o
}

// Task input
func (o GetUserTablesSqlTaskPropertiesOutput) Input() GetUserTablesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) *GetUserTablesSqlTaskInput { return v.Input }).(GetUserTablesSqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTables.Sql'.
func (o GetUserTablesSqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesInvokeResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorInvokeResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlTaskInputInvokeResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlTaskOutputInvokeResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlTaskPropertiesInvokeResponseInput is an input type that accepts GetUserTablesSqlTaskPropertiesInvokeResponseArgs and GetUserTablesSqlTaskPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesInvokeResponseInput` via:
//
//          GetUserTablesSqlTaskPropertiesInvokeResponseArgs{...}
type GetUserTablesSqlTaskPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesInvokeResponseOutput() GetUserTablesSqlTaskPropertiesInvokeResponseOutput
	ToGetUserTablesSqlTaskPropertiesInvokeResponseOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesInvokeResponseOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesInvokeResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorInvokeResponseArrayInput `pulumi:"errors"`
	// Task input
	Input GetUserTablesSqlTaskInputInvokeResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output GetUserTablesSqlTaskOutputInvokeResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlTaskPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesInvokeResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskPropertiesInvokeResponseArgs) ToGetUserTablesSqlTaskPropertiesInvokeResponseOutput() GetUserTablesSqlTaskPropertiesInvokeResponseOutput {
	return i.ToGetUserTablesSqlTaskPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesInvokeResponseArgs) ToGetUserTablesSqlTaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesInvokeResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesInvokeResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesInvokeResponseOutput) ToGetUserTablesSqlTaskPropertiesInvokeResponseOutput() GetUserTablesSqlTaskPropertiesInvokeResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesInvokeResponseOutput) ToGetUserTablesSqlTaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesInvokeResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesInvokeResponseOutput) Errors() ODataErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesInvokeResponse) []ODataErrorInvokeResponse { return v.Errors }).(ODataErrorInvokeResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesInvokeResponseOutput) Input() GetUserTablesSqlTaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesInvokeResponse) *GetUserTablesSqlTaskInputInvokeResponse {
		return v.Input
	}).(GetUserTablesSqlTaskInputInvokeResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesInvokeResponseOutput) Output() GetUserTablesSqlTaskOutputInvokeResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesInvokeResponse) []GetUserTablesSqlTaskOutputInvokeResponse {
		return v.Output
	}).(GetUserTablesSqlTaskOutputInvokeResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'GetUserTables.Sql'.
func (o GetUserTablesSqlTaskPropertiesInvokeResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesInvokeResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlTaskPropertiesResponseInput is an input type that accepts GetUserTablesSqlTaskPropertiesResponseArgs and GetUserTablesSqlTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesResponseInput` via:
//
//          GetUserTablesSqlTaskPropertiesResponseArgs{...}
type GetUserTablesSqlTaskPropertiesResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput
	ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesResponseOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input GetUserTablesSqlTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output GetUserTablesSqlTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskPropertiesResponseArgs) ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput {
	return i.ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesResponseArgs) ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Input() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) *GetUserTablesSqlTaskInputResponse { return v.Input }).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Output() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []GetUserTablesSqlTaskOutputResponse { return v.Output }).(GetUserTablesSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'GetUserTables.Sql'.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInput struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateSqlServerSqlDbDatabaseInputInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArgs and MigrateSqlServerSqlDbDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputArgs{...}
type MigrateSqlServerSqlDbDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput
	ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputArgs struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateSqlServerSqlDbDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputOutput)
}

// MigrateSqlServerSqlDbDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArray and MigrateSqlServerSqlDbDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputArray{ MigrateSqlServerSqlDbDatabaseInputArgs{...} }
type MigrateSqlServerSqlDbDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput
	ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput
}

type MigrateSqlServerSqlDbDatabaseInputArray []MigrateSqlServerSqlDbDatabaseInputInput

func (MigrateSqlServerSqlDbDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputOutput) ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputOutput) ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputOutput {
	return o
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInput {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInput)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputInvokeResponse struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateSqlServerSqlDbDatabaseInputInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputInvokeResponseArgs and MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputInvokeResponseArgs{...}
type MigrateSqlServerSqlDbDatabaseInputInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput() MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput
	ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputInvokeResponseArgs struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateSqlServerSqlDbDatabaseInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputInvokeResponseArgs) ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput() MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputInvokeResponseArgs) ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput)
}

// MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputInvokeResponseArray and MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputInvokeResponseArray{ MigrateSqlServerSqlDbDatabaseInputInvokeResponseArgs{...} }
type MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput
	ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput
}

type MigrateSqlServerSqlDbDatabaseInputInvokeResponseArray []MigrateSqlServerSqlDbDatabaseInputInvokeResponseInput

func (MigrateSqlServerSqlDbDatabaseInputInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputInvokeResponseArray) ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputInvokeResponseArray) ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput() MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput {
	return o
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputInvokeResponse) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputInvokeResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputInvokeResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInputInvokeResponse {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInputInvokeResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponse struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateSqlServerSqlDbDatabaseInputResponseInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputResponseArgs and MigrateSqlServerSqlDbDatabaseInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputResponseInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputResponseArgs{...}
type MigrateSqlServerSqlDbDatabaseInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput
	ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponseArgs struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateSqlServerSqlDbDatabaseInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputResponseArgs) ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputResponseArgs) ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputResponseOutput)
}

// MigrateSqlServerSqlDbDatabaseInputResponseArrayInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputResponseArray and MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputResponseArrayInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputResponseArray{ MigrateSqlServerSqlDbDatabaseInputResponseArgs{...} }
type MigrateSqlServerSqlDbDatabaseInputResponseArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput
	ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput
}

type MigrateSqlServerSqlDbDatabaseInputResponseArray []MigrateSqlServerSqlDbDatabaseInputResponseInput

func (MigrateSqlServerSqlDbDatabaseInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputResponseArray) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputResponseArray) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputResponseOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbTaskInputInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs and MigrateSqlServerSqlDbTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputInput` via:
//
//          MigrateSqlServerSqlDbTaskInputArgs{...}
type MigrateSqlServerSqlDbTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput
	ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions MigrationValidationOptionsPtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput)
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput).ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs, MigrateSqlServerSqlDbTaskInputPtr and MigrateSqlServerSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputPtrInput` via:
//
//          MigrateSqlServerSqlDbTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput
	ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput
}

type migrateSqlServerSqlDbTaskInputPtrType MigrateSqlServerSqlDbTaskInputArgs

func MigrateSqlServerSqlDbTaskInputPtr(v *MigrateSqlServerSqlDbTaskInputArgs) MigrateSqlServerSqlDbTaskInputPtrInput {
	return (*migrateSqlServerSqlDbTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) *MigrateSqlServerSqlDbTaskInput {
		return &v
	}).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) []MigrateSqlServerSqlDbDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) *MigrationValidationOptions { return v.ValidationOptions }).(MigrationValidationOptionsPtrOutput)
}

type MigrateSqlServerSqlDbTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) Elem() MigrateSqlServerSqlDbTaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) MigrateSqlServerSqlDbTaskInput { return *v }).(MigrateSqlServerSqlDbTaskInputOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) []MigrateSqlServerSqlDbDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *MigrationValidationOptions {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputInvokeResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInputInvokeResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptionsInvokeResponse `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbTaskInputInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskInputInvokeResponseArgs and MigrateSqlServerSqlDbTaskInputInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskInputInvokeResponseArgs{...}
type MigrateSqlServerSqlDbTaskInputInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputInvokeResponseOutput() MigrateSqlServerSqlDbTaskInputInvokeResponseOutput
	ToMigrateSqlServerSqlDbTaskInputInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputInvokeResponseOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputInvokeResponseArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions MigrationValidationOptionsInvokeResponsePtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbTaskInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskInputInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskInputInvokeResponseOutput() MigrateSqlServerSqlDbTaskInputInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskInputInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputInvokeResponseOutput)
}

func (i MigrateSqlServerSqlDbTaskInputInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputInvokeResponseOutput).ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskInputInvokeResponsePtrInput is an input type that accepts MigrateSqlServerSqlDbTaskInputInvokeResponseArgs, MigrateSqlServerSqlDbTaskInputInvokeResponsePtr and MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputInvokeResponsePtrInput` via:
//
//          MigrateSqlServerSqlDbTaskInputInvokeResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbTaskInputInvokeResponsePtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput
	ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput
}

type migrateSqlServerSqlDbTaskInputInvokeResponsePtrType MigrateSqlServerSqlDbTaskInputInvokeResponseArgs

func MigrateSqlServerSqlDbTaskInputInvokeResponsePtr(v *MigrateSqlServerSqlDbTaskInputInvokeResponseArgs) MigrateSqlServerSqlDbTaskInputInvokeResponsePtrInput {
	return (*migrateSqlServerSqlDbTaskInputInvokeResponsePtrType)(v)
}

func (*migrateSqlServerSqlDbTaskInputInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputInvokeResponse)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskInputInvokeResponsePtrType) ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskInputInvokeResponsePtrType) ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskInputInvokeResponseOutput() MigrateSqlServerSqlDbTaskInputInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskInputInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputInvokeResponse) *MigrateSqlServerSqlDbTaskInputInvokeResponse {
		return &v
	}).(MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputInvokeResponse) []MigrateSqlServerSqlDbDatabaseInputInvokeResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) SourceConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputInvokeResponseOutput) ValidationOptions() MigrationValidationOptionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputInvokeResponse) *MigrationValidationOptionsInvokeResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsInvokeResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput) Elem() MigrateSqlServerSqlDbTaskInputInvokeResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputInvokeResponse) MigrateSqlServerSqlDbTaskInputInvokeResponse {
		return *v
	}).(MigrateSqlServerSqlDbTaskInputInvokeResponseOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputInvokeResponse) []MigrateSqlServerSqlDbDatabaseInputInvokeResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput) ValidationOptions() MigrationValidationOptionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputInvokeResponse) *MigrationValidationOptionsInvokeResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsInvokeResponsePtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbTaskInputResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskInputResponseArgs and MigrateSqlServerSqlDbTaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskInputResponseArgs{...}
type MigrateSqlServerSqlDbTaskInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput
	ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponseArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions MigrationValidationOptionsResponsePtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskInputResponseArgs) ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputResponseArgs) ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputResponseOutput)
}

func (i MigrateSqlServerSqlDbTaskInputResponseArgs) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputResponseArgs) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputResponseOutput).ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskInputResponsePtrInput is an input type that accepts MigrateSqlServerSqlDbTaskInputResponseArgs, MigrateSqlServerSqlDbTaskInputResponsePtr and MigrateSqlServerSqlDbTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputResponsePtrInput` via:
//
//          MigrateSqlServerSqlDbTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbTaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput
	ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput
}

type migrateSqlServerSqlDbTaskInputResponsePtrType MigrateSqlServerSqlDbTaskInputResponseArgs

func MigrateSqlServerSqlDbTaskInputResponsePtr(v *MigrateSqlServerSqlDbTaskInputResponseArgs) MigrateSqlServerSqlDbTaskInputResponsePtrInput {
	return (*migrateSqlServerSqlDbTaskInputResponsePtrType)(v)
}

func (*migrateSqlServerSqlDbTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskInputResponsePtrType) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskInputResponsePtrType) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) MigrateSqlServerSqlDbTaskInputResponse { return *v }).(MigrateSqlServerSqlDbTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

// Database level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse struct {
	// Name of the item
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount float64 `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionInvokeResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects float64 `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted float64 `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary map[string]DataItemMigrationSummaryResultInvokeResponse `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseArgs and MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput
}

// Database level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseArgs struct {
	// Name of the item
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount pulumi.Float64Input `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionInvokeResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Number of objects
	NumberOfObjects pulumi.Float64Input `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted pulumi.Float64Input `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary DataItemMigrationSummaryResultInvokeResponseMapInput `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage pulumi.StringInput `pulumi:"stage"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput)
}

// Database level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput {
	return o
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of database/object errors.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ErrorCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) float64 { return v.ErrorCount }).(pulumi.Float64Output)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ExceptionsAndWarnings() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Number of objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) NumberOfObjects() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) float64 { return v.NumberOfObjects }).(pulumi.Float64Output)
}

// Number of successfully completed objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) NumberOfObjectsCompleted() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) float64 {
		return v.NumberOfObjectsCompleted
	}).(pulumi.Float64Output)
}

// Summary of object results in the migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ObjectSummary() DataItemMigrationSummaryResultInvokeResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) map[string]DataItemMigrationSummaryResultInvokeResponse {
		return v.ObjectSummary
	}).(DataItemMigrationSummaryResultInvokeResponseMapOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration stage that this database is in
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Database level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse struct {
	// Name of the item
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount float64 `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects float64 `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted float64 `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary map[string]DataItemMigrationSummaryResultResponse `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs and MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput
}

// Database level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs struct {
	// Name of the item
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount pulumi.Float64Input `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Number of objects
	NumberOfObjects pulumi.Float64Input `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted pulumi.Float64Input `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary DataItemMigrationSummaryResultResponseMapInput `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage pulumi.StringInput `pulumi:"stage"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput)
}

// Database level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of database/object errors.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) float64 { return v.ErrorCount }).(pulumi.Float64Output)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Number of objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjects() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) float64 { return v.NumberOfObjects }).(pulumi.Float64Output)
}

// Number of successfully completed objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjectsCompleted() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) float64 {
		return v.NumberOfObjectsCompleted
	}).(pulumi.Float64Output)
}

// Summary of object results in the migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ObjectSummary() DataItemMigrationSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) map[string]DataItemMigrationSummaryResultResponse {
		return v.ObjectSummary
	}).(DataItemMigrationSummaryResultResponseMapOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration stage that this database is in
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Database validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationDatabaseLevelValidationOutput'.
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseArgs and MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput
}

// Database validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationDatabaseLevelValidationOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput)
}

// Database validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationDatabaseLevelValidationOutput'.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Database validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationDatabaseLevelValidationOutput'.
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs and MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput
}

// Database validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationDatabaseLevelValidationOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput)
}

// Database validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationDatabaseLevelValidationOutput'.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Task errors for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputErrorInvokeResponse struct {
	// Migration error
	Error ReportableExceptionInvokeResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseArgs and MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput
}

// Task errors for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseArgs struct {
	// Migration error
	Error ReportableExceptionInvokeResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput)
}

// Task errors for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput) Error() ReportableExceptionInvokeResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorInvokeResponse) ReportableExceptionInvokeResponse {
		return v.Error
	}).(ReportableExceptionInvokeResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Task errors for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputErrorResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputErrorResponseArgs and MigrateSqlServerSqlDbTaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputErrorResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputErrorResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput
}

// Task errors for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputErrorResponseArgs) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputErrorResponseArgs) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputErrorResponseOutput)
}

// Task errors for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration level result for Sql server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse struct {
	// Summary of database results in the migration
	DatabaseSummary map[string]DatabaseSummaryResultInvokeResponse `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds float64 `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionInvokeResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultInvokeResponse `pulumi:"migrationReportResult"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseArgs and MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput
}

// Migration level result for Sql server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseArgs struct {
	// Summary of database results in the migration
	DatabaseSummary DatabaseSummaryResultInvokeResponseMapInput `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds pulumi.Float64Input `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionInvokeResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult MigrationReportResultInvokeResponsePtrInput `pulumi:"migrationReportResult"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current status of migration
	Status pulumi.StringInput `pulumi:"status"`
	// Migration status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput)
}

// Migration level result for Sql server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput {
	return o
}

// Summary of database results in the migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) DatabaseSummary() DatabaseSummaryResultInvokeResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) map[string]DatabaseSummaryResultInvokeResponse {
		return v.DatabaseSummary
	}).(DatabaseSummaryResultInvokeResponseMapOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) map[string]string {
		return v.Databases
	}).(pulumi.StringMapOutput)
}

// Duration of task execution in seconds.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) DurationInSeconds() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) float64 {
		return v.DurationInSeconds
	}).(pulumi.Float64Output)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) ExceptionsAndWarnings() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Migration Report Result, provides unique url for downloading your migration report.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) MigrationReportResult() MigrationReportResultInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) *MigrationReportResultInvokeResponse {
		return v.MigrationReportResult
	}).(MigrationReportResultInvokeResponsePtrOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Migration status message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

// Migration level result for Sql server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse struct {
	// Summary of database results in the migration
	DatabaseSummary map[string]DatabaseSummaryResultResponse `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds float64 `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultResponse `pulumi:"migrationReportResult"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs and MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput
}

// Migration level result for Sql server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs struct {
	// Summary of database results in the migration
	DatabaseSummary DatabaseSummaryResultResponseMapInput `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds pulumi.Float64Input `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult MigrationReportResultResponsePtrInput `pulumi:"migrationReportResult"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current status of migration
	Status pulumi.StringInput `pulumi:"status"`
	// Migration status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput)
}

// Migration level result for Sql server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

// Summary of database results in the migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DatabaseSummary() DatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) map[string]DatabaseSummaryResultResponse {
		return v.DatabaseSummary
	}).(DatabaseSummaryResultResponseMapOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Duration of task execution in seconds.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DurationInSeconds() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) float64 { return v.DurationInSeconds }).(pulumi.Float64Output)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Migration Report Result, provides unique url for downloading your migration report.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) MigrationReportResult() MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) *MigrationReportResultResponse {
		return v.MigrationReportResult
	}).(MigrationReportResultResponsePtrOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Migration status message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Table level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseArgs and MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput
}

// Table level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.Float64Input `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.Float64Input `pulumi:"itemsCount"`
	// Name of the item
	ObjectName pulumi.StringInput `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput)
}

// Table level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.ObjectName }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'TableLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Table level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputTableLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// MigrateSqlServerSqlDbTaskOutputTableLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs and MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputTableLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputTableLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput
}

// Table level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.Float64Input `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.Float64Input `pulumi:"itemsCount"`
	// Name of the item
	ObjectName pulumi.StringInput `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput)
}

// Table level result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ObjectName }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'TableLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationValidationOutput'.
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseArgs and MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput
}

// Validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationValidationOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput)
}

// Validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationValidationOutput'.
func (o MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputValidationResultResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationValidationOutput'.
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputValidationResultResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs and MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputValidationResultResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputValidationResultResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput
}

// Validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationValidationOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput)
}

// Validation result for Sql Server to Azure Sql DB migration.
type MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationValidationOutput'.
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskProperties struct {
	// Task input
	Input *MigrateSqlServerSqlDbTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesArgs and MigrateSqlServerSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesInput` via:
//
//          MigrateSqlServerSqlDbTaskPropertiesArgs{...}
type MigrateSqlServerSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput
	ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesArgs struct {
	// Task input
	Input MigrateSqlServerSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput {
	return o
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) Input() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) *MigrateSqlServerSqlDbTaskInput { return v.Input }).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.SqlDb'.
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesInvokeResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorInvokeResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInputInvokeResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbTaskPropertiesInvokeResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesInvokeResponseArgs and MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesInvokeResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskPropertiesInvokeResponseArgs{...}
type MigrateSqlServerSqlDbTaskPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput() MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput
	ToMigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesInvokeResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorInvokeResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSqlServerSqlDbTaskInputInvokeResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbTaskPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskPropertiesInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput() MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesInvokeResponseArgs) ToMigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput() MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput) Errors() ODataErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesInvokeResponse) []ODataErrorInvokeResponse { return v.Errors }).(ODataErrorInvokeResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput) Input() MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesInvokeResponse) *MigrateSqlServerSqlDbTaskInputInvokeResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesInvokeResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.SqlDb'.
func (o MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesInvokeResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbTaskPropertiesResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesResponseArgs and MigrateSqlServerSqlDbTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskPropertiesResponseArgs{...}
type MigrateSqlServerSqlDbTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput
	ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSqlServerSqlDbTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskPropertiesResponseArgs) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesResponseArgs) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesResponseOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.SqlDb'.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInput struct {
	// Backup file share information for backing up this database.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// MigrateSqlServerSqlMIDatabaseInputInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArgs and MigrateSqlServerSqlMIDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputArgs{...}
type MigrateSqlServerSqlMIDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput
	ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputArgs struct {
	// Backup file share information for backing up this database.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Name of the database
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName pulumi.StringInput `pulumi:"restoreDatabaseName"`
}

func (MigrateSqlServerSqlMIDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputOutput)
}

// MigrateSqlServerSqlMIDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArray and MigrateSqlServerSqlMIDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputArray{ MigrateSqlServerSqlMIDatabaseInputArgs{...} }
type MigrateSqlServerSqlMIDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput
	ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput
}

type MigrateSqlServerSqlMIDatabaseInputArray []MigrateSqlServerSqlMIDatabaseInputInput

func (MigrateSqlServerSqlMIDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputOutput) ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputOutput) ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputOutput {
	return o
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInput {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInput)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputInvokeResponse struct {
	// Backup file share information for backing up this database.
	BackupFileShare *FileShareInvokeResponse `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// MigrateSqlServerSqlMIDatabaseInputInvokeResponseInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputInvokeResponseArgs and MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputInvokeResponseInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputInvokeResponseArgs{...}
type MigrateSqlServerSqlMIDatabaseInputInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput() MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput
	ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputInvokeResponseArgs struct {
	// Backup file share information for backing up this database.
	BackupFileShare FileShareInvokeResponsePtrInput `pulumi:"backupFileShare"`
	// Name of the database
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName pulumi.StringInput `pulumi:"restoreDatabaseName"`
}

func (MigrateSqlServerSqlMIDatabaseInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputInvokeResponseArgs) ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput() MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputInvokeResponseArgs) ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput)
}

// MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputInvokeResponseArray and MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputInvokeResponseArray{ MigrateSqlServerSqlMIDatabaseInputInvokeResponseArgs{...} }
type MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput
	ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput
}

type MigrateSqlServerSqlMIDatabaseInputInvokeResponseArray []MigrateSqlServerSqlMIDatabaseInputInvokeResponseInput

func (MigrateSqlServerSqlMIDatabaseInputInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputInvokeResponseArray) ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputInvokeResponseArray) ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput() MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput {
	return o
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput) BackupFileShare() FileShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputInvokeResponse) *FileShareInvokeResponse {
		return v.BackupFileShare
	}).(FileShareInvokeResponsePtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputInvokeResponse) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInputInvokeResponse {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInputInvokeResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponse struct {
	// Backup file share information for backing up this database.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// MigrateSqlServerSqlMIDatabaseInputResponseInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputResponseArgs and MigrateSqlServerSqlMIDatabaseInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputResponseInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputResponseArgs{...}
type MigrateSqlServerSqlMIDatabaseInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput
	ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponseArgs struct {
	// Backup file share information for backing up this database.
	BackupFileShare FileShareResponsePtrInput `pulumi:"backupFileShare"`
	// Name of the database
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName pulumi.StringInput `pulumi:"restoreDatabaseName"`
}

func (MigrateSqlServerSqlMIDatabaseInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputResponseArgs) ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputResponseArgs) ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputResponseOutput)
}

// MigrateSqlServerSqlMIDatabaseInputResponseArrayInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputResponseArray and MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputResponseArrayInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputResponseArray{ MigrateSqlServerSqlMIDatabaseInputResponseArgs{...} }
type MigrateSqlServerSqlMIDatabaseInputResponseArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput
	ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput
}

type MigrateSqlServerSqlMIDatabaseInputResponseArray []MigrateSqlServerSqlMIDatabaseInputResponseInput

func (MigrateSqlServerSqlMIDatabaseInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputResponseArray) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputResponseArray) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputResponseOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInput struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMITaskInputInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs and MigrateSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputInput` via:
//
//          MigrateSqlServerSqlMITaskInputArgs{...}
type MigrateSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput
	ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput {
	return i.ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput)
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput).ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskInputPtrInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs, MigrateSqlServerSqlMITaskInputPtr and MigrateSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputPtrInput` via:
//
//          MigrateSqlServerSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput
	ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputPtrOutput
}

type migrateSqlServerSqlMITaskInputPtrType MigrateSqlServerSqlMITaskInputArgs

func MigrateSqlServerSqlMITaskInputPtr(v *MigrateSqlServerSqlMITaskInputArgs) MigrateSqlServerSqlMITaskInputPtrInput {
	return (*migrateSqlServerSqlMITaskInputPtrType)(v)
}

func (*migrateSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *MigrateSqlServerSqlMITaskInput {
		return &v
	}).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputOutput) BackupBlobShare() BlobShareOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) BlobShare { return v.BackupBlobShare }).(BlobShareOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type MigrateSqlServerSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) Elem() MigrateSqlServerSqlMITaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) MigrateSqlServerSqlMITaskInput { return *v }).(MigrateSqlServerSqlMITaskInputOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) BackupBlobShare() BlobSharePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *BlobShare {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobSharePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputInvokeResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInvokeResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareInvokeResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputInvokeResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMITaskInputInvokeResponseInput is an input type that accepts MigrateSqlServerSqlMITaskInputInvokeResponseArgs and MigrateSqlServerSqlMITaskInputInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputInvokeResponseInput` via:
//
//          MigrateSqlServerSqlMITaskInputInvokeResponseArgs{...}
type MigrateSqlServerSqlMITaskInputInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputInvokeResponseOutput() MigrateSqlServerSqlMITaskInputInvokeResponseOutput
	ToMigrateSqlServerSqlMITaskInputInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputInvokeResponseOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputInvokeResponseArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInvokeResponseInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileShareInvokeResponsePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMITaskInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskInputInvokeResponseArgs) ToMigrateSqlServerSqlMITaskInputInvokeResponseOutput() MigrateSqlServerSqlMITaskInputInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskInputInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputInvokeResponseArgs) ToMigrateSqlServerSqlMITaskInputInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputInvokeResponseOutput)
}

func (i MigrateSqlServerSqlMITaskInputInvokeResponseArgs) ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputInvokeResponseArgs) ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputInvokeResponseOutput).ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskInputInvokeResponsePtrInput is an input type that accepts MigrateSqlServerSqlMITaskInputInvokeResponseArgs, MigrateSqlServerSqlMITaskInputInvokeResponsePtr and MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputInvokeResponsePtrInput` via:
//
//          MigrateSqlServerSqlMITaskInputInvokeResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMITaskInputInvokeResponsePtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput
	ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput
}

type migrateSqlServerSqlMITaskInputInvokeResponsePtrType MigrateSqlServerSqlMITaskInputInvokeResponseArgs

func MigrateSqlServerSqlMITaskInputInvokeResponsePtr(v *MigrateSqlServerSqlMITaskInputInvokeResponseArgs) MigrateSqlServerSqlMITaskInputInvokeResponsePtrInput {
	return (*migrateSqlServerSqlMITaskInputInvokeResponsePtrType)(v)
}

func (*migrateSqlServerSqlMITaskInputInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskInputInvokeResponsePtrType) ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskInputInvokeResponsePtrType) ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) ToMigrateSqlServerSqlMITaskInputInvokeResponseOutput() MigrateSqlServerSqlMITaskInputInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) ToMigrateSqlServerSqlMITaskInputInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o.ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputInvokeResponse) *MigrateSqlServerSqlMITaskInputInvokeResponse {
		return &v
	}).(MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) BackupBlobShare() BlobShareInvokeResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputInvokeResponse) BlobShareInvokeResponse { return v.BackupBlobShare }).(BlobShareInvokeResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) BackupFileShare() FileShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputInvokeResponse) *FileShareInvokeResponse {
		return v.BackupFileShare
	}).(FileShareInvokeResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputInvokeResponse) []MigrateSqlServerSqlMIDatabaseInputInvokeResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) SourceConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputInvokeResponseOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

type MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput() MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) Elem() MigrateSqlServerSqlMITaskInputInvokeResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputInvokeResponse) MigrateSqlServerSqlMITaskInputInvokeResponse {
		return *v
	}).(MigrateSqlServerSqlMITaskInputInvokeResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) BackupBlobShare() BlobShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputInvokeResponse) *BlobShareInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareInvokeResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) BackupFileShare() FileShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputInvokeResponse) *FileShareInvokeResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareInvokeResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputInvokeResponse) []MigrateSqlServerSqlMIDatabaseInputInvokeResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMITaskInputResponseInput is an input type that accepts MigrateSqlServerSqlMITaskInputResponseArgs and MigrateSqlServerSqlMITaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputResponseInput` via:
//
//          MigrateSqlServerSqlMITaskInputResponseArgs{...}
type MigrateSqlServerSqlMITaskInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput
	ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputResponseOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponseArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponseInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileShareResponsePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMITaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskInputResponseArgs) ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputResponseArgs) ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputResponseOutput)
}

func (i MigrateSqlServerSqlMITaskInputResponseArgs) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputResponseArgs) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputResponseOutput).ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskInputResponsePtrInput is an input type that accepts MigrateSqlServerSqlMITaskInputResponseArgs, MigrateSqlServerSqlMITaskInputResponsePtr and MigrateSqlServerSqlMITaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputResponsePtrInput` via:
//
//          MigrateSqlServerSqlMITaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMITaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput
	ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput
}

type migrateSqlServerSqlMITaskInputResponsePtrType MigrateSqlServerSqlMITaskInputResponseArgs

func MigrateSqlServerSqlMITaskInputResponsePtr(v *MigrateSqlServerSqlMITaskInputResponseArgs) MigrateSqlServerSqlMITaskInputResponsePtrInput {
	return (*migrateSqlServerSqlMITaskInputResponsePtrType)(v)
}

func (*migrateSqlServerSqlMITaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskInputResponsePtrType) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskInputResponsePtrType) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) BlobShareResponse { return v.BackupBlobShare }).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type MigrateSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) MigrateSqlServerSqlMITaskInputResponse { return *v }).(MigrateSqlServerSqlMITaskInputResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Database level result for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionInvokeResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current stage of migration
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

// MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseArgs and MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput
	ToMigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput
}

// Database level result for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseArgs struct {
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings ReportableExceptionInvokeResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Current stage of migration
	Stage pulumi.StringInput `pulumi:"stage"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
}

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseArgs) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseArgs) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput)
}

// Database level result for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput {
	return o
}

// Name of the database
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) ExceptionsAndWarnings() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current stage of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Database level result for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current stage of migration
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

// MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs and MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput
	ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput
}

// Database level result for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs struct {
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Current stage of migration
	Stage pulumi.StringInput `pulumi:"stage"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
}

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput)
}

// Database level result for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the database
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current stage of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task errors for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputErrorInvokeResponse struct {
	// Migration error
	Error ReportableExceptionInvokeResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlMITaskOutputErrorInvokeResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputErrorInvokeResponseArgs and MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputErrorInvokeResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputErrorInvokeResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputErrorInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput
	ToMigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput
}

// Task errors for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputErrorInvokeResponseArgs struct {
	// Migration error
	Error ReportableExceptionInvokeResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlMITaskOutputErrorInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputErrorInvokeResponseArgs) ToMigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputErrorInvokeResponseArgs) ToMigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput)
}

// Task errors for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput) Error() ReportableExceptionInvokeResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorInvokeResponse) ReportableExceptionInvokeResponse {
		return v.Error
	}).(ReportableExceptionInvokeResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Task errors for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlMITaskOutputErrorResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputErrorResponseArgs and MigrateSqlServerSqlMITaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputErrorResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputErrorResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput
	ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput
}

// Task errors for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlMITaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputErrorResponseArgs) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputErrorResponseArgs) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputErrorResponseOutput)
}

// Task errors for Sql Server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration level result for Sql server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse struct {
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionInvokeResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseArgs and MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput
	ToMigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput
}

// Migration level result for Sql server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseArgs struct {
	// Selected databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionInvokeResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Current status of migration
	Status pulumi.StringInput `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseArgs) ToMigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseArgs) ToMigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput)
}

// Migration level result for Sql server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput {
	return o
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) map[string]string {
		return v.Databases
	}).(pulumi.StringMapOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) ExceptionsAndWarnings() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

// Migration level result for Sql server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputMigrationLevelResponse struct {
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSqlServerSqlMITaskOutputMigrationLevelResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs and MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputMigrationLevelResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput
	ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput
}

// Migration level result for Sql server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs struct {
	// Selected databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Current status of migration
	Status pulumi.StringInput `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput)
}

// Migration level result for Sql server to Sql MI migration.
type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskProperties struct {
	// Task input
	Input *MigrateSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMITaskPropertiesInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesArgs and MigrateSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesInput` via:
//
//          MigrateSqlServerSqlMITaskPropertiesArgs{...}
type MigrateSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput
	ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesArgs struct {
	// Task input
	Input MigrateSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesOutput) ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesOutput) ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesOutput {
	return o
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesOutput) Input() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) *MigrateSqlServerSqlMITaskInput { return v.Input }).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
func (o MigrateSqlServerSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesInvokeResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorInvokeResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInputInvokeResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMITaskPropertiesInvokeResponseInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesInvokeResponseArgs and MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesInvokeResponseInput` via:
//
//          MigrateSqlServerSqlMITaskPropertiesInvokeResponseArgs{...}
type MigrateSqlServerSqlMITaskPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput() MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput
	ToMigrateSqlServerSqlMITaskPropertiesInvokeResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesInvokeResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorInvokeResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSqlServerSqlMITaskInputInvokeResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMITaskPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesInvokeResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskPropertiesInvokeResponseArgs) ToMigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput() MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesInvokeResponseArgs) ToMigrateSqlServerSqlMITaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesInvokeResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput() MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput) Errors() ODataErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesInvokeResponse) []ODataErrorInvokeResponse { return v.Errors }).(ODataErrorInvokeResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput) Input() MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesInvokeResponse) *MigrateSqlServerSqlMITaskInputInvokeResponse {
		return v.Input
	}).(MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesInvokeResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
func (o MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesInvokeResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMITaskPropertiesResponseInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesResponseArgs and MigrateSqlServerSqlMITaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesResponseInput` via:
//
//          MigrateSqlServerSqlMITaskPropertiesResponseArgs{...}
type MigrateSqlServerSqlMITaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput
	ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSqlServerSqlMITaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMITaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskPropertiesResponseArgs) ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesResponseArgs) ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesResponseOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Input() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultInvokeResponse struct {
	// Migration validation result identifier
	Id *string `pulumi:"id"`
	// The url of the report.
	ReportUrl *string `pulumi:"reportUrl"`
}

// MigrationReportResultInvokeResponseInput is an input type that accepts MigrationReportResultInvokeResponseArgs and MigrationReportResultInvokeResponseOutput values.
// You can construct a concrete instance of `MigrationReportResultInvokeResponseInput` via:
//
//          MigrationReportResultInvokeResponseArgs{...}
type MigrationReportResultInvokeResponseInput interface {
	pulumi.Input

	ToMigrationReportResultInvokeResponseOutput() MigrationReportResultInvokeResponseOutput
	ToMigrationReportResultInvokeResponseOutputWithContext(context.Context) MigrationReportResultInvokeResponseOutput
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultInvokeResponseArgs struct {
	// Migration validation result identifier
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The url of the report.
	ReportUrl pulumi.StringPtrInput `pulumi:"reportUrl"`
}

func (MigrationReportResultInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultInvokeResponse)(nil)).Elem()
}

func (i MigrationReportResultInvokeResponseArgs) ToMigrationReportResultInvokeResponseOutput() MigrationReportResultInvokeResponseOutput {
	return i.ToMigrationReportResultInvokeResponseOutputWithContext(context.Background())
}

func (i MigrationReportResultInvokeResponseArgs) ToMigrationReportResultInvokeResponseOutputWithContext(ctx context.Context) MigrationReportResultInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultInvokeResponseOutput)
}

func (i MigrationReportResultInvokeResponseArgs) ToMigrationReportResultInvokeResponsePtrOutput() MigrationReportResultInvokeResponsePtrOutput {
	return i.ToMigrationReportResultInvokeResponsePtrOutputWithContext(context.Background())
}

func (i MigrationReportResultInvokeResponseArgs) ToMigrationReportResultInvokeResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultInvokeResponseOutput).ToMigrationReportResultInvokeResponsePtrOutputWithContext(ctx)
}

// MigrationReportResultInvokeResponsePtrInput is an input type that accepts MigrationReportResultInvokeResponseArgs, MigrationReportResultInvokeResponsePtr and MigrationReportResultInvokeResponsePtrOutput values.
// You can construct a concrete instance of `MigrationReportResultInvokeResponsePtrInput` via:
//
//          MigrationReportResultInvokeResponseArgs{...}
//
//  or:
//
//          nil
type MigrationReportResultInvokeResponsePtrInput interface {
	pulumi.Input

	ToMigrationReportResultInvokeResponsePtrOutput() MigrationReportResultInvokeResponsePtrOutput
	ToMigrationReportResultInvokeResponsePtrOutputWithContext(context.Context) MigrationReportResultInvokeResponsePtrOutput
}

type migrationReportResultInvokeResponsePtrType MigrationReportResultInvokeResponseArgs

func MigrationReportResultInvokeResponsePtr(v *MigrationReportResultInvokeResponseArgs) MigrationReportResultInvokeResponsePtrInput {
	return (*migrationReportResultInvokeResponsePtrType)(v)
}

func (*migrationReportResultInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultInvokeResponse)(nil)).Elem()
}

func (i *migrationReportResultInvokeResponsePtrType) ToMigrationReportResultInvokeResponsePtrOutput() MigrationReportResultInvokeResponsePtrOutput {
	return i.ToMigrationReportResultInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *migrationReportResultInvokeResponsePtrType) ToMigrationReportResultInvokeResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultInvokeResponsePtrOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrationReportResultInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultInvokeResponse)(nil)).Elem()
}

func (o MigrationReportResultInvokeResponseOutput) ToMigrationReportResultInvokeResponseOutput() MigrationReportResultInvokeResponseOutput {
	return o
}

func (o MigrationReportResultInvokeResponseOutput) ToMigrationReportResultInvokeResponseOutputWithContext(ctx context.Context) MigrationReportResultInvokeResponseOutput {
	return o
}

func (o MigrationReportResultInvokeResponseOutput) ToMigrationReportResultInvokeResponsePtrOutput() MigrationReportResultInvokeResponsePtrOutput {
	return o.ToMigrationReportResultInvokeResponsePtrOutputWithContext(context.Background())
}

func (o MigrationReportResultInvokeResponseOutput) ToMigrationReportResultInvokeResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrationReportResultInvokeResponse) *MigrationReportResultInvokeResponse {
		return &v
	}).(MigrationReportResultInvokeResponsePtrOutput)
}

// Migration validation result identifier
func (o MigrationReportResultInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultInvokeResponseOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultInvokeResponse) *string { return v.ReportUrl }).(pulumi.StringPtrOutput)
}

type MigrationReportResultInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationReportResultInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultInvokeResponse)(nil)).Elem()
}

func (o MigrationReportResultInvokeResponsePtrOutput) ToMigrationReportResultInvokeResponsePtrOutput() MigrationReportResultInvokeResponsePtrOutput {
	return o
}

func (o MigrationReportResultInvokeResponsePtrOutput) ToMigrationReportResultInvokeResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultInvokeResponsePtrOutput {
	return o
}

func (o MigrationReportResultInvokeResponsePtrOutput) Elem() MigrationReportResultInvokeResponseOutput {
	return o.ApplyT(func(v *MigrationReportResultInvokeResponse) MigrationReportResultInvokeResponse { return *v }).(MigrationReportResultInvokeResponseOutput)
}

// Migration validation result identifier
func (o MigrationReportResultInvokeResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultInvokeResponsePtrOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReportUrl
	}).(pulumi.StringPtrOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponse struct {
	// Migration validation result identifier
	Id *string `pulumi:"id"`
	// The url of the report.
	ReportUrl *string `pulumi:"reportUrl"`
}

// MigrationReportResultResponseInput is an input type that accepts MigrationReportResultResponseArgs and MigrationReportResultResponseOutput values.
// You can construct a concrete instance of `MigrationReportResultResponseInput` via:
//
//          MigrationReportResultResponseArgs{...}
type MigrationReportResultResponseInput interface {
	pulumi.Input

	ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput
	ToMigrationReportResultResponseOutputWithContext(context.Context) MigrationReportResultResponseOutput
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponseArgs struct {
	// Migration validation result identifier
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The url of the report.
	ReportUrl pulumi.StringPtrInput `pulumi:"reportUrl"`
}

func (MigrationReportResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultResponse)(nil)).Elem()
}

func (i MigrationReportResultResponseArgs) ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput {
	return i.ToMigrationReportResultResponseOutputWithContext(context.Background())
}

func (i MigrationReportResultResponseArgs) ToMigrationReportResultResponseOutputWithContext(ctx context.Context) MigrationReportResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultResponseOutput)
}

func (i MigrationReportResultResponseArgs) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return i.ToMigrationReportResultResponsePtrOutputWithContext(context.Background())
}

func (i MigrationReportResultResponseArgs) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultResponseOutput).ToMigrationReportResultResponsePtrOutputWithContext(ctx)
}

// MigrationReportResultResponsePtrInput is an input type that accepts MigrationReportResultResponseArgs, MigrationReportResultResponsePtr and MigrationReportResultResponsePtrOutput values.
// You can construct a concrete instance of `MigrationReportResultResponsePtrInput` via:
//
//          MigrationReportResultResponseArgs{...}
//
//  or:
//
//          nil
type MigrationReportResultResponsePtrInput interface {
	pulumi.Input

	ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput
	ToMigrationReportResultResponsePtrOutputWithContext(context.Context) MigrationReportResultResponsePtrOutput
}

type migrationReportResultResponsePtrType MigrationReportResultResponseArgs

func MigrationReportResultResponsePtr(v *MigrationReportResultResponseArgs) MigrationReportResultResponsePtrInput {
	return (*migrationReportResultResponsePtrType)(v)
}

func (*migrationReportResultResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultResponse)(nil)).Elem()
}

func (i *migrationReportResultResponsePtrType) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return i.ToMigrationReportResultResponsePtrOutputWithContext(context.Background())
}

func (i *migrationReportResultResponsePtrType) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultResponsePtrOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutputWithContext(ctx context.Context) MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o.ToMigrationReportResultResponsePtrOutputWithContext(context.Background())
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *MigrationReportResultResponse {
		return &v
	}).(MigrationReportResultResponsePtrOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponseOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.ReportUrl }).(pulumi.StringPtrOutput)
}

type MigrationReportResultResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) Elem() MigrationReportResultResponseOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) MigrationReportResultResponse { return *v }).(MigrationReportResultResponseOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponsePtrOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReportUrl
	}).(pulumi.StringPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptions struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// MigrationValidationOptionsInput is an input type that accepts MigrationValidationOptionsArgs and MigrationValidationOptionsOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsInput` via:
//
//          MigrationValidationOptionsArgs{...}
type MigrationValidationOptionsInput interface {
	pulumi.Input

	ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput
	ToMigrationValidationOptionsOutputWithContext(context.Context) MigrationValidationOptionsOutput
}

// Types of validations to run after the migration
type MigrationValidationOptionsArgs struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation pulumi.BoolPtrInput `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation pulumi.BoolPtrInput `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation pulumi.BoolPtrInput `pulumi:"enableSchemaValidation"`
}

func (MigrationValidationOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptions)(nil)).Elem()
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput {
	return i.ToMigrationValidationOptionsOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutputWithContext(ctx context.Context) MigrationValidationOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput)
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput).ToMigrationValidationOptionsPtrOutputWithContext(ctx)
}

// MigrationValidationOptionsPtrInput is an input type that accepts MigrationValidationOptionsArgs, MigrationValidationOptionsPtr and MigrationValidationOptionsPtrOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsPtrInput` via:
//
//          MigrationValidationOptionsArgs{...}
//
//  or:
//
//          nil
type MigrationValidationOptionsPtrInput interface {
	pulumi.Input

	ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput
	ToMigrationValidationOptionsPtrOutputWithContext(context.Context) MigrationValidationOptionsPtrOutput
}

type migrationValidationOptionsPtrType MigrationValidationOptionsArgs

func MigrationValidationOptionsPtr(v *MigrationValidationOptionsArgs) MigrationValidationOptionsPtrInput {
	return (*migrationValidationOptionsPtrType)(v)
}

func (*migrationValidationOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptions)(nil)).Elem()
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptions)(nil)).Elem()
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput {
	return o
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsOutputWithContext(ctx context.Context) MigrationValidationOptionsOutput {
	return o
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return o.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *MigrationValidationOptions {
		return &v
	}).(MigrationValidationOptionsPtrOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsPtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptions)(nil)).Elem()
}

func (o MigrationValidationOptionsPtrOutput) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return o
}

func (o MigrationValidationOptionsPtrOutput) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return o
}

func (o MigrationValidationOptionsPtrOutput) Elem() MigrationValidationOptionsOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) MigrationValidationOptions { return *v }).(MigrationValidationOptionsOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsPtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsPtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsPtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsInvokeResponse struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// MigrationValidationOptionsInvokeResponseInput is an input type that accepts MigrationValidationOptionsInvokeResponseArgs and MigrationValidationOptionsInvokeResponseOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsInvokeResponseInput` via:
//
//          MigrationValidationOptionsInvokeResponseArgs{...}
type MigrationValidationOptionsInvokeResponseInput interface {
	pulumi.Input

	ToMigrationValidationOptionsInvokeResponseOutput() MigrationValidationOptionsInvokeResponseOutput
	ToMigrationValidationOptionsInvokeResponseOutputWithContext(context.Context) MigrationValidationOptionsInvokeResponseOutput
}

// Types of validations to run after the migration
type MigrationValidationOptionsInvokeResponseArgs struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation pulumi.BoolPtrInput `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation pulumi.BoolPtrInput `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation pulumi.BoolPtrInput `pulumi:"enableSchemaValidation"`
}

func (MigrationValidationOptionsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsInvokeResponse)(nil)).Elem()
}

func (i MigrationValidationOptionsInvokeResponseArgs) ToMigrationValidationOptionsInvokeResponseOutput() MigrationValidationOptionsInvokeResponseOutput {
	return i.ToMigrationValidationOptionsInvokeResponseOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsInvokeResponseArgs) ToMigrationValidationOptionsInvokeResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsInvokeResponseOutput)
}

func (i MigrationValidationOptionsInvokeResponseArgs) ToMigrationValidationOptionsInvokeResponsePtrOutput() MigrationValidationOptionsInvokeResponsePtrOutput {
	return i.ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsInvokeResponseArgs) ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsInvokeResponseOutput).ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(ctx)
}

// MigrationValidationOptionsInvokeResponsePtrInput is an input type that accepts MigrationValidationOptionsInvokeResponseArgs, MigrationValidationOptionsInvokeResponsePtr and MigrationValidationOptionsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsInvokeResponsePtrInput` via:
//
//          MigrationValidationOptionsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type MigrationValidationOptionsInvokeResponsePtrInput interface {
	pulumi.Input

	ToMigrationValidationOptionsInvokeResponsePtrOutput() MigrationValidationOptionsInvokeResponsePtrOutput
	ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(context.Context) MigrationValidationOptionsInvokeResponsePtrOutput
}

type migrationValidationOptionsInvokeResponsePtrType MigrationValidationOptionsInvokeResponseArgs

func MigrationValidationOptionsInvokeResponsePtr(v *MigrationValidationOptionsInvokeResponseArgs) MigrationValidationOptionsInvokeResponsePtrInput {
	return (*migrationValidationOptionsInvokeResponsePtrType)(v)
}

func (*migrationValidationOptionsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsInvokeResponse)(nil)).Elem()
}

func (i *migrationValidationOptionsInvokeResponsePtrType) ToMigrationValidationOptionsInvokeResponsePtrOutput() MigrationValidationOptionsInvokeResponsePtrOutput {
	return i.ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *migrationValidationOptionsInvokeResponsePtrType) ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsInvokeResponsePtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsInvokeResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsInvokeResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsInvokeResponseOutput) ToMigrationValidationOptionsInvokeResponseOutput() MigrationValidationOptionsInvokeResponseOutput {
	return o
}

func (o MigrationValidationOptionsInvokeResponseOutput) ToMigrationValidationOptionsInvokeResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsInvokeResponseOutput {
	return o
}

func (o MigrationValidationOptionsInvokeResponseOutput) ToMigrationValidationOptionsInvokeResponsePtrOutput() MigrationValidationOptionsInvokeResponsePtrOutput {
	return o.ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o MigrationValidationOptionsInvokeResponseOutput) ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsInvokeResponse) *MigrationValidationOptionsInvokeResponse {
		return &v
	}).(MigrationValidationOptionsInvokeResponsePtrOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsInvokeResponseOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsInvokeResponse) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsInvokeResponseOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsInvokeResponse) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsInvokeResponseOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsInvokeResponse) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsInvokeResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsInvokeResponsePtrOutput) ToMigrationValidationOptionsInvokeResponsePtrOutput() MigrationValidationOptionsInvokeResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsInvokeResponsePtrOutput) ToMigrationValidationOptionsInvokeResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsInvokeResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsInvokeResponsePtrOutput) Elem() MigrationValidationOptionsInvokeResponseOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsInvokeResponse) MigrationValidationOptionsInvokeResponse { return *v }).(MigrationValidationOptionsInvokeResponseOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsInvokeResponsePtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsInvokeResponsePtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsInvokeResponsePtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponse struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// MigrationValidationOptionsResponseInput is an input type that accepts MigrationValidationOptionsResponseArgs and MigrationValidationOptionsResponseOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsResponseInput` via:
//
//          MigrationValidationOptionsResponseArgs{...}
type MigrationValidationOptionsResponseInput interface {
	pulumi.Input

	ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput
	ToMigrationValidationOptionsResponseOutputWithContext(context.Context) MigrationValidationOptionsResponseOutput
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponseArgs struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation pulumi.BoolPtrInput `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation pulumi.BoolPtrInput `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation pulumi.BoolPtrInput `pulumi:"enableSchemaValidation"`
}

func (MigrationValidationOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsResponse)(nil)).Elem()
}

func (i MigrationValidationOptionsResponseArgs) ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput {
	return i.ToMigrationValidationOptionsResponseOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsResponseArgs) ToMigrationValidationOptionsResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsResponseOutput)
}

func (i MigrationValidationOptionsResponseArgs) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return i.ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsResponseArgs) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsResponseOutput).ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx)
}

// MigrationValidationOptionsResponsePtrInput is an input type that accepts MigrationValidationOptionsResponseArgs, MigrationValidationOptionsResponsePtr and MigrationValidationOptionsResponsePtrOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsResponsePtrInput` via:
//
//          MigrationValidationOptionsResponseArgs{...}
//
//  or:
//
//          nil
type MigrationValidationOptionsResponsePtrInput interface {
	pulumi.Input

	ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput
	ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Context) MigrationValidationOptionsResponsePtrOutput
}

type migrationValidationOptionsResponsePtrType MigrationValidationOptionsResponseArgs

func MigrationValidationOptionsResponsePtr(v *MigrationValidationOptionsResponseArgs) MigrationValidationOptionsResponsePtrInput {
	return (*migrationValidationOptionsResponsePtrType)(v)
}

func (*migrationValidationOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsResponse)(nil)).Elem()
}

func (i *migrationValidationOptionsResponsePtrType) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return i.ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *migrationValidationOptionsResponsePtrType) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsResponsePtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o.ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Background())
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *MigrationValidationOptionsResponse {
		return &v
	}).(MigrationValidationOptionsResponsePtrOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponseOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponseOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponseOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) Elem() MigrationValidationOptionsResponseOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) MigrationValidationOptionsResponse { return *v }).(MigrationValidationOptionsResponseOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponsePtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponsePtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponsePtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Error information in OData format.
type ODataErrorInvokeResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code *string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorInvokeResponse `pulumi:"details"`
	// The human-readable description of the error
	Message *string `pulumi:"message"`
}

// ODataErrorInvokeResponseInput is an input type that accepts ODataErrorInvokeResponseArgs and ODataErrorInvokeResponseOutput values.
// You can construct a concrete instance of `ODataErrorInvokeResponseInput` via:
//
//          ODataErrorInvokeResponseArgs{...}
type ODataErrorInvokeResponseInput interface {
	pulumi.Input

	ToODataErrorInvokeResponseOutput() ODataErrorInvokeResponseOutput
	ToODataErrorInvokeResponseOutputWithContext(context.Context) ODataErrorInvokeResponseOutput
}

// Error information in OData format.
type ODataErrorInvokeResponseArgs struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Inner errors that caused this error
	Details ODataErrorInvokeResponseArrayInput `pulumi:"details"`
	// The human-readable description of the error
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (ODataErrorInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorInvokeResponse)(nil)).Elem()
}

func (i ODataErrorInvokeResponseArgs) ToODataErrorInvokeResponseOutput() ODataErrorInvokeResponseOutput {
	return i.ToODataErrorInvokeResponseOutputWithContext(context.Background())
}

func (i ODataErrorInvokeResponseArgs) ToODataErrorInvokeResponseOutputWithContext(ctx context.Context) ODataErrorInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorInvokeResponseOutput)
}

// ODataErrorInvokeResponseArrayInput is an input type that accepts ODataErrorInvokeResponseArray and ODataErrorInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ODataErrorInvokeResponseArrayInput` via:
//
//          ODataErrorInvokeResponseArray{ ODataErrorInvokeResponseArgs{...} }
type ODataErrorInvokeResponseArrayInput interface {
	pulumi.Input

	ToODataErrorInvokeResponseArrayOutput() ODataErrorInvokeResponseArrayOutput
	ToODataErrorInvokeResponseArrayOutputWithContext(context.Context) ODataErrorInvokeResponseArrayOutput
}

type ODataErrorInvokeResponseArray []ODataErrorInvokeResponseInput

func (ODataErrorInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorInvokeResponse)(nil)).Elem()
}

func (i ODataErrorInvokeResponseArray) ToODataErrorInvokeResponseArrayOutput() ODataErrorInvokeResponseArrayOutput {
	return i.ToODataErrorInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ODataErrorInvokeResponseArray) ToODataErrorInvokeResponseArrayOutputWithContext(ctx context.Context) ODataErrorInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorInvokeResponseArrayOutput)
}

// Error information in OData format.
type ODataErrorInvokeResponseOutput struct{ *pulumi.OutputState }

func (ODataErrorInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorInvokeResponse)(nil)).Elem()
}

func (o ODataErrorInvokeResponseOutput) ToODataErrorInvokeResponseOutput() ODataErrorInvokeResponseOutput {
	return o
}

func (o ODataErrorInvokeResponseOutput) ToODataErrorInvokeResponseOutputWithContext(ctx context.Context) ODataErrorInvokeResponseOutput {
	return o
}

// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
func (o ODataErrorInvokeResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorInvokeResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Inner errors that caused this error
func (o ODataErrorInvokeResponseOutput) Details() ODataErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v ODataErrorInvokeResponse) []ODataErrorInvokeResponse { return v.Details }).(ODataErrorInvokeResponseArrayOutput)
}

// The human-readable description of the error
func (o ODataErrorInvokeResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorInvokeResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ODataErrorInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ODataErrorInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorInvokeResponse)(nil)).Elem()
}

func (o ODataErrorInvokeResponseArrayOutput) ToODataErrorInvokeResponseArrayOutput() ODataErrorInvokeResponseArrayOutput {
	return o
}

func (o ODataErrorInvokeResponseArrayOutput) ToODataErrorInvokeResponseArrayOutputWithContext(ctx context.Context) ODataErrorInvokeResponseArrayOutput {
	return o
}

func (o ODataErrorInvokeResponseArrayOutput) Index(i pulumi.IntInput) ODataErrorInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ODataErrorInvokeResponse {
		return vs[0].([]ODataErrorInvokeResponse)[vs[1].(int)]
	}).(ODataErrorInvokeResponseOutput)
}

// Error information in OData format.
type ODataErrorResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code *string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorResponse `pulumi:"details"`
	// The human-readable description of the error
	Message *string `pulumi:"message"`
}

// ODataErrorResponseInput is an input type that accepts ODataErrorResponseArgs and ODataErrorResponseOutput values.
// You can construct a concrete instance of `ODataErrorResponseInput` via:
//
//          ODataErrorResponseArgs{...}
type ODataErrorResponseInput interface {
	pulumi.Input

	ToODataErrorResponseOutput() ODataErrorResponseOutput
	ToODataErrorResponseOutputWithContext(context.Context) ODataErrorResponseOutput
}

// Error information in OData format.
type ODataErrorResponseArgs struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Inner errors that caused this error
	Details ODataErrorResponseArrayInput `pulumi:"details"`
	// The human-readable description of the error
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (ODataErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (i ODataErrorResponseArgs) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return i.ToODataErrorResponseOutputWithContext(context.Background())
}

func (i ODataErrorResponseArgs) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorResponseOutput)
}

// ODataErrorResponseArrayInput is an input type that accepts ODataErrorResponseArray and ODataErrorResponseArrayOutput values.
// You can construct a concrete instance of `ODataErrorResponseArrayInput` via:
//
//          ODataErrorResponseArray{ ODataErrorResponseArgs{...} }
type ODataErrorResponseArrayInput interface {
	pulumi.Input

	ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput
	ToODataErrorResponseArrayOutputWithContext(context.Context) ODataErrorResponseArrayOutput
}

type ODataErrorResponseArray []ODataErrorResponseInput

func (ODataErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (i ODataErrorResponseArray) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return i.ToODataErrorResponseArrayOutputWithContext(context.Background())
}

func (i ODataErrorResponseArray) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorResponseArrayOutput)
}

// Error information in OData format.
type ODataErrorResponseOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return o
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return o
}

// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
func (o ODataErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Inner errors that caused this error
func (o ODataErrorResponseOutput) Details() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ODataErrorResponse) []ODataErrorResponse { return v.Details }).(ODataErrorResponseArrayOutput)
}

// The human-readable description of the error
func (o ODataErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ODataErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) Index(i pulumi.IntInput) ODataErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ODataErrorResponse {
		return vs[0].([]ODataErrorResponse)[vs[1].(int)]
	}).(ODataErrorResponseOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionInvokeResponse struct {
	// The path to the file where exception occurred
	FilePath *string `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult *int `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber *string `pulumi:"lineNumber"`
	// Error message
	Message *string `pulumi:"message"`
	// Stack trace
	StackTrace *string `pulumi:"stackTrace"`
}

// ReportableExceptionInvokeResponseInput is an input type that accepts ReportableExceptionInvokeResponseArgs and ReportableExceptionInvokeResponseOutput values.
// You can construct a concrete instance of `ReportableExceptionInvokeResponseInput` via:
//
//          ReportableExceptionInvokeResponseArgs{...}
type ReportableExceptionInvokeResponseInput interface {
	pulumi.Input

	ToReportableExceptionInvokeResponseOutput() ReportableExceptionInvokeResponseOutput
	ToReportableExceptionInvokeResponseOutputWithContext(context.Context) ReportableExceptionInvokeResponseOutput
}

// Exception object for all custom exceptions
type ReportableExceptionInvokeResponseArgs struct {
	// The path to the file where exception occurred
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult pulumi.IntPtrInput `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber pulumi.StringPtrInput `pulumi:"lineNumber"`
	// Error message
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Stack trace
	StackTrace pulumi.StringPtrInput `pulumi:"stackTrace"`
}

func (ReportableExceptionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionInvokeResponse)(nil)).Elem()
}

func (i ReportableExceptionInvokeResponseArgs) ToReportableExceptionInvokeResponseOutput() ReportableExceptionInvokeResponseOutput {
	return i.ToReportableExceptionInvokeResponseOutputWithContext(context.Background())
}

func (i ReportableExceptionInvokeResponseArgs) ToReportableExceptionInvokeResponseOutputWithContext(ctx context.Context) ReportableExceptionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportableExceptionInvokeResponseOutput)
}

// ReportableExceptionInvokeResponseArrayInput is an input type that accepts ReportableExceptionInvokeResponseArray and ReportableExceptionInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ReportableExceptionInvokeResponseArrayInput` via:
//
//          ReportableExceptionInvokeResponseArray{ ReportableExceptionInvokeResponseArgs{...} }
type ReportableExceptionInvokeResponseArrayInput interface {
	pulumi.Input

	ToReportableExceptionInvokeResponseArrayOutput() ReportableExceptionInvokeResponseArrayOutput
	ToReportableExceptionInvokeResponseArrayOutputWithContext(context.Context) ReportableExceptionInvokeResponseArrayOutput
}

type ReportableExceptionInvokeResponseArray []ReportableExceptionInvokeResponseInput

func (ReportableExceptionInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionInvokeResponse)(nil)).Elem()
}

func (i ReportableExceptionInvokeResponseArray) ToReportableExceptionInvokeResponseArrayOutput() ReportableExceptionInvokeResponseArrayOutput {
	return i.ToReportableExceptionInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ReportableExceptionInvokeResponseArray) ToReportableExceptionInvokeResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportableExceptionInvokeResponseArrayOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionInvokeResponseOutput struct{ *pulumi.OutputState }

func (ReportableExceptionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionInvokeResponse)(nil)).Elem()
}

func (o ReportableExceptionInvokeResponseOutput) ToReportableExceptionInvokeResponseOutput() ReportableExceptionInvokeResponseOutput {
	return o
}

func (o ReportableExceptionInvokeResponseOutput) ToReportableExceptionInvokeResponseOutputWithContext(ctx context.Context) ReportableExceptionInvokeResponseOutput {
	return o
}

// The path to the file where exception occurred
func (o ReportableExceptionInvokeResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionInvokeResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Coded numerical value that is assigned to a specific exception
func (o ReportableExceptionInvokeResponseOutput) HResult() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReportableExceptionInvokeResponse) *int { return v.HResult }).(pulumi.IntPtrOutput)
}

// The line number where exception occurred
func (o ReportableExceptionInvokeResponseOutput) LineNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionInvokeResponse) *string { return v.LineNumber }).(pulumi.StringPtrOutput)
}

// Error message
func (o ReportableExceptionInvokeResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionInvokeResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Stack trace
func (o ReportableExceptionInvokeResponseOutput) StackTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionInvokeResponse) *string { return v.StackTrace }).(pulumi.StringPtrOutput)
}

type ReportableExceptionInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportableExceptionInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionInvokeResponse)(nil)).Elem()
}

func (o ReportableExceptionInvokeResponseArrayOutput) ToReportableExceptionInvokeResponseArrayOutput() ReportableExceptionInvokeResponseArrayOutput {
	return o
}

func (o ReportableExceptionInvokeResponseArrayOutput) ToReportableExceptionInvokeResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionInvokeResponseArrayOutput {
	return o
}

func (o ReportableExceptionInvokeResponseArrayOutput) Index(i pulumi.IntInput) ReportableExceptionInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportableExceptionInvokeResponse {
		return vs[0].([]ReportableExceptionInvokeResponse)[vs[1].(int)]
	}).(ReportableExceptionInvokeResponseOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionResponse struct {
	// The path to the file where exception occurred
	FilePath *string `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult *int `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber *string `pulumi:"lineNumber"`
	// Error message
	Message *string `pulumi:"message"`
	// Stack trace
	StackTrace *string `pulumi:"stackTrace"`
}

// ReportableExceptionResponseInput is an input type that accepts ReportableExceptionResponseArgs and ReportableExceptionResponseOutput values.
// You can construct a concrete instance of `ReportableExceptionResponseInput` via:
//
//          ReportableExceptionResponseArgs{...}
type ReportableExceptionResponseInput interface {
	pulumi.Input

	ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput
	ToReportableExceptionResponseOutputWithContext(context.Context) ReportableExceptionResponseOutput
}

// Exception object for all custom exceptions
type ReportableExceptionResponseArgs struct {
	// The path to the file where exception occurred
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult pulumi.IntPtrInput `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber pulumi.StringPtrInput `pulumi:"lineNumber"`
	// Error message
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Stack trace
	StackTrace pulumi.StringPtrInput `pulumi:"stackTrace"`
}

func (ReportableExceptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionResponse)(nil)).Elem()
}

func (i ReportableExceptionResponseArgs) ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput {
	return i.ToReportableExceptionResponseOutputWithContext(context.Background())
}

func (i ReportableExceptionResponseArgs) ToReportableExceptionResponseOutputWithContext(ctx context.Context) ReportableExceptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportableExceptionResponseOutput)
}

// ReportableExceptionResponseArrayInput is an input type that accepts ReportableExceptionResponseArray and ReportableExceptionResponseArrayOutput values.
// You can construct a concrete instance of `ReportableExceptionResponseArrayInput` via:
//
//          ReportableExceptionResponseArray{ ReportableExceptionResponseArgs{...} }
type ReportableExceptionResponseArrayInput interface {
	pulumi.Input

	ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput
	ToReportableExceptionResponseArrayOutputWithContext(context.Context) ReportableExceptionResponseArrayOutput
}

type ReportableExceptionResponseArray []ReportableExceptionResponseInput

func (ReportableExceptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionResponse)(nil)).Elem()
}

func (i ReportableExceptionResponseArray) ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput {
	return i.ToReportableExceptionResponseArrayOutputWithContext(context.Background())
}

func (i ReportableExceptionResponseArray) ToReportableExceptionResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportableExceptionResponseArrayOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionResponseOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput {
	return o
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutputWithContext(ctx context.Context) ReportableExceptionResponseOutput {
	return o
}

// The path to the file where exception occurred
func (o ReportableExceptionResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Coded numerical value that is assigned to a specific exception
func (o ReportableExceptionResponseOutput) HResult() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *int { return v.HResult }).(pulumi.IntPtrOutput)
}

// The line number where exception occurred
func (o ReportableExceptionResponseOutput) LineNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.LineNumber }).(pulumi.StringPtrOutput)
}

// Error message
func (o ReportableExceptionResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Stack trace
func (o ReportableExceptionResponseOutput) StackTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.StackTrace }).(pulumi.StringPtrOutput)
}

type ReportableExceptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) Index(i pulumi.IntInput) ReportableExceptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportableExceptionResponse {
		return vs[0].([]ReportableExceptionResponse)[vs[1].(int)]
	}).(ReportableExceptionResponseOutput)
}

// An Azure SKU instance
type ServiceSku struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInput is an input type that accepts ServiceSkuArgs and ServiceSkuOutput values.
// You can construct a concrete instance of `ServiceSkuInput` via:
//
//          ServiceSkuArgs{...}
type ServiceSkuInput interface {
	pulumi.Input

	ToServiceSkuOutput() ServiceSkuOutput
	ToServiceSkuOutputWithContext(context.Context) ServiceSkuOutput
}

// An Azure SKU instance
type ServiceSkuArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (i ServiceSkuArgs) ToServiceSkuOutput() ServiceSkuOutput {
	return i.ToServiceSkuOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput)
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput).ToServiceSkuPtrOutputWithContext(ctx)
}

// ServiceSkuPtrInput is an input type that accepts ServiceSkuArgs, ServiceSkuPtr and ServiceSkuPtrOutput values.
// You can construct a concrete instance of `ServiceSkuPtrInput` via:
//
//          ServiceSkuArgs{...}
//
//  or:
//
//          nil
type ServiceSkuPtrInput interface {
	pulumi.Input

	ToServiceSkuPtrOutput() ServiceSkuPtrOutput
	ToServiceSkuPtrOutputWithContext(context.Context) ServiceSkuPtrOutput
}

type serviceSkuPtrType ServiceSkuArgs

func ServiceSkuPtr(v *ServiceSkuArgs) ServiceSkuPtrInput {
	return (*serviceSkuPtrType)(v)
}

func (*serviceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuPtrOutput)
}

// An Azure SKU instance
type ServiceSkuOutput struct{ *pulumi.OutputState }

func (ServiceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (o ServiceSkuOutput) ToServiceSkuOutput() ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o.ApplyT(func(v ServiceSku) *ServiceSku {
		return &v
	}).(ServiceSkuPtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuPtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) Elem() ServiceSkuOutput {
	return o.ApplyT(func(v *ServiceSku) ServiceSku { return *v }).(ServiceSkuOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// An Azure SKU instance
type ServiceSkuInvokeResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInvokeResponseInput is an input type that accepts ServiceSkuInvokeResponseArgs and ServiceSkuInvokeResponseOutput values.
// You can construct a concrete instance of `ServiceSkuInvokeResponseInput` via:
//
//          ServiceSkuInvokeResponseArgs{...}
type ServiceSkuInvokeResponseInput interface {
	pulumi.Input

	ToServiceSkuInvokeResponseOutput() ServiceSkuInvokeResponseOutput
	ToServiceSkuInvokeResponseOutputWithContext(context.Context) ServiceSkuInvokeResponseOutput
}

// An Azure SKU instance
type ServiceSkuInvokeResponseArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuInvokeResponse)(nil)).Elem()
}

func (i ServiceSkuInvokeResponseArgs) ToServiceSkuInvokeResponseOutput() ServiceSkuInvokeResponseOutput {
	return i.ToServiceSkuInvokeResponseOutputWithContext(context.Background())
}

func (i ServiceSkuInvokeResponseArgs) ToServiceSkuInvokeResponseOutputWithContext(ctx context.Context) ServiceSkuInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuInvokeResponseOutput)
}

// An Azure SKU instance
type ServiceSkuInvokeResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuInvokeResponse)(nil)).Elem()
}

func (o ServiceSkuInvokeResponseOutput) ToServiceSkuInvokeResponseOutput() ServiceSkuInvokeResponseOutput {
	return o
}

func (o ServiceSkuInvokeResponseOutput) ToServiceSkuInvokeResponseOutputWithContext(ctx context.Context) ServiceSkuInvokeResponseOutput {
	return o
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuInvokeResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuInvokeResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuInvokeResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuInvokeResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuInvokeResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuInvokeResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuInvokeResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuInvokeResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuResponseInput is an input type that accepts ServiceSkuResponseArgs and ServiceSkuResponseOutput values.
// You can construct a concrete instance of `ServiceSkuResponseInput` via:
//
//          ServiceSkuResponseArgs{...}
type ServiceSkuResponseInput interface {
	pulumi.Input

	ToServiceSkuResponseOutput() ServiceSkuResponseOutput
	ToServiceSkuResponseOutputWithContext(context.Context) ServiceSkuResponseOutput
}

// An Azure SKU instance
type ServiceSkuResponseArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return i.ToServiceSkuResponseOutputWithContext(context.Background())
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponseOutput)
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return i.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponseOutput).ToServiceSkuResponsePtrOutputWithContext(ctx)
}

// ServiceSkuResponsePtrInput is an input type that accepts ServiceSkuResponseArgs, ServiceSkuResponsePtr and ServiceSkuResponsePtrOutput values.
// You can construct a concrete instance of `ServiceSkuResponsePtrInput` via:
//
//          ServiceSkuResponseArgs{...}
//
//  or:
//
//          nil
type ServiceSkuResponsePtrInput interface {
	pulumi.Input

	ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput
	ToServiceSkuResponsePtrOutputWithContext(context.Context) ServiceSkuResponsePtrOutput
}

type serviceSkuResponsePtrType ServiceSkuResponseArgs

func ServiceSkuResponsePtr(v *ServiceSkuResponseArgs) ServiceSkuResponsePtrInput {
	return (*serviceSkuResponsePtrType)(v)
}

func (*serviceSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (i *serviceSkuResponsePtrType) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return i.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (i *serviceSkuResponsePtrType) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponsePtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *ServiceSkuResponse {
		return &v
	}).(ServiceSkuResponsePtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) Elem() ServiceSkuResponseOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) ServiceSkuResponse { return *v }).(ServiceSkuResponseOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// SqlConnectionInfoInput is an input type that accepts SqlConnectionInfoArgs and SqlConnectionInfoOutput values.
// You can construct a concrete instance of `SqlConnectionInfoInput` via:
//
//          SqlConnectionInfoArgs{...}
type SqlConnectionInfoInput interface {
	pulumi.Input

	ToSqlConnectionInfoOutput() SqlConnectionInfoOutput
	ToSqlConnectionInfoOutputWithContext(context.Context) SqlConnectionInfoOutput
}

// Information for connecting to SQL database server
type SqlConnectionInfoArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfo)(nil)).Elem()
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutput() SqlConnectionInfoOutput {
	return i.ToSqlConnectionInfoOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutputWithContext(ctx context.Context) SqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput)
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput).ToSqlConnectionInfoPtrOutputWithContext(ctx)
}

// SqlConnectionInfoPtrInput is an input type that accepts SqlConnectionInfoArgs, SqlConnectionInfoPtr and SqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `SqlConnectionInfoPtrInput` via:
//
//          SqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type SqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput
	ToSqlConnectionInfoPtrOutputWithContext(context.Context) SqlConnectionInfoPtrOutput
}

type sqlConnectionInfoPtrType SqlConnectionInfoArgs

func SqlConnectionInfoPtr(v *SqlConnectionInfoArgs) SqlConnectionInfoPtrInput {
	return (*sqlConnectionInfoPtrType)(v)
}

func (*sqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfo)(nil)).Elem()
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfo)(nil)).Elem()
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoOutput() SqlConnectionInfoOutput {
	return o
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoOutputWithContext(ctx context.Context) SqlConnectionInfoOutput {
	return o
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return o.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *SqlConnectionInfo {
		return &v
	}).(SqlConnectionInfoPtrOutput)
}

// Additional connection settings
func (o SqlConnectionInfoOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfo) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfo)(nil)).Elem()
}

func (o SqlConnectionInfoPtrOutput) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return o
}

func (o SqlConnectionInfoPtrOutput) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return o
}

func (o SqlConnectionInfoPtrOutput) Elem() SqlConnectionInfoOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) SqlConnectionInfo { return *v }).(SqlConnectionInfoOutput)
}

// Additional connection settings
func (o SqlConnectionInfoPtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoPtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoPtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoInvokeResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// SqlConnectionInfoInvokeResponseInput is an input type that accepts SqlConnectionInfoInvokeResponseArgs and SqlConnectionInfoInvokeResponseOutput values.
// You can construct a concrete instance of `SqlConnectionInfoInvokeResponseInput` via:
//
//          SqlConnectionInfoInvokeResponseArgs{...}
type SqlConnectionInfoInvokeResponseInput interface {
	pulumi.Input

	ToSqlConnectionInfoInvokeResponseOutput() SqlConnectionInfoInvokeResponseOutput
	ToSqlConnectionInfoInvokeResponseOutputWithContext(context.Context) SqlConnectionInfoInvokeResponseOutput
}

// Information for connecting to SQL database server
type SqlConnectionInfoInvokeResponseArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SqlConnectionInfoInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoInvokeResponse)(nil)).Elem()
}

func (i SqlConnectionInfoInvokeResponseArgs) ToSqlConnectionInfoInvokeResponseOutput() SqlConnectionInfoInvokeResponseOutput {
	return i.ToSqlConnectionInfoInvokeResponseOutputWithContext(context.Background())
}

func (i SqlConnectionInfoInvokeResponseArgs) ToSqlConnectionInfoInvokeResponseOutputWithContext(ctx context.Context) SqlConnectionInfoInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoInvokeResponseOutput)
}

func (i SqlConnectionInfoInvokeResponseArgs) ToSqlConnectionInfoInvokeResponsePtrOutput() SqlConnectionInfoInvokeResponsePtrOutput {
	return i.ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(context.Background())
}

func (i SqlConnectionInfoInvokeResponseArgs) ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoInvokeResponseOutput).ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(ctx)
}

// SqlConnectionInfoInvokeResponsePtrInput is an input type that accepts SqlConnectionInfoInvokeResponseArgs, SqlConnectionInfoInvokeResponsePtr and SqlConnectionInfoInvokeResponsePtrOutput values.
// You can construct a concrete instance of `SqlConnectionInfoInvokeResponsePtrInput` via:
//
//          SqlConnectionInfoInvokeResponseArgs{...}
//
//  or:
//
//          nil
type SqlConnectionInfoInvokeResponsePtrInput interface {
	pulumi.Input

	ToSqlConnectionInfoInvokeResponsePtrOutput() SqlConnectionInfoInvokeResponsePtrOutput
	ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(context.Context) SqlConnectionInfoInvokeResponsePtrOutput
}

type sqlConnectionInfoInvokeResponsePtrType SqlConnectionInfoInvokeResponseArgs

func SqlConnectionInfoInvokeResponsePtr(v *SqlConnectionInfoInvokeResponseArgs) SqlConnectionInfoInvokeResponsePtrInput {
	return (*sqlConnectionInfoInvokeResponsePtrType)(v)
}

func (*sqlConnectionInfoInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoInvokeResponse)(nil)).Elem()
}

func (i *sqlConnectionInfoInvokeResponsePtrType) ToSqlConnectionInfoInvokeResponsePtrOutput() SqlConnectionInfoInvokeResponsePtrOutput {
	return i.ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInfoInvokeResponsePtrType) ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoInvokeResponseOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoInvokeResponse)(nil)).Elem()
}

func (o SqlConnectionInfoInvokeResponseOutput) ToSqlConnectionInfoInvokeResponseOutput() SqlConnectionInfoInvokeResponseOutput {
	return o
}

func (o SqlConnectionInfoInvokeResponseOutput) ToSqlConnectionInfoInvokeResponseOutputWithContext(ctx context.Context) SqlConnectionInfoInvokeResponseOutput {
	return o
}

func (o SqlConnectionInfoInvokeResponseOutput) ToSqlConnectionInfoInvokeResponsePtrOutput() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(context.Background())
}

func (o SqlConnectionInfoInvokeResponseOutput) ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) *SqlConnectionInfoInvokeResponse {
		return &v
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Additional connection settings
func (o SqlConnectionInfoInvokeResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoInvokeResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoInvokeResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoInvokeResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoInvokeResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoInvokeResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoInvokeResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoInvokeResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoInvokeResponse)(nil)).Elem()
}

func (o SqlConnectionInfoInvokeResponsePtrOutput) ToSqlConnectionInfoInvokeResponsePtrOutput() SqlConnectionInfoInvokeResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoInvokeResponsePtrOutput) ToSqlConnectionInfoInvokeResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoInvokeResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoInvokeResponsePtrOutput) Elem() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) SqlConnectionInfoInvokeResponse { return *v }).(SqlConnectionInfoInvokeResponseOutput)
}

// Additional connection settings
func (o SqlConnectionInfoInvokeResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoInvokeResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoInvokeResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoInvokeResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoInvokeResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoInvokeResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoInvokeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoInvokeResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// SqlConnectionInfoResponseInput is an input type that accepts SqlConnectionInfoResponseArgs and SqlConnectionInfoResponseOutput values.
// You can construct a concrete instance of `SqlConnectionInfoResponseInput` via:
//
//          SqlConnectionInfoResponseArgs{...}
type SqlConnectionInfoResponseInput interface {
	pulumi.Input

	ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput
	ToSqlConnectionInfoResponseOutputWithContext(context.Context) SqlConnectionInfoResponseOutput
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponseArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SqlConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoResponse)(nil)).Elem()
}

func (i SqlConnectionInfoResponseArgs) ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput {
	return i.ToSqlConnectionInfoResponseOutputWithContext(context.Background())
}

func (i SqlConnectionInfoResponseArgs) ToSqlConnectionInfoResponseOutputWithContext(ctx context.Context) SqlConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoResponseOutput)
}

func (i SqlConnectionInfoResponseArgs) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return i.ToSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i SqlConnectionInfoResponseArgs) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoResponseOutput).ToSqlConnectionInfoResponsePtrOutputWithContext(ctx)
}

// SqlConnectionInfoResponsePtrInput is an input type that accepts SqlConnectionInfoResponseArgs, SqlConnectionInfoResponsePtr and SqlConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `SqlConnectionInfoResponsePtrInput` via:
//
//          SqlConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type SqlConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput
	ToSqlConnectionInfoResponsePtrOutputWithContext(context.Context) SqlConnectionInfoResponsePtrOutput
}

type sqlConnectionInfoResponsePtrType SqlConnectionInfoResponseArgs

func SqlConnectionInfoResponsePtr(v *SqlConnectionInfoResponseArgs) SqlConnectionInfoResponsePtrInput {
	return (*sqlConnectionInfoResponsePtrType)(v)
}

func (*sqlConnectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoResponse)(nil)).Elem()
}

func (i *sqlConnectionInfoResponsePtrType) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return i.ToSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInfoResponsePtrType) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutputWithContext(ctx context.Context) SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o.ToSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *SqlConnectionInfoResponse {
		return &v
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) Elem() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) SqlConnectionInfoResponse { return *v }).(SqlConnectionInfoResponseOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInput struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMITaskInputInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs and ValidateMigrationInputSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput).ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskInputPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs, ValidateMigrationInputSqlServerSqlMITaskInputPtr and ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputPtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
}

type validateMigrationInputSqlServerSqlMITaskInputPtrType ValidateMigrationInputSqlServerSqlMITaskInputArgs

func ValidateMigrationInputSqlServerSqlMITaskInputPtr(v *ValidateMigrationInputSqlServerSqlMITaskInputArgs) ValidateMigrationInputSqlServerSqlMITaskInputPtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskInputPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) *ValidateMigrationInputSqlServerSqlMITaskInput {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) BackupBlobShare() BlobShareOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) BlobShare { return v.BackupBlobShare }).(BlobShareOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) ValidateMigrationInputSqlServerSqlMITaskInput {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) BackupBlobShare() BlobSharePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *BlobShare {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobSharePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInvokeResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareInvokeResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputInvokeResponse `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInvokeResponse `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs and ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInvokeResponseInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileShareInvokeResponsePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInvokeResponseInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput).ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs, ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtr and ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput
}

type validateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrType ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs

func ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtr(v *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseArgs) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrType) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrType) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) BackupBlobShare() BlobShareInvokeResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) BlobShareInvokeResponse {
		return v.BackupBlobShare
	}).(BlobShareInvokeResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) BackupFileShare() FileShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) *FileShareInvokeResponse {
		return v.BackupFileShare
	}).(FileShareInvokeResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) []MigrateSqlServerSqlMIDatabaseInputInvokeResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) SqlConnectionInfoInvokeResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput) BackupBlobShare() BlobShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) *BlobShareInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareInvokeResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput) BackupFileShare() FileShareInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) *FileShareInvokeResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareInvokeResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) []MigrateSqlServerSqlMIDatabaseInputInvokeResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse) *SqlConnectionInfoInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoInvokeResponsePtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMITaskInputResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs and ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskInputResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponseInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileShareResponsePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput).ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs, ValidateMigrationInputSqlServerSqlMITaskInputResponsePtr and ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput
}

type validateMigrationInputSqlServerSqlMITaskInputResponsePtrType ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs

func ValidateMigrationInputSqlServerSqlMITaskInputResponsePtr(v *ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskInputResponsePtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskInputResponsePtrType) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskInputResponsePtrType) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) BlobShareResponse {
		return v.BackupBlobShare
	}).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors []ReportableExceptionInvokeResponse `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors []ReportableExceptionInvokeResponse `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors []ReportableExceptionInvokeResponse `pulumi:"backupStorageAccountErrors"`
	// Result identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors []ReportableExceptionInvokeResponse `pulumi:"restoreDatabaseNameErrors"`
}

// ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArgs and ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArgs struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors ReportableExceptionInvokeResponseArrayInput `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors ReportableExceptionInvokeResponseArrayInput `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors ReportableExceptionInvokeResponseArrayInput `pulumi:"backupStorageAccountErrors"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Name of database
	Name pulumi.StringInput `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors ReportableExceptionInvokeResponseArrayInput `pulumi:"restoreDatabaseNameErrors"`
}

func (ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput)
}

// ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArray and ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArray{ ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArgs{...} }
type ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput
	ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput
}

type ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArray []ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseInput

func (ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArray) ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArray) ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput {
	return o
}

// Errors associated with the BackupFolder path
func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) BackupFolderErrors() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.BackupFolderErrors
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

// Errors associated with backup share user name and password credentials
func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) BackupShareCredentialsErrors() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.BackupShareCredentialsErrors
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

// Errors associated with the storage account provided.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) BackupStorageAccountErrors() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.BackupStorageAccountErrors
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

// Result identifier
func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with the RestoreDatabaseName
func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput) RestoreDatabaseNameErrors() ReportableExceptionInvokeResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse) []ReportableExceptionInvokeResponse {
		return v.RestoreDatabaseNameErrors
	}).(ReportableExceptionInvokeResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponse struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors []ReportableExceptionResponse `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors []ReportableExceptionResponse `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors []ReportableExceptionResponse `pulumi:"backupStorageAccountErrors"`
	// Result identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors []ReportableExceptionResponse `pulumi:"restoreDatabaseNameErrors"`
}

// ValidateMigrationInputSqlServerSqlMITaskOutputResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs and ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskOutputResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors ReportableExceptionResponseArrayInput `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors ReportableExceptionResponseArrayInput `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors ReportableExceptionResponseArrayInput `pulumi:"backupStorageAccountErrors"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Name of database
	Name pulumi.StringInput `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors ReportableExceptionResponseArrayInput `pulumi:"restoreDatabaseNameErrors"`
}

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput)
}

// ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray and ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray{ ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs{...} }
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput
	ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput
}

type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray []ValidateMigrationInputSqlServerSqlMITaskOutputResponseInput

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

// Errors associated with the BackupFolder path
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupFolderErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupFolderErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with backup share user name and password credentials
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupShareCredentialsErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupShareCredentialsErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with the storage account provided.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupStorageAccountErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupStorageAccountErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with the RestoreDatabaseName
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) RestoreDatabaseNameErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.RestoreDatabaseNameErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskProperties struct {
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs and ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs struct {
	// Task input
	Input ValidateMigrationInputSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return o
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskProperties) *ValidateMigrationInputSqlServerSqlMITaskInput {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorInvokeResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseArgs and ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorInvokeResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput) Errors() ODataErrorInvokeResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponse) []ODataErrorInvokeResponse {
		return v.Errors
	}).(ODataErrorInvokeResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponse) *ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput) Output() ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponse) []ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs and ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Output() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BlobShareOutput{})
	pulumi.RegisterOutputType(BlobSharePtrOutput{})
	pulumi.RegisterOutputType(BlobShareInvokeResponseOutput{})
	pulumi.RegisterOutputType(BlobShareInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(BlobShareResponseOutput{})
	pulumi.RegisterOutputType(BlobShareResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputDatabaseLevelInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputTaskLevelInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DataItemMigrationSummaryResultInvokeResponseOutput{})
	pulumi.RegisterOutputType(DataItemMigrationSummaryResultInvokeResponseMapOutput{})
	pulumi.RegisterOutputType(DataItemMigrationSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(DataItemMigrationSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoInvokeResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoOutput{})
	pulumi.RegisterOutputType(DatabaseInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoInvokeResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseSummaryResultInvokeResponseOutput{})
	pulumi.RegisterOutputType(DatabaseSummaryResultInvokeResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(DatabaseSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseTableInvokeResponseOutput{})
	pulumi.RegisterOutputType(DatabaseTableInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseArrayOutput{})
	pulumi.RegisterOutputType(FileShareOutput{})
	pulumi.RegisterOutputType(FileSharePtrOutput{})
	pulumi.RegisterOutputType(FileShareInvokeResponseOutput{})
	pulumi.RegisterOutputType(FileShareInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(FileShareResponseOutput{})
	pulumi.RegisterOutputType(FileShareResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputInvokeResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputErrorInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputMigrationLevelInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputTableLevelInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputValidationResultInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputDatabaseLevelInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputErrorInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputMigrationLevelInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsPtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsInvokeResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ODataErrorInvokeResponseOutput{})
	pulumi.RegisterOutputType(ODataErrorInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportableExceptionInvokeResponseOutput{})
	pulumi.RegisterOutputType(ReportableExceptionInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceSkuOutput{})
	pulumi.RegisterOutputType(ServiceSkuPtrOutput{})
	pulumi.RegisterOutputType(ServiceSkuInvokeResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoInvokeResponseOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput{})
}
