// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180715preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Azure Active Directory Application
type AzureActiveDirectoryApp struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey string `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId string `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId string `pulumi:"tenantId"`
}

// AzureActiveDirectoryAppInput is an input type that accepts AzureActiveDirectoryAppArgs and AzureActiveDirectoryAppOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryAppInput` via:
//
//          AzureActiveDirectoryAppArgs{...}
type AzureActiveDirectoryAppInput interface {
	pulumi.Input

	ToAzureActiveDirectoryAppOutput() AzureActiveDirectoryAppOutput
	ToAzureActiveDirectoryAppOutputWithContext(context.Context) AzureActiveDirectoryAppOutput
}

// Azure Active Directory Application
type AzureActiveDirectoryAppArgs struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey pulumi.StringInput `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (AzureActiveDirectoryAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryApp)(nil)).Elem()
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppOutput() AzureActiveDirectoryAppOutput {
	return i.ToAzureActiveDirectoryAppOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppOutputWithContext(ctx context.Context) AzureActiveDirectoryAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppOutput)
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return i.ToAzureActiveDirectoryAppPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppOutput).ToAzureActiveDirectoryAppPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryAppPtrInput is an input type that accepts AzureActiveDirectoryAppArgs, AzureActiveDirectoryAppPtr and AzureActiveDirectoryAppPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryAppPtrInput` via:
//
//          AzureActiveDirectoryAppArgs{...}
//
//  or:
//
//          nil
type AzureActiveDirectoryAppPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput
	ToAzureActiveDirectoryAppPtrOutputWithContext(context.Context) AzureActiveDirectoryAppPtrOutput
}

type azureActiveDirectoryAppPtrType AzureActiveDirectoryAppArgs

func AzureActiveDirectoryAppPtr(v *AzureActiveDirectoryAppArgs) AzureActiveDirectoryAppPtrInput {
	return (*azureActiveDirectoryAppPtrType)(v)
}

func (*azureActiveDirectoryAppPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryApp)(nil)).Elem()
}

func (i *azureActiveDirectoryAppPtrType) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return i.ToAzureActiveDirectoryAppPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryAppPtrType) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppPtrOutput)
}

// Azure Active Directory Application
type AzureActiveDirectoryAppOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryApp)(nil)).Elem()
}

func (o AzureActiveDirectoryAppOutput) ToAzureActiveDirectoryAppOutput() AzureActiveDirectoryAppOutput {
	return o
}

func (o AzureActiveDirectoryAppOutput) ToAzureActiveDirectoryAppOutputWithContext(ctx context.Context) AzureActiveDirectoryAppOutput {
	return o
}

func (o AzureActiveDirectoryAppOutput) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return o.ToAzureActiveDirectoryAppPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryAppOutput) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryApp) *AzureActiveDirectoryApp {
		return &v
	}).(AzureActiveDirectoryAppPtrOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppOutput) AppKey() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryApp) string { return v.AppKey }).(pulumi.StringOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryApp) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryApp) string { return v.TenantId }).(pulumi.StringOutput)
}

type AzureActiveDirectoryAppPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryApp)(nil)).Elem()
}

func (o AzureActiveDirectoryAppPtrOutput) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return o
}

func (o AzureActiveDirectoryAppPtrOutput) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return o
}

func (o AzureActiveDirectoryAppPtrOutput) Elem() AzureActiveDirectoryAppOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) AzureActiveDirectoryApp { return *v }).(AzureActiveDirectoryAppOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppPtrOutput) AppKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) *string {
		if v == nil {
			return nil
		}
		return &v.AppKey
	}).(pulumi.StringPtrOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Azure Active Directory Application
type AzureActiveDirectoryAppResponse struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey string `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId string `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId string `pulumi:"tenantId"`
}

// AzureActiveDirectoryAppResponseInput is an input type that accepts AzureActiveDirectoryAppResponseArgs and AzureActiveDirectoryAppResponseOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryAppResponseInput` via:
//
//          AzureActiveDirectoryAppResponseArgs{...}
type AzureActiveDirectoryAppResponseInput interface {
	pulumi.Input

	ToAzureActiveDirectoryAppResponseOutput() AzureActiveDirectoryAppResponseOutput
	ToAzureActiveDirectoryAppResponseOutputWithContext(context.Context) AzureActiveDirectoryAppResponseOutput
}

// Azure Active Directory Application
type AzureActiveDirectoryAppResponseArgs struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey pulumi.StringInput `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (AzureActiveDirectoryAppResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryAppResponse)(nil)).Elem()
}

func (i AzureActiveDirectoryAppResponseArgs) ToAzureActiveDirectoryAppResponseOutput() AzureActiveDirectoryAppResponseOutput {
	return i.ToAzureActiveDirectoryAppResponseOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryAppResponseArgs) ToAzureActiveDirectoryAppResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppResponseOutput)
}

func (i AzureActiveDirectoryAppResponseArgs) ToAzureActiveDirectoryAppResponsePtrOutput() AzureActiveDirectoryAppResponsePtrOutput {
	return i.ToAzureActiveDirectoryAppResponsePtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryAppResponseArgs) ToAzureActiveDirectoryAppResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppResponseOutput).ToAzureActiveDirectoryAppResponsePtrOutputWithContext(ctx)
}

// AzureActiveDirectoryAppResponsePtrInput is an input type that accepts AzureActiveDirectoryAppResponseArgs, AzureActiveDirectoryAppResponsePtr and AzureActiveDirectoryAppResponsePtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryAppResponsePtrInput` via:
//
//          AzureActiveDirectoryAppResponseArgs{...}
//
//  or:
//
//          nil
type AzureActiveDirectoryAppResponsePtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryAppResponsePtrOutput() AzureActiveDirectoryAppResponsePtrOutput
	ToAzureActiveDirectoryAppResponsePtrOutputWithContext(context.Context) AzureActiveDirectoryAppResponsePtrOutput
}

type azureActiveDirectoryAppResponsePtrType AzureActiveDirectoryAppResponseArgs

func AzureActiveDirectoryAppResponsePtr(v *AzureActiveDirectoryAppResponseArgs) AzureActiveDirectoryAppResponsePtrInput {
	return (*azureActiveDirectoryAppResponsePtrType)(v)
}

func (*azureActiveDirectoryAppResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryAppResponse)(nil)).Elem()
}

func (i *azureActiveDirectoryAppResponsePtrType) ToAzureActiveDirectoryAppResponsePtrOutput() AzureActiveDirectoryAppResponsePtrOutput {
	return i.ToAzureActiveDirectoryAppResponsePtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryAppResponsePtrType) ToAzureActiveDirectoryAppResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Azure Active Directory Application
type AzureActiveDirectoryAppResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryAppResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponseOutput() AzureActiveDirectoryAppResponseOutput {
	return o
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponseOutput {
	return o
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponsePtrOutput() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ToAzureActiveDirectoryAppResponsePtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) *AzureActiveDirectoryAppResponse {
		return &v
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponseOutput) AppKey() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) string { return v.AppKey }).(pulumi.StringOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponseOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type AzureActiveDirectoryAppResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryAppResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryAppResponsePtrOutput) ToAzureActiveDirectoryAppResponsePtrOutput() AzureActiveDirectoryAppResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryAppResponsePtrOutput) ToAzureActiveDirectoryAppResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryAppResponsePtrOutput) Elem() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) AzureActiveDirectoryAppResponse { return *v }).(AzureActiveDirectoryAppResponseOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponsePtrOutput) AppKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AppKey
	}).(pulumi.StringPtrOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponsePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Information of the backup file
type BackupFileInfoResponse struct {
	// Sequence number of the backup file in the backup set
	FamilySequenceNumber *int `pulumi:"familySequenceNumber"`
	// Location of the backup file in shared folder
	FileLocation *string `pulumi:"fileLocation"`
	// Status of the backup file during migration
	Status *string `pulumi:"status"`
}

// BackupFileInfoResponseInput is an input type that accepts BackupFileInfoResponseArgs and BackupFileInfoResponseOutput values.
// You can construct a concrete instance of `BackupFileInfoResponseInput` via:
//
//          BackupFileInfoResponseArgs{...}
type BackupFileInfoResponseInput interface {
	pulumi.Input

	ToBackupFileInfoResponseOutput() BackupFileInfoResponseOutput
	ToBackupFileInfoResponseOutputWithContext(context.Context) BackupFileInfoResponseOutput
}

// Information of the backup file
type BackupFileInfoResponseArgs struct {
	// Sequence number of the backup file in the backup set
	FamilySequenceNumber pulumi.IntPtrInput `pulumi:"familySequenceNumber"`
	// Location of the backup file in shared folder
	FileLocation pulumi.StringPtrInput `pulumi:"fileLocation"`
	// Status of the backup file during migration
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (BackupFileInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupFileInfoResponse)(nil)).Elem()
}

func (i BackupFileInfoResponseArgs) ToBackupFileInfoResponseOutput() BackupFileInfoResponseOutput {
	return i.ToBackupFileInfoResponseOutputWithContext(context.Background())
}

func (i BackupFileInfoResponseArgs) ToBackupFileInfoResponseOutputWithContext(ctx context.Context) BackupFileInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupFileInfoResponseOutput)
}

// BackupFileInfoResponseArrayInput is an input type that accepts BackupFileInfoResponseArray and BackupFileInfoResponseArrayOutput values.
// You can construct a concrete instance of `BackupFileInfoResponseArrayInput` via:
//
//          BackupFileInfoResponseArray{ BackupFileInfoResponseArgs{...} }
type BackupFileInfoResponseArrayInput interface {
	pulumi.Input

	ToBackupFileInfoResponseArrayOutput() BackupFileInfoResponseArrayOutput
	ToBackupFileInfoResponseArrayOutputWithContext(context.Context) BackupFileInfoResponseArrayOutput
}

type BackupFileInfoResponseArray []BackupFileInfoResponseInput

func (BackupFileInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupFileInfoResponse)(nil)).Elem()
}

func (i BackupFileInfoResponseArray) ToBackupFileInfoResponseArrayOutput() BackupFileInfoResponseArrayOutput {
	return i.ToBackupFileInfoResponseArrayOutputWithContext(context.Background())
}

func (i BackupFileInfoResponseArray) ToBackupFileInfoResponseArrayOutputWithContext(ctx context.Context) BackupFileInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupFileInfoResponseArrayOutput)
}

// Information of the backup file
type BackupFileInfoResponseOutput struct{ *pulumi.OutputState }

func (BackupFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupFileInfoResponse)(nil)).Elem()
}

func (o BackupFileInfoResponseOutput) ToBackupFileInfoResponseOutput() BackupFileInfoResponseOutput {
	return o
}

func (o BackupFileInfoResponseOutput) ToBackupFileInfoResponseOutputWithContext(ctx context.Context) BackupFileInfoResponseOutput {
	return o
}

// Sequence number of the backup file in the backup set
func (o BackupFileInfoResponseOutput) FamilySequenceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *int { return v.FamilySequenceNumber }).(pulumi.IntPtrOutput)
}

// Location of the backup file in shared folder
func (o BackupFileInfoResponseOutput) FileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *string { return v.FileLocation }).(pulumi.StringPtrOutput)
}

// Status of the backup file during migration
func (o BackupFileInfoResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type BackupFileInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (BackupFileInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupFileInfoResponse)(nil)).Elem()
}

func (o BackupFileInfoResponseArrayOutput) ToBackupFileInfoResponseArrayOutput() BackupFileInfoResponseArrayOutput {
	return o
}

func (o BackupFileInfoResponseArrayOutput) ToBackupFileInfoResponseArrayOutputWithContext(ctx context.Context) BackupFileInfoResponseArrayOutput {
	return o
}

func (o BackupFileInfoResponseArrayOutput) Index(i pulumi.IntInput) BackupFileInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupFileInfoResponse {
		return vs[0].([]BackupFileInfoResponse)[vs[1].(int)]
	}).(BackupFileInfoResponseOutput)
}

// Information of backup set
type BackupSetInfoResponse struct {
	// Date and time that the backup operation finished
	BackupFinishedDate *string `pulumi:"backupFinishedDate"`
	// Id for the set of backup files
	BackupSetId *string `pulumi:"backupSetId"`
	// Date and time that the backup operation began
	BackupStartDate *string `pulumi:"backupStartDate"`
	// Enum of the different backup types
	BackupType *string `pulumi:"backupType"`
	// Name of the database to which the backup set belongs
	DatabaseName *string `pulumi:"databaseName"`
	// First log sequence number of the backup file
	FirstLsn *string `pulumi:"firstLsn"`
	// Whether the backup set is restored or not
	IsBackupRestored *bool `pulumi:"isBackupRestored"`
	// Last log sequence number of the backup file
	LastLsn *string `pulumi:"lastLsn"`
	// Last modified time of the backup file in share location
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// List of files in the backup set
	ListOfBackupFiles []BackupFileInfoResponse `pulumi:"listOfBackupFiles"`
}

// BackupSetInfoResponseInput is an input type that accepts BackupSetInfoResponseArgs and BackupSetInfoResponseOutput values.
// You can construct a concrete instance of `BackupSetInfoResponseInput` via:
//
//          BackupSetInfoResponseArgs{...}
type BackupSetInfoResponseInput interface {
	pulumi.Input

	ToBackupSetInfoResponseOutput() BackupSetInfoResponseOutput
	ToBackupSetInfoResponseOutputWithContext(context.Context) BackupSetInfoResponseOutput
}

// Information of backup set
type BackupSetInfoResponseArgs struct {
	// Date and time that the backup operation finished
	BackupFinishedDate pulumi.StringPtrInput `pulumi:"backupFinishedDate"`
	// Id for the set of backup files
	BackupSetId pulumi.StringPtrInput `pulumi:"backupSetId"`
	// Date and time that the backup operation began
	BackupStartDate pulumi.StringPtrInput `pulumi:"backupStartDate"`
	// Enum of the different backup types
	BackupType pulumi.StringPtrInput `pulumi:"backupType"`
	// Name of the database to which the backup set belongs
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// First log sequence number of the backup file
	FirstLsn pulumi.StringPtrInput `pulumi:"firstLsn"`
	// Whether the backup set is restored or not
	IsBackupRestored pulumi.BoolPtrInput `pulumi:"isBackupRestored"`
	// Last log sequence number of the backup file
	LastLsn pulumi.StringPtrInput `pulumi:"lastLsn"`
	// Last modified time of the backup file in share location
	LastModifiedTime pulumi.StringPtrInput `pulumi:"lastModifiedTime"`
	// List of files in the backup set
	ListOfBackupFiles BackupFileInfoResponseArrayInput `pulumi:"listOfBackupFiles"`
}

func (BackupSetInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSetInfoResponse)(nil)).Elem()
}

func (i BackupSetInfoResponseArgs) ToBackupSetInfoResponseOutput() BackupSetInfoResponseOutput {
	return i.ToBackupSetInfoResponseOutputWithContext(context.Background())
}

func (i BackupSetInfoResponseArgs) ToBackupSetInfoResponseOutputWithContext(ctx context.Context) BackupSetInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSetInfoResponseOutput)
}

// BackupSetInfoResponseArrayInput is an input type that accepts BackupSetInfoResponseArray and BackupSetInfoResponseArrayOutput values.
// You can construct a concrete instance of `BackupSetInfoResponseArrayInput` via:
//
//          BackupSetInfoResponseArray{ BackupSetInfoResponseArgs{...} }
type BackupSetInfoResponseArrayInput interface {
	pulumi.Input

	ToBackupSetInfoResponseArrayOutput() BackupSetInfoResponseArrayOutput
	ToBackupSetInfoResponseArrayOutputWithContext(context.Context) BackupSetInfoResponseArrayOutput
}

type BackupSetInfoResponseArray []BackupSetInfoResponseInput

func (BackupSetInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSetInfoResponse)(nil)).Elem()
}

func (i BackupSetInfoResponseArray) ToBackupSetInfoResponseArrayOutput() BackupSetInfoResponseArrayOutput {
	return i.ToBackupSetInfoResponseArrayOutputWithContext(context.Background())
}

func (i BackupSetInfoResponseArray) ToBackupSetInfoResponseArrayOutputWithContext(ctx context.Context) BackupSetInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSetInfoResponseArrayOutput)
}

// Information of backup set
type BackupSetInfoResponseOutput struct{ *pulumi.OutputState }

func (BackupSetInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSetInfoResponse)(nil)).Elem()
}

func (o BackupSetInfoResponseOutput) ToBackupSetInfoResponseOutput() BackupSetInfoResponseOutput {
	return o
}

func (o BackupSetInfoResponseOutput) ToBackupSetInfoResponseOutputWithContext(ctx context.Context) BackupSetInfoResponseOutput {
	return o
}

// Date and time that the backup operation finished
func (o BackupSetInfoResponseOutput) BackupFinishedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupFinishedDate }).(pulumi.StringPtrOutput)
}

// Id for the set of backup files
func (o BackupSetInfoResponseOutput) BackupSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupSetId }).(pulumi.StringPtrOutput)
}

// Date and time that the backup operation began
func (o BackupSetInfoResponseOutput) BackupStartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupStartDate }).(pulumi.StringPtrOutput)
}

// Enum of the different backup types
func (o BackupSetInfoResponseOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupType }).(pulumi.StringPtrOutput)
}

// Name of the database to which the backup set belongs
func (o BackupSetInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// First log sequence number of the backup file
func (o BackupSetInfoResponseOutput) FirstLsn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.FirstLsn }).(pulumi.StringPtrOutput)
}

// Whether the backup set is restored or not
func (o BackupSetInfoResponseOutput) IsBackupRestored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *bool { return v.IsBackupRestored }).(pulumi.BoolPtrOutput)
}

// Last log sequence number of the backup file
func (o BackupSetInfoResponseOutput) LastLsn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.LastLsn }).(pulumi.StringPtrOutput)
}

// Last modified time of the backup file in share location
func (o BackupSetInfoResponseOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.LastModifiedTime }).(pulumi.StringPtrOutput)
}

// List of files in the backup set
func (o BackupSetInfoResponseOutput) ListOfBackupFiles() BackupFileInfoResponseArrayOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) []BackupFileInfoResponse { return v.ListOfBackupFiles }).(BackupFileInfoResponseArrayOutput)
}

type BackupSetInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (BackupSetInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSetInfoResponse)(nil)).Elem()
}

func (o BackupSetInfoResponseArrayOutput) ToBackupSetInfoResponseArrayOutput() BackupSetInfoResponseArrayOutput {
	return o
}

func (o BackupSetInfoResponseArrayOutput) ToBackupSetInfoResponseArrayOutputWithContext(ctx context.Context) BackupSetInfoResponseArrayOutput {
	return o
}

func (o BackupSetInfoResponseArrayOutput) Index(i pulumi.IntInput) BackupSetInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupSetInfoResponse {
		return vs[0].([]BackupSetInfoResponse)[vs[1].(int)]
	}).(BackupSetInfoResponseOutput)
}

// Blob container storage information.
type BlobShare struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// BlobShareInput is an input type that accepts BlobShareArgs and BlobShareOutput values.
// You can construct a concrete instance of `BlobShareInput` via:
//
//          BlobShareArgs{...}
type BlobShareInput interface {
	pulumi.Input

	ToBlobShareOutput() BlobShareOutput
	ToBlobShareOutputWithContext(context.Context) BlobShareOutput
}

// Blob container storage information.
type BlobShareArgs struct {
	// SAS URI of Azure Storage Account Container.
	SasUri pulumi.StringInput `pulumi:"sasUri"`
}

func (BlobShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShare)(nil)).Elem()
}

func (i BlobShareArgs) ToBlobShareOutput() BlobShareOutput {
	return i.ToBlobShareOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobShareOutputWithContext(ctx context.Context) BlobShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput)
}

func (i BlobShareArgs) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput).ToBlobSharePtrOutputWithContext(ctx)
}

// BlobSharePtrInput is an input type that accepts BlobShareArgs, BlobSharePtr and BlobSharePtrOutput values.
// You can construct a concrete instance of `BlobSharePtrInput` via:
//
//          BlobShareArgs{...}
//
//  or:
//
//          nil
type BlobSharePtrInput interface {
	pulumi.Input

	ToBlobSharePtrOutput() BlobSharePtrOutput
	ToBlobSharePtrOutputWithContext(context.Context) BlobSharePtrOutput
}

type blobSharePtrType BlobShareArgs

func BlobSharePtr(v *BlobShareArgs) BlobSharePtrInput {
	return (*blobSharePtrType)(v)
}

func (*blobSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShare)(nil)).Elem()
}

func (i *blobSharePtrType) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i *blobSharePtrType) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobSharePtrOutput)
}

// Blob container storage information.
type BlobShareOutput struct{ *pulumi.OutputState }

func (BlobShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShare)(nil)).Elem()
}

func (o BlobShareOutput) ToBlobShareOutput() BlobShareOutput {
	return o
}

func (o BlobShareOutput) ToBlobShareOutputWithContext(ctx context.Context) BlobShareOutput {
	return o
}

func (o BlobShareOutput) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return o.ToBlobSharePtrOutputWithContext(context.Background())
}

func (o BlobShareOutput) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return o.ApplyT(func(v BlobShare) *BlobShare {
		return &v
	}).(BlobSharePtrOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v BlobShare) string { return v.SasUri }).(pulumi.StringOutput)
}

type BlobSharePtrOutput struct{ *pulumi.OutputState }

func (BlobSharePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShare)(nil)).Elem()
}

func (o BlobSharePtrOutput) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return o
}

func (o BlobSharePtrOutput) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return o
}

func (o BlobSharePtrOutput) Elem() BlobShareOutput {
	return o.ApplyT(func(v *BlobShare) BlobShare { return *v }).(BlobShareOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobSharePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShare) *string {
		if v == nil {
			return nil
		}
		return &v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Blob container storage information.
type BlobShareResponse struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// BlobShareResponseInput is an input type that accepts BlobShareResponseArgs and BlobShareResponseOutput values.
// You can construct a concrete instance of `BlobShareResponseInput` via:
//
//          BlobShareResponseArgs{...}
type BlobShareResponseInput interface {
	pulumi.Input

	ToBlobShareResponseOutput() BlobShareResponseOutput
	ToBlobShareResponseOutputWithContext(context.Context) BlobShareResponseOutput
}

// Blob container storage information.
type BlobShareResponseArgs struct {
	// SAS URI of Azure Storage Account Container.
	SasUri pulumi.StringInput `pulumi:"sasUri"`
}

func (BlobShareResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareResponse)(nil)).Elem()
}

func (i BlobShareResponseArgs) ToBlobShareResponseOutput() BlobShareResponseOutput {
	return i.ToBlobShareResponseOutputWithContext(context.Background())
}

func (i BlobShareResponseArgs) ToBlobShareResponseOutputWithContext(ctx context.Context) BlobShareResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareResponseOutput)
}

func (i BlobShareResponseArgs) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return i.ToBlobShareResponsePtrOutputWithContext(context.Background())
}

func (i BlobShareResponseArgs) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareResponseOutput).ToBlobShareResponsePtrOutputWithContext(ctx)
}

// BlobShareResponsePtrInput is an input type that accepts BlobShareResponseArgs, BlobShareResponsePtr and BlobShareResponsePtrOutput values.
// You can construct a concrete instance of `BlobShareResponsePtrInput` via:
//
//          BlobShareResponseArgs{...}
//
//  or:
//
//          nil
type BlobShareResponsePtrInput interface {
	pulumi.Input

	ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput
	ToBlobShareResponsePtrOutputWithContext(context.Context) BlobShareResponsePtrOutput
}

type blobShareResponsePtrType BlobShareResponseArgs

func BlobShareResponsePtr(v *BlobShareResponseArgs) BlobShareResponsePtrInput {
	return (*blobShareResponsePtrType)(v)
}

func (*blobShareResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareResponse)(nil)).Elem()
}

func (i *blobShareResponsePtrType) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return i.ToBlobShareResponsePtrOutputWithContext(context.Background())
}

func (i *blobShareResponsePtrType) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareResponsePtrOutput)
}

// Blob container storage information.
type BlobShareResponseOutput struct{ *pulumi.OutputState }

func (BlobShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutput() BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutputWithContext(ctx context.Context) BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o.ToBlobShareResponsePtrOutputWithContext(context.Background())
}

func (o BlobShareResponseOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o.ApplyT(func(v BlobShareResponse) *BlobShareResponse {
		return &v
	}).(BlobShareResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponseOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v BlobShareResponse) string { return v.SasUri }).(pulumi.StringOutput)
}

type BlobShareResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) Elem() BlobShareResponseOutput {
	return o.ApplyT(func(v *BlobShareResponse) BlobShareResponse { return *v }).(BlobShareResponseOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponsePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes a connection to a MongoDB data source
	Input *MongoDbConnectionInfo `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToMongoDbTaskPropertiesInput is an input type that accepts ConnectToMongoDbTaskPropertiesArgs and ConnectToMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToMongoDbTaskPropertiesInput` via:
//
//          ConnectToMongoDbTaskPropertiesArgs{...}
type ConnectToMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToMongoDbTaskPropertiesOutput() ConnectToMongoDbTaskPropertiesOutput
	ToConnectToMongoDbTaskPropertiesOutputWithContext(context.Context) ConnectToMongoDbTaskPropertiesOutput
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes a connection to a MongoDB data source
	Input MongoDbConnectionInfoPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskProperties)(nil)).Elem()
}

func (i ConnectToMongoDbTaskPropertiesArgs) ToConnectToMongoDbTaskPropertiesOutput() ConnectToMongoDbTaskPropertiesOutput {
	return i.ToConnectToMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToMongoDbTaskPropertiesArgs) ToConnectToMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToMongoDbTaskPropertiesOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToMongoDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskProperties)(nil)).Elem()
}

func (o ConnectToMongoDbTaskPropertiesOutput) ToConnectToMongoDbTaskPropertiesOutput() ConnectToMongoDbTaskPropertiesOutput {
	return o
}

func (o ConnectToMongoDbTaskPropertiesOutput) ToConnectToMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToMongoDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Describes a connection to a MongoDB data source
func (o ConnectToMongoDbTaskPropertiesOutput) Input() MongoDbConnectionInfoPtrOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskProperties) *MongoDbConnectionInfo { return v.Input }).(MongoDbConnectionInfoPtrOutput)
}

// Task type.
func (o ConnectToMongoDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes a connection to a MongoDB data source
	Input *MongoDbConnectionInfoResponse `pulumi:"input"`
	// An array containing a single MongoDbClusterInfo object
	Output []MongoDbClusterInfoResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToMongoDbTaskPropertiesResponseInput is an input type that accepts ConnectToMongoDbTaskPropertiesResponseArgs and ConnectToMongoDbTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToMongoDbTaskPropertiesResponseInput` via:
//
//          ConnectToMongoDbTaskPropertiesResponseArgs{...}
type ConnectToMongoDbTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToMongoDbTaskPropertiesResponseOutput() ConnectToMongoDbTaskPropertiesResponseOutput
	ToConnectToMongoDbTaskPropertiesResponseOutputWithContext(context.Context) ConnectToMongoDbTaskPropertiesResponseOutput
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Describes a connection to a MongoDB data source
	Input MongoDbConnectionInfoResponsePtrInput `pulumi:"input"`
	// An array containing a single MongoDbClusterInfo object
	Output MongoDbClusterInfoResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToMongoDbTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToMongoDbTaskPropertiesResponseArgs) ToConnectToMongoDbTaskPropertiesResponseOutput() ConnectToMongoDbTaskPropertiesResponseOutput {
	return i.ToConnectToMongoDbTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToMongoDbTaskPropertiesResponseArgs) ToConnectToMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToMongoDbTaskPropertiesResponseOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToMongoDbTaskPropertiesResponseOutput) ToConnectToMongoDbTaskPropertiesResponseOutput() ConnectToMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToMongoDbTaskPropertiesResponseOutput) ToConnectToMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes a connection to a MongoDB data source
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Input() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) *MongoDbConnectionInfoResponse { return v.Input }).(MongoDbConnectionInfoResponsePtrOutput)
}

// An array containing a single MongoDbClusterInfo object
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Output() MongoDbClusterInfoResponseArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []MongoDbClusterInfoResponse { return v.Output }).(MongoDbClusterInfoResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInput struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourceOracleSyncTaskInputInput is an input type that accepts ConnectToSourceOracleSyncTaskInputArgs and ConnectToSourceOracleSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskInputInput` via:
//
//          ConnectToSourceOracleSyncTaskInputArgs{...}
type ConnectToSourceOracleSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskInputOutput() ConnectToSourceOracleSyncTaskInputOutput
	ToConnectToSourceOracleSyncTaskInputOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskInputOutput
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputArgs struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfoInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourceOracleSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputOutput() ConnectToSourceOracleSyncTaskInputOutput {
	return i.ToConnectToSourceOracleSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputOutput)
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return i.ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputOutput).ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceOracleSyncTaskInputPtrInput is an input type that accepts ConnectToSourceOracleSyncTaskInputArgs, ConnectToSourceOracleSyncTaskInputPtr and ConnectToSourceOracleSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskInputPtrInput` via:
//
//          ConnectToSourceOracleSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceOracleSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput
	ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput
}

type connectToSourceOracleSyncTaskInputPtrType ConnectToSourceOracleSyncTaskInputArgs

func ConnectToSourceOracleSyncTaskInputPtr(v *ConnectToSourceOracleSyncTaskInputArgs) ConnectToSourceOracleSyncTaskInputPtrInput {
	return (*connectToSourceOracleSyncTaskInputPtrType)(v)
}

func (*connectToSourceOracleSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (i *connectToSourceOracleSyncTaskInputPtrType) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return i.ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceOracleSyncTaskInputPtrType) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputPtrOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputOutput) ToConnectToSourceOracleSyncTaskInputOutput() ConnectToSourceOracleSyncTaskInputOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputOutput) ToConnectToSourceOracleSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputOutput) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o.ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceOracleSyncTaskInputOutput) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskInput) *ConnectToSourceOracleSyncTaskInput {
		return &v
	}).(ConnectToSourceOracleSyncTaskInputPtrOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputOutput) SourceConnectionInfo() OracleConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskInput) OracleConnectionInfo { return v.SourceConnectionInfo }).(OracleConnectionInfoOutput)
}

type ConnectToSourceOracleSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputPtrOutput) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputPtrOutput) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputPtrOutput) Elem() ConnectToSourceOracleSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInput) ConnectToSourceOracleSyncTaskInput { return *v }).(ConnectToSourceOracleSyncTaskInputOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputPtrOutput) SourceConnectionInfo() OracleConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInput) *OracleConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoPtrOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputResponse struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourceOracleSyncTaskInputResponseInput is an input type that accepts ConnectToSourceOracleSyncTaskInputResponseArgs and ConnectToSourceOracleSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskInputResponseInput` via:
//
//          ConnectToSourceOracleSyncTaskInputResponseArgs{...}
type ConnectToSourceOracleSyncTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskInputResponseOutput() ConnectToSourceOracleSyncTaskInputResponseOutput
	ToConnectToSourceOracleSyncTaskInputResponseOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskInputResponseOutput
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputResponseArgs struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourceOracleSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInputResponse)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskInputResponseArgs) ToConnectToSourceOracleSyncTaskInputResponseOutput() ConnectToSourceOracleSyncTaskInputResponseOutput {
	return i.ToConnectToSourceOracleSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskInputResponseArgs) ToConnectToSourceOracleSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputResponseOutput)
}

func (i ConnectToSourceOracleSyncTaskInputResponseArgs) ToConnectToSourceOracleSyncTaskInputResponsePtrOutput() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return i.ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskInputResponseArgs) ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputResponseOutput).ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToSourceOracleSyncTaskInputResponsePtrInput is an input type that accepts ConnectToSourceOracleSyncTaskInputResponseArgs, ConnectToSourceOracleSyncTaskInputResponsePtr and ConnectToSourceOracleSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskInputResponsePtrInput` via:
//
//          ConnectToSourceOracleSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceOracleSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskInputResponsePtrOutput() ConnectToSourceOracleSyncTaskInputResponsePtrOutput
	ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskInputResponsePtrOutput
}

type connectToSourceOracleSyncTaskInputResponsePtrType ConnectToSourceOracleSyncTaskInputResponseArgs

func ConnectToSourceOracleSyncTaskInputResponsePtr(v *ConnectToSourceOracleSyncTaskInputResponseArgs) ConnectToSourceOracleSyncTaskInputResponsePtrInput {
	return (*connectToSourceOracleSyncTaskInputResponsePtrType)(v)
}

func (*connectToSourceOracleSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInputResponse)(nil)).Elem()
}

func (i *connectToSourceOracleSyncTaskInputResponsePtrType) ToConnectToSourceOracleSyncTaskInputResponsePtrOutput() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return i.ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToSourceOracleSyncTaskInputResponsePtrType) ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputResponsePtrOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponseOutput() ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutput() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o.ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskInputResponse) *ConnectToSourceOracleSyncTaskInputResponse {
		return &v
	}).(ConnectToSourceOracleSyncTaskInputResponsePtrOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputResponseOutput) SourceConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskInputResponse) OracleConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(OracleConnectionInfoResponseOutput)
}

type ConnectToSourceOracleSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutput() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) Elem() ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInputResponse) ConnectToSourceOracleSyncTaskInputResponse {
		return *v
	}).(ConnectToSourceOracleSyncTaskInputResponseOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) SourceConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// Output for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskOutputResponse struct {
	// List of schemas on source server
	Databases []string `pulumi:"databases"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToSourceOracleSyncTaskOutputResponseInput is an input type that accepts ConnectToSourceOracleSyncTaskOutputResponseArgs and ConnectToSourceOracleSyncTaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskOutputResponseInput` via:
//
//          ConnectToSourceOracleSyncTaskOutputResponseArgs{...}
type ConnectToSourceOracleSyncTaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskOutputResponseOutput() ConnectToSourceOracleSyncTaskOutputResponseOutput
	ToConnectToSourceOracleSyncTaskOutputResponseOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskOutputResponseOutput
}

// Output for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskOutputResponseArgs struct {
	// List of schemas on source server
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToSourceOracleSyncTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskOutputResponseArgs) ToConnectToSourceOracleSyncTaskOutputResponseOutput() ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return i.ToConnectToSourceOracleSyncTaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskOutputResponseArgs) ToConnectToSourceOracleSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskOutputResponseOutput)
}

// ConnectToSourceOracleSyncTaskOutputResponseArrayInput is an input type that accepts ConnectToSourceOracleSyncTaskOutputResponseArray and ConnectToSourceOracleSyncTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskOutputResponseArrayInput` via:
//
//          ConnectToSourceOracleSyncTaskOutputResponseArray{ ConnectToSourceOracleSyncTaskOutputResponseArgs{...} }
type ConnectToSourceOracleSyncTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskOutputResponseArrayOutput() ConnectToSourceOracleSyncTaskOutputResponseArrayOutput
	ToConnectToSourceOracleSyncTaskOutputResponseArrayOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskOutputResponseArrayOutput
}

type ConnectToSourceOracleSyncTaskOutputResponseArray []ConnectToSourceOracleSyncTaskOutputResponseInput

func (ConnectToSourceOracleSyncTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourceOracleSyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskOutputResponseArray) ToConnectToSourceOracleSyncTaskOutputResponseArrayOutput() ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return i.ToConnectToSourceOracleSyncTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskOutputResponseArray) ToConnectToSourceOracleSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskOutputResponseArrayOutput)
}

// Output for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ToConnectToSourceOracleSyncTaskOutputResponseOutput() ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ToConnectToSourceOracleSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return o
}

// List of schemas on source server
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Source server brand version
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the source server
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToSourceOracleSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourceOracleSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ToConnectToSourceOracleSyncTaskOutputResponseArrayOutput() ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ToConnectToSourceOracleSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToSourceOracleSyncTaskOutputResponse {
		return vs[0].([]ConnectToSourceOracleSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToSourceOracleSyncTaskOutputResponseOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceOracleSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceOracleSyncTaskPropertiesInput is an input type that accepts ConnectToSourceOracleSyncTaskPropertiesArgs and ConnectToSourceOracleSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskPropertiesInput` via:
//
//          ConnectToSourceOracleSyncTaskPropertiesArgs{...}
type ConnectToSourceOracleSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskPropertiesOutput() ConnectToSourceOracleSyncTaskPropertiesOutput
	ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskPropertiesOutput
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceOracleSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceOracleSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskPropertiesArgs) ToConnectToSourceOracleSyncTaskPropertiesOutput() ConnectToSourceOracleSyncTaskPropertiesOutput {
	return i.ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskPropertiesArgs) ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskPropertiesOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskPropertiesOutput) ToConnectToSourceOracleSyncTaskPropertiesOutput() ConnectToSourceOracleSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskPropertiesOutput) ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceOracleSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceOracleSyncTaskPropertiesOutput) Input() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskProperties) *ConnectToSourceOracleSyncTaskInput { return v.Input }).(ConnectToSourceOracleSyncTaskInputPtrOutput)
}

// Task type.
func (o ConnectToSourceOracleSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceOracleSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourceOracleSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceOracleSyncTaskPropertiesResponseInput is an input type that accepts ConnectToSourceOracleSyncTaskPropertiesResponseArgs and ConnectToSourceOracleSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskPropertiesResponseInput` via:
//
//          ConnectToSourceOracleSyncTaskPropertiesResponseArgs{...}
type ConnectToSourceOracleSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskPropertiesResponseOutput() ConnectToSourceOracleSyncTaskPropertiesResponseOutput
	ToConnectToSourceOracleSyncTaskPropertiesResponseOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskPropertiesResponseOutput
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToSourceOracleSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToSourceOracleSyncTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceOracleSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskPropertiesResponseArgs) ToConnectToSourceOracleSyncTaskPropertiesResponseOutput() ConnectToSourceOracleSyncTaskPropertiesResponseOutput {
	return i.ToConnectToSourceOracleSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskPropertiesResponseArgs) ToConnectToSourceOracleSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskPropertiesResponseOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ToConnectToSourceOracleSyncTaskPropertiesResponseOutput() ConnectToSourceOracleSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ToConnectToSourceOracleSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Input() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) *ConnectToSourceOracleSyncTaskInputResponse {
		return v.Input
	}).(ConnectToSourceOracleSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Output() ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []ConnectToSourceOracleSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToSourceOracleSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInput struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourcePostgreSqlSyncTaskInputInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskInputArgs and ConnectToSourcePostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskInputInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskInputArgs{...}
type ConnectToSourcePostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskInputOutput() ConnectToSourcePostgreSqlSyncTaskInputOutput
	ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputArgs struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourcePostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputOutput() ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputOutput)
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputOutput).ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourcePostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskInputArgs, ConnectToSourcePostgreSqlSyncTaskInputPtr and ConnectToSourcePostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskInputPtrInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToSourcePostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput
	ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput
}

type connectToSourcePostgreSqlSyncTaskInputPtrType ConnectToSourcePostgreSqlSyncTaskInputArgs

func ConnectToSourcePostgreSqlSyncTaskInputPtr(v *ConnectToSourcePostgreSqlSyncTaskInputArgs) ConnectToSourcePostgreSqlSyncTaskInputPtrInput {
	return (*connectToSourcePostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToSourcePostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToSourcePostgreSqlSyncTaskInputPtrType) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourcePostgreSqlSyncTaskInputPtrType) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) ToConnectToSourcePostgreSqlSyncTaskInputOutput() ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o.ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskInput) *ConnectToSourcePostgreSqlSyncTaskInput {
		return &v
	}).(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) SourceConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskInput) PostgreSqlConnectionInfo { return v.SourceConnectionInfo }).(PostgreSqlConnectionInfoOutput)
}

type ConnectToSourcePostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) Elem() ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInput) ConnectToSourcePostgreSqlSyncTaskInput { return *v }).(ConnectToSourcePostgreSqlSyncTaskInputOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputResponse struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourcePostgreSqlSyncTaskInputResponseInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskInputResponseArgs and ConnectToSourcePostgreSqlSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskInputResponseInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskInputResponseArgs{...}
type ConnectToSourcePostgreSqlSyncTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskInputResponseOutput() ConnectToSourcePostgreSqlSyncTaskInputResponseOutput
	ToConnectToSourcePostgreSqlSyncTaskInputResponseOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponseOutput
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputResponseArgs struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourcePostgreSqlSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskInputResponseArgs) ToConnectToSourcePostgreSqlSyncTaskInputResponseOutput() ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskInputResponseArgs) ToConnectToSourcePostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputResponseOutput)
}

func (i ConnectToSourcePostgreSqlSyncTaskInputResponseArgs) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskInputResponseArgs) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputResponseOutput).ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToSourcePostgreSqlSyncTaskInputResponsePtrInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskInputResponseArgs, ConnectToSourcePostgreSqlSyncTaskInputResponsePtr and ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskInputResponsePtrInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToSourcePostgreSqlSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput
	ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput
}

type connectToSourcePostgreSqlSyncTaskInputResponsePtrType ConnectToSourcePostgreSqlSyncTaskInputResponseArgs

func ConnectToSourcePostgreSqlSyncTaskInputResponsePtr(v *ConnectToSourcePostgreSqlSyncTaskInputResponseArgs) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrInput {
	return (*connectToSourcePostgreSqlSyncTaskInputResponsePtrType)(v)
}

func (*connectToSourcePostgreSqlSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i *connectToSourcePostgreSqlSyncTaskInputResponsePtrType) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToSourcePostgreSqlSyncTaskInputResponsePtrType) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponseOutput() ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskInputResponse) *ConnectToSourcePostgreSqlSyncTaskInputResponse {
		return &v
	}).(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInputResponse) ConnectToSourcePostgreSqlSyncTaskInputResponse {
		return *v
	}).(ConnectToSourcePostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskOutputResponse struct {
	// List of databases on source server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToSourcePostgreSqlSyncTaskOutputResponseInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskOutputResponseArgs and ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskOutputResponseInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskOutputResponseArgs{...}
type ConnectToSourcePostgreSqlSyncTaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput
	ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput
}

// Output for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskOutputResponseArgs struct {
	// List of databases on source server
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToSourcePostgreSqlSyncTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskOutputResponseArgs) ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskOutputResponseArgs) ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput)
}

// ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskOutputResponseArray and ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskOutputResponseArray{ ConnectToSourcePostgreSqlSyncTaskOutputResponseArgs{...} }
type ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput
	ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput
}

type ConnectToSourcePostgreSqlSyncTaskOutputResponseArray []ConnectToSourcePostgreSqlSyncTaskOutputResponseInput

func (ConnectToSourcePostgreSqlSyncTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourcePostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskOutputResponseArray) ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskOutputResponseArray) ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// List of databases on source server
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the source server
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourcePostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToSourcePostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToSourcePostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourcePostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourcePostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskPropertiesArgs and ConnectToSourcePostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskPropertiesInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToSourcePostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskPropertiesOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput
	ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourcePostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) Input() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskProperties) *ConnectToSourcePostgreSqlSyncTaskInput {
		return v.Input
	}).(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourcePostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourcePostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourcePostgreSqlSyncTaskPropertiesResponseInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskPropertiesResponseArgs and ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskPropertiesResponseInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskPropertiesResponseArgs{...}
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput
	ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToSourcePostgreSqlSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourcePostgreSqlSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesResponseArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesResponseArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) *ConnectToSourcePostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []ConnectToSourcePostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerSyncTaskPropertiesInput is an input type that accepts ConnectToSourceSqlServerSyncTaskPropertiesArgs and ConnectToSourceSqlServerSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerSyncTaskPropertiesInput` via:
//
//          ConnectToSourceSqlServerSyncTaskPropertiesArgs{...}
type ConnectToSourceSqlServerSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerSyncTaskPropertiesOutput() ConnectToSourceSqlServerSyncTaskPropertiesOutput
	ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourceSqlServerSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesArgs) ToConnectToSourceSqlServerSyncTaskPropertiesOutput() ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return i.ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesArgs) ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) ToConnectToSourceSqlServerSyncTaskPropertiesOutput() ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) Input() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskProperties) *ConnectToSourceSqlServerTaskInput { return v.Input }).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Task type.
func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerSyncTaskPropertiesResponseInput is an input type that accepts ConnectToSourceSqlServerSyncTaskPropertiesResponseArgs and ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerSyncTaskPropertiesResponseInput` via:
//
//          ConnectToSourceSqlServerSyncTaskPropertiesResponseArgs{...}
type ConnectToSourceSqlServerSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutput() ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput
	ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutputWithContext(context.Context) ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesResponseArgs) ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutput() ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput {
	return i.ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesResponseArgs) ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutput() ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Input() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInput struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases *bool `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo *bool `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// ConnectToSourceSqlServerTaskInputInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs and ConnectToSourceSqlServerTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputInput` via:
//
//          ConnectToSourceSqlServerTaskInputArgs{...}
type ConnectToSourceSqlServerTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput
	ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputOutput
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases pulumi.BoolPtrInput `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo pulumi.BoolPtrInput `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly pulumi.BoolPtrInput `pulumi:"validateSsisCatalogOnly"`
}

func (ConnectToSourceSqlServerTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput {
	return i.ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput)
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput).ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskInputPtrInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs, ConnectToSourceSqlServerTaskInputPtr and ConnectToSourceSqlServerTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputPtrInput` via:
//
//          ConnectToSourceSqlServerTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceSqlServerTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput
	ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputPtrOutput
}

type connectToSourceSqlServerTaskInputPtrType ConnectToSourceSqlServerTaskInputArgs

func ConnectToSourceSqlServerTaskInputPtr(v *ConnectToSourceSqlServerTaskInputArgs) ConnectToSourceSqlServerTaskInputPtrInput {
	return (*connectToSourceSqlServerTaskInputPtrType)(v)
}

func (*connectToSourceSqlServerTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *ConnectToSourceSqlServerTaskInput {
		return &v
	}).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.CollectDatabases }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.CollectTdeCertificateInfo }).(pulumi.BoolPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToSourceSqlServerTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) Elem() ConnectToSourceSqlServerTaskInputOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) ConnectToSourceSqlServerTaskInput { return *v }).(ConnectToSourceSqlServerTaskInputOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectDatabases
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectTdeCertificateInfo
	}).(pulumi.BoolPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases *bool `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo *bool `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// ConnectToSourceSqlServerTaskInputResponseInput is an input type that accepts ConnectToSourceSqlServerTaskInputResponseArgs and ConnectToSourceSqlServerTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputResponseInput` via:
//
//          ConnectToSourceSqlServerTaskInputResponseArgs{...}
type ConnectToSourceSqlServerTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput
	ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputResponseOutput
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponseArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases pulumi.BoolPtrInput `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo pulumi.BoolPtrInput `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly pulumi.BoolPtrInput `pulumi:"validateSsisCatalogOnly"`
}

func (ConnectToSourceSqlServerTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskInputResponseArgs) ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput {
	return i.ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputResponseArgs) ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputResponseOutput)
}

func (i ConnectToSourceSqlServerTaskInputResponseArgs) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputResponseArgs) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputResponseOutput).ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskInputResponsePtrInput is an input type that accepts ConnectToSourceSqlServerTaskInputResponseArgs, ConnectToSourceSqlServerTaskInputResponsePtr and ConnectToSourceSqlServerTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputResponsePtrInput` via:
//
//          ConnectToSourceSqlServerTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceSqlServerTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput
	ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput
}

type connectToSourceSqlServerTaskInputResponsePtrType ConnectToSourceSqlServerTaskInputResponseArgs

func ConnectToSourceSqlServerTaskInputResponsePtr(v *ConnectToSourceSqlServerTaskInputResponseArgs) ConnectToSourceSqlServerTaskInputResponsePtrInput {
	return (*connectToSourceSqlServerTaskInputResponsePtrType)(v)
}

func (*connectToSourceSqlServerTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskInputResponsePtrType) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskInputResponsePtrType) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return &v
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectDatabases }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectTdeCertificateInfo }).(pulumi.BoolPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToSourceSqlServerTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) Elem() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) ConnectToSourceSqlServerTaskInputResponse {
		return *v
	}).(ConnectToSourceSqlServerTaskInputResponseOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectDatabases
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectTdeCertificateInfo
	}).(pulumi.BoolPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of Agent Job.
	JobCategory string `pulumi:"jobCategory"`
	// The owner of the Agent Job
	JobOwner string `pulumi:"jobOwner"`
	// UTC Date and time when the Agent Job was last executed.
	LastExecutedOn string `pulumi:"lastExecutedOn"`
	// Information about eligibility of agent job for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Agent Job name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseInput is an input type that accepts ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseArgs and ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseInput` via:
//
//          ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseArgs{...}
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput() ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput
	ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput
}

// Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The type of Agent Job.
	JobCategory pulumi.StringInput `pulumi:"jobCategory"`
	// The owner of the Agent Job
	JobOwner pulumi.StringInput `pulumi:"jobOwner"`
	// UTC Date and time when the Agent Job was last executed.
	LastExecutedOn pulumi.StringInput `pulumi:"lastExecutedOn"`
	// Information about eligibility of agent job for migration.
	MigrationEligibility MigrationEligibilityInfoResponseInput `pulumi:"migrationEligibility"`
	// Agent Job name
	Name pulumi.StringInput `pulumi:"name"`
	// Type of result - database level or task level
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput() ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return i.ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput)
}

// Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput() ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return o
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the original Agent Job.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of Agent Job.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) JobCategory() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.JobCategory }).(pulumi.StringOutput)
}

// The owner of the Agent Job
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) JobOwner() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.JobOwner }).(pulumi.StringOutput)
}

// UTC Date and time when the Agent Job was last executed.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) LastExecutedOn() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.LastExecutedOn }).(pulumi.StringOutput)
}

// Information about eligibility of agent job for migration.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) MigrationEligibility() MigrationEligibilityInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) MigrationEligibilityInfoResponse {
		return v.MigrationEligibility
	}).(MigrationEligibilityInfoResponseOutput)
}

// Agent Job name
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse struct {
	// SQL Server compatibility level of database
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles []DatabaseFileInfoResponse `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState string `pulumi:"databaseState"`
	// Result identifier
	Id string `pulumi:"id"`
	// Database name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
}

// ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseInput is an input type that accepts ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs and ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseInput` via:
//
//          ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs{...}
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput
	ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs struct {
	// SQL Server compatibility level of database
	CompatibilityLevel pulumi.StringInput `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles DatabaseFileInfoResponseArrayInput `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState pulumi.StringInput `pulumi:"databaseState"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Database name
	Name pulumi.StringInput `pulumi:"name"`
	// Type of result - database level or task level
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB pulumi.Float64Input `pulumi:"sizeMB"`
}

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return i.ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

// SQL Server compatibility level of database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.CompatibilityLevel }).(pulumi.StringOutput)
}

// The list of database files
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseFiles() DatabaseFileInfoResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) []DatabaseFileInfoResponse {
		return v.DatabaseFiles
	}).(DatabaseFileInfoResponseArrayOutput)
}

// State of the database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseState() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.DatabaseState }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Database name
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the file in megabytes
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponse struct {
	// The default database for the login.
	DefaultDatabase string `pulumi:"defaultDatabase"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the login.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of login.
	LoginType string `pulumi:"loginType"`
	// Information about eligibility of login for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Login name.
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
}

// ConnectToSourceSqlServerTaskOutputLoginLevelResponseInput is an input type that accepts ConnectToSourceSqlServerTaskOutputLoginLevelResponseArgs and ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskOutputLoginLevelResponseInput` via:
//
//          ConnectToSourceSqlServerTaskOutputLoginLevelResponseArgs{...}
type ConnectToSourceSqlServerTaskOutputLoginLevelResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput() ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput
	ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponseArgs struct {
	// The default database for the login.
	DefaultDatabase pulumi.StringInput `pulumi:"defaultDatabase"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// The state of the login.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The type of login.
	LoginType pulumi.StringInput `pulumi:"loginType"`
	// Information about eligibility of login for migration.
	MigrationEligibility MigrationEligibilityInfoResponseInput `pulumi:"migrationEligibility"`
	// Login name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of result - database level or task level
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (ConnectToSourceSqlServerTaskOutputLoginLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputLoginLevelResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskOutputLoginLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput() ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return i.ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskOutputLoginLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput)
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputLoginLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput() ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return o
}

// The default database for the login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) DefaultDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.DefaultDatabase }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) LoginType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.LoginType }).(pulumi.StringOutput)
}

// Information about eligibility of login for migration.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) MigrationEligibility() MigrationEligibilityInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) MigrationEligibilityInfoResponse {
		return v.MigrationEligibility
	}).(MigrationEligibilityInfoResponseOutput)
}

// Login name.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponse struct {
	// Source agent jobs as a map from agent job name to id.
	AgentJobs map[string]string `pulumi:"agentJobs"`
	// Mapping from database name to TDE certificate name, if applicable
	DatabaseTdeCertificateMapping map[string]string `pulumi:"databaseTdeCertificateMapping"`
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source logins as a map from login name to login id.
	Logins map[string]string `pulumi:"logins"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToSourceSqlServerTaskOutputTaskLevelResponseInput is an input type that accepts ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs and ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskOutputTaskLevelResponseInput` via:
//
//          ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs{...}
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput
	ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs struct {
	// Source agent jobs as a map from agent job name to id.
	AgentJobs pulumi.StringMapInput `pulumi:"agentJobs"`
	// Mapping from database name to TDE certificate name, if applicable
	DatabaseTdeCertificateMapping pulumi.StringMapInput `pulumi:"databaseTdeCertificateMapping"`
	// Source databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Source logins as a map from login name to login id.
	Logins pulumi.StringMapInput `pulumi:"logins"`
	// Type of result - database level or task level
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return i.ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskOutputTaskLevelResponseArgs) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

// Source agent jobs as a map from agent job name to id.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) AgentJobs() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string { return v.AgentJobs }).(pulumi.StringMapOutput)
}

// Mapping from database name to TDE certificate name, if applicable
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) DatabaseTdeCertificateMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string {
		return v.DatabaseTdeCertificateMapping
	}).(pulumi.StringMapOutput)
}

// Source databases as a map from database name to database id
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Source logins as a map from login name to login id.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Logins() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string { return v.Logins }).(pulumi.StringMapOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Source server version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerTaskPropertiesInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesArgs and ConnectToSourceSqlServerTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesInput` via:
//
//          ConnectToSourceSqlServerTaskPropertiesArgs{...}
type ConnectToSourceSqlServerTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput
	ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesOutput) ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesOutput) ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesOutput) Input() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) *ConnectToSourceSqlServerTaskInput { return v.Input }).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Task type.
func (o ConnectToSourceSqlServerTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerTaskPropertiesResponseInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesResponseArgs and ConnectToSourceSqlServerTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesResponseInput` via:
//
//          ConnectToSourceSqlServerTaskPropertiesResponseArgs{...}
type ConnectToSourceSqlServerTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput
	ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskPropertiesResponseArgs) ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesResponseArgs) ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Input() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInput struct {
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetAzureDbForMySqlTaskInputInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskInputArgs and ConnectToTargetAzureDbForMySqlTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskInputInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskInputArgs{...}
type ConnectToTargetAzureDbForMySqlTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskInputOutput() ConnectToTargetAzureDbForMySqlTaskInputOutput
	ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskInputOutput
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputArgs struct {
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetAzureDbForMySqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputOutput() ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputOutput)
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputOutput).ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForMySqlTaskInputPtrInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskInputArgs, ConnectToTargetAzureDbForMySqlTaskInputPtr and ConnectToTargetAzureDbForMySqlTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskInputPtrInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetAzureDbForMySqlTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput
	ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput
}

type connectToTargetAzureDbForMySqlTaskInputPtrType ConnectToTargetAzureDbForMySqlTaskInputArgs

func ConnectToTargetAzureDbForMySqlTaskInputPtr(v *ConnectToTargetAzureDbForMySqlTaskInputArgs) ConnectToTargetAzureDbForMySqlTaskInputPtrInput {
	return (*connectToTargetAzureDbForMySqlTaskInputPtrType)(v)
}

func (*connectToTargetAzureDbForMySqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (i *connectToTargetAzureDbForMySqlTaskInputPtrType) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForMySqlTaskInputPtrType) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) ToConnectToTargetAzureDbForMySqlTaskInputOutput() ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o.ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInput) *ConnectToTargetAzureDbForMySqlTaskInput {
		return &v
	}).(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) SourceConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInput) MySqlConnectionInfo { return v.SourceConnectionInfo }).(MySqlConnectionInfoOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) TargetConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInput) MySqlConnectionInfo { return v.TargetConnectionInfo }).(MySqlConnectionInfoOutput)
}

type ConnectToTargetAzureDbForMySqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) Elem() ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInput) ConnectToTargetAzureDbForMySqlTaskInput { return *v }).(ConnectToTargetAzureDbForMySqlTaskInputOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) SourceConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) TargetConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputResponse struct {
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetAzureDbForMySqlTaskInputResponseInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskInputResponseArgs and ConnectToTargetAzureDbForMySqlTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskInputResponseInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskInputResponseArgs{...}
type ConnectToTargetAzureDbForMySqlTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskInputResponseOutput() ConnectToTargetAzureDbForMySqlTaskInputResponseOutput
	ToConnectToTargetAzureDbForMySqlTaskInputResponseOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponseOutput
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputResponseArgs struct {
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetAzureDbForMySqlTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskInputResponseArgs) ToConnectToTargetAzureDbForMySqlTaskInputResponseOutput() ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskInputResponseArgs) ToConnectToTargetAzureDbForMySqlTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputResponseOutput)
}

func (i ConnectToTargetAzureDbForMySqlTaskInputResponseArgs) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskInputResponseArgs) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputResponseOutput).ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForMySqlTaskInputResponsePtrInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskInputResponseArgs, ConnectToTargetAzureDbForMySqlTaskInputResponsePtr and ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskInputResponsePtrInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetAzureDbForMySqlTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput
	ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput
}

type connectToTargetAzureDbForMySqlTaskInputResponsePtrType ConnectToTargetAzureDbForMySqlTaskInputResponseArgs

func ConnectToTargetAzureDbForMySqlTaskInputResponsePtr(v *ConnectToTargetAzureDbForMySqlTaskInputResponseArgs) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrInput {
	return (*connectToTargetAzureDbForMySqlTaskInputResponsePtrType)(v)
}

func (*connectToTargetAzureDbForMySqlTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetAzureDbForMySqlTaskInputResponsePtrType) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForMySqlTaskInputResponsePtrType) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponseOutput() ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o.ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) *ConnectToTargetAzureDbForMySqlTaskInputResponse {
		return &v
	}).(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) SourceConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) MySqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) TargetConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) MySqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

type ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) Elem() ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) ConnectToTargetAzureDbForMySqlTaskInputResponse {
		return *v
	}).(ConnectToTargetAzureDbForMySqlTaskInputResponseOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) SourceConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) TargetConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskOutputResponse struct {
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Version of the target server
	ServerVersion string `pulumi:"serverVersion"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToTargetAzureDbForMySqlTaskOutputResponseInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskOutputResponseArgs and ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskOutputResponseInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskOutputResponseArgs{...}
type ConnectToTargetAzureDbForMySqlTaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput
	ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput
}

// Output for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskOutputResponseArgs struct {
	// List of databases on target server
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Version of the target server
	ServerVersion pulumi.StringInput `pulumi:"serverVersion"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Validation errors associated with the task
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToTargetAzureDbForMySqlTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskOutputResponseArgs) ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskOutputResponseArgs) ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput)
}

// ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskOutputResponseArray and ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskOutputResponseArray{ ConnectToTargetAzureDbForMySqlTaskOutputResponseArgs{...} }
type ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput
	ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput
}

type ConnectToTargetAzureDbForMySqlTaskOutputResponseArray []ConnectToTargetAzureDbForMySqlTaskOutputResponseInput

func (ConnectToTargetAzureDbForMySqlTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetAzureDbForMySqlTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskOutputResponseArray) ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskOutputResponseArray) ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return o
}

// List of databases on target server
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.ServerVersion }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetAzureDbForMySqlTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetAzureDbForMySqlTaskOutputResponse {
		return vs[0].([]ConnectToTargetAzureDbForMySqlTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetAzureDbForMySqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetAzureDbForMySqlTaskPropertiesInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskPropertiesArgs and ConnectToTargetAzureDbForMySqlTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskPropertiesInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskPropertiesArgs{...}
type ConnectToTargetAzureDbForMySqlTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskPropertiesOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput
	ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetAzureDbForMySqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) Input() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskProperties) *ConnectToTargetAzureDbForMySqlTaskInput {
		return v.Input
	}).(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput)
}

// Task type.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetAzureDbForMySqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetAzureDbForMySqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetAzureDbForMySqlTaskPropertiesResponseInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskPropertiesResponseArgs and ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskPropertiesResponseInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskPropertiesResponseArgs{...}
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput
	ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetAzureDbForMySqlTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetAzureDbForMySqlTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesResponseArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesResponseArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Input() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) *ConnectToTargetAzureDbForMySqlTaskInputResponse {
		return v.Input
	}).(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Output() ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []ConnectToTargetAzureDbForMySqlTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInput struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput).ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs, ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtr and ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs

func ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtr(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
		return &v
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) SourceConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) TargetConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) Elem() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
		return *v
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput).ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs, ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtr and ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput
}

type connectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrType ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs

func ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtr(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseArgs) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrInput {
	return (*connectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrType)(v)
}

func (*connectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
		return &v
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
		return *v
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse struct {
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArgs struct {
	// List of databases on target server
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput)
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArray and ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArray{ ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArgs{...} }
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArray []ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseInput

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArray) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArray) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// List of databases on target server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
		return v.Input
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput).ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs, ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtr and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs

func ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtr(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
		return &v
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) TargetConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) Elem() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
		return *v
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput).ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs, ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtr and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput
}

type connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrType ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs

func ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtr(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseArgs) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrInput {
	return (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrType)(v)
}

func (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
		return &v
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
		return *v
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse struct {
	// Mapping of schemas per database
	DatabaseSchemaMap []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap `pulumi:"databaseSchemaMap"`
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArgs struct {
	// Mapping of schemas per database
	DatabaseSchemaMap ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayInput `pulumi:"databaseSchemaMap"`
	// List of databases on target server
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput)
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArray and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArray{ ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArgs{...} }
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArray []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseInput

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArray) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArray) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// Mapping of schemas per database
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) DatabaseSchemaMap() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap {
		return v.DatabaseSchemaMap
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput)
}

// List of databases on target server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Target server brand version
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap struct {
	Database *string  `pulumi:"database"`
	Schemas  []string `pulumi:"schemas"`
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap{ "key": ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaArgs{...} }
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArgs struct {
	Database pulumi.StringPtrInput   `pulumi:"database"`
	Schemas  pulumi.StringArrayInput `pulumi:"schemas"`
}

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput)
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArray and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArray{ ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArgs{...} }
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArray []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapInput

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArray) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArray) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap) *string {
		return v.Database
	}).(pulumi.StringPtrOutput)
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) Schemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap) []string {
		return v.Schemas
	}).(pulumi.StringArrayOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) Index(i pulumi.IntInput) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap {
		return vs[0].([]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)[vs[1].(int)]
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
		return v.Input
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInput struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlDbTaskInputInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs and ConnectToTargetSqlDbTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputInput` via:
//
//          ConnectToTargetSqlDbTaskInputArgs{...}
type ConnectToTargetSqlDbTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput
	ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputOutput
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputArgs struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput {
	return i.ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput)
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput).ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskInputPtrInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs, ConnectToTargetSqlDbTaskInputPtr and ConnectToTargetSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputPtrInput` via:
//
//          ConnectToTargetSqlDbTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput
	ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputPtrOutput
}

type connectToTargetSqlDbTaskInputPtrType ConnectToTargetSqlDbTaskInputArgs

func ConnectToTargetSqlDbTaskInputPtr(v *ConnectToTargetSqlDbTaskInputArgs) ConnectToTargetSqlDbTaskInputPtrInput {
	return (*connectToTargetSqlDbTaskInputPtrType)(v)
}

func (*connectToTargetSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInput) *ConnectToTargetSqlDbTaskInput {
		return &v
	}).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ConnectToTargetSqlDbTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) Elem() ConnectToTargetSqlDbTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInput) ConnectToTargetSqlDbTaskInput { return *v }).(ConnectToTargetSqlDbTaskInputOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponse struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlDbTaskInputResponseInput is an input type that accepts ConnectToTargetSqlDbTaskInputResponseArgs and ConnectToTargetSqlDbTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputResponseInput` via:
//
//          ConnectToTargetSqlDbTaskInputResponseArgs{...}
type ConnectToTargetSqlDbTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput
	ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputResponseOutput
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponseArgs struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlDbTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskInputResponseArgs) ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput {
	return i.ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputResponseArgs) ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputResponseOutput)
}

func (i ConnectToTargetSqlDbTaskInputResponseArgs) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputResponseArgs) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputResponseOutput).ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskInputResponsePtrInput is an input type that accepts ConnectToTargetSqlDbTaskInputResponseArgs, ConnectToTargetSqlDbTaskInputResponsePtr and ConnectToTargetSqlDbTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputResponsePtrInput` via:
//
//          ConnectToTargetSqlDbTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlDbTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput
	ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput
}

type connectToTargetSqlDbTaskInputResponsePtrType ConnectToTargetSqlDbTaskInputResponseArgs

func ConnectToTargetSqlDbTaskInputResponsePtr(v *ConnectToTargetSqlDbTaskInputResponseArgs) ConnectToTargetSqlDbTaskInputResponsePtrInput {
	return (*connectToTargetSqlDbTaskInputResponsePtrType)(v)
}

func (*connectToTargetSqlDbTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskInputResponsePtrType) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskInputResponsePtrType) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return &v
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) ConnectToTargetSqlDbTaskInputResponse { return *v }).(ConnectToTargetSqlDbTaskInputResponseOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponse struct {
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// ConnectToTargetSqlDbTaskOutputResponseInput is an input type that accepts ConnectToTargetSqlDbTaskOutputResponseArgs and ConnectToTargetSqlDbTaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskOutputResponseInput` via:
//
//          ConnectToTargetSqlDbTaskOutputResponseArgs{...}
type ConnectToTargetSqlDbTaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput
	ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponseArgs struct {
	// Source databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (ConnectToTargetSqlDbTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskOutputResponseArgs) ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput {
	return i.ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskOutputResponseArgs) ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskOutputResponseOutput)
}

// ConnectToTargetSqlDbTaskOutputResponseArrayInput is an input type that accepts ConnectToTargetSqlDbTaskOutputResponseArray and ConnectToTargetSqlDbTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskOutputResponseArrayInput` via:
//
//          ConnectToTargetSqlDbTaskOutputResponseArray{ ConnectToTargetSqlDbTaskOutputResponseArgs{...} }
type ConnectToTargetSqlDbTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput
	ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput
}

type ConnectToTargetSqlDbTaskOutputResponseArray []ConnectToTargetSqlDbTaskOutputResponseInput

func (ConnectToTargetSqlDbTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskOutputResponseArray) ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return i.ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskOutputResponseArray) ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

// Source databases as a map from database name to database id
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Result identifier
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type ConnectToTargetSqlDbTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlDbTaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlDbTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlDbTaskOutputResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlDbTaskPropertiesInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesArgs and ConnectToTargetSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesInput` via:
//
//          ConnectToTargetSqlDbTaskPropertiesArgs{...}
type ConnectToTargetSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput
	ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesOutput) ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesOutput) ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesOutput) Input() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) *ConnectToTargetSqlDbTaskInput { return v.Input }).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Task type.
func (o ConnectToTargetSqlDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlDbTaskPropertiesResponseInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesResponseArgs and ConnectToTargetSqlDbTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesResponseInput` via:
//
//          ConnectToTargetSqlDbTaskPropertiesResponseArgs{...}
type ConnectToTargetSqlDbTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput
	ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetSqlDbTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetSqlDbTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlDbTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskPropertiesResponseArgs) ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesResponseArgs) ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Input() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Output() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ConnectToTargetSqlDbTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlMISyncTaskInputInput is an input type that accepts ConnectToTargetSqlMISyncTaskInputArgs and ConnectToTargetSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskInputInput` via:
//
//          ConnectToTargetSqlMISyncTaskInputArgs{...}
type ConnectToTargetSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskInputOutput() ConnectToTargetSqlMISyncTaskInputOutput
	ToConnectToTargetSqlMISyncTaskInputOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskInputOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputOutput() ConnectToTargetSqlMISyncTaskInputOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputOutput)
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputOutput).ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMISyncTaskInputPtrInput is an input type that accepts ConnectToTargetSqlMISyncTaskInputArgs, ConnectToTargetSqlMISyncTaskInputPtr and ConnectToTargetSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskInputPtrInput` via:
//
//          ConnectToTargetSqlMISyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput
	ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput
}

type connectToTargetSqlMISyncTaskInputPtrType ConnectToTargetSqlMISyncTaskInputArgs

func ConnectToTargetSqlMISyncTaskInputPtr(v *ConnectToTargetSqlMISyncTaskInputArgs) ConnectToTargetSqlMISyncTaskInputPtrInput {
	return (*connectToTargetSqlMISyncTaskInputPtrType)(v)
}

func (*connectToTargetSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlMISyncTaskInputPtrType) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMISyncTaskInputPtrType) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputOutput) ToConnectToTargetSqlMISyncTaskInputOutput() ConnectToTargetSqlMISyncTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputOutput) ToConnectToTargetSqlMISyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputOutput) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o.ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMISyncTaskInputOutput) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInput) *ConnectToTargetSqlMISyncTaskInput {
		return &v
	}).(ConnectToTargetSqlMISyncTaskInputPtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputOutput) AzureApp() AzureActiveDirectoryAppOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInput) AzureActiveDirectoryApp { return v.AzureApp }).(AzureActiveDirectoryAppOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputOutput) TargetConnectionInfo() MiSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInput) MiSqlConnectionInfo { return v.TargetConnectionInfo }).(MiSqlConnectionInfoOutput)
}

type ConnectToTargetSqlMISyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) Elem() ConnectToTargetSqlMISyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInput) ConnectToTargetSqlMISyncTaskInput { return *v }).(ConnectToTargetSqlMISyncTaskInputOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) AzureApp() AzureActiveDirectoryAppPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInput) *AzureActiveDirectoryApp {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) TargetConnectionInfo() MiSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInput) *MiSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlMISyncTaskInputResponseInput is an input type that accepts ConnectToTargetSqlMISyncTaskInputResponseArgs and ConnectToTargetSqlMISyncTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskInputResponseInput` via:
//
//          ConnectToTargetSqlMISyncTaskInputResponseArgs{...}
type ConnectToTargetSqlMISyncTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskInputResponseOutput() ConnectToTargetSqlMISyncTaskInputResponseOutput
	ToConnectToTargetSqlMISyncTaskInputResponseOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskInputResponseOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputResponseArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponseInput `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlMISyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskInputResponseArgs) ToConnectToTargetSqlMISyncTaskInputResponseOutput() ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskInputResponseArgs) ToConnectToTargetSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputResponseOutput)
}

func (i ConnectToTargetSqlMISyncTaskInputResponseArgs) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutput() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskInputResponseArgs) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputResponseOutput).ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMISyncTaskInputResponsePtrInput is an input type that accepts ConnectToTargetSqlMISyncTaskInputResponseArgs, ConnectToTargetSqlMISyncTaskInputResponsePtr and ConnectToTargetSqlMISyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskInputResponsePtrInput` via:
//
//          ConnectToTargetSqlMISyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMISyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskInputResponsePtrOutput() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput
	ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskInputResponsePtrOutput
}

type connectToTargetSqlMISyncTaskInputResponsePtrType ConnectToTargetSqlMISyncTaskInputResponseArgs

func ConnectToTargetSqlMISyncTaskInputResponsePtr(v *ConnectToTargetSqlMISyncTaskInputResponseArgs) ConnectToTargetSqlMISyncTaskInputResponsePtrInput {
	return (*connectToTargetSqlMISyncTaskInputResponsePtrType)(v)
}

func (*connectToTargetSqlMISyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetSqlMISyncTaskInputResponsePtrType) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutput() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMISyncTaskInputResponsePtrType) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponseOutput() ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutput() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInputResponse) *ConnectToTargetSqlMISyncTaskInputResponse {
		return &v
	}).(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse { return v.AzureApp }).(AzureActiveDirectoryAppResponseOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutput() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) ConnectToTargetSqlMISyncTaskInputResponse {
		return *v
	}).(ConnectToTargetSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMISyncTaskOutputResponse struct {
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToTargetSqlMISyncTaskOutputResponseInput is an input type that accepts ConnectToTargetSqlMISyncTaskOutputResponseArgs and ConnectToTargetSqlMISyncTaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskOutputResponseInput` via:
//
//          ConnectToTargetSqlMISyncTaskOutputResponseArgs{...}
type ConnectToTargetSqlMISyncTaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskOutputResponseOutput() ConnectToTargetSqlMISyncTaskOutputResponseOutput
	ToConnectToTargetSqlMISyncTaskOutputResponseOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskOutputResponseOutput
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMISyncTaskOutputResponseArgs struct {
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToTargetSqlMISyncTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskOutputResponseArgs) ToConnectToTargetSqlMISyncTaskOutputResponseOutput() ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return i.ToConnectToTargetSqlMISyncTaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskOutputResponseArgs) ToConnectToTargetSqlMISyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskOutputResponseOutput)
}

// ConnectToTargetSqlMISyncTaskOutputResponseArrayInput is an input type that accepts ConnectToTargetSqlMISyncTaskOutputResponseArray and ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskOutputResponseArrayInput` via:
//
//          ConnectToTargetSqlMISyncTaskOutputResponseArray{ ConnectToTargetSqlMISyncTaskOutputResponseArgs{...} }
type ConnectToTargetSqlMISyncTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutput() ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput
	ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput
}

type ConnectToTargetSqlMISyncTaskOutputResponseArray []ConnectToTargetSqlMISyncTaskOutputResponseInput

func (ConnectToTargetSqlMISyncTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskOutputResponseArray) ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutput() ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return i.ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskOutputResponseArray) ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMISyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ToConnectToTargetSqlMISyncTaskOutputResponseOutput() ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ToConnectToTargetSqlMISyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return o
}

// Target server brand version
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutput() ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMISyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlMISyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMISyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMISyncTaskPropertiesInput is an input type that accepts ConnectToTargetSqlMISyncTaskPropertiesArgs and ConnectToTargetSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskPropertiesInput` via:
//
//          ConnectToTargetSqlMISyncTaskPropertiesArgs{...}
type ConnectToTargetSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskPropertiesOutput() ConnectToTargetSqlMISyncTaskPropertiesOutput
	ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskPropertiesArgs) ToConnectToTargetSqlMISyncTaskPropertiesOutput() ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return i.ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskPropertiesArgs) ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) ToConnectToTargetSqlMISyncTaskPropertiesOutput() ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) Input() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskProperties) *ConnectToTargetSqlMISyncTaskInput { return v.Input }).(ConnectToTargetSqlMISyncTaskInputPtrOutput)
}

// Task type.
func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMISyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMISyncTaskPropertiesResponseInput is an input type that accepts ConnectToTargetSqlMISyncTaskPropertiesResponseArgs and ConnectToTargetSqlMISyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskPropertiesResponseInput` via:
//
//          ConnectToTargetSqlMISyncTaskPropertiesResponseArgs{...}
type ConnectToTargetSqlMISyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskPropertiesResponseOutput() ConnectToTargetSqlMISyncTaskPropertiesResponseOutput
	ToConnectToTargetSqlMISyncTaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetSqlMISyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetSqlMISyncTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMISyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskPropertiesResponseArgs) ToConnectToTargetSqlMISyncTaskPropertiesResponseOutput() ConnectToTargetSqlMISyncTaskPropertiesResponseOutput {
	return i.ToConnectToTargetSqlMISyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskPropertiesResponseArgs) ToConnectToTargetSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ToConnectToTargetSqlMISyncTaskPropertiesResponseOutput() ConnectToTargetSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ToConnectToTargetSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Input() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) *ConnectToTargetSqlMISyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Output() ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []ConnectToTargetSqlMISyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInput struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// ConnectToTargetSqlMITaskInputInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs and ConnectToTargetSqlMITaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputInput` via:
//
//          ConnectToTargetSqlMITaskInputArgs{...}
type ConnectToTargetSqlMITaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput
	ToConnectToTargetSqlMITaskInputOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputArgs struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly pulumi.BoolPtrInput `pulumi:"validateSsisCatalogOnly"`
}

func (ConnectToTargetSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput {
	return i.ToConnectToTargetSqlMITaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput)
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput).ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskInputPtrInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs, ConnectToTargetSqlMITaskInputPtr and ConnectToTargetSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputPtrInput` via:
//
//          ConnectToTargetSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput
	ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputPtrOutput
}

type connectToTargetSqlMITaskInputPtrType ConnectToTargetSqlMITaskInputArgs

func ConnectToTargetSqlMITaskInputPtr(v *ConnectToTargetSqlMITaskInputArgs) ConnectToTargetSqlMITaskInputPtrInput {
	return (*connectToTargetSqlMITaskInputPtrType)(v)
}

func (*connectToTargetSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) *ConnectToTargetSqlMITaskInput {
		return &v
	}).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToTargetSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) Elem() ConnectToTargetSqlMITaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) ConnectToTargetSqlMITaskInput { return *v }).(ConnectToTargetSqlMITaskInputOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputPtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputPtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputPtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponse struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// ConnectToTargetSqlMITaskInputResponseInput is an input type that accepts ConnectToTargetSqlMITaskInputResponseArgs and ConnectToTargetSqlMITaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputResponseInput` via:
//
//          ConnectToTargetSqlMITaskInputResponseArgs{...}
type ConnectToTargetSqlMITaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput
	ToConnectToTargetSqlMITaskInputResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputResponseOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponseArgs struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly pulumi.BoolPtrInput `pulumi:"validateSsisCatalogOnly"`
}

func (ConnectToTargetSqlMITaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskInputResponseArgs) ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput {
	return i.ToConnectToTargetSqlMITaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputResponseArgs) ToConnectToTargetSqlMITaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputResponseOutput)
}

func (i ConnectToTargetSqlMITaskInputResponseArgs) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputResponseArgs) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputResponseOutput).ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskInputResponsePtrInput is an input type that accepts ConnectToTargetSqlMITaskInputResponseArgs, ConnectToTargetSqlMITaskInputResponsePtr and ConnectToTargetSqlMITaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputResponsePtrInput` via:
//
//          ConnectToTargetSqlMITaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMITaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput
	ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput
}

type connectToTargetSqlMITaskInputResponsePtrType ConnectToTargetSqlMITaskInputResponseArgs

func ConnectToTargetSqlMITaskInputResponsePtr(v *ConnectToTargetSqlMITaskInputResponseArgs) ConnectToTargetSqlMITaskInputResponsePtrInput {
	return (*connectToTargetSqlMITaskInputResponsePtrType)(v)
}

func (*connectToTargetSqlMITaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskInputResponsePtrType) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskInputResponsePtrType) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *ConnectToTargetSqlMITaskInputResponse {
		return &v
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToTargetSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) Elem() ConnectToTargetSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) ConnectToTargetSqlMITaskInputResponse { return *v }).(ConnectToTargetSqlMITaskInputResponseOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponse struct {
	// List of agent jobs on the target server.
	AgentJobs []string `pulumi:"agentJobs"`
	// Result identifier
	Id string `pulumi:"id"`
	// List of logins on the target server.
	Logins []string `pulumi:"logins"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ConnectToTargetSqlMITaskOutputResponseInput is an input type that accepts ConnectToTargetSqlMITaskOutputResponseArgs and ConnectToTargetSqlMITaskOutputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskOutputResponseInput` via:
//
//          ConnectToTargetSqlMITaskOutputResponseArgs{...}
type ConnectToTargetSqlMITaskOutputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput
	ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskOutputResponseOutput
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponseArgs struct {
	// List of agent jobs on the target server.
	AgentJobs pulumi.StringArrayInput `pulumi:"agentJobs"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// List of logins on the target server.
	Logins pulumi.StringArrayInput `pulumi:"logins"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ConnectToTargetSqlMITaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskOutputResponseArgs) ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput {
	return i.ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskOutputResponseArgs) ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskOutputResponseOutput)
}

// ConnectToTargetSqlMITaskOutputResponseArrayInput is an input type that accepts ConnectToTargetSqlMITaskOutputResponseArray and ConnectToTargetSqlMITaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskOutputResponseArrayInput` via:
//
//          ConnectToTargetSqlMITaskOutputResponseArray{ ConnectToTargetSqlMITaskOutputResponseArgs{...} }
type ConnectToTargetSqlMITaskOutputResponseArrayInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput
	ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput
}

type ConnectToTargetSqlMITaskOutputResponseArray []ConnectToTargetSqlMITaskOutputResponseInput

func (ConnectToTargetSqlMITaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskOutputResponseArray) ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return i.ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskOutputResponseArray) ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskOutputResponseArrayOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

// List of agent jobs on the target server.
func (o ConnectToTargetSqlMITaskOutputResponseOutput) AgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []string { return v.AgentJobs }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// List of logins on the target server.
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Logins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []string { return v.Logins }).(pulumi.StringArrayOutput)
}

// Target server brand version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMITaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMITaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMITaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMITaskPropertiesInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesArgs and ConnectToTargetSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesInput` via:
//
//          ConnectToTargetSqlMITaskPropertiesArgs{...}
type ConnectToTargetSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput
	ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesOutput) ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesOutput) ToConnectToTargetSqlMITaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMITaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesOutput) Input() ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskProperties) *ConnectToTargetSqlMITaskInput { return v.Input }).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Task type.
func (o ConnectToTargetSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMITaskPropertiesResponseInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesResponseArgs and ConnectToTargetSqlMITaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesResponseInput` via:
//
//          ConnectToTargetSqlMITaskPropertiesResponseArgs{...}
type ConnectToTargetSqlMITaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput
	ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetSqlMITaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetSqlMITaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMITaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskPropertiesResponseArgs) ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesResponseArgs) ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Input() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) *ConnectToTargetSqlMITaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Output() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ConnectToTargetSqlMITaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInput struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlSqlDbSyncTaskInputInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskInputArgs and ConnectToTargetSqlSqlDbSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskInputInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskInputArgs{...}
type ConnectToTargetSqlSqlDbSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskInputOutput() ConnectToTargetSqlSqlDbSyncTaskInputOutput
	ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskInputOutput
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputArgs struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlSqlDbSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputOutput() ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputOutput)
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputOutput).ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlSqlDbSyncTaskInputPtrInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskInputArgs, ConnectToTargetSqlSqlDbSyncTaskInputPtr and ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskInputPtrInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlSqlDbSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput
	ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput
}

type connectToTargetSqlSqlDbSyncTaskInputPtrType ConnectToTargetSqlSqlDbSyncTaskInputArgs

func ConnectToTargetSqlSqlDbSyncTaskInputPtr(v *ConnectToTargetSqlSqlDbSyncTaskInputArgs) ConnectToTargetSqlSqlDbSyncTaskInputPtrInput {
	return (*connectToTargetSqlSqlDbSyncTaskInputPtrType)(v)
}

func (*connectToTargetSqlSqlDbSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlSqlDbSyncTaskInputPtrType) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlSqlDbSyncTaskInputPtrType) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) ToConnectToTargetSqlSqlDbSyncTaskInputOutput() ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o.ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInput) *ConnectToTargetSqlSqlDbSyncTaskInput {
		return &v
	}).(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) Elem() ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInput) ConnectToTargetSqlSqlDbSyncTaskInput { return *v }).(ConnectToTargetSqlSqlDbSyncTaskInputOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputResponse struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlSqlDbSyncTaskInputResponseInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs and ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskInputResponseInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs{...}
type ConnectToTargetSqlSqlDbSyncTaskInputResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput
	ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs) ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs) ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput)
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput).ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs, ConnectToTargetSqlSqlDbSyncTaskInputResponsePtr and ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput
	ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput
}

type connectToTargetSqlSqlDbSyncTaskInputResponsePtrType ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs

func ConnectToTargetSqlSqlDbSyncTaskInputResponsePtr(v *ConnectToTargetSqlSqlDbSyncTaskInputResponseArgs) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrInput {
	return (*connectToTargetSqlSqlDbSyncTaskInputResponsePtrType)(v)
}

func (*connectToTargetSqlSqlDbSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (i *connectToTargetSqlSqlDbSyncTaskInputResponsePtrType) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlSqlDbSyncTaskInputResponsePtrType) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInputResponse) *ConnectToTargetSqlSqlDbSyncTaskInputResponse {
		return &v
	}).(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) ConnectToTargetSqlSqlDbSyncTaskInputResponse {
		return *v
	}).(ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlSqlDbSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlSqlDbSyncTaskPropertiesInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs and ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskPropertiesInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs{...}
type ConnectToTargetSqlSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput
	ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlSqlDbSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) Input() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskProperties) *ConnectToTargetSqlSqlDbSyncTaskInput {
		return v.Input
	}).(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput)
}

// Task type.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlSqlDbSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseArgs and ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseArgs{...}
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput
	ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ConnectToTargetSqlDbTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Input() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) *ConnectToTargetSqlSqlDbSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Output() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []ConnectToTargetSqlDbTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount int `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount int `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// DataItemMigrationSummaryResultResponseInput is an input type that accepts DataItemMigrationSummaryResultResponseArgs and DataItemMigrationSummaryResultResponseOutput values.
// You can construct a concrete instance of `DataItemMigrationSummaryResultResponseInput` via:
//
//          DataItemMigrationSummaryResultResponseArgs{...}
type DataItemMigrationSummaryResultResponseInput interface {
	pulumi.Input

	ToDataItemMigrationSummaryResultResponseOutput() DataItemMigrationSummaryResultResponseOutput
	ToDataItemMigrationSummaryResultResponseOutputWithContext(context.Context) DataItemMigrationSummaryResultResponseOutput
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.IntInput `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.IntInput `pulumi:"itemsCount"`
	// Name of the item
	Name pulumi.StringInput `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (DataItemMigrationSummaryResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (i DataItemMigrationSummaryResultResponseArgs) ToDataItemMigrationSummaryResultResponseOutput() DataItemMigrationSummaryResultResponseOutput {
	return i.ToDataItemMigrationSummaryResultResponseOutputWithContext(context.Background())
}

func (i DataItemMigrationSummaryResultResponseArgs) ToDataItemMigrationSummaryResultResponseOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataItemMigrationSummaryResultResponseOutput)
}

// DataItemMigrationSummaryResultResponseMapInput is an input type that accepts DataItemMigrationSummaryResultResponseMap and DataItemMigrationSummaryResultResponseMapOutput values.
// You can construct a concrete instance of `DataItemMigrationSummaryResultResponseMapInput` via:
//
//          DataItemMigrationSummaryResultResponseMap{ "key": DataItemMigrationSummaryResultResponseArgs{...} }
type DataItemMigrationSummaryResultResponseMapInput interface {
	pulumi.Input

	ToDataItemMigrationSummaryResultResponseMapOutput() DataItemMigrationSummaryResultResponseMapOutput
	ToDataItemMigrationSummaryResultResponseMapOutputWithContext(context.Context) DataItemMigrationSummaryResultResponseMapOutput
}

type DataItemMigrationSummaryResultResponseMap map[string]DataItemMigrationSummaryResultResponseInput

func (DataItemMigrationSummaryResultResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (i DataItemMigrationSummaryResultResponseMap) ToDataItemMigrationSummaryResultResponseMapOutput() DataItemMigrationSummaryResultResponseMapOutput {
	return i.ToDataItemMigrationSummaryResultResponseMapOutputWithContext(context.Background())
}

func (i DataItemMigrationSummaryResultResponseMap) ToDataItemMigrationSummaryResultResponseMapOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataItemMigrationSummaryResultResponseMapOutput)
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (DataItemMigrationSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (o DataItemMigrationSummaryResultResponseOutput) ToDataItemMigrationSummaryResultResponseOutput() DataItemMigrationSummaryResultResponseOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseOutput) ToDataItemMigrationSummaryResultResponseOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseOutput {
	return o
}

// Migration end time
func (o DataItemMigrationSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o DataItemMigrationSummaryResultResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o DataItemMigrationSummaryResultResponseOutput) ItemsCompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) int { return v.ItemsCompletedCount }).(pulumi.IntOutput)
}

// Number of items
func (o DataItemMigrationSummaryResultResponseOutput) ItemsCount() pulumi.IntOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) int { return v.ItemsCount }).(pulumi.IntOutput)
}

// Name of the item
func (o DataItemMigrationSummaryResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o DataItemMigrationSummaryResultResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Migration start time
func (o DataItemMigrationSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o DataItemMigrationSummaryResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o DataItemMigrationSummaryResultResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type DataItemMigrationSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (DataItemMigrationSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (o DataItemMigrationSummaryResultResponseMapOutput) ToDataItemMigrationSummaryResultResponseMapOutput() DataItemMigrationSummaryResultResponseMapOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseMapOutput) ToDataItemMigrationSummaryResultResponseMapOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseMapOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) DataItemMigrationSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataItemMigrationSummaryResultResponse {
		return vs[0].(map[string]DataItemMigrationSummaryResultResponse)[vs[1].(string)]
	}).(DataItemMigrationSummaryResultResponseOutput)
}

// Information about backup files when existing backup mode is used.
type DatabaseBackupInfoResponse struct {
	// The list of backup files for the current database.
	BackupFiles []string `pulumi:"backupFiles"`
	// Date and time when the backup operation finished.
	BackupFinishDate string `pulumi:"backupFinishDate"`
	// Backup Type.
	BackupType string `pulumi:"backupType"`
	// Database name.
	DatabaseName string `pulumi:"databaseName"`
	// Number of files in the backup set.
	FamilyCount int `pulumi:"familyCount"`
	// Whether the backup set is compressed
	IsCompressed bool `pulumi:"isCompressed"`
	// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
	IsDamaged bool `pulumi:"isDamaged"`
	// Position of current database backup in the file.
	Position int `pulumi:"position"`
}

// DatabaseBackupInfoResponseInput is an input type that accepts DatabaseBackupInfoResponseArgs and DatabaseBackupInfoResponseOutput values.
// You can construct a concrete instance of `DatabaseBackupInfoResponseInput` via:
//
//          DatabaseBackupInfoResponseArgs{...}
type DatabaseBackupInfoResponseInput interface {
	pulumi.Input

	ToDatabaseBackupInfoResponseOutput() DatabaseBackupInfoResponseOutput
	ToDatabaseBackupInfoResponseOutputWithContext(context.Context) DatabaseBackupInfoResponseOutput
}

// Information about backup files when existing backup mode is used.
type DatabaseBackupInfoResponseArgs struct {
	// The list of backup files for the current database.
	BackupFiles pulumi.StringArrayInput `pulumi:"backupFiles"`
	// Date and time when the backup operation finished.
	BackupFinishDate pulumi.StringInput `pulumi:"backupFinishDate"`
	// Backup Type.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// Database name.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Number of files in the backup set.
	FamilyCount pulumi.IntInput `pulumi:"familyCount"`
	// Whether the backup set is compressed
	IsCompressed pulumi.BoolInput `pulumi:"isCompressed"`
	// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
	IsDamaged pulumi.BoolInput `pulumi:"isDamaged"`
	// Position of current database backup in the file.
	Position pulumi.IntInput `pulumi:"position"`
}

func (DatabaseBackupInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackupInfoResponse)(nil)).Elem()
}

func (i DatabaseBackupInfoResponseArgs) ToDatabaseBackupInfoResponseOutput() DatabaseBackupInfoResponseOutput {
	return i.ToDatabaseBackupInfoResponseOutputWithContext(context.Background())
}

func (i DatabaseBackupInfoResponseArgs) ToDatabaseBackupInfoResponseOutputWithContext(ctx context.Context) DatabaseBackupInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupInfoResponseOutput)
}

func (i DatabaseBackupInfoResponseArgs) ToDatabaseBackupInfoResponsePtrOutput() DatabaseBackupInfoResponsePtrOutput {
	return i.ToDatabaseBackupInfoResponsePtrOutputWithContext(context.Background())
}

func (i DatabaseBackupInfoResponseArgs) ToDatabaseBackupInfoResponsePtrOutputWithContext(ctx context.Context) DatabaseBackupInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupInfoResponseOutput).ToDatabaseBackupInfoResponsePtrOutputWithContext(ctx)
}

// DatabaseBackupInfoResponsePtrInput is an input type that accepts DatabaseBackupInfoResponseArgs, DatabaseBackupInfoResponsePtr and DatabaseBackupInfoResponsePtrOutput values.
// You can construct a concrete instance of `DatabaseBackupInfoResponsePtrInput` via:
//
//          DatabaseBackupInfoResponseArgs{...}
//
//  or:
//
//          nil
type DatabaseBackupInfoResponsePtrInput interface {
	pulumi.Input

	ToDatabaseBackupInfoResponsePtrOutput() DatabaseBackupInfoResponsePtrOutput
	ToDatabaseBackupInfoResponsePtrOutputWithContext(context.Context) DatabaseBackupInfoResponsePtrOutput
}

type databaseBackupInfoResponsePtrType DatabaseBackupInfoResponseArgs

func DatabaseBackupInfoResponsePtr(v *DatabaseBackupInfoResponseArgs) DatabaseBackupInfoResponsePtrInput {
	return (*databaseBackupInfoResponsePtrType)(v)
}

func (*databaseBackupInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseBackupInfoResponse)(nil)).Elem()
}

func (i *databaseBackupInfoResponsePtrType) ToDatabaseBackupInfoResponsePtrOutput() DatabaseBackupInfoResponsePtrOutput {
	return i.ToDatabaseBackupInfoResponsePtrOutputWithContext(context.Background())
}

func (i *databaseBackupInfoResponsePtrType) ToDatabaseBackupInfoResponsePtrOutputWithContext(ctx context.Context) DatabaseBackupInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupInfoResponsePtrOutput)
}

// Information about backup files when existing backup mode is used.
type DatabaseBackupInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseBackupInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackupInfoResponse)(nil)).Elem()
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponseOutput() DatabaseBackupInfoResponseOutput {
	return o
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponseOutputWithContext(ctx context.Context) DatabaseBackupInfoResponseOutput {
	return o
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponsePtrOutput() DatabaseBackupInfoResponsePtrOutput {
	return o.ToDatabaseBackupInfoResponsePtrOutputWithContext(context.Background())
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponsePtrOutputWithContext(ctx context.Context) DatabaseBackupInfoResponsePtrOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) *DatabaseBackupInfoResponse {
		return &v
	}).(DatabaseBackupInfoResponsePtrOutput)
}

// The list of backup files for the current database.
func (o DatabaseBackupInfoResponseOutput) BackupFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) []string { return v.BackupFiles }).(pulumi.StringArrayOutput)
}

// Date and time when the backup operation finished.
func (o DatabaseBackupInfoResponseOutput) BackupFinishDate() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.BackupFinishDate }).(pulumi.StringOutput)
}

// Backup Type.
func (o DatabaseBackupInfoResponseOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.BackupType }).(pulumi.StringOutput)
}

// Database name.
func (o DatabaseBackupInfoResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Number of files in the backup set.
func (o DatabaseBackupInfoResponseOutput) FamilyCount() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) int { return v.FamilyCount }).(pulumi.IntOutput)
}

// Whether the backup set is compressed
func (o DatabaseBackupInfoResponseOutput) IsCompressed() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) bool { return v.IsCompressed }).(pulumi.BoolOutput)
}

// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
func (o DatabaseBackupInfoResponseOutput) IsDamaged() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) bool { return v.IsDamaged }).(pulumi.BoolOutput)
}

// Position of current database backup in the file.
func (o DatabaseBackupInfoResponseOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) int { return v.Position }).(pulumi.IntOutput)
}

type DatabaseBackupInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseBackupInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseBackupInfoResponse)(nil)).Elem()
}

func (o DatabaseBackupInfoResponsePtrOutput) ToDatabaseBackupInfoResponsePtrOutput() DatabaseBackupInfoResponsePtrOutput {
	return o
}

func (o DatabaseBackupInfoResponsePtrOutput) ToDatabaseBackupInfoResponsePtrOutputWithContext(ctx context.Context) DatabaseBackupInfoResponsePtrOutput {
	return o
}

func (o DatabaseBackupInfoResponsePtrOutput) Elem() DatabaseBackupInfoResponseOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) DatabaseBackupInfoResponse { return *v }).(DatabaseBackupInfoResponseOutput)
}

// The list of backup files for the current database.
func (o DatabaseBackupInfoResponsePtrOutput) BackupFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.BackupFiles
	}).(pulumi.StringArrayOutput)
}

// Date and time when the backup operation finished.
func (o DatabaseBackupInfoResponsePtrOutput) BackupFinishDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupFinishDate
	}).(pulumi.StringPtrOutput)
}

// Backup Type.
func (o DatabaseBackupInfoResponsePtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// Database name.
func (o DatabaseBackupInfoResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Number of files in the backup set.
func (o DatabaseBackupInfoResponsePtrOutput) FamilyCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FamilyCount
	}).(pulumi.IntPtrOutput)
}

// Whether the backup set is compressed
func (o DatabaseBackupInfoResponsePtrOutput) IsCompressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsCompressed
	}).(pulumi.BoolPtrOutput)
}

// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
func (o DatabaseBackupInfoResponsePtrOutput) IsDamaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDamaged
	}).(pulumi.BoolPtrOutput)
}

// Position of current database backup in the file.
func (o DatabaseBackupInfoResponsePtrOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Position
	}).(pulumi.IntPtrOutput)
}

// Database file specific information
type DatabaseFileInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Database file type
	FileType *string `pulumi:"fileType"`
	// Unique identifier for database file
	Id *string `pulumi:"id"`
	// Logical name of the file
	LogicalName *string `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName *string `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName *string `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB *float64 `pulumi:"sizeMB"`
}

// DatabaseFileInfoResponseInput is an input type that accepts DatabaseFileInfoResponseArgs and DatabaseFileInfoResponseOutput values.
// You can construct a concrete instance of `DatabaseFileInfoResponseInput` via:
//
//          DatabaseFileInfoResponseArgs{...}
type DatabaseFileInfoResponseInput interface {
	pulumi.Input

	ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput
	ToDatabaseFileInfoResponseOutputWithContext(context.Context) DatabaseFileInfoResponseOutput
}

// Database file specific information
type DatabaseFileInfoResponseArgs struct {
	// Name of the database
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Database file type
	FileType pulumi.StringPtrInput `pulumi:"fileType"`
	// Unique identifier for database file
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Logical name of the file
	LogicalName pulumi.StringPtrInput `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName pulumi.StringPtrInput `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName pulumi.StringPtrInput `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB pulumi.Float64PtrInput `pulumi:"sizeMB"`
}

func (DatabaseFileInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoResponse)(nil)).Elem()
}

func (i DatabaseFileInfoResponseArgs) ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput {
	return i.ToDatabaseFileInfoResponseOutputWithContext(context.Background())
}

func (i DatabaseFileInfoResponseArgs) ToDatabaseFileInfoResponseOutputWithContext(ctx context.Context) DatabaseFileInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFileInfoResponseOutput)
}

// DatabaseFileInfoResponseArrayInput is an input type that accepts DatabaseFileInfoResponseArray and DatabaseFileInfoResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseFileInfoResponseArrayInput` via:
//
//          DatabaseFileInfoResponseArray{ DatabaseFileInfoResponseArgs{...} }
type DatabaseFileInfoResponseArrayInput interface {
	pulumi.Input

	ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput
	ToDatabaseFileInfoResponseArrayOutputWithContext(context.Context) DatabaseFileInfoResponseArrayOutput
}

type DatabaseFileInfoResponseArray []DatabaseFileInfoResponseInput

func (DatabaseFileInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoResponse)(nil)).Elem()
}

func (i DatabaseFileInfoResponseArray) ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput {
	return i.ToDatabaseFileInfoResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseFileInfoResponseArray) ToDatabaseFileInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFileInfoResponseArrayOutput)
}

// Database file specific information
type DatabaseFileInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput {
	return o
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutputWithContext(ctx context.Context) DatabaseFileInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseFileInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Database file type
func (o DatabaseFileInfoResponseOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.FileType }).(pulumi.StringPtrOutput)
}

// Unique identifier for database file
func (o DatabaseFileInfoResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Logical name of the file
func (o DatabaseFileInfoResponseOutput) LogicalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.LogicalName }).(pulumi.StringPtrOutput)
}

// Operating-system full path of the file
func (o DatabaseFileInfoResponseOutput) PhysicalFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.PhysicalFullName }).(pulumi.StringPtrOutput)
}

// Suggested full path of the file for restoring
func (o DatabaseFileInfoResponseOutput) RestoreFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.RestoreFullName }).(pulumi.StringPtrOutput)
}

// Size of the file in megabytes
func (o DatabaseFileInfoResponseOutput) SizeMB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *float64 { return v.SizeMB }).(pulumi.Float64PtrOutput)
}

type DatabaseFileInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseFileInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFileInfoResponse {
		return vs[0].([]DatabaseFileInfoResponse)[vs[1].(int)]
	}).(DatabaseFileInfoResponseOutput)
}

// Project Database Details
type DatabaseInfo struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInput is an input type that accepts DatabaseInfoArgs and DatabaseInfoOutput values.
// You can construct a concrete instance of `DatabaseInfoInput` via:
//
//          DatabaseInfoArgs{...}
type DatabaseInfoInput interface {
	pulumi.Input

	ToDatabaseInfoOutput() DatabaseInfoOutput
	ToDatabaseInfoOutputWithContext(context.Context) DatabaseInfoOutput
}

// Project Database Details
type DatabaseInfoArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return i.ToDatabaseInfoOutputWithContext(context.Background())
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoOutput)
}

// DatabaseInfoArrayInput is an input type that accepts DatabaseInfoArray and DatabaseInfoArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoArrayInput` via:
//
//          DatabaseInfoArray{ DatabaseInfoArgs{...} }
type DatabaseInfoArrayInput interface {
	pulumi.Input

	ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput
	ToDatabaseInfoArrayOutputWithContext(context.Context) DatabaseInfoArrayOutput
}

type DatabaseInfoArray []DatabaseInfoInput

func (DatabaseInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return i.ToDatabaseInfoArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoArrayOutput)
}

// Project Database Details
type DatabaseInfoOutput struct{ *pulumi.OutputState }

func (DatabaseInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return o
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return o
}

// Name of the database
func (o DatabaseInfoOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfo) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) Index(i pulumi.IntInput) DatabaseInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfo {
		return vs[0].([]DatabaseInfo)[vs[1].(int)]
	}).(DatabaseInfoOutput)
}

// Project Database Details
type DatabaseInfoResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoResponseInput is an input type that accepts DatabaseInfoResponseArgs and DatabaseInfoResponseOutput values.
// You can construct a concrete instance of `DatabaseInfoResponseInput` via:
//
//          DatabaseInfoResponseArgs{...}
type DatabaseInfoResponseInput interface {
	pulumi.Input

	ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput
	ToDatabaseInfoResponseOutputWithContext(context.Context) DatabaseInfoResponseOutput
}

// Project Database Details
type DatabaseInfoResponseArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (i DatabaseInfoResponseArgs) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return i.ToDatabaseInfoResponseOutputWithContext(context.Background())
}

func (i DatabaseInfoResponseArgs) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoResponseOutput)
}

// DatabaseInfoResponseArrayInput is an input type that accepts DatabaseInfoResponseArray and DatabaseInfoResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoResponseArrayInput` via:
//
//          DatabaseInfoResponseArray{ DatabaseInfoResponseArgs{...} }
type DatabaseInfoResponseArrayInput interface {
	pulumi.Input

	ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput
	ToDatabaseInfoResponseArrayOutputWithContext(context.Context) DatabaseInfoResponseArrayOutput
}

type DatabaseInfoResponseArray []DatabaseInfoResponseInput

func (DatabaseInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (i DatabaseInfoResponseArray) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return i.ToDatabaseInfoResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoResponseArray) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoResponseArrayOutput)
}

// Project Database Details
type DatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return o
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoResponse {
		return vs[0].([]DatabaseInfoResponse)[vs[1].(int)]
	}).(DatabaseInfoResponseOutput)
}

// Summary of database results in the migration
type DatabaseSummaryResultResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount int `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount int `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// DatabaseSummaryResultResponseInput is an input type that accepts DatabaseSummaryResultResponseArgs and DatabaseSummaryResultResponseOutput values.
// You can construct a concrete instance of `DatabaseSummaryResultResponseInput` via:
//
//          DatabaseSummaryResultResponseArgs{...}
type DatabaseSummaryResultResponseInput interface {
	pulumi.Input

	ToDatabaseSummaryResultResponseOutput() DatabaseSummaryResultResponseOutput
	ToDatabaseSummaryResultResponseOutputWithContext(context.Context) DatabaseSummaryResultResponseOutput
}

// Summary of database results in the migration
type DatabaseSummaryResultResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.IntInput `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.IntInput `pulumi:"itemsCount"`
	// Name of the item
	Name pulumi.StringInput `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Size of the database in megabytes
	SizeMB pulumi.Float64Input `pulumi:"sizeMB"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (DatabaseSummaryResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSummaryResultResponse)(nil)).Elem()
}

func (i DatabaseSummaryResultResponseArgs) ToDatabaseSummaryResultResponseOutput() DatabaseSummaryResultResponseOutput {
	return i.ToDatabaseSummaryResultResponseOutputWithContext(context.Background())
}

func (i DatabaseSummaryResultResponseArgs) ToDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSummaryResultResponseOutput)
}

// DatabaseSummaryResultResponseMapInput is an input type that accepts DatabaseSummaryResultResponseMap and DatabaseSummaryResultResponseMapOutput values.
// You can construct a concrete instance of `DatabaseSummaryResultResponseMapInput` via:
//
//          DatabaseSummaryResultResponseMap{ "key": DatabaseSummaryResultResponseArgs{...} }
type DatabaseSummaryResultResponseMapInput interface {
	pulumi.Input

	ToDatabaseSummaryResultResponseMapOutput() DatabaseSummaryResultResponseMapOutput
	ToDatabaseSummaryResultResponseMapOutputWithContext(context.Context) DatabaseSummaryResultResponseMapOutput
}

type DatabaseSummaryResultResponseMap map[string]DatabaseSummaryResultResponseInput

func (DatabaseSummaryResultResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseSummaryResultResponse)(nil)).Elem()
}

func (i DatabaseSummaryResultResponseMap) ToDatabaseSummaryResultResponseMapOutput() DatabaseSummaryResultResponseMapOutput {
	return i.ToDatabaseSummaryResultResponseMapOutputWithContext(context.Background())
}

func (i DatabaseSummaryResultResponseMap) ToDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSummaryResultResponseMapOutput)
}

// Summary of database results in the migration
type DatabaseSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (DatabaseSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSummaryResultResponse)(nil)).Elem()
}

func (o DatabaseSummaryResultResponseOutput) ToDatabaseSummaryResultResponseOutput() DatabaseSummaryResultResponseOutput {
	return o
}

func (o DatabaseSummaryResultResponseOutput) ToDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseOutput {
	return o
}

// Migration end time
func (o DatabaseSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o DatabaseSummaryResultResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o DatabaseSummaryResultResponseOutput) ItemsCompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) int { return v.ItemsCompletedCount }).(pulumi.IntOutput)
}

// Number of items
func (o DatabaseSummaryResultResponseOutput) ItemsCount() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) int { return v.ItemsCount }).(pulumi.IntOutput)
}

// Name of the item
func (o DatabaseSummaryResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o DatabaseSummaryResultResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Size of the database in megabytes
func (o DatabaseSummaryResultResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Migration start time
func (o DatabaseSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o DatabaseSummaryResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o DatabaseSummaryResultResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type DatabaseSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (DatabaseSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseSummaryResultResponse)(nil)).Elem()
}

func (o DatabaseSummaryResultResponseMapOutput) ToDatabaseSummaryResultResponseMapOutput() DatabaseSummaryResultResponseMapOutput {
	return o
}

func (o DatabaseSummaryResultResponseMapOutput) ToDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseMapOutput {
	return o
}

func (o DatabaseSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) DatabaseSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseSummaryResultResponse {
		return vs[0].(map[string]DatabaseSummaryResultResponse)[vs[1].(string)]
	}).(DatabaseSummaryResultResponseOutput)
}

// Table properties
type DatabaseTableResponse struct {
	// Indicates whether table is empty or not
	HasRows bool `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name string `pulumi:"name"`
}

// DatabaseTableResponseInput is an input type that accepts DatabaseTableResponseArgs and DatabaseTableResponseOutput values.
// You can construct a concrete instance of `DatabaseTableResponseInput` via:
//
//          DatabaseTableResponseArgs{...}
type DatabaseTableResponseInput interface {
	pulumi.Input

	ToDatabaseTableResponseOutput() DatabaseTableResponseOutput
	ToDatabaseTableResponseOutputWithContext(context.Context) DatabaseTableResponseOutput
}

// Table properties
type DatabaseTableResponseArgs struct {
	// Indicates whether table is empty or not
	HasRows pulumi.BoolInput `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name pulumi.StringInput `pulumi:"name"`
}

func (DatabaseTableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTableResponse)(nil)).Elem()
}

func (i DatabaseTableResponseArgs) ToDatabaseTableResponseOutput() DatabaseTableResponseOutput {
	return i.ToDatabaseTableResponseOutputWithContext(context.Background())
}

func (i DatabaseTableResponseArgs) ToDatabaseTableResponseOutputWithContext(ctx context.Context) DatabaseTableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTableResponseOutput)
}

// DatabaseTableResponseArrayInput is an input type that accepts DatabaseTableResponseArray and DatabaseTableResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseTableResponseArrayInput` via:
//
//          DatabaseTableResponseArray{ DatabaseTableResponseArgs{...} }
type DatabaseTableResponseArrayInput interface {
	pulumi.Input

	ToDatabaseTableResponseArrayOutput() DatabaseTableResponseArrayOutput
	ToDatabaseTableResponseArrayOutputWithContext(context.Context) DatabaseTableResponseArrayOutput
}

type DatabaseTableResponseArray []DatabaseTableResponseInput

func (DatabaseTableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTableResponse)(nil)).Elem()
}

func (i DatabaseTableResponseArray) ToDatabaseTableResponseArrayOutput() DatabaseTableResponseArrayOutput {
	return i.ToDatabaseTableResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseTableResponseArray) ToDatabaseTableResponseArrayOutputWithContext(ctx context.Context) DatabaseTableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTableResponseArrayOutput)
}

// Table properties
type DatabaseTableResponseOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseOutput) ToDatabaseTableResponseOutput() DatabaseTableResponseOutput {
	return o
}

func (o DatabaseTableResponseOutput) ToDatabaseTableResponseOutputWithContext(ctx context.Context) DatabaseTableResponseOutput {
	return o
}

// Indicates whether table is empty or not
func (o DatabaseTableResponseOutput) HasRows() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseTableResponse) bool { return v.HasRows }).(pulumi.BoolOutput)
}

// Schema-qualified name of the table
func (o DatabaseTableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTableResponse) string { return v.Name }).(pulumi.StringOutput)
}

type DatabaseTableResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseArrayOutput) ToDatabaseTableResponseArrayOutput() DatabaseTableResponseArrayOutput {
	return o
}

func (o DatabaseTableResponseArrayOutput) ToDatabaseTableResponseArrayOutputWithContext(ctx context.Context) DatabaseTableResponseArrayOutput {
	return o
}

func (o DatabaseTableResponseArrayOutput) Index(i pulumi.IntInput) DatabaseTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseTableResponse {
		return vs[0].([]DatabaseTableResponse)[vs[1].(int)]
	}).(DatabaseTableResponseOutput)
}

// File share information with Path, Username, and Password.
type FileShare struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// FileShareInput is an input type that accepts FileShareArgs and FileShareOutput values.
// You can construct a concrete instance of `FileShareInput` via:
//
//          FileShareArgs{...}
type FileShareInput interface {
	pulumi.Input

	ToFileShareOutput() FileShareOutput
	ToFileShareOutputWithContext(context.Context) FileShareOutput
}

// File share information with Path, Username, and Password.
type FileShareArgs struct {
	// Password credential used to connect to the share location.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The folder path for this share.
	Path pulumi.StringInput `pulumi:"path"`
	// User name credential to connect to the share location
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (FileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil)).Elem()
}

func (i FileShareArgs) ToFileShareOutput() FileShareOutput {
	return i.ToFileShareOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput)
}

func (i FileShareArgs) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput).ToFileSharePtrOutputWithContext(ctx)
}

// FileSharePtrInput is an input type that accepts FileShareArgs, FileSharePtr and FileSharePtrOutput values.
// You can construct a concrete instance of `FileSharePtrInput` via:
//
//          FileShareArgs{...}
//
//  or:
//
//          nil
type FileSharePtrInput interface {
	pulumi.Input

	ToFileSharePtrOutput() FileSharePtrOutput
	ToFileSharePtrOutputWithContext(context.Context) FileSharePtrOutput
}

type fileSharePtrType FileShareArgs

func FileSharePtr(v *FileShareArgs) FileSharePtrInput {
	return (*fileSharePtrType)(v)
}

func (*fileSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShare)(nil)).Elem()
}

func (i *fileSharePtrType) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i *fileSharePtrType) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSharePtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareOutput struct{ *pulumi.OutputState }

func (FileShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil)).Elem()
}

func (o FileShareOutput) ToFileShareOutput() FileShareOutput {
	return o
}

func (o FileShareOutput) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return o
}

func (o FileShareOutput) ToFileSharePtrOutput() FileSharePtrOutput {
	return o.ToFileSharePtrOutputWithContext(context.Background())
}

func (o FileShareOutput) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return o.ApplyT(func(v FileShare) *FileShare {
		return &v
	}).(FileSharePtrOutput)
}

// Password credential used to connect to the share location.
func (o FileShareOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShare) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShare) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShare) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileSharePtrOutput struct{ *pulumi.OutputState }

func (FileSharePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShare)(nil)).Elem()
}

func (o FileSharePtrOutput) ToFileSharePtrOutput() FileSharePtrOutput {
	return o
}

func (o FileSharePtrOutput) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return o
}

func (o FileSharePtrOutput) Elem() FileShareOutput {
	return o.ApplyT(func(v *FileShare) FileShare { return *v }).(FileShareOutput)
}

// Password credential used to connect to the share location.
func (o FileSharePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileSharePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileSharePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareResponse struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// FileShareResponseInput is an input type that accepts FileShareResponseArgs and FileShareResponseOutput values.
// You can construct a concrete instance of `FileShareResponseInput` via:
//
//          FileShareResponseArgs{...}
type FileShareResponseInput interface {
	pulumi.Input

	ToFileShareResponseOutput() FileShareResponseOutput
	ToFileShareResponseOutputWithContext(context.Context) FileShareResponseOutput
}

// File share information with Path, Username, and Password.
type FileShareResponseArgs struct {
	// Password credential used to connect to the share location.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The folder path for this share.
	Path pulumi.StringInput `pulumi:"path"`
	// User name credential to connect to the share location
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (FileShareResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareResponse)(nil)).Elem()
}

func (i FileShareResponseArgs) ToFileShareResponseOutput() FileShareResponseOutput {
	return i.ToFileShareResponseOutputWithContext(context.Background())
}

func (i FileShareResponseArgs) ToFileShareResponseOutputWithContext(ctx context.Context) FileShareResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareResponseOutput)
}

func (i FileShareResponseArgs) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return i.ToFileShareResponsePtrOutputWithContext(context.Background())
}

func (i FileShareResponseArgs) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareResponseOutput).ToFileShareResponsePtrOutputWithContext(ctx)
}

// FileShareResponsePtrInput is an input type that accepts FileShareResponseArgs, FileShareResponsePtr and FileShareResponsePtrOutput values.
// You can construct a concrete instance of `FileShareResponsePtrInput` via:
//
//          FileShareResponseArgs{...}
//
//  or:
//
//          nil
type FileShareResponsePtrInput interface {
	pulumi.Input

	ToFileShareResponsePtrOutput() FileShareResponsePtrOutput
	ToFileShareResponsePtrOutputWithContext(context.Context) FileShareResponsePtrOutput
}

type fileShareResponsePtrType FileShareResponseArgs

func FileShareResponsePtr(v *FileShareResponseArgs) FileShareResponsePtrInput {
	return (*fileShareResponsePtrType)(v)
}

func (*fileShareResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareResponse)(nil)).Elem()
}

func (i *fileShareResponsePtrType) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return i.ToFileShareResponsePtrOutputWithContext(context.Background())
}

func (i *fileShareResponsePtrType) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareResponsePtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareResponseOutput struct{ *pulumi.OutputState }

func (FileShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareResponse)(nil)).Elem()
}

func (o FileShareResponseOutput) ToFileShareResponseOutput() FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponseOutputWithContext(ctx context.Context) FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o.ToFileShareResponsePtrOutputWithContext(context.Background())
}

func (o FileShareResponseOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o.ApplyT(func(v FileShareResponse) *FileShareResponse {
		return &v
	}).(FileShareResponsePtrOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareResponse) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileShareResponsePtrOutput struct{ *pulumi.OutputState }

func (FileShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareResponse)(nil)).Elem()
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) Elem() FileShareResponseOutput {
	return o.ApplyT(func(v *FileShareResponse) FileShareResponse { return *v }).(FileShareResponseOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileShareResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInput struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShare `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates []SelectedCertificateInput `pulumi:"selectedCertificates"`
}

// GetTdeCertificatesSqlTaskInputInput is an input type that accepts GetTdeCertificatesSqlTaskInputArgs and GetTdeCertificatesSqlTaskInputOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskInputInput` via:
//
//          GetTdeCertificatesSqlTaskInputArgs{...}
type GetTdeCertificatesSqlTaskInputInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskInputOutput() GetTdeCertificatesSqlTaskInputOutput
	ToGetTdeCertificatesSqlTaskInputOutputWithContext(context.Context) GetTdeCertificatesSqlTaskInputOutput
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputArgs struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShareInput `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates SelectedCertificateInputArrayInput `pulumi:"selectedCertificates"`
}

func (GetTdeCertificatesSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputOutput() GetTdeCertificatesSqlTaskInputOutput {
	return i.ToGetTdeCertificatesSqlTaskInputOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputOutput)
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return i.ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputOutput).ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx)
}

// GetTdeCertificatesSqlTaskInputPtrInput is an input type that accepts GetTdeCertificatesSqlTaskInputArgs, GetTdeCertificatesSqlTaskInputPtr and GetTdeCertificatesSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskInputPtrInput` via:
//
//          GetTdeCertificatesSqlTaskInputArgs{...}
//
//  or:
//
//          nil
type GetTdeCertificatesSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput
	ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Context) GetTdeCertificatesSqlTaskInputPtrOutput
}

type getTdeCertificatesSqlTaskInputPtrType GetTdeCertificatesSqlTaskInputArgs

func GetTdeCertificatesSqlTaskInputPtr(v *GetTdeCertificatesSqlTaskInputArgs) GetTdeCertificatesSqlTaskInputPtrInput {
	return (*getTdeCertificatesSqlTaskInputPtrType)(v)
}

func (*getTdeCertificatesSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (i *getTdeCertificatesSqlTaskInputPtrType) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return i.ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getTdeCertificatesSqlTaskInputPtrType) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputPtrOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputOutput) ToGetTdeCertificatesSqlTaskInputOutput() GetTdeCertificatesSqlTaskInputOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputOutput) ToGetTdeCertificatesSqlTaskInputOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputOutput) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return o.ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (o GetTdeCertificatesSqlTaskInputOutput) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInput) *GetTdeCertificatesSqlTaskInput {
		return &v
	}).(GetTdeCertificatesSqlTaskInputPtrOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputOutput) BackupFileShare() FileShareOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInput) FileShare { return v.BackupFileShare }).(FileShareOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputOutput) ConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInput) SqlConnectionInfo { return v.ConnectionInfo }).(SqlConnectionInfoOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputOutput) SelectedCertificates() SelectedCertificateInputArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInput) []SelectedCertificateInput { return v.SelectedCertificates }).(SelectedCertificateInputArrayOutput)
}

type GetTdeCertificatesSqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputPtrOutput) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputPtrOutput) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputPtrOutput) Elem() GetTdeCertificatesSqlTaskInputOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInput) GetTdeCertificatesSqlTaskInput { return *v }).(GetTdeCertificatesSqlTaskInputOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return &v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputPtrOutput) ConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputPtrOutput) SelectedCertificates() SelectedCertificateInputArrayOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInput) []SelectedCertificateInput {
		if v == nil {
			return nil
		}
		return v.SelectedCertificates
	}).(SelectedCertificateInputArrayOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputResponse struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShareResponse `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates []SelectedCertificateInputResponse `pulumi:"selectedCertificates"`
}

// GetTdeCertificatesSqlTaskInputResponseInput is an input type that accepts GetTdeCertificatesSqlTaskInputResponseArgs and GetTdeCertificatesSqlTaskInputResponseOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskInputResponseInput` via:
//
//          GetTdeCertificatesSqlTaskInputResponseArgs{...}
type GetTdeCertificatesSqlTaskInputResponseInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskInputResponseOutput() GetTdeCertificatesSqlTaskInputResponseOutput
	ToGetTdeCertificatesSqlTaskInputResponseOutputWithContext(context.Context) GetTdeCertificatesSqlTaskInputResponseOutput
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputResponseArgs struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShareResponseInput `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponseInput `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates SelectedCertificateInputResponseArrayInput `pulumi:"selectedCertificates"`
}

func (GetTdeCertificatesSqlTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInputResponse)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskInputResponseArgs) ToGetTdeCertificatesSqlTaskInputResponseOutput() GetTdeCertificatesSqlTaskInputResponseOutput {
	return i.ToGetTdeCertificatesSqlTaskInputResponseOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskInputResponseArgs) ToGetTdeCertificatesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputResponseOutput)
}

func (i GetTdeCertificatesSqlTaskInputResponseArgs) ToGetTdeCertificatesSqlTaskInputResponsePtrOutput() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return i.ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskInputResponseArgs) ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputResponseOutput).ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(ctx)
}

// GetTdeCertificatesSqlTaskInputResponsePtrInput is an input type that accepts GetTdeCertificatesSqlTaskInputResponseArgs, GetTdeCertificatesSqlTaskInputResponsePtr and GetTdeCertificatesSqlTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskInputResponsePtrInput` via:
//
//          GetTdeCertificatesSqlTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type GetTdeCertificatesSqlTaskInputResponsePtrInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskInputResponsePtrOutput() GetTdeCertificatesSqlTaskInputResponsePtrOutput
	ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(context.Context) GetTdeCertificatesSqlTaskInputResponsePtrOutput
}

type getTdeCertificatesSqlTaskInputResponsePtrType GetTdeCertificatesSqlTaskInputResponseArgs

func GetTdeCertificatesSqlTaskInputResponsePtr(v *GetTdeCertificatesSqlTaskInputResponseArgs) GetTdeCertificatesSqlTaskInputResponsePtrInput {
	return (*getTdeCertificatesSqlTaskInputResponsePtrType)(v)
}

func (*getTdeCertificatesSqlTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInputResponse)(nil)).Elem()
}

func (i *getTdeCertificatesSqlTaskInputResponsePtrType) ToGetTdeCertificatesSqlTaskInputResponsePtrOutput() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return i.ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *getTdeCertificatesSqlTaskInputResponsePtrType) ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputResponsePtrOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponseOutput() GetTdeCertificatesSqlTaskInputResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutput() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o.ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) *GetTdeCertificatesSqlTaskInputResponse {
		return &v
	}).(GetTdeCertificatesSqlTaskInputResponsePtrOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputResponseOutput) BackupFileShare() FileShareResponseOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) FileShareResponse { return v.BackupFileShare }).(FileShareResponseOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputResponseOutput) ConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) SqlConnectionInfoResponse { return v.ConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputResponseOutput) SelectedCertificates() SelectedCertificateInputResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) []SelectedCertificateInputResponse {
		return v.SelectedCertificates
	}).(SelectedCertificateInputResponseArrayOutput)
}

type GetTdeCertificatesSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutput() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) Elem() GetTdeCertificatesSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) GetTdeCertificatesSqlTaskInputResponse { return *v }).(GetTdeCertificatesSqlTaskInputResponseOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) SelectedCertificates() SelectedCertificateInputResponseArrayOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) []SelectedCertificateInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedCertificates
	}).(SelectedCertificateInputResponseArrayOutput)
}

// Output of the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskOutputResponse struct {
	// Mapping from certificate name to base 64 encoded format.
	Base64EncodedCertificates map[string][]string `pulumi:"base64EncodedCertificates"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// GetTdeCertificatesSqlTaskOutputResponseInput is an input type that accepts GetTdeCertificatesSqlTaskOutputResponseArgs and GetTdeCertificatesSqlTaskOutputResponseOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskOutputResponseInput` via:
//
//          GetTdeCertificatesSqlTaskOutputResponseArgs{...}
type GetTdeCertificatesSqlTaskOutputResponseInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskOutputResponseOutput() GetTdeCertificatesSqlTaskOutputResponseOutput
	ToGetTdeCertificatesSqlTaskOutputResponseOutputWithContext(context.Context) GetTdeCertificatesSqlTaskOutputResponseOutput
}

// Output of the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskOutputResponseArgs struct {
	// Mapping from certificate name to base 64 encoded format.
	Base64EncodedCertificates pulumi.StringArrayMapInput `pulumi:"base64EncodedCertificates"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (GetTdeCertificatesSqlTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskOutputResponse)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskOutputResponseArgs) ToGetTdeCertificatesSqlTaskOutputResponseOutput() GetTdeCertificatesSqlTaskOutputResponseOutput {
	return i.ToGetTdeCertificatesSqlTaskOutputResponseOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskOutputResponseArgs) ToGetTdeCertificatesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskOutputResponseOutput)
}

// GetTdeCertificatesSqlTaskOutputResponseArrayInput is an input type that accepts GetTdeCertificatesSqlTaskOutputResponseArray and GetTdeCertificatesSqlTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskOutputResponseArrayInput` via:
//
//          GetTdeCertificatesSqlTaskOutputResponseArray{ GetTdeCertificatesSqlTaskOutputResponseArgs{...} }
type GetTdeCertificatesSqlTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskOutputResponseArrayOutput() GetTdeCertificatesSqlTaskOutputResponseArrayOutput
	ToGetTdeCertificatesSqlTaskOutputResponseArrayOutputWithContext(context.Context) GetTdeCertificatesSqlTaskOutputResponseArrayOutput
}

type GetTdeCertificatesSqlTaskOutputResponseArray []GetTdeCertificatesSqlTaskOutputResponseInput

func (GetTdeCertificatesSqlTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTdeCertificatesSqlTaskOutputResponse)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskOutputResponseArray) ToGetTdeCertificatesSqlTaskOutputResponseArrayOutput() GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return i.ToGetTdeCertificatesSqlTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskOutputResponseArray) ToGetTdeCertificatesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskOutputResponseArrayOutput)
}

// Output of the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ToGetTdeCertificatesSqlTaskOutputResponseOutput() GetTdeCertificatesSqlTaskOutputResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ToGetTdeCertificatesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskOutputResponseOutput {
	return o
}

// Mapping from certificate name to base 64 encoded format.
func (o GetTdeCertificatesSqlTaskOutputResponseOutput) Base64EncodedCertificates() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskOutputResponse) map[string][]string {
		return v.Base64EncodedCertificates
	}).(pulumi.StringArrayMapOutput)
}

// Validation errors
func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetTdeCertificatesSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTdeCertificatesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ToGetTdeCertificatesSqlTaskOutputResponseArrayOutput() GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ToGetTdeCertificatesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetTdeCertificatesSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTdeCertificatesSqlTaskOutputResponse {
		return vs[0].([]GetTdeCertificatesSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetTdeCertificatesSqlTaskOutputResponseOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetTdeCertificatesSqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetTdeCertificatesSqlTaskPropertiesInput is an input type that accepts GetTdeCertificatesSqlTaskPropertiesArgs and GetTdeCertificatesSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskPropertiesInput` via:
//
//          GetTdeCertificatesSqlTaskPropertiesArgs{...}
type GetTdeCertificatesSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskPropertiesOutput() GetTdeCertificatesSqlTaskPropertiesOutput
	ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(context.Context) GetTdeCertificatesSqlTaskPropertiesOutput
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetTdeCertificatesSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetTdeCertificatesSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskProperties)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskPropertiesArgs) ToGetTdeCertificatesSqlTaskPropertiesOutput() GetTdeCertificatesSqlTaskPropertiesOutput {
	return i.ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskPropertiesArgs) ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskPropertiesOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskProperties)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskPropertiesOutput) ToGetTdeCertificatesSqlTaskPropertiesOutput() GetTdeCertificatesSqlTaskPropertiesOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskPropertiesOutput) ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetTdeCertificatesSqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetTdeCertificatesSqlTaskPropertiesOutput) Input() GetTdeCertificatesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskProperties) *GetTdeCertificatesSqlTaskInput { return v.Input }).(GetTdeCertificatesSqlTaskInputPtrOutput)
}

// Task type.
func (o GetTdeCertificatesSqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetTdeCertificatesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetTdeCertificatesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetTdeCertificatesSqlTaskPropertiesResponseInput is an input type that accepts GetTdeCertificatesSqlTaskPropertiesResponseArgs and GetTdeCertificatesSqlTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskPropertiesResponseInput` via:
//
//          GetTdeCertificatesSqlTaskPropertiesResponseArgs{...}
type GetTdeCertificatesSqlTaskPropertiesResponseInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskPropertiesResponseOutput() GetTdeCertificatesSqlTaskPropertiesResponseOutput
	ToGetTdeCertificatesSqlTaskPropertiesResponseOutputWithContext(context.Context) GetTdeCertificatesSqlTaskPropertiesResponseOutput
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input GetTdeCertificatesSqlTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output GetTdeCertificatesSqlTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetTdeCertificatesSqlTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskPropertiesResponseArgs) ToGetTdeCertificatesSqlTaskPropertiesResponseOutput() GetTdeCertificatesSqlTaskPropertiesResponseOutput {
	return i.ToGetTdeCertificatesSqlTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskPropertiesResponseArgs) ToGetTdeCertificatesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskPropertiesResponseOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ToGetTdeCertificatesSqlTaskPropertiesResponseOutput() GetTdeCertificatesSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ToGetTdeCertificatesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Input() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) *GetTdeCertificatesSqlTaskInputResponse {
		return v.Input
	}).(GetTdeCertificatesSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Output() GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []GetTdeCertificatesSqlTaskOutputResponse {
		return v.Output
	}).(GetTdeCertificatesSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInput struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfo `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas []string `pulumi:"selectedSchemas"`
}

// GetUserTablesOracleTaskInputInput is an input type that accepts GetUserTablesOracleTaskInputArgs and GetUserTablesOracleTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskInputInput` via:
//
//          GetUserTablesOracleTaskInputArgs{...}
type GetUserTablesOracleTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskInputOutput() GetUserTablesOracleTaskInputOutput
	ToGetUserTablesOracleTaskInputOutputWithContext(context.Context) GetUserTablesOracleTaskInputOutput
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputArgs struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfoInput `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas pulumi.StringArrayInput `pulumi:"selectedSchemas"`
}

func (GetUserTablesOracleTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputOutput() GetUserTablesOracleTaskInputOutput {
	return i.ToGetUserTablesOracleTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputOutput)
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return i.ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputOutput).ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesOracleTaskInputPtrInput is an input type that accepts GetUserTablesOracleTaskInputArgs, GetUserTablesOracleTaskInputPtr and GetUserTablesOracleTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskInputPtrInput` via:
//
//          GetUserTablesOracleTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesOracleTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput
	ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Context) GetUserTablesOracleTaskInputPtrOutput
}

type getUserTablesOracleTaskInputPtrType GetUserTablesOracleTaskInputArgs

func GetUserTablesOracleTaskInputPtr(v *GetUserTablesOracleTaskInputArgs) GetUserTablesOracleTaskInputPtrInput {
	return (*getUserTablesOracleTaskInputPtrType)(v)
}

func (*getUserTablesOracleTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (i *getUserTablesOracleTaskInputPtrType) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return i.ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesOracleTaskInputPtrType) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputPtrOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputOutput) ToGetUserTablesOracleTaskInputOutput() GetUserTablesOracleTaskInputOutput {
	return o
}

func (o GetUserTablesOracleTaskInputOutput) ToGetUserTablesOracleTaskInputOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputOutput {
	return o
}

func (o GetUserTablesOracleTaskInputOutput) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return o.ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesOracleTaskInputOutput) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInput) *GetUserTablesOracleTaskInput {
		return &v
	}).(GetUserTablesOracleTaskInputPtrOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputOutput) ConnectionInfo() OracleConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInput) OracleConnectionInfo { return v.ConnectionInfo }).(OracleConnectionInfoOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInput) []string { return v.SelectedSchemas }).(pulumi.StringArrayOutput)
}

type GetUserTablesOracleTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputPtrOutput) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputPtrOutput) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputPtrOutput) Elem() GetUserTablesOracleTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInput) GetUserTablesOracleTaskInput { return *v }).(GetUserTablesOracleTaskInputOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputPtrOutput) ConnectionInfo() OracleConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInput) *OracleConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(OracleConnectionInfoPtrOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputPtrOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSchemas
	}).(pulumi.StringArrayOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputResponse struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas []string `pulumi:"selectedSchemas"`
}

// GetUserTablesOracleTaskInputResponseInput is an input type that accepts GetUserTablesOracleTaskInputResponseArgs and GetUserTablesOracleTaskInputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskInputResponseInput` via:
//
//          GetUserTablesOracleTaskInputResponseArgs{...}
type GetUserTablesOracleTaskInputResponseInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskInputResponseOutput() GetUserTablesOracleTaskInputResponseOutput
	ToGetUserTablesOracleTaskInputResponseOutputWithContext(context.Context) GetUserTablesOracleTaskInputResponseOutput
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputResponseArgs struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfoResponseInput `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas pulumi.StringArrayInput `pulumi:"selectedSchemas"`
}

func (GetUserTablesOracleTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInputResponse)(nil)).Elem()
}

func (i GetUserTablesOracleTaskInputResponseArgs) ToGetUserTablesOracleTaskInputResponseOutput() GetUserTablesOracleTaskInputResponseOutput {
	return i.ToGetUserTablesOracleTaskInputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskInputResponseArgs) ToGetUserTablesOracleTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputResponseOutput)
}

func (i GetUserTablesOracleTaskInputResponseArgs) ToGetUserTablesOracleTaskInputResponsePtrOutput() GetUserTablesOracleTaskInputResponsePtrOutput {
	return i.ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskInputResponseArgs) ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputResponseOutput).ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(ctx)
}

// GetUserTablesOracleTaskInputResponsePtrInput is an input type that accepts GetUserTablesOracleTaskInputResponseArgs, GetUserTablesOracleTaskInputResponsePtr and GetUserTablesOracleTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskInputResponsePtrInput` via:
//
//          GetUserTablesOracleTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type GetUserTablesOracleTaskInputResponsePtrInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskInputResponsePtrOutput() GetUserTablesOracleTaskInputResponsePtrOutput
	ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(context.Context) GetUserTablesOracleTaskInputResponsePtrOutput
}

type getUserTablesOracleTaskInputResponsePtrType GetUserTablesOracleTaskInputResponseArgs

func GetUserTablesOracleTaskInputResponsePtr(v *GetUserTablesOracleTaskInputResponseArgs) GetUserTablesOracleTaskInputResponsePtrInput {
	return (*getUserTablesOracleTaskInputResponsePtrType)(v)
}

func (*getUserTablesOracleTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInputResponse)(nil)).Elem()
}

func (i *getUserTablesOracleTaskInputResponsePtrType) ToGetUserTablesOracleTaskInputResponsePtrOutput() GetUserTablesOracleTaskInputResponsePtrOutput {
	return i.ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *getUserTablesOracleTaskInputResponsePtrType) ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputResponsePtrOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponseOutput() GetUserTablesOracleTaskInputResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponsePtrOutput() GetUserTablesOracleTaskInputResponsePtrOutput {
	return o.ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInputResponse) *GetUserTablesOracleTaskInputResponse {
		return &v
	}).(GetUserTablesOracleTaskInputResponsePtrOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputResponseOutput) ConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInputResponse) OracleConnectionInfoResponse { return v.ConnectionInfo }).(OracleConnectionInfoResponseOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputResponseOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInputResponse) []string { return v.SelectedSchemas }).(pulumi.StringArrayOutput)
}

type GetUserTablesOracleTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) ToGetUserTablesOracleTaskInputResponsePtrOutput() GetUserTablesOracleTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) Elem() GetUserTablesOracleTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) GetUserTablesOracleTaskInputResponse { return *v }).(GetUserTablesOracleTaskInputResponseOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputResponsePtrOutput) ConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputResponsePtrOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSchemas
	}).(pulumi.StringArrayOutput)
}

// Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskOutputResponse struct {
	// The schema this result is for
	SchemaName string `pulumi:"schemaName"`
	// List of valid tables found for this schema
	Tables []DatabaseTableResponse `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// GetUserTablesOracleTaskOutputResponseInput is an input type that accepts GetUserTablesOracleTaskOutputResponseArgs and GetUserTablesOracleTaskOutputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskOutputResponseInput` via:
//
//          GetUserTablesOracleTaskOutputResponseArgs{...}
type GetUserTablesOracleTaskOutputResponseInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskOutputResponseOutput() GetUserTablesOracleTaskOutputResponseOutput
	ToGetUserTablesOracleTaskOutputResponseOutputWithContext(context.Context) GetUserTablesOracleTaskOutputResponseOutput
}

// Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskOutputResponseArgs struct {
	// The schema this result is for
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	// List of valid tables found for this schema
	Tables DatabaseTableResponseArrayInput `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (GetUserTablesOracleTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesOracleTaskOutputResponseArgs) ToGetUserTablesOracleTaskOutputResponseOutput() GetUserTablesOracleTaskOutputResponseOutput {
	return i.ToGetUserTablesOracleTaskOutputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskOutputResponseArgs) ToGetUserTablesOracleTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskOutputResponseOutput)
}

// GetUserTablesOracleTaskOutputResponseArrayInput is an input type that accepts GetUserTablesOracleTaskOutputResponseArray and GetUserTablesOracleTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskOutputResponseArrayInput` via:
//
//          GetUserTablesOracleTaskOutputResponseArray{ GetUserTablesOracleTaskOutputResponseArgs{...} }
type GetUserTablesOracleTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskOutputResponseArrayOutput() GetUserTablesOracleTaskOutputResponseArrayOutput
	ToGetUserTablesOracleTaskOutputResponseArrayOutputWithContext(context.Context) GetUserTablesOracleTaskOutputResponseArrayOutput
}

type GetUserTablesOracleTaskOutputResponseArray []GetUserTablesOracleTaskOutputResponseInput

func (GetUserTablesOracleTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesOracleTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesOracleTaskOutputResponseArray) ToGetUserTablesOracleTaskOutputResponseArrayOutput() GetUserTablesOracleTaskOutputResponseArrayOutput {
	return i.ToGetUserTablesOracleTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskOutputResponseArray) ToGetUserTablesOracleTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesOracleTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskOutputResponseArrayOutput)
}

// Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskOutputResponseOutput) ToGetUserTablesOracleTaskOutputResponseOutput() GetUserTablesOracleTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseOutput) ToGetUserTablesOracleTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskOutputResponseOutput {
	return o
}

// The schema this result is for
func (o GetUserTablesOracleTaskOutputResponseOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) string { return v.SchemaName }).(pulumi.StringOutput)
}

// List of valid tables found for this schema
func (o GetUserTablesOracleTaskOutputResponseOutput) Tables() DatabaseTableResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) []DatabaseTableResponse { return v.Tables }).(DatabaseTableResponseArrayOutput)
}

// Validation errors associated with the task
func (o GetUserTablesOracleTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesOracleTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesOracleTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) ToGetUserTablesOracleTaskOutputResponseArrayOutput() GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) ToGetUserTablesOracleTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesOracleTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesOracleTaskOutputResponse {
		return vs[0].([]GetUserTablesOracleTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesOracleTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesOracleTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesOracleTaskPropertiesInput is an input type that accepts GetUserTablesOracleTaskPropertiesArgs and GetUserTablesOracleTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskPropertiesInput` via:
//
//          GetUserTablesOracleTaskPropertiesArgs{...}
type GetUserTablesOracleTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskPropertiesOutput() GetUserTablesOracleTaskPropertiesOutput
	ToGetUserTablesOracleTaskPropertiesOutputWithContext(context.Context) GetUserTablesOracleTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesOracleTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesOracleTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskProperties)(nil)).Elem()
}

func (i GetUserTablesOracleTaskPropertiesArgs) ToGetUserTablesOracleTaskPropertiesOutput() GetUserTablesOracleTaskPropertiesOutput {
	return i.ToGetUserTablesOracleTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskPropertiesArgs) ToGetUserTablesOracleTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskProperties)(nil)).Elem()
}

func (o GetUserTablesOracleTaskPropertiesOutput) ToGetUserTablesOracleTaskPropertiesOutput() GetUserTablesOracleTaskPropertiesOutput {
	return o
}

func (o GetUserTablesOracleTaskPropertiesOutput) ToGetUserTablesOracleTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesOracleTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesOracleTaskPropertiesOutput) Input() GetUserTablesOracleTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskProperties) *GetUserTablesOracleTaskInput { return v.Input }).(GetUserTablesOracleTaskInputPtrOutput)
}

// Task type.
func (o GetUserTablesOracleTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesOracleTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesOracleTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesOracleTaskPropertiesResponseInput is an input type that accepts GetUserTablesOracleTaskPropertiesResponseArgs and GetUserTablesOracleTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskPropertiesResponseInput` via:
//
//          GetUserTablesOracleTaskPropertiesResponseArgs{...}
type GetUserTablesOracleTaskPropertiesResponseInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskPropertiesResponseOutput() GetUserTablesOracleTaskPropertiesResponseOutput
	ToGetUserTablesOracleTaskPropertiesResponseOutputWithContext(context.Context) GetUserTablesOracleTaskPropertiesResponseOutput
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input GetUserTablesOracleTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output GetUserTablesOracleTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesOracleTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskPropertiesResponse)(nil)).Elem()
}

func (i GetUserTablesOracleTaskPropertiesResponseArgs) ToGetUserTablesOracleTaskPropertiesResponseOutput() GetUserTablesOracleTaskPropertiesResponseOutput {
	return i.ToGetUserTablesOracleTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskPropertiesResponseArgs) ToGetUserTablesOracleTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskPropertiesResponseOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskPropertiesResponseOutput) ToGetUserTablesOracleTaskPropertiesResponseOutput() GetUserTablesOracleTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskPropertiesResponseOutput) ToGetUserTablesOracleTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesOracleTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Input() GetUserTablesOracleTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) *GetUserTablesOracleTaskInputResponse {
		return v.Input
	}).(GetUserTablesOracleTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Output() GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []GetUserTablesOracleTaskOutputResponse {
		return v.Output
	}).(GetUserTablesOracleTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInput struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfo `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesPostgreSqlTaskInputInput is an input type that accepts GetUserTablesPostgreSqlTaskInputArgs and GetUserTablesPostgreSqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskInputInput` via:
//
//          GetUserTablesPostgreSqlTaskInputArgs{...}
type GetUserTablesPostgreSqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskInputOutput() GetUserTablesPostgreSqlTaskInputOutput
	ToGetUserTablesPostgreSqlTaskInputOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskInputOutput
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputArgs struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesPostgreSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputOutput() GetUserTablesPostgreSqlTaskInputOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputOutput)
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputOutput).ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesPostgreSqlTaskInputPtrInput is an input type that accepts GetUserTablesPostgreSqlTaskInputArgs, GetUserTablesPostgreSqlTaskInputPtr and GetUserTablesPostgreSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskInputPtrInput` via:
//
//          GetUserTablesPostgreSqlTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesPostgreSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput
	ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput
}

type getUserTablesPostgreSqlTaskInputPtrType GetUserTablesPostgreSqlTaskInputArgs

func GetUserTablesPostgreSqlTaskInputPtr(v *GetUserTablesPostgreSqlTaskInputArgs) GetUserTablesPostgreSqlTaskInputPtrInput {
	return (*getUserTablesPostgreSqlTaskInputPtrType)(v)
}

func (*getUserTablesPostgreSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesPostgreSqlTaskInputPtrType) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesPostgreSqlTaskInputPtrType) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputPtrOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputOutput) ToGetUserTablesPostgreSqlTaskInputOutput() GetUserTablesPostgreSqlTaskInputOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputOutput) ToGetUserTablesPostgreSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputOutput) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o.ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesPostgreSqlTaskInputOutput) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInput) *GetUserTablesPostgreSqlTaskInput {
		return &v
	}).(GetUserTablesPostgreSqlTaskInputPtrOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputOutput) ConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInput) PostgreSqlConnectionInfo { return v.ConnectionInfo }).(PostgreSqlConnectionInfoOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInput) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesPostgreSqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputPtrOutput) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputPtrOutput) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputPtrOutput) Elem() GetUserTablesPostgreSqlTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInput) GetUserTablesPostgreSqlTaskInput { return *v }).(GetUserTablesPostgreSqlTaskInputOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputPtrOutput) ConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputPtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputResponse struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesPostgreSqlTaskInputResponseInput is an input type that accepts GetUserTablesPostgreSqlTaskInputResponseArgs and GetUserTablesPostgreSqlTaskInputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskInputResponseInput` via:
//
//          GetUserTablesPostgreSqlTaskInputResponseArgs{...}
type GetUserTablesPostgreSqlTaskInputResponseInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskInputResponseOutput() GetUserTablesPostgreSqlTaskInputResponseOutput
	ToGetUserTablesPostgreSqlTaskInputResponseOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskInputResponseOutput
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputResponseArgs struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfoResponseInput `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesPostgreSqlTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInputResponse)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskInputResponseArgs) ToGetUserTablesPostgreSqlTaskInputResponseOutput() GetUserTablesPostgreSqlTaskInputResponseOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskInputResponseArgs) ToGetUserTablesPostgreSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputResponseOutput)
}

func (i GetUserTablesPostgreSqlTaskInputResponseArgs) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutput() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskInputResponseArgs) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputResponseOutput).ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(ctx)
}

// GetUserTablesPostgreSqlTaskInputResponsePtrInput is an input type that accepts GetUserTablesPostgreSqlTaskInputResponseArgs, GetUserTablesPostgreSqlTaskInputResponsePtr and GetUserTablesPostgreSqlTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskInputResponsePtrInput` via:
//
//          GetUserTablesPostgreSqlTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type GetUserTablesPostgreSqlTaskInputResponsePtrInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskInputResponsePtrOutput() GetUserTablesPostgreSqlTaskInputResponsePtrOutput
	ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskInputResponsePtrOutput
}

type getUserTablesPostgreSqlTaskInputResponsePtrType GetUserTablesPostgreSqlTaskInputResponseArgs

func GetUserTablesPostgreSqlTaskInputResponsePtr(v *GetUserTablesPostgreSqlTaskInputResponseArgs) GetUserTablesPostgreSqlTaskInputResponsePtrInput {
	return (*getUserTablesPostgreSqlTaskInputResponsePtrType)(v)
}

func (*getUserTablesPostgreSqlTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInputResponse)(nil)).Elem()
}

func (i *getUserTablesPostgreSqlTaskInputResponsePtrType) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutput() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *getUserTablesPostgreSqlTaskInputResponsePtrType) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputResponsePtrOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponseOutput() GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutput() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o.ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInputResponse) *GetUserTablesPostgreSqlTaskInputResponse {
		return &v
	}).(GetUserTablesPostgreSqlTaskInputResponsePtrOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.ConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesPostgreSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutput() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) Elem() GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) GetUserTablesPostgreSqlTaskInputResponse { return *v }).(GetUserTablesPostgreSqlTaskInputResponseOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskOutputResponse struct {
	// The database this result is for
	DatabaseName string `pulumi:"databaseName"`
	// List of valid tables found for this database
	Tables []DatabaseTableResponse `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// GetUserTablesPostgreSqlTaskOutputResponseInput is an input type that accepts GetUserTablesPostgreSqlTaskOutputResponseArgs and GetUserTablesPostgreSqlTaskOutputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskOutputResponseInput` via:
//
//          GetUserTablesPostgreSqlTaskOutputResponseArgs{...}
type GetUserTablesPostgreSqlTaskOutputResponseInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskOutputResponseOutput() GetUserTablesPostgreSqlTaskOutputResponseOutput
	ToGetUserTablesPostgreSqlTaskOutputResponseOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskOutputResponseOutput
}

// Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskOutputResponseArgs struct {
	// The database this result is for
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// List of valid tables found for this database
	Tables DatabaseTableResponseArrayInput `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (GetUserTablesPostgreSqlTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskOutputResponseArgs) ToGetUserTablesPostgreSqlTaskOutputResponseOutput() GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return i.ToGetUserTablesPostgreSqlTaskOutputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskOutputResponseArgs) ToGetUserTablesPostgreSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskOutputResponseOutput)
}

// GetUserTablesPostgreSqlTaskOutputResponseArrayInput is an input type that accepts GetUserTablesPostgreSqlTaskOutputResponseArray and GetUserTablesPostgreSqlTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskOutputResponseArrayInput` via:
//
//          GetUserTablesPostgreSqlTaskOutputResponseArray{ GetUserTablesPostgreSqlTaskOutputResponseArgs{...} }
type GetUserTablesPostgreSqlTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutput() GetUserTablesPostgreSqlTaskOutputResponseArrayOutput
	ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskOutputResponseArrayOutput
}

type GetUserTablesPostgreSqlTaskOutputResponseArray []GetUserTablesPostgreSqlTaskOutputResponseInput

func (GetUserTablesPostgreSqlTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesPostgreSqlTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskOutputResponseArray) ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutput() GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return i.ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskOutputResponseArray) ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskOutputResponseArrayOutput)
}

// Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ToGetUserTablesPostgreSqlTaskOutputResponseOutput() GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ToGetUserTablesPostgreSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return o
}

// The database this result is for
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// List of valid tables found for this database
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) Tables() DatabaseTableResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) []DatabaseTableResponse { return v.Tables }).(DatabaseTableResponseArrayOutput)
}

// Validation errors associated with the task
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesPostgreSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesPostgreSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutput() GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesPostgreSqlTaskOutputResponse {
		return vs[0].([]GetUserTablesPostgreSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesPostgreSqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesPostgreSqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesPostgreSqlTaskPropertiesInput is an input type that accepts GetUserTablesPostgreSqlTaskPropertiesArgs and GetUserTablesPostgreSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskPropertiesInput` via:
//
//          GetUserTablesPostgreSqlTaskPropertiesArgs{...}
type GetUserTablesPostgreSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskPropertiesOutput() GetUserTablesPostgreSqlTaskPropertiesOutput
	ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesPostgreSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesPostgreSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskPropertiesArgs) ToGetUserTablesPostgreSqlTaskPropertiesOutput() GetUserTablesPostgreSqlTaskPropertiesOutput {
	return i.ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskPropertiesArgs) ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskPropertiesOutput) ToGetUserTablesPostgreSqlTaskPropertiesOutput() GetUserTablesPostgreSqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskPropertiesOutput) ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesPostgreSqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesPostgreSqlTaskPropertiesOutput) Input() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskProperties) *GetUserTablesPostgreSqlTaskInput { return v.Input }).(GetUserTablesPostgreSqlTaskInputPtrOutput)
}

// Task type.
func (o GetUserTablesPostgreSqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesPostgreSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesPostgreSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesPostgreSqlTaskPropertiesResponseInput is an input type that accepts GetUserTablesPostgreSqlTaskPropertiesResponseArgs and GetUserTablesPostgreSqlTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskPropertiesResponseInput` via:
//
//          GetUserTablesPostgreSqlTaskPropertiesResponseArgs{...}
type GetUserTablesPostgreSqlTaskPropertiesResponseInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskPropertiesResponseOutput() GetUserTablesPostgreSqlTaskPropertiesResponseOutput
	ToGetUserTablesPostgreSqlTaskPropertiesResponseOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskPropertiesResponseOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input GetUserTablesPostgreSqlTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output GetUserTablesPostgreSqlTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesPostgreSqlTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskPropertiesResponse)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskPropertiesResponseArgs) ToGetUserTablesPostgreSqlTaskPropertiesResponseOutput() GetUserTablesPostgreSqlTaskPropertiesResponseOutput {
	return i.ToGetUserTablesPostgreSqlTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskPropertiesResponseArgs) ToGetUserTablesPostgreSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskPropertiesResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ToGetUserTablesPostgreSqlTaskPropertiesResponseOutput() GetUserTablesPostgreSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ToGetUserTablesPostgreSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Input() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) *GetUserTablesPostgreSqlTaskInputResponse {
		return v.Input
	}).(GetUserTablesPostgreSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Output() GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []GetUserTablesPostgreSqlTaskOutputResponse {
		return v.Output
	}).(GetUserTablesPostgreSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInput struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases []string `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases []string `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// GetUserTablesSqlSyncTaskInputInput is an input type that accepts GetUserTablesSqlSyncTaskInputArgs and GetUserTablesSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskInputInput` via:
//
//          GetUserTablesSqlSyncTaskInputArgs{...}
type GetUserTablesSqlSyncTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskInputOutput() GetUserTablesSqlSyncTaskInputOutput
	ToGetUserTablesSqlSyncTaskInputOutputWithContext(context.Context) GetUserTablesSqlSyncTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputArgs struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases pulumi.StringArrayInput `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases pulumi.StringArrayInput `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (GetUserTablesSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputOutput() GetUserTablesSqlSyncTaskInputOutput {
	return i.ToGetUserTablesSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputOutput)
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return i.ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputOutput).ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesSqlSyncTaskInputPtrInput is an input type that accepts GetUserTablesSqlSyncTaskInputArgs, GetUserTablesSqlSyncTaskInputPtr and GetUserTablesSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskInputPtrInput` via:
//
//          GetUserTablesSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput
	ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Context) GetUserTablesSqlSyncTaskInputPtrOutput
}

type getUserTablesSqlSyncTaskInputPtrType GetUserTablesSqlSyncTaskInputArgs

func GetUserTablesSqlSyncTaskInputPtr(v *GetUserTablesSqlSyncTaskInputArgs) GetUserTablesSqlSyncTaskInputPtrInput {
	return (*getUserTablesSqlSyncTaskInputPtrType)(v)
}

func (*getUserTablesSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (i *getUserTablesSqlSyncTaskInputPtrType) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return i.ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlSyncTaskInputPtrType) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputOutput) ToGetUserTablesSqlSyncTaskInputOutput() GetUserTablesSqlSyncTaskInputOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputOutput) ToGetUserTablesSqlSyncTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputOutput) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return o.ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlSyncTaskInputOutput) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) *GetUserTablesSqlSyncTaskInput {
		return &v
	}).(GetUserTablesSqlSyncTaskInputPtrOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) []string { return v.SelectedSourceDatabases }).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) []string { return v.SelectedTargetDatabases }).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type GetUserTablesSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputPtrOutput) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputPtrOutput) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputPtrOutput) Elem() GetUserTablesSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) GetUserTablesSqlSyncTaskInput { return *v }).(GetUserTablesSqlSyncTaskInputOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputPtrOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSourceDatabases
	}).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputPtrOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedTargetDatabases
	}).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputResponse struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases []string `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases []string `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// GetUserTablesSqlSyncTaskInputResponseInput is an input type that accepts GetUserTablesSqlSyncTaskInputResponseArgs and GetUserTablesSqlSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskInputResponseInput` via:
//
//          GetUserTablesSqlSyncTaskInputResponseArgs{...}
type GetUserTablesSqlSyncTaskInputResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskInputResponseOutput() GetUserTablesSqlSyncTaskInputResponseOutput
	ToGetUserTablesSqlSyncTaskInputResponseOutputWithContext(context.Context) GetUserTablesSqlSyncTaskInputResponseOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputResponseArgs struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases pulumi.StringArrayInput `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases pulumi.StringArrayInput `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (GetUserTablesSqlSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskInputResponseArgs) ToGetUserTablesSqlSyncTaskInputResponseOutput() GetUserTablesSqlSyncTaskInputResponseOutput {
	return i.ToGetUserTablesSqlSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskInputResponseArgs) ToGetUserTablesSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputResponseOutput)
}

func (i GetUserTablesSqlSyncTaskInputResponseArgs) ToGetUserTablesSqlSyncTaskInputResponsePtrOutput() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return i.ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskInputResponseArgs) ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputResponseOutput).ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// GetUserTablesSqlSyncTaskInputResponsePtrInput is an input type that accepts GetUserTablesSqlSyncTaskInputResponseArgs, GetUserTablesSqlSyncTaskInputResponsePtr and GetUserTablesSqlSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskInputResponsePtrInput` via:
//
//          GetUserTablesSqlSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskInputResponsePtrOutput() GetUserTablesSqlSyncTaskInputResponsePtrOutput
	ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(context.Context) GetUserTablesSqlSyncTaskInputResponsePtrOutput
}

type getUserTablesSqlSyncTaskInputResponsePtrType GetUserTablesSqlSyncTaskInputResponseArgs

func GetUserTablesSqlSyncTaskInputResponsePtr(v *GetUserTablesSqlSyncTaskInputResponseArgs) GetUserTablesSqlSyncTaskInputResponsePtrInput {
	return (*getUserTablesSqlSyncTaskInputResponsePtrType)(v)
}

func (*getUserTablesSqlSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i *getUserTablesSqlSyncTaskInputResponsePtrType) ToGetUserTablesSqlSyncTaskInputResponsePtrOutput() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return i.ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlSyncTaskInputResponsePtrType) ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputResponsePtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponseOutput() GetUserTablesSqlSyncTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutput() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o.ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) *GetUserTablesSqlSyncTaskInputResponse {
		return &v
	}).(GetUserTablesSqlSyncTaskInputResponsePtrOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) []string { return v.SelectedSourceDatabases }).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) []string { return v.SelectedTargetDatabases }).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) SqlConnectionInfoResponse { return v.SourceConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type GetUserTablesSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutput() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) Elem() GetUserTablesSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) GetUserTablesSqlSyncTaskInputResponse { return *v }).(GetUserTablesSqlSyncTaskInputResponseOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSourceDatabases
	}).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedTargetDatabases
	}).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskOutputResponse struct {
	// Mapping from database name to list of source tables
	DatabasesToSourceTables map[string][]DatabaseTableResponse `pulumi:"databasesToSourceTables"`
	// Mapping from database name to list of target tables
	DatabasesToTargetTables map[string][]DatabaseTableResponse `pulumi:"databasesToTargetTables"`
	// Mapping from database name to list of validation errors
	TableValidationErrors map[string][]string `pulumi:"tableValidationErrors"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// GetUserTablesSqlSyncTaskOutputResponseInput is an input type that accepts GetUserTablesSqlSyncTaskOutputResponseArgs and GetUserTablesSqlSyncTaskOutputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskOutputResponseInput` via:
//
//          GetUserTablesSqlSyncTaskOutputResponseArgs{...}
type GetUserTablesSqlSyncTaskOutputResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskOutputResponseOutput() GetUserTablesSqlSyncTaskOutputResponseOutput
	ToGetUserTablesSqlSyncTaskOutputResponseOutputWithContext(context.Context) GetUserTablesSqlSyncTaskOutputResponseOutput
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskOutputResponseArgs struct {
	// Mapping from database name to list of source tables
	DatabasesToSourceTables DatabaseTableResponseArrayMapInput `pulumi:"databasesToSourceTables"`
	// Mapping from database name to list of target tables
	DatabasesToTargetTables DatabaseTableResponseArrayMapInput `pulumi:"databasesToTargetTables"`
	// Mapping from database name to list of validation errors
	TableValidationErrors pulumi.StringArrayMapInput `pulumi:"tableValidationErrors"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (GetUserTablesSqlSyncTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskOutputResponseArgs) ToGetUserTablesSqlSyncTaskOutputResponseOutput() GetUserTablesSqlSyncTaskOutputResponseOutput {
	return i.ToGetUserTablesSqlSyncTaskOutputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskOutputResponseArgs) ToGetUserTablesSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskOutputResponseOutput)
}

// GetUserTablesSqlSyncTaskOutputResponseArrayInput is an input type that accepts GetUserTablesSqlSyncTaskOutputResponseArray and GetUserTablesSqlSyncTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskOutputResponseArrayInput` via:
//
//          GetUserTablesSqlSyncTaskOutputResponseArray{ GetUserTablesSqlSyncTaskOutputResponseArgs{...} }
type GetUserTablesSqlSyncTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskOutputResponseArrayOutput() GetUserTablesSqlSyncTaskOutputResponseArrayOutput
	ToGetUserTablesSqlSyncTaskOutputResponseArrayOutputWithContext(context.Context) GetUserTablesSqlSyncTaskOutputResponseArrayOutput
}

type GetUserTablesSqlSyncTaskOutputResponseArray []GetUserTablesSqlSyncTaskOutputResponseInput

func (GetUserTablesSqlSyncTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskOutputResponseArray) ToGetUserTablesSqlSyncTaskOutputResponseArrayOutput() GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return i.ToGetUserTablesSqlSyncTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskOutputResponseArray) ToGetUserTablesSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskOutputResponseArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ToGetUserTablesSqlSyncTaskOutputResponseOutput() GetUserTablesSqlSyncTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ToGetUserTablesSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of source tables
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) DatabasesToSourceTables() DatabaseTableResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) map[string][]DatabaseTableResponse {
		return v.DatabasesToSourceTables
	}).(DatabaseTableResponseArrayMapOutput)
}

// Mapping from database name to list of target tables
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) DatabasesToTargetTables() DatabaseTableResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) map[string][]DatabaseTableResponse {
		return v.DatabasesToTargetTables
	}).(DatabaseTableResponseArrayMapOutput)
}

// Mapping from database name to list of validation errors
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) TableValidationErrors() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) map[string][]string { return v.TableValidationErrors }).(pulumi.StringArrayMapOutput)
}

// Validation errors
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ToGetUserTablesSqlSyncTaskOutputResponseArrayOutput() GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ToGetUserTablesSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlSyncTaskOutputResponse {
		return vs[0].([]GetUserTablesSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlSyncTaskPropertiesInput is an input type that accepts GetUserTablesSqlSyncTaskPropertiesArgs and GetUserTablesSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskPropertiesInput` via:
//
//          GetUserTablesSqlSyncTaskPropertiesArgs{...}
type GetUserTablesSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskPropertiesOutput() GetUserTablesSqlSyncTaskPropertiesOutput
	ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(context.Context) GetUserTablesSqlSyncTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskProperties)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskPropertiesArgs) ToGetUserTablesSqlSyncTaskPropertiesOutput() GetUserTablesSqlSyncTaskPropertiesOutput {
	return i.ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskPropertiesArgs) ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskProperties)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskPropertiesOutput) ToGetUserTablesSqlSyncTaskPropertiesOutput() GetUserTablesSqlSyncTaskPropertiesOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskPropertiesOutput) ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesSqlSyncTaskPropertiesOutput) Input() GetUserTablesSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskProperties) *GetUserTablesSqlSyncTaskInput { return v.Input }).(GetUserTablesSqlSyncTaskInputPtrOutput)
}

// Task type.
func (o GetUserTablesSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlSyncTaskPropertiesResponseInput is an input type that accepts GetUserTablesSqlSyncTaskPropertiesResponseArgs and GetUserTablesSqlSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskPropertiesResponseInput` via:
//
//          GetUserTablesSqlSyncTaskPropertiesResponseArgs{...}
type GetUserTablesSqlSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskPropertiesResponseOutput() GetUserTablesSqlSyncTaskPropertiesResponseOutput
	ToGetUserTablesSqlSyncTaskPropertiesResponseOutputWithContext(context.Context) GetUserTablesSqlSyncTaskPropertiesResponseOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input GetUserTablesSqlSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output GetUserTablesSqlSyncTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskPropertiesResponseArgs) ToGetUserTablesSqlSyncTaskPropertiesResponseOutput() GetUserTablesSqlSyncTaskPropertiesResponseOutput {
	return i.ToGetUserTablesSqlSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskPropertiesResponseArgs) ToGetUserTablesSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskPropertiesResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ToGetUserTablesSqlSyncTaskPropertiesResponseOutput() GetUserTablesSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ToGetUserTablesSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Input() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) *GetUserTablesSqlSyncTaskInputResponse {
		return v.Input
	}).(GetUserTablesSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Output() GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []GetUserTablesSqlSyncTaskOutputResponse {
		return v.Output
	}).(GetUserTablesSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInput struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesSqlTaskInputInput is an input type that accepts GetUserTablesSqlTaskInputArgs and GetUserTablesSqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputInput` via:
//
//          GetUserTablesSqlTaskInputArgs{...}
type GetUserTablesSqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput
	ToGetUserTablesSqlTaskInputOutputWithContext(context.Context) GetUserTablesSqlTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputArgs struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput {
	return i.ToGetUserTablesSqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput)
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput).ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskInputPtrInput is an input type that accepts GetUserTablesSqlTaskInputArgs, GetUserTablesSqlTaskInputPtr and GetUserTablesSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputPtrInput` via:
//
//          GetUserTablesSqlTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput
	ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesSqlTaskInputPtrOutput
}

type getUserTablesSqlTaskInputPtrType GetUserTablesSqlTaskInputArgs

func GetUserTablesSqlTaskInputPtr(v *GetUserTablesSqlTaskInputArgs) GetUserTablesSqlTaskInputPtrInput {
	return (*getUserTablesSqlTaskInputPtrType)(v)
}

func (*getUserTablesSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput {
	return o
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputOutput {
	return o
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return o.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) *GetUserTablesSqlTaskInput {
		return &v
	}).(GetUserTablesSqlTaskInputPtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputOutput) ConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) SqlConnectionInfo { return v.ConnectionInfo }).(SqlConnectionInfoOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputPtrOutput) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputPtrOutput) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputPtrOutput) Elem() GetUserTablesSqlTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) GetUserTablesSqlTaskInput { return *v }).(GetUserTablesSqlTaskInputOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputPtrOutput) ConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputPtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponse struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesSqlTaskInputResponseInput is an input type that accepts GetUserTablesSqlTaskInputResponseArgs and GetUserTablesSqlTaskInputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputResponseInput` via:
//
//          GetUserTablesSqlTaskInputResponseArgs{...}
type GetUserTablesSqlTaskInputResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput
	ToGetUserTablesSqlTaskInputResponseOutputWithContext(context.Context) GetUserTablesSqlTaskInputResponseOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponseArgs struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponseInput `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesSqlTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskInputResponseArgs) ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput {
	return i.ToGetUserTablesSqlTaskInputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputResponseArgs) ToGetUserTablesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputResponseOutput)
}

func (i GetUserTablesSqlTaskInputResponseArgs) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return i.ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputResponseArgs) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputResponseOutput).ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskInputResponsePtrInput is an input type that accepts GetUserTablesSqlTaskInputResponseArgs, GetUserTablesSqlTaskInputResponsePtr and GetUserTablesSqlTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputResponsePtrInput` via:
//
//          GetUserTablesSqlTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlTaskInputResponsePtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput
	ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Context) GetUserTablesSqlTaskInputResponsePtrOutput
}

type getUserTablesSqlTaskInputResponsePtrType GetUserTablesSqlTaskInputResponseArgs

func GetUserTablesSqlTaskInputResponsePtr(v *GetUserTablesSqlTaskInputResponseArgs) GetUserTablesSqlTaskInputResponsePtrInput {
	return (*getUserTablesSqlTaskInputResponsePtrType)(v)
}

func (*getUserTablesSqlTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (i *getUserTablesSqlTaskInputResponsePtrType) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return i.ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskInputResponsePtrType) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) *GetUserTablesSqlTaskInputResponse {
		return &v
	}).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponseOutput) ConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) SqlConnectionInfoResponse { return v.ConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) Elem() GetUserTablesSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) GetUserTablesSqlTaskInputResponse { return *v }).(GetUserTablesSqlTaskInputResponseOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponsePtrOutput) ConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables map[string][]DatabaseTableResponse `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// GetUserTablesSqlTaskOutputResponseInput is an input type that accepts GetUserTablesSqlTaskOutputResponseArgs and GetUserTablesSqlTaskOutputResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskOutputResponseInput` via:
//
//          GetUserTablesSqlTaskOutputResponseArgs{...}
type GetUserTablesSqlTaskOutputResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput
	ToGetUserTablesSqlTaskOutputResponseOutputWithContext(context.Context) GetUserTablesSqlTaskOutputResponseOutput
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponseArgs struct {
	// Mapping from database name to list of tables
	DatabasesToTables DatabaseTableResponseArrayMapInput `pulumi:"databasesToTables"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Validation errors
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (GetUserTablesSqlTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskOutputResponseArgs) ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput {
	return i.ToGetUserTablesSqlTaskOutputResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskOutputResponseArgs) ToGetUserTablesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskOutputResponseOutput)
}

// GetUserTablesSqlTaskOutputResponseArrayInput is an input type that accepts GetUserTablesSqlTaskOutputResponseArray and GetUserTablesSqlTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskOutputResponseArrayInput` via:
//
//          GetUserTablesSqlTaskOutputResponseArray{ GetUserTablesSqlTaskOutputResponseArgs{...} }
type GetUserTablesSqlTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput
	ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput
}

type GetUserTablesSqlTaskOutputResponseArray []GetUserTablesSqlTaskOutputResponseInput

func (GetUserTablesSqlTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskOutputResponseArray) ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return i.ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskOutputResponseArray) ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskOutputResponseArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of tables
func (o GetUserTablesSqlTaskOutputResponseOutput) DatabasesToTables() DatabaseTableResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) map[string][]DatabaseTableResponse {
		return v.DatabasesToTables
	}).(DatabaseTableResponseArrayMapOutput)
}

// Result identifier
func (o GetUserTablesSqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Validation errors
func (o GetUserTablesSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlTaskOutputResponse {
		return vs[0].([]GetUserTablesSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesSqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesSqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlTaskPropertiesInput is an input type that accepts GetUserTablesSqlTaskPropertiesArgs and GetUserTablesSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesInput` via:
//
//          GetUserTablesSqlTaskPropertiesArgs{...}
type GetUserTablesSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput
	ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput {
	return i.ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesOutput) ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesOutput) ToGetUserTablesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesOutput) Input() GetUserTablesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) *GetUserTablesSqlTaskInput { return v.Input }).(GetUserTablesSqlTaskInputPtrOutput)
}

// Task type.
func (o GetUserTablesSqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlTaskPropertiesResponseInput is an input type that accepts GetUserTablesSqlTaskPropertiesResponseArgs and GetUserTablesSqlTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesResponseInput` via:
//
//          GetUserTablesSqlTaskPropertiesResponseArgs{...}
type GetUserTablesSqlTaskPropertiesResponseInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput
	ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesResponseOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input GetUserTablesSqlTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output GetUserTablesSqlTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (i GetUserTablesSqlTaskPropertiesResponseArgs) ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput {
	return i.ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesResponseArgs) ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Input() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) *GetUserTablesSqlTaskInputResponse { return v.Input }).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Output() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []GetUserTablesSqlTaskOutputResponse { return v.Output }).(GetUserTablesSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfo struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId string `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MiSqlConnectionInfoInput is an input type that accepts MiSqlConnectionInfoArgs and MiSqlConnectionInfoOutput values.
// You can construct a concrete instance of `MiSqlConnectionInfoInput` via:
//
//          MiSqlConnectionInfoArgs{...}
type MiSqlConnectionInfoInput interface {
	pulumi.Input

	ToMiSqlConnectionInfoOutput() MiSqlConnectionInfoOutput
	ToMiSqlConnectionInfoOutputWithContext(context.Context) MiSqlConnectionInfoOutput
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoArgs struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId pulumi.StringInput `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MiSqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfo)(nil)).Elem()
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoOutput() MiSqlConnectionInfoOutput {
	return i.ToMiSqlConnectionInfoOutputWithContext(context.Background())
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoOutputWithContext(ctx context.Context) MiSqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoOutput)
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return i.ToMiSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoOutput).ToMiSqlConnectionInfoPtrOutputWithContext(ctx)
}

// MiSqlConnectionInfoPtrInput is an input type that accepts MiSqlConnectionInfoArgs, MiSqlConnectionInfoPtr and MiSqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MiSqlConnectionInfoPtrInput` via:
//
//          MiSqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type MiSqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput
	ToMiSqlConnectionInfoPtrOutputWithContext(context.Context) MiSqlConnectionInfoPtrOutput
}

type miSqlConnectionInfoPtrType MiSqlConnectionInfoArgs

func MiSqlConnectionInfoPtr(v *MiSqlConnectionInfoArgs) MiSqlConnectionInfoPtrInput {
	return (*miSqlConnectionInfoPtrType)(v)
}

func (*miSqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfo)(nil)).Elem()
}

func (i *miSqlConnectionInfoPtrType) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return i.ToMiSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *miSqlConnectionInfoPtrType) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoPtrOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfo)(nil)).Elem()
}

func (o MiSqlConnectionInfoOutput) ToMiSqlConnectionInfoOutput() MiSqlConnectionInfoOutput {
	return o
}

func (o MiSqlConnectionInfoOutput) ToMiSqlConnectionInfoOutputWithContext(ctx context.Context) MiSqlConnectionInfoOutput {
	return o
}

func (o MiSqlConnectionInfoOutput) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return o.ToMiSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o MiSqlConnectionInfoOutput) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) *MiSqlConnectionInfo {
		return &v
	}).(MiSqlConnectionInfoPtrOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoOutput) ManagedInstanceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) string { return v.ManagedInstanceResourceId }).(pulumi.StringOutput)
}

// Password credential.
func (o MiSqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MiSqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MiSqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MiSqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfo)(nil)).Elem()
}

func (o MiSqlConnectionInfoPtrOutput) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return o
}

func (o MiSqlConnectionInfoPtrOutput) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return o
}

func (o MiSqlConnectionInfoPtrOutput) Elem() MiSqlConnectionInfoOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) MiSqlConnectionInfo { return *v }).(MiSqlConnectionInfoOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoPtrOutput) ManagedInstanceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ManagedInstanceResourceId
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o MiSqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MiSqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MiSqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoResponse struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId string `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MiSqlConnectionInfoResponseInput is an input type that accepts MiSqlConnectionInfoResponseArgs and MiSqlConnectionInfoResponseOutput values.
// You can construct a concrete instance of `MiSqlConnectionInfoResponseInput` via:
//
//          MiSqlConnectionInfoResponseArgs{...}
type MiSqlConnectionInfoResponseInput interface {
	pulumi.Input

	ToMiSqlConnectionInfoResponseOutput() MiSqlConnectionInfoResponseOutput
	ToMiSqlConnectionInfoResponseOutputWithContext(context.Context) MiSqlConnectionInfoResponseOutput
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoResponseArgs struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId pulumi.StringInput `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MiSqlConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfoResponse)(nil)).Elem()
}

func (i MiSqlConnectionInfoResponseArgs) ToMiSqlConnectionInfoResponseOutput() MiSqlConnectionInfoResponseOutput {
	return i.ToMiSqlConnectionInfoResponseOutputWithContext(context.Background())
}

func (i MiSqlConnectionInfoResponseArgs) ToMiSqlConnectionInfoResponseOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoResponseOutput)
}

func (i MiSqlConnectionInfoResponseArgs) ToMiSqlConnectionInfoResponsePtrOutput() MiSqlConnectionInfoResponsePtrOutput {
	return i.ToMiSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i MiSqlConnectionInfoResponseArgs) ToMiSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoResponseOutput).ToMiSqlConnectionInfoResponsePtrOutputWithContext(ctx)
}

// MiSqlConnectionInfoResponsePtrInput is an input type that accepts MiSqlConnectionInfoResponseArgs, MiSqlConnectionInfoResponsePtr and MiSqlConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `MiSqlConnectionInfoResponsePtrInput` via:
//
//          MiSqlConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type MiSqlConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToMiSqlConnectionInfoResponsePtrOutput() MiSqlConnectionInfoResponsePtrOutput
	ToMiSqlConnectionInfoResponsePtrOutputWithContext(context.Context) MiSqlConnectionInfoResponsePtrOutput
}

type miSqlConnectionInfoResponsePtrType MiSqlConnectionInfoResponseArgs

func MiSqlConnectionInfoResponsePtr(v *MiSqlConnectionInfoResponseArgs) MiSqlConnectionInfoResponsePtrInput {
	return (*miSqlConnectionInfoResponsePtrType)(v)
}

func (*miSqlConnectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfoResponse)(nil)).Elem()
}

func (i *miSqlConnectionInfoResponsePtrType) ToMiSqlConnectionInfoResponsePtrOutput() MiSqlConnectionInfoResponsePtrOutput {
	return i.ToMiSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *miSqlConnectionInfoResponsePtrType) ToMiSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoResponsePtrOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfoResponse)(nil)).Elem()
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponseOutput() MiSqlConnectionInfoResponseOutput {
	return o
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponseOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponseOutput {
	return o
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponsePtrOutput() MiSqlConnectionInfoResponsePtrOutput {
	return o.ToMiSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) *MiSqlConnectionInfoResponse {
		return &v
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoResponseOutput) ManagedInstanceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) string { return v.ManagedInstanceResourceId }).(pulumi.StringOutput)
}

// Password credential.
func (o MiSqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MiSqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MiSqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MiSqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfoResponse)(nil)).Elem()
}

func (o MiSqlConnectionInfoResponsePtrOutput) ToMiSqlConnectionInfoResponsePtrOutput() MiSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MiSqlConnectionInfoResponsePtrOutput) ToMiSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MiSqlConnectionInfoResponsePtrOutput) Elem() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) MiSqlConnectionInfoResponse { return *v }).(MiSqlConnectionInfoResponseOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoResponsePtrOutput) ManagedInstanceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ManagedInstanceResourceId
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o MiSqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MiSqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MiSqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandInputResponse struct {
	// Name of managed instance database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// MigrateMISyncCompleteCommandInputResponseInput is an input type that accepts MigrateMISyncCompleteCommandInputResponseArgs and MigrateMISyncCompleteCommandInputResponseOutput values.
// You can construct a concrete instance of `MigrateMISyncCompleteCommandInputResponseInput` via:
//
//          MigrateMISyncCompleteCommandInputResponseArgs{...}
type MigrateMISyncCompleteCommandInputResponseInput interface {
	pulumi.Input

	ToMigrateMISyncCompleteCommandInputResponseOutput() MigrateMISyncCompleteCommandInputResponseOutput
	ToMigrateMISyncCompleteCommandInputResponseOutputWithContext(context.Context) MigrateMISyncCompleteCommandInputResponseOutput
}

// Input for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandInputResponseArgs struct {
	// Name of managed instance database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (MigrateMISyncCompleteCommandInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandInputResponse)(nil)).Elem()
}

func (i MigrateMISyncCompleteCommandInputResponseArgs) ToMigrateMISyncCompleteCommandInputResponseOutput() MigrateMISyncCompleteCommandInputResponseOutput {
	return i.ToMigrateMISyncCompleteCommandInputResponseOutputWithContext(context.Background())
}

func (i MigrateMISyncCompleteCommandInputResponseArgs) ToMigrateMISyncCompleteCommandInputResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMISyncCompleteCommandInputResponseOutput)
}

func (i MigrateMISyncCompleteCommandInputResponseArgs) ToMigrateMISyncCompleteCommandInputResponsePtrOutput() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return i.ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateMISyncCompleteCommandInputResponseArgs) ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMISyncCompleteCommandInputResponseOutput).ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(ctx)
}

// MigrateMISyncCompleteCommandInputResponsePtrInput is an input type that accepts MigrateMISyncCompleteCommandInputResponseArgs, MigrateMISyncCompleteCommandInputResponsePtr and MigrateMISyncCompleteCommandInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateMISyncCompleteCommandInputResponsePtrInput` via:
//
//          MigrateMISyncCompleteCommandInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateMISyncCompleteCommandInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateMISyncCompleteCommandInputResponsePtrOutput() MigrateMISyncCompleteCommandInputResponsePtrOutput
	ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(context.Context) MigrateMISyncCompleteCommandInputResponsePtrOutput
}

type migrateMISyncCompleteCommandInputResponsePtrType MigrateMISyncCompleteCommandInputResponseArgs

func MigrateMISyncCompleteCommandInputResponsePtr(v *MigrateMISyncCompleteCommandInputResponseArgs) MigrateMISyncCompleteCommandInputResponsePtrInput {
	return (*migrateMISyncCompleteCommandInputResponsePtrType)(v)
}

func (*migrateMISyncCompleteCommandInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMISyncCompleteCommandInputResponse)(nil)).Elem()
}

func (i *migrateMISyncCompleteCommandInputResponsePtrType) ToMigrateMISyncCompleteCommandInputResponsePtrOutput() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return i.ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateMISyncCompleteCommandInputResponsePtrType) ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMISyncCompleteCommandInputResponsePtrOutput)
}

// Input for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponseOutput() MigrateMISyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutput() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o.ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandInputResponse) *MigrateMISyncCompleteCommandInputResponse {
		return &v
	}).(MigrateMISyncCompleteCommandInputResponsePtrOutput)
}

// Name of managed instance database
func (o MigrateMISyncCompleteCommandInputResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandInputResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type MigrateMISyncCompleteCommandInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMISyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutput() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) Elem() MigrateMISyncCompleteCommandInputResponseOutput {
	return o.ApplyT(func(v *MigrateMISyncCompleteCommandInputResponse) MigrateMISyncCompleteCommandInputResponse {
		return *v
	}).(MigrateMISyncCompleteCommandInputResponseOutput)
}

// Name of managed instance database
func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) SourceDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMISyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceDatabaseName
	}).(pulumi.StringPtrOutput)
}

// Output for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandOutputResponse struct {
	// List of errors that happened during the command execution
	Errors []ReportableExceptionResponse `pulumi:"errors"`
}

// MigrateMISyncCompleteCommandOutputResponseInput is an input type that accepts MigrateMISyncCompleteCommandOutputResponseArgs and MigrateMISyncCompleteCommandOutputResponseOutput values.
// You can construct a concrete instance of `MigrateMISyncCompleteCommandOutputResponseInput` via:
//
//          MigrateMISyncCompleteCommandOutputResponseArgs{...}
type MigrateMISyncCompleteCommandOutputResponseInput interface {
	pulumi.Input

	ToMigrateMISyncCompleteCommandOutputResponseOutput() MigrateMISyncCompleteCommandOutputResponseOutput
	ToMigrateMISyncCompleteCommandOutputResponseOutputWithContext(context.Context) MigrateMISyncCompleteCommandOutputResponseOutput
}

// Output for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandOutputResponseArgs struct {
	// List of errors that happened during the command execution
	Errors ReportableExceptionResponseArrayInput `pulumi:"errors"`
}

func (MigrateMISyncCompleteCommandOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandOutputResponse)(nil)).Elem()
}

func (i MigrateMISyncCompleteCommandOutputResponseArgs) ToMigrateMISyncCompleteCommandOutputResponseOutput() MigrateMISyncCompleteCommandOutputResponseOutput {
	return i.ToMigrateMISyncCompleteCommandOutputResponseOutputWithContext(context.Background())
}

func (i MigrateMISyncCompleteCommandOutputResponseArgs) ToMigrateMISyncCompleteCommandOutputResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMISyncCompleteCommandOutputResponseOutput)
}

// Output for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandOutputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandOutputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandOutputResponseOutput) ToMigrateMISyncCompleteCommandOutputResponseOutput() MigrateMISyncCompleteCommandOutputResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandOutputResponseOutput) ToMigrateMISyncCompleteCommandOutputResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandOutputResponseOutput {
	return o
}

// List of errors that happened during the command execution
func (o MigrateMISyncCompleteCommandOutputResponseOutput) Errors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandOutputResponse) []ReportableExceptionResponse { return v.Errors }).(ReportableExceptionResponseArrayOutput)
}

// Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandPropertiesResponse struct {
	// Command type.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Command input
	Input *MigrateMISyncCompleteCommandInputResponse `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateMISyncCompleteCommandOutputResponse `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// MigrateMISyncCompleteCommandPropertiesResponseInput is an input type that accepts MigrateMISyncCompleteCommandPropertiesResponseArgs and MigrateMISyncCompleteCommandPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateMISyncCompleteCommandPropertiesResponseInput` via:
//
//          MigrateMISyncCompleteCommandPropertiesResponseArgs{...}
type MigrateMISyncCompleteCommandPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateMISyncCompleteCommandPropertiesResponseOutput() MigrateMISyncCompleteCommandPropertiesResponseOutput
	ToMigrateMISyncCompleteCommandPropertiesResponseOutputWithContext(context.Context) MigrateMISyncCompleteCommandPropertiesResponseOutput
}

// Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandPropertiesResponseArgs struct {
	// Command type.
	CommandType pulumi.StringInput `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Command input
	Input MigrateMISyncCompleteCommandInputResponsePtrInput `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateMISyncCompleteCommandOutputResponseInput `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
}

func (MigrateMISyncCompleteCommandPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandPropertiesResponse)(nil)).Elem()
}

func (i MigrateMISyncCompleteCommandPropertiesResponseArgs) ToMigrateMISyncCompleteCommandPropertiesResponseOutput() MigrateMISyncCompleteCommandPropertiesResponseOutput {
	return i.ToMigrateMISyncCompleteCommandPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateMISyncCompleteCommandPropertiesResponseArgs) ToMigrateMISyncCompleteCommandPropertiesResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMISyncCompleteCommandPropertiesResponseOutput)
}

// Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandPropertiesResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) ToMigrateMISyncCompleteCommandPropertiesResponseOutput() MigrateMISyncCompleteCommandPropertiesResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) ToMigrateMISyncCompleteCommandPropertiesResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandPropertiesResponseOutput {
	return o
}

// Command type.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) string { return v.CommandType }).(pulumi.StringOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Command input
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Input() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) *MigrateMISyncCompleteCommandInputResponse {
		return v.Input
	}).(MigrateMISyncCompleteCommandInputResponsePtrOutput)
}

// Command output. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Output() MigrateMISyncCompleteCommandOutputResponseOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) MigrateMISyncCompleteCommandOutputResponse {
		return v.Output
	}).(MigrateMISyncCompleteCommandOutputResponseOutput)
}

// The state of the command. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettings `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateMongoDbTaskPropertiesInput is an input type that accepts MigrateMongoDbTaskPropertiesArgs and MigrateMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateMongoDbTaskPropertiesInput` via:
//
//          MigrateMongoDbTaskPropertiesArgs{...}
type MigrateMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateMongoDbTaskPropertiesOutput() MigrateMongoDbTaskPropertiesOutput
	ToMigrateMongoDbTaskPropertiesOutputWithContext(context.Context) MigrateMongoDbTaskPropertiesOutput
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input MongoDbMigrationSettingsPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskProperties)(nil)).Elem()
}

func (i MigrateMongoDbTaskPropertiesArgs) ToMigrateMongoDbTaskPropertiesOutput() MigrateMongoDbTaskPropertiesOutput {
	return i.ToMigrateMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateMongoDbTaskPropertiesArgs) ToMigrateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMongoDbTaskPropertiesOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateMongoDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskProperties)(nil)).Elem()
}

func (o MigrateMongoDbTaskPropertiesOutput) ToMigrateMongoDbTaskPropertiesOutput() MigrateMongoDbTaskPropertiesOutput {
	return o
}

func (o MigrateMongoDbTaskPropertiesOutput) ToMigrateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMongoDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Describes how a MongoDB data migration should be performed
func (o MigrateMongoDbTaskPropertiesOutput) Input() MongoDbMigrationSettingsPtrOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskProperties) *MongoDbMigrationSettings { return v.Input }).(MongoDbMigrationSettingsPtrOutput)
}

// Task type.
func (o MigrateMongoDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input  *MongoDbMigrationSettingsResponse `pulumi:"input"`
	Output []interface{}                     `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateMongoDbTaskPropertiesResponseInput is an input type that accepts MigrateMongoDbTaskPropertiesResponseArgs and MigrateMongoDbTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateMongoDbTaskPropertiesResponseInput` via:
//
//          MigrateMongoDbTaskPropertiesResponseArgs{...}
type MigrateMongoDbTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateMongoDbTaskPropertiesResponseOutput() MigrateMongoDbTaskPropertiesResponseOutput
	ToMigrateMongoDbTaskPropertiesResponseOutputWithContext(context.Context) MigrateMongoDbTaskPropertiesResponseOutput
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input  MongoDbMigrationSettingsResponsePtrInput `pulumi:"input"`
	Output pulumi.ArrayInput                        `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateMongoDbTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateMongoDbTaskPropertiesResponseArgs) ToMigrateMongoDbTaskPropertiesResponseOutput() MigrateMongoDbTaskPropertiesResponseOutput {
	return i.ToMigrateMongoDbTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateMongoDbTaskPropertiesResponseArgs) ToMigrateMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMongoDbTaskPropertiesResponseOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) ToMigrateMongoDbTaskPropertiesResponseOutput() MigrateMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) ToMigrateMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes how a MongoDB data migration should be performed
func (o MigrateMongoDbTaskPropertiesResponseOutput) Input() MongoDbMigrationSettingsResponsePtrOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) *MongoDbMigrationSettingsResponse { return v.Input }).(MongoDbMigrationSettingsResponsePtrOutput)
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInput struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs and MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs{...}
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput
	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs struct {
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput)
}

// MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray and MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray{ MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs{...} }
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput
	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray []MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
		return vs[0].([]MigrateMySqlAzureDbForMySqlSyncDatabaseInput)[vs[1].(int)]
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArgs and MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArgs{...}
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput
	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArgs struct {
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput)
}

// MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArray and MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArray{ MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArgs{...} }
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput
	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArray []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseInput

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArray) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArray) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		return vs[0].([]MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskInputInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskInputArgs and MigrateMySqlAzureDbForMySqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskInputInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskInputArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputOutput
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput)
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput).ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskInputArgs, MigrateMySqlAzureDbForMySqlSyncTaskInputPtr and MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput
}

type migrateMySqlAzureDbForMySqlSyncTaskInputPtrType MigrateMySqlAzureDbForMySqlSyncTaskInputArgs

func MigrateMySqlAzureDbForMySqlSyncTaskInputPtr(v *MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput {
	return (*migrateMySqlAzureDbForMySqlSyncTaskInputPtrType)(v)
}

func (*migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o.ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInput) *MigrateMySqlAzureDbForMySqlSyncTaskInput {
		return &v
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInput) []MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) SourceConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInput) MySqlConnectionInfo { return v.SourceConnectionInfo }).(MySqlConnectionInfoOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) TargetConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInput) MySqlConnectionInfo { return v.TargetConnectionInfo }).(MySqlConnectionInfoOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) Elem() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInput) MigrateMySqlAzureDbForMySqlSyncTaskInput { return *v }).(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInput) []MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) SourceConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) TargetConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskInputResponseInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs and MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskInputResponseInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponseInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInputResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput)
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput).ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs, MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtr and MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput
}

type migrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrType MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs

func MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtr(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponseArgs) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrInput {
	return (*migrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrType)(v)
}

func (*migrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInputResponse)(nil)).Elem()
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o.ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
		return &v
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) SourceConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MySqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) TargetConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MySqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) Elem() MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
		return *v
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseArgs and MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseArgs struct {
	// Error message
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// List of error events.
	Events SyncMigrationDatabaseErrorEventResponseArrayInput `pulumi:"events"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges int `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables int `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges int `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency int `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseArgs and MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseArgs struct {
	// Number of applied changes
	AppliedChanges pulumi.IntInput `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter pulumi.IntInput `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter pulumi.IntInput `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter pulumi.IntInput `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables pulumi.IntInput `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables pulumi.IntInput `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables pulumi.IntInput `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables pulumi.IntInput `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges pulumi.IntInput `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted pulumi.BoolInput `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency pulumi.IntInput `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState pulumi.StringInput `pulumi:"migrationState"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.AppliedChanges }).(pulumi.IntOutput)
}

// Number of cdc deletes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.CdcDeleteCounter }).(pulumi.IntOutput)
}

// Number of cdc inserts
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.CdcInsertCounter }).(pulumi.IntOutput)
}

// Number of cdc updates
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.CdcUpdateCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadCompletedTables
	}).(pulumi.IntOutput)
}

// Number of tables errored in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadErroredTables
	}).(pulumi.IntOutput)
}

// Number of tables loading in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadLoadingTables
	}).(pulumi.IntOutput)
}

// Number of tables queued in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadQueuedTables
	}).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.IncomingChanges }).(pulumi.IntOutput)
}

// Indicates if initial load (full load) has been completed
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.Latency }).(pulumi.IntOutput)
}

// Migration state that this database is in
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseArgs and MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseArgs and MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server name
	SourceServer pulumi.StringInput `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Target server name
	TargetServer pulumi.StringInput `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.SourceServer }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.TargetServer }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter string `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter string `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter string `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter int `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows int `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied int `pulumi:"totalChangesApplied"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseArgs and MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseArgs struct {
	// Number of applied deletes
	CdcDeleteCounter pulumi.StringInput `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter pulumi.StringInput `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter pulumi.StringInput `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter pulumi.IntInput `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn pulumi.StringInput `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime pulumi.StringInput `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn pulumi.StringInput `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows pulumi.IntInput `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime pulumi.StringInput `pulumi:"lastModifiedTime"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Current state of the table migration
	State pulumi.StringInput `pulumi:"state"`
	// Name of the table
	TableName pulumi.StringInput `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied pulumi.IntInput `pulumi:"totalChangesApplied"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcDeleteCounter }).(pulumi.StringOutput)
}

// Number of applied inserts
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcInsertCounter }).(pulumi.StringOutput)
}

// Number of applied updates
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcUpdateCounter }).(pulumi.StringOutput)
}

// Number of data errors occurred
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) int { return v.DataErrorsCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.FullLoadEndedOn }).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.FullLoadStartedOn }).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) int { return v.FullLoadTotalRows }).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) int { return v.TotalChangesApplied }).(pulumi.IntOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs and MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskProperties)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskProperties)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) Input() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskProperties) *MigrateMySqlAzureDbForMySqlSyncTaskInput {
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput)
}

// Task type.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseArgs and MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Input() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput is an input type that accepts MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs and MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput` via:
//
//          MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs{...}
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return i.ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInput struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation *string `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name *string `pulumi:"name"`
	// Name of the source schema
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs and MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput
	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation pulumi.StringPtrInput `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of the source schema
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput)
}

// MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray and MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray{ MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs{...} }
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput
	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return o
}

// How to handle object name casing: either Preserve or ToLower
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) CaseManipulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) *string { return v.CaseManipulation }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of the migration pipeline
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the source schema
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateOracleAzureDbPostgreSqlSyncDatabaseInput {
		return vs[0].([]MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)[vs[1].(int)]
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation *string `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name *string `pulumi:"name"`
	// Name of the source schema
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArgs and MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput
	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArgs struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation pulumi.StringPtrInput `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of the source schema
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput)
}

// MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArray and MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArray{ MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArgs{...} }
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput
	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArray []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseInput

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArray) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArray) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

// How to handle object name casing: either Preserve or ToLower
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) CaseManipulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.CaseManipulation }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the migration pipeline
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the source schema
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.SourceSetting
	}).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.TargetSetting
	}).(pulumi.StringMapOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		return vs[0].([]MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateOracleAzureDbPostgreSqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateOracleAzureDbPostgreSqlSyncTaskInputInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs and MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskInputInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput)
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput).ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs, MigrateOracleAzureDbPostgreSqlSyncTaskInputPtr and MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput
}

type migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs

func MigrateOracleAzureDbPostgreSqlSyncTaskInputPtr(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput {
	return (*migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType)(v)
}

func (*migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInput) *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		return &v
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInput) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) SourceConnectionInfo() OracleConnectionInfoOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInput) OracleConnectionInfo {
		return v.SourceConnectionInfo
	}).(OracleConnectionInfoOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) TargetConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) Elem() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInput) MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		return *v
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInput) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) SourceConnectionInfo() OracleConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInput) *OracleConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs and MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput)
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput).ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs, MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtr and MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput
}

type migrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrType MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs

func MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtr(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseArgs) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrInput {
	return (*migrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrType)(v)
}

func (*migrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i *migrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrType) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrType) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return &v
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) OracleConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(OracleConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) Elem() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return *v
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs and MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs struct {
	// Error message
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// List of error events.
	Events SyncMigrationDatabaseErrorEventResponseArrayInput `pulumi:"events"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) *string {
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges int `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables int `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges int `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency int `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

// MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs and MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs struct {
	// Number of applied changes
	AppliedChanges pulumi.IntInput `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter pulumi.IntInput `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter pulumi.IntInput `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter pulumi.IntInput `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables pulumi.IntInput `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables pulumi.IntInput `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables pulumi.IntInput `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables pulumi.IntInput `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges pulumi.IntInput `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted pulumi.BoolInput `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency pulumi.IntInput `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState pulumi.StringInput `pulumi:"migrationState"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
}

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int { return v.AppliedChanges }).(pulumi.IntOutput)
}

// Number of cdc deletes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcDeleteCounter
	}).(pulumi.IntOutput)
}

// Number of cdc inserts
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcInsertCounter
	}).(pulumi.IntOutput)
}

// Number of cdc updates
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcUpdateCounter
	}).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadCompletedTables
	}).(pulumi.IntOutput)
}

// Number of tables errored in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadErroredTables
	}).(pulumi.IntOutput)
}

// Number of tables loading in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadLoadingTables
	}).(pulumi.IntOutput)
}

// Number of tables queued in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadQueuedTables
	}).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.IncomingChanges
	}).(pulumi.IntOutput)
}

// Indicates if initial load (full load) has been completed
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int { return v.Latency }).(pulumi.IntOutput)
}

// Migration state that this database is in
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.MigrationState
	}).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseArgs and MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseArgs and MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server name
	SourceServer pulumi.StringInput `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Target server name
	TargetServer pulumi.StringInput `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServer
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServer
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter int `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows int `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied int `pulumi:"totalChangesApplied"`
}

// MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseArgs and MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseArgs struct {
	// Number of applied deletes
	CdcDeleteCounter pulumi.IntInput `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter pulumi.IntInput `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter pulumi.IntInput `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter pulumi.IntInput `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn pulumi.StringInput `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime pulumi.StringInput `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn pulumi.StringInput `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows pulumi.IntInput `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime pulumi.StringInput `pulumi:"lastModifiedTime"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Current state of the table migration
	State pulumi.StringInput `pulumi:"state"`
	// Name of the table
	TableName pulumi.StringInput `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied pulumi.IntInput `pulumi:"totalChangesApplied"`
}

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.CdcDeleteCounter }).(pulumi.IntOutput)
}

// Number of applied inserts
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.CdcInsertCounter }).(pulumi.IntOutput)
}

// Number of applied updates
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.CdcUpdateCounter }).(pulumi.IntOutput)
}

// Number of data errors occurred
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.DataErrorsCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEndedOn
	}).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadStartedOn
	}).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.FullLoadTotalRows }).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.LastModifiedTime
	}).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.TotalChangesApplied
	}).(pulumi.IntOutput)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Tables selected for migration
	SelectedTables []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs struct {
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tables selected for migration
	SelectedTables MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayInput `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray{ MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs{...} }
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tables selected for migration
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) SelectedTables() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput {
		return v.SelectedTables
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) map[string]string {
		return v.SourceSetting
	}).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) map[string]string {
		return v.TargetSetting
	}).(pulumi.StringMapOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Tables selected for migration
	SelectedTables []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArgs struct {
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tables selected for migration
	SelectedTables MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayInput `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArray and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArray{ MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArgs{...} }
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArray []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseInput

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tables selected for migration
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) SelectedTables() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse {
		return v.SelectedTables
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.SourceSetting
	}).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) *string {
		return v.TargetDatabaseName
	}).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.TargetSetting
	}).(pulumi.StringMapOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput)
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput struct {
	// Name of the table to migrate
	Name *string `pulumi:"name"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs struct {
	// Name of the table to migrate
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray{ MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs{...} }
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputInput

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput)
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return o
}

// Name of the table to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput)
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse struct {
	// Name of the table to migrate
	Name *string `pulumi:"name"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArgs struct {
	// Name of the table to migrate
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArray and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArray{ MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArgs{...} }
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArray []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseInput

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput)
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput {
	return o
}

// Name of the table to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput).ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtr and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs

func MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtr(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
		return &v
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) SourceConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) TargetConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) Elem() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
		return *v
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs struct {
	// Databases to migrate
	SelectedDatabases MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput).ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtr and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput
}

type migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrType MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs

func MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtr(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseArgs) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrInput {
	return (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrType)(v)
}

func (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
		return &v
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
		return *v
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs struct {
	// Error message
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// List of error events.
	Events SyncMigrationDatabaseErrorEventResponseArrayInput `pulumi:"events"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) *string {
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges int `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables int `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges int `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency int `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs struct {
	// Number of applied changes
	AppliedChanges pulumi.IntInput `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter pulumi.IntInput `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter pulumi.IntInput `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter pulumi.IntInput `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables pulumi.IntInput `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables pulumi.IntInput `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables pulumi.IntInput `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables pulumi.IntInput `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges pulumi.IntInput `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted pulumi.BoolInput `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency pulumi.IntInput `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState pulumi.StringInput `pulumi:"migrationState"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.AppliedChanges
	}).(pulumi.IntOutput)
}

// Number of cdc deletes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcDeleteCounter
	}).(pulumi.IntOutput)
}

// Number of cdc inserts
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcInsertCounter
	}).(pulumi.IntOutput)
}

// Number of cdc updates
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcUpdateCounter
	}).(pulumi.IntOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Migration end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.EndedOn
	}).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadCompletedTables
	}).(pulumi.IntOutput)
}

// Number of tables errored in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadErroredTables
	}).(pulumi.IntOutput)
}

// Number of tables loading in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadLoadingTables
	}).(pulumi.IntOutput)
}

// Number of tables queued in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadQueuedTables
	}).(pulumi.IntOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.IncomingChanges
	}).(pulumi.IntOutput)
}

// Indicates if initial load (full load) has been completed
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int { return v.Latency }).(pulumi.IntOutput)
}

// Migration state that this database is in
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.MigrationState
	}).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.StartedOn
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server type.
	SourceServerType string `pulumi:"sourceServerType"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Migration status
	State string `pulumi:"state"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server type.
	TargetServerType string `pulumi:"targetServerType"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server name
	SourceServer pulumi.StringInput `pulumi:"sourceServer"`
	// Source server type.
	SourceServerType pulumi.StringInput `pulumi:"sourceServerType"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Migration status
	State pulumi.StringInput `pulumi:"state"`
	// Target server name
	TargetServer pulumi.StringInput `pulumi:"targetServer"`
	// Target server type.
	TargetServerType pulumi.StringInput `pulumi:"targetServerType"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.EndedOn
	}).(pulumi.StringOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Source server name
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServer
	}).(pulumi.StringOutput)
}

// Source server type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerType
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.StartedOn
	}).(pulumi.StringOutput)
}

// Migration status
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.State
	}).(pulumi.StringOutput)
}

// Target server name
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServer
	}).(pulumi.StringOutput)
}

// Target server type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerType
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter int `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows int `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied int `pulumi:"totalChangesApplied"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseArgs struct {
	// Number of applied deletes
	CdcDeleteCounter pulumi.IntInput `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter pulumi.IntInput `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter pulumi.IntInput `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter pulumi.IntInput `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn pulumi.StringInput `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime pulumi.StringInput `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn pulumi.StringInput `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows pulumi.IntInput `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime pulumi.StringInput `pulumi:"lastModifiedTime"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Current state of the table migration
	State pulumi.StringInput `pulumi:"state"`
	// Name of the table
	TableName pulumi.StringInput `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied pulumi.IntInput `pulumi:"totalChangesApplied"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.CdcDeleteCounter
	}).(pulumi.IntOutput)
}

// Number of applied inserts
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.CdcInsertCounter
	}).(pulumi.IntOutput)
}

// Number of applied updates
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.CdcUpdateCounter
	}).(pulumi.IntOutput)
}

// Number of data errors occurred
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.DataErrorsCounter
	}).(pulumi.IntOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Full load end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEndedOn
	}).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadStartedOn
	}).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.FullLoadTotalRows
	}).(pulumi.IntOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.LastModifiedTime
	}).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.TableName
	}).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.TotalChangesApplied
	}).(pulumi.IntOutput)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
		return v.Input
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInput struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateSqlServerSqlDbDatabaseInputInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArgs and MigrateSqlServerSqlDbDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputArgs{...}
type MigrateSqlServerSqlDbDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput
	ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputArgs struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateSqlServerSqlDbDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputOutput)
}

// MigrateSqlServerSqlDbDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArray and MigrateSqlServerSqlDbDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputArray{ MigrateSqlServerSqlDbDatabaseInputArgs{...} }
type MigrateSqlServerSqlDbDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput
	ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput
}

type MigrateSqlServerSqlDbDatabaseInputArray []MigrateSqlServerSqlDbDatabaseInputInput

func (MigrateSqlServerSqlDbDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputOutput) ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputOutput) ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputOutput {
	return o
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInput {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInput)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponse struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateSqlServerSqlDbDatabaseInputResponseInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputResponseArgs and MigrateSqlServerSqlDbDatabaseInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputResponseInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputResponseArgs{...}
type MigrateSqlServerSqlDbDatabaseInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput
	ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponseArgs struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateSqlServerSqlDbDatabaseInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputResponseArgs) ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputResponseArgs) ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputResponseOutput)
}

// MigrateSqlServerSqlDbDatabaseInputResponseArrayInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputResponseArray and MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputResponseArrayInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputResponseArray{ MigrateSqlServerSqlDbDatabaseInputResponseArgs{...} }
type MigrateSqlServerSqlDbDatabaseInputResponseArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput
	ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput
}

type MigrateSqlServerSqlDbDatabaseInputResponseArray []MigrateSqlServerSqlDbDatabaseInputResponseInput

func (MigrateSqlServerSqlDbDatabaseInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputResponseArray) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputResponseArray) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputResponseOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInput struct {
	// Unique identifier for database
	Id *string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of database
	Name *string `pulumi:"name"`
	// Schema name to be migrated
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateSqlServerSqlDbSyncDatabaseInputInput is an input type that accepts MigrateSqlServerSqlDbSyncDatabaseInputArgs and MigrateSqlServerSqlDbSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncDatabaseInputInput` via:
//
//          MigrateSqlServerSqlDbSyncDatabaseInputArgs{...}
type MigrateSqlServerSqlDbSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncDatabaseInputOutput() MigrateSqlServerSqlDbSyncDatabaseInputOutput
	ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputArgs struct {
	// Unique identifier for database
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Schema name to be migrated
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateSqlServerSqlDbSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArgs) ToMigrateSqlServerSqlDbSyncDatabaseInputOutput() MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArgs) ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncDatabaseInputOutput)
}

// MigrateSqlServerSqlDbSyncDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlDbSyncDatabaseInputArray and MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlDbSyncDatabaseInputArray{ MigrateSqlServerSqlDbSyncDatabaseInputArgs{...} }
type MigrateSqlServerSqlDbSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput
	ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput
}

type MigrateSqlServerSqlDbSyncDatabaseInputArray []MigrateSqlServerSqlDbSyncDatabaseInputInput

func (MigrateSqlServerSqlDbSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArray) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArray) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputOutput() MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return o
}

// Unique identifier for database
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of database
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Schema name to be migrated
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Target database name
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbSyncDatabaseInput {
		return vs[0].([]MigrateSqlServerSqlDbSyncDatabaseInput)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbSyncDatabaseInputOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputResponse struct {
	// Unique identifier for database
	Id *string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of database
	Name *string `pulumi:"name"`
	// Schema name to be migrated
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateSqlServerSqlDbSyncDatabaseInputResponseInput is an input type that accepts MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs and MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncDatabaseInputResponseInput` via:
//
//          MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs{...}
type MigrateSqlServerSqlDbSyncDatabaseInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput
	ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs struct {
	// Unique identifier for database
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Schema name to be migrated
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return i.ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput)
}

// MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayInput is an input type that accepts MigrateSqlServerSqlDbSyncDatabaseInputResponseArray and MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayInput` via:
//
//          MigrateSqlServerSqlDbSyncDatabaseInputResponseArray{ MigrateSqlServerSqlDbSyncDatabaseInputResponseArgs{...} }
type MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput
	ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput
}

type MigrateSqlServerSqlDbSyncDatabaseInputResponseArray []MigrateSqlServerSqlDbSyncDatabaseInputResponseInput

func (MigrateSqlServerSqlDbSyncDatabaseInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputResponseArray) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return i.ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputResponseArray) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return o
}

// Unique identifier for database
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of database
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Schema name to be migrated
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Target database name
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlDbSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbSyncTaskInputInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskInputArgs and MigrateSqlServerSqlDbSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskInputInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskInputArgs{...}
type MigrateSqlServerSqlDbSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskInputOutput() MigrateSqlServerSqlDbSyncTaskInputOutput
	ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskInputOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions MigrationValidationOptionsPtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputOutput() MigrateSqlServerSqlDbSyncTaskInputOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputOutput)
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputOutput).ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbSyncTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskInputArgs, MigrateSqlServerSqlDbSyncTaskInputPtr and MigrateSqlServerSqlDbSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskInputPtrInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput
	ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput
}

type migrateSqlServerSqlDbSyncTaskInputPtrType MigrateSqlServerSqlDbSyncTaskInputArgs

func MigrateSqlServerSqlDbSyncTaskInputPtr(v *MigrateSqlServerSqlDbSyncTaskInputArgs) MigrateSqlServerSqlDbSyncTaskInputPtrInput {
	return (*migrateSqlServerSqlDbSyncTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlDbSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbSyncTaskInputPtrType) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbSyncTaskInputPtrType) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ToMigrateSqlServerSqlDbSyncTaskInputOutput() MigrateSqlServerSqlDbSyncTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) *MigrateSqlServerSqlDbSyncTaskInput {
		return &v
	}).(MigrateSqlServerSqlDbSyncTaskInputPtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) []MigrateSqlServerSqlDbSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) *MigrationValidationOptions { return v.ValidationOptions }).(MigrationValidationOptionsPtrOutput)
}

type MigrateSqlServerSqlDbSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) Elem() MigrateSqlServerSqlDbSyncTaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) MigrateSqlServerSqlDbSyncTaskInput { return *v }).(MigrateSqlServerSqlDbSyncTaskInputOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) []MigrateSqlServerSqlDbSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) *MigrationValidationOptions {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbSyncTaskInputResponseInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskInputResponseArgs and MigrateSqlServerSqlDbSyncTaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskInputResponseInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskInputResponseArgs{...}
type MigrateSqlServerSqlDbSyncTaskInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskInputResponseOutput() MigrateSqlServerSqlDbSyncTaskInputResponseOutput
	ToMigrateSqlServerSqlDbSyncTaskInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskInputResponseOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputResponseArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions MigrationValidationOptionsResponsePtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbSyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskInputResponseArgs) ToMigrateSqlServerSqlDbSyncTaskInputResponseOutput() MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskInputResponseArgs) ToMigrateSqlServerSqlDbSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputResponseOutput)
}

func (i MigrateSqlServerSqlDbSyncTaskInputResponseArgs) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskInputResponseArgs) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputResponseOutput).ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbSyncTaskInputResponsePtrInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskInputResponseArgs, MigrateSqlServerSqlDbSyncTaskInputResponsePtr and MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskInputResponsePtrInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbSyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput
	ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput
}

type migrateSqlServerSqlDbSyncTaskInputResponsePtrType MigrateSqlServerSqlDbSyncTaskInputResponseArgs

func MigrateSqlServerSqlDbSyncTaskInputResponsePtr(v *MigrateSqlServerSqlDbSyncTaskInputResponseArgs) MigrateSqlServerSqlDbSyncTaskInputResponsePtrInput {
	return (*migrateSqlServerSqlDbSyncTaskInputResponsePtrType)(v)
}

func (*migrateSqlServerSqlDbSyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbSyncTaskInputResponsePtrType) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbSyncTaskInputResponsePtrType) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponseOutput() MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) *MigrateSqlServerSqlDbSyncTaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) *MigrationValidationOptionsResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) MigrateSqlServerSqlDbSyncTaskInputResponse {
		return *v
	}).(MigrateSqlServerSqlDbSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *MigrationValidationOptionsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseArgs and MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseArgs{...}
type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput
	ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseArgs struct {
	// Error message
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// List of error events.
	Events SyncMigrationDatabaseErrorEventResponseArrayInput `pulumi:"events"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges int `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables int `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges int `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency int `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

// MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseArgs and MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseArgs{...}
type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput
	ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseArgs struct {
	// Number of applied changes
	AppliedChanges pulumi.IntInput `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter pulumi.IntInput `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter pulumi.IntInput `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter pulumi.IntInput `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables pulumi.IntInput `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables pulumi.IntInput `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables pulumi.IntInput `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables pulumi.IntInput `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges pulumi.IntInput `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted pulumi.BoolInput `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency pulumi.IntInput `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState pulumi.StringInput `pulumi:"migrationState"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
}

func (MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.AppliedChanges }).(pulumi.IntOutput)
}

// Number of cdc deletes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.CdcDeleteCounter }).(pulumi.IntOutput)
}

// Number of cdc inserts
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.CdcInsertCounter }).(pulumi.IntOutput)
}

// Number of cdc updates
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.CdcUpdateCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.FullLoadCompletedTables }).(pulumi.IntOutput)
}

// Number of tables errored in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.FullLoadErroredTables }).(pulumi.IntOutput)
}

// Number of tables loading in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.FullLoadLoadingTables }).(pulumi.IntOutput)
}

// Number of tables queued in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.FullLoadQueuedTables }).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.IncomingChanges }).(pulumi.IntOutput)
}

// Indicates if initial load (full load) has been completed
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.Latency }).(pulumi.IntOutput)
}

// Migration state that this database is in
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbSyncTaskOutputErrorResponseInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskOutputErrorResponseArgs and MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskOutputErrorResponseInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskOutputErrorResponseArgs{...}
type MigrateSqlServerSqlDbSyncTaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput
	ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput
}

type MigrateSqlServerSqlDbSyncTaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbSyncTaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskOutputErrorResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskOutputErrorResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse struct {
	// Count of databases
	DatabaseCount int `pulumi:"databaseCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseArgs and MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseArgs{...}
type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput
	ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput
}

type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseArgs struct {
	// Count of databases
	DatabaseCount pulumi.IntInput `pulumi:"databaseCount"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server name
	SourceServer pulumi.StringInput `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Target server name
	TargetServer pulumi.StringInput `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Count of databases
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) DatabaseCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) int { return v.DatabaseCount }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.SourceServer }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.TargetServer }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter int `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows int `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied int `pulumi:"totalChangesApplied"`
}

// MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseArgs and MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseArgs{...}
type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput
	ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput
}

type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseArgs struct {
	// Number of applied deletes
	CdcDeleteCounter pulumi.IntInput `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter pulumi.IntInput `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter pulumi.IntInput `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter pulumi.IntInput `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn pulumi.StringInput `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime pulumi.StringInput `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn pulumi.StringInput `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows pulumi.IntInput `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime pulumi.StringInput `pulumi:"lastModifiedTime"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Current state of the table migration
	State pulumi.StringInput `pulumi:"state"`
	// Name of the table
	TableName pulumi.StringInput `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied pulumi.IntInput `pulumi:"totalChangesApplied"`
}

func (MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseArgs) ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.CdcDeleteCounter }).(pulumi.IntOutput)
}

// Number of applied inserts
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.CdcInsertCounter }).(pulumi.IntOutput)
}

// Number of applied updates
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.CdcUpdateCounter }).(pulumi.IntOutput)
}

// Number of data errors occurred
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.DataErrorsCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadEndedOn }).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadEstFinishTime }).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadStartedOn }).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.FullLoadTotalRows }).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.TotalChangesApplied }).(pulumi.IntOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlDbSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbSyncTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskPropertiesArgs and MigrateSqlServerSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskPropertiesInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskPropertiesArgs{...}
type MigrateSqlServerSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskPropertiesOutput() MigrateSqlServerSqlDbSyncTaskPropertiesOutput
	ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlDbSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutput() MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskPropertiesOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutput() MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) Input() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskProperties) *MigrateSqlServerSqlDbSyncTaskInput { return v.Input }).(MigrateSqlServerSqlDbSyncTaskInputPtrOutput)
}

// Task type.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbSyncTaskPropertiesResponseInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskPropertiesResponseArgs and MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskPropertiesResponseInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskPropertiesResponseArgs{...}
type MigrateSqlServerSqlDbSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput() MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput
	ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSqlServerSqlDbSyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesResponseArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput() MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesResponseArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput() MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) *MigrateSqlServerSqlDbSyncTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbTaskInputInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs and MigrateSqlServerSqlDbTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputInput` via:
//
//          MigrateSqlServerSqlDbTaskInputArgs{...}
type MigrateSqlServerSqlDbTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput
	ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions MigrationValidationOptionsPtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput)
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput).ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs, MigrateSqlServerSqlDbTaskInputPtr and MigrateSqlServerSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputPtrInput` via:
//
//          MigrateSqlServerSqlDbTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput
	ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput
}

type migrateSqlServerSqlDbTaskInputPtrType MigrateSqlServerSqlDbTaskInputArgs

func MigrateSqlServerSqlDbTaskInputPtr(v *MigrateSqlServerSqlDbTaskInputArgs) MigrateSqlServerSqlDbTaskInputPtrInput {
	return (*migrateSqlServerSqlDbTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) *MigrateSqlServerSqlDbTaskInput {
		return &v
	}).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) []MigrateSqlServerSqlDbDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) *MigrationValidationOptions { return v.ValidationOptions }).(MigrationValidationOptionsPtrOutput)
}

type MigrateSqlServerSqlDbTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) Elem() MigrateSqlServerSqlDbTaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) MigrateSqlServerSqlDbTaskInput { return *v }).(MigrateSqlServerSqlDbTaskInputOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) []MigrateSqlServerSqlDbDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *MigrationValidationOptions {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbTaskInputResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskInputResponseArgs and MigrateSqlServerSqlDbTaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskInputResponseArgs{...}
type MigrateSqlServerSqlDbTaskInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput
	ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponseArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions MigrationValidationOptionsResponsePtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskInputResponseArgs) ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputResponseArgs) ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputResponseOutput)
}

func (i MigrateSqlServerSqlDbTaskInputResponseArgs) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputResponseArgs) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputResponseOutput).ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskInputResponsePtrInput is an input type that accepts MigrateSqlServerSqlDbTaskInputResponseArgs, MigrateSqlServerSqlDbTaskInputResponsePtr and MigrateSqlServerSqlDbTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputResponsePtrInput` via:
//
//          MigrateSqlServerSqlDbTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbTaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput
	ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput
}

type migrateSqlServerSqlDbTaskInputResponsePtrType MigrateSqlServerSqlDbTaskInputResponseArgs

func MigrateSqlServerSqlDbTaskInputResponsePtr(v *MigrateSqlServerSqlDbTaskInputResponseArgs) MigrateSqlServerSqlDbTaskInputResponsePtrInput {
	return (*migrateSqlServerSqlDbTaskInputResponsePtrType)(v)
}

func (*migrateSqlServerSqlDbTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskInputResponsePtrType) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskInputResponsePtrType) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) MigrateSqlServerSqlDbTaskInputResponse { return *v }).(MigrateSqlServerSqlDbTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse struct {
	// Name of the item
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount int `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects int `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted int `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary map[string]DataItemMigrationSummaryResultResponse `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs and MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs struct {
	// Name of the item
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount pulumi.IntInput `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Number of objects
	NumberOfObjects pulumi.IntInput `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted pulumi.IntInput `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary DataItemMigrationSummaryResultResponseMapInput `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage pulumi.StringInput `pulumi:"stage"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of database/object errors.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.ErrorCount }).(pulumi.IntOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Number of objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjects() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.NumberOfObjects }).(pulumi.IntOutput)
}

// Number of successfully completed objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjectsCompleted() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.NumberOfObjectsCompleted }).(pulumi.IntOutput)
}

// Summary of object results in the migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ObjectSummary() DataItemMigrationSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) map[string]DataItemMigrationSummaryResultResponse {
		return v.ObjectSummary
	}).(DataItemMigrationSummaryResultResponseMapOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration stage that this database is in
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs and MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseArgs) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputErrorResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputErrorResponseArgs and MigrateSqlServerSqlDbTaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputErrorResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputErrorResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput
}

type MigrateSqlServerSqlDbTaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputErrorResponseArgs) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputErrorResponseArgs) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputErrorResponseOutput)
}

type MigrateSqlServerSqlDbTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse struct {
	// Summary of database results in the migration
	DatabaseSummary map[string]DatabaseSummaryResultResponse `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds int `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultResponse `pulumi:"migrationReportResult"`
	// Migration Validation Results
	MigrationValidationResult *MigrationValidationResultResponse `pulumi:"migrationValidationResult"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs and MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs struct {
	// Summary of database results in the migration
	DatabaseSummary DatabaseSummaryResultResponseMapInput `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds pulumi.IntInput `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult MigrationReportResultResponsePtrInput `pulumi:"migrationReportResult"`
	// Migration Validation Results
	MigrationValidationResult MigrationValidationResultResponsePtrInput `pulumi:"migrationValidationResult"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current status of migration
	Status pulumi.StringInput `pulumi:"status"`
	// Migration status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput)
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

// Summary of database results in the migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DatabaseSummary() DatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) map[string]DatabaseSummaryResultResponse {
		return v.DatabaseSummary
	}).(DatabaseSummaryResultResponseMapOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Duration of task execution in seconds.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DurationInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) int { return v.DurationInSeconds }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Migration Report Result, provides unique url for downloading your migration report.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) MigrationReportResult() MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) *MigrationReportResultResponse {
		return v.MigrationReportResult
	}).(MigrationReportResultResponsePtrOutput)
}

// Migration Validation Results
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) MigrationValidationResult() MigrationValidationResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) *MigrationValidationResultResponse {
		return v.MigrationValidationResult
	}).(MigrationValidationResultResponsePtrOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Migration status message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount int `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount int `pulumi:"itemsCount"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// MigrateSqlServerSqlDbTaskOutputTableLevelResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs and MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputTableLevelResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputTableLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount pulumi.IntInput `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount pulumi.IntInput `pulumi:"itemsCount"`
	// Name of the item
	ObjectName pulumi.StringInput `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix pulumi.StringInput `pulumi:"resultPrefix"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Status message
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
}

func (MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputTableLevelResponseArgs) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput)
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) int { return v.ItemsCompletedCount }).(pulumi.IntOutput)
}

// Number of items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) int { return v.ItemsCount }).(pulumi.IntOutput)
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ObjectName }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlDbTaskOutputValidationResultResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs and MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskOutputValidationResultResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs{...}
type MigrateSqlServerSqlDbTaskOutputValidationResultResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput
	ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs struct {
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskOutputValidationResultResponseArgs) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput)
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesArgs and MigrateSqlServerSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesInput` via:
//
//          MigrateSqlServerSqlDbTaskPropertiesArgs{...}
type MigrateSqlServerSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput
	ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) Input() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) *MigrateSqlServerSqlDbTaskInput { return v.Input }).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Task type.
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbTaskPropertiesResponseInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesResponseArgs and MigrateSqlServerSqlDbTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesResponseInput` via:
//
//          MigrateSqlServerSqlDbTaskPropertiesResponseArgs{...}
type MigrateSqlServerSqlDbTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput
	ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSqlServerSqlDbTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskPropertiesResponseArgs) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesResponseArgs) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesResponseOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInput struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths []string `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// MigrateSqlServerSqlMIDatabaseInputInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArgs and MigrateSqlServerSqlMIDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputArgs{...}
type MigrateSqlServerSqlMIDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput
	ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputArgs struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths pulumi.StringArrayInput `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Name of the database
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName pulumi.StringInput `pulumi:"restoreDatabaseName"`
}

func (MigrateSqlServerSqlMIDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputOutput)
}

// MigrateSqlServerSqlMIDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArray and MigrateSqlServerSqlMIDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputArray{ MigrateSqlServerSqlMIDatabaseInputArgs{...} }
type MigrateSqlServerSqlMIDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput
	ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput
}

type MigrateSqlServerSqlMIDatabaseInputArray []MigrateSqlServerSqlMIDatabaseInputInput

func (MigrateSqlServerSqlMIDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputOutput) ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputOutput) ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputOutput {
	return o
}

// The list of backup files to be used in case of existing backups.
func (o MigrateSqlServerSqlMIDatabaseInputOutput) BackupFilePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) []string { return v.BackupFilePaths }).(pulumi.StringArrayOutput)
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInput {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInput)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponse struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths []string `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// MigrateSqlServerSqlMIDatabaseInputResponseInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputResponseArgs and MigrateSqlServerSqlMIDatabaseInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputResponseInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputResponseArgs{...}
type MigrateSqlServerSqlMIDatabaseInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput
	ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponseArgs struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths pulumi.StringArrayInput `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare FileShareResponsePtrInput `pulumi:"backupFileShare"`
	// Name of the database
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName pulumi.StringInput `pulumi:"restoreDatabaseName"`
}

func (MigrateSqlServerSqlMIDatabaseInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputResponseArgs) ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputResponseArgs) ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputResponseOutput)
}

// MigrateSqlServerSqlMIDatabaseInputResponseArrayInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputResponseArray and MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputResponseArrayInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputResponseArray{ MigrateSqlServerSqlMIDatabaseInputResponseArgs{...} }
type MigrateSqlServerSqlMIDatabaseInputResponseArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput
	ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput
}

type MigrateSqlServerSqlMIDatabaseInputResponseArray []MigrateSqlServerSqlMIDatabaseInputResponseInput

func (MigrateSqlServerSqlMIDatabaseInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputResponseArray) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputResponseArray) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

// The list of backup files to be used in case of existing backups.
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) BackupFilePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) []string { return v.BackupFilePaths }).(pulumi.StringArrayOutput)
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputResponseOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMISyncTaskInputInput is an input type that accepts MigrateSqlServerSqlMISyncTaskInputArgs and MigrateSqlServerSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskInputInput` via:
//
//          MigrateSqlServerSqlMISyncTaskInputArgs{...}
type MigrateSqlServerSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskInputOutput() MigrateSqlServerSqlMISyncTaskInputOutput
	ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputOutput() MigrateSqlServerSqlMISyncTaskInputOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputOutput)
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputOutput).ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMISyncTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlMISyncTaskInputArgs, MigrateSqlServerSqlMISyncTaskInputPtr and MigrateSqlServerSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskInputPtrInput` via:
//
//          MigrateSqlServerSqlMISyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput
	ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput
}

type migrateSqlServerSqlMISyncTaskInputPtrType MigrateSqlServerSqlMISyncTaskInputArgs

func MigrateSqlServerSqlMISyncTaskInputPtr(v *MigrateSqlServerSqlMISyncTaskInputArgs) MigrateSqlServerSqlMISyncTaskInputPtrInput {
	return (*migrateSqlServerSqlMISyncTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlMISyncTaskInputPtrType) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMISyncTaskInputPtrType) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputOutput) ToMigrateSqlServerSqlMISyncTaskInputOutput() MigrateSqlServerSqlMISyncTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputOutput) ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputOutput) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMISyncTaskInputOutput) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) *MigrateSqlServerSqlMISyncTaskInput {
		return &v
	}).(MigrateSqlServerSqlMISyncTaskInputPtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputOutput) AzureApp() AzureActiveDirectoryAppOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) AzureActiveDirectoryApp { return v.AzureApp }).(AzureActiveDirectoryAppOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputOutput) TargetConnectionInfo() MiSqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) MiSqlConnectionInfo { return v.TargetConnectionInfo }).(MiSqlConnectionInfoOutput)
}

type MigrateSqlServerSqlMISyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) Elem() MigrateSqlServerSqlMISyncTaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) MigrateSqlServerSqlMISyncTaskInput { return *v }).(MigrateSqlServerSqlMISyncTaskInputOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) AzureApp() AzureActiveDirectoryAppPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *AzureActiveDirectoryApp {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppPtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) TargetConnectionInfo() MiSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *MiSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMISyncTaskInputResponseInput is an input type that accepts MigrateSqlServerSqlMISyncTaskInputResponseArgs and MigrateSqlServerSqlMISyncTaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskInputResponseInput` via:
//
//          MigrateSqlServerSqlMISyncTaskInputResponseArgs{...}
type MigrateSqlServerSqlMISyncTaskInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskInputResponseOutput() MigrateSqlServerSqlMISyncTaskInputResponseOutput
	ToMigrateSqlServerSqlMISyncTaskInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskInputResponseOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputResponseArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponseInput `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare FileShareResponsePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMISyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskInputResponseArgs) ToMigrateSqlServerSqlMISyncTaskInputResponseOutput() MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskInputResponseArgs) ToMigrateSqlServerSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputResponseOutput)
}

func (i MigrateSqlServerSqlMISyncTaskInputResponseArgs) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutput() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskInputResponseArgs) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputResponseOutput).ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMISyncTaskInputResponsePtrInput is an input type that accepts MigrateSqlServerSqlMISyncTaskInputResponseArgs, MigrateSqlServerSqlMISyncTaskInputResponsePtr and MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskInputResponsePtrInput` via:
//
//          MigrateSqlServerSqlMISyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMISyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutput() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput
	ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput
}

type migrateSqlServerSqlMISyncTaskInputResponsePtrType MigrateSqlServerSqlMISyncTaskInputResponseArgs

func MigrateSqlServerSqlMISyncTaskInputResponsePtr(v *MigrateSqlServerSqlMISyncTaskInputResponseArgs) MigrateSqlServerSqlMISyncTaskInputResponsePtrInput {
	return (*migrateSqlServerSqlMISyncTaskInputResponsePtrType)(v)
}

func (*migrateSqlServerSqlMISyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (i *migrateSqlServerSqlMISyncTaskInputResponsePtrType) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutput() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMISyncTaskInputResponsePtrType) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponseOutput() MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutput() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) *MigrateSqlServerSqlMISyncTaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse { return v.AzureApp }).(AzureActiveDirectoryAppResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutput() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) MigrateSqlServerSqlMISyncTaskInputResponse {
		return *v
	}).(MigrateSqlServerSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse struct {
	// Backup sets that are currently active (Either being uploaded or getting restored)
	ActiveBackupSets []BackupSetInfoResponse `pulumi:"activeBackupSets"`
	// Name of container created in the Azure Storage account where backups are copied to
	ContainerName string `pulumi:"containerName"`
	// Database migration end time
	EndedOn string `pulumi:"endedOn"`
	// prefix string to use for querying errors for this database
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Details of full backup set
	FullBackupSetInfo BackupSetInfoResponse `pulumi:"fullBackupSetInfo"`
	// Result identifier
	Id string `pulumi:"id"`
	// Whether full backup has been applied to the target database or not
	IsFullBackupRestored bool `pulumi:"isFullBackupRestored"`
	// Last applied backup set information
	LastRestoredBackupSetInfo BackupSetInfoResponse `pulumi:"lastRestoredBackupSetInfo"`
	// Current state of database
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Database migration start time
	StartedOn string `pulumi:"startedOn"`
}

// MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseInput is an input type that accepts MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseArgs and MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseInput` via:
//
//          MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseArgs{...}
type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput
	ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput
}

type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseArgs struct {
	// Backup sets that are currently active (Either being uploaded or getting restored)
	ActiveBackupSets BackupSetInfoResponseArrayInput `pulumi:"activeBackupSets"`
	// Name of container created in the Azure Storage account where backups are copied to
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// Database migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// prefix string to use for querying errors for this database
	ErrorPrefix pulumi.StringInput `pulumi:"errorPrefix"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Details of full backup set
	FullBackupSetInfo BackupSetInfoResponseInput `pulumi:"fullBackupSetInfo"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Whether full backup has been applied to the target database or not
	IsFullBackupRestored pulumi.BoolInput `pulumi:"isFullBackupRestored"`
	// Last applied backup set information
	LastRestoredBackupSetInfo BackupSetInfoResponseInput `pulumi:"lastRestoredBackupSetInfo"`
	// Current state of database
	MigrationState pulumi.StringInput `pulumi:"migrationState"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
	// Database migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
}

func (MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Backup sets that are currently active (Either being uploaded or getting restored)
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ActiveBackupSets() BackupSetInfoResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) []BackupSetInfoResponse {
		return v.ActiveBackupSets
	}).(BackupSetInfoResponseArrayOutput)
}

// Name of container created in the Azure Storage account where backups are copied to
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Database migration end time
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// prefix string to use for querying errors for this database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Details of full backup set
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) FullBackupSetInfo() BackupSetInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) BackupSetInfoResponse {
		return v.FullBackupSetInfo
	}).(BackupSetInfoResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Whether full backup has been applied to the target database or not
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) IsFullBackupRestored() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) bool { return v.IsFullBackupRestored }).(pulumi.BoolOutput)
}

// Last applied backup set information
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) LastRestoredBackupSetInfo() BackupSetInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) BackupSetInfoResponse {
		return v.LastRestoredBackupSetInfo
	}).(BackupSetInfoResponseOutput)
}

// Current state of database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

// Database migration start time
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlMISyncTaskOutputErrorResponseInput is an input type that accepts MigrateSqlServerSqlMISyncTaskOutputErrorResponseArgs and MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskOutputErrorResponseInput` via:
//
//          MigrateSqlServerSqlMISyncTaskOutputErrorResponseArgs{...}
type MigrateSqlServerSqlMISyncTaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput
	ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput
}

type MigrateSqlServerSqlMISyncTaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlMISyncTaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputErrorResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskOutputErrorResponseArgs) ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskOutputErrorResponseArgs) ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse struct {
	// Count of databases
	DatabaseCount int `pulumi:"databaseCount"`
	// Number of database level errors
	DatabaseErrorCount int `pulumi:"databaseErrorCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server name
	SourceServerName string `pulumi:"sourceServerName"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server name
	TargetServerName string `pulumi:"targetServerName"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseInput is an input type that accepts MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseArgs and MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseInput` via:
//
//          MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseArgs{...}
type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput
	ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput
}

type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseArgs struct {
	// Count of databases
	DatabaseCount pulumi.IntInput `pulumi:"databaseCount"`
	// Number of database level errors
	DatabaseErrorCount pulumi.IntInput `pulumi:"databaseErrorCount"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server name
	SourceServerName pulumi.StringInput `pulumi:"sourceServerName"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server name
	TargetServerName pulumi.StringInput `pulumi:"targetServerName"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Count of databases
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) DatabaseCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) int { return v.DatabaseCount }).(pulumi.IntOutput)
}

// Number of database level errors
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) DatabaseErrorCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) int { return v.DatabaseErrorCount }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server name
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.SourceServerName }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server name
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.TargetServerName }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMISyncTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlMISyncTaskPropertiesArgs and MigrateSqlServerSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskPropertiesInput` via:
//
//          MigrateSqlServerSqlMISyncTaskPropertiesArgs{...}
type MigrateSqlServerSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskPropertiesOutput() MigrateSqlServerSqlMISyncTaskPropertiesOutput
	ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskPropertiesOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesOutput() MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskPropertiesOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesOutput() MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) Input() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskProperties) *MigrateSqlServerSqlMISyncTaskInput { return v.Input }).(MigrateSqlServerSqlMISyncTaskInputPtrOutput)
}

// Task type.
func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMISyncTaskPropertiesResponseInput is an input type that accepts MigrateSqlServerSqlMISyncTaskPropertiesResponseArgs and MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskPropertiesResponseInput` via:
//
//          MigrateSqlServerSqlMISyncTaskPropertiesResponseArgs{...}
type MigrateSqlServerSqlMISyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutput() MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput
	ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSqlServerSqlMISyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMISyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesResponseArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutput() MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesResponseArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutput() MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) *MigrateSqlServerSqlMISyncTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInput struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName *string `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode *string `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMITaskInputInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs and MigrateSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputInput` via:
//
//          MigrateSqlServerSqlMITaskInputArgs{...}
type MigrateSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput
	ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputArgs struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName pulumi.StringPtrInput `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode pulumi.StringPtrInput `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs pulumi.StringArrayInput `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput {
	return i.ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput)
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput).ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskInputPtrInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs, MigrateSqlServerSqlMITaskInputPtr and MigrateSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputPtrInput` via:
//
//          MigrateSqlServerSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput
	ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputPtrOutput
}

type migrateSqlServerSqlMITaskInputPtrType MigrateSqlServerSqlMITaskInputArgs

func MigrateSqlServerSqlMITaskInputPtr(v *MigrateSqlServerSqlMITaskInputArgs) MigrateSqlServerSqlMITaskInputPtrInput {
	return (*migrateSqlServerSqlMITaskInputPtrType)(v)
}

func (*migrateSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *MigrateSqlServerSqlMITaskInput {
		return &v
	}).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *string { return v.AadDomainName }).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputOutput) BackupBlobShare() BlobShareOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) BlobShare { return v.BackupBlobShare }).(BlobShareOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) []string { return v.SelectedAgentJobs }).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type MigrateSqlServerSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) Elem() MigrateSqlServerSqlMITaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) MigrateSqlServerSqlMITaskInput { return *v }).(MigrateSqlServerSqlMITaskInputOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputPtrOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *string {
		if v == nil {
			return nil
		}
		return v.AadDomainName
	}).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) BackupBlobShare() BlobSharePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *BlobShare {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobSharePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedAgentJobs
	}).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponse struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName *string `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode *string `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMITaskInputResponseInput is an input type that accepts MigrateSqlServerSqlMITaskInputResponseArgs and MigrateSqlServerSqlMITaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputResponseInput` via:
//
//          MigrateSqlServerSqlMITaskInputResponseArgs{...}
type MigrateSqlServerSqlMITaskInputResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput
	ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputResponseOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponseArgs struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName pulumi.StringPtrInput `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponseInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileShareResponsePtrInput `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode pulumi.StringPtrInput `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs pulumi.StringArrayInput `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMITaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskInputResponseArgs) ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputResponseArgs) ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputResponseOutput)
}

func (i MigrateSqlServerSqlMITaskInputResponseArgs) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputResponseArgs) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputResponseOutput).ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskInputResponsePtrInput is an input type that accepts MigrateSqlServerSqlMITaskInputResponseArgs, MigrateSqlServerSqlMITaskInputResponsePtr and MigrateSqlServerSqlMITaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputResponsePtrInput` via:
//
//          MigrateSqlServerSqlMITaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMITaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput
	ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput
}

type migrateSqlServerSqlMITaskInputResponsePtrType MigrateSqlServerSqlMITaskInputResponseArgs

func MigrateSqlServerSqlMITaskInputResponsePtr(v *MigrateSqlServerSqlMITaskInputResponseArgs) MigrateSqlServerSqlMITaskInputResponsePtrInput {
	return (*migrateSqlServerSqlMITaskInputResponsePtrType)(v)
}

func (*migrateSqlServerSqlMITaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskInputResponsePtrType) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskInputResponsePtrType) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputResponseOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *string { return v.AadDomainName }).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) BlobShareResponse { return v.BackupBlobShare }).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []string { return v.SelectedAgentJobs }).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type MigrateSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) MigrateSqlServerSqlMITaskInputResponse { return *v }).(MigrateSqlServerSqlMITaskInputResponseOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.AadDomainName
	}).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedAgentJobs
	}).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration errors and warnings per job
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled bool `pulumi:"isEnabled"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Agent Job name.
	Name string `pulumi:"name"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

// MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseArgs and MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput() MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput
	ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration errors and warnings per job
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Agent Job name.
	Name pulumi.StringInput `pulumi:"name"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
}

func (MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput() MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput)
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput() MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration errors and warnings per job
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the original Agent Job.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Agent Job name.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Current stage of migration
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

// MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs and MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput
	ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs struct {
	// Name of the database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Size of the database in megabytes
	SizeMB pulumi.Float64Input `pulumi:"sizeMB"`
	// Current stage of migration
	Stage pulumi.StringInput `pulumi:"stage"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
}

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput)
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the database
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the database in megabytes
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Current stage of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

// MigrateSqlServerSqlMITaskOutputErrorResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputErrorResponseArgs and MigrateSqlServerSqlMITaskOutputErrorResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputErrorResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputErrorResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputErrorResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput
	ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput
}

type MigrateSqlServerSqlMITaskOutputErrorResponseArgs struct {
	// Migration error
	Error ReportableExceptionResponseInput `pulumi:"error"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
}

func (MigrateSqlServerSqlMITaskOutputErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputErrorResponseArgs) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputErrorResponseArgs) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputErrorResponseOutput)
}

type MigrateSqlServerSqlMITaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponse struct {
	// Login migration end time
	EndedOn string `pulumi:"endedOn"`
	// Login migration errors and warnings per login
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Login name.
	LoginName string `pulumi:"loginName"`
	// Login migration progress message
	Message string `pulumi:"message"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current stage of login
	Stage string `pulumi:"stage"`
	// Login migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of login
	State string `pulumi:"state"`
}

// MigrateSqlServerSqlMITaskOutputLoginLevelResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputLoginLevelResponseArgs and MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputLoginLevelResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputLoginLevelResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputLoginLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput() MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput
	ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponseArgs struct {
	// Login migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Login migration errors and warnings per login
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Login name.
	LoginName pulumi.StringInput `pulumi:"loginName"`
	// Login migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Current stage of login
	Stage pulumi.StringInput `pulumi:"stage"`
	// Login migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of login
	State pulumi.StringInput `pulumi:"state"`
}

func (MigrateSqlServerSqlMITaskOutputLoginLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputLoginLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputLoginLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput() MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputLoginLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput)
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputLoginLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput() MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return o
}

// Login migration end time
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Login migration errors and warnings per login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Login name.
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.LoginName }).(pulumi.StringOutput)
}

// Login migration progress message
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current stage of login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Login migration start time
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponse struct {
	// Selected agent jobs as a map from name to id
	AgentJobs map[string]string `pulumi:"agentJobs"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Selected logins as a map from name to id
	Logins map[string]string `pulumi:"logins"`
	// Migration progress message
	Message string `pulumi:"message"`
	// List of orphaned users.
	OrphanedUsersInfo []OrphanedUserInfoResponse `pulumi:"orphanedUsersInfo"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Map of server role migration results.
	ServerRoleResults map[string]StartMigrationScenarioServerRoleResultResponse `pulumi:"serverRoleResults"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSqlServerSqlMITaskOutputMigrationLevelResponseInput is an input type that accepts MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs and MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskOutputMigrationLevelResponseInput` via:
//
//          MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs{...}
type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput
	ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs struct {
	// Selected agent jobs as a map from name to id
	AgentJobs pulumi.StringMapInput `pulumi:"agentJobs"`
	// Selected databases as a map from database name to database id
	Databases pulumi.StringMapInput `pulumi:"databases"`
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Selected logins as a map from name to id
	Logins pulumi.StringMapInput `pulumi:"logins"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// List of orphaned users.
	OrphanedUsersInfo OrphanedUserInfoResponseArrayInput `pulumi:"orphanedUsersInfo"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Map of server role migration results.
	ServerRoleResults StartMigrationScenarioServerRoleResultResponseMapInput `pulumi:"serverRoleResults"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
	// Current status of migration
	Status pulumi.StringInput `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskOutputMigrationLevelResponseArgs) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput)
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

// Selected agent jobs as a map from name to id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) AgentJobs() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]string { return v.AgentJobs }).(pulumi.StringMapOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Selected logins as a map from name to id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Logins() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]string { return v.Logins }).(pulumi.StringMapOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// List of orphaned users.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) OrphanedUsersInfo() OrphanedUserInfoResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) []OrphanedUserInfoResponse {
		return v.OrphanedUsersInfo
	}).(OrphanedUserInfoResponseArrayOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Map of server role migration results.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ServerRoleResults() StartMigrationScenarioServerRoleResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]StartMigrationScenarioServerRoleResultResponse {
		return v.ServerRoleResults
	}).(StartMigrationScenarioServerRoleResultResponseMapOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMITaskPropertiesInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesArgs and MigrateSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesInput` via:
//
//          MigrateSqlServerSqlMITaskPropertiesArgs{...}
type MigrateSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput
	ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesOutput) ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesOutput) ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMITaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesOutput) Input() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) *MigrateSqlServerSqlMITaskInput { return v.Input }).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Task type.
func (o MigrateSqlServerSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMITaskPropertiesResponseInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesResponseArgs and MigrateSqlServerSqlMITaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesResponseInput` via:
//
//          MigrateSqlServerSqlMITaskPropertiesResponseArgs{...}
type MigrateSqlServerSqlMITaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput
	ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSqlServerSqlMITaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMITaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskPropertiesResponseArgs) ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesResponseArgs) ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesResponseOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Input() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInput struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfo `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateSsisTaskInputInput is an input type that accepts MigrateSsisTaskInputArgs and MigrateSsisTaskInputOutput values.
// You can construct a concrete instance of `MigrateSsisTaskInputInput` via:
//
//          MigrateSsisTaskInputArgs{...}
type MigrateSsisTaskInputInput interface {
	pulumi.Input

	ToMigrateSsisTaskInputOutput() MigrateSsisTaskInputOutput
	ToMigrateSsisTaskInputOutputWithContext(context.Context) MigrateSsisTaskInputOutput
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputArgs struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfoInput `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSsisTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInput)(nil)).Elem()
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputOutput() MigrateSsisTaskInputOutput {
	return i.ToMigrateSsisTaskInputOutputWithContext(context.Background())
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputOutputWithContext(ctx context.Context) MigrateSsisTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputOutput)
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return i.ToMigrateSsisTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputOutput).ToMigrateSsisTaskInputPtrOutputWithContext(ctx)
}

// MigrateSsisTaskInputPtrInput is an input type that accepts MigrateSsisTaskInputArgs, MigrateSsisTaskInputPtr and MigrateSsisTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSsisTaskInputPtrInput` via:
//
//          MigrateSsisTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSsisTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput
	ToMigrateSsisTaskInputPtrOutputWithContext(context.Context) MigrateSsisTaskInputPtrOutput
}

type migrateSsisTaskInputPtrType MigrateSsisTaskInputArgs

func MigrateSsisTaskInputPtr(v *MigrateSsisTaskInputArgs) MigrateSsisTaskInputPtrInput {
	return (*migrateSsisTaskInputPtrType)(v)
}

func (*migrateSsisTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInput)(nil)).Elem()
}

func (i *migrateSsisTaskInputPtrType) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return i.ToMigrateSsisTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSsisTaskInputPtrType) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputPtrOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInput)(nil)).Elem()
}

func (o MigrateSsisTaskInputOutput) ToMigrateSsisTaskInputOutput() MigrateSsisTaskInputOutput {
	return o
}

func (o MigrateSsisTaskInputOutput) ToMigrateSsisTaskInputOutputWithContext(ctx context.Context) MigrateSsisTaskInputOutput {
	return o
}

func (o MigrateSsisTaskInputOutput) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return o.ToMigrateSsisTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSsisTaskInputOutput) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSsisTaskInput) *MigrateSsisTaskInput {
		return &v
	}).(MigrateSsisTaskInputPtrOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSsisTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputOutput) SsisMigrationInfo() SsisMigrationInfoOutput {
	return o.ApplyT(func(v MigrateSsisTaskInput) SsisMigrationInfo { return v.SsisMigrationInfo }).(SsisMigrationInfoOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSsisTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type MigrateSsisTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInput)(nil)).Elem()
}

func (o MigrateSsisTaskInputPtrOutput) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return o
}

func (o MigrateSsisTaskInputPtrOutput) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return o
}

func (o MigrateSsisTaskInputPtrOutput) Elem() MigrateSsisTaskInputOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInput) MigrateSsisTaskInput { return *v }).(MigrateSsisTaskInputOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputPtrOutput) SsisMigrationInfo() SsisMigrationInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInput) *SsisMigrationInfo {
		if v == nil {
			return nil
		}
		return &v.SsisMigrationInfo
	}).(SsisMigrationInfoPtrOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputResponse struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfoResponse `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// MigrateSsisTaskInputResponseInput is an input type that accepts MigrateSsisTaskInputResponseArgs and MigrateSsisTaskInputResponseOutput values.
// You can construct a concrete instance of `MigrateSsisTaskInputResponseInput` via:
//
//          MigrateSsisTaskInputResponseArgs{...}
type MigrateSsisTaskInputResponseInput interface {
	pulumi.Input

	ToMigrateSsisTaskInputResponseOutput() MigrateSsisTaskInputResponseOutput
	ToMigrateSsisTaskInputResponseOutputWithContext(context.Context) MigrateSsisTaskInputResponseOutput
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputResponseArgs struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfoResponseInput `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSsisTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInputResponse)(nil)).Elem()
}

func (i MigrateSsisTaskInputResponseArgs) ToMigrateSsisTaskInputResponseOutput() MigrateSsisTaskInputResponseOutput {
	return i.ToMigrateSsisTaskInputResponseOutputWithContext(context.Background())
}

func (i MigrateSsisTaskInputResponseArgs) ToMigrateSsisTaskInputResponseOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputResponseOutput)
}

func (i MigrateSsisTaskInputResponseArgs) ToMigrateSsisTaskInputResponsePtrOutput() MigrateSsisTaskInputResponsePtrOutput {
	return i.ToMigrateSsisTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSsisTaskInputResponseArgs) ToMigrateSsisTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputResponseOutput).ToMigrateSsisTaskInputResponsePtrOutputWithContext(ctx)
}

// MigrateSsisTaskInputResponsePtrInput is an input type that accepts MigrateSsisTaskInputResponseArgs, MigrateSsisTaskInputResponsePtr and MigrateSsisTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSsisTaskInputResponsePtrInput` via:
//
//          MigrateSsisTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSsisTaskInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateSsisTaskInputResponsePtrOutput() MigrateSsisTaskInputResponsePtrOutput
	ToMigrateSsisTaskInputResponsePtrOutputWithContext(context.Context) MigrateSsisTaskInputResponsePtrOutput
}

type migrateSsisTaskInputResponsePtrType MigrateSsisTaskInputResponseArgs

func MigrateSsisTaskInputResponsePtr(v *MigrateSsisTaskInputResponseArgs) MigrateSsisTaskInputResponsePtrInput {
	return (*migrateSsisTaskInputResponsePtrType)(v)
}

func (*migrateSsisTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInputResponse)(nil)).Elem()
}

func (i *migrateSsisTaskInputResponsePtrType) ToMigrateSsisTaskInputResponsePtrOutput() MigrateSsisTaskInputResponsePtrOutput {
	return i.ToMigrateSsisTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSsisTaskInputResponsePtrType) ToMigrateSsisTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputResponsePtrOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInputResponse)(nil)).Elem()
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponseOutput() MigrateSsisTaskInputResponseOutput {
	return o
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponseOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponseOutput {
	return o
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponsePtrOutput() MigrateSsisTaskInputResponsePtrOutput {
	return o.ToMigrateSsisTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) *MigrateSsisTaskInputResponse {
		return &v
	}).(MigrateSsisTaskInputResponsePtrOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SqlConnectionInfoResponse { return v.SourceConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputResponseOutput) SsisMigrationInfo() SsisMigrationInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SsisMigrationInfoResponse { return v.SsisMigrationInfo }).(SsisMigrationInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type MigrateSsisTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInputResponse)(nil)).Elem()
}

func (o MigrateSsisTaskInputResponsePtrOutput) ToMigrateSsisTaskInputResponsePtrOutput() MigrateSsisTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSsisTaskInputResponsePtrOutput) ToMigrateSsisTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSsisTaskInputResponsePtrOutput) Elem() MigrateSsisTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) MigrateSsisTaskInputResponse { return *v }).(MigrateSsisTaskInputResponseOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputResponsePtrOutput) SsisMigrationInfo() SsisMigrationInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SsisMigrationInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SsisMigrationInfo
	}).(SsisMigrationInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

type MigrateSsisTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Stage of SSIS migration.
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// MigrateSsisTaskOutputMigrationLevelResponseInput is an input type that accepts MigrateSsisTaskOutputMigrationLevelResponseArgs and MigrateSsisTaskOutputMigrationLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSsisTaskOutputMigrationLevelResponseInput` via:
//
//          MigrateSsisTaskOutputMigrationLevelResponseArgs{...}
type MigrateSsisTaskOutputMigrationLevelResponseInput interface {
	pulumi.Input

	ToMigrateSsisTaskOutputMigrationLevelResponseOutput() MigrateSsisTaskOutputMigrationLevelResponseOutput
	ToMigrateSsisTaskOutputMigrationLevelResponseOutputWithContext(context.Context) MigrateSsisTaskOutputMigrationLevelResponseOutput
}

type MigrateSsisTaskOutputMigrationLevelResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion pulumi.StringInput `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion pulumi.StringInput `pulumi:"sourceServerVersion"`
	// Stage of SSIS migration.
	Stage pulumi.StringInput `pulumi:"stage"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current status of migration
	Status pulumi.StringInput `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion pulumi.StringInput `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion pulumi.StringInput `pulumi:"targetServerVersion"`
}

func (MigrateSsisTaskOutputMigrationLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (i MigrateSsisTaskOutputMigrationLevelResponseArgs) ToMigrateSsisTaskOutputMigrationLevelResponseOutput() MigrateSsisTaskOutputMigrationLevelResponseOutput {
	return i.ToMigrateSsisTaskOutputMigrationLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSsisTaskOutputMigrationLevelResponseArgs) ToMigrateSsisTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSsisTaskOutputMigrationLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskOutputMigrationLevelResponseOutput)
}

type MigrateSsisTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ToMigrateSsisTaskOutputMigrationLevelResponseOutput() MigrateSsisTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ToMigrateSsisTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSsisTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Stage of SSIS migration.
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSsisTaskOutputProjectLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Name of the folder
	FolderName string `pulumi:"folderName"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Name of the project
	ProjectName string `pulumi:"projectName"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Stage of SSIS migration.
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

// MigrateSsisTaskOutputProjectLevelResponseInput is an input type that accepts MigrateSsisTaskOutputProjectLevelResponseArgs and MigrateSsisTaskOutputProjectLevelResponseOutput values.
// You can construct a concrete instance of `MigrateSsisTaskOutputProjectLevelResponseInput` via:
//
//          MigrateSsisTaskOutputProjectLevelResponseArgs{...}
type MigrateSsisTaskOutputProjectLevelResponseInput interface {
	pulumi.Input

	ToMigrateSsisTaskOutputProjectLevelResponseOutput() MigrateSsisTaskOutputProjectLevelResponseOutput
	ToMigrateSsisTaskOutputProjectLevelResponseOutputWithContext(context.Context) MigrateSsisTaskOutputProjectLevelResponseOutput
}

type MigrateSsisTaskOutputProjectLevelResponseArgs struct {
	// Migration end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Name of the folder
	FolderName pulumi.StringInput `pulumi:"folderName"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration progress message
	Message pulumi.StringInput `pulumi:"message"`
	// Name of the project
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Result type
	ResultType pulumi.StringInput `pulumi:"resultType"`
	// Stage of SSIS migration.
	Stage pulumi.StringInput `pulumi:"stage"`
	// Migration start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
}

func (MigrateSsisTaskOutputProjectLevelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskOutputProjectLevelResponse)(nil)).Elem()
}

func (i MigrateSsisTaskOutputProjectLevelResponseArgs) ToMigrateSsisTaskOutputProjectLevelResponseOutput() MigrateSsisTaskOutputProjectLevelResponseOutput {
	return i.ToMigrateSsisTaskOutputProjectLevelResponseOutputWithContext(context.Background())
}

func (i MigrateSsisTaskOutputProjectLevelResponseArgs) ToMigrateSsisTaskOutputProjectLevelResponseOutputWithContext(ctx context.Context) MigrateSsisTaskOutputProjectLevelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskOutputProjectLevelResponseOutput)
}

type MigrateSsisTaskOutputProjectLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskOutputProjectLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskOutputProjectLevelResponse)(nil)).Elem()
}

func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ToMigrateSsisTaskOutputProjectLevelResponseOutput() MigrateSsisTaskOutputProjectLevelResponseOutput {
	return o
}

func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ToMigrateSsisTaskOutputProjectLevelResponseOutputWithContext(ctx context.Context) MigrateSsisTaskOutputProjectLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Name of the folder
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) FolderName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.FolderName }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Name of the project
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Stage of SSIS migration.
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSsisTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSsisTaskPropertiesInput is an input type that accepts MigrateSsisTaskPropertiesArgs and MigrateSsisTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSsisTaskPropertiesInput` via:
//
//          MigrateSsisTaskPropertiesArgs{...}
type MigrateSsisTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSsisTaskPropertiesOutput() MigrateSsisTaskPropertiesOutput
	ToMigrateSsisTaskPropertiesOutputWithContext(context.Context) MigrateSsisTaskPropertiesOutput
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSsisTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSsisTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskProperties)(nil)).Elem()
}

func (i MigrateSsisTaskPropertiesArgs) ToMigrateSsisTaskPropertiesOutput() MigrateSsisTaskPropertiesOutput {
	return i.ToMigrateSsisTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSsisTaskPropertiesArgs) ToMigrateSsisTaskPropertiesOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskPropertiesOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskProperties)(nil)).Elem()
}

func (o MigrateSsisTaskPropertiesOutput) ToMigrateSsisTaskPropertiesOutput() MigrateSsisTaskPropertiesOutput {
	return o
}

func (o MigrateSsisTaskPropertiesOutput) ToMigrateSsisTaskPropertiesOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSsisTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSsisTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSsisTaskPropertiesOutput) Input() MigrateSsisTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSsisTaskProperties) *MigrateSsisTaskInput { return v.Input }).(MigrateSsisTaskInputPtrOutput)
}

// Task type.
func (o MigrateSsisTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSsisTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSsisTaskPropertiesResponseInput is an input type that accepts MigrateSsisTaskPropertiesResponseArgs and MigrateSsisTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateSsisTaskPropertiesResponseInput` via:
//
//          MigrateSsisTaskPropertiesResponseArgs{...}
type MigrateSsisTaskPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateSsisTaskPropertiesResponseOutput() MigrateSsisTaskPropertiesResponseOutput
	ToMigrateSsisTaskPropertiesResponseOutputWithContext(context.Context) MigrateSsisTaskPropertiesResponseOutput
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input MigrateSsisTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output pulumi.ArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSsisTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskPropertiesResponse)(nil)).Elem()
}

func (i MigrateSsisTaskPropertiesResponseArgs) ToMigrateSsisTaskPropertiesResponseOutput() MigrateSsisTaskPropertiesResponseOutput {
	return i.ToMigrateSsisTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateSsisTaskPropertiesResponseArgs) ToMigrateSsisTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskPropertiesResponseOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSsisTaskPropertiesResponseOutput) ToMigrateSsisTaskPropertiesResponseOutput() MigrateSsisTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSsisTaskPropertiesResponseOutput) ToMigrateSsisTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSsisTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSsisTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSsisTaskPropertiesResponseOutput) Input() MigrateSsisTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) *MigrateSsisTaskInputResponse { return v.Input }).(MigrateSsisTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSsisTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for command that completes sync migration for a database.
type MigrateSyncCompleteCommandInputResponse struct {
	// Time stamp to complete
	CommitTimeStamp *string `pulumi:"commitTimeStamp"`
	// Name of database
	DatabaseName string `pulumi:"databaseName"`
}

// MigrateSyncCompleteCommandInputResponseInput is an input type that accepts MigrateSyncCompleteCommandInputResponseArgs and MigrateSyncCompleteCommandInputResponseOutput values.
// You can construct a concrete instance of `MigrateSyncCompleteCommandInputResponseInput` via:
//
//          MigrateSyncCompleteCommandInputResponseArgs{...}
type MigrateSyncCompleteCommandInputResponseInput interface {
	pulumi.Input

	ToMigrateSyncCompleteCommandInputResponseOutput() MigrateSyncCompleteCommandInputResponseOutput
	ToMigrateSyncCompleteCommandInputResponseOutputWithContext(context.Context) MigrateSyncCompleteCommandInputResponseOutput
}

// Input for command that completes sync migration for a database.
type MigrateSyncCompleteCommandInputResponseArgs struct {
	// Time stamp to complete
	CommitTimeStamp pulumi.StringPtrInput `pulumi:"commitTimeStamp"`
	// Name of database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
}

func (MigrateSyncCompleteCommandInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandInputResponse)(nil)).Elem()
}

func (i MigrateSyncCompleteCommandInputResponseArgs) ToMigrateSyncCompleteCommandInputResponseOutput() MigrateSyncCompleteCommandInputResponseOutput {
	return i.ToMigrateSyncCompleteCommandInputResponseOutputWithContext(context.Background())
}

func (i MigrateSyncCompleteCommandInputResponseArgs) ToMigrateSyncCompleteCommandInputResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSyncCompleteCommandInputResponseOutput)
}

func (i MigrateSyncCompleteCommandInputResponseArgs) ToMigrateSyncCompleteCommandInputResponsePtrOutput() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return i.ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(context.Background())
}

func (i MigrateSyncCompleteCommandInputResponseArgs) ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSyncCompleteCommandInputResponseOutput).ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(ctx)
}

// MigrateSyncCompleteCommandInputResponsePtrInput is an input type that accepts MigrateSyncCompleteCommandInputResponseArgs, MigrateSyncCompleteCommandInputResponsePtr and MigrateSyncCompleteCommandInputResponsePtrOutput values.
// You can construct a concrete instance of `MigrateSyncCompleteCommandInputResponsePtrInput` via:
//
//          MigrateSyncCompleteCommandInputResponseArgs{...}
//
//  or:
//
//          nil
type MigrateSyncCompleteCommandInputResponsePtrInput interface {
	pulumi.Input

	ToMigrateSyncCompleteCommandInputResponsePtrOutput() MigrateSyncCompleteCommandInputResponsePtrOutput
	ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(context.Context) MigrateSyncCompleteCommandInputResponsePtrOutput
}

type migrateSyncCompleteCommandInputResponsePtrType MigrateSyncCompleteCommandInputResponseArgs

func MigrateSyncCompleteCommandInputResponsePtr(v *MigrateSyncCompleteCommandInputResponseArgs) MigrateSyncCompleteCommandInputResponsePtrInput {
	return (*migrateSyncCompleteCommandInputResponsePtrType)(v)
}

func (*migrateSyncCompleteCommandInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSyncCompleteCommandInputResponse)(nil)).Elem()
}

func (i *migrateSyncCompleteCommandInputResponsePtrType) ToMigrateSyncCompleteCommandInputResponsePtrOutput() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return i.ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(context.Background())
}

func (i *migrateSyncCompleteCommandInputResponsePtrType) ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSyncCompleteCommandInputResponsePtrOutput)
}

// Input for command that completes sync migration for a database.
type MigrateSyncCompleteCommandInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponseOutput() MigrateSyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutput() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o.ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandInputResponse) *MigrateSyncCompleteCommandInputResponse {
		return &v
	}).(MigrateSyncCompleteCommandInputResponsePtrOutput)
}

// Time stamp to complete
func (o MigrateSyncCompleteCommandInputResponseOutput) CommitTimeStamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandInputResponse) *string { return v.CommitTimeStamp }).(pulumi.StringPtrOutput)
}

// Name of database
func (o MigrateSyncCompleteCommandInputResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandInputResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

type MigrateSyncCompleteCommandInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutput() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) Elem() MigrateSyncCompleteCommandInputResponseOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) MigrateSyncCompleteCommandInputResponse { return *v }).(MigrateSyncCompleteCommandInputResponseOutput)
}

// Time stamp to complete
func (o MigrateSyncCompleteCommandInputResponsePtrOutput) CommitTimeStamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommitTimeStamp
	}).(pulumi.StringPtrOutput)
}

// Name of database
func (o MigrateSyncCompleteCommandInputResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Output for command that completes sync migration for a database.
type MigrateSyncCompleteCommandOutputResponse struct {
	// List of errors that happened during the command execution
	Errors []ReportableExceptionResponse `pulumi:"errors"`
	// Result identifier
	Id string `pulumi:"id"`
}

// MigrateSyncCompleteCommandOutputResponseInput is an input type that accepts MigrateSyncCompleteCommandOutputResponseArgs and MigrateSyncCompleteCommandOutputResponseOutput values.
// You can construct a concrete instance of `MigrateSyncCompleteCommandOutputResponseInput` via:
//
//          MigrateSyncCompleteCommandOutputResponseArgs{...}
type MigrateSyncCompleteCommandOutputResponseInput interface {
	pulumi.Input

	ToMigrateSyncCompleteCommandOutputResponseOutput() MigrateSyncCompleteCommandOutputResponseOutput
	ToMigrateSyncCompleteCommandOutputResponseOutputWithContext(context.Context) MigrateSyncCompleteCommandOutputResponseOutput
}

// Output for command that completes sync migration for a database.
type MigrateSyncCompleteCommandOutputResponseArgs struct {
	// List of errors that happened during the command execution
	Errors ReportableExceptionResponseArrayInput `pulumi:"errors"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
}

func (MigrateSyncCompleteCommandOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandOutputResponse)(nil)).Elem()
}

func (i MigrateSyncCompleteCommandOutputResponseArgs) ToMigrateSyncCompleteCommandOutputResponseOutput() MigrateSyncCompleteCommandOutputResponseOutput {
	return i.ToMigrateSyncCompleteCommandOutputResponseOutputWithContext(context.Background())
}

func (i MigrateSyncCompleteCommandOutputResponseArgs) ToMigrateSyncCompleteCommandOutputResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSyncCompleteCommandOutputResponseOutput)
}

// Output for command that completes sync migration for a database.
type MigrateSyncCompleteCommandOutputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandOutputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandOutputResponseOutput) ToMigrateSyncCompleteCommandOutputResponseOutput() MigrateSyncCompleteCommandOutputResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandOutputResponseOutput) ToMigrateSyncCompleteCommandOutputResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandOutputResponseOutput {
	return o
}

// List of errors that happened during the command execution
func (o MigrateSyncCompleteCommandOutputResponseOutput) Errors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandOutputResponse) []ReportableExceptionResponse { return v.Errors }).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSyncCompleteCommandOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Properties for the command that completes sync migration for a database.
type MigrateSyncCompleteCommandPropertiesResponse struct {
	// Command type.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Command input
	Input *MigrateSyncCompleteCommandInputResponse `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateSyncCompleteCommandOutputResponse `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// MigrateSyncCompleteCommandPropertiesResponseInput is an input type that accepts MigrateSyncCompleteCommandPropertiesResponseArgs and MigrateSyncCompleteCommandPropertiesResponseOutput values.
// You can construct a concrete instance of `MigrateSyncCompleteCommandPropertiesResponseInput` via:
//
//          MigrateSyncCompleteCommandPropertiesResponseArgs{...}
type MigrateSyncCompleteCommandPropertiesResponseInput interface {
	pulumi.Input

	ToMigrateSyncCompleteCommandPropertiesResponseOutput() MigrateSyncCompleteCommandPropertiesResponseOutput
	ToMigrateSyncCompleteCommandPropertiesResponseOutputWithContext(context.Context) MigrateSyncCompleteCommandPropertiesResponseOutput
}

// Properties for the command that completes sync migration for a database.
type MigrateSyncCompleteCommandPropertiesResponseArgs struct {
	// Command type.
	CommandType pulumi.StringInput `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Command input
	Input MigrateSyncCompleteCommandInputResponsePtrInput `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateSyncCompleteCommandOutputResponseInput `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
}

func (MigrateSyncCompleteCommandPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandPropertiesResponse)(nil)).Elem()
}

func (i MigrateSyncCompleteCommandPropertiesResponseArgs) ToMigrateSyncCompleteCommandPropertiesResponseOutput() MigrateSyncCompleteCommandPropertiesResponseOutput {
	return i.ToMigrateSyncCompleteCommandPropertiesResponseOutputWithContext(context.Background())
}

func (i MigrateSyncCompleteCommandPropertiesResponseArgs) ToMigrateSyncCompleteCommandPropertiesResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSyncCompleteCommandPropertiesResponseOutput)
}

// Properties for the command that completes sync migration for a database.
type MigrateSyncCompleteCommandPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandPropertiesResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandPropertiesResponseOutput) ToMigrateSyncCompleteCommandPropertiesResponseOutput() MigrateSyncCompleteCommandPropertiesResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandPropertiesResponseOutput) ToMigrateSyncCompleteCommandPropertiesResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandPropertiesResponseOutput {
	return o
}

// Command type.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) string { return v.CommandType }).(pulumi.StringOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Command input
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Input() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) *MigrateSyncCompleteCommandInputResponse {
		return v.Input
	}).(MigrateSyncCompleteCommandInputResponsePtrOutput)
}

// Command output. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Output() MigrateSyncCompleteCommandOutputResponseOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) MigrateSyncCompleteCommandOutputResponse {
		return v.Output
	}).(MigrateSyncCompleteCommandOutputResponseOutput)
}

// The state of the command. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponse struct {
	// Whether object is eligible for migration or not.
	IsEligibleForMigration bool `pulumi:"isEligibleForMigration"`
	// Information about eligibility failure for the server object.
	ValidationMessages []string `pulumi:"validationMessages"`
}

// MigrationEligibilityInfoResponseInput is an input type that accepts MigrationEligibilityInfoResponseArgs and MigrationEligibilityInfoResponseOutput values.
// You can construct a concrete instance of `MigrationEligibilityInfoResponseInput` via:
//
//          MigrationEligibilityInfoResponseArgs{...}
type MigrationEligibilityInfoResponseInput interface {
	pulumi.Input

	ToMigrationEligibilityInfoResponseOutput() MigrationEligibilityInfoResponseOutput
	ToMigrationEligibilityInfoResponseOutputWithContext(context.Context) MigrationEligibilityInfoResponseOutput
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponseArgs struct {
	// Whether object is eligible for migration or not.
	IsEligibleForMigration pulumi.BoolInput `pulumi:"isEligibleForMigration"`
	// Information about eligibility failure for the server object.
	ValidationMessages pulumi.StringArrayInput `pulumi:"validationMessages"`
}

func (MigrationEligibilityInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationEligibilityInfoResponse)(nil)).Elem()
}

func (i MigrationEligibilityInfoResponseArgs) ToMigrationEligibilityInfoResponseOutput() MigrationEligibilityInfoResponseOutput {
	return i.ToMigrationEligibilityInfoResponseOutputWithContext(context.Background())
}

func (i MigrationEligibilityInfoResponseArgs) ToMigrationEligibilityInfoResponseOutputWithContext(ctx context.Context) MigrationEligibilityInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationEligibilityInfoResponseOutput)
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponseOutput struct{ *pulumi.OutputState }

func (MigrationEligibilityInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationEligibilityInfoResponse)(nil)).Elem()
}

func (o MigrationEligibilityInfoResponseOutput) ToMigrationEligibilityInfoResponseOutput() MigrationEligibilityInfoResponseOutput {
	return o
}

func (o MigrationEligibilityInfoResponseOutput) ToMigrationEligibilityInfoResponseOutputWithContext(ctx context.Context) MigrationEligibilityInfoResponseOutput {
	return o
}

// Whether object is eligible for migration or not.
func (o MigrationEligibilityInfoResponseOutput) IsEligibleForMigration() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrationEligibilityInfoResponse) bool { return v.IsEligibleForMigration }).(pulumi.BoolOutput)
}

// Information about eligibility failure for the server object.
func (o MigrationEligibilityInfoResponseOutput) ValidationMessages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrationEligibilityInfoResponse) []string { return v.ValidationMessages }).(pulumi.StringArrayOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponse struct {
	// Migration validation result identifier
	Id *string `pulumi:"id"`
	// The url of the report.
	ReportUrl *string `pulumi:"reportUrl"`
}

// MigrationReportResultResponseInput is an input type that accepts MigrationReportResultResponseArgs and MigrationReportResultResponseOutput values.
// You can construct a concrete instance of `MigrationReportResultResponseInput` via:
//
//          MigrationReportResultResponseArgs{...}
type MigrationReportResultResponseInput interface {
	pulumi.Input

	ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput
	ToMigrationReportResultResponseOutputWithContext(context.Context) MigrationReportResultResponseOutput
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponseArgs struct {
	// Migration validation result identifier
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The url of the report.
	ReportUrl pulumi.StringPtrInput `pulumi:"reportUrl"`
}

func (MigrationReportResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultResponse)(nil)).Elem()
}

func (i MigrationReportResultResponseArgs) ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput {
	return i.ToMigrationReportResultResponseOutputWithContext(context.Background())
}

func (i MigrationReportResultResponseArgs) ToMigrationReportResultResponseOutputWithContext(ctx context.Context) MigrationReportResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultResponseOutput)
}

func (i MigrationReportResultResponseArgs) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return i.ToMigrationReportResultResponsePtrOutputWithContext(context.Background())
}

func (i MigrationReportResultResponseArgs) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultResponseOutput).ToMigrationReportResultResponsePtrOutputWithContext(ctx)
}

// MigrationReportResultResponsePtrInput is an input type that accepts MigrationReportResultResponseArgs, MigrationReportResultResponsePtr and MigrationReportResultResponsePtrOutput values.
// You can construct a concrete instance of `MigrationReportResultResponsePtrInput` via:
//
//          MigrationReportResultResponseArgs{...}
//
//  or:
//
//          nil
type MigrationReportResultResponsePtrInput interface {
	pulumi.Input

	ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput
	ToMigrationReportResultResponsePtrOutputWithContext(context.Context) MigrationReportResultResponsePtrOutput
}

type migrationReportResultResponsePtrType MigrationReportResultResponseArgs

func MigrationReportResultResponsePtr(v *MigrationReportResultResponseArgs) MigrationReportResultResponsePtrInput {
	return (*migrationReportResultResponsePtrType)(v)
}

func (*migrationReportResultResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultResponse)(nil)).Elem()
}

func (i *migrationReportResultResponsePtrType) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return i.ToMigrationReportResultResponsePtrOutputWithContext(context.Background())
}

func (i *migrationReportResultResponsePtrType) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationReportResultResponsePtrOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutputWithContext(ctx context.Context) MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o.ToMigrationReportResultResponsePtrOutputWithContext(context.Background())
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *MigrationReportResultResponse {
		return &v
	}).(MigrationReportResultResponsePtrOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponseOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.ReportUrl }).(pulumi.StringPtrOutput)
}

type MigrationReportResultResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) Elem() MigrationReportResultResponseOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) MigrationReportResultResponse { return *v }).(MigrationReportResultResponseOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponsePtrOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReportUrl
	}).(pulumi.StringPtrOutput)
}

// Migration Validation Database level summary result
type MigrationValidationDatabaseSummaryResultResponse struct {
	// Validation end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Name of the source database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Validation start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of validation at the database level
	Status string `pulumi:"status"`
	// Name of the target database
	TargetDatabaseName string `pulumi:"targetDatabaseName"`
}

// MigrationValidationDatabaseSummaryResultResponseInput is an input type that accepts MigrationValidationDatabaseSummaryResultResponseArgs and MigrationValidationDatabaseSummaryResultResponseOutput values.
// You can construct a concrete instance of `MigrationValidationDatabaseSummaryResultResponseInput` via:
//
//          MigrationValidationDatabaseSummaryResultResponseArgs{...}
type MigrationValidationDatabaseSummaryResultResponseInput interface {
	pulumi.Input

	ToMigrationValidationDatabaseSummaryResultResponseOutput() MigrationValidationDatabaseSummaryResultResponseOutput
	ToMigrationValidationDatabaseSummaryResultResponseOutputWithContext(context.Context) MigrationValidationDatabaseSummaryResultResponseOutput
}

// Migration Validation Database level summary result
type MigrationValidationDatabaseSummaryResultResponseArgs struct {
	// Validation end time
	EndedOn pulumi.StringInput `pulumi:"endedOn"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration Identifier
	MigrationId pulumi.StringInput `pulumi:"migrationId"`
	// Name of the source database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
	// Validation start time
	StartedOn pulumi.StringInput `pulumi:"startedOn"`
	// Current status of validation at the database level
	Status pulumi.StringInput `pulumi:"status"`
	// Name of the target database
	TargetDatabaseName pulumi.StringInput `pulumi:"targetDatabaseName"`
}

func (MigrationValidationDatabaseSummaryResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationDatabaseSummaryResultResponse)(nil)).Elem()
}

func (i MigrationValidationDatabaseSummaryResultResponseArgs) ToMigrationValidationDatabaseSummaryResultResponseOutput() MigrationValidationDatabaseSummaryResultResponseOutput {
	return i.ToMigrationValidationDatabaseSummaryResultResponseOutputWithContext(context.Background())
}

func (i MigrationValidationDatabaseSummaryResultResponseArgs) ToMigrationValidationDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) MigrationValidationDatabaseSummaryResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationDatabaseSummaryResultResponseOutput)
}

// MigrationValidationDatabaseSummaryResultResponseMapInput is an input type that accepts MigrationValidationDatabaseSummaryResultResponseMap and MigrationValidationDatabaseSummaryResultResponseMapOutput values.
// You can construct a concrete instance of `MigrationValidationDatabaseSummaryResultResponseMapInput` via:
//
//          MigrationValidationDatabaseSummaryResultResponseMap{ "key": MigrationValidationDatabaseSummaryResultResponseArgs{...} }
type MigrationValidationDatabaseSummaryResultResponseMapInput interface {
	pulumi.Input

	ToMigrationValidationDatabaseSummaryResultResponseMapOutput() MigrationValidationDatabaseSummaryResultResponseMapOutput
	ToMigrationValidationDatabaseSummaryResultResponseMapOutputWithContext(context.Context) MigrationValidationDatabaseSummaryResultResponseMapOutput
}

type MigrationValidationDatabaseSummaryResultResponseMap map[string]MigrationValidationDatabaseSummaryResultResponseInput

func (MigrationValidationDatabaseSummaryResultResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MigrationValidationDatabaseSummaryResultResponse)(nil)).Elem()
}

func (i MigrationValidationDatabaseSummaryResultResponseMap) ToMigrationValidationDatabaseSummaryResultResponseMapOutput() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return i.ToMigrationValidationDatabaseSummaryResultResponseMapOutputWithContext(context.Background())
}

func (i MigrationValidationDatabaseSummaryResultResponseMap) ToMigrationValidationDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationDatabaseSummaryResultResponseMapOutput)
}

// Migration Validation Database level summary result
type MigrationValidationDatabaseSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationDatabaseSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationDatabaseSummaryResultResponse)(nil)).Elem()
}

func (o MigrationValidationDatabaseSummaryResultResponseOutput) ToMigrationValidationDatabaseSummaryResultResponseOutput() MigrationValidationDatabaseSummaryResultResponseOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseOutput) ToMigrationValidationDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) MigrationValidationDatabaseSummaryResultResponseOutput {
	return o
}

// Validation end time
func (o MigrationValidationDatabaseSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrationValidationDatabaseSummaryResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration Identifier
func (o MigrationValidationDatabaseSummaryResultResponseOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.MigrationId }).(pulumi.StringOutput)
}

// Name of the source database
func (o MigrationValidationDatabaseSummaryResultResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

// Validation start time
func (o MigrationValidationDatabaseSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of validation at the database level
func (o MigrationValidationDatabaseSummaryResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Name of the target database
func (o MigrationValidationDatabaseSummaryResultResponseOutput) TargetDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.TargetDatabaseName }).(pulumi.StringOutput)
}

type MigrationValidationDatabaseSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (MigrationValidationDatabaseSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MigrationValidationDatabaseSummaryResultResponse)(nil)).Elem()
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) ToMigrationValidationDatabaseSummaryResultResponseMapOutput() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) ToMigrationValidationDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) MigrationValidationDatabaseSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MigrationValidationDatabaseSummaryResultResponse {
		return vs[0].(map[string]MigrationValidationDatabaseSummaryResultResponse)[vs[1].(string)]
	}).(MigrationValidationDatabaseSummaryResultResponseOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptions struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// MigrationValidationOptionsInput is an input type that accepts MigrationValidationOptionsArgs and MigrationValidationOptionsOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsInput` via:
//
//          MigrationValidationOptionsArgs{...}
type MigrationValidationOptionsInput interface {
	pulumi.Input

	ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput
	ToMigrationValidationOptionsOutputWithContext(context.Context) MigrationValidationOptionsOutput
}

// Types of validations to run after the migration
type MigrationValidationOptionsArgs struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation pulumi.BoolPtrInput `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation pulumi.BoolPtrInput `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation pulumi.BoolPtrInput `pulumi:"enableSchemaValidation"`
}

func (MigrationValidationOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptions)(nil)).Elem()
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput {
	return i.ToMigrationValidationOptionsOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutputWithContext(ctx context.Context) MigrationValidationOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput)
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput).ToMigrationValidationOptionsPtrOutputWithContext(ctx)
}

// MigrationValidationOptionsPtrInput is an input type that accepts MigrationValidationOptionsArgs, MigrationValidationOptionsPtr and MigrationValidationOptionsPtrOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsPtrInput` via:
//
//          MigrationValidationOptionsArgs{...}
//
//  or:
//
//          nil
type MigrationValidationOptionsPtrInput interface {
	pulumi.Input

	ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput
	ToMigrationValidationOptionsPtrOutputWithContext(context.Context) MigrationValidationOptionsPtrOutput
}

type migrationValidationOptionsPtrType MigrationValidationOptionsArgs

func MigrationValidationOptionsPtr(v *MigrationValidationOptionsArgs) MigrationValidationOptionsPtrInput {
	return (*migrationValidationOptionsPtrType)(v)
}

func (*migrationValidationOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptions)(nil)).Elem()
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptions)(nil)).Elem()
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput {
	return o
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsOutputWithContext(ctx context.Context) MigrationValidationOptionsOutput {
	return o
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return o.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *MigrationValidationOptions {
		return &v
	}).(MigrationValidationOptionsPtrOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsPtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptions)(nil)).Elem()
}

func (o MigrationValidationOptionsPtrOutput) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return o
}

func (o MigrationValidationOptionsPtrOutput) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return o
}

func (o MigrationValidationOptionsPtrOutput) Elem() MigrationValidationOptionsOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) MigrationValidationOptions { return *v }).(MigrationValidationOptionsOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsPtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsPtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsPtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponse struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// MigrationValidationOptionsResponseInput is an input type that accepts MigrationValidationOptionsResponseArgs and MigrationValidationOptionsResponseOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsResponseInput` via:
//
//          MigrationValidationOptionsResponseArgs{...}
type MigrationValidationOptionsResponseInput interface {
	pulumi.Input

	ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput
	ToMigrationValidationOptionsResponseOutputWithContext(context.Context) MigrationValidationOptionsResponseOutput
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponseArgs struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation pulumi.BoolPtrInput `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation pulumi.BoolPtrInput `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation pulumi.BoolPtrInput `pulumi:"enableSchemaValidation"`
}

func (MigrationValidationOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsResponse)(nil)).Elem()
}

func (i MigrationValidationOptionsResponseArgs) ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput {
	return i.ToMigrationValidationOptionsResponseOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsResponseArgs) ToMigrationValidationOptionsResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsResponseOutput)
}

func (i MigrationValidationOptionsResponseArgs) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return i.ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsResponseArgs) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsResponseOutput).ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx)
}

// MigrationValidationOptionsResponsePtrInput is an input type that accepts MigrationValidationOptionsResponseArgs, MigrationValidationOptionsResponsePtr and MigrationValidationOptionsResponsePtrOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsResponsePtrInput` via:
//
//          MigrationValidationOptionsResponseArgs{...}
//
//  or:
//
//          nil
type MigrationValidationOptionsResponsePtrInput interface {
	pulumi.Input

	ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput
	ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Context) MigrationValidationOptionsResponsePtrOutput
}

type migrationValidationOptionsResponsePtrType MigrationValidationOptionsResponseArgs

func MigrationValidationOptionsResponsePtr(v *MigrationValidationOptionsResponseArgs) MigrationValidationOptionsResponsePtrInput {
	return (*migrationValidationOptionsResponsePtrType)(v)
}

func (*migrationValidationOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsResponse)(nil)).Elem()
}

func (i *migrationValidationOptionsResponsePtrType) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return i.ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *migrationValidationOptionsResponsePtrType) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsResponsePtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o.ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Background())
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *MigrationValidationOptionsResponse {
		return &v
	}).(MigrationValidationOptionsResponsePtrOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponseOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponseOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponseOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) Elem() MigrationValidationOptionsResponseOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) MigrationValidationOptionsResponse { return *v }).(MigrationValidationOptionsResponseOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponsePtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponsePtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponsePtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Migration Validation Result
type MigrationValidationResultResponse struct {
	// Migration validation result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
	Status string `pulumi:"status"`
	// Validation summary results for each database
	SummaryResults map[string]MigrationValidationDatabaseSummaryResultResponse `pulumi:"summaryResults"`
}

// MigrationValidationResultResponseInput is an input type that accepts MigrationValidationResultResponseArgs and MigrationValidationResultResponseOutput values.
// You can construct a concrete instance of `MigrationValidationResultResponseInput` via:
//
//          MigrationValidationResultResponseArgs{...}
type MigrationValidationResultResponseInput interface {
	pulumi.Input

	ToMigrationValidationResultResponseOutput() MigrationValidationResultResponseOutput
	ToMigrationValidationResultResponseOutputWithContext(context.Context) MigrationValidationResultResponseOutput
}

// Migration Validation Result
type MigrationValidationResultResponseArgs struct {
	// Migration validation result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Migration Identifier
	MigrationId pulumi.StringInput `pulumi:"migrationId"`
	// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
	Status pulumi.StringInput `pulumi:"status"`
	// Validation summary results for each database
	SummaryResults MigrationValidationDatabaseSummaryResultResponseMapInput `pulumi:"summaryResults"`
}

func (MigrationValidationResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationResultResponse)(nil)).Elem()
}

func (i MigrationValidationResultResponseArgs) ToMigrationValidationResultResponseOutput() MigrationValidationResultResponseOutput {
	return i.ToMigrationValidationResultResponseOutputWithContext(context.Background())
}

func (i MigrationValidationResultResponseArgs) ToMigrationValidationResultResponseOutputWithContext(ctx context.Context) MigrationValidationResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationResultResponseOutput)
}

func (i MigrationValidationResultResponseArgs) ToMigrationValidationResultResponsePtrOutput() MigrationValidationResultResponsePtrOutput {
	return i.ToMigrationValidationResultResponsePtrOutputWithContext(context.Background())
}

func (i MigrationValidationResultResponseArgs) ToMigrationValidationResultResponsePtrOutputWithContext(ctx context.Context) MigrationValidationResultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationResultResponseOutput).ToMigrationValidationResultResponsePtrOutputWithContext(ctx)
}

// MigrationValidationResultResponsePtrInput is an input type that accepts MigrationValidationResultResponseArgs, MigrationValidationResultResponsePtr and MigrationValidationResultResponsePtrOutput values.
// You can construct a concrete instance of `MigrationValidationResultResponsePtrInput` via:
//
//          MigrationValidationResultResponseArgs{...}
//
//  or:
//
//          nil
type MigrationValidationResultResponsePtrInput interface {
	pulumi.Input

	ToMigrationValidationResultResponsePtrOutput() MigrationValidationResultResponsePtrOutput
	ToMigrationValidationResultResponsePtrOutputWithContext(context.Context) MigrationValidationResultResponsePtrOutput
}

type migrationValidationResultResponsePtrType MigrationValidationResultResponseArgs

func MigrationValidationResultResponsePtr(v *MigrationValidationResultResponseArgs) MigrationValidationResultResponsePtrInput {
	return (*migrationValidationResultResponsePtrType)(v)
}

func (*migrationValidationResultResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationResultResponse)(nil)).Elem()
}

func (i *migrationValidationResultResponsePtrType) ToMigrationValidationResultResponsePtrOutput() MigrationValidationResultResponsePtrOutput {
	return i.ToMigrationValidationResultResponsePtrOutputWithContext(context.Background())
}

func (i *migrationValidationResultResponsePtrType) ToMigrationValidationResultResponsePtrOutputWithContext(ctx context.Context) MigrationValidationResultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationResultResponsePtrOutput)
}

// Migration Validation Result
type MigrationValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationResultResponse)(nil)).Elem()
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponseOutput() MigrationValidationResultResponseOutput {
	return o
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponseOutputWithContext(ctx context.Context) MigrationValidationResultResponseOutput {
	return o
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponsePtrOutput() MigrationValidationResultResponsePtrOutput {
	return o.ToMigrationValidationResultResponsePtrOutputWithContext(context.Background())
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponsePtrOutputWithContext(ctx context.Context) MigrationValidationResultResponsePtrOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) *MigrationValidationResultResponse {
		return &v
	}).(MigrationValidationResultResponsePtrOutput)
}

// Migration validation result identifier
func (o MigrationValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration Identifier
func (o MigrationValidationResultResponseOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.MigrationId }).(pulumi.StringOutput)
}

// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
func (o MigrationValidationResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Validation summary results for each database
func (o MigrationValidationResultResponseOutput) SummaryResults() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) map[string]MigrationValidationDatabaseSummaryResultResponse {
		return v.SummaryResults
	}).(MigrationValidationDatabaseSummaryResultResponseMapOutput)
}

type MigrationValidationResultResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationResultResponse)(nil)).Elem()
}

func (o MigrationValidationResultResponsePtrOutput) ToMigrationValidationResultResponsePtrOutput() MigrationValidationResultResponsePtrOutput {
	return o
}

func (o MigrationValidationResultResponsePtrOutput) ToMigrationValidationResultResponsePtrOutputWithContext(ctx context.Context) MigrationValidationResultResponsePtrOutput {
	return o
}

func (o MigrationValidationResultResponsePtrOutput) Elem() MigrationValidationResultResponseOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) MigrationValidationResultResponse { return *v }).(MigrationValidationResultResponseOutput)
}

// Migration validation result identifier
func (o MigrationValidationResultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Migration Identifier
func (o MigrationValidationResultResponsePtrOutput) MigrationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MigrationId
	}).(pulumi.StringPtrOutput)
}

// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
func (o MigrationValidationResultResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Validation summary results for each database
func (o MigrationValidationResultResponsePtrOutput) SummaryResults() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) map[string]MigrationValidationDatabaseSummaryResultResponse {
		if v == nil {
			return nil
		}
		return v.SummaryResults
	}).(MigrationValidationDatabaseSummaryResultResponseMapOutput)
}

// Describes a MongoDB data source
type MongoDbClusterInfoResponse struct {
	// A list of non-system databases in the cluster
	Databases []MongoDbDatabaseInfoResponse `pulumi:"databases"`
	// Whether the cluster supports sharded collections
	SupportsSharding bool `pulumi:"supportsSharding"`
	// The type of data source
	Type string `pulumi:"type"`
	// The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
	Version string `pulumi:"version"`
}

// MongoDbClusterInfoResponseInput is an input type that accepts MongoDbClusterInfoResponseArgs and MongoDbClusterInfoResponseOutput values.
// You can construct a concrete instance of `MongoDbClusterInfoResponseInput` via:
//
//          MongoDbClusterInfoResponseArgs{...}
type MongoDbClusterInfoResponseInput interface {
	pulumi.Input

	ToMongoDbClusterInfoResponseOutput() MongoDbClusterInfoResponseOutput
	ToMongoDbClusterInfoResponseOutputWithContext(context.Context) MongoDbClusterInfoResponseOutput
}

// Describes a MongoDB data source
type MongoDbClusterInfoResponseArgs struct {
	// A list of non-system databases in the cluster
	Databases MongoDbDatabaseInfoResponseArrayInput `pulumi:"databases"`
	// Whether the cluster supports sharded collections
	SupportsSharding pulumi.BoolInput `pulumi:"supportsSharding"`
	// The type of data source
	Type pulumi.StringInput `pulumi:"type"`
	// The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
	Version pulumi.StringInput `pulumi:"version"`
}

func (MongoDbClusterInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbClusterInfoResponse)(nil)).Elem()
}

func (i MongoDbClusterInfoResponseArgs) ToMongoDbClusterInfoResponseOutput() MongoDbClusterInfoResponseOutput {
	return i.ToMongoDbClusterInfoResponseOutputWithContext(context.Background())
}

func (i MongoDbClusterInfoResponseArgs) ToMongoDbClusterInfoResponseOutputWithContext(ctx context.Context) MongoDbClusterInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbClusterInfoResponseOutput)
}

// MongoDbClusterInfoResponseArrayInput is an input type that accepts MongoDbClusterInfoResponseArray and MongoDbClusterInfoResponseArrayOutput values.
// You can construct a concrete instance of `MongoDbClusterInfoResponseArrayInput` via:
//
//          MongoDbClusterInfoResponseArray{ MongoDbClusterInfoResponseArgs{...} }
type MongoDbClusterInfoResponseArrayInput interface {
	pulumi.Input

	ToMongoDbClusterInfoResponseArrayOutput() MongoDbClusterInfoResponseArrayOutput
	ToMongoDbClusterInfoResponseArrayOutputWithContext(context.Context) MongoDbClusterInfoResponseArrayOutput
}

type MongoDbClusterInfoResponseArray []MongoDbClusterInfoResponseInput

func (MongoDbClusterInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbClusterInfoResponse)(nil)).Elem()
}

func (i MongoDbClusterInfoResponseArray) ToMongoDbClusterInfoResponseArrayOutput() MongoDbClusterInfoResponseArrayOutput {
	return i.ToMongoDbClusterInfoResponseArrayOutputWithContext(context.Background())
}

func (i MongoDbClusterInfoResponseArray) ToMongoDbClusterInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbClusterInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbClusterInfoResponseArrayOutput)
}

// Describes a MongoDB data source
type MongoDbClusterInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbClusterInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbClusterInfoResponse)(nil)).Elem()
}

func (o MongoDbClusterInfoResponseOutput) ToMongoDbClusterInfoResponseOutput() MongoDbClusterInfoResponseOutput {
	return o
}

func (o MongoDbClusterInfoResponseOutput) ToMongoDbClusterInfoResponseOutputWithContext(ctx context.Context) MongoDbClusterInfoResponseOutput {
	return o
}

// A list of non-system databases in the cluster
func (o MongoDbClusterInfoResponseOutput) Databases() MongoDbDatabaseInfoResponseArrayOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) []MongoDbDatabaseInfoResponse { return v.Databases }).(MongoDbDatabaseInfoResponseArrayOutput)
}

// Whether the cluster supports sharded collections
func (o MongoDbClusterInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

// The type of data source
func (o MongoDbClusterInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
func (o MongoDbClusterInfoResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) string { return v.Version }).(pulumi.StringOutput)
}

type MongoDbClusterInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbClusterInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbClusterInfoResponse)(nil)).Elem()
}

func (o MongoDbClusterInfoResponseArrayOutput) ToMongoDbClusterInfoResponseArrayOutput() MongoDbClusterInfoResponseArrayOutput {
	return o
}

func (o MongoDbClusterInfoResponseArrayOutput) ToMongoDbClusterInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbClusterInfoResponseArrayOutput {
	return o
}

func (o MongoDbClusterInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbClusterInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbClusterInfoResponse {
		return vs[0].([]MongoDbClusterInfoResponse)[vs[1].(int)]
	}).(MongoDbClusterInfoResponseOutput)
}

// Describes a supported collection within a MongoDB database
type MongoDbCollectionInfoResponse struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize int `pulumi:"averageDocumentSize"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize int `pulumi:"dataSize"`
	// The name of the database containing the collection
	DatabaseName string `pulumi:"databaseName"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount int `pulumi:"documentCount"`
	// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
	IsCapped bool `pulumi:"isCapped"`
	// Whether the collection is system collection
	IsSystemCollection bool `pulumi:"isSystemCollection"`
	// Whether the collection is a view of another collection
	IsView bool `pulumi:"isView"`
	// The unqualified name of the database or collection
	Name string `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName string `pulumi:"qualifiedName"`
	// The shard key on the collection, or null if the collection is not sharded
	ShardKey *MongoDbShardKeyInfoResponse `pulumi:"shardKey"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding bool `pulumi:"supportsSharding"`
	// The name of the collection that this is a view of, if IsView is true
	ViewOf *string `pulumi:"viewOf"`
}

// MongoDbCollectionInfoResponseInput is an input type that accepts MongoDbCollectionInfoResponseArgs and MongoDbCollectionInfoResponseOutput values.
// You can construct a concrete instance of `MongoDbCollectionInfoResponseInput` via:
//
//          MongoDbCollectionInfoResponseArgs{...}
type MongoDbCollectionInfoResponseInput interface {
	pulumi.Input

	ToMongoDbCollectionInfoResponseOutput() MongoDbCollectionInfoResponseOutput
	ToMongoDbCollectionInfoResponseOutputWithContext(context.Context) MongoDbCollectionInfoResponseOutput
}

// Describes a supported collection within a MongoDB database
type MongoDbCollectionInfoResponseArgs struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize pulumi.IntInput `pulumi:"averageDocumentSize"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize pulumi.IntInput `pulumi:"dataSize"`
	// The name of the database containing the collection
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount pulumi.IntInput `pulumi:"documentCount"`
	// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
	IsCapped pulumi.BoolInput `pulumi:"isCapped"`
	// Whether the collection is system collection
	IsSystemCollection pulumi.BoolInput `pulumi:"isSystemCollection"`
	// Whether the collection is a view of another collection
	IsView pulumi.BoolInput `pulumi:"isView"`
	// The unqualified name of the database or collection
	Name pulumi.StringInput `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName pulumi.StringInput `pulumi:"qualifiedName"`
	// The shard key on the collection, or null if the collection is not sharded
	ShardKey MongoDbShardKeyInfoResponsePtrInput `pulumi:"shardKey"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding pulumi.BoolInput `pulumi:"supportsSharding"`
	// The name of the collection that this is a view of, if IsView is true
	ViewOf pulumi.StringPtrInput `pulumi:"viewOf"`
}

func (MongoDbCollectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionInfoResponse)(nil)).Elem()
}

func (i MongoDbCollectionInfoResponseArgs) ToMongoDbCollectionInfoResponseOutput() MongoDbCollectionInfoResponseOutput {
	return i.ToMongoDbCollectionInfoResponseOutputWithContext(context.Background())
}

func (i MongoDbCollectionInfoResponseArgs) ToMongoDbCollectionInfoResponseOutputWithContext(ctx context.Context) MongoDbCollectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionInfoResponseOutput)
}

// MongoDbCollectionInfoResponseArrayInput is an input type that accepts MongoDbCollectionInfoResponseArray and MongoDbCollectionInfoResponseArrayOutput values.
// You can construct a concrete instance of `MongoDbCollectionInfoResponseArrayInput` via:
//
//          MongoDbCollectionInfoResponseArray{ MongoDbCollectionInfoResponseArgs{...} }
type MongoDbCollectionInfoResponseArrayInput interface {
	pulumi.Input

	ToMongoDbCollectionInfoResponseArrayOutput() MongoDbCollectionInfoResponseArrayOutput
	ToMongoDbCollectionInfoResponseArrayOutputWithContext(context.Context) MongoDbCollectionInfoResponseArrayOutput
}

type MongoDbCollectionInfoResponseArray []MongoDbCollectionInfoResponseInput

func (MongoDbCollectionInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbCollectionInfoResponse)(nil)).Elem()
}

func (i MongoDbCollectionInfoResponseArray) ToMongoDbCollectionInfoResponseArrayOutput() MongoDbCollectionInfoResponseArrayOutput {
	return i.ToMongoDbCollectionInfoResponseArrayOutputWithContext(context.Background())
}

func (i MongoDbCollectionInfoResponseArray) ToMongoDbCollectionInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbCollectionInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionInfoResponseArrayOutput)
}

// Describes a supported collection within a MongoDB database
type MongoDbCollectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionInfoResponse)(nil)).Elem()
}

func (o MongoDbCollectionInfoResponseOutput) ToMongoDbCollectionInfoResponseOutput() MongoDbCollectionInfoResponseOutput {
	return o
}

func (o MongoDbCollectionInfoResponseOutput) ToMongoDbCollectionInfoResponseOutputWithContext(ctx context.Context) MongoDbCollectionInfoResponseOutput {
	return o
}

// The average document size, or -1 if the average size is unknown
func (o MongoDbCollectionInfoResponseOutput) AverageDocumentSize() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) int { return v.AverageDocumentSize }).(pulumi.IntOutput)
}

// The estimated total data size, in bytes, or -1 if the size is unknown.
func (o MongoDbCollectionInfoResponseOutput) DataSize() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) int { return v.DataSize }).(pulumi.IntOutput)
}

// The name of the database containing the collection
func (o MongoDbCollectionInfoResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The estimated total number of documents, or -1 if the document count is unknown
func (o MongoDbCollectionInfoResponseOutput) DocumentCount() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) int { return v.DocumentCount }).(pulumi.IntOutput)
}

// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
func (o MongoDbCollectionInfoResponseOutput) IsCapped() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsCapped }).(pulumi.BoolOutput)
}

// Whether the collection is system collection
func (o MongoDbCollectionInfoResponseOutput) IsSystemCollection() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsSystemCollection }).(pulumi.BoolOutput)
}

// Whether the collection is a view of another collection
func (o MongoDbCollectionInfoResponseOutput) IsView() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsView }).(pulumi.BoolOutput)
}

// The unqualified name of the database or collection
func (o MongoDbCollectionInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The qualified name of the database or collection. For a collection, this is the database-qualified name.
func (o MongoDbCollectionInfoResponseOutput) QualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.QualifiedName }).(pulumi.StringOutput)
}

// The shard key on the collection, or null if the collection is not sharded
func (o MongoDbCollectionInfoResponseOutput) ShardKey() MongoDbShardKeyInfoResponsePtrOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) *MongoDbShardKeyInfoResponse { return v.ShardKey }).(MongoDbShardKeyInfoResponsePtrOutput)
}

// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
func (o MongoDbCollectionInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

// The name of the collection that this is a view of, if IsView is true
func (o MongoDbCollectionInfoResponseOutput) ViewOf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) *string { return v.ViewOf }).(pulumi.StringPtrOutput)
}

type MongoDbCollectionInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbCollectionInfoResponse)(nil)).Elem()
}

func (o MongoDbCollectionInfoResponseArrayOutput) ToMongoDbCollectionInfoResponseArrayOutput() MongoDbCollectionInfoResponseArrayOutput {
	return o
}

func (o MongoDbCollectionInfoResponseArrayOutput) ToMongoDbCollectionInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbCollectionInfoResponseArrayOutput {
	return o
}

func (o MongoDbCollectionInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbCollectionInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbCollectionInfoResponse {
		return vs[0].([]MongoDbCollectionInfoResponse)[vs[1].(int)]
	}).(MongoDbCollectionInfoResponseOutput)
}

// Describes the progress of a collection
type MongoDbCollectionProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied int `pulumi:"bytesCopied"`
	// The number of documents copied during the Copying stage
	DocumentsCopied int `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending int `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed int `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes int `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments int `pulumi:"totalDocuments"`
}

// MongoDbCollectionProgressResponseInput is an input type that accepts MongoDbCollectionProgressResponseArgs and MongoDbCollectionProgressResponseOutput values.
// You can construct a concrete instance of `MongoDbCollectionProgressResponseInput` via:
//
//          MongoDbCollectionProgressResponseArgs{...}
type MongoDbCollectionProgressResponseInput interface {
	pulumi.Input

	ToMongoDbCollectionProgressResponseOutput() MongoDbCollectionProgressResponseOutput
	ToMongoDbCollectionProgressResponseOutputWithContext(context.Context) MongoDbCollectionProgressResponseOutput
}

// Describes the progress of a collection
type MongoDbCollectionProgressResponseArgs struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied pulumi.IntInput `pulumi:"bytesCopied"`
	// The number of documents copied during the Copying stage
	DocumentsCopied pulumi.IntInput `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime pulumi.StringInput `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors MongoDbErrorResponseMapInput `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending pulumi.IntInput `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed pulumi.IntInput `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime pulumi.StringPtrInput `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime pulumi.StringPtrInput `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName pulumi.StringPtrInput `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType pulumi.StringInput `pulumi:"resultType"`
	State      pulumi.StringInput `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes pulumi.IntInput `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments pulumi.IntInput `pulumi:"totalDocuments"`
}

func (MongoDbCollectionProgressResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionProgressResponse)(nil)).Elem()
}

func (i MongoDbCollectionProgressResponseArgs) ToMongoDbCollectionProgressResponseOutput() MongoDbCollectionProgressResponseOutput {
	return i.ToMongoDbCollectionProgressResponseOutputWithContext(context.Background())
}

func (i MongoDbCollectionProgressResponseArgs) ToMongoDbCollectionProgressResponseOutputWithContext(ctx context.Context) MongoDbCollectionProgressResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionProgressResponseOutput)
}

// MongoDbCollectionProgressResponseMapInput is an input type that accepts MongoDbCollectionProgressResponseMap and MongoDbCollectionProgressResponseMapOutput values.
// You can construct a concrete instance of `MongoDbCollectionProgressResponseMapInput` via:
//
//          MongoDbCollectionProgressResponseMap{ "key": MongoDbCollectionProgressResponseArgs{...} }
type MongoDbCollectionProgressResponseMapInput interface {
	pulumi.Input

	ToMongoDbCollectionProgressResponseMapOutput() MongoDbCollectionProgressResponseMapOutput
	ToMongoDbCollectionProgressResponseMapOutputWithContext(context.Context) MongoDbCollectionProgressResponseMapOutput
}

type MongoDbCollectionProgressResponseMap map[string]MongoDbCollectionProgressResponseInput

func (MongoDbCollectionProgressResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionProgressResponse)(nil)).Elem()
}

func (i MongoDbCollectionProgressResponseMap) ToMongoDbCollectionProgressResponseMapOutput() MongoDbCollectionProgressResponseMapOutput {
	return i.ToMongoDbCollectionProgressResponseMapOutputWithContext(context.Background())
}

func (i MongoDbCollectionProgressResponseMap) ToMongoDbCollectionProgressResponseMapOutputWithContext(ctx context.Context) MongoDbCollectionProgressResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionProgressResponseMapOutput)
}

// Describes the progress of a collection
type MongoDbCollectionProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionProgressResponse)(nil)).Elem()
}

func (o MongoDbCollectionProgressResponseOutput) ToMongoDbCollectionProgressResponseOutput() MongoDbCollectionProgressResponseOutput {
	return o
}

func (o MongoDbCollectionProgressResponseOutput) ToMongoDbCollectionProgressResponseOutputWithContext(ctx context.Context) MongoDbCollectionProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbCollectionProgressResponseOutput) BytesCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.BytesCopied }).(pulumi.IntOutput)
}

// The number of documents copied during the Copying stage
func (o MongoDbCollectionProgressResponseOutput) DocumentsCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.DocumentsCopied }).(pulumi.IntOutput)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbCollectionProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbCollectionProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbCollectionProgressResponseOutput) EventsPending() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.EventsPending }).(pulumi.IntOutput)
}

// The number of oplog events replayed so far
func (o MongoDbCollectionProgressResponseOutput) EventsReplayed() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.EventsReplayed }).(pulumi.IntOutput)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbCollectionProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbCollectionProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbCollectionProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbCollectionProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
func (o MongoDbCollectionProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbCollectionProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbCollectionProgressResponseOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.TotalBytes }).(pulumi.IntOutput)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbCollectionProgressResponseOutput) TotalDocuments() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.TotalDocuments }).(pulumi.IntOutput)
}

type MongoDbCollectionProgressResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionProgressResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionProgressResponse)(nil)).Elem()
}

func (o MongoDbCollectionProgressResponseMapOutput) ToMongoDbCollectionProgressResponseMapOutput() MongoDbCollectionProgressResponseMapOutput {
	return o
}

func (o MongoDbCollectionProgressResponseMapOutput) ToMongoDbCollectionProgressResponseMapOutputWithContext(ctx context.Context) MongoDbCollectionProgressResponseMapOutput {
	return o
}

func (o MongoDbCollectionProgressResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbCollectionProgressResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbCollectionProgressResponse {
		return vs[0].(map[string]MongoDbCollectionProgressResponse)[vs[1].(string)]
	}).(MongoDbCollectionProgressResponseOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettings struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete *bool `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey *MongoDbShardKeySetting `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// MongoDbCollectionSettingsInput is an input type that accepts MongoDbCollectionSettingsArgs and MongoDbCollectionSettingsOutput values.
// You can construct a concrete instance of `MongoDbCollectionSettingsInput` via:
//
//          MongoDbCollectionSettingsArgs{...}
type MongoDbCollectionSettingsInput interface {
	pulumi.Input

	ToMongoDbCollectionSettingsOutput() MongoDbCollectionSettingsOutput
	ToMongoDbCollectionSettingsOutputWithContext(context.Context) MongoDbCollectionSettingsOutput
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsArgs struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete pulumi.BoolPtrInput `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey MongoDbShardKeySettingPtrInput `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs pulumi.IntPtrInput `pulumi:"targetRUs"`
}

func (MongoDbCollectionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettings)(nil)).Elem()
}

func (i MongoDbCollectionSettingsArgs) ToMongoDbCollectionSettingsOutput() MongoDbCollectionSettingsOutput {
	return i.ToMongoDbCollectionSettingsOutputWithContext(context.Background())
}

func (i MongoDbCollectionSettingsArgs) ToMongoDbCollectionSettingsOutputWithContext(ctx context.Context) MongoDbCollectionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionSettingsOutput)
}

// MongoDbCollectionSettingsMapInput is an input type that accepts MongoDbCollectionSettingsMap and MongoDbCollectionSettingsMapOutput values.
// You can construct a concrete instance of `MongoDbCollectionSettingsMapInput` via:
//
//          MongoDbCollectionSettingsMap{ "key": MongoDbCollectionSettingsArgs{...} }
type MongoDbCollectionSettingsMapInput interface {
	pulumi.Input

	ToMongoDbCollectionSettingsMapOutput() MongoDbCollectionSettingsMapOutput
	ToMongoDbCollectionSettingsMapOutputWithContext(context.Context) MongoDbCollectionSettingsMapOutput
}

type MongoDbCollectionSettingsMap map[string]MongoDbCollectionSettingsInput

func (MongoDbCollectionSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettings)(nil)).Elem()
}

func (i MongoDbCollectionSettingsMap) ToMongoDbCollectionSettingsMapOutput() MongoDbCollectionSettingsMapOutput {
	return i.ToMongoDbCollectionSettingsMapOutputWithContext(context.Background())
}

func (i MongoDbCollectionSettingsMap) ToMongoDbCollectionSettingsMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionSettingsMapOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettings)(nil)).Elem()
}

func (o MongoDbCollectionSettingsOutput) ToMongoDbCollectionSettingsOutput() MongoDbCollectionSettingsOutput {
	return o
}

func (o MongoDbCollectionSettingsOutput) ToMongoDbCollectionSettingsOutputWithContext(ctx context.Context) MongoDbCollectionSettingsOutput {
	return o
}

// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
func (o MongoDbCollectionSettingsOutput) CanDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettings) *bool { return v.CanDelete }).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
func (o MongoDbCollectionSettingsOutput) ShardKey() MongoDbShardKeySettingPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettings) *MongoDbShardKeySetting { return v.ShardKey }).(MongoDbShardKeySettingPtrOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
func (o MongoDbCollectionSettingsOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettings) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbCollectionSettingsMapOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettings)(nil)).Elem()
}

func (o MongoDbCollectionSettingsMapOutput) ToMongoDbCollectionSettingsMapOutput() MongoDbCollectionSettingsMapOutput {
	return o
}

func (o MongoDbCollectionSettingsMapOutput) ToMongoDbCollectionSettingsMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsMapOutput {
	return o
}

func (o MongoDbCollectionSettingsMapOutput) MapIndex(k pulumi.StringInput) MongoDbCollectionSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbCollectionSettings {
		return vs[0].(map[string]MongoDbCollectionSettings)[vs[1].(string)]
	}).(MongoDbCollectionSettingsOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsResponse struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete *bool `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey *MongoDbShardKeySettingResponse `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// MongoDbCollectionSettingsResponseInput is an input type that accepts MongoDbCollectionSettingsResponseArgs and MongoDbCollectionSettingsResponseOutput values.
// You can construct a concrete instance of `MongoDbCollectionSettingsResponseInput` via:
//
//          MongoDbCollectionSettingsResponseArgs{...}
type MongoDbCollectionSettingsResponseInput interface {
	pulumi.Input

	ToMongoDbCollectionSettingsResponseOutput() MongoDbCollectionSettingsResponseOutput
	ToMongoDbCollectionSettingsResponseOutputWithContext(context.Context) MongoDbCollectionSettingsResponseOutput
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsResponseArgs struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete pulumi.BoolPtrInput `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey MongoDbShardKeySettingResponsePtrInput `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs pulumi.IntPtrInput `pulumi:"targetRUs"`
}

func (MongoDbCollectionSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettingsResponse)(nil)).Elem()
}

func (i MongoDbCollectionSettingsResponseArgs) ToMongoDbCollectionSettingsResponseOutput() MongoDbCollectionSettingsResponseOutput {
	return i.ToMongoDbCollectionSettingsResponseOutputWithContext(context.Background())
}

func (i MongoDbCollectionSettingsResponseArgs) ToMongoDbCollectionSettingsResponseOutputWithContext(ctx context.Context) MongoDbCollectionSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionSettingsResponseOutput)
}

// MongoDbCollectionSettingsResponseMapInput is an input type that accepts MongoDbCollectionSettingsResponseMap and MongoDbCollectionSettingsResponseMapOutput values.
// You can construct a concrete instance of `MongoDbCollectionSettingsResponseMapInput` via:
//
//          MongoDbCollectionSettingsResponseMap{ "key": MongoDbCollectionSettingsResponseArgs{...} }
type MongoDbCollectionSettingsResponseMapInput interface {
	pulumi.Input

	ToMongoDbCollectionSettingsResponseMapOutput() MongoDbCollectionSettingsResponseMapOutput
	ToMongoDbCollectionSettingsResponseMapOutputWithContext(context.Context) MongoDbCollectionSettingsResponseMapOutput
}

type MongoDbCollectionSettingsResponseMap map[string]MongoDbCollectionSettingsResponseInput

func (MongoDbCollectionSettingsResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettingsResponse)(nil)).Elem()
}

func (i MongoDbCollectionSettingsResponseMap) ToMongoDbCollectionSettingsResponseMapOutput() MongoDbCollectionSettingsResponseMapOutput {
	return i.ToMongoDbCollectionSettingsResponseMapOutputWithContext(context.Background())
}

func (i MongoDbCollectionSettingsResponseMap) ToMongoDbCollectionSettingsResponseMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionSettingsResponseMapOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettingsResponse)(nil)).Elem()
}

func (o MongoDbCollectionSettingsResponseOutput) ToMongoDbCollectionSettingsResponseOutput() MongoDbCollectionSettingsResponseOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseOutput) ToMongoDbCollectionSettingsResponseOutputWithContext(ctx context.Context) MongoDbCollectionSettingsResponseOutput {
	return o
}

// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
func (o MongoDbCollectionSettingsResponseOutput) CanDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *bool { return v.CanDelete }).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
func (o MongoDbCollectionSettingsResponseOutput) ShardKey() MongoDbShardKeySettingResponsePtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *MongoDbShardKeySettingResponse { return v.ShardKey }).(MongoDbShardKeySettingResponsePtrOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
func (o MongoDbCollectionSettingsResponseOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbCollectionSettingsResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettingsResponse)(nil)).Elem()
}

func (o MongoDbCollectionSettingsResponseMapOutput) ToMongoDbCollectionSettingsResponseMapOutput() MongoDbCollectionSettingsResponseMapOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseMapOutput) ToMongoDbCollectionSettingsResponseMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsResponseMapOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbCollectionSettingsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbCollectionSettingsResponse {
		return vs[0].(map[string]MongoDbCollectionSettingsResponse)[vs[1].(string)]
	}).(MongoDbCollectionSettingsResponseOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfo struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString string `pulumi:"connectionString"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MongoDbConnectionInfoInput is an input type that accepts MongoDbConnectionInfoArgs and MongoDbConnectionInfoOutput values.
// You can construct a concrete instance of `MongoDbConnectionInfoInput` via:
//
//          MongoDbConnectionInfoArgs{...}
type MongoDbConnectionInfoInput interface {
	pulumi.Input

	ToMongoDbConnectionInfoOutput() MongoDbConnectionInfoOutput
	ToMongoDbConnectionInfoOutputWithContext(context.Context) MongoDbConnectionInfoOutput
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoArgs struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MongoDbConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfo)(nil)).Elem()
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoOutput() MongoDbConnectionInfoOutput {
	return i.ToMongoDbConnectionInfoOutputWithContext(context.Background())
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoOutputWithContext(ctx context.Context) MongoDbConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoOutput)
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return i.ToMongoDbConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoOutput).ToMongoDbConnectionInfoPtrOutputWithContext(ctx)
}

// MongoDbConnectionInfoPtrInput is an input type that accepts MongoDbConnectionInfoArgs, MongoDbConnectionInfoPtr and MongoDbConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MongoDbConnectionInfoPtrInput` via:
//
//          MongoDbConnectionInfoArgs{...}
//
//  or:
//
//          nil
type MongoDbConnectionInfoPtrInput interface {
	pulumi.Input

	ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput
	ToMongoDbConnectionInfoPtrOutputWithContext(context.Context) MongoDbConnectionInfoPtrOutput
}

type mongoDbConnectionInfoPtrType MongoDbConnectionInfoArgs

func MongoDbConnectionInfoPtr(v *MongoDbConnectionInfoArgs) MongoDbConnectionInfoPtrInput {
	return (*mongoDbConnectionInfoPtrType)(v)
}

func (*mongoDbConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfo)(nil)).Elem()
}

func (i *mongoDbConnectionInfoPtrType) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return i.ToMongoDbConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *mongoDbConnectionInfoPtrType) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoPtrOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfo)(nil)).Elem()
}

func (o MongoDbConnectionInfoOutput) ToMongoDbConnectionInfoOutput() MongoDbConnectionInfoOutput {
	return o
}

func (o MongoDbConnectionInfoOutput) ToMongoDbConnectionInfoOutputWithContext(ctx context.Context) MongoDbConnectionInfoOutput {
	return o
}

func (o MongoDbConnectionInfoOutput) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return o.ToMongoDbConnectionInfoPtrOutputWithContext(context.Background())
}

func (o MongoDbConnectionInfoOutput) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *MongoDbConnectionInfo {
		return &v
	}).(MongoDbConnectionInfoPtrOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Password credential.
func (o MongoDbConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MongoDbConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MongoDbConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MongoDbConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfo)(nil)).Elem()
}

func (o MongoDbConnectionInfoPtrOutput) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return o
}

func (o MongoDbConnectionInfoPtrOutput) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return o
}

func (o MongoDbConnectionInfoPtrOutput) Elem() MongoDbConnectionInfoOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) MongoDbConnectionInfo { return *v }).(MongoDbConnectionInfoOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoPtrOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionString
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o MongoDbConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MongoDbConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MongoDbConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoResponse struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString string `pulumi:"connectionString"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MongoDbConnectionInfoResponseInput is an input type that accepts MongoDbConnectionInfoResponseArgs and MongoDbConnectionInfoResponseOutput values.
// You can construct a concrete instance of `MongoDbConnectionInfoResponseInput` via:
//
//          MongoDbConnectionInfoResponseArgs{...}
type MongoDbConnectionInfoResponseInput interface {
	pulumi.Input

	ToMongoDbConnectionInfoResponseOutput() MongoDbConnectionInfoResponseOutput
	ToMongoDbConnectionInfoResponseOutputWithContext(context.Context) MongoDbConnectionInfoResponseOutput
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoResponseArgs struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MongoDbConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfoResponse)(nil)).Elem()
}

func (i MongoDbConnectionInfoResponseArgs) ToMongoDbConnectionInfoResponseOutput() MongoDbConnectionInfoResponseOutput {
	return i.ToMongoDbConnectionInfoResponseOutputWithContext(context.Background())
}

func (i MongoDbConnectionInfoResponseArgs) ToMongoDbConnectionInfoResponseOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoResponseOutput)
}

func (i MongoDbConnectionInfoResponseArgs) ToMongoDbConnectionInfoResponsePtrOutput() MongoDbConnectionInfoResponsePtrOutput {
	return i.ToMongoDbConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i MongoDbConnectionInfoResponseArgs) ToMongoDbConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoResponseOutput).ToMongoDbConnectionInfoResponsePtrOutputWithContext(ctx)
}

// MongoDbConnectionInfoResponsePtrInput is an input type that accepts MongoDbConnectionInfoResponseArgs, MongoDbConnectionInfoResponsePtr and MongoDbConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `MongoDbConnectionInfoResponsePtrInput` via:
//
//          MongoDbConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type MongoDbConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToMongoDbConnectionInfoResponsePtrOutput() MongoDbConnectionInfoResponsePtrOutput
	ToMongoDbConnectionInfoResponsePtrOutputWithContext(context.Context) MongoDbConnectionInfoResponsePtrOutput
}

type mongoDbConnectionInfoResponsePtrType MongoDbConnectionInfoResponseArgs

func MongoDbConnectionInfoResponsePtr(v *MongoDbConnectionInfoResponseArgs) MongoDbConnectionInfoResponsePtrInput {
	return (*mongoDbConnectionInfoResponsePtrType)(v)
}

func (*mongoDbConnectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfoResponse)(nil)).Elem()
}

func (i *mongoDbConnectionInfoResponsePtrType) ToMongoDbConnectionInfoResponsePtrOutput() MongoDbConnectionInfoResponsePtrOutput {
	return i.ToMongoDbConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *mongoDbConnectionInfoResponsePtrType) ToMongoDbConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoResponsePtrOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfoResponse)(nil)).Elem()
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponseOutput() MongoDbConnectionInfoResponseOutput {
	return o
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponseOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponseOutput {
	return o
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponsePtrOutput() MongoDbConnectionInfoResponsePtrOutput {
	return o.ToMongoDbConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *MongoDbConnectionInfoResponse {
		return &v
	}).(MongoDbConnectionInfoResponsePtrOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoResponseOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Password credential.
func (o MongoDbConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MongoDbConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MongoDbConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MongoDbConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfoResponse)(nil)).Elem()
}

func (o MongoDbConnectionInfoResponsePtrOutput) ToMongoDbConnectionInfoResponsePtrOutput() MongoDbConnectionInfoResponsePtrOutput {
	return o
}

func (o MongoDbConnectionInfoResponsePtrOutput) ToMongoDbConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponsePtrOutput {
	return o
}

func (o MongoDbConnectionInfoResponsePtrOutput) Elem() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) MongoDbConnectionInfoResponse { return *v }).(MongoDbConnectionInfoResponseOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoResponsePtrOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionString
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o MongoDbConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MongoDbConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MongoDbConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Describes a database within a MongoDB data source
type MongoDbDatabaseInfoResponse struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize int `pulumi:"averageDocumentSize"`
	// A list of supported collections in a MongoDB database
	Collections []MongoDbCollectionInfoResponse `pulumi:"collections"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize int `pulumi:"dataSize"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount int `pulumi:"documentCount"`
	// The unqualified name of the database or collection
	Name string `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName string `pulumi:"qualifiedName"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding bool `pulumi:"supportsSharding"`
}

// MongoDbDatabaseInfoResponseInput is an input type that accepts MongoDbDatabaseInfoResponseArgs and MongoDbDatabaseInfoResponseOutput values.
// You can construct a concrete instance of `MongoDbDatabaseInfoResponseInput` via:
//
//          MongoDbDatabaseInfoResponseArgs{...}
type MongoDbDatabaseInfoResponseInput interface {
	pulumi.Input

	ToMongoDbDatabaseInfoResponseOutput() MongoDbDatabaseInfoResponseOutput
	ToMongoDbDatabaseInfoResponseOutputWithContext(context.Context) MongoDbDatabaseInfoResponseOutput
}

// Describes a database within a MongoDB data source
type MongoDbDatabaseInfoResponseArgs struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize pulumi.IntInput `pulumi:"averageDocumentSize"`
	// A list of supported collections in a MongoDB database
	Collections MongoDbCollectionInfoResponseArrayInput `pulumi:"collections"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize pulumi.IntInput `pulumi:"dataSize"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount pulumi.IntInput `pulumi:"documentCount"`
	// The unqualified name of the database or collection
	Name pulumi.StringInput `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName pulumi.StringInput `pulumi:"qualifiedName"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding pulumi.BoolInput `pulumi:"supportsSharding"`
}

func (MongoDbDatabaseInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseInfoResponse)(nil)).Elem()
}

func (i MongoDbDatabaseInfoResponseArgs) ToMongoDbDatabaseInfoResponseOutput() MongoDbDatabaseInfoResponseOutput {
	return i.ToMongoDbDatabaseInfoResponseOutputWithContext(context.Background())
}

func (i MongoDbDatabaseInfoResponseArgs) ToMongoDbDatabaseInfoResponseOutputWithContext(ctx context.Context) MongoDbDatabaseInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseInfoResponseOutput)
}

// MongoDbDatabaseInfoResponseArrayInput is an input type that accepts MongoDbDatabaseInfoResponseArray and MongoDbDatabaseInfoResponseArrayOutput values.
// You can construct a concrete instance of `MongoDbDatabaseInfoResponseArrayInput` via:
//
//          MongoDbDatabaseInfoResponseArray{ MongoDbDatabaseInfoResponseArgs{...} }
type MongoDbDatabaseInfoResponseArrayInput interface {
	pulumi.Input

	ToMongoDbDatabaseInfoResponseArrayOutput() MongoDbDatabaseInfoResponseArrayOutput
	ToMongoDbDatabaseInfoResponseArrayOutputWithContext(context.Context) MongoDbDatabaseInfoResponseArrayOutput
}

type MongoDbDatabaseInfoResponseArray []MongoDbDatabaseInfoResponseInput

func (MongoDbDatabaseInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbDatabaseInfoResponse)(nil)).Elem()
}

func (i MongoDbDatabaseInfoResponseArray) ToMongoDbDatabaseInfoResponseArrayOutput() MongoDbDatabaseInfoResponseArrayOutput {
	return i.ToMongoDbDatabaseInfoResponseArrayOutputWithContext(context.Background())
}

func (i MongoDbDatabaseInfoResponseArray) ToMongoDbDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbDatabaseInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseInfoResponseArrayOutput)
}

// Describes a database within a MongoDB data source
type MongoDbDatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseInfoResponse)(nil)).Elem()
}

func (o MongoDbDatabaseInfoResponseOutput) ToMongoDbDatabaseInfoResponseOutput() MongoDbDatabaseInfoResponseOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseOutput) ToMongoDbDatabaseInfoResponseOutputWithContext(ctx context.Context) MongoDbDatabaseInfoResponseOutput {
	return o
}

// The average document size, or -1 if the average size is unknown
func (o MongoDbDatabaseInfoResponseOutput) AverageDocumentSize() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) int { return v.AverageDocumentSize }).(pulumi.IntOutput)
}

// A list of supported collections in a MongoDB database
func (o MongoDbDatabaseInfoResponseOutput) Collections() MongoDbCollectionInfoResponseArrayOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) []MongoDbCollectionInfoResponse { return v.Collections }).(MongoDbCollectionInfoResponseArrayOutput)
}

// The estimated total data size, in bytes, or -1 if the size is unknown.
func (o MongoDbDatabaseInfoResponseOutput) DataSize() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) int { return v.DataSize }).(pulumi.IntOutput)
}

// The estimated total number of documents, or -1 if the document count is unknown
func (o MongoDbDatabaseInfoResponseOutput) DocumentCount() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) int { return v.DocumentCount }).(pulumi.IntOutput)
}

// The unqualified name of the database or collection
func (o MongoDbDatabaseInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The qualified name of the database or collection. For a collection, this is the database-qualified name.
func (o MongoDbDatabaseInfoResponseOutput) QualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) string { return v.QualifiedName }).(pulumi.StringOutput)
}

// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
func (o MongoDbDatabaseInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

type MongoDbDatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbDatabaseInfoResponse)(nil)).Elem()
}

func (o MongoDbDatabaseInfoResponseArrayOutput) ToMongoDbDatabaseInfoResponseArrayOutput() MongoDbDatabaseInfoResponseArrayOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseArrayOutput) ToMongoDbDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbDatabaseInfoResponseArrayOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbDatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbDatabaseInfoResponse {
		return vs[0].([]MongoDbDatabaseInfoResponse)[vs[1].(int)]
	}).(MongoDbDatabaseInfoResponseOutput)
}

// Describes the progress of a database
type MongoDbDatabaseProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied int `pulumi:"bytesCopied"`
	// The progress of the collections in the database. The keys are the unqualified names of the collections
	Collections map[string]MongoDbCollectionProgressResponse `pulumi:"collections"`
	// The number of documents copied during the Copying stage
	DocumentsCopied int `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending int `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed int `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes int `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments int `pulumi:"totalDocuments"`
}

// MongoDbDatabaseProgressResponseInput is an input type that accepts MongoDbDatabaseProgressResponseArgs and MongoDbDatabaseProgressResponseOutput values.
// You can construct a concrete instance of `MongoDbDatabaseProgressResponseInput` via:
//
//          MongoDbDatabaseProgressResponseArgs{...}
type MongoDbDatabaseProgressResponseInput interface {
	pulumi.Input

	ToMongoDbDatabaseProgressResponseOutput() MongoDbDatabaseProgressResponseOutput
	ToMongoDbDatabaseProgressResponseOutputWithContext(context.Context) MongoDbDatabaseProgressResponseOutput
}

// Describes the progress of a database
type MongoDbDatabaseProgressResponseArgs struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied pulumi.IntInput `pulumi:"bytesCopied"`
	// The progress of the collections in the database. The keys are the unqualified names of the collections
	Collections MongoDbCollectionProgressResponseMapInput `pulumi:"collections"`
	// The number of documents copied during the Copying stage
	DocumentsCopied pulumi.IntInput `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime pulumi.StringInput `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors MongoDbErrorResponseMapInput `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending pulumi.IntInput `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed pulumi.IntInput `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime pulumi.StringPtrInput `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime pulumi.StringPtrInput `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName pulumi.StringPtrInput `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType pulumi.StringInput `pulumi:"resultType"`
	State      pulumi.StringInput `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes pulumi.IntInput `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments pulumi.IntInput `pulumi:"totalDocuments"`
}

func (MongoDbDatabaseProgressResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseProgressResponse)(nil)).Elem()
}

func (i MongoDbDatabaseProgressResponseArgs) ToMongoDbDatabaseProgressResponseOutput() MongoDbDatabaseProgressResponseOutput {
	return i.ToMongoDbDatabaseProgressResponseOutputWithContext(context.Background())
}

func (i MongoDbDatabaseProgressResponseArgs) ToMongoDbDatabaseProgressResponseOutputWithContext(ctx context.Context) MongoDbDatabaseProgressResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseProgressResponseOutput)
}

// MongoDbDatabaseProgressResponseMapInput is an input type that accepts MongoDbDatabaseProgressResponseMap and MongoDbDatabaseProgressResponseMapOutput values.
// You can construct a concrete instance of `MongoDbDatabaseProgressResponseMapInput` via:
//
//          MongoDbDatabaseProgressResponseMap{ "key": MongoDbDatabaseProgressResponseArgs{...} }
type MongoDbDatabaseProgressResponseMapInput interface {
	pulumi.Input

	ToMongoDbDatabaseProgressResponseMapOutput() MongoDbDatabaseProgressResponseMapOutput
	ToMongoDbDatabaseProgressResponseMapOutputWithContext(context.Context) MongoDbDatabaseProgressResponseMapOutput
}

type MongoDbDatabaseProgressResponseMap map[string]MongoDbDatabaseProgressResponseInput

func (MongoDbDatabaseProgressResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseProgressResponse)(nil)).Elem()
}

func (i MongoDbDatabaseProgressResponseMap) ToMongoDbDatabaseProgressResponseMapOutput() MongoDbDatabaseProgressResponseMapOutput {
	return i.ToMongoDbDatabaseProgressResponseMapOutputWithContext(context.Background())
}

func (i MongoDbDatabaseProgressResponseMap) ToMongoDbDatabaseProgressResponseMapOutputWithContext(ctx context.Context) MongoDbDatabaseProgressResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseProgressResponseMapOutput)
}

// Describes the progress of a database
type MongoDbDatabaseProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseProgressResponse)(nil)).Elem()
}

func (o MongoDbDatabaseProgressResponseOutput) ToMongoDbDatabaseProgressResponseOutput() MongoDbDatabaseProgressResponseOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseOutput) ToMongoDbDatabaseProgressResponseOutputWithContext(ctx context.Context) MongoDbDatabaseProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbDatabaseProgressResponseOutput) BytesCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.BytesCopied }).(pulumi.IntOutput)
}

// The progress of the collections in the database. The keys are the unqualified names of the collections
func (o MongoDbDatabaseProgressResponseOutput) Collections() MongoDbCollectionProgressResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) map[string]MongoDbCollectionProgressResponse {
		return v.Collections
	}).(MongoDbCollectionProgressResponseMapOutput)
}

// The number of documents copied during the Copying stage
func (o MongoDbDatabaseProgressResponseOutput) DocumentsCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.DocumentsCopied }).(pulumi.IntOutput)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbDatabaseProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbDatabaseProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbDatabaseProgressResponseOutput) EventsPending() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.EventsPending }).(pulumi.IntOutput)
}

// The number of oplog events replayed so far
func (o MongoDbDatabaseProgressResponseOutput) EventsReplayed() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.EventsReplayed }).(pulumi.IntOutput)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbDatabaseProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbDatabaseProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbDatabaseProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbDatabaseProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
func (o MongoDbDatabaseProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbDatabaseProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbDatabaseProgressResponseOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.TotalBytes }).(pulumi.IntOutput)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbDatabaseProgressResponseOutput) TotalDocuments() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.TotalDocuments }).(pulumi.IntOutput)
}

type MongoDbDatabaseProgressResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseProgressResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseProgressResponse)(nil)).Elem()
}

func (o MongoDbDatabaseProgressResponseMapOutput) ToMongoDbDatabaseProgressResponseMapOutput() MongoDbDatabaseProgressResponseMapOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseMapOutput) ToMongoDbDatabaseProgressResponseMapOutputWithContext(ctx context.Context) MongoDbDatabaseProgressResponseMapOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbDatabaseProgressResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbDatabaseProgressResponse {
		return vs[0].(map[string]MongoDbDatabaseProgressResponse)[vs[1].(string)]
	}).(MongoDbDatabaseProgressResponseOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettings struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections map[string]MongoDbCollectionSettings `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// MongoDbDatabaseSettingsInput is an input type that accepts MongoDbDatabaseSettingsArgs and MongoDbDatabaseSettingsOutput values.
// You can construct a concrete instance of `MongoDbDatabaseSettingsInput` via:
//
//          MongoDbDatabaseSettingsArgs{...}
type MongoDbDatabaseSettingsInput interface {
	pulumi.Input

	ToMongoDbDatabaseSettingsOutput() MongoDbDatabaseSettingsOutput
	ToMongoDbDatabaseSettingsOutputWithContext(context.Context) MongoDbDatabaseSettingsOutput
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsArgs struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections MongoDbCollectionSettingsMapInput `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs pulumi.IntPtrInput `pulumi:"targetRUs"`
}

func (MongoDbDatabaseSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettings)(nil)).Elem()
}

func (i MongoDbDatabaseSettingsArgs) ToMongoDbDatabaseSettingsOutput() MongoDbDatabaseSettingsOutput {
	return i.ToMongoDbDatabaseSettingsOutputWithContext(context.Background())
}

func (i MongoDbDatabaseSettingsArgs) ToMongoDbDatabaseSettingsOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseSettingsOutput)
}

// MongoDbDatabaseSettingsMapInput is an input type that accepts MongoDbDatabaseSettingsMap and MongoDbDatabaseSettingsMapOutput values.
// You can construct a concrete instance of `MongoDbDatabaseSettingsMapInput` via:
//
//          MongoDbDatabaseSettingsMap{ "key": MongoDbDatabaseSettingsArgs{...} }
type MongoDbDatabaseSettingsMapInput interface {
	pulumi.Input

	ToMongoDbDatabaseSettingsMapOutput() MongoDbDatabaseSettingsMapOutput
	ToMongoDbDatabaseSettingsMapOutputWithContext(context.Context) MongoDbDatabaseSettingsMapOutput
}

type MongoDbDatabaseSettingsMap map[string]MongoDbDatabaseSettingsInput

func (MongoDbDatabaseSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettings)(nil)).Elem()
}

func (i MongoDbDatabaseSettingsMap) ToMongoDbDatabaseSettingsMapOutput() MongoDbDatabaseSettingsMapOutput {
	return i.ToMongoDbDatabaseSettingsMapOutputWithContext(context.Background())
}

func (i MongoDbDatabaseSettingsMap) ToMongoDbDatabaseSettingsMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseSettingsMapOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettings)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsOutput) ToMongoDbDatabaseSettingsOutput() MongoDbDatabaseSettingsOutput {
	return o
}

func (o MongoDbDatabaseSettingsOutput) ToMongoDbDatabaseSettingsOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsOutput {
	return o
}

// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
func (o MongoDbDatabaseSettingsOutput) Collections() MongoDbCollectionSettingsMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettings) map[string]MongoDbCollectionSettings { return v.Collections }).(MongoDbCollectionSettingsMapOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
func (o MongoDbDatabaseSettingsOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettings) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbDatabaseSettingsMapOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettings)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsMapOutput) ToMongoDbDatabaseSettingsMapOutput() MongoDbDatabaseSettingsMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsMapOutput) ToMongoDbDatabaseSettingsMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsMapOutput) MapIndex(k pulumi.StringInput) MongoDbDatabaseSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbDatabaseSettings {
		return vs[0].(map[string]MongoDbDatabaseSettings)[vs[1].(string)]
	}).(MongoDbDatabaseSettingsOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsResponse struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections map[string]MongoDbCollectionSettingsResponse `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// MongoDbDatabaseSettingsResponseInput is an input type that accepts MongoDbDatabaseSettingsResponseArgs and MongoDbDatabaseSettingsResponseOutput values.
// You can construct a concrete instance of `MongoDbDatabaseSettingsResponseInput` via:
//
//          MongoDbDatabaseSettingsResponseArgs{...}
type MongoDbDatabaseSettingsResponseInput interface {
	pulumi.Input

	ToMongoDbDatabaseSettingsResponseOutput() MongoDbDatabaseSettingsResponseOutput
	ToMongoDbDatabaseSettingsResponseOutputWithContext(context.Context) MongoDbDatabaseSettingsResponseOutput
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsResponseArgs struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections MongoDbCollectionSettingsResponseMapInput `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs pulumi.IntPtrInput `pulumi:"targetRUs"`
}

func (MongoDbDatabaseSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettingsResponse)(nil)).Elem()
}

func (i MongoDbDatabaseSettingsResponseArgs) ToMongoDbDatabaseSettingsResponseOutput() MongoDbDatabaseSettingsResponseOutput {
	return i.ToMongoDbDatabaseSettingsResponseOutputWithContext(context.Background())
}

func (i MongoDbDatabaseSettingsResponseArgs) ToMongoDbDatabaseSettingsResponseOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseSettingsResponseOutput)
}

// MongoDbDatabaseSettingsResponseMapInput is an input type that accepts MongoDbDatabaseSettingsResponseMap and MongoDbDatabaseSettingsResponseMapOutput values.
// You can construct a concrete instance of `MongoDbDatabaseSettingsResponseMapInput` via:
//
//          MongoDbDatabaseSettingsResponseMap{ "key": MongoDbDatabaseSettingsResponseArgs{...} }
type MongoDbDatabaseSettingsResponseMapInput interface {
	pulumi.Input

	ToMongoDbDatabaseSettingsResponseMapOutput() MongoDbDatabaseSettingsResponseMapOutput
	ToMongoDbDatabaseSettingsResponseMapOutputWithContext(context.Context) MongoDbDatabaseSettingsResponseMapOutput
}

type MongoDbDatabaseSettingsResponseMap map[string]MongoDbDatabaseSettingsResponseInput

func (MongoDbDatabaseSettingsResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettingsResponse)(nil)).Elem()
}

func (i MongoDbDatabaseSettingsResponseMap) ToMongoDbDatabaseSettingsResponseMapOutput() MongoDbDatabaseSettingsResponseMapOutput {
	return i.ToMongoDbDatabaseSettingsResponseMapOutputWithContext(context.Background())
}

func (i MongoDbDatabaseSettingsResponseMap) ToMongoDbDatabaseSettingsResponseMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseSettingsResponseMapOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettingsResponse)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsResponseOutput) ToMongoDbDatabaseSettingsResponseOutput() MongoDbDatabaseSettingsResponseOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseOutput) ToMongoDbDatabaseSettingsResponseOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsResponseOutput {
	return o
}

// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
func (o MongoDbDatabaseSettingsResponseOutput) Collections() MongoDbCollectionSettingsResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettingsResponse) map[string]MongoDbCollectionSettingsResponse {
		return v.Collections
	}).(MongoDbCollectionSettingsResponseMapOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
func (o MongoDbDatabaseSettingsResponseOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettingsResponse) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbDatabaseSettingsResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettingsResponse)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsResponseMapOutput) ToMongoDbDatabaseSettingsResponseMapOutput() MongoDbDatabaseSettingsResponseMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseMapOutput) ToMongoDbDatabaseSettingsResponseMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsResponseMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbDatabaseSettingsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbDatabaseSettingsResponse {
		return vs[0].(map[string]MongoDbDatabaseSettingsResponse)[vs[1].(string)]
	}).(MongoDbDatabaseSettingsResponseOutput)
}

// Describes an error or warning that occurred during a MongoDB migration
type MongoDbErrorResponse struct {
	// The non-localized, machine-readable code that describes the error or warning
	Code *string `pulumi:"code"`
	// The number of times the error or warning has occurred
	Count *int `pulumi:"count"`
	// The localized, human-readable message that describes the error or warning
	Message *string `pulumi:"message"`
	// The type of error or warning
	Type *string `pulumi:"type"`
}

// MongoDbErrorResponseInput is an input type that accepts MongoDbErrorResponseArgs and MongoDbErrorResponseOutput values.
// You can construct a concrete instance of `MongoDbErrorResponseInput` via:
//
//          MongoDbErrorResponseArgs{...}
type MongoDbErrorResponseInput interface {
	pulumi.Input

	ToMongoDbErrorResponseOutput() MongoDbErrorResponseOutput
	ToMongoDbErrorResponseOutputWithContext(context.Context) MongoDbErrorResponseOutput
}

// Describes an error or warning that occurred during a MongoDB migration
type MongoDbErrorResponseArgs struct {
	// The non-localized, machine-readable code that describes the error or warning
	Code pulumi.StringPtrInput `pulumi:"code"`
	// The number of times the error or warning has occurred
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The localized, human-readable message that describes the error or warning
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The type of error or warning
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MongoDbErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbErrorResponse)(nil)).Elem()
}

func (i MongoDbErrorResponseArgs) ToMongoDbErrorResponseOutput() MongoDbErrorResponseOutput {
	return i.ToMongoDbErrorResponseOutputWithContext(context.Background())
}

func (i MongoDbErrorResponseArgs) ToMongoDbErrorResponseOutputWithContext(ctx context.Context) MongoDbErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbErrorResponseOutput)
}

// MongoDbErrorResponseMapInput is an input type that accepts MongoDbErrorResponseMap and MongoDbErrorResponseMapOutput values.
// You can construct a concrete instance of `MongoDbErrorResponseMapInput` via:
//
//          MongoDbErrorResponseMap{ "key": MongoDbErrorResponseArgs{...} }
type MongoDbErrorResponseMapInput interface {
	pulumi.Input

	ToMongoDbErrorResponseMapOutput() MongoDbErrorResponseMapOutput
	ToMongoDbErrorResponseMapOutputWithContext(context.Context) MongoDbErrorResponseMapOutput
}

type MongoDbErrorResponseMap map[string]MongoDbErrorResponseInput

func (MongoDbErrorResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbErrorResponse)(nil)).Elem()
}

func (i MongoDbErrorResponseMap) ToMongoDbErrorResponseMapOutput() MongoDbErrorResponseMapOutput {
	return i.ToMongoDbErrorResponseMapOutputWithContext(context.Background())
}

func (i MongoDbErrorResponseMap) ToMongoDbErrorResponseMapOutputWithContext(ctx context.Context) MongoDbErrorResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbErrorResponseMapOutput)
}

// Describes an error or warning that occurred during a MongoDB migration
type MongoDbErrorResponseOutput struct{ *pulumi.OutputState }

func (MongoDbErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbErrorResponse)(nil)).Elem()
}

func (o MongoDbErrorResponseOutput) ToMongoDbErrorResponseOutput() MongoDbErrorResponseOutput {
	return o
}

func (o MongoDbErrorResponseOutput) ToMongoDbErrorResponseOutputWithContext(ctx context.Context) MongoDbErrorResponseOutput {
	return o
}

// The non-localized, machine-readable code that describes the error or warning
func (o MongoDbErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The number of times the error or warning has occurred
func (o MongoDbErrorResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The localized, human-readable message that describes the error or warning
func (o MongoDbErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The type of error or warning
func (o MongoDbErrorResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MongoDbErrorResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbErrorResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbErrorResponse)(nil)).Elem()
}

func (o MongoDbErrorResponseMapOutput) ToMongoDbErrorResponseMapOutput() MongoDbErrorResponseMapOutput {
	return o
}

func (o MongoDbErrorResponseMapOutput) ToMongoDbErrorResponseMapOutputWithContext(ctx context.Context) MongoDbErrorResponseMapOutput {
	return o
}

func (o MongoDbErrorResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbErrorResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbErrorResponse {
		return vs[0].(map[string]MongoDbErrorResponse)[vs[1].(string)]
	}).(MongoDbErrorResponseOutput)
}

// Describes the progress of the overall migration
type MongoDbMigrationProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied int `pulumi:"bytesCopied"`
	// The progress of the databases in the migration. The keys are the names of the databases
	Databases map[string]MongoDbDatabaseProgressResponse `pulumi:"databases"`
	// The number of documents copied during the Copying stage
	DocumentsCopied int `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending int `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed int `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes int `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments int `pulumi:"totalDocuments"`
}

// MongoDbMigrationProgressResponseInput is an input type that accepts MongoDbMigrationProgressResponseArgs and MongoDbMigrationProgressResponseOutput values.
// You can construct a concrete instance of `MongoDbMigrationProgressResponseInput` via:
//
//          MongoDbMigrationProgressResponseArgs{...}
type MongoDbMigrationProgressResponseInput interface {
	pulumi.Input

	ToMongoDbMigrationProgressResponseOutput() MongoDbMigrationProgressResponseOutput
	ToMongoDbMigrationProgressResponseOutputWithContext(context.Context) MongoDbMigrationProgressResponseOutput
}

// Describes the progress of the overall migration
type MongoDbMigrationProgressResponseArgs struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied pulumi.IntInput `pulumi:"bytesCopied"`
	// The progress of the databases in the migration. The keys are the names of the databases
	Databases MongoDbDatabaseProgressResponseMapInput `pulumi:"databases"`
	// The number of documents copied during the Copying stage
	DocumentsCopied pulumi.IntInput `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime pulumi.StringInput `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors MongoDbErrorResponseMapInput `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending pulumi.IntInput `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed pulumi.IntInput `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime pulumi.StringPtrInput `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime pulumi.StringPtrInput `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName pulumi.StringPtrInput `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType pulumi.StringInput `pulumi:"resultType"`
	State      pulumi.StringInput `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes pulumi.IntInput `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments pulumi.IntInput `pulumi:"totalDocuments"`
}

func (MongoDbMigrationProgressResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationProgressResponse)(nil)).Elem()
}

func (i MongoDbMigrationProgressResponseArgs) ToMongoDbMigrationProgressResponseOutput() MongoDbMigrationProgressResponseOutput {
	return i.ToMongoDbMigrationProgressResponseOutputWithContext(context.Background())
}

func (i MongoDbMigrationProgressResponseArgs) ToMongoDbMigrationProgressResponseOutputWithContext(ctx context.Context) MongoDbMigrationProgressResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationProgressResponseOutput)
}

// MongoDbMigrationProgressResponseArrayInput is an input type that accepts MongoDbMigrationProgressResponseArray and MongoDbMigrationProgressResponseArrayOutput values.
// You can construct a concrete instance of `MongoDbMigrationProgressResponseArrayInput` via:
//
//          MongoDbMigrationProgressResponseArray{ MongoDbMigrationProgressResponseArgs{...} }
type MongoDbMigrationProgressResponseArrayInput interface {
	pulumi.Input

	ToMongoDbMigrationProgressResponseArrayOutput() MongoDbMigrationProgressResponseArrayOutput
	ToMongoDbMigrationProgressResponseArrayOutputWithContext(context.Context) MongoDbMigrationProgressResponseArrayOutput
}

type MongoDbMigrationProgressResponseArray []MongoDbMigrationProgressResponseInput

func (MongoDbMigrationProgressResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbMigrationProgressResponse)(nil)).Elem()
}

func (i MongoDbMigrationProgressResponseArray) ToMongoDbMigrationProgressResponseArrayOutput() MongoDbMigrationProgressResponseArrayOutput {
	return i.ToMongoDbMigrationProgressResponseArrayOutputWithContext(context.Background())
}

func (i MongoDbMigrationProgressResponseArray) ToMongoDbMigrationProgressResponseArrayOutputWithContext(ctx context.Context) MongoDbMigrationProgressResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationProgressResponseArrayOutput)
}

// Describes the progress of the overall migration
type MongoDbMigrationProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationProgressResponse)(nil)).Elem()
}

func (o MongoDbMigrationProgressResponseOutput) ToMongoDbMigrationProgressResponseOutput() MongoDbMigrationProgressResponseOutput {
	return o
}

func (o MongoDbMigrationProgressResponseOutput) ToMongoDbMigrationProgressResponseOutputWithContext(ctx context.Context) MongoDbMigrationProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbMigrationProgressResponseOutput) BytesCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.BytesCopied }).(pulumi.IntOutput)
}

// The progress of the databases in the migration. The keys are the names of the databases
func (o MongoDbMigrationProgressResponseOutput) Databases() MongoDbDatabaseProgressResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) map[string]MongoDbDatabaseProgressResponse {
		return v.Databases
	}).(MongoDbDatabaseProgressResponseMapOutput)
}

// The number of documents copied during the Copying stage
func (o MongoDbMigrationProgressResponseOutput) DocumentsCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.DocumentsCopied }).(pulumi.IntOutput)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbMigrationProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbMigrationProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbMigrationProgressResponseOutput) EventsPending() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.EventsPending }).(pulumi.IntOutput)
}

// The number of oplog events replayed so far
func (o MongoDbMigrationProgressResponseOutput) EventsReplayed() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.EventsReplayed }).(pulumi.IntOutput)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbMigrationProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbMigrationProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbMigrationProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbMigrationProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
func (o MongoDbMigrationProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbMigrationProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbMigrationProgressResponseOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.TotalBytes }).(pulumi.IntOutput)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbMigrationProgressResponseOutput) TotalDocuments() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.TotalDocuments }).(pulumi.IntOutput)
}

type MongoDbMigrationProgressResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationProgressResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbMigrationProgressResponse)(nil)).Elem()
}

func (o MongoDbMigrationProgressResponseArrayOutput) ToMongoDbMigrationProgressResponseArrayOutput() MongoDbMigrationProgressResponseArrayOutput {
	return o
}

func (o MongoDbMigrationProgressResponseArrayOutput) ToMongoDbMigrationProgressResponseArrayOutputWithContext(ctx context.Context) MongoDbMigrationProgressResponseArrayOutput {
	return o
}

func (o MongoDbMigrationProgressResponseArrayOutput) Index(i pulumi.IntInput) MongoDbMigrationProgressResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbMigrationProgressResponse {
		return vs[0].([]MongoDbMigrationProgressResponse)[vs[1].(int)]
	}).(MongoDbMigrationProgressResponseOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettings struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs *int `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases map[string]MongoDbDatabaseSettings `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication *string `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfo `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfo `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling *MongoDbThrottlingSettings `pulumi:"throttling"`
}

// MongoDbMigrationSettingsInput is an input type that accepts MongoDbMigrationSettingsArgs and MongoDbMigrationSettingsOutput values.
// You can construct a concrete instance of `MongoDbMigrationSettingsInput` via:
//
//          MongoDbMigrationSettingsArgs{...}
type MongoDbMigrationSettingsInput interface {
	pulumi.Input

	ToMongoDbMigrationSettingsOutput() MongoDbMigrationSettingsOutput
	ToMongoDbMigrationSettingsOutputWithContext(context.Context) MongoDbMigrationSettingsOutput
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsArgs struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs pulumi.IntPtrInput `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases MongoDbDatabaseSettingsMapInput `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication pulumi.StringPtrInput `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfoInput `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfoInput `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling MongoDbThrottlingSettingsPtrInput `pulumi:"throttling"`
}

func (MongoDbMigrationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettings)(nil)).Elem()
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsOutput() MongoDbMigrationSettingsOutput {
	return i.ToMongoDbMigrationSettingsOutputWithContext(context.Background())
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsOutputWithContext(ctx context.Context) MongoDbMigrationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsOutput)
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return i.ToMongoDbMigrationSettingsPtrOutputWithContext(context.Background())
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsOutput).ToMongoDbMigrationSettingsPtrOutputWithContext(ctx)
}

// MongoDbMigrationSettingsPtrInput is an input type that accepts MongoDbMigrationSettingsArgs, MongoDbMigrationSettingsPtr and MongoDbMigrationSettingsPtrOutput values.
// You can construct a concrete instance of `MongoDbMigrationSettingsPtrInput` via:
//
//          MongoDbMigrationSettingsArgs{...}
//
//  or:
//
//          nil
type MongoDbMigrationSettingsPtrInput interface {
	pulumi.Input

	ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput
	ToMongoDbMigrationSettingsPtrOutputWithContext(context.Context) MongoDbMigrationSettingsPtrOutput
}

type mongoDbMigrationSettingsPtrType MongoDbMigrationSettingsArgs

func MongoDbMigrationSettingsPtr(v *MongoDbMigrationSettingsArgs) MongoDbMigrationSettingsPtrInput {
	return (*mongoDbMigrationSettingsPtrType)(v)
}

func (*mongoDbMigrationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettings)(nil)).Elem()
}

func (i *mongoDbMigrationSettingsPtrType) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return i.ToMongoDbMigrationSettingsPtrOutputWithContext(context.Background())
}

func (i *mongoDbMigrationSettingsPtrType) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsPtrOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettings)(nil)).Elem()
}

func (o MongoDbMigrationSettingsOutput) ToMongoDbMigrationSettingsOutput() MongoDbMigrationSettingsOutput {
	return o
}

func (o MongoDbMigrationSettingsOutput) ToMongoDbMigrationSettingsOutputWithContext(ctx context.Context) MongoDbMigrationSettingsOutput {
	return o
}

func (o MongoDbMigrationSettingsOutput) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return o.ToMongoDbMigrationSettingsPtrOutputWithContext(context.Background())
}

func (o MongoDbMigrationSettingsOutput) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) *MongoDbMigrationSettings {
		return &v
	}).(MongoDbMigrationSettingsPtrOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) *int { return v.BoostRUs }).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsOutput) Databases() MongoDbDatabaseSettingsMapOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) map[string]MongoDbDatabaseSettings { return v.Databases }).(MongoDbDatabaseSettingsMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) *string { return v.Replication }).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsOutput) Source() MongoDbConnectionInfoOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) MongoDbConnectionInfo { return v.Source }).(MongoDbConnectionInfoOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsOutput) Target() MongoDbConnectionInfoOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) MongoDbConnectionInfo { return v.Target }).(MongoDbConnectionInfoOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsOutput) Throttling() MongoDbThrottlingSettingsPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) *MongoDbThrottlingSettings { return v.Throttling }).(MongoDbThrottlingSettingsPtrOutput)
}

type MongoDbMigrationSettingsPtrOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettings)(nil)).Elem()
}

func (o MongoDbMigrationSettingsPtrOutput) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return o
}

func (o MongoDbMigrationSettingsPtrOutput) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return o
}

func (o MongoDbMigrationSettingsPtrOutput) Elem() MongoDbMigrationSettingsOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) MongoDbMigrationSettings { return *v }).(MongoDbMigrationSettingsOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsPtrOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *int {
		if v == nil {
			return nil
		}
		return v.BoostRUs
	}).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsPtrOutput) Databases() MongoDbDatabaseSettingsMapOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) map[string]MongoDbDatabaseSettings {
		if v == nil {
			return nil
		}
		return v.Databases
	}).(MongoDbDatabaseSettingsMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsPtrOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *string {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsPtrOutput) Source() MongoDbConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *MongoDbConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(MongoDbConnectionInfoPtrOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsPtrOutput) Target() MongoDbConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *MongoDbConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(MongoDbConnectionInfoPtrOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsPtrOutput) Throttling() MongoDbThrottlingSettingsPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *MongoDbThrottlingSettings {
		if v == nil {
			return nil
		}
		return v.Throttling
	}).(MongoDbThrottlingSettingsPtrOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsResponse struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs *int `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases map[string]MongoDbDatabaseSettingsResponse `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication *string `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfoResponse `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfoResponse `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling *MongoDbThrottlingSettingsResponse `pulumi:"throttling"`
}

// MongoDbMigrationSettingsResponseInput is an input type that accepts MongoDbMigrationSettingsResponseArgs and MongoDbMigrationSettingsResponseOutput values.
// You can construct a concrete instance of `MongoDbMigrationSettingsResponseInput` via:
//
//          MongoDbMigrationSettingsResponseArgs{...}
type MongoDbMigrationSettingsResponseInput interface {
	pulumi.Input

	ToMongoDbMigrationSettingsResponseOutput() MongoDbMigrationSettingsResponseOutput
	ToMongoDbMigrationSettingsResponseOutputWithContext(context.Context) MongoDbMigrationSettingsResponseOutput
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsResponseArgs struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs pulumi.IntPtrInput `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases MongoDbDatabaseSettingsResponseMapInput `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication pulumi.StringPtrInput `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfoResponseInput `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfoResponseInput `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling MongoDbThrottlingSettingsResponsePtrInput `pulumi:"throttling"`
}

func (MongoDbMigrationSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettingsResponse)(nil)).Elem()
}

func (i MongoDbMigrationSettingsResponseArgs) ToMongoDbMigrationSettingsResponseOutput() MongoDbMigrationSettingsResponseOutput {
	return i.ToMongoDbMigrationSettingsResponseOutputWithContext(context.Background())
}

func (i MongoDbMigrationSettingsResponseArgs) ToMongoDbMigrationSettingsResponseOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsResponseOutput)
}

func (i MongoDbMigrationSettingsResponseArgs) ToMongoDbMigrationSettingsResponsePtrOutput() MongoDbMigrationSettingsResponsePtrOutput {
	return i.ToMongoDbMigrationSettingsResponsePtrOutputWithContext(context.Background())
}

func (i MongoDbMigrationSettingsResponseArgs) ToMongoDbMigrationSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsResponseOutput).ToMongoDbMigrationSettingsResponsePtrOutputWithContext(ctx)
}

// MongoDbMigrationSettingsResponsePtrInput is an input type that accepts MongoDbMigrationSettingsResponseArgs, MongoDbMigrationSettingsResponsePtr and MongoDbMigrationSettingsResponsePtrOutput values.
// You can construct a concrete instance of `MongoDbMigrationSettingsResponsePtrInput` via:
//
//          MongoDbMigrationSettingsResponseArgs{...}
//
//  or:
//
//          nil
type MongoDbMigrationSettingsResponsePtrInput interface {
	pulumi.Input

	ToMongoDbMigrationSettingsResponsePtrOutput() MongoDbMigrationSettingsResponsePtrOutput
	ToMongoDbMigrationSettingsResponsePtrOutputWithContext(context.Context) MongoDbMigrationSettingsResponsePtrOutput
}

type mongoDbMigrationSettingsResponsePtrType MongoDbMigrationSettingsResponseArgs

func MongoDbMigrationSettingsResponsePtr(v *MongoDbMigrationSettingsResponseArgs) MongoDbMigrationSettingsResponsePtrInput {
	return (*mongoDbMigrationSettingsResponsePtrType)(v)
}

func (*mongoDbMigrationSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettingsResponse)(nil)).Elem()
}

func (i *mongoDbMigrationSettingsResponsePtrType) ToMongoDbMigrationSettingsResponsePtrOutput() MongoDbMigrationSettingsResponsePtrOutput {
	return i.ToMongoDbMigrationSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *mongoDbMigrationSettingsResponsePtrType) ToMongoDbMigrationSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsResponsePtrOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettingsResponse)(nil)).Elem()
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponseOutput() MongoDbMigrationSettingsResponseOutput {
	return o
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponseOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponseOutput {
	return o
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponsePtrOutput() MongoDbMigrationSettingsResponsePtrOutput {
	return o.ToMongoDbMigrationSettingsResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponsePtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *MongoDbMigrationSettingsResponse {
		return &v
	}).(MongoDbMigrationSettingsResponsePtrOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsResponseOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *int { return v.BoostRUs }).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsResponseOutput) Databases() MongoDbDatabaseSettingsResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) map[string]MongoDbDatabaseSettingsResponse {
		return v.Databases
	}).(MongoDbDatabaseSettingsResponseMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsResponseOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *string { return v.Replication }).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsResponseOutput) Source() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) MongoDbConnectionInfoResponse { return v.Source }).(MongoDbConnectionInfoResponseOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsResponseOutput) Target() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) MongoDbConnectionInfoResponse { return v.Target }).(MongoDbConnectionInfoResponseOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsResponseOutput) Throttling() MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *MongoDbThrottlingSettingsResponse { return v.Throttling }).(MongoDbThrottlingSettingsResponsePtrOutput)
}

type MongoDbMigrationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettingsResponse)(nil)).Elem()
}

func (o MongoDbMigrationSettingsResponsePtrOutput) ToMongoDbMigrationSettingsResponsePtrOutput() MongoDbMigrationSettingsResponsePtrOutput {
	return o
}

func (o MongoDbMigrationSettingsResponsePtrOutput) ToMongoDbMigrationSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponsePtrOutput {
	return o
}

func (o MongoDbMigrationSettingsResponsePtrOutput) Elem() MongoDbMigrationSettingsResponseOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) MongoDbMigrationSettingsResponse { return *v }).(MongoDbMigrationSettingsResponseOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsResponsePtrOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.BoostRUs
	}).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsResponsePtrOutput) Databases() MongoDbDatabaseSettingsResponseMapOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) map[string]MongoDbDatabaseSettingsResponse {
		if v == nil {
			return nil
		}
		return v.Databases
	}).(MongoDbDatabaseSettingsResponseMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsResponsePtrOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsResponsePtrOutput) Source() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(MongoDbConnectionInfoResponsePtrOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsResponsePtrOutput) Target() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(MongoDbConnectionInfoResponsePtrOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsResponsePtrOutput) Throttling() MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbThrottlingSettingsResponse {
		if v == nil {
			return nil
		}
		return v.Throttling
	}).(MongoDbThrottlingSettingsResponsePtrOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyField struct {
	// The name of the field
	Name string `pulumi:"name"`
	// The field ordering
	Order string `pulumi:"order"`
}

// MongoDbShardKeyFieldInput is an input type that accepts MongoDbShardKeyFieldArgs and MongoDbShardKeyFieldOutput values.
// You can construct a concrete instance of `MongoDbShardKeyFieldInput` via:
//
//          MongoDbShardKeyFieldArgs{...}
type MongoDbShardKeyFieldInput interface {
	pulumi.Input

	ToMongoDbShardKeyFieldOutput() MongoDbShardKeyFieldOutput
	ToMongoDbShardKeyFieldOutputWithContext(context.Context) MongoDbShardKeyFieldOutput
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldArgs struct {
	// The name of the field
	Name pulumi.StringInput `pulumi:"name"`
	// The field ordering
	Order pulumi.StringInput `pulumi:"order"`
}

func (MongoDbShardKeyFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyField)(nil)).Elem()
}

func (i MongoDbShardKeyFieldArgs) ToMongoDbShardKeyFieldOutput() MongoDbShardKeyFieldOutput {
	return i.ToMongoDbShardKeyFieldOutputWithContext(context.Background())
}

func (i MongoDbShardKeyFieldArgs) ToMongoDbShardKeyFieldOutputWithContext(ctx context.Context) MongoDbShardKeyFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyFieldOutput)
}

// MongoDbShardKeyFieldArrayInput is an input type that accepts MongoDbShardKeyFieldArray and MongoDbShardKeyFieldArrayOutput values.
// You can construct a concrete instance of `MongoDbShardKeyFieldArrayInput` via:
//
//          MongoDbShardKeyFieldArray{ MongoDbShardKeyFieldArgs{...} }
type MongoDbShardKeyFieldArrayInput interface {
	pulumi.Input

	ToMongoDbShardKeyFieldArrayOutput() MongoDbShardKeyFieldArrayOutput
	ToMongoDbShardKeyFieldArrayOutputWithContext(context.Context) MongoDbShardKeyFieldArrayOutput
}

type MongoDbShardKeyFieldArray []MongoDbShardKeyFieldInput

func (MongoDbShardKeyFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyField)(nil)).Elem()
}

func (i MongoDbShardKeyFieldArray) ToMongoDbShardKeyFieldArrayOutput() MongoDbShardKeyFieldArrayOutput {
	return i.ToMongoDbShardKeyFieldArrayOutputWithContext(context.Background())
}

func (i MongoDbShardKeyFieldArray) ToMongoDbShardKeyFieldArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyFieldArrayOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyField)(nil)).Elem()
}

func (o MongoDbShardKeyFieldOutput) ToMongoDbShardKeyFieldOutput() MongoDbShardKeyFieldOutput {
	return o
}

func (o MongoDbShardKeyFieldOutput) ToMongoDbShardKeyFieldOutputWithContext(ctx context.Context) MongoDbShardKeyFieldOutput {
	return o
}

// The name of the field
func (o MongoDbShardKeyFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyField) string { return v.Name }).(pulumi.StringOutput)
}

// The field ordering
func (o MongoDbShardKeyFieldOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyField) string { return v.Order }).(pulumi.StringOutput)
}

type MongoDbShardKeyFieldArrayOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyField)(nil)).Elem()
}

func (o MongoDbShardKeyFieldArrayOutput) ToMongoDbShardKeyFieldArrayOutput() MongoDbShardKeyFieldArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldArrayOutput) ToMongoDbShardKeyFieldArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldArrayOutput) Index(i pulumi.IntInput) MongoDbShardKeyFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbShardKeyField {
		return vs[0].([]MongoDbShardKeyField)[vs[1].(int)]
	}).(MongoDbShardKeyFieldOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldResponse struct {
	// The name of the field
	Name string `pulumi:"name"`
	// The field ordering
	Order string `pulumi:"order"`
}

// MongoDbShardKeyFieldResponseInput is an input type that accepts MongoDbShardKeyFieldResponseArgs and MongoDbShardKeyFieldResponseOutput values.
// You can construct a concrete instance of `MongoDbShardKeyFieldResponseInput` via:
//
//          MongoDbShardKeyFieldResponseArgs{...}
type MongoDbShardKeyFieldResponseInput interface {
	pulumi.Input

	ToMongoDbShardKeyFieldResponseOutput() MongoDbShardKeyFieldResponseOutput
	ToMongoDbShardKeyFieldResponseOutputWithContext(context.Context) MongoDbShardKeyFieldResponseOutput
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldResponseArgs struct {
	// The name of the field
	Name pulumi.StringInput `pulumi:"name"`
	// The field ordering
	Order pulumi.StringInput `pulumi:"order"`
}

func (MongoDbShardKeyFieldResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyFieldResponse)(nil)).Elem()
}

func (i MongoDbShardKeyFieldResponseArgs) ToMongoDbShardKeyFieldResponseOutput() MongoDbShardKeyFieldResponseOutput {
	return i.ToMongoDbShardKeyFieldResponseOutputWithContext(context.Background())
}

func (i MongoDbShardKeyFieldResponseArgs) ToMongoDbShardKeyFieldResponseOutputWithContext(ctx context.Context) MongoDbShardKeyFieldResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyFieldResponseOutput)
}

// MongoDbShardKeyFieldResponseArrayInput is an input type that accepts MongoDbShardKeyFieldResponseArray and MongoDbShardKeyFieldResponseArrayOutput values.
// You can construct a concrete instance of `MongoDbShardKeyFieldResponseArrayInput` via:
//
//          MongoDbShardKeyFieldResponseArray{ MongoDbShardKeyFieldResponseArgs{...} }
type MongoDbShardKeyFieldResponseArrayInput interface {
	pulumi.Input

	ToMongoDbShardKeyFieldResponseArrayOutput() MongoDbShardKeyFieldResponseArrayOutput
	ToMongoDbShardKeyFieldResponseArrayOutputWithContext(context.Context) MongoDbShardKeyFieldResponseArrayOutput
}

type MongoDbShardKeyFieldResponseArray []MongoDbShardKeyFieldResponseInput

func (MongoDbShardKeyFieldResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyFieldResponse)(nil)).Elem()
}

func (i MongoDbShardKeyFieldResponseArray) ToMongoDbShardKeyFieldResponseArrayOutput() MongoDbShardKeyFieldResponseArrayOutput {
	return i.ToMongoDbShardKeyFieldResponseArrayOutputWithContext(context.Background())
}

func (i MongoDbShardKeyFieldResponseArray) ToMongoDbShardKeyFieldResponseArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyFieldResponse)(nil)).Elem()
}

func (o MongoDbShardKeyFieldResponseOutput) ToMongoDbShardKeyFieldResponseOutput() MongoDbShardKeyFieldResponseOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseOutput) ToMongoDbShardKeyFieldResponseOutputWithContext(ctx context.Context) MongoDbShardKeyFieldResponseOutput {
	return o
}

// The name of the field
func (o MongoDbShardKeyFieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyFieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The field ordering
func (o MongoDbShardKeyFieldResponseOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyFieldResponse) string { return v.Order }).(pulumi.StringOutput)
}

type MongoDbShardKeyFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyFieldResponse)(nil)).Elem()
}

func (o MongoDbShardKeyFieldResponseArrayOutput) ToMongoDbShardKeyFieldResponseArrayOutput() MongoDbShardKeyFieldResponseArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseArrayOutput) ToMongoDbShardKeyFieldResponseArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldResponseArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseArrayOutput) Index(i pulumi.IntInput) MongoDbShardKeyFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbShardKeyFieldResponse {
		return vs[0].([]MongoDbShardKeyFieldResponse)[vs[1].(int)]
	}).(MongoDbShardKeyFieldResponseOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeyInfoResponse struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyFieldResponse `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// MongoDbShardKeyInfoResponseInput is an input type that accepts MongoDbShardKeyInfoResponseArgs and MongoDbShardKeyInfoResponseOutput values.
// You can construct a concrete instance of `MongoDbShardKeyInfoResponseInput` via:
//
//          MongoDbShardKeyInfoResponseArgs{...}
type MongoDbShardKeyInfoResponseInput interface {
	pulumi.Input

	ToMongoDbShardKeyInfoResponseOutput() MongoDbShardKeyInfoResponseOutput
	ToMongoDbShardKeyInfoResponseOutputWithContext(context.Context) MongoDbShardKeyInfoResponseOutput
}

// Describes a MongoDB shard key
type MongoDbShardKeyInfoResponseArgs struct {
	// The fields within the shard key
	Fields MongoDbShardKeyFieldResponseArrayInput `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique pulumi.BoolInput `pulumi:"isUnique"`
}

func (MongoDbShardKeyInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyInfoResponse)(nil)).Elem()
}

func (i MongoDbShardKeyInfoResponseArgs) ToMongoDbShardKeyInfoResponseOutput() MongoDbShardKeyInfoResponseOutput {
	return i.ToMongoDbShardKeyInfoResponseOutputWithContext(context.Background())
}

func (i MongoDbShardKeyInfoResponseArgs) ToMongoDbShardKeyInfoResponseOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyInfoResponseOutput)
}

func (i MongoDbShardKeyInfoResponseArgs) ToMongoDbShardKeyInfoResponsePtrOutput() MongoDbShardKeyInfoResponsePtrOutput {
	return i.ToMongoDbShardKeyInfoResponsePtrOutputWithContext(context.Background())
}

func (i MongoDbShardKeyInfoResponseArgs) ToMongoDbShardKeyInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyInfoResponseOutput).ToMongoDbShardKeyInfoResponsePtrOutputWithContext(ctx)
}

// MongoDbShardKeyInfoResponsePtrInput is an input type that accepts MongoDbShardKeyInfoResponseArgs, MongoDbShardKeyInfoResponsePtr and MongoDbShardKeyInfoResponsePtrOutput values.
// You can construct a concrete instance of `MongoDbShardKeyInfoResponsePtrInput` via:
//
//          MongoDbShardKeyInfoResponseArgs{...}
//
//  or:
//
//          nil
type MongoDbShardKeyInfoResponsePtrInput interface {
	pulumi.Input

	ToMongoDbShardKeyInfoResponsePtrOutput() MongoDbShardKeyInfoResponsePtrOutput
	ToMongoDbShardKeyInfoResponsePtrOutputWithContext(context.Context) MongoDbShardKeyInfoResponsePtrOutput
}

type mongoDbShardKeyInfoResponsePtrType MongoDbShardKeyInfoResponseArgs

func MongoDbShardKeyInfoResponsePtr(v *MongoDbShardKeyInfoResponseArgs) MongoDbShardKeyInfoResponsePtrInput {
	return (*mongoDbShardKeyInfoResponsePtrType)(v)
}

func (*mongoDbShardKeyInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeyInfoResponse)(nil)).Elem()
}

func (i *mongoDbShardKeyInfoResponsePtrType) ToMongoDbShardKeyInfoResponsePtrOutput() MongoDbShardKeyInfoResponsePtrOutput {
	return i.ToMongoDbShardKeyInfoResponsePtrOutputWithContext(context.Background())
}

func (i *mongoDbShardKeyInfoResponsePtrType) ToMongoDbShardKeyInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyInfoResponsePtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeyInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyInfoResponse)(nil)).Elem()
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponseOutput() MongoDbShardKeyInfoResponseOutput {
	return o
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponseOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponseOutput {
	return o
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponsePtrOutput() MongoDbShardKeyInfoResponsePtrOutput {
	return o.ToMongoDbShardKeyInfoResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponsePtrOutput {
	return o.ApplyT(func(v MongoDbShardKeyInfoResponse) *MongoDbShardKeyInfoResponse {
		return &v
	}).(MongoDbShardKeyInfoResponsePtrOutput)
}

// The fields within the shard key
func (o MongoDbShardKeyInfoResponseOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v MongoDbShardKeyInfoResponse) []MongoDbShardKeyFieldResponse { return v.Fields }).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeyInfoResponseOutput) IsUnique() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbShardKeyInfoResponse) bool { return v.IsUnique }).(pulumi.BoolOutput)
}

type MongoDbShardKeyInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeyInfoResponse)(nil)).Elem()
}

func (o MongoDbShardKeyInfoResponsePtrOutput) ToMongoDbShardKeyInfoResponsePtrOutput() MongoDbShardKeyInfoResponsePtrOutput {
	return o
}

func (o MongoDbShardKeyInfoResponsePtrOutput) ToMongoDbShardKeyInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponsePtrOutput {
	return o
}

func (o MongoDbShardKeyInfoResponsePtrOutput) Elem() MongoDbShardKeyInfoResponseOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) MongoDbShardKeyInfoResponse { return *v }).(MongoDbShardKeyInfoResponseOutput)
}

// The fields within the shard key
func (o MongoDbShardKeyInfoResponsePtrOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) []MongoDbShardKeyFieldResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeyInfoResponsePtrOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsUnique
	}).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySetting struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyField `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// MongoDbShardKeySettingInput is an input type that accepts MongoDbShardKeySettingArgs and MongoDbShardKeySettingOutput values.
// You can construct a concrete instance of `MongoDbShardKeySettingInput` via:
//
//          MongoDbShardKeySettingArgs{...}
type MongoDbShardKeySettingInput interface {
	pulumi.Input

	ToMongoDbShardKeySettingOutput() MongoDbShardKeySettingOutput
	ToMongoDbShardKeySettingOutputWithContext(context.Context) MongoDbShardKeySettingOutput
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingArgs struct {
	// The fields within the shard key
	Fields MongoDbShardKeyFieldArrayInput `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique pulumi.BoolInput `pulumi:"isUnique"`
}

func (MongoDbShardKeySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySetting)(nil)).Elem()
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingOutput() MongoDbShardKeySettingOutput {
	return i.ToMongoDbShardKeySettingOutputWithContext(context.Background())
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingOutputWithContext(ctx context.Context) MongoDbShardKeySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingOutput)
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return i.ToMongoDbShardKeySettingPtrOutputWithContext(context.Background())
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingOutput).ToMongoDbShardKeySettingPtrOutputWithContext(ctx)
}

// MongoDbShardKeySettingPtrInput is an input type that accepts MongoDbShardKeySettingArgs, MongoDbShardKeySettingPtr and MongoDbShardKeySettingPtrOutput values.
// You can construct a concrete instance of `MongoDbShardKeySettingPtrInput` via:
//
//          MongoDbShardKeySettingArgs{...}
//
//  or:
//
//          nil
type MongoDbShardKeySettingPtrInput interface {
	pulumi.Input

	ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput
	ToMongoDbShardKeySettingPtrOutputWithContext(context.Context) MongoDbShardKeySettingPtrOutput
}

type mongoDbShardKeySettingPtrType MongoDbShardKeySettingArgs

func MongoDbShardKeySettingPtr(v *MongoDbShardKeySettingArgs) MongoDbShardKeySettingPtrInput {
	return (*mongoDbShardKeySettingPtrType)(v)
}

func (*mongoDbShardKeySettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySetting)(nil)).Elem()
}

func (i *mongoDbShardKeySettingPtrType) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return i.ToMongoDbShardKeySettingPtrOutputWithContext(context.Background())
}

func (i *mongoDbShardKeySettingPtrType) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingPtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySetting)(nil)).Elem()
}

func (o MongoDbShardKeySettingOutput) ToMongoDbShardKeySettingOutput() MongoDbShardKeySettingOutput {
	return o
}

func (o MongoDbShardKeySettingOutput) ToMongoDbShardKeySettingOutputWithContext(ctx context.Context) MongoDbShardKeySettingOutput {
	return o
}

func (o MongoDbShardKeySettingOutput) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return o.ToMongoDbShardKeySettingPtrOutputWithContext(context.Background())
}

func (o MongoDbShardKeySettingOutput) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return o.ApplyT(func(v MongoDbShardKeySetting) *MongoDbShardKeySetting {
		return &v
	}).(MongoDbShardKeySettingPtrOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingOutput) Fields() MongoDbShardKeyFieldArrayOutput {
	return o.ApplyT(func(v MongoDbShardKeySetting) []MongoDbShardKeyField { return v.Fields }).(MongoDbShardKeyFieldArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingOutput) IsUnique() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbShardKeySetting) bool { return v.IsUnique }).(pulumi.BoolOutput)
}

type MongoDbShardKeySettingPtrOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySetting)(nil)).Elem()
}

func (o MongoDbShardKeySettingPtrOutput) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return o
}

func (o MongoDbShardKeySettingPtrOutput) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return o
}

func (o MongoDbShardKeySettingPtrOutput) Elem() MongoDbShardKeySettingOutput {
	return o.ApplyT(func(v *MongoDbShardKeySetting) MongoDbShardKeySetting { return *v }).(MongoDbShardKeySettingOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingPtrOutput) Fields() MongoDbShardKeyFieldArrayOutput {
	return o.ApplyT(func(v *MongoDbShardKeySetting) []MongoDbShardKeyField {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(MongoDbShardKeyFieldArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingPtrOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbShardKeySetting) *bool {
		if v == nil {
			return nil
		}
		return &v.IsUnique
	}).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingResponse struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyFieldResponse `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// MongoDbShardKeySettingResponseInput is an input type that accepts MongoDbShardKeySettingResponseArgs and MongoDbShardKeySettingResponseOutput values.
// You can construct a concrete instance of `MongoDbShardKeySettingResponseInput` via:
//
//          MongoDbShardKeySettingResponseArgs{...}
type MongoDbShardKeySettingResponseInput interface {
	pulumi.Input

	ToMongoDbShardKeySettingResponseOutput() MongoDbShardKeySettingResponseOutput
	ToMongoDbShardKeySettingResponseOutputWithContext(context.Context) MongoDbShardKeySettingResponseOutput
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingResponseArgs struct {
	// The fields within the shard key
	Fields MongoDbShardKeyFieldResponseArrayInput `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique pulumi.BoolInput `pulumi:"isUnique"`
}

func (MongoDbShardKeySettingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySettingResponse)(nil)).Elem()
}

func (i MongoDbShardKeySettingResponseArgs) ToMongoDbShardKeySettingResponseOutput() MongoDbShardKeySettingResponseOutput {
	return i.ToMongoDbShardKeySettingResponseOutputWithContext(context.Background())
}

func (i MongoDbShardKeySettingResponseArgs) ToMongoDbShardKeySettingResponseOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingResponseOutput)
}

func (i MongoDbShardKeySettingResponseArgs) ToMongoDbShardKeySettingResponsePtrOutput() MongoDbShardKeySettingResponsePtrOutput {
	return i.ToMongoDbShardKeySettingResponsePtrOutputWithContext(context.Background())
}

func (i MongoDbShardKeySettingResponseArgs) ToMongoDbShardKeySettingResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingResponseOutput).ToMongoDbShardKeySettingResponsePtrOutputWithContext(ctx)
}

// MongoDbShardKeySettingResponsePtrInput is an input type that accepts MongoDbShardKeySettingResponseArgs, MongoDbShardKeySettingResponsePtr and MongoDbShardKeySettingResponsePtrOutput values.
// You can construct a concrete instance of `MongoDbShardKeySettingResponsePtrInput` via:
//
//          MongoDbShardKeySettingResponseArgs{...}
//
//  or:
//
//          nil
type MongoDbShardKeySettingResponsePtrInput interface {
	pulumi.Input

	ToMongoDbShardKeySettingResponsePtrOutput() MongoDbShardKeySettingResponsePtrOutput
	ToMongoDbShardKeySettingResponsePtrOutputWithContext(context.Context) MongoDbShardKeySettingResponsePtrOutput
}

type mongoDbShardKeySettingResponsePtrType MongoDbShardKeySettingResponseArgs

func MongoDbShardKeySettingResponsePtr(v *MongoDbShardKeySettingResponseArgs) MongoDbShardKeySettingResponsePtrInput {
	return (*mongoDbShardKeySettingResponsePtrType)(v)
}

func (*mongoDbShardKeySettingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySettingResponse)(nil)).Elem()
}

func (i *mongoDbShardKeySettingResponsePtrType) ToMongoDbShardKeySettingResponsePtrOutput() MongoDbShardKeySettingResponsePtrOutput {
	return i.ToMongoDbShardKeySettingResponsePtrOutputWithContext(context.Background())
}

func (i *mongoDbShardKeySettingResponsePtrType) ToMongoDbShardKeySettingResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingResponsePtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySettingResponse)(nil)).Elem()
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponseOutput() MongoDbShardKeySettingResponseOutput {
	return o
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponseOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponseOutput {
	return o
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponsePtrOutput() MongoDbShardKeySettingResponsePtrOutput {
	return o.ToMongoDbShardKeySettingResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponsePtrOutput {
	return o.ApplyT(func(v MongoDbShardKeySettingResponse) *MongoDbShardKeySettingResponse {
		return &v
	}).(MongoDbShardKeySettingResponsePtrOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingResponseOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v MongoDbShardKeySettingResponse) []MongoDbShardKeyFieldResponse { return v.Fields }).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingResponseOutput) IsUnique() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbShardKeySettingResponse) bool { return v.IsUnique }).(pulumi.BoolOutput)
}

type MongoDbShardKeySettingResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySettingResponse)(nil)).Elem()
}

func (o MongoDbShardKeySettingResponsePtrOutput) ToMongoDbShardKeySettingResponsePtrOutput() MongoDbShardKeySettingResponsePtrOutput {
	return o
}

func (o MongoDbShardKeySettingResponsePtrOutput) ToMongoDbShardKeySettingResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponsePtrOutput {
	return o
}

func (o MongoDbShardKeySettingResponsePtrOutput) Elem() MongoDbShardKeySettingResponseOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) MongoDbShardKeySettingResponse { return *v }).(MongoDbShardKeySettingResponseOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingResponsePtrOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) []MongoDbShardKeyFieldResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingResponsePtrOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsUnique
	}).(pulumi.BoolPtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettings struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism *int `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu *int `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb *int `pulumi:"minFreeMemoryMb"`
}

// MongoDbThrottlingSettingsInput is an input type that accepts MongoDbThrottlingSettingsArgs and MongoDbThrottlingSettingsOutput values.
// You can construct a concrete instance of `MongoDbThrottlingSettingsInput` via:
//
//          MongoDbThrottlingSettingsArgs{...}
type MongoDbThrottlingSettingsInput interface {
	pulumi.Input

	ToMongoDbThrottlingSettingsOutput() MongoDbThrottlingSettingsOutput
	ToMongoDbThrottlingSettingsOutputWithContext(context.Context) MongoDbThrottlingSettingsOutput
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsArgs struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism pulumi.IntPtrInput `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu pulumi.IntPtrInput `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb pulumi.IntPtrInput `pulumi:"minFreeMemoryMb"`
}

func (MongoDbThrottlingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettings)(nil)).Elem()
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsOutput() MongoDbThrottlingSettingsOutput {
	return i.ToMongoDbThrottlingSettingsOutputWithContext(context.Background())
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsOutput)
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return i.ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Background())
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsOutput).ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx)
}

// MongoDbThrottlingSettingsPtrInput is an input type that accepts MongoDbThrottlingSettingsArgs, MongoDbThrottlingSettingsPtr and MongoDbThrottlingSettingsPtrOutput values.
// You can construct a concrete instance of `MongoDbThrottlingSettingsPtrInput` via:
//
//          MongoDbThrottlingSettingsArgs{...}
//
//  or:
//
//          nil
type MongoDbThrottlingSettingsPtrInput interface {
	pulumi.Input

	ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput
	ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Context) MongoDbThrottlingSettingsPtrOutput
}

type mongoDbThrottlingSettingsPtrType MongoDbThrottlingSettingsArgs

func MongoDbThrottlingSettingsPtr(v *MongoDbThrottlingSettingsArgs) MongoDbThrottlingSettingsPtrInput {
	return (*mongoDbThrottlingSettingsPtrType)(v)
}

func (*mongoDbThrottlingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettings)(nil)).Elem()
}

func (i *mongoDbThrottlingSettingsPtrType) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return i.ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Background())
}

func (i *mongoDbThrottlingSettingsPtrType) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsPtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettings)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsOutput) ToMongoDbThrottlingSettingsOutput() MongoDbThrottlingSettingsOutput {
	return o
}

func (o MongoDbThrottlingSettingsOutput) ToMongoDbThrottlingSettingsOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsOutput {
	return o
}

func (o MongoDbThrottlingSettingsOutput) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return o.ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Background())
}

func (o MongoDbThrottlingSettingsOutput) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettings) *MongoDbThrottlingSettings {
		return &v
	}).(MongoDbThrottlingSettingsPtrOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettings) *int { return v.MaxParallelism }).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettings) *int { return v.MinFreeCpu }).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettings) *int { return v.MinFreeMemoryMb }).(pulumi.IntPtrOutput)
}

type MongoDbThrottlingSettingsPtrOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettings)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsPtrOutput) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsPtrOutput) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsPtrOutput) Elem() MongoDbThrottlingSettingsOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettings) MongoDbThrottlingSettings { return *v }).(MongoDbThrottlingSettingsOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsPtrOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelism
	}).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsPtrOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeCpu
	}).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsPtrOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeMemoryMb
	}).(pulumi.IntPtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsResponse struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism *int `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu *int `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb *int `pulumi:"minFreeMemoryMb"`
}

// MongoDbThrottlingSettingsResponseInput is an input type that accepts MongoDbThrottlingSettingsResponseArgs and MongoDbThrottlingSettingsResponseOutput values.
// You can construct a concrete instance of `MongoDbThrottlingSettingsResponseInput` via:
//
//          MongoDbThrottlingSettingsResponseArgs{...}
type MongoDbThrottlingSettingsResponseInput interface {
	pulumi.Input

	ToMongoDbThrottlingSettingsResponseOutput() MongoDbThrottlingSettingsResponseOutput
	ToMongoDbThrottlingSettingsResponseOutputWithContext(context.Context) MongoDbThrottlingSettingsResponseOutput
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsResponseArgs struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism pulumi.IntPtrInput `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu pulumi.IntPtrInput `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb pulumi.IntPtrInput `pulumi:"minFreeMemoryMb"`
}

func (MongoDbThrottlingSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettingsResponse)(nil)).Elem()
}

func (i MongoDbThrottlingSettingsResponseArgs) ToMongoDbThrottlingSettingsResponseOutput() MongoDbThrottlingSettingsResponseOutput {
	return i.ToMongoDbThrottlingSettingsResponseOutputWithContext(context.Background())
}

func (i MongoDbThrottlingSettingsResponseArgs) ToMongoDbThrottlingSettingsResponseOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsResponseOutput)
}

func (i MongoDbThrottlingSettingsResponseArgs) ToMongoDbThrottlingSettingsResponsePtrOutput() MongoDbThrottlingSettingsResponsePtrOutput {
	return i.ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i MongoDbThrottlingSettingsResponseArgs) ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsResponseOutput).ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(ctx)
}

// MongoDbThrottlingSettingsResponsePtrInput is an input type that accepts MongoDbThrottlingSettingsResponseArgs, MongoDbThrottlingSettingsResponsePtr and MongoDbThrottlingSettingsResponsePtrOutput values.
// You can construct a concrete instance of `MongoDbThrottlingSettingsResponsePtrInput` via:
//
//          MongoDbThrottlingSettingsResponseArgs{...}
//
//  or:
//
//          nil
type MongoDbThrottlingSettingsResponsePtrInput interface {
	pulumi.Input

	ToMongoDbThrottlingSettingsResponsePtrOutput() MongoDbThrottlingSettingsResponsePtrOutput
	ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(context.Context) MongoDbThrottlingSettingsResponsePtrOutput
}

type mongoDbThrottlingSettingsResponsePtrType MongoDbThrottlingSettingsResponseArgs

func MongoDbThrottlingSettingsResponsePtr(v *MongoDbThrottlingSettingsResponseArgs) MongoDbThrottlingSettingsResponsePtrInput {
	return (*mongoDbThrottlingSettingsResponsePtrType)(v)
}

func (*mongoDbThrottlingSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettingsResponse)(nil)).Elem()
}

func (i *mongoDbThrottlingSettingsResponsePtrType) ToMongoDbThrottlingSettingsResponsePtrOutput() MongoDbThrottlingSettingsResponsePtrOutput {
	return i.ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *mongoDbThrottlingSettingsResponsePtrType) ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsResponsePtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettingsResponse)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponseOutput() MongoDbThrottlingSettingsResponseOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponseOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponseOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponsePtrOutput() MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *MongoDbThrottlingSettingsResponse {
		return &v
	}).(MongoDbThrottlingSettingsResponsePtrOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsResponseOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MaxParallelism }).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsResponseOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MinFreeCpu }).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsResponseOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MinFreeMemoryMb }).(pulumi.IntPtrOutput)
}

type MongoDbThrottlingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettingsResponse)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) ToMongoDbThrottlingSettingsResponsePtrOutput() MongoDbThrottlingSettingsResponsePtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponsePtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) Elem() MongoDbThrottlingSettingsResponseOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) MongoDbThrottlingSettingsResponse { return *v }).(MongoDbThrottlingSettingsResponseOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsResponsePtrOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelism
	}).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsResponsePtrOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeCpu
	}).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsResponsePtrOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeMemoryMb
	}).(pulumi.IntPtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfo struct {
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MySqlConnectionInfoInput is an input type that accepts MySqlConnectionInfoArgs and MySqlConnectionInfoOutput values.
// You can construct a concrete instance of `MySqlConnectionInfoInput` via:
//
//          MySqlConnectionInfoArgs{...}
type MySqlConnectionInfoInput interface {
	pulumi.Input

	ToMySqlConnectionInfoOutput() MySqlConnectionInfoOutput
	ToMySqlConnectionInfoOutputWithContext(context.Context) MySqlConnectionInfoOutput
}

// Information for connecting to MySQL server
type MySqlConnectionInfoArgs struct {
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for Server
	Port pulumi.IntInput `pulumi:"port"`
	// Name of the server
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MySqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfo)(nil)).Elem()
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoOutput() MySqlConnectionInfoOutput {
	return i.ToMySqlConnectionInfoOutputWithContext(context.Background())
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoOutputWithContext(ctx context.Context) MySqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoOutput)
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return i.ToMySqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoOutput).ToMySqlConnectionInfoPtrOutputWithContext(ctx)
}

// MySqlConnectionInfoPtrInput is an input type that accepts MySqlConnectionInfoArgs, MySqlConnectionInfoPtr and MySqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MySqlConnectionInfoPtrInput` via:
//
//          MySqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type MySqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput
	ToMySqlConnectionInfoPtrOutputWithContext(context.Context) MySqlConnectionInfoPtrOutput
}

type mySqlConnectionInfoPtrType MySqlConnectionInfoArgs

func MySqlConnectionInfoPtr(v *MySqlConnectionInfoArgs) MySqlConnectionInfoPtrInput {
	return (*mySqlConnectionInfoPtrType)(v)
}

func (*mySqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfo)(nil)).Elem()
}

func (i *mySqlConnectionInfoPtrType) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return i.ToMySqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *mySqlConnectionInfoPtrType) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoPtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfo)(nil)).Elem()
}

func (o MySqlConnectionInfoOutput) ToMySqlConnectionInfoOutput() MySqlConnectionInfoOutput {
	return o
}

func (o MySqlConnectionInfoOutput) ToMySqlConnectionInfoOutputWithContext(ctx context.Context) MySqlConnectionInfoOutput {
	return o
}

func (o MySqlConnectionInfoOutput) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return o.ToMySqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o MySqlConnectionInfoOutput) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *MySqlConnectionInfo {
		return &v
	}).(MySqlConnectionInfoPtrOutput)
}

// Password credential.
func (o MySqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the server
func (o MySqlConnectionInfoOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) string { return v.ServerName }).(pulumi.StringOutput)
}

// Type of connection info
func (o MySqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MySqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MySqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfo)(nil)).Elem()
}

func (o MySqlConnectionInfoPtrOutput) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return o
}

func (o MySqlConnectionInfoPtrOutput) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return o
}

func (o MySqlConnectionInfoPtrOutput) Elem() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) MySqlConnectionInfo { return *v }).(MySqlConnectionInfoOutput)
}

// Password credential.
func (o MySqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the server
func (o MySqlConnectionInfoPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MySqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MySqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfoResponse struct {
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MySqlConnectionInfoResponseInput is an input type that accepts MySqlConnectionInfoResponseArgs and MySqlConnectionInfoResponseOutput values.
// You can construct a concrete instance of `MySqlConnectionInfoResponseInput` via:
//
//          MySqlConnectionInfoResponseArgs{...}
type MySqlConnectionInfoResponseInput interface {
	pulumi.Input

	ToMySqlConnectionInfoResponseOutput() MySqlConnectionInfoResponseOutput
	ToMySqlConnectionInfoResponseOutputWithContext(context.Context) MySqlConnectionInfoResponseOutput
}

// Information for connecting to MySQL server
type MySqlConnectionInfoResponseArgs struct {
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for Server
	Port pulumi.IntInput `pulumi:"port"`
	// Name of the server
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MySqlConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfoResponse)(nil)).Elem()
}

func (i MySqlConnectionInfoResponseArgs) ToMySqlConnectionInfoResponseOutput() MySqlConnectionInfoResponseOutput {
	return i.ToMySqlConnectionInfoResponseOutputWithContext(context.Background())
}

func (i MySqlConnectionInfoResponseArgs) ToMySqlConnectionInfoResponseOutputWithContext(ctx context.Context) MySqlConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoResponseOutput)
}

func (i MySqlConnectionInfoResponseArgs) ToMySqlConnectionInfoResponsePtrOutput() MySqlConnectionInfoResponsePtrOutput {
	return i.ToMySqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i MySqlConnectionInfoResponseArgs) ToMySqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MySqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoResponseOutput).ToMySqlConnectionInfoResponsePtrOutputWithContext(ctx)
}

// MySqlConnectionInfoResponsePtrInput is an input type that accepts MySqlConnectionInfoResponseArgs, MySqlConnectionInfoResponsePtr and MySqlConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `MySqlConnectionInfoResponsePtrInput` via:
//
//          MySqlConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type MySqlConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToMySqlConnectionInfoResponsePtrOutput() MySqlConnectionInfoResponsePtrOutput
	ToMySqlConnectionInfoResponsePtrOutputWithContext(context.Context) MySqlConnectionInfoResponsePtrOutput
}

type mySqlConnectionInfoResponsePtrType MySqlConnectionInfoResponseArgs

func MySqlConnectionInfoResponsePtr(v *MySqlConnectionInfoResponseArgs) MySqlConnectionInfoResponsePtrInput {
	return (*mySqlConnectionInfoResponsePtrType)(v)
}

func (*mySqlConnectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfoResponse)(nil)).Elem()
}

func (i *mySqlConnectionInfoResponsePtrType) ToMySqlConnectionInfoResponsePtrOutput() MySqlConnectionInfoResponsePtrOutput {
	return i.ToMySqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *mySqlConnectionInfoResponsePtrType) ToMySqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MySqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfoResponse)(nil)).Elem()
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponseOutput() MySqlConnectionInfoResponseOutput {
	return o
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponseOutputWithContext(ctx context.Context) MySqlConnectionInfoResponseOutput {
	return o
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponsePtrOutput() MySqlConnectionInfoResponsePtrOutput {
	return o.ToMySqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *MySqlConnectionInfoResponse {
		return &v
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Password credential.
func (o MySqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the server
func (o MySqlConnectionInfoResponseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) string { return v.ServerName }).(pulumi.StringOutput)
}

// Type of connection info
func (o MySqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MySqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MySqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfoResponse)(nil)).Elem()
}

func (o MySqlConnectionInfoResponsePtrOutput) ToMySqlConnectionInfoResponsePtrOutput() MySqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MySqlConnectionInfoResponsePtrOutput) ToMySqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MySqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MySqlConnectionInfoResponsePtrOutput) Elem() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) MySqlConnectionInfoResponse { return *v }).(MySqlConnectionInfoResponseOutput)
}

// Password credential.
func (o MySqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the server
func (o MySqlConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MySqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MySqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Error information in OData format.
type ODataErrorResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code *string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorResponse `pulumi:"details"`
	// The human-readable description of the error
	Message *string `pulumi:"message"`
}

// ODataErrorResponseInput is an input type that accepts ODataErrorResponseArgs and ODataErrorResponseOutput values.
// You can construct a concrete instance of `ODataErrorResponseInput` via:
//
//          ODataErrorResponseArgs{...}
type ODataErrorResponseInput interface {
	pulumi.Input

	ToODataErrorResponseOutput() ODataErrorResponseOutput
	ToODataErrorResponseOutputWithContext(context.Context) ODataErrorResponseOutput
}

// Error information in OData format.
type ODataErrorResponseArgs struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Inner errors that caused this error
	Details ODataErrorResponseArrayInput `pulumi:"details"`
	// The human-readable description of the error
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (ODataErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (i ODataErrorResponseArgs) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return i.ToODataErrorResponseOutputWithContext(context.Background())
}

func (i ODataErrorResponseArgs) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorResponseOutput)
}

// ODataErrorResponseArrayInput is an input type that accepts ODataErrorResponseArray and ODataErrorResponseArrayOutput values.
// You can construct a concrete instance of `ODataErrorResponseArrayInput` via:
//
//          ODataErrorResponseArray{ ODataErrorResponseArgs{...} }
type ODataErrorResponseArrayInput interface {
	pulumi.Input

	ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput
	ToODataErrorResponseArrayOutputWithContext(context.Context) ODataErrorResponseArrayOutput
}

type ODataErrorResponseArray []ODataErrorResponseInput

func (ODataErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (i ODataErrorResponseArray) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return i.ToODataErrorResponseArrayOutputWithContext(context.Background())
}

func (i ODataErrorResponseArray) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorResponseArrayOutput)
}

// Error information in OData format.
type ODataErrorResponseOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return o
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return o
}

// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
func (o ODataErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Inner errors that caused this error
func (o ODataErrorResponseOutput) Details() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ODataErrorResponse) []ODataErrorResponse { return v.Details }).(ODataErrorResponseArrayOutput)
}

// The human-readable description of the error
func (o ODataErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ODataErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) Index(i pulumi.IntInput) ODataErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ODataErrorResponse {
		return vs[0].([]ODataErrorResponse)[vs[1].(int)]
	}).(ODataErrorResponseOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfo struct {
	// EZConnect or TNSName connection string.
	DataSource string `pulumi:"dataSource"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// OracleConnectionInfoInput is an input type that accepts OracleConnectionInfoArgs and OracleConnectionInfoOutput values.
// You can construct a concrete instance of `OracleConnectionInfoInput` via:
//
//          OracleConnectionInfoArgs{...}
type OracleConnectionInfoInput interface {
	pulumi.Input

	ToOracleConnectionInfoOutput() OracleConnectionInfoOutput
	ToOracleConnectionInfoOutputWithContext(context.Context) OracleConnectionInfoOutput
}

// Information for connecting to Oracle server
type OracleConnectionInfoArgs struct {
	// EZConnect or TNSName connection string.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (OracleConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfo)(nil)).Elem()
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoOutput() OracleConnectionInfoOutput {
	return i.ToOracleConnectionInfoOutputWithContext(context.Background())
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoOutputWithContext(ctx context.Context) OracleConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoOutput)
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return i.ToOracleConnectionInfoPtrOutputWithContext(context.Background())
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoOutput).ToOracleConnectionInfoPtrOutputWithContext(ctx)
}

// OracleConnectionInfoPtrInput is an input type that accepts OracleConnectionInfoArgs, OracleConnectionInfoPtr and OracleConnectionInfoPtrOutput values.
// You can construct a concrete instance of `OracleConnectionInfoPtrInput` via:
//
//          OracleConnectionInfoArgs{...}
//
//  or:
//
//          nil
type OracleConnectionInfoPtrInput interface {
	pulumi.Input

	ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput
	ToOracleConnectionInfoPtrOutputWithContext(context.Context) OracleConnectionInfoPtrOutput
}

type oracleConnectionInfoPtrType OracleConnectionInfoArgs

func OracleConnectionInfoPtr(v *OracleConnectionInfoArgs) OracleConnectionInfoPtrInput {
	return (*oracleConnectionInfoPtrType)(v)
}

func (*oracleConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfo)(nil)).Elem()
}

func (i *oracleConnectionInfoPtrType) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return i.ToOracleConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *oracleConnectionInfoPtrType) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoPtrOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfoOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfo)(nil)).Elem()
}

func (o OracleConnectionInfoOutput) ToOracleConnectionInfoOutput() OracleConnectionInfoOutput {
	return o
}

func (o OracleConnectionInfoOutput) ToOracleConnectionInfoOutputWithContext(ctx context.Context) OracleConnectionInfoOutput {
	return o
}

func (o OracleConnectionInfoOutput) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return o.ToOracleConnectionInfoPtrOutputWithContext(context.Background())
}

func (o OracleConnectionInfoOutput) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *OracleConnectionInfo {
		return &v
	}).(OracleConnectionInfoPtrOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfo) string { return v.DataSource }).(pulumi.StringOutput)
}

// Password credential.
func (o OracleConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o OracleConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o OracleConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type OracleConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfo)(nil)).Elem()
}

func (o OracleConnectionInfoPtrOutput) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return o
}

func (o OracleConnectionInfoPtrOutput) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return o
}

func (o OracleConnectionInfoPtrOutput) Elem() OracleConnectionInfoOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) OracleConnectionInfo { return *v }).(OracleConnectionInfoOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o OracleConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o OracleConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o OracleConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfoResponse struct {
	// EZConnect or TNSName connection string.
	DataSource string `pulumi:"dataSource"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// OracleConnectionInfoResponseInput is an input type that accepts OracleConnectionInfoResponseArgs and OracleConnectionInfoResponseOutput values.
// You can construct a concrete instance of `OracleConnectionInfoResponseInput` via:
//
//          OracleConnectionInfoResponseArgs{...}
type OracleConnectionInfoResponseInput interface {
	pulumi.Input

	ToOracleConnectionInfoResponseOutput() OracleConnectionInfoResponseOutput
	ToOracleConnectionInfoResponseOutputWithContext(context.Context) OracleConnectionInfoResponseOutput
}

// Information for connecting to Oracle server
type OracleConnectionInfoResponseArgs struct {
	// EZConnect or TNSName connection string.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (OracleConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfoResponse)(nil)).Elem()
}

func (i OracleConnectionInfoResponseArgs) ToOracleConnectionInfoResponseOutput() OracleConnectionInfoResponseOutput {
	return i.ToOracleConnectionInfoResponseOutputWithContext(context.Background())
}

func (i OracleConnectionInfoResponseArgs) ToOracleConnectionInfoResponseOutputWithContext(ctx context.Context) OracleConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoResponseOutput)
}

func (i OracleConnectionInfoResponseArgs) ToOracleConnectionInfoResponsePtrOutput() OracleConnectionInfoResponsePtrOutput {
	return i.ToOracleConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i OracleConnectionInfoResponseArgs) ToOracleConnectionInfoResponsePtrOutputWithContext(ctx context.Context) OracleConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoResponseOutput).ToOracleConnectionInfoResponsePtrOutputWithContext(ctx)
}

// OracleConnectionInfoResponsePtrInput is an input type that accepts OracleConnectionInfoResponseArgs, OracleConnectionInfoResponsePtr and OracleConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `OracleConnectionInfoResponsePtrInput` via:
//
//          OracleConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type OracleConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToOracleConnectionInfoResponsePtrOutput() OracleConnectionInfoResponsePtrOutput
	ToOracleConnectionInfoResponsePtrOutputWithContext(context.Context) OracleConnectionInfoResponsePtrOutput
}

type oracleConnectionInfoResponsePtrType OracleConnectionInfoResponseArgs

func OracleConnectionInfoResponsePtr(v *OracleConnectionInfoResponseArgs) OracleConnectionInfoResponsePtrInput {
	return (*oracleConnectionInfoResponsePtrType)(v)
}

func (*oracleConnectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfoResponse)(nil)).Elem()
}

func (i *oracleConnectionInfoResponsePtrType) ToOracleConnectionInfoResponsePtrOutput() OracleConnectionInfoResponsePtrOutput {
	return i.ToOracleConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *oracleConnectionInfoResponsePtrType) ToOracleConnectionInfoResponsePtrOutputWithContext(ctx context.Context) OracleConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoResponsePtrOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfoResponse)(nil)).Elem()
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponseOutput() OracleConnectionInfoResponseOutput {
	return o
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponseOutputWithContext(ctx context.Context) OracleConnectionInfoResponseOutput {
	return o
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponsePtrOutput() OracleConnectionInfoResponsePtrOutput {
	return o.ToOracleConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponsePtrOutputWithContext(ctx context.Context) OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *OracleConnectionInfoResponse {
		return &v
	}).(OracleConnectionInfoResponsePtrOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Password credential.
func (o OracleConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o OracleConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o OracleConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type OracleConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfoResponse)(nil)).Elem()
}

func (o OracleConnectionInfoResponsePtrOutput) ToOracleConnectionInfoResponsePtrOutput() OracleConnectionInfoResponsePtrOutput {
	return o
}

func (o OracleConnectionInfoResponsePtrOutput) ToOracleConnectionInfoResponsePtrOutputWithContext(ctx context.Context) OracleConnectionInfoResponsePtrOutput {
	return o
}

func (o OracleConnectionInfoResponsePtrOutput) Elem() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) OracleConnectionInfoResponse { return *v }).(OracleConnectionInfoResponseOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o OracleConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o OracleConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o OracleConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information of orphaned users on the SQL server database.
type OrphanedUserInfoResponse struct {
	// Parent database of the user
	DatabaseName *string `pulumi:"databaseName"`
	// Name of the orphaned user
	Name *string `pulumi:"name"`
}

// OrphanedUserInfoResponseInput is an input type that accepts OrphanedUserInfoResponseArgs and OrphanedUserInfoResponseOutput values.
// You can construct a concrete instance of `OrphanedUserInfoResponseInput` via:
//
//          OrphanedUserInfoResponseArgs{...}
type OrphanedUserInfoResponseInput interface {
	pulumi.Input

	ToOrphanedUserInfoResponseOutput() OrphanedUserInfoResponseOutput
	ToOrphanedUserInfoResponseOutputWithContext(context.Context) OrphanedUserInfoResponseOutput
}

// Information of orphaned users on the SQL server database.
type OrphanedUserInfoResponseArgs struct {
	// Parent database of the user
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Name of the orphaned user
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OrphanedUserInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrphanedUserInfoResponse)(nil)).Elem()
}

func (i OrphanedUserInfoResponseArgs) ToOrphanedUserInfoResponseOutput() OrphanedUserInfoResponseOutput {
	return i.ToOrphanedUserInfoResponseOutputWithContext(context.Background())
}

func (i OrphanedUserInfoResponseArgs) ToOrphanedUserInfoResponseOutputWithContext(ctx context.Context) OrphanedUserInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrphanedUserInfoResponseOutput)
}

// OrphanedUserInfoResponseArrayInput is an input type that accepts OrphanedUserInfoResponseArray and OrphanedUserInfoResponseArrayOutput values.
// You can construct a concrete instance of `OrphanedUserInfoResponseArrayInput` via:
//
//          OrphanedUserInfoResponseArray{ OrphanedUserInfoResponseArgs{...} }
type OrphanedUserInfoResponseArrayInput interface {
	pulumi.Input

	ToOrphanedUserInfoResponseArrayOutput() OrphanedUserInfoResponseArrayOutput
	ToOrphanedUserInfoResponseArrayOutputWithContext(context.Context) OrphanedUserInfoResponseArrayOutput
}

type OrphanedUserInfoResponseArray []OrphanedUserInfoResponseInput

func (OrphanedUserInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrphanedUserInfoResponse)(nil)).Elem()
}

func (i OrphanedUserInfoResponseArray) ToOrphanedUserInfoResponseArrayOutput() OrphanedUserInfoResponseArrayOutput {
	return i.ToOrphanedUserInfoResponseArrayOutputWithContext(context.Background())
}

func (i OrphanedUserInfoResponseArray) ToOrphanedUserInfoResponseArrayOutputWithContext(ctx context.Context) OrphanedUserInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrphanedUserInfoResponseArrayOutput)
}

// Information of orphaned users on the SQL server database.
type OrphanedUserInfoResponseOutput struct{ *pulumi.OutputState }

func (OrphanedUserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrphanedUserInfoResponse)(nil)).Elem()
}

func (o OrphanedUserInfoResponseOutput) ToOrphanedUserInfoResponseOutput() OrphanedUserInfoResponseOutput {
	return o
}

func (o OrphanedUserInfoResponseOutput) ToOrphanedUserInfoResponseOutputWithContext(ctx context.Context) OrphanedUserInfoResponseOutput {
	return o
}

// Parent database of the user
func (o OrphanedUserInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrphanedUserInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Name of the orphaned user
func (o OrphanedUserInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrphanedUserInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OrphanedUserInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (OrphanedUserInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrphanedUserInfoResponse)(nil)).Elem()
}

func (o OrphanedUserInfoResponseArrayOutput) ToOrphanedUserInfoResponseArrayOutput() OrphanedUserInfoResponseArrayOutput {
	return o
}

func (o OrphanedUserInfoResponseArrayOutput) ToOrphanedUserInfoResponseArrayOutputWithContext(ctx context.Context) OrphanedUserInfoResponseArrayOutput {
	return o
}

func (o OrphanedUserInfoResponseArrayOutput) Index(i pulumi.IntInput) OrphanedUserInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrphanedUserInfoResponse {
		return vs[0].([]OrphanedUserInfoResponse)[vs[1].(int)]
	}).(OrphanedUserInfoResponseOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfo struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// PostgreSqlConnectionInfoInput is an input type that accepts PostgreSqlConnectionInfoArgs and PostgreSqlConnectionInfoOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionInfoInput` via:
//
//          PostgreSqlConnectionInfoArgs{...}
type PostgreSqlConnectionInfoInput interface {
	pulumi.Input

	ToPostgreSqlConnectionInfoOutput() PostgreSqlConnectionInfoOutput
	ToPostgreSqlConnectionInfoOutputWithContext(context.Context) PostgreSqlConnectionInfoOutput
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoArgs struct {
	// Name of the database
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for Server
	Port pulumi.IntInput `pulumi:"port"`
	// Name of the server
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (PostgreSqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfo)(nil)).Elem()
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoOutput() PostgreSqlConnectionInfoOutput {
	return i.ToPostgreSqlConnectionInfoOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoOutput)
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return i.ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoOutput).ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx)
}

// PostgreSqlConnectionInfoPtrInput is an input type that accepts PostgreSqlConnectionInfoArgs, PostgreSqlConnectionInfoPtr and PostgreSqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionInfoPtrInput` via:
//
//          PostgreSqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type PostgreSqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput
	ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Context) PostgreSqlConnectionInfoPtrOutput
}

type postgreSqlConnectionInfoPtrType PostgreSqlConnectionInfoArgs

func PostgreSqlConnectionInfoPtr(v *PostgreSqlConnectionInfoArgs) PostgreSqlConnectionInfoPtrInput {
	return (*postgreSqlConnectionInfoPtrType)(v)
}

func (*postgreSqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfo)(nil)).Elem()
}

func (i *postgreSqlConnectionInfoPtrType) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return i.ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *postgreSqlConnectionInfoPtrType) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoPtrOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfo)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoOutput) ToPostgreSqlConnectionInfoOutput() PostgreSqlConnectionInfoOutput {
	return o
}

func (o PostgreSqlConnectionInfoOutput) ToPostgreSqlConnectionInfoOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoOutput {
	return o
}

func (o PostgreSqlConnectionInfoOutput) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return o.ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o PostgreSqlConnectionInfoOutput) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *PostgreSqlConnectionInfo {
		return &v
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) string { return v.ServerName }).(pulumi.StringOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o PostgreSqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o PostgreSqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type PostgreSqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfo)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoPtrOutput) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoPtrOutput) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoPtrOutput) Elem() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) PostgreSqlConnectionInfo { return *v }).(PostgreSqlConnectionInfoOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoPtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoPtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o PostgreSqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o PostgreSqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// PostgreSqlConnectionInfoResponseInput is an input type that accepts PostgreSqlConnectionInfoResponseArgs and PostgreSqlConnectionInfoResponseOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionInfoResponseInput` via:
//
//          PostgreSqlConnectionInfoResponseArgs{...}
type PostgreSqlConnectionInfoResponseInput interface {
	pulumi.Input

	ToPostgreSqlConnectionInfoResponseOutput() PostgreSqlConnectionInfoResponseOutput
	ToPostgreSqlConnectionInfoResponseOutputWithContext(context.Context) PostgreSqlConnectionInfoResponseOutput
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoResponseArgs struct {
	// Name of the database
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for Server
	Port pulumi.IntInput `pulumi:"port"`
	// Name of the server
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (PostgreSqlConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfoResponse)(nil)).Elem()
}

func (i PostgreSqlConnectionInfoResponseArgs) ToPostgreSqlConnectionInfoResponseOutput() PostgreSqlConnectionInfoResponseOutput {
	return i.ToPostgreSqlConnectionInfoResponseOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionInfoResponseArgs) ToPostgreSqlConnectionInfoResponseOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoResponseOutput)
}

func (i PostgreSqlConnectionInfoResponseArgs) ToPostgreSqlConnectionInfoResponsePtrOutput() PostgreSqlConnectionInfoResponsePtrOutput {
	return i.ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionInfoResponseArgs) ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoResponseOutput).ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(ctx)
}

// PostgreSqlConnectionInfoResponsePtrInput is an input type that accepts PostgreSqlConnectionInfoResponseArgs, PostgreSqlConnectionInfoResponsePtr and PostgreSqlConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionInfoResponsePtrInput` via:
//
//          PostgreSqlConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type PostgreSqlConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToPostgreSqlConnectionInfoResponsePtrOutput() PostgreSqlConnectionInfoResponsePtrOutput
	ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(context.Context) PostgreSqlConnectionInfoResponsePtrOutput
}

type postgreSqlConnectionInfoResponsePtrType PostgreSqlConnectionInfoResponseArgs

func PostgreSqlConnectionInfoResponsePtr(v *PostgreSqlConnectionInfoResponseArgs) PostgreSqlConnectionInfoResponsePtrInput {
	return (*postgreSqlConnectionInfoResponsePtrType)(v)
}

func (*postgreSqlConnectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfoResponse)(nil)).Elem()
}

func (i *postgreSqlConnectionInfoResponsePtrType) ToPostgreSqlConnectionInfoResponsePtrOutput() PostgreSqlConnectionInfoResponsePtrOutput {
	return i.ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *postgreSqlConnectionInfoResponsePtrType) ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfoResponse)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponseOutput() PostgreSqlConnectionInfoResponseOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponseOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponseOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponsePtrOutput() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *PostgreSqlConnectionInfoResponse {
		return &v
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoResponseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) string { return v.ServerName }).(pulumi.StringOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o PostgreSqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o PostgreSqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type PostgreSqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfoResponse)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) ToPostgreSqlConnectionInfoResponsePtrOutput() PostgreSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) Elem() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) PostgreSqlConnectionInfoResponse { return *v }).(PostgreSqlConnectionInfoResponseOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o PostgreSqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o PostgreSqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Base class for file properties.
type ProjectFileProperties struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension *string `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath *string `pulumi:"filePath"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType *string `pulumi:"mediaType"`
}

// ProjectFilePropertiesInput is an input type that accepts ProjectFilePropertiesArgs and ProjectFilePropertiesOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesInput` via:
//
//          ProjectFilePropertiesArgs{...}
type ProjectFilePropertiesInput interface {
	pulumi.Input

	ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput
	ToProjectFilePropertiesOutputWithContext(context.Context) ProjectFilePropertiesOutput
}

// Base class for file properties.
type ProjectFilePropertiesArgs struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension pulumi.StringPtrInput `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
}

func (ProjectFilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileProperties)(nil)).Elem()
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput {
	return i.ToProjectFilePropertiesOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesOutputWithContext(ctx context.Context) ProjectFilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesOutput)
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return i.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesOutput).ToProjectFilePropertiesPtrOutputWithContext(ctx)
}

// ProjectFilePropertiesPtrInput is an input type that accepts ProjectFilePropertiesArgs, ProjectFilePropertiesPtr and ProjectFilePropertiesPtrOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesPtrInput` via:
//
//          ProjectFilePropertiesArgs{...}
//
//  or:
//
//          nil
type ProjectFilePropertiesPtrInput interface {
	pulumi.Input

	ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput
	ToProjectFilePropertiesPtrOutputWithContext(context.Context) ProjectFilePropertiesPtrOutput
}

type projectFilePropertiesPtrType ProjectFilePropertiesArgs

func ProjectFilePropertiesPtr(v *ProjectFilePropertiesArgs) ProjectFilePropertiesPtrInput {
	return (*projectFilePropertiesPtrType)(v)
}

func (*projectFilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFileProperties)(nil)).Elem()
}

func (i *projectFilePropertiesPtrType) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return i.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (i *projectFilePropertiesPtrType) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesPtrOutput)
}

// Base class for file properties.
type ProjectFilePropertiesOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileProperties)(nil)).Elem()
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput {
	return o
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesOutputWithContext(ctx context.Context) ProjectFilePropertiesOutput {
	return o
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return o.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *ProjectFileProperties {
		return &v
	}).(ProjectFilePropertiesPtrOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

type ProjectFilePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFileProperties)(nil)).Elem()
}

func (o ProjectFilePropertiesPtrOutput) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return o
}

func (o ProjectFilePropertiesPtrOutput) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return o
}

func (o ProjectFilePropertiesPtrOutput) Elem() ProjectFilePropertiesOutput {
	return o.ApplyT(func(v *ProjectFileProperties) ProjectFileProperties { return *v }).(ProjectFilePropertiesOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesPtrOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.Extension
	}).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesPtrOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.FilePath
	}).(pulumi.StringPtrOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Base class for file properties.
type ProjectFilePropertiesResponse struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension *string `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath *string `pulumi:"filePath"`
	// Modification DateTime.
	LastModified string `pulumi:"lastModified"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType *string `pulumi:"mediaType"`
	// File size.
	Size int `pulumi:"size"`
}

// ProjectFilePropertiesResponseInput is an input type that accepts ProjectFilePropertiesResponseArgs and ProjectFilePropertiesResponseOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesResponseInput` via:
//
//          ProjectFilePropertiesResponseArgs{...}
type ProjectFilePropertiesResponseInput interface {
	pulumi.Input

	ToProjectFilePropertiesResponseOutput() ProjectFilePropertiesResponseOutput
	ToProjectFilePropertiesResponseOutputWithContext(context.Context) ProjectFilePropertiesResponseOutput
}

// Base class for file properties.
type ProjectFilePropertiesResponseArgs struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension pulumi.StringPtrInput `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// Modification DateTime.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
	// File size.
	Size pulumi.IntInput `pulumi:"size"`
}

func (ProjectFilePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFilePropertiesResponse)(nil)).Elem()
}

func (i ProjectFilePropertiesResponseArgs) ToProjectFilePropertiesResponseOutput() ProjectFilePropertiesResponseOutput {
	return i.ToProjectFilePropertiesResponseOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesResponseArgs) ToProjectFilePropertiesResponseOutputWithContext(ctx context.Context) ProjectFilePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesResponseOutput)
}

func (i ProjectFilePropertiesResponseArgs) ToProjectFilePropertiesResponsePtrOutput() ProjectFilePropertiesResponsePtrOutput {
	return i.ToProjectFilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesResponseArgs) ToProjectFilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectFilePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesResponseOutput).ToProjectFilePropertiesResponsePtrOutputWithContext(ctx)
}

// ProjectFilePropertiesResponsePtrInput is an input type that accepts ProjectFilePropertiesResponseArgs, ProjectFilePropertiesResponsePtr and ProjectFilePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesResponsePtrInput` via:
//
//          ProjectFilePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ProjectFilePropertiesResponsePtrInput interface {
	pulumi.Input

	ToProjectFilePropertiesResponsePtrOutput() ProjectFilePropertiesResponsePtrOutput
	ToProjectFilePropertiesResponsePtrOutputWithContext(context.Context) ProjectFilePropertiesResponsePtrOutput
}

type projectFilePropertiesResponsePtrType ProjectFilePropertiesResponseArgs

func ProjectFilePropertiesResponsePtr(v *ProjectFilePropertiesResponseArgs) ProjectFilePropertiesResponsePtrInput {
	return (*projectFilePropertiesResponsePtrType)(v)
}

func (*projectFilePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFilePropertiesResponse)(nil)).Elem()
}

func (i *projectFilePropertiesResponsePtrType) ToProjectFilePropertiesResponsePtrOutput() ProjectFilePropertiesResponsePtrOutput {
	return i.ToProjectFilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *projectFilePropertiesResponsePtrType) ToProjectFilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectFilePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesResponsePtrOutput)
}

// Base class for file properties.
type ProjectFilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFilePropertiesResponse)(nil)).Elem()
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponseOutput() ProjectFilePropertiesResponseOutput {
	return o
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponseOutputWithContext(ctx context.Context) ProjectFilePropertiesResponseOutput {
	return o
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponsePtrOutput() ProjectFilePropertiesResponsePtrOutput {
	return o.ToProjectFilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectFilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *ProjectFilePropertiesResponse {
		return &v
	}).(ProjectFilePropertiesResponsePtrOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesResponseOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Modification DateTime.
func (o ProjectFilePropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesResponseOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// File size.
func (o ProjectFilePropertiesResponseOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) int { return v.Size }).(pulumi.IntOutput)
}

type ProjectFilePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFilePropertiesResponse)(nil)).Elem()
}

func (o ProjectFilePropertiesResponsePtrOutput) ToProjectFilePropertiesResponsePtrOutput() ProjectFilePropertiesResponsePtrOutput {
	return o
}

func (o ProjectFilePropertiesResponsePtrOutput) ToProjectFilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectFilePropertiesResponsePtrOutput {
	return o
}

func (o ProjectFilePropertiesResponsePtrOutput) Elem() ProjectFilePropertiesResponseOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) ProjectFilePropertiesResponse { return *v }).(ProjectFilePropertiesResponseOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesResponsePtrOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Extension
	}).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesResponsePtrOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.FilePath
	}).(pulumi.StringPtrOutput)
}

// Modification DateTime.
func (o ProjectFilePropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesResponsePtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// File size.
func (o ProjectFilePropertiesResponsePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionResponse struct {
	// Actionable steps for this exception
	ActionableMessage *string `pulumi:"actionableMessage"`
	// The path to the file where exception occurred
	FilePath *string `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult *int `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber *string `pulumi:"lineNumber"`
	// Error message
	Message *string `pulumi:"message"`
	// Stack trace
	StackTrace *string `pulumi:"stackTrace"`
}

// ReportableExceptionResponseInput is an input type that accepts ReportableExceptionResponseArgs and ReportableExceptionResponseOutput values.
// You can construct a concrete instance of `ReportableExceptionResponseInput` via:
//
//          ReportableExceptionResponseArgs{...}
type ReportableExceptionResponseInput interface {
	pulumi.Input

	ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput
	ToReportableExceptionResponseOutputWithContext(context.Context) ReportableExceptionResponseOutput
}

// Exception object for all custom exceptions
type ReportableExceptionResponseArgs struct {
	// Actionable steps for this exception
	ActionableMessage pulumi.StringPtrInput `pulumi:"actionableMessage"`
	// The path to the file where exception occurred
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult pulumi.IntPtrInput `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber pulumi.StringPtrInput `pulumi:"lineNumber"`
	// Error message
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Stack trace
	StackTrace pulumi.StringPtrInput `pulumi:"stackTrace"`
}

func (ReportableExceptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionResponse)(nil)).Elem()
}

func (i ReportableExceptionResponseArgs) ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput {
	return i.ToReportableExceptionResponseOutputWithContext(context.Background())
}

func (i ReportableExceptionResponseArgs) ToReportableExceptionResponseOutputWithContext(ctx context.Context) ReportableExceptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportableExceptionResponseOutput)
}

// ReportableExceptionResponseArrayInput is an input type that accepts ReportableExceptionResponseArray and ReportableExceptionResponseArrayOutput values.
// You can construct a concrete instance of `ReportableExceptionResponseArrayInput` via:
//
//          ReportableExceptionResponseArray{ ReportableExceptionResponseArgs{...} }
type ReportableExceptionResponseArrayInput interface {
	pulumi.Input

	ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput
	ToReportableExceptionResponseArrayOutputWithContext(context.Context) ReportableExceptionResponseArrayOutput
}

type ReportableExceptionResponseArray []ReportableExceptionResponseInput

func (ReportableExceptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionResponse)(nil)).Elem()
}

func (i ReportableExceptionResponseArray) ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput {
	return i.ToReportableExceptionResponseArrayOutputWithContext(context.Background())
}

func (i ReportableExceptionResponseArray) ToReportableExceptionResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportableExceptionResponseArrayOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionResponseOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput {
	return o
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutputWithContext(ctx context.Context) ReportableExceptionResponseOutput {
	return o
}

// Actionable steps for this exception
func (o ReportableExceptionResponseOutput) ActionableMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.ActionableMessage }).(pulumi.StringPtrOutput)
}

// The path to the file where exception occurred
func (o ReportableExceptionResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Coded numerical value that is assigned to a specific exception
func (o ReportableExceptionResponseOutput) HResult() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *int { return v.HResult }).(pulumi.IntPtrOutput)
}

// The line number where exception occurred
func (o ReportableExceptionResponseOutput) LineNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.LineNumber }).(pulumi.StringPtrOutput)
}

// Error message
func (o ReportableExceptionResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Stack trace
func (o ReportableExceptionResponseOutput) StackTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.StackTrace }).(pulumi.StringPtrOutput)
}

type ReportableExceptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) Index(i pulumi.IntInput) ReportableExceptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportableExceptionResponse {
		return vs[0].([]ReportableExceptionResponse)[vs[1].(int)]
	}).(ReportableExceptionResponseOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInput struct {
	// Name of certificate to be exported.
	CertificateName string `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password string `pulumi:"password"`
}

// SelectedCertificateInputInput is an input type that accepts SelectedCertificateInputArgs and SelectedCertificateInputOutput values.
// You can construct a concrete instance of `SelectedCertificateInputInput` via:
//
//          SelectedCertificateInputArgs{...}
type SelectedCertificateInputInput interface {
	pulumi.Input

	ToSelectedCertificateInputOutput() SelectedCertificateInputOutput
	ToSelectedCertificateInputOutputWithContext(context.Context) SelectedCertificateInputOutput
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputArgs struct {
	// Name of certificate to be exported.
	CertificateName pulumi.StringInput `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password pulumi.StringInput `pulumi:"password"`
}

func (SelectedCertificateInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInput)(nil)).Elem()
}

func (i SelectedCertificateInputArgs) ToSelectedCertificateInputOutput() SelectedCertificateInputOutput {
	return i.ToSelectedCertificateInputOutputWithContext(context.Background())
}

func (i SelectedCertificateInputArgs) ToSelectedCertificateInputOutputWithContext(ctx context.Context) SelectedCertificateInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedCertificateInputOutput)
}

// SelectedCertificateInputArrayInput is an input type that accepts SelectedCertificateInputArray and SelectedCertificateInputArrayOutput values.
// You can construct a concrete instance of `SelectedCertificateInputArrayInput` via:
//
//          SelectedCertificateInputArray{ SelectedCertificateInputArgs{...} }
type SelectedCertificateInputArrayInput interface {
	pulumi.Input

	ToSelectedCertificateInputArrayOutput() SelectedCertificateInputArrayOutput
	ToSelectedCertificateInputArrayOutputWithContext(context.Context) SelectedCertificateInputArrayOutput
}

type SelectedCertificateInputArray []SelectedCertificateInputInput

func (SelectedCertificateInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInput)(nil)).Elem()
}

func (i SelectedCertificateInputArray) ToSelectedCertificateInputArrayOutput() SelectedCertificateInputArrayOutput {
	return i.ToSelectedCertificateInputArrayOutputWithContext(context.Background())
}

func (i SelectedCertificateInputArray) ToSelectedCertificateInputArrayOutputWithContext(ctx context.Context) SelectedCertificateInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedCertificateInputArrayOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInput)(nil)).Elem()
}

func (o SelectedCertificateInputOutput) ToSelectedCertificateInputOutput() SelectedCertificateInputOutput {
	return o
}

func (o SelectedCertificateInputOutput) ToSelectedCertificateInputOutputWithContext(ctx context.Context) SelectedCertificateInputOutput {
	return o
}

// Name of certificate to be exported.
func (o SelectedCertificateInputOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInput) string { return v.CertificateName }).(pulumi.StringOutput)
}

// Password to use for encrypting the exported certificate.
func (o SelectedCertificateInputOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInput) string { return v.Password }).(pulumi.StringOutput)
}

type SelectedCertificateInputArrayOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInput)(nil)).Elem()
}

func (o SelectedCertificateInputArrayOutput) ToSelectedCertificateInputArrayOutput() SelectedCertificateInputArrayOutput {
	return o
}

func (o SelectedCertificateInputArrayOutput) ToSelectedCertificateInputArrayOutputWithContext(ctx context.Context) SelectedCertificateInputArrayOutput {
	return o
}

func (o SelectedCertificateInputArrayOutput) Index(i pulumi.IntInput) SelectedCertificateInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectedCertificateInput {
		return vs[0].([]SelectedCertificateInput)[vs[1].(int)]
	}).(SelectedCertificateInputOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputResponse struct {
	// Name of certificate to be exported.
	CertificateName string `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password string `pulumi:"password"`
}

// SelectedCertificateInputResponseInput is an input type that accepts SelectedCertificateInputResponseArgs and SelectedCertificateInputResponseOutput values.
// You can construct a concrete instance of `SelectedCertificateInputResponseInput` via:
//
//          SelectedCertificateInputResponseArgs{...}
type SelectedCertificateInputResponseInput interface {
	pulumi.Input

	ToSelectedCertificateInputResponseOutput() SelectedCertificateInputResponseOutput
	ToSelectedCertificateInputResponseOutputWithContext(context.Context) SelectedCertificateInputResponseOutput
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputResponseArgs struct {
	// Name of certificate to be exported.
	CertificateName pulumi.StringInput `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password pulumi.StringInput `pulumi:"password"`
}

func (SelectedCertificateInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInputResponse)(nil)).Elem()
}

func (i SelectedCertificateInputResponseArgs) ToSelectedCertificateInputResponseOutput() SelectedCertificateInputResponseOutput {
	return i.ToSelectedCertificateInputResponseOutputWithContext(context.Background())
}

func (i SelectedCertificateInputResponseArgs) ToSelectedCertificateInputResponseOutputWithContext(ctx context.Context) SelectedCertificateInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedCertificateInputResponseOutput)
}

// SelectedCertificateInputResponseArrayInput is an input type that accepts SelectedCertificateInputResponseArray and SelectedCertificateInputResponseArrayOutput values.
// You can construct a concrete instance of `SelectedCertificateInputResponseArrayInput` via:
//
//          SelectedCertificateInputResponseArray{ SelectedCertificateInputResponseArgs{...} }
type SelectedCertificateInputResponseArrayInput interface {
	pulumi.Input

	ToSelectedCertificateInputResponseArrayOutput() SelectedCertificateInputResponseArrayOutput
	ToSelectedCertificateInputResponseArrayOutputWithContext(context.Context) SelectedCertificateInputResponseArrayOutput
}

type SelectedCertificateInputResponseArray []SelectedCertificateInputResponseInput

func (SelectedCertificateInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInputResponse)(nil)).Elem()
}

func (i SelectedCertificateInputResponseArray) ToSelectedCertificateInputResponseArrayOutput() SelectedCertificateInputResponseArrayOutput {
	return i.ToSelectedCertificateInputResponseArrayOutputWithContext(context.Background())
}

func (i SelectedCertificateInputResponseArray) ToSelectedCertificateInputResponseArrayOutputWithContext(ctx context.Context) SelectedCertificateInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedCertificateInputResponseArrayOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputResponseOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInputResponse)(nil)).Elem()
}

func (o SelectedCertificateInputResponseOutput) ToSelectedCertificateInputResponseOutput() SelectedCertificateInputResponseOutput {
	return o
}

func (o SelectedCertificateInputResponseOutput) ToSelectedCertificateInputResponseOutputWithContext(ctx context.Context) SelectedCertificateInputResponseOutput {
	return o
}

// Name of certificate to be exported.
func (o SelectedCertificateInputResponseOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInputResponse) string { return v.CertificateName }).(pulumi.StringOutput)
}

// Password to use for encrypting the exported certificate.
func (o SelectedCertificateInputResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInputResponse) string { return v.Password }).(pulumi.StringOutput)
}

type SelectedCertificateInputResponseArrayOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInputResponse)(nil)).Elem()
}

func (o SelectedCertificateInputResponseArrayOutput) ToSelectedCertificateInputResponseArrayOutput() SelectedCertificateInputResponseArrayOutput {
	return o
}

func (o SelectedCertificateInputResponseArrayOutput) ToSelectedCertificateInputResponseArrayOutputWithContext(ctx context.Context) SelectedCertificateInputResponseArrayOutput {
	return o
}

func (o SelectedCertificateInputResponseArrayOutput) Index(i pulumi.IntInput) SelectedCertificateInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectedCertificateInputResponse {
		return vs[0].([]SelectedCertificateInputResponse)[vs[1].(int)]
	}).(SelectedCertificateInputResponseOutput)
}

// An Azure SKU instance
type ServiceSku struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInput is an input type that accepts ServiceSkuArgs and ServiceSkuOutput values.
// You can construct a concrete instance of `ServiceSkuInput` via:
//
//          ServiceSkuArgs{...}
type ServiceSkuInput interface {
	pulumi.Input

	ToServiceSkuOutput() ServiceSkuOutput
	ToServiceSkuOutputWithContext(context.Context) ServiceSkuOutput
}

// An Azure SKU instance
type ServiceSkuArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (i ServiceSkuArgs) ToServiceSkuOutput() ServiceSkuOutput {
	return i.ToServiceSkuOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput)
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput).ToServiceSkuPtrOutputWithContext(ctx)
}

// ServiceSkuPtrInput is an input type that accepts ServiceSkuArgs, ServiceSkuPtr and ServiceSkuPtrOutput values.
// You can construct a concrete instance of `ServiceSkuPtrInput` via:
//
//          ServiceSkuArgs{...}
//
//  or:
//
//          nil
type ServiceSkuPtrInput interface {
	pulumi.Input

	ToServiceSkuPtrOutput() ServiceSkuPtrOutput
	ToServiceSkuPtrOutputWithContext(context.Context) ServiceSkuPtrOutput
}

type serviceSkuPtrType ServiceSkuArgs

func ServiceSkuPtr(v *ServiceSkuArgs) ServiceSkuPtrInput {
	return (*serviceSkuPtrType)(v)
}

func (*serviceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuPtrOutput)
}

// An Azure SKU instance
type ServiceSkuOutput struct{ *pulumi.OutputState }

func (ServiceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (o ServiceSkuOutput) ToServiceSkuOutput() ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o.ApplyT(func(v ServiceSku) *ServiceSku {
		return &v
	}).(ServiceSkuPtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuPtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) Elem() ServiceSkuOutput {
	return o.ApplyT(func(v *ServiceSku) ServiceSku { return *v }).(ServiceSkuOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuResponseInput is an input type that accepts ServiceSkuResponseArgs and ServiceSkuResponseOutput values.
// You can construct a concrete instance of `ServiceSkuResponseInput` via:
//
//          ServiceSkuResponseArgs{...}
type ServiceSkuResponseInput interface {
	pulumi.Input

	ToServiceSkuResponseOutput() ServiceSkuResponseOutput
	ToServiceSkuResponseOutputWithContext(context.Context) ServiceSkuResponseOutput
}

// An Azure SKU instance
type ServiceSkuResponseArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return i.ToServiceSkuResponseOutputWithContext(context.Background())
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponseOutput)
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return i.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponseOutput).ToServiceSkuResponsePtrOutputWithContext(ctx)
}

// ServiceSkuResponsePtrInput is an input type that accepts ServiceSkuResponseArgs, ServiceSkuResponsePtr and ServiceSkuResponsePtrOutput values.
// You can construct a concrete instance of `ServiceSkuResponsePtrInput` via:
//
//          ServiceSkuResponseArgs{...}
//
//  or:
//
//          nil
type ServiceSkuResponsePtrInput interface {
	pulumi.Input

	ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput
	ToServiceSkuResponsePtrOutputWithContext(context.Context) ServiceSkuResponsePtrOutput
}

type serviceSkuResponsePtrType ServiceSkuResponseArgs

func ServiceSkuResponsePtr(v *ServiceSkuResponseArgs) ServiceSkuResponsePtrInput {
	return (*serviceSkuResponsePtrType)(v)
}

func (*serviceSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (i *serviceSkuResponsePtrType) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return i.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (i *serviceSkuResponsePtrType) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponsePtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *ServiceSkuResponse {
		return &v
	}).(ServiceSkuResponsePtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) Elem() ServiceSkuResponseOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) ServiceSkuResponse { return *v }).(ServiceSkuResponseOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Server platform type for connection
	Platform *string `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// SqlConnectionInfoInput is an input type that accepts SqlConnectionInfoArgs and SqlConnectionInfoOutput values.
// You can construct a concrete instance of `SqlConnectionInfoInput` via:
//
//          SqlConnectionInfoArgs{...}
type SqlConnectionInfoInput interface {
	pulumi.Input

	ToSqlConnectionInfoOutput() SqlConnectionInfoOutput
	ToSqlConnectionInfoOutputWithContext(context.Context) SqlConnectionInfoOutput
}

// Information for connecting to SQL database server
type SqlConnectionInfoArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Server platform type for connection
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfo)(nil)).Elem()
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutput() SqlConnectionInfoOutput {
	return i.ToSqlConnectionInfoOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutputWithContext(ctx context.Context) SqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput)
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput).ToSqlConnectionInfoPtrOutputWithContext(ctx)
}

// SqlConnectionInfoPtrInput is an input type that accepts SqlConnectionInfoArgs, SqlConnectionInfoPtr and SqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `SqlConnectionInfoPtrInput` via:
//
//          SqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type SqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput
	ToSqlConnectionInfoPtrOutputWithContext(context.Context) SqlConnectionInfoPtrOutput
}

type sqlConnectionInfoPtrType SqlConnectionInfoArgs

func SqlConnectionInfoPtr(v *SqlConnectionInfoArgs) SqlConnectionInfoPtrInput {
	return (*sqlConnectionInfoPtrType)(v)
}

func (*sqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfo)(nil)).Elem()
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfo)(nil)).Elem()
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoOutput() SqlConnectionInfoOutput {
	return o
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoOutputWithContext(ctx context.Context) SqlConnectionInfoOutput {
	return o
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return o.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *SqlConnectionInfo {
		return &v
	}).(SqlConnectionInfoPtrOutput)
}

// Additional connection settings
func (o SqlConnectionInfoOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfo) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o SqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfo)(nil)).Elem()
}

func (o SqlConnectionInfoPtrOutput) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return o
}

func (o SqlConnectionInfoPtrOutput) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return o
}

func (o SqlConnectionInfoPtrOutput) Elem() SqlConnectionInfoOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) SqlConnectionInfo { return *v }).(SqlConnectionInfoOutput)
}

// Additional connection settings
func (o SqlConnectionInfoPtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoPtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoPtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoPtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o SqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Server platform type for connection
	Platform *string `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// SqlConnectionInfoResponseInput is an input type that accepts SqlConnectionInfoResponseArgs and SqlConnectionInfoResponseOutput values.
// You can construct a concrete instance of `SqlConnectionInfoResponseInput` via:
//
//          SqlConnectionInfoResponseArgs{...}
type SqlConnectionInfoResponseInput interface {
	pulumi.Input

	ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput
	ToSqlConnectionInfoResponseOutputWithContext(context.Context) SqlConnectionInfoResponseOutput
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponseArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Server platform type for connection
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SqlConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoResponse)(nil)).Elem()
}

func (i SqlConnectionInfoResponseArgs) ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput {
	return i.ToSqlConnectionInfoResponseOutputWithContext(context.Background())
}

func (i SqlConnectionInfoResponseArgs) ToSqlConnectionInfoResponseOutputWithContext(ctx context.Context) SqlConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoResponseOutput)
}

func (i SqlConnectionInfoResponseArgs) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return i.ToSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i SqlConnectionInfoResponseArgs) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoResponseOutput).ToSqlConnectionInfoResponsePtrOutputWithContext(ctx)
}

// SqlConnectionInfoResponsePtrInput is an input type that accepts SqlConnectionInfoResponseArgs, SqlConnectionInfoResponsePtr and SqlConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `SqlConnectionInfoResponsePtrInput` via:
//
//          SqlConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type SqlConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput
	ToSqlConnectionInfoResponsePtrOutputWithContext(context.Context) SqlConnectionInfoResponsePtrOutput
}

type sqlConnectionInfoResponsePtrType SqlConnectionInfoResponseArgs

func SqlConnectionInfoResponsePtr(v *SqlConnectionInfoResponseArgs) SqlConnectionInfoResponsePtrInput {
	return (*sqlConnectionInfoResponsePtrType)(v)
}

func (*sqlConnectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoResponse)(nil)).Elem()
}

func (i *sqlConnectionInfoResponsePtrType) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return i.ToSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInfoResponsePtrType) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutputWithContext(ctx context.Context) SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o.ToSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *SqlConnectionInfoResponse {
		return &v
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoResponseOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o SqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) Elem() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) SqlConnectionInfoResponse { return *v }).(SqlConnectionInfoResponseOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoResponsePtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o SqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfo struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption *string `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption *string `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType *string `pulumi:"ssisStoreType"`
}

// SsisMigrationInfoInput is an input type that accepts SsisMigrationInfoArgs and SsisMigrationInfoOutput values.
// You can construct a concrete instance of `SsisMigrationInfoInput` via:
//
//          SsisMigrationInfoArgs{...}
type SsisMigrationInfoInput interface {
	pulumi.Input

	ToSsisMigrationInfoOutput() SsisMigrationInfoOutput
	ToSsisMigrationInfoOutputWithContext(context.Context) SsisMigrationInfoOutput
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoArgs struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption pulumi.StringPtrInput `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption pulumi.StringPtrInput `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType pulumi.StringPtrInput `pulumi:"ssisStoreType"`
}

func (SsisMigrationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfo)(nil)).Elem()
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoOutput() SsisMigrationInfoOutput {
	return i.ToSsisMigrationInfoOutputWithContext(context.Background())
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoOutputWithContext(ctx context.Context) SsisMigrationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoOutput)
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return i.ToSsisMigrationInfoPtrOutputWithContext(context.Background())
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoOutput).ToSsisMigrationInfoPtrOutputWithContext(ctx)
}

// SsisMigrationInfoPtrInput is an input type that accepts SsisMigrationInfoArgs, SsisMigrationInfoPtr and SsisMigrationInfoPtrOutput values.
// You can construct a concrete instance of `SsisMigrationInfoPtrInput` via:
//
//          SsisMigrationInfoArgs{...}
//
//  or:
//
//          nil
type SsisMigrationInfoPtrInput interface {
	pulumi.Input

	ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput
	ToSsisMigrationInfoPtrOutputWithContext(context.Context) SsisMigrationInfoPtrOutput
}

type ssisMigrationInfoPtrType SsisMigrationInfoArgs

func SsisMigrationInfoPtr(v *SsisMigrationInfoArgs) SsisMigrationInfoPtrInput {
	return (*ssisMigrationInfoPtrType)(v)
}

func (*ssisMigrationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfo)(nil)).Elem()
}

func (i *ssisMigrationInfoPtrType) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return i.ToSsisMigrationInfoPtrOutputWithContext(context.Background())
}

func (i *ssisMigrationInfoPtrType) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoPtrOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfo)(nil)).Elem()
}

func (o SsisMigrationInfoOutput) ToSsisMigrationInfoOutput() SsisMigrationInfoOutput {
	return o
}

func (o SsisMigrationInfoOutput) ToSsisMigrationInfoOutputWithContext(ctx context.Context) SsisMigrationInfoOutput {
	return o
}

func (o SsisMigrationInfoOutput) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return o.ToSsisMigrationInfoPtrOutputWithContext(context.Background())
}

func (o SsisMigrationInfoOutput) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfo) *SsisMigrationInfo {
		return &v
	}).(SsisMigrationInfoPtrOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfo) *string { return v.EnvironmentOverwriteOption }).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfo) *string { return v.ProjectOverwriteOption }).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS
func (o SsisMigrationInfoOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfo) *string { return v.SsisStoreType }).(pulumi.StringPtrOutput)
}

type SsisMigrationInfoPtrOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfo)(nil)).Elem()
}

func (o SsisMigrationInfoPtrOutput) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return o
}

func (o SsisMigrationInfoPtrOutput) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return o
}

func (o SsisMigrationInfoPtrOutput) Elem() SsisMigrationInfoOutput {
	return o.ApplyT(func(v *SsisMigrationInfo) SsisMigrationInfo { return *v }).(SsisMigrationInfoOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoPtrOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoPtrOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.ProjectOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS
func (o SsisMigrationInfoPtrOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.SsisStoreType
	}).(pulumi.StringPtrOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoResponse struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption *string `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption *string `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType *string `pulumi:"ssisStoreType"`
}

// SsisMigrationInfoResponseInput is an input type that accepts SsisMigrationInfoResponseArgs and SsisMigrationInfoResponseOutput values.
// You can construct a concrete instance of `SsisMigrationInfoResponseInput` via:
//
//          SsisMigrationInfoResponseArgs{...}
type SsisMigrationInfoResponseInput interface {
	pulumi.Input

	ToSsisMigrationInfoResponseOutput() SsisMigrationInfoResponseOutput
	ToSsisMigrationInfoResponseOutputWithContext(context.Context) SsisMigrationInfoResponseOutput
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoResponseArgs struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption pulumi.StringPtrInput `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption pulumi.StringPtrInput `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType pulumi.StringPtrInput `pulumi:"ssisStoreType"`
}

func (SsisMigrationInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfoResponse)(nil)).Elem()
}

func (i SsisMigrationInfoResponseArgs) ToSsisMigrationInfoResponseOutput() SsisMigrationInfoResponseOutput {
	return i.ToSsisMigrationInfoResponseOutputWithContext(context.Background())
}

func (i SsisMigrationInfoResponseArgs) ToSsisMigrationInfoResponseOutputWithContext(ctx context.Context) SsisMigrationInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoResponseOutput)
}

func (i SsisMigrationInfoResponseArgs) ToSsisMigrationInfoResponsePtrOutput() SsisMigrationInfoResponsePtrOutput {
	return i.ToSsisMigrationInfoResponsePtrOutputWithContext(context.Background())
}

func (i SsisMigrationInfoResponseArgs) ToSsisMigrationInfoResponsePtrOutputWithContext(ctx context.Context) SsisMigrationInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoResponseOutput).ToSsisMigrationInfoResponsePtrOutputWithContext(ctx)
}

// SsisMigrationInfoResponsePtrInput is an input type that accepts SsisMigrationInfoResponseArgs, SsisMigrationInfoResponsePtr and SsisMigrationInfoResponsePtrOutput values.
// You can construct a concrete instance of `SsisMigrationInfoResponsePtrInput` via:
//
//          SsisMigrationInfoResponseArgs{...}
//
//  or:
//
//          nil
type SsisMigrationInfoResponsePtrInput interface {
	pulumi.Input

	ToSsisMigrationInfoResponsePtrOutput() SsisMigrationInfoResponsePtrOutput
	ToSsisMigrationInfoResponsePtrOutputWithContext(context.Context) SsisMigrationInfoResponsePtrOutput
}

type ssisMigrationInfoResponsePtrType SsisMigrationInfoResponseArgs

func SsisMigrationInfoResponsePtr(v *SsisMigrationInfoResponseArgs) SsisMigrationInfoResponsePtrInput {
	return (*ssisMigrationInfoResponsePtrType)(v)
}

func (*ssisMigrationInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfoResponse)(nil)).Elem()
}

func (i *ssisMigrationInfoResponsePtrType) ToSsisMigrationInfoResponsePtrOutput() SsisMigrationInfoResponsePtrOutput {
	return i.ToSsisMigrationInfoResponsePtrOutputWithContext(context.Background())
}

func (i *ssisMigrationInfoResponsePtrType) ToSsisMigrationInfoResponsePtrOutputWithContext(ctx context.Context) SsisMigrationInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoResponsePtrOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoResponseOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfoResponse)(nil)).Elem()
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponseOutput() SsisMigrationInfoResponseOutput {
	return o
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponseOutputWithContext(ctx context.Context) SsisMigrationInfoResponseOutput {
	return o
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponsePtrOutput() SsisMigrationInfoResponsePtrOutput {
	return o.ToSsisMigrationInfoResponsePtrOutputWithContext(context.Background())
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponsePtrOutputWithContext(ctx context.Context) SsisMigrationInfoResponsePtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *SsisMigrationInfoResponse {
		return &v
	}).(SsisMigrationInfoResponsePtrOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoResponseOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.EnvironmentOverwriteOption }).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoResponseOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.ProjectOverwriteOption }).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS
func (o SsisMigrationInfoResponseOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.SsisStoreType }).(pulumi.StringPtrOutput)
}

type SsisMigrationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfoResponse)(nil)).Elem()
}

func (o SsisMigrationInfoResponsePtrOutput) ToSsisMigrationInfoResponsePtrOutput() SsisMigrationInfoResponsePtrOutput {
	return o
}

func (o SsisMigrationInfoResponsePtrOutput) ToSsisMigrationInfoResponsePtrOutputWithContext(ctx context.Context) SsisMigrationInfoResponsePtrOutput {
	return o
}

func (o SsisMigrationInfoResponsePtrOutput) Elem() SsisMigrationInfoResponseOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) SsisMigrationInfoResponse { return *v }).(SsisMigrationInfoResponseOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoResponsePtrOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoResponsePtrOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProjectOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS
func (o SsisMigrationInfoResponsePtrOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.SsisStoreType
	}).(pulumi.StringPtrOutput)
}

// Server role migration result
type StartMigrationScenarioServerRoleResultResponse struct {
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Name of server role.
	Name string `pulumi:"name"`
	// Current state of migration
	State string `pulumi:"state"`
}

// StartMigrationScenarioServerRoleResultResponseInput is an input type that accepts StartMigrationScenarioServerRoleResultResponseArgs and StartMigrationScenarioServerRoleResultResponseOutput values.
// You can construct a concrete instance of `StartMigrationScenarioServerRoleResultResponseInput` via:
//
//          StartMigrationScenarioServerRoleResultResponseArgs{...}
type StartMigrationScenarioServerRoleResultResponseInput interface {
	pulumi.Input

	ToStartMigrationScenarioServerRoleResultResponseOutput() StartMigrationScenarioServerRoleResultResponseOutput
	ToStartMigrationScenarioServerRoleResultResponseOutputWithContext(context.Context) StartMigrationScenarioServerRoleResultResponseOutput
}

// Server role migration result
type StartMigrationScenarioServerRoleResultResponseArgs struct {
	// Migration exceptions and warnings.
	ExceptionsAndWarnings ReportableExceptionResponseArrayInput `pulumi:"exceptionsAndWarnings"`
	// Name of server role.
	Name pulumi.StringInput `pulumi:"name"`
	// Current state of migration
	State pulumi.StringInput `pulumi:"state"`
}

func (StartMigrationScenarioServerRoleResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StartMigrationScenarioServerRoleResultResponse)(nil)).Elem()
}

func (i StartMigrationScenarioServerRoleResultResponseArgs) ToStartMigrationScenarioServerRoleResultResponseOutput() StartMigrationScenarioServerRoleResultResponseOutput {
	return i.ToStartMigrationScenarioServerRoleResultResponseOutputWithContext(context.Background())
}

func (i StartMigrationScenarioServerRoleResultResponseArgs) ToStartMigrationScenarioServerRoleResultResponseOutputWithContext(ctx context.Context) StartMigrationScenarioServerRoleResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartMigrationScenarioServerRoleResultResponseOutput)
}

// StartMigrationScenarioServerRoleResultResponseMapInput is an input type that accepts StartMigrationScenarioServerRoleResultResponseMap and StartMigrationScenarioServerRoleResultResponseMapOutput values.
// You can construct a concrete instance of `StartMigrationScenarioServerRoleResultResponseMapInput` via:
//
//          StartMigrationScenarioServerRoleResultResponseMap{ "key": StartMigrationScenarioServerRoleResultResponseArgs{...} }
type StartMigrationScenarioServerRoleResultResponseMapInput interface {
	pulumi.Input

	ToStartMigrationScenarioServerRoleResultResponseMapOutput() StartMigrationScenarioServerRoleResultResponseMapOutput
	ToStartMigrationScenarioServerRoleResultResponseMapOutputWithContext(context.Context) StartMigrationScenarioServerRoleResultResponseMapOutput
}

type StartMigrationScenarioServerRoleResultResponseMap map[string]StartMigrationScenarioServerRoleResultResponseInput

func (StartMigrationScenarioServerRoleResultResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StartMigrationScenarioServerRoleResultResponse)(nil)).Elem()
}

func (i StartMigrationScenarioServerRoleResultResponseMap) ToStartMigrationScenarioServerRoleResultResponseMapOutput() StartMigrationScenarioServerRoleResultResponseMapOutput {
	return i.ToStartMigrationScenarioServerRoleResultResponseMapOutputWithContext(context.Background())
}

func (i StartMigrationScenarioServerRoleResultResponseMap) ToStartMigrationScenarioServerRoleResultResponseMapOutputWithContext(ctx context.Context) StartMigrationScenarioServerRoleResultResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartMigrationScenarioServerRoleResultResponseMapOutput)
}

// Server role migration result
type StartMigrationScenarioServerRoleResultResponseOutput struct{ *pulumi.OutputState }

func (StartMigrationScenarioServerRoleResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StartMigrationScenarioServerRoleResultResponse)(nil)).Elem()
}

func (o StartMigrationScenarioServerRoleResultResponseOutput) ToStartMigrationScenarioServerRoleResultResponseOutput() StartMigrationScenarioServerRoleResultResponseOutput {
	return o
}

func (o StartMigrationScenarioServerRoleResultResponseOutput) ToStartMigrationScenarioServerRoleResultResponseOutputWithContext(ctx context.Context) StartMigrationScenarioServerRoleResultResponseOutput {
	return o
}

// Migration exceptions and warnings.
func (o StartMigrationScenarioServerRoleResultResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v StartMigrationScenarioServerRoleResultResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Name of server role.
func (o StartMigrationScenarioServerRoleResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StartMigrationScenarioServerRoleResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Current state of migration
func (o StartMigrationScenarioServerRoleResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v StartMigrationScenarioServerRoleResultResponse) string { return v.State }).(pulumi.StringOutput)
}

type StartMigrationScenarioServerRoleResultResponseMapOutput struct{ *pulumi.OutputState }

func (StartMigrationScenarioServerRoleResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StartMigrationScenarioServerRoleResultResponse)(nil)).Elem()
}

func (o StartMigrationScenarioServerRoleResultResponseMapOutput) ToStartMigrationScenarioServerRoleResultResponseMapOutput() StartMigrationScenarioServerRoleResultResponseMapOutput {
	return o
}

func (o StartMigrationScenarioServerRoleResultResponseMapOutput) ToStartMigrationScenarioServerRoleResultResponseMapOutputWithContext(ctx context.Context) StartMigrationScenarioServerRoleResultResponseMapOutput {
	return o
}

func (o StartMigrationScenarioServerRoleResultResponseMapOutput) MapIndex(k pulumi.StringInput) StartMigrationScenarioServerRoleResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StartMigrationScenarioServerRoleResultResponse {
		return vs[0].(map[string]StartMigrationScenarioServerRoleResultResponse)[vs[1].(string)]
	}).(StartMigrationScenarioServerRoleResultResponseOutput)
}

// Database migration errors for online migration
type SyncMigrationDatabaseErrorEventResponse struct {
	// Event text.
	EventText string `pulumi:"eventText"`
	// Event type.
	EventTypeString string `pulumi:"eventTypeString"`
	// String value of timestamp.
	TimestampString string `pulumi:"timestampString"`
}

// SyncMigrationDatabaseErrorEventResponseInput is an input type that accepts SyncMigrationDatabaseErrorEventResponseArgs and SyncMigrationDatabaseErrorEventResponseOutput values.
// You can construct a concrete instance of `SyncMigrationDatabaseErrorEventResponseInput` via:
//
//          SyncMigrationDatabaseErrorEventResponseArgs{...}
type SyncMigrationDatabaseErrorEventResponseInput interface {
	pulumi.Input

	ToSyncMigrationDatabaseErrorEventResponseOutput() SyncMigrationDatabaseErrorEventResponseOutput
	ToSyncMigrationDatabaseErrorEventResponseOutputWithContext(context.Context) SyncMigrationDatabaseErrorEventResponseOutput
}

// Database migration errors for online migration
type SyncMigrationDatabaseErrorEventResponseArgs struct {
	// Event text.
	EventText pulumi.StringInput `pulumi:"eventText"`
	// Event type.
	EventTypeString pulumi.StringInput `pulumi:"eventTypeString"`
	// String value of timestamp.
	TimestampString pulumi.StringInput `pulumi:"timestampString"`
}

func (SyncMigrationDatabaseErrorEventResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncMigrationDatabaseErrorEventResponse)(nil)).Elem()
}

func (i SyncMigrationDatabaseErrorEventResponseArgs) ToSyncMigrationDatabaseErrorEventResponseOutput() SyncMigrationDatabaseErrorEventResponseOutput {
	return i.ToSyncMigrationDatabaseErrorEventResponseOutputWithContext(context.Background())
}

func (i SyncMigrationDatabaseErrorEventResponseArgs) ToSyncMigrationDatabaseErrorEventResponseOutputWithContext(ctx context.Context) SyncMigrationDatabaseErrorEventResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncMigrationDatabaseErrorEventResponseOutput)
}

// SyncMigrationDatabaseErrorEventResponseArrayInput is an input type that accepts SyncMigrationDatabaseErrorEventResponseArray and SyncMigrationDatabaseErrorEventResponseArrayOutput values.
// You can construct a concrete instance of `SyncMigrationDatabaseErrorEventResponseArrayInput` via:
//
//          SyncMigrationDatabaseErrorEventResponseArray{ SyncMigrationDatabaseErrorEventResponseArgs{...} }
type SyncMigrationDatabaseErrorEventResponseArrayInput interface {
	pulumi.Input

	ToSyncMigrationDatabaseErrorEventResponseArrayOutput() SyncMigrationDatabaseErrorEventResponseArrayOutput
	ToSyncMigrationDatabaseErrorEventResponseArrayOutputWithContext(context.Context) SyncMigrationDatabaseErrorEventResponseArrayOutput
}

type SyncMigrationDatabaseErrorEventResponseArray []SyncMigrationDatabaseErrorEventResponseInput

func (SyncMigrationDatabaseErrorEventResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncMigrationDatabaseErrorEventResponse)(nil)).Elem()
}

func (i SyncMigrationDatabaseErrorEventResponseArray) ToSyncMigrationDatabaseErrorEventResponseArrayOutput() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return i.ToSyncMigrationDatabaseErrorEventResponseArrayOutputWithContext(context.Background())
}

func (i SyncMigrationDatabaseErrorEventResponseArray) ToSyncMigrationDatabaseErrorEventResponseArrayOutputWithContext(ctx context.Context) SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Database migration errors for online migration
type SyncMigrationDatabaseErrorEventResponseOutput struct{ *pulumi.OutputState }

func (SyncMigrationDatabaseErrorEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncMigrationDatabaseErrorEventResponse)(nil)).Elem()
}

func (o SyncMigrationDatabaseErrorEventResponseOutput) ToSyncMigrationDatabaseErrorEventResponseOutput() SyncMigrationDatabaseErrorEventResponseOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseOutput) ToSyncMigrationDatabaseErrorEventResponseOutputWithContext(ctx context.Context) SyncMigrationDatabaseErrorEventResponseOutput {
	return o
}

// Event text.
func (o SyncMigrationDatabaseErrorEventResponseOutput) EventText() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.EventText }).(pulumi.StringOutput)
}

// Event type.
func (o SyncMigrationDatabaseErrorEventResponseOutput) EventTypeString() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.EventTypeString }).(pulumi.StringOutput)
}

// String value of timestamp.
func (o SyncMigrationDatabaseErrorEventResponseOutput) TimestampString() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.TimestampString }).(pulumi.StringOutput)
}

type SyncMigrationDatabaseErrorEventResponseArrayOutput struct{ *pulumi.OutputState }

func (SyncMigrationDatabaseErrorEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncMigrationDatabaseErrorEventResponse)(nil)).Elem()
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) ToSyncMigrationDatabaseErrorEventResponseArrayOutput() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) ToSyncMigrationDatabaseErrorEventResponseArrayOutputWithContext(ctx context.Context) SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) Index(i pulumi.IntInput) SyncMigrationDatabaseErrorEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyncMigrationDatabaseErrorEventResponse {
		return vs[0].([]SyncMigrationDatabaseErrorEventResponse)[vs[1].(int)]
	}).(SyncMigrationDatabaseErrorEventResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateSyncMigrationInputSqlServerTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs and ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput` via:
//
//          ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateSyncMigrationInputSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) Input() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) *ValidateSyncMigrationInputSqlServerTaskInput {
		return v.Input
	}).(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateSyncMigrationInputSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateSyncMigrationInputSqlServerTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseArgs and ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseArgs{...}
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput
	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ValidateSyncMigrationInputSqlServerTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Input() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) *ValidateSyncMigrationInputSqlServerTaskInputResponse {
		return v.Input
	}).(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Output() ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []ValidateSyncMigrationInputSqlServerTaskOutputResponse {
		return v.Output
	}).(ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMISyncTaskInputInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs and ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskInputInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput)
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput).ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs, ValidateMigrationInputSqlServerSqlMISyncTaskInputPtr and ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput
}

type validateMigrationInputSqlServerSqlMISyncTaskInputPtrType ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs

func ValidateMigrationInputSqlServerSqlMISyncTaskInputPtr(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput {
	return (*validateMigrationInputSqlServerSqlMISyncTaskInputPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) *ValidateMigrationInputSqlServerSqlMISyncTaskInput {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) AzureApp() AzureActiveDirectoryAppOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) AzureActiveDirectoryApp { return v.AzureApp }).(AzureActiveDirectoryAppOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) SqlConnectionInfo {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) TargetConnectionInfo() MiSqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) MiSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) Elem() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) ValidateMigrationInputSqlServerSqlMISyncTaskInput {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) AzureApp() AzureActiveDirectoryAppPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *AzureActiveDirectoryApp {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppPtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) TargetConnectionInfo() MiSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *MiSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs and ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponseInput `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare FileShareResponsePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput)
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput).ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs, ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtr and ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput
}

type validateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrType ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs

func ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtr(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseArgs) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrInput {
	return (*validateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse {
		return v.AzureApp
	}).(AzureActiveDirectoryAppResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for Azure SQL Database Managed Instance online migration
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse struct {
	// Database identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArgs and ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput
}

// Output for task that validates migration input for Azure SQL Database Managed Instance online migration
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArgs struct {
	// Database identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Name of database
	Name pulumi.StringInput `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput)
}

// ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArray and ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArray{ ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArgs{...} }
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput
}

type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArray []ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseInput

func (ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArray) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArray) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput)
}

// Output for task that validates migration input for Azure SQL Database Managed Instance online migration
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return o
}

// Database identifier
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with a selected database object
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs and ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) Input() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskProperties) *ValidateMigrationInputSqlServerSqlMISyncTaskInput {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseArgs and ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Input() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Output() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInput struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode *string `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMITaskInputInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs and ValidateMigrationInputSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode pulumi.StringPtrInput `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput).ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskInputPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs, ValidateMigrationInputSqlServerSqlMITaskInputPtr and ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputPtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
}

type validateMigrationInputSqlServerSqlMITaskInputPtrType ValidateMigrationInputSqlServerSqlMITaskInputArgs

func ValidateMigrationInputSqlServerSqlMITaskInputPtr(v *ValidateMigrationInputSqlServerSqlMITaskInputArgs) ValidateMigrationInputSqlServerSqlMITaskInputPtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskInputPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) *ValidateMigrationInputSqlServerSqlMITaskInput {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) BackupBlobShare() BlobShareOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) BlobShare { return v.BackupBlobShare }).(BlobShareOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) ValidateMigrationInputSqlServerSqlMITaskInput {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) BackupBlobShare() BlobSharePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *BlobShare {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobSharePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode *string `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMITaskInputResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs and ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskInputResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponseInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileShareResponsePtrInput `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode pulumi.StringPtrInput `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput).ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs, ValidateMigrationInputSqlServerSqlMITaskInputResponsePtr and ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput
}

type validateMigrationInputSqlServerSqlMITaskInputResponsePtrType ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs

func ValidateMigrationInputSqlServerSqlMITaskInputResponsePtr(v *ValidateMigrationInputSqlServerSqlMITaskInputResponseArgs) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskInputResponsePtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskInputResponsePtrType) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskInputResponsePtrType) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) BlobShareResponse {
		return v.BackupBlobShare
	}).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponse struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors []ReportableExceptionResponse `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors []ReportableExceptionResponse `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors []ReportableExceptionResponse `pulumi:"backupStorageAccountErrors"`
	// Information about backup files when existing backup mode is used.
	DatabaseBackupInfo *DatabaseBackupInfoResponse `pulumi:"databaseBackupInfo"`
	// Errors associated with existing backup files.
	ExistingBackupErrors []ReportableExceptionResponse `pulumi:"existingBackupErrors"`
	// Result identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors []ReportableExceptionResponse `pulumi:"restoreDatabaseNameErrors"`
}

// ValidateMigrationInputSqlServerSqlMITaskOutputResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs and ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskOutputResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors ReportableExceptionResponseArrayInput `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors ReportableExceptionResponseArrayInput `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors ReportableExceptionResponseArrayInput `pulumi:"backupStorageAccountErrors"`
	// Information about backup files when existing backup mode is used.
	DatabaseBackupInfo DatabaseBackupInfoResponsePtrInput `pulumi:"databaseBackupInfo"`
	// Errors associated with existing backup files.
	ExistingBackupErrors ReportableExceptionResponseArrayInput `pulumi:"existingBackupErrors"`
	// Result identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Name of database
	Name pulumi.StringInput `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors ReportableExceptionResponseArrayInput `pulumi:"restoreDatabaseNameErrors"`
}

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput)
}

// ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray and ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray{ ValidateMigrationInputSqlServerSqlMITaskOutputResponseArgs{...} }
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput
	ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput
}

type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray []ValidateMigrationInputSqlServerSqlMITaskOutputResponseInput

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskOutputResponseArray) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

// Errors associated with the BackupFolder path
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupFolderErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupFolderErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with backup share user name and password credentials
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupShareCredentialsErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupShareCredentialsErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with the storage account provided.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupStorageAccountErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupStorageAccountErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Information about backup files when existing backup mode is used.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) DatabaseBackupInfo() DatabaseBackupInfoResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) *DatabaseBackupInfoResponse {
		return v.DatabaseBackupInfo
	}).(DatabaseBackupInfoResponsePtrOutput)
}

// Errors associated with existing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ExistingBackupErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.ExistingBackupErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with the RestoreDatabaseName
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) RestoreDatabaseNameErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.RestoreDatabaseNameErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs and ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskProperties) *ValidateMigrationInputSqlServerSqlMITaskInput {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs and ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrInput `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Output() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettings `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMongoDbTaskPropertiesInput is an input type that accepts ValidateMongoDbTaskPropertiesArgs and ValidateMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMongoDbTaskPropertiesInput` via:
//
//          ValidateMongoDbTaskPropertiesArgs{...}
type ValidateMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMongoDbTaskPropertiesOutput() ValidateMongoDbTaskPropertiesOutput
	ToValidateMongoDbTaskPropertiesOutputWithContext(context.Context) ValidateMongoDbTaskPropertiesOutput
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input MongoDbMigrationSettingsPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskProperties)(nil)).Elem()
}

func (i ValidateMongoDbTaskPropertiesArgs) ToValidateMongoDbTaskPropertiesOutput() ValidateMongoDbTaskPropertiesOutput {
	return i.ToValidateMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMongoDbTaskPropertiesArgs) ToValidateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMongoDbTaskPropertiesOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMongoDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskProperties)(nil)).Elem()
}

func (o ValidateMongoDbTaskPropertiesOutput) ToValidateMongoDbTaskPropertiesOutput() ValidateMongoDbTaskPropertiesOutput {
	return o
}

func (o ValidateMongoDbTaskPropertiesOutput) ToValidateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMongoDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Describes how a MongoDB data migration should be performed
func (o ValidateMongoDbTaskPropertiesOutput) Input() MongoDbMigrationSettingsPtrOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskProperties) *MongoDbMigrationSettings { return v.Input }).(MongoDbMigrationSettingsPtrOutput)
}

// Task type.
func (o ValidateMongoDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettingsResponse `pulumi:"input"`
	// An array containing a single MongoDbMigrationProgress object
	Output []MongoDbMigrationProgressResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMongoDbTaskPropertiesResponseInput is an input type that accepts ValidateMongoDbTaskPropertiesResponseArgs and ValidateMongoDbTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ValidateMongoDbTaskPropertiesResponseInput` via:
//
//          ValidateMongoDbTaskPropertiesResponseArgs{...}
type ValidateMongoDbTaskPropertiesResponseInput interface {
	pulumi.Input

	ToValidateMongoDbTaskPropertiesResponseOutput() ValidateMongoDbTaskPropertiesResponseOutput
	ToValidateMongoDbTaskPropertiesResponseOutputWithContext(context.Context) ValidateMongoDbTaskPropertiesResponseOutput
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input MongoDbMigrationSettingsResponsePtrInput `pulumi:"input"`
	// An array containing a single MongoDbMigrationProgress object
	Output MongoDbMigrationProgressResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMongoDbTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (i ValidateMongoDbTaskPropertiesResponseArgs) ToValidateMongoDbTaskPropertiesResponseOutput() ValidateMongoDbTaskPropertiesResponseOutput {
	return i.ToValidateMongoDbTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ValidateMongoDbTaskPropertiesResponseArgs) ToValidateMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMongoDbTaskPropertiesResponseOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMongoDbTaskPropertiesResponseOutput) ToValidateMongoDbTaskPropertiesResponseOutput() ValidateMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMongoDbTaskPropertiesResponseOutput) ToValidateMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes how a MongoDB data migration should be performed
func (o ValidateMongoDbTaskPropertiesResponseOutput) Input() MongoDbMigrationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) *MongoDbMigrationSettingsResponse { return v.Input }).(MongoDbMigrationSettingsResponsePtrOutput)
}

// An array containing a single MongoDbMigrationProgress object
func (o ValidateMongoDbTaskPropertiesResponseOutput) Output() MongoDbMigrationProgressResponseArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []MongoDbMigrationProgressResponse { return v.Output }).(MongoDbMigrationProgressResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// An array containing a single validation error response object
	Output []ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput is an input type that accepts ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs and ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput` via:
//
//          ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs{...}
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseInput interface {
	pulumi.Input

	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Array of command properties.
	Commands pulumi.ArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrInput `pulumi:"input"`
	// An array containing a single validation error response object
	Output ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayInput `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return i.ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// An array containing a single validation error response object
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse struct {
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseInput is an input type that accepts ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArgs and ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput values.
// You can construct a concrete instance of `ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseInput` via:
//
//          ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArgs{...}
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseInput interface {
	pulumi.Input

	ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput
	ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutputWithContext(context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput
}

// Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArgs struct {
	// Errors associated with a selected database object
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArgs) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return i.ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutputWithContext(context.Background())
}

func (i ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArgs) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput)
}

// ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayInput is an input type that accepts ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArray and ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayInput` via:
//
//          ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArray{ ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArgs{...} }
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput
	ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput
}

type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArray []ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseInput

func (ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (i ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArray) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return i.ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArray) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// Errors associated with a selected database object
func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ValidateSyncMigrationInputSqlServerTaskInputInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskInputArgs and ValidateSyncMigrationInputSqlServerTaskInputOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskInputInput` via:
//
//          ValidateSyncMigrationInputSqlServerTaskInputArgs{...}
type ValidateSyncMigrationInputSqlServerTaskInputInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskInputOutput() ValidateSyncMigrationInputSqlServerTaskInputOutput
	ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskInputOutput
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ValidateSyncMigrationInputSqlServerTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputOutput() ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputOutput)
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputOutput).ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx)
}

// ValidateSyncMigrationInputSqlServerTaskInputPtrInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskInputArgs, ValidateSyncMigrationInputSqlServerTaskInputPtr and ValidateSyncMigrationInputSqlServerTaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskInputPtrInput` via:
//
//          ValidateSyncMigrationInputSqlServerTaskInputArgs{...}
//
//  or:
//
//          nil
type ValidateSyncMigrationInputSqlServerTaskInputPtrInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput
	ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput
}

type validateSyncMigrationInputSqlServerTaskInputPtrType ValidateSyncMigrationInputSqlServerTaskInputArgs

func ValidateSyncMigrationInputSqlServerTaskInputPtr(v *ValidateSyncMigrationInputSqlServerTaskInputArgs) ValidateSyncMigrationInputSqlServerTaskInputPtrInput {
	return (*validateSyncMigrationInputSqlServerTaskInputPtrType)(v)
}

func (*validateSyncMigrationInputSqlServerTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (i *validateSyncMigrationInputSqlServerTaskInputPtrType) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i *validateSyncMigrationInputSqlServerTaskInputPtrType) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) ToValidateSyncMigrationInputSqlServerTaskInputOutput() ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o.ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInput) *ValidateSyncMigrationInputSqlServerTaskInput {
		return &v
	}).(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInput) []MigrateSqlServerSqlDbSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ValidateSyncMigrationInputSqlServerTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) Elem() ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInput) ValidateSyncMigrationInputSqlServerTaskInput {
		return *v
	}).(ValidateSyncMigrationInputSqlServerTaskInputOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInput) []MigrateSqlServerSqlDbSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// ValidateSyncMigrationInputSqlServerTaskInputResponseInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskInputResponseArgs and ValidateSyncMigrationInputSqlServerTaskInputResponseOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskInputResponseInput` via:
//
//          ValidateSyncMigrationInputSqlServerTaskInputResponseArgs{...}
type ValidateSyncMigrationInputSqlServerTaskInputResponseInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskInputResponseOutput() ValidateSyncMigrationInputSqlServerTaskInputResponseOutput
	ToValidateSyncMigrationInputSqlServerTaskInputResponseOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponseOutput
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputResponseArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfoResponseInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponseInput `pulumi:"targetConnectionInfo"`
}

func (ValidateSyncMigrationInputSqlServerTaskInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInputResponse)(nil)).Elem()
}

func (i ValidateSyncMigrationInputSqlServerTaskInputResponseArgs) ToValidateSyncMigrationInputSqlServerTaskInputResponseOutput() ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputResponseOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskInputResponseArgs) ToValidateSyncMigrationInputSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputResponseOutput)
}

func (i ValidateSyncMigrationInputSqlServerTaskInputResponseArgs) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskInputResponseArgs) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputResponseOutput).ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(ctx)
}

// ValidateSyncMigrationInputSqlServerTaskInputResponsePtrInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskInputResponseArgs, ValidateSyncMigrationInputSqlServerTaskInputResponsePtr and ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskInputResponsePtrInput` via:
//
//          ValidateSyncMigrationInputSqlServerTaskInputResponseArgs{...}
//
//  or:
//
//          nil
type ValidateSyncMigrationInputSqlServerTaskInputResponsePtrInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput
	ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput
}

type validateSyncMigrationInputSqlServerTaskInputResponsePtrType ValidateSyncMigrationInputSqlServerTaskInputResponseArgs

func ValidateSyncMigrationInputSqlServerTaskInputResponsePtr(v *ValidateSyncMigrationInputSqlServerTaskInputResponseArgs) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrInput {
	return (*validateSyncMigrationInputSqlServerTaskInputResponsePtrType)(v)
}

func (*validateSyncMigrationInputSqlServerTaskInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInputResponse)(nil)).Elem()
}

func (i *validateSyncMigrationInputSqlServerTaskInputResponsePtrType) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (i *validateSyncMigrationInputSqlServerTaskInputResponsePtrType) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponseOutput() ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o.ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) *ValidateSyncMigrationInputSqlServerTaskInputResponse {
		return &v
	}).(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) Elem() ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) ValidateSyncMigrationInputSqlServerTaskInputResponse {
		return *v
	}).(ValidateSyncMigrationInputSqlServerTaskInputResponseOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskOutputResponse struct {
	// Database identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// ValidateSyncMigrationInputSqlServerTaskOutputResponseInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskOutputResponseArgs and ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskOutputResponseInput` via:
//
//          ValidateSyncMigrationInputSqlServerTaskOutputResponseArgs{...}
type ValidateSyncMigrationInputSqlServerTaskOutputResponseInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput
	ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput
}

// Output for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskOutputResponseArgs struct {
	// Database identifier
	Id pulumi.StringInput `pulumi:"id"`
	// Name of database
	Name pulumi.StringInput `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors ReportableExceptionResponseArrayInput `pulumi:"validationErrors"`
}

func (ValidateSyncMigrationInputSqlServerTaskOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskOutputResponse)(nil)).Elem()
}

func (i ValidateSyncMigrationInputSqlServerTaskOutputResponseArgs) ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskOutputResponseArgs) ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput)
}

// ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskOutputResponseArray and ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayInput` via:
//
//          ValidateSyncMigrationInputSqlServerTaskOutputResponseArray{ ValidateSyncMigrationInputSqlServerTaskOutputResponseArgs{...} }
type ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput
	ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput
}

type ValidateSyncMigrationInputSqlServerTaskOutputResponseArray []ValidateSyncMigrationInputSqlServerTaskOutputResponseInput

func (ValidateSyncMigrationInputSqlServerTaskOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateSyncMigrationInputSqlServerTaskOutputResponse)(nil)).Elem()
}

func (i ValidateSyncMigrationInputSqlServerTaskOutputResponseArray) ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskOutputResponseArray) ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput)
}

// Output for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskOutputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return o
}

// Database identifier
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with a selected database object
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateSyncMigrationInputSqlServerTaskOutputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateSyncMigrationInputSqlServerTaskOutputResponse {
		return vs[0].([]ValidateSyncMigrationInputSqlServerTaskOutputResponse)[vs[1].(int)]
	}).(ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureActiveDirectoryAppOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppResponsePtrOutput{})
	pulumi.RegisterOutputType(BackupFileInfoResponseOutput{})
	pulumi.RegisterOutputType(BackupFileInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(BackupSetInfoResponseOutput{})
	pulumi.RegisterOutputType(BackupSetInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(BlobShareOutput{})
	pulumi.RegisterOutputType(BlobSharePtrOutput{})
	pulumi.RegisterOutputType(BlobShareResponseOutput{})
	pulumi.RegisterOutputType(BlobShareResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DataItemMigrationSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(DataItemMigrationSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseBackupInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseBackupInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoOutput{})
	pulumi.RegisterOutputType(DatabaseInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(DatabaseSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseArrayOutput{})
	pulumi.RegisterOutputType(FileShareOutput{})
	pulumi.RegisterOutputType(FileSharePtrOutput{})
	pulumi.RegisterOutputType(FileShareResponseOutput{})
	pulumi.RegisterOutputType(FileShareResponsePtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandOutputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskOutputProjectLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandOutputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrationEligibilityInfoResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationDatabaseSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationDatabaseSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsPtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationResultResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbClusterInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbClusterInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionProgressResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsMapOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseProgressResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsMapOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbErrorResponseOutput{})
	pulumi.RegisterOutputType(MongoDbErrorResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationProgressResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsPtrOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldArrayOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingPtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsPtrOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(OrphanedUserInfoResponseOutput{})
	pulumi.RegisterOutputType(OrphanedUserInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseArrayOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputArrayOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputResponseOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceSkuOutput{})
	pulumi.RegisterOutputType(ServiceSkuPtrOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoPtrOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoResponseOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(StartMigrationScenarioServerRoleResultResponseOutput{})
	pulumi.RegisterOutputType(StartMigrationScenarioServerRoleResultResponseMapOutput{})
	pulumi.RegisterOutputType(SyncMigrationDatabaseErrorEventResponseOutput{})
	pulumi.RegisterOutputType(SyncMigrationDatabaseErrorEventResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput{})
}
