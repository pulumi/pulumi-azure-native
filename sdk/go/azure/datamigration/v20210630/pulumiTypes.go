// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210630

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Azure Active Directory Application
type AzureActiveDirectoryApp struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey string `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId string `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId string `pulumi:"tenantId"`
}

// Azure Active Directory Application
type AzureActiveDirectoryAppResponse struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey string `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId string `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId string `pulumi:"tenantId"`
}

// Information of the backup file
type BackupFileInfoResponse struct {
	// Sequence number of the backup file in the backup set
	FamilySequenceNumber *int `pulumi:"familySequenceNumber"`
	// Location of the backup file in shared folder
	FileLocation *string `pulumi:"fileLocation"`
	// Status of the backup file during migration
	Status *string `pulumi:"status"`
}

// Information of backup set
type BackupSetInfoResponse struct {
	// Date and time that the backup operation finished
	BackupFinishedDate *string `pulumi:"backupFinishedDate"`
	// Id for the set of backup files
	BackupSetId *string `pulumi:"backupSetId"`
	// Date and time that the backup operation began
	BackupStartDate *string `pulumi:"backupStartDate"`
	// Enum of the different backup types
	BackupType *string `pulumi:"backupType"`
	// Name of the database to which the backup set belongs
	DatabaseName *string `pulumi:"databaseName"`
	// First log sequence number of the backup file
	FirstLsn *string `pulumi:"firstLsn"`
	// Whether the backup set is restored or not
	IsBackupRestored *bool `pulumi:"isBackupRestored"`
	// Last log sequence number of the backup file
	LastLsn *string `pulumi:"lastLsn"`
	// Last modified time of the backup file in share location
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// List of files in the backup set
	ListOfBackupFiles []BackupFileInfoResponse `pulumi:"listOfBackupFiles"`
}

// Blob container storage information.
type BlobShare struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// Blob container storage information.
type BlobShareResponse struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes a connection to a MongoDB data source
	Input *MongoDbConnectionInfo `pulumi:"input"`
	// Task type.
	// Expected value is 'Connect.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes a connection to a MongoDB data source
	Input *MongoDbConnectionInfoResponse `pulumi:"input"`
	// An array containing a single MongoDbClusterInfo object
	Output []MongoDbClusterInfoResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Connect.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Input for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskInput struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether or not the migration is offline
	IsOfflineMigration *bool `pulumi:"isOfflineMigration"`
	// Information for connecting to MySQL source
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Target Platform for the migration
	TargetPlatform *string `pulumi:"targetPlatform"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskInput
func (val *ConnectToSourceMySqlTaskInput) Defaults() *ConnectToSourceMySqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsOfflineMigration) {
		isOfflineMigration_ := false
		tmp.IsOfflineMigration = &isOfflineMigration_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskInputResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether or not the migration is offline
	IsOfflineMigration *bool `pulumi:"isOfflineMigration"`
	// Information for connecting to MySQL source
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Target Platform for the migration
	TargetPlatform *string `pulumi:"targetPlatform"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskInputResponse
func (val *ConnectToSourceMySqlTaskInputResponse) Defaults() *ConnectToSourceMySqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsOfflineMigration) {
		isOfflineMigration_ := false
		tmp.IsOfflineMigration = &isOfflineMigration_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Properties for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceMySqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.MySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskProperties
func (val *ConnectToSourceMySqlTaskProperties) Defaults() *ConnectToSourceMySqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceMySqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourceNonSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.MySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskPropertiesResponse
func (val *ConnectToSourceMySqlTaskPropertiesResponse) Defaults() *ConnectToSourceMySqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Output for connect to MySQL type source
type ConnectToSourceNonSqlTaskOutputResponse struct {
	// List of databases on the server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Server properties
	ServerProperties ServerPropertiesResponse `pulumi:"serverProperties"`
	// Server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInput struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputResponse struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// Output for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskOutputResponse struct {
	// List of schemas on source server
	Databases []string `pulumi:"databases"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceOracleSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.Oracle.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceOracleSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourceOracleSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.Oracle.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInput struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskInput
func (val *ConnectToSourcePostgreSqlSyncTaskInput) Defaults() *ConnectToSourcePostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputResponse struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskInputResponse
func (val *ConnectToSourcePostgreSqlSyncTaskInputResponse) Defaults() *ConnectToSourcePostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Output for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskOutputResponse struct {
	// List of databases on source server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourcePostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.PostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskProperties
func (val *ConnectToSourcePostgreSqlSyncTaskProperties) Defaults() *ConnectToSourcePostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourcePostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourcePostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.PostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskPropertiesResponse
func (val *ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) Defaults() *ConnectToSourcePostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerSyncTaskProperties
func (val *ConnectToSourceSqlServerSyncTaskProperties) Defaults() *ConnectToSourceSqlServerSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerSyncTaskPropertiesResponse
func (val *ConnectToSourceSqlServerSyncTaskPropertiesResponse) Defaults() *ConnectToSourceSqlServerSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInput struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases *bool `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo *bool `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskInput
func (val *ConnectToSourceSqlServerTaskInput) Defaults() *ConnectToSourceSqlServerTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.CollectAgentJobs) {
		collectAgentJobs_ := false
		tmp.CollectAgentJobs = &collectAgentJobs_
	}
	if isZero(tmp.CollectDatabases) {
		collectDatabases_ := true
		tmp.CollectDatabases = &collectDatabases_
	}
	if isZero(tmp.CollectLogins) {
		collectLogins_ := false
		tmp.CollectLogins = &collectLogins_
	}
	if isZero(tmp.CollectTdeCertificateInfo) {
		collectTdeCertificateInfo_ := false
		tmp.CollectTdeCertificateInfo = &collectTdeCertificateInfo_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	if isZero(tmp.ValidateSsisCatalogOnly) {
		validateSsisCatalogOnly_ := false
		tmp.ValidateSsisCatalogOnly = &validateSsisCatalogOnly_
	}
	return &tmp
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases *bool `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo *bool `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskInputResponse
func (val *ConnectToSourceSqlServerTaskInputResponse) Defaults() *ConnectToSourceSqlServerTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.CollectAgentJobs) {
		collectAgentJobs_ := false
		tmp.CollectAgentJobs = &collectAgentJobs_
	}
	if isZero(tmp.CollectDatabases) {
		collectDatabases_ := true
		tmp.CollectDatabases = &collectDatabases_
	}
	if isZero(tmp.CollectLogins) {
		collectLogins_ := false
		tmp.CollectLogins = &collectLogins_
	}
	if isZero(tmp.CollectTdeCertificateInfo) {
		collectTdeCertificateInfo_ := false
		tmp.CollectTdeCertificateInfo = &collectTdeCertificateInfo_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	if isZero(tmp.ValidateSsisCatalogOnly) {
		validateSsisCatalogOnly_ := false
		tmp.ValidateSsisCatalogOnly = &validateSsisCatalogOnly_
	}
	return &tmp
}

// Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of Agent Job.
	JobCategory string `pulumi:"jobCategory"`
	// The owner of the Agent Job
	JobOwner string `pulumi:"jobOwner"`
	// UTC Date and time when the Agent Job was last executed.
	LastExecutedOn string `pulumi:"lastExecutedOn"`
	// Information about eligibility of agent job for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Agent Job name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'AgentJobLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse struct {
	// SQL Server compatibility level of database
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles []DatabaseFileInfoResponse `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState string `pulumi:"databaseState"`
	// Result identifier
	Id string `pulumi:"id"`
	// Database name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponse struct {
	// The default database for the login.
	DefaultDatabase string `pulumi:"defaultDatabase"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the login.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of login.
	LoginType string `pulumi:"loginType"`
	// Information about eligibility of login for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Login name.
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'LoginLevelOutput'.
	ResultType string `pulumi:"resultType"`
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponse struct {
	// Source agent jobs as a map from agent job name to id.
	AgentJobs map[string]string `pulumi:"agentJobs"`
	// Mapping from database name to TDE certificate name, if applicable
	DatabaseTdeCertificateMapping map[string]string `pulumi:"databaseTdeCertificateMapping"`
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source logins as a map from login name to login id.
	Logins map[string]string `pulumi:"logins"`
	// Type of result - database level or task level
	// Expected value is 'TaskLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskProperties
func (val *ConnectToSourceSqlServerTaskProperties) Defaults() *ConnectToSourceSqlServerTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskPropertiesResponse
func (val *ConnectToSourceSqlServerTaskPropertiesResponse) Defaults() *ConnectToSourceSqlServerTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInput struct {
	// Flag for whether or not the migration is offline
	IsOfflineMigration *bool `pulumi:"isOfflineMigration"`
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskInput
func (val *ConnectToTargetAzureDbForMySqlTaskInput) Defaults() *ConnectToTargetAzureDbForMySqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsOfflineMigration) {
		isOfflineMigration_ := false
		tmp.IsOfflineMigration = &isOfflineMigration_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputResponse struct {
	// Flag for whether or not the migration is offline
	IsOfflineMigration *bool `pulumi:"isOfflineMigration"`
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskInputResponse
func (val *ConnectToTargetAzureDbForMySqlTaskInputResponse) Defaults() *ConnectToTargetAzureDbForMySqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsOfflineMigration) {
		isOfflineMigration_ := false
		tmp.IsOfflineMigration = &isOfflineMigration_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Output for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskOutputResponse struct {
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Version of the target server
	ServerVersion string `pulumi:"serverVersion"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetAzureDbForMySqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskProperties
func (val *ConnectToTargetAzureDbForMySqlTaskProperties) Defaults() *ConnectToTargetAzureDbForMySqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetAzureDbForMySqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetAzureDbForMySqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskPropertiesResponse
func (val *ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) Defaults() *ConnectToTargetAzureDbForMySqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInput struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskInput
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse struct {
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse struct {
	// Mapping of schemas per database
	DatabaseSchemaMap []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap `pulumi:"databaseSchemaMap"`
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap struct {
	Database *string  `pulumi:"database"`
	Schemas  []string `pulumi:"schemas"`
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInput struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskInput
func (val *ConnectToTargetSqlDbTaskInput) Defaults() *ConnectToTargetSqlDbTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponse struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskInputResponse
func (val *ConnectToTargetSqlDbTaskInputResponse) Defaults() *ConnectToTargetSqlDbTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponse struct {
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskProperties
func (val *ConnectToTargetSqlDbTaskProperties) Defaults() *ConnectToTargetSqlDbTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskPropertiesResponse
func (val *ConnectToTargetSqlDbTaskPropertiesResponse) Defaults() *ConnectToTargetSqlDbTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMISyncTaskOutputResponse struct {
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMISyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInput struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskInput
func (val *ConnectToTargetSqlMITaskInput) Defaults() *ConnectToTargetSqlMITaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.CollectAgentJobs) {
		collectAgentJobs_ := true
		tmp.CollectAgentJobs = &collectAgentJobs_
	}
	if isZero(tmp.CollectLogins) {
		collectLogins_ := true
		tmp.CollectLogins = &collectLogins_
	}
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	if isZero(tmp.ValidateSsisCatalogOnly) {
		validateSsisCatalogOnly_ := false
		tmp.ValidateSsisCatalogOnly = &validateSsisCatalogOnly_
	}
	return &tmp
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponse struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskInputResponse
func (val *ConnectToTargetSqlMITaskInputResponse) Defaults() *ConnectToTargetSqlMITaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.CollectAgentJobs) {
		collectAgentJobs_ := true
		tmp.CollectAgentJobs = &collectAgentJobs_
	}
	if isZero(tmp.CollectLogins) {
		collectLogins_ := true
		tmp.CollectLogins = &collectLogins_
	}
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	if isZero(tmp.ValidateSsisCatalogOnly) {
		validateSsisCatalogOnly_ := false
		tmp.ValidateSsisCatalogOnly = &validateSsisCatalogOnly_
	}
	return &tmp
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponse struct {
	// List of agent jobs on the target server.
	AgentJobs []string `pulumi:"agentJobs"`
	// Result identifier
	Id string `pulumi:"id"`
	// List of logins on the target server.
	Logins []string `pulumi:"logins"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlMITaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskProperties
func (val *ConnectToTargetSqlMITaskProperties) Defaults() *ConnectToTargetSqlMITaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskPropertiesResponse
func (val *ConnectToTargetSqlMITaskPropertiesResponse) Defaults() *ConnectToTargetSqlMITaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInput struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskInput
func (val *ConnectToTargetSqlSqlDbSyncTaskInput) Defaults() *ConnectToTargetSqlSqlDbSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputResponse struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskInputResponse
func (val *ConnectToTargetSqlSqlDbSyncTaskInputResponse) Defaults() *ConnectToTargetSqlSqlDbSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlSqlDbSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskProperties
func (val *ConnectToTargetSqlSqlDbSyncTaskProperties) Defaults() *ConnectToTargetSqlSqlDbSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlSqlDbSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse
func (val *ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) Defaults() *ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Results for checksum based Data Integrity validation results
type DataIntegrityValidationResultResponse struct {
	// List of failed table names of source and target pair
	FailedObjects map[string]string `pulumi:"failedObjects"`
	// List of errors that happened while performing data integrity validation
	ValidationErrors *ValidationErrorResponse `pulumi:"validationErrors"`
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// Information about backup files when existing backup mode is used.
type DatabaseBackupInfoResponse struct {
	// The list of backup files for the current database.
	BackupFiles []string `pulumi:"backupFiles"`
	// Date and time when the backup operation finished.
	BackupFinishDate string `pulumi:"backupFinishDate"`
	// Backup Type.
	BackupType string `pulumi:"backupType"`
	// Database name.
	DatabaseName string `pulumi:"databaseName"`
	// Number of files in the backup set.
	FamilyCount int `pulumi:"familyCount"`
	// Whether the backup set is compressed
	IsCompressed bool `pulumi:"isCompressed"`
	// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
	IsDamaged bool `pulumi:"isDamaged"`
	// Position of current database backup in the file.
	Position int `pulumi:"position"`
}

// Database file specific information
type DatabaseFileInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Database file type
	FileType *string `pulumi:"fileType"`
	// Unique identifier for database file
	Id *string `pulumi:"id"`
	// Logical name of the file
	LogicalName *string `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName *string `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName *string `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB *float64 `pulumi:"sizeMB"`
}

// Project Database Details
type DatabaseInfo struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInput is an input type that accepts DatabaseInfoArgs and DatabaseInfoOutput values.
// You can construct a concrete instance of `DatabaseInfoInput` via:
//
//	DatabaseInfoArgs{...}
type DatabaseInfoInput interface {
	pulumi.Input

	ToDatabaseInfoOutput() DatabaseInfoOutput
	ToDatabaseInfoOutputWithContext(context.Context) DatabaseInfoOutput
}

// Project Database Details
type DatabaseInfoArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return i.ToDatabaseInfoOutputWithContext(context.Background())
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoOutput)
}

// DatabaseInfoArrayInput is an input type that accepts DatabaseInfoArray and DatabaseInfoArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoArrayInput` via:
//
//	DatabaseInfoArray{ DatabaseInfoArgs{...} }
type DatabaseInfoArrayInput interface {
	pulumi.Input

	ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput
	ToDatabaseInfoArrayOutputWithContext(context.Context) DatabaseInfoArrayOutput
}

type DatabaseInfoArray []DatabaseInfoInput

func (DatabaseInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return i.ToDatabaseInfoArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoArrayOutput)
}

// Project Database Details
type DatabaseInfoOutput struct{ *pulumi.OutputState }

func (DatabaseInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return o
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return o
}

// Name of the database
func (o DatabaseInfoOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfo) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) Index(i pulumi.IntInput) DatabaseInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfo {
		return vs[0].([]DatabaseInfo)[vs[1].(int)]
	}).(DatabaseInfoOutput)
}

// Project Database Details
type DatabaseInfoResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// Project Database Details
type DatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return o
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoResponse {
		return vs[0].([]DatabaseInfoResponse)[vs[1].(int)]
	}).(DatabaseInfoResponseOutput)
}

// Summary of database results in the migration
type DatabaseSummaryResultResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// Table properties
type DatabaseTableResponse struct {
	// Indicates whether table is empty or not
	HasRows bool `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name string `pulumi:"name"`
}

// Description about the errors happen while performing migration validation
type ExecutionStatisticsResponse struct {
	// CPU Time in millisecond(s) for the query execution
	CpuTimeMs *float64 `pulumi:"cpuTimeMs"`
	// Time taken in millisecond(s) for executing the query
	ElapsedTimeMs *float64 `pulumi:"elapsedTimeMs"`
	// No. of query executions
	ExecutionCount *float64 `pulumi:"executionCount"`
	// Indicates whether the query resulted in an error
	HasErrors *bool `pulumi:"hasErrors"`
	// List of sql Errors
	SqlErrors []string `pulumi:"sqlErrors"`
	// Dictionary of sql query execution wait types and the respective statistics
	WaitStats map[string]WaitStatisticsResponse `pulumi:"waitStats"`
}

// File share information with Path, Username, and Password.
type FileShare struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// File share information with Path, Username, and Password.
type FileShareResponse struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInput struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShare `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates []SelectedCertificateInput `pulumi:"selectedCertificates"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskInput
func (val *GetTdeCertificatesSqlTaskInput) Defaults() *GetTdeCertificatesSqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputResponse struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShareResponse `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates []SelectedCertificateInputResponse `pulumi:"selectedCertificates"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskInputResponse
func (val *GetTdeCertificatesSqlTaskInputResponse) Defaults() *GetTdeCertificatesSqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Output of the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskOutputResponse struct {
	// Mapping from certificate name to base 64 encoded format.
	Base64EncodedCertificates map[string][]string `pulumi:"base64EncodedCertificates"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetTdeCertificatesSqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetTDECertificates.Sql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskProperties
func (val *GetTdeCertificatesSqlTaskProperties) Defaults() *GetTdeCertificatesSqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetTdeCertificatesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetTdeCertificatesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetTDECertificates.Sql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskPropertiesResponse
func (val *GetTdeCertificatesSqlTaskPropertiesResponse) Defaults() *GetTdeCertificatesSqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskInput struct {
	// Connection information for SQL Server
	ConnectionInfo MySqlConnectionInfo `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskInput
func (val *GetUserTablesMySqlTaskInput) Defaults() *GetUserTablesMySqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskInputResponse struct {
	// Connection information for SQL Server
	ConnectionInfo MySqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskInputResponse
func (val *GetUserTablesMySqlTaskInputResponse) Defaults() *GetUserTablesMySqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskOutputResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables map[string][]DatabaseTableResponse `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesMySqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskProperties
func (val *GetUserTablesMySqlTaskProperties) Defaults() *GetUserTablesMySqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesMySqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesMySqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTablesMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskPropertiesResponse
func (val *GetUserTablesMySqlTaskPropertiesResponse) Defaults() *GetUserTablesMySqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInput struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfo `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas []string `pulumi:"selectedSchemas"`
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputResponse struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas []string `pulumi:"selectedSchemas"`
}

// Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskOutputResponse struct {
	// The schema this result is for
	SchemaName string `pulumi:"schemaName"`
	// List of valid tables found for this schema
	Tables []DatabaseTableResponse `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesOracleTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesOracle'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesOracleTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesOracleTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTablesOracle'.
	TaskType string `pulumi:"taskType"`
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInput struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfo `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskInput
func (val *GetUserTablesPostgreSqlTaskInput) Defaults() *GetUserTablesPostgreSqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputResponse struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskInputResponse
func (val *GetUserTablesPostgreSqlTaskInputResponse) Defaults() *GetUserTablesPostgreSqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskOutputResponse struct {
	// The database this result is for
	DatabaseName string `pulumi:"databaseName"`
	// List of valid tables found for this database
	Tables []DatabaseTableResponse `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesPostgreSqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesPostgreSql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskProperties
func (val *GetUserTablesPostgreSqlTaskProperties) Defaults() *GetUserTablesPostgreSqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesPostgreSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesPostgreSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTablesPostgreSql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskPropertiesResponse
func (val *GetUserTablesPostgreSqlTaskPropertiesResponse) Defaults() *GetUserTablesPostgreSqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInput struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases []string `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases []string `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskInput
func (val *GetUserTablesSqlSyncTaskInput) Defaults() *GetUserTablesSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputResponse struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases []string `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases []string `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskInputResponse
func (val *GetUserTablesSqlSyncTaskInputResponse) Defaults() *GetUserTablesSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskOutputResponse struct {
	// Mapping from database name to list of source tables
	DatabasesToSourceTables map[string][]DatabaseTableResponse `pulumi:"databasesToSourceTables"`
	// Mapping from database name to list of target tables
	DatabasesToTargetTables map[string][]DatabaseTableResponse `pulumi:"databasesToTargetTables"`
	// Mapping from database name to list of validation errors
	TableValidationErrors map[string][]string `pulumi:"tableValidationErrors"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTables.AzureSqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskProperties
func (val *GetUserTablesSqlSyncTaskProperties) Defaults() *GetUserTablesSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTables.AzureSqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskPropertiesResponse
func (val *GetUserTablesSqlSyncTaskPropertiesResponse) Defaults() *GetUserTablesSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInput struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskInput
func (val *GetUserTablesSqlTaskInput) Defaults() *GetUserTablesSqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponse struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskInputResponse
func (val *GetUserTablesSqlTaskInputResponse) Defaults() *GetUserTablesSqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables map[string][]DatabaseTableResponse `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesSqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskProperties
func (val *GetUserTablesSqlTaskProperties) Defaults() *GetUserTablesSqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskPropertiesResponse
func (val *GetUserTablesSqlTaskPropertiesResponse) Defaults() *GetUserTablesSqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfo struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId string `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	// Expected value is 'MiSqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoResponse struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId string `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	// Expected value is 'MiSqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Input for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandInputResponse struct {
	// Name of managed instance database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// Output for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandOutputResponse struct {
	// List of errors that happened during the command execution
	Errors []ReportableExceptionResponse `pulumi:"errors"`
}

// Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandPropertiesResponse struct {
	// Command type.
	// Expected value is 'Migrate.SqlServer.AzureDbSqlMi.Complete'.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Command input
	Input *MigrateMISyncCompleteCommandInputResponse `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateMISyncCompleteCommandOutputResponse `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettings `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input  *MongoDbMigrationSettingsResponse `pulumi:"input"`
	Output []interface{}                     `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInput struct {
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse struct {
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskInput struct {
	// Setting to set the source server read only
	MakeSourceServerReadOnly *bool `pulumi:"makeSourceServerReadOnly"`
	// Optional parameters for fine tuning the data transfer rate during migration
	OptionalAgentSettings map[string]string `pulumi:"optionalAgentSettings"`
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlOfflineDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Parameter to specify when the migration started
	StartedOn *string `pulumi:"startedOn"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskInput
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskInput) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MakeSourceServerReadOnly) {
		makeSourceServerReadOnly_ := false
		tmp.MakeSourceServerReadOnly = &makeSourceServerReadOnly_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse struct {
	// Setting to set the source server read only
	MakeSourceServerReadOnly *bool `pulumi:"makeSourceServerReadOnly"`
	// Optional parameters for fine tuning the data transfer rate during migration
	OptionalAgentSettings map[string]string `pulumi:"optionalAgentSettings"`
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Parameter to specify when the migration started
	StartedOn *string `pulumi:"startedOn"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MakeSourceServerReadOnly) {
		makeSourceServerReadOnly_ := false
		tmp.MakeSourceServerReadOnly = &makeSourceServerReadOnly_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount float64 `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last time the storage was updated
	LastStorageUpdate string `pulumi:"lastStorageUpdate"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects float64 `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted float64 `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary map[string]DataItemMigrationSummaryResultResponse `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse struct {
	// Summary of database results in the migration
	DatabaseSummary map[string]DatabaseSummaryResultResponse `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds float64 `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last time the storage was updated
	LastStorageUpdate string `pulumi:"lastStorageUpdate"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultResponse `pulumi:"migrationReportResult"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Last time the storage was updated
	LastStorageUpdate string `pulumi:"lastStorageUpdate"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlOfflineTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskProperties
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskProperties) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInput struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskInput
func (val *MigrateMySqlAzureDbForMySqlSyncTaskInput) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskInputResponse
func (val *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'DatabaseLevelErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges float64 `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables float64 `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables float64 `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables float64 `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables float64 `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges float64 `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency float64 `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter string `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter string `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter string `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter float64 `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows float64 `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied float64 `pulumi:"totalChangesApplied"`
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskProperties
func (val *MigrateMySqlAzureDbForMySqlSyncTaskProperties) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse
func (val *MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbForPostgreSqlSyncTaskProperties
func (val *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) Defaults() *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInput struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation *string `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name *string `pulumi:"name"`
	// Name of the source schema
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation *string `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name *string `pulumi:"name"`
	// Name of the source schema
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateOracleAzureDbPostgreSqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbPostgreSqlSyncTaskInput
func (val *MigrateOracleAzureDbPostgreSqlSyncTaskInput) Defaults() *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse
func (val *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) Defaults() *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'DatabaseLevelErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges float64 `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables float64 `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables float64 `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables float64 `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables float64 `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges float64 `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency float64 `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter float64 `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows float64 `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied float64 `pulumi:"totalChangesApplied"`
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Tables selected for migration
	SelectedTables []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Tables selected for migration
	SelectedTables []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput struct {
	// Name of the table to migrate
	Name *string `pulumi:"name"`
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse struct {
	// Name of the table to migrate
	Name *string `pulumi:"name"`
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'DatabaseLevelErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges float64 `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables float64 `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables float64 `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables float64 `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables float64 `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges float64 `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency float64 `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server type.
	SourceServerType string `pulumi:"sourceServerType"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Migration status
	State string `pulumi:"state"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server type.
	TargetServerType string `pulumi:"targetServerType"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter float64 `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows float64 `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied float64 `pulumi:"totalChangesApplied"`
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInput struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponse struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInput struct {
	// Unique identifier for database
	Id *string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of database
	Name *string `pulumi:"name"`
	// Schema name to be migrated
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputResponse struct {
	// Unique identifier for database
	Id *string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of database
	Name *string `pulumi:"name"`
	// Schema name to be migrated
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskInput
func (val *MigrateSqlServerSqlDbSyncTaskInput) Defaults() *MigrateSqlServerSqlDbSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskInputResponse
func (val *MigrateSqlServerSqlDbSyncTaskInputResponse) Defaults() *MigrateSqlServerSqlDbSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'DatabaseLevelErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges float64 `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables float64 `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables float64 `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables float64 `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables float64 `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges float64 `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency float64 `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateSqlServerSqlDbSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse struct {
	// Count of databases
	DatabaseCount int `pulumi:"databaseCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter float64 `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows float64 `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied float64 `pulumi:"totalChangesApplied"`
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlDbSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskProperties
func (val *MigrateSqlServerSqlDbSyncTaskProperties) Defaults() *MigrateSqlServerSqlDbSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskPropertiesResponse
func (val *MigrateSqlServerSqlDbSyncTaskPropertiesResponse) Defaults() *MigrateSqlServerSqlDbSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskInput
func (val *MigrateSqlServerSqlDbTaskInput) Defaults() *MigrateSqlServerSqlDbTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskInputResponse
func (val *MigrateSqlServerSqlDbTaskInputResponse) Defaults() *MigrateSqlServerSqlDbTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse struct {
	// Name of the item
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount float64 `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects float64 `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted float64 `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary map[string]DataItemMigrationSummaryResultResponse `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse struct {
	// Provides data integrity validation result between the source and target tables that are migrated.
	DataIntegrityValidationResult DataIntegrityValidationResultResponse `pulumi:"dataIntegrityValidationResult"`
	// Validation end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Results of some of the query execution result between source and target database
	QueryAnalysisValidationResult QueryAnalysisValidationResultResponse `pulumi:"queryAnalysisValidationResult"`
	// Result type
	// Expected value is 'MigrationDatabaseLevelValidationOutput'.
	ResultType string `pulumi:"resultType"`
	// Provides schema comparison result between source and target database
	SchemaValidationResult SchemaComparisonValidationResultResponse `pulumi:"schemaValidationResult"`
	// Name of the source database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Validation start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of validation at the database level
	Status string `pulumi:"status"`
	// Name of the target database
	TargetDatabaseName string `pulumi:"targetDatabaseName"`
}

type MigrateSqlServerSqlDbTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse struct {
	// Summary of database results in the migration
	DatabaseSummary map[string]DatabaseSummaryResultResponse `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds float64 `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultResponse `pulumi:"migrationReportResult"`
	// Migration Validation Results
	MigrationValidationResult *MigrationValidationResultResponse `pulumi:"migrationValidationResult"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponse struct {
	// Migration validation result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Result type
	// Expected value is 'MigrationValidationOutput'.
	ResultType string `pulumi:"resultType"`
	// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
	Status string `pulumi:"status"`
	// Validation summary results for each database
	SummaryResults map[string]MigrationValidationDatabaseSummaryResultResponse `pulumi:"summaryResults"`
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskProperties
func (val *MigrateSqlServerSqlDbTaskProperties) Defaults() *MigrateSqlServerSqlDbTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskPropertiesResponse
func (val *MigrateSqlServerSqlDbTaskPropertiesResponse) Defaults() *MigrateSqlServerSqlDbTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInput struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths []string `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponse struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths []string `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskInput
func (val *MigrateSqlServerSqlMISyncTaskInput) Defaults() *MigrateSqlServerSqlMISyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskInputResponse
func (val *MigrateSqlServerSqlMISyncTaskInputResponse) Defaults() *MigrateSqlServerSqlMISyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse struct {
	// Backup sets that are currently active (Either being uploaded or getting restored)
	ActiveBackupSets []BackupSetInfoResponse `pulumi:"activeBackupSets"`
	// Name of container created in the Azure Storage account where backups are copied to
	ContainerName string `pulumi:"containerName"`
	// Database migration end time
	EndedOn string `pulumi:"endedOn"`
	// prefix string to use for querying errors for this database
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Details of full backup set
	FullBackupSetInfo BackupSetInfoResponse `pulumi:"fullBackupSetInfo"`
	// Result identifier
	Id string `pulumi:"id"`
	// Whether full backup has been applied to the target database or not
	IsFullBackupRestored bool `pulumi:"isFullBackupRestored"`
	// Last applied backup set information
	LastRestoredBackupSetInfo BackupSetInfoResponse `pulumi:"lastRestoredBackupSetInfo"`
	// Current state of database
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Database migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateSqlServerSqlMISyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse struct {
	// Count of databases
	DatabaseCount int `pulumi:"databaseCount"`
	// Number of database level errors
	DatabaseErrorCount int `pulumi:"databaseErrorCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server name
	SourceServerName string `pulumi:"sourceServerName"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server name
	TargetServerName string `pulumi:"targetServerName"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskProperties
func (val *MigrateSqlServerSqlMISyncTaskProperties) Defaults() *MigrateSqlServerSqlMISyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskPropertiesResponse
func (val *MigrateSqlServerSqlMISyncTaskPropertiesResponse) Defaults() *MigrateSqlServerSqlMISyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInput struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName *string `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode *string `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskInput
func (val *MigrateSqlServerSqlMITaskInput) Defaults() *MigrateSqlServerSqlMITaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponse struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName *string `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode *string `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskInputResponse
func (val *MigrateSqlServerSqlMITaskInputResponse) Defaults() *MigrateSqlServerSqlMITaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration errors and warnings per job
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled bool `pulumi:"isEnabled"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Agent Job name.
	Name string `pulumi:"name"`
	// Result type
	// Expected value is 'AgentJobLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Current stage of migration
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponse struct {
	// Login migration end time
	EndedOn string `pulumi:"endedOn"`
	// Login migration errors and warnings per login
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Login name.
	LoginName string `pulumi:"loginName"`
	// Login migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'LoginLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current stage of login
	Stage string `pulumi:"stage"`
	// Login migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of login
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponse struct {
	// Selected agent jobs as a map from name to id
	AgentJobs map[string]string `pulumi:"agentJobs"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Selected logins as a map from name to id
	Logins map[string]string `pulumi:"logins"`
	// Migration progress message
	Message string `pulumi:"message"`
	// List of orphaned users.
	OrphanedUsersInfo []OrphanedUserInfoResponse `pulumi:"orphanedUsersInfo"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Map of server role migration results.
	ServerRoleResults map[string]StartMigrationScenarioServerRoleResultResponse `pulumi:"serverRoleResults"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskProperties
func (val *MigrateSqlServerSqlMITaskProperties) Defaults() *MigrateSqlServerSqlMITaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskPropertiesResponse
func (val *MigrateSqlServerSqlMITaskPropertiesResponse) Defaults() *MigrateSqlServerSqlMITaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInput struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfo `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskInput
func (val *MigrateSsisTaskInput) Defaults() *MigrateSsisTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputResponse struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfoResponse `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskInputResponse
func (val *MigrateSsisTaskInputResponse) Defaults() *MigrateSsisTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

type MigrateSsisTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Stage of SSIS migration.
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSsisTaskOutputProjectLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Name of the folder
	FolderName string `pulumi:"folderName"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Name of the project
	ProjectName string `pulumi:"projectName"`
	// Result type
	// Expected value is 'SsisProjectLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Stage of SSIS migration.
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSsisTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.Ssis'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskProperties
func (val *MigrateSsisTaskProperties) Defaults() *MigrateSsisTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSsisTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.Ssis'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskPropertiesResponse
func (val *MigrateSsisTaskPropertiesResponse) Defaults() *MigrateSsisTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for command that completes sync migration for a database.
type MigrateSyncCompleteCommandInputResponse struct {
	// Time stamp to complete
	CommitTimeStamp *string `pulumi:"commitTimeStamp"`
	// Name of database
	DatabaseName string `pulumi:"databaseName"`
}

// Output for command that completes sync migration for a database.
type MigrateSyncCompleteCommandOutputResponse struct {
	// List of errors that happened during the command execution
	Errors []ReportableExceptionResponse `pulumi:"errors"`
	// Result identifier
	Id string `pulumi:"id"`
}

// Properties for the command that completes sync migration for a database.
type MigrateSyncCompleteCommandPropertiesResponse struct {
	// Command type.
	// Expected value is 'Migrate.Sync.Complete.Database'.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Command input
	Input *MigrateSyncCompleteCommandInputResponse `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateSyncCompleteCommandOutputResponse `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponse struct {
	// Whether object is eligible for migration or not.
	IsEligibleForMigration bool `pulumi:"isEligibleForMigration"`
	// Information about eligibility failure for the server object.
	ValidationMessages []string `pulumi:"validationMessages"`
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponse struct {
	// Migration validation result identifier
	Id *string `pulumi:"id"`
	// The url of the report.
	ReportUrl *string `pulumi:"reportUrl"`
}

// Migration Validation Database level summary result
type MigrationValidationDatabaseSummaryResultResponse struct {
	// Validation end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Name of the source database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Validation start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of validation at the database level
	Status string `pulumi:"status"`
	// Name of the target database
	TargetDatabaseName string `pulumi:"targetDatabaseName"`
}

// Types of validations to run after the migration
type MigrationValidationOptions struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponse struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// Migration Validation Result
type MigrationValidationResultResponse struct {
	// Migration validation result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
	Status string `pulumi:"status"`
	// Validation summary results for each database
	SummaryResults map[string]MigrationValidationDatabaseSummaryResultResponse `pulumi:"summaryResults"`
}

// Describes a MongoDB data source
type MongoDbClusterInfoResponse struct {
	// A list of non-system databases in the cluster
	Databases []MongoDbDatabaseInfoResponse `pulumi:"databases"`
	// Whether the cluster supports sharded collections
	SupportsSharding bool `pulumi:"supportsSharding"`
	// The type of data source
	Type string `pulumi:"type"`
	// The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
	Version string `pulumi:"version"`
}

// Describes a supported collection within a MongoDB database
type MongoDbCollectionInfoResponse struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize float64 `pulumi:"averageDocumentSize"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize float64 `pulumi:"dataSize"`
	// The name of the database containing the collection
	DatabaseName string `pulumi:"databaseName"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount float64 `pulumi:"documentCount"`
	// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
	IsCapped bool `pulumi:"isCapped"`
	// Whether the collection is system collection
	IsSystemCollection bool `pulumi:"isSystemCollection"`
	// Whether the collection is a view of another collection
	IsView bool `pulumi:"isView"`
	// The unqualified name of the database or collection
	Name string `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName string `pulumi:"qualifiedName"`
	// The shard key on the collection, or null if the collection is not sharded
	ShardKey *MongoDbShardKeyInfoResponse `pulumi:"shardKey"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding bool `pulumi:"supportsSharding"`
	// The name of the collection that this is a view of, if IsView is true
	ViewOf *string `pulumi:"viewOf"`
}

// Describes the progress of a collection
type MongoDbCollectionProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied float64 `pulumi:"bytesCopied"`
	// The number of documents copied during the Copying stage
	DocumentsCopied float64 `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending float64 `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed float64 `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	// Expected value is 'Collection'.
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes float64 `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments float64 `pulumi:"totalDocuments"`
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettings struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete *bool `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey *MongoDbShardKeySetting `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsResponse struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete *bool `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey *MongoDbShardKeySettingResponse `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfo struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString string `pulumi:"connectionString"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	// Expected value is 'MongoDbConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoResponse struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString string `pulumi:"connectionString"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	// Expected value is 'MongoDbConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Describes a database within a MongoDB data source
type MongoDbDatabaseInfoResponse struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize float64 `pulumi:"averageDocumentSize"`
	// A list of supported collections in a MongoDB database
	Collections []MongoDbCollectionInfoResponse `pulumi:"collections"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize float64 `pulumi:"dataSize"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount float64 `pulumi:"documentCount"`
	// The unqualified name of the database or collection
	Name string `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName string `pulumi:"qualifiedName"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding bool `pulumi:"supportsSharding"`
}

// Describes the progress of a database
type MongoDbDatabaseProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied float64 `pulumi:"bytesCopied"`
	// The progress of the collections in the database. The keys are the unqualified names of the collections
	Collections map[string]MongoDbCollectionProgressResponse `pulumi:"collections"`
	// The number of documents copied during the Copying stage
	DocumentsCopied float64 `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending float64 `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed float64 `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	// Expected value is 'Database'.
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes float64 `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments float64 `pulumi:"totalDocuments"`
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettings struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections map[string]MongoDbCollectionSettings `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsResponse struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections map[string]MongoDbCollectionSettingsResponse `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// Describes an error or warning that occurred during a MongoDB migration
type MongoDbErrorResponse struct {
	// The non-localized, machine-readable code that describes the error or warning
	Code *string `pulumi:"code"`
	// The number of times the error or warning has occurred
	Count *int `pulumi:"count"`
	// The localized, human-readable message that describes the error or warning
	Message *string `pulumi:"message"`
	// The type of error or warning
	Type *string `pulumi:"type"`
}

// Describes the progress of the overall migration
type MongoDbMigrationProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied float64 `pulumi:"bytesCopied"`
	// The progress of the databases in the migration. The keys are the names of the databases
	Databases map[string]MongoDbDatabaseProgressResponse `pulumi:"databases"`
	// The number of documents copied during the Copying stage
	DocumentsCopied float64 `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending float64 `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed float64 `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	// Expected value is 'Migration'.
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes float64 `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments float64 `pulumi:"totalDocuments"`
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettings struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs *int `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases map[string]MongoDbDatabaseSettings `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication *string `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfo `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfo `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling *MongoDbThrottlingSettings `pulumi:"throttling"`
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsResponse struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs *int `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases map[string]MongoDbDatabaseSettingsResponse `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication *string `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfoResponse `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfoResponse `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling *MongoDbThrottlingSettingsResponse `pulumi:"throttling"`
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyField struct {
	// The name of the field
	Name string `pulumi:"name"`
	// The field ordering
	Order string `pulumi:"order"`
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldResponse struct {
	// The name of the field
	Name string `pulumi:"name"`
	// The field ordering
	Order string `pulumi:"order"`
}

// Describes a MongoDB shard key
type MongoDbShardKeyInfoResponse struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyFieldResponse `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// Describes a MongoDB shard key
type MongoDbShardKeySetting struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyField `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingResponse struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyFieldResponse `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettings struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism *int `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu *int `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb *int `pulumi:"minFreeMemoryMb"`
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsResponse struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism *int `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu *int `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb *int `pulumi:"minFreeMemoryMb"`
}

// Information for connecting to MySQL server
type MySqlConnectionInfo struct {
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Type of connection info
	// Expected value is 'MySqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for MySqlConnectionInfo
func (val *MySqlConnectionInfo) Defaults() *MySqlConnectionInfo {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.EncryptConnection) {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	return &tmp
}

// Information for connecting to MySQL server
type MySqlConnectionInfoResponse struct {
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Type of connection info
	// Expected value is 'MySqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for MySqlConnectionInfoResponse
func (val *MySqlConnectionInfoResponse) Defaults() *MySqlConnectionInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.EncryptConnection) {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	return &tmp
}

// Error information in OData format.
type ODataErrorResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code *string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorResponse `pulumi:"details"`
	// The human-readable description of the error
	Message *string `pulumi:"message"`
}

// Information for connecting to Oracle server
type OracleConnectionInfo struct {
	// EZConnect or TNSName connection string.
	DataSource string `pulumi:"dataSource"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	// Expected value is 'OracleConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Information for connecting to Oracle server
type OracleConnectionInfoResponse struct {
	// EZConnect or TNSName connection string.
	DataSource string `pulumi:"dataSource"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	// Expected value is 'OracleConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Information of orphaned users on the SQL server database.
type OrphanedUserInfoResponse struct {
	// Parent database of the user
	DatabaseName *string `pulumi:"databaseName"`
	// Name of the orphaned user
	Name *string `pulumi:"name"`
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfo struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'PostgreSqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for PostgreSqlConnectionInfo
func (val *PostgreSqlConnectionInfo) Defaults() *PostgreSqlConnectionInfo {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.EncryptConnection) {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	if isZero(tmp.TrustServerCertificate) {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'PostgreSqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for PostgreSqlConnectionInfoResponse
func (val *PostgreSqlConnectionInfoResponse) Defaults() *PostgreSqlConnectionInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.EncryptConnection) {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	if isZero(tmp.TrustServerCertificate) {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// Base class for file properties.
type ProjectFileProperties struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension *string `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath *string `pulumi:"filePath"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType *string `pulumi:"mediaType"`
}

// ProjectFilePropertiesInput is an input type that accepts ProjectFilePropertiesArgs and ProjectFilePropertiesOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesInput` via:
//
//	ProjectFilePropertiesArgs{...}
type ProjectFilePropertiesInput interface {
	pulumi.Input

	ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput
	ToProjectFilePropertiesOutputWithContext(context.Context) ProjectFilePropertiesOutput
}

// Base class for file properties.
type ProjectFilePropertiesArgs struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension pulumi.StringPtrInput `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
}

func (ProjectFilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileProperties)(nil)).Elem()
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput {
	return i.ToProjectFilePropertiesOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesOutputWithContext(ctx context.Context) ProjectFilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesOutput)
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return i.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesOutput).ToProjectFilePropertiesPtrOutputWithContext(ctx)
}

// ProjectFilePropertiesPtrInput is an input type that accepts ProjectFilePropertiesArgs, ProjectFilePropertiesPtr and ProjectFilePropertiesPtrOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesPtrInput` via:
//
//	        ProjectFilePropertiesArgs{...}
//
//	or:
//
//	        nil
type ProjectFilePropertiesPtrInput interface {
	pulumi.Input

	ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput
	ToProjectFilePropertiesPtrOutputWithContext(context.Context) ProjectFilePropertiesPtrOutput
}

type projectFilePropertiesPtrType ProjectFilePropertiesArgs

func ProjectFilePropertiesPtr(v *ProjectFilePropertiesArgs) ProjectFilePropertiesPtrInput {
	return (*projectFilePropertiesPtrType)(v)
}

func (*projectFilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFileProperties)(nil)).Elem()
}

func (i *projectFilePropertiesPtrType) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return i.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (i *projectFilePropertiesPtrType) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesPtrOutput)
}

// Base class for file properties.
type ProjectFilePropertiesOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileProperties)(nil)).Elem()
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput {
	return o
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesOutputWithContext(ctx context.Context) ProjectFilePropertiesOutput {
	return o
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return o.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectFileProperties) *ProjectFileProperties {
		return &v
	}).(ProjectFilePropertiesPtrOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

type ProjectFilePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFileProperties)(nil)).Elem()
}

func (o ProjectFilePropertiesPtrOutput) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return o
}

func (o ProjectFilePropertiesPtrOutput) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return o
}

func (o ProjectFilePropertiesPtrOutput) Elem() ProjectFilePropertiesOutput {
	return o.ApplyT(func(v *ProjectFileProperties) ProjectFileProperties {
		if v != nil {
			return *v
		}
		var ret ProjectFileProperties
		return ret
	}).(ProjectFilePropertiesOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesPtrOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.Extension
	}).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesPtrOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.FilePath
	}).(pulumi.StringPtrOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Base class for file properties.
type ProjectFilePropertiesResponse struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension *string `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath *string `pulumi:"filePath"`
	// Modification DateTime.
	LastModified string `pulumi:"lastModified"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType *string `pulumi:"mediaType"`
	// File size.
	Size float64 `pulumi:"size"`
}

// Base class for file properties.
type ProjectFilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFilePropertiesResponse)(nil)).Elem()
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponseOutput() ProjectFilePropertiesResponseOutput {
	return o
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponseOutputWithContext(ctx context.Context) ProjectFilePropertiesResponseOutput {
	return o
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesResponseOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Modification DateTime.
func (o ProjectFilePropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesResponseOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// File size.
func (o ProjectFilePropertiesResponseOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) float64 { return v.Size }).(pulumi.Float64Output)
}

// Results for query analysis comparison between the source and target
type QueryAnalysisValidationResultResponse struct {
	// List of queries executed and it's execution results in source and target
	QueryResults *QueryExecutionResultResponse `pulumi:"queryResults"`
	// Errors that are part of the execution
	ValidationErrors *ValidationErrorResponse `pulumi:"validationErrors"`
}

// Describes query analysis results for execution in source and target
type QueryExecutionResultResponse struct {
	// Query text retrieved from the source server
	QueryText *string `pulumi:"queryText"`
	// Query analysis result from the source
	SourceResult *ExecutionStatisticsResponse `pulumi:"sourceResult"`
	// Total no. of statements in the batch
	StatementsInBatch *float64 `pulumi:"statementsInBatch"`
	// Query analysis result from the target
	TargetResult *ExecutionStatisticsResponse `pulumi:"targetResult"`
}

// Exception object for all custom exceptions
type ReportableExceptionResponse struct {
	// Actionable steps for this exception
	ActionableMessage *string `pulumi:"actionableMessage"`
	// The path to the file where exception occurred
	FilePath *string `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult *int `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber *string `pulumi:"lineNumber"`
	// Error message
	Message *string `pulumi:"message"`
	// Stack trace
	StackTrace *string `pulumi:"stackTrace"`
}

// Results for schema comparison between the source and target
type SchemaComparisonValidationResultResponse struct {
	// List of schema differences between the source and target databases
	SchemaDifferences *SchemaComparisonValidationResultTypeResponse `pulumi:"schemaDifferences"`
	// Count of source database objects
	SourceDatabaseObjectCount map[string]float64 `pulumi:"sourceDatabaseObjectCount"`
	// Count of target database objects
	TargetDatabaseObjectCount map[string]float64 `pulumi:"targetDatabaseObjectCount"`
	// List of errors that happened while performing schema compare validation
	ValidationErrors *ValidationErrorResponse `pulumi:"validationErrors"`
}

// Description about the errors happen while performing migration validation
type SchemaComparisonValidationResultTypeResponse struct {
	// Name of the object that has the difference
	ObjectName *string `pulumi:"objectName"`
	// Type of the object that has the difference. e.g (Table/View/StoredProcedure)
	ObjectType *string `pulumi:"objectType"`
	// Update action type with respect to target
	UpdateAction *string `pulumi:"updateAction"`
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInput struct {
	// Name of certificate to be exported.
	CertificateName string `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password string `pulumi:"password"`
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputResponse struct {
	// Name of certificate to be exported.
	CertificateName string `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password string `pulumi:"password"`
}

// Server properties for MySQL type source
type ServerPropertiesResponse struct {
	// Number of databases in the server
	ServerDatabaseCount int `pulumi:"serverDatabaseCount"`
	// Edition of the database server
	ServerEdition string `pulumi:"serverEdition"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Version of the operating system
	ServerOperatingSystemVersion string `pulumi:"serverOperatingSystemVersion"`
	// Name of the server platform
	ServerPlatform string `pulumi:"serverPlatform"`
	// Version of the database server
	ServerVersion string `pulumi:"serverVersion"`
}

// An Azure SKU instance
type ServiceSku struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInput is an input type that accepts ServiceSkuArgs and ServiceSkuOutput values.
// You can construct a concrete instance of `ServiceSkuInput` via:
//
//	ServiceSkuArgs{...}
type ServiceSkuInput interface {
	pulumi.Input

	ToServiceSkuOutput() ServiceSkuOutput
	ToServiceSkuOutputWithContext(context.Context) ServiceSkuOutput
}

// An Azure SKU instance
type ServiceSkuArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (i ServiceSkuArgs) ToServiceSkuOutput() ServiceSkuOutput {
	return i.ToServiceSkuOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput)
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput).ToServiceSkuPtrOutputWithContext(ctx)
}

// ServiceSkuPtrInput is an input type that accepts ServiceSkuArgs, ServiceSkuPtr and ServiceSkuPtrOutput values.
// You can construct a concrete instance of `ServiceSkuPtrInput` via:
//
//	        ServiceSkuArgs{...}
//
//	or:
//
//	        nil
type ServiceSkuPtrInput interface {
	pulumi.Input

	ToServiceSkuPtrOutput() ServiceSkuPtrOutput
	ToServiceSkuPtrOutputWithContext(context.Context) ServiceSkuPtrOutput
}

type serviceSkuPtrType ServiceSkuArgs

func ServiceSkuPtr(v *ServiceSkuArgs) ServiceSkuPtrInput {
	return (*serviceSkuPtrType)(v)
}

func (*serviceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuPtrOutput)
}

// An Azure SKU instance
type ServiceSkuOutput struct{ *pulumi.OutputState }

func (ServiceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (o ServiceSkuOutput) ToServiceSkuOutput() ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceSku) *ServiceSku {
		return &v
	}).(ServiceSkuPtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuPtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) Elem() ServiceSkuOutput {
	return o.ApplyT(func(v *ServiceSku) ServiceSku {
		if v != nil {
			return *v
		}
		var ret ServiceSku
		return ret
	}).(ServiceSkuOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier *string `pulumi:"tier"`
}

// An Azure SKU instance
type ServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return o
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) Elem() ServiceSkuResponseOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) ServiceSkuResponse {
		if v != nil {
			return *v
		}
		var ret ServiceSkuResponse
		return ret
	}).(ServiceSkuResponseOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Server platform type for connection
	Platform *string `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for SqlConnectionInfo
func (val *SqlConnectionInfo) Defaults() *SqlConnectionInfo {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.EncryptConnection) {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	if isZero(tmp.TrustServerCertificate) {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Server platform type for connection
	Platform *string `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for SqlConnectionInfoResponse
func (val *SqlConnectionInfoResponse) Defaults() *SqlConnectionInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.EncryptConnection) {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	if isZero(tmp.TrustServerCertificate) {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfo struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption *string `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption *string `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType *string `pulumi:"ssisStoreType"`
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoResponse struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption *string `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption *string `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType *string `pulumi:"ssisStoreType"`
}

// Server role migration result
type StartMigrationScenarioServerRoleResultResponse struct {
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Name of server role.
	Name string `pulumi:"name"`
	// Current state of migration
	State string `pulumi:"state"`
}

// Database migration errors for online migration
type SyncMigrationDatabaseErrorEventResponse struct {
	// Event text.
	EventText string `pulumi:"eventText"`
	// Event type.
	EventTypeString string `pulumi:"eventTypeString"`
	// String value of timestamp.
	TimestampString string `pulumi:"timestampString"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateSyncMigrationInputSqlServerTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlDbSyncTaskProperties
func (val *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) Defaults() *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateSyncMigrationInputSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateSyncMigrationInputSqlServerTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse
func (val *ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) Defaults() *ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskInput
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskInput) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Output for task that validates migration input for Azure SQL Database Managed Instance online migration
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse struct {
	// Database identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskProperties
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskProperties) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInput struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode *string `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskInput
func (val *ValidateMigrationInputSqlServerSqlMITaskInput) Defaults() *ValidateMigrationInputSqlServerSqlMITaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode *string `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskInputResponse
func (val *ValidateMigrationInputSqlServerSqlMITaskInputResponse) Defaults() *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponse struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors []ReportableExceptionResponse `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors []ReportableExceptionResponse `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors []ReportableExceptionResponse `pulumi:"backupStorageAccountErrors"`
	// Information about backup files when existing backup mode is used.
	DatabaseBackupInfo *DatabaseBackupInfoResponse `pulumi:"databaseBackupInfo"`
	// Errors associated with existing backup files.
	ExistingBackupErrors []ReportableExceptionResponse `pulumi:"existingBackupErrors"`
	// Result identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors []ReportableExceptionResponse `pulumi:"restoreDatabaseNameErrors"`
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskProperties
func (val *ValidateMigrationInputSqlServerSqlMITaskProperties) Defaults() *ValidateMigrationInputSqlServerSqlMITaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse
func (val *ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) Defaults() *ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettings `pulumi:"input"`
	// Task type.
	// Expected value is 'Validate.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettingsResponse `pulumi:"input"`
	// An array containing a single MongoDbMigrationProgress object
	Output []MongoDbMigrationProgressResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Validate.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateOracleAzureDbForPostgreSqlSyncTaskProperties
func (val *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) Defaults() *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// An array containing a single validation error response object
	Output []ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse struct {
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateSyncMigrationInputSqlServerTaskInput
func (val *ValidateSyncMigrationInputSqlServerTaskInput) Defaults() *ValidateSyncMigrationInputSqlServerTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateSyncMigrationInputSqlServerTaskInputResponse
func (val *ValidateSyncMigrationInputSqlServerTaskInputResponse) Defaults() *ValidateSyncMigrationInputSqlServerTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Output for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskOutputResponse struct {
	// Database identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Description about the errors happen while performing migration validation
type ValidationErrorResponse struct {
	// Severity of the error
	Severity *string `pulumi:"severity"`
	// Error Text
	Text *string `pulumi:"text"`
}

// Wait statistics gathered during query batch execution
type WaitStatisticsResponse struct {
	// Total no. of waits
	WaitCount *float64 `pulumi:"waitCount"`
	// Total wait time in millisecond(s)
	WaitTimeMs *float64 `pulumi:"waitTimeMs"`
	// Type of the Wait
	WaitType *string `pulumi:"waitType"`
}

// Defaults sets the appropriate defaults for WaitStatisticsResponse
func (val *WaitStatisticsResponse) Defaults() *WaitStatisticsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.WaitTimeMs) {
		waitTimeMs_ := 0.0
		tmp.WaitTimeMs = &waitTimeMs_
	}
	return &tmp
}
func init() {
	pulumi.RegisterOutputType(DatabaseInfoOutput{})
	pulumi.RegisterOutputType(DatabaseInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuOutput{})
	pulumi.RegisterOutputType(ServiceSkuPtrOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
