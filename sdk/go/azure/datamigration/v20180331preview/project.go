// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180331preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A project resource
type Project struct {
	pulumi.CustomResourceState

	// UTC Date and time when project was created
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// List of DatabaseInfo
	DatabasesInfo DatabaseInfoResponseArrayOutput `pulumi:"databasesInfo"`
	// Resource location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project's provisioning state
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponsePtrOutput `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform pulumi.StringOutput `pulumi:"sourcePlatform"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponsePtrOutput `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform pulumi.StringOutput `pulumi:"targetPlatform"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil || args.GroupName == nil {
		return nil, errors.New("missing required argument 'GroupName'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ProjectName == nil {
		return nil, errors.New("missing required argument 'ProjectName'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.SourcePlatform == nil {
		return nil, errors.New("missing required argument 'SourcePlatform'")
	}
	if args == nil || args.TargetPlatform == nil {
		return nil, errors.New("missing required argument 'TargetPlatform'")
	}
	if args == nil {
		args = &ProjectArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:datamigration/latest:Project"),
		},
		{
			Type: pulumi.String("azure-nextgen:datamigration/v20171115preview:Project"),
		},
		{
			Type: pulumi.String("azure-nextgen:datamigration/v20180315preview:Project"),
		},
		{
			Type: pulumi.String("azure-nextgen:datamigration/v20180419:Project"),
		},
		{
			Type: pulumi.String("azure-nextgen:datamigration/v20180715preview:Project"),
		},
	})
	opts = append(opts, aliases)
	var resource Project
	err := ctx.RegisterResource("azure-nextgen:datamigration/v20180331preview:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("azure-nextgen:datamigration/v20180331preview:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// UTC Date and time when project was created
	CreationTime *string `pulumi:"creationTime"`
	// List of DatabaseInfo
	DatabasesInfo []DatabaseInfoResponse `pulumi:"databasesInfo"`
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The project's provisioning state
	ProvisioningState *string `pulumi:"provisioningState"`
	// Information for connecting to source
	SourceConnectionInfo *SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform *string `pulumi:"sourcePlatform"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Information for connecting to target
	TargetConnectionInfo *SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform *string `pulumi:"targetPlatform"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type ProjectState struct {
	// UTC Date and time when project was created
	CreationTime pulumi.StringPtrInput
	// List of DatabaseInfo
	DatabasesInfo DatabaseInfoResponseArrayInput
	// Resource location.
	Location pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// The project's provisioning state
	ProvisioningState pulumi.StringPtrInput
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponsePtrInput
	// Source platform for the project
	SourcePlatform pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponsePtrInput
	// Target platform for the project
	TargetPlatform pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// List of DatabaseInfo
	DatabasesInfo []DatabaseInfo `pulumi:"databasesInfo"`
	// Name of the resource group
	GroupName string `pulumi:"groupName"`
	// Resource location.
	Location string `pulumi:"location"`
	// Name of the project
	ProjectName string `pulumi:"projectName"`
	// Name of the service
	ServiceName string `pulumi:"serviceName"`
	// Information for connecting to source
	SourceConnectionInfo *SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform string `pulumi:"sourcePlatform"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Information for connecting to target
	TargetConnectionInfo *SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform string `pulumi:"targetPlatform"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// List of DatabaseInfo
	DatabasesInfo DatabaseInfoArrayInput
	// Name of the resource group
	GroupName pulumi.StringInput
	// Resource location.
	Location pulumi.StringInput
	// Name of the project
	ProjectName pulumi.StringInput
	// Name of the service
	ServiceName pulumi.StringInput
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoPtrInput
	// Source platform for the project
	SourcePlatform pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoPtrInput
	// Target platform for the project
	TargetPlatform pulumi.StringInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}
