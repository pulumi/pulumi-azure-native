// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211030preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A project resource
type Project struct {
	pulumi.CustomResourceState

	// Field that defines the Azure active directory application info, used to connect to the target Azure resource
	AzureAuthenticationInfo pulumi.StringPtrOutput `pulumi:"azureAuthenticationInfo"`
	// UTC Date and time when project was created
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// List of DatabaseInfo
	DatabasesInfo DatabaseInfoResponseArrayOutput `pulumi:"databasesInfo"`
	// HTTP strong entity tag value. This is ignored if submitted.
	ETag     pulumi.StringPtrOutput `pulumi:"eTag"`
	Location pulumi.StringPtrOutput `pulumi:"location"`
	Name     pulumi.StringOutput    `pulumi:"name"`
	// The project's provisioning state
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Information for connecting to source
	SourceConnectionInfo pulumi.AnyOutput `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform pulumi.StringOutput      `pulumi:"sourcePlatform"`
	SystemData     SystemDataResponseOutput `pulumi:"systemData"`
	Tags           pulumi.StringMapOutput   `pulumi:"tags"`
	// Information for connecting to target
	TargetConnectionInfo pulumi.AnyOutput `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform pulumi.StringOutput `pulumi:"targetPlatform"`
	Type           pulumi.StringOutput `pulumi:"type"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.SourcePlatform == nil {
		return nil, errors.New("invalid value for required argument 'SourcePlatform'")
	}
	if args.TargetPlatform == nil {
		return nil, errors.New("invalid value for required argument 'TargetPlatform'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datamigration:Project"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20171115preview:Project"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20180315preview:Project"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20180331preview:Project"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20180419:Project"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20180715preview:Project"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20210630:Project"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20220130preview:Project"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20220330preview:Project"),
		},
	})
	opts = append(opts, aliases)
	var resource Project
	err := ctx.RegisterResource("azure-native:datamigration/v20211030preview:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("azure-native:datamigration/v20211030preview:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
}

type ProjectState struct {
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Field that defines the Azure active directory application info, used to connect to the target Azure resource
	AzureAuthenticationInfo *string `pulumi:"azureAuthenticationInfo"`
	// List of DatabaseInfo
	DatabasesInfo []DatabaseInfo `pulumi:"databasesInfo"`
	// HTTP strong entity tag value. This is ignored if submitted.
	ETag *string `pulumi:"eTag"`
	// Name of the resource group
	GroupName string  `pulumi:"groupName"`
	Location  *string `pulumi:"location"`
	// Name of the project
	ProjectName *string `pulumi:"projectName"`
	// Name of the service
	ServiceName string `pulumi:"serviceName"`
	// Information for connecting to source
	SourceConnectionInfo interface{} `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform string            `pulumi:"sourcePlatform"`
	Tags           map[string]string `pulumi:"tags"`
	// Information for connecting to target
	TargetConnectionInfo interface{} `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform string `pulumi:"targetPlatform"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Field that defines the Azure active directory application info, used to connect to the target Azure resource
	AzureAuthenticationInfo pulumi.StringPtrInput
	// List of DatabaseInfo
	DatabasesInfo DatabaseInfoArrayInput
	// HTTP strong entity tag value. This is ignored if submitted.
	ETag pulumi.StringPtrInput
	// Name of the resource group
	GroupName pulumi.StringInput
	Location  pulumi.StringPtrInput
	// Name of the project
	ProjectName pulumi.StringPtrInput
	// Name of the service
	ServiceName pulumi.StringInput
	// Information for connecting to source
	SourceConnectionInfo pulumi.Input
	// Source platform for the project
	SourcePlatform pulumi.StringInput
	Tags           pulumi.StringMapInput
	// Information for connecting to target
	TargetConnectionInfo pulumi.Input
	// Target platform for the project
	TargetPlatform pulumi.StringInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Field that defines the Azure active directory application info, used to connect to the target Azure resource
func (o ProjectOutput) AzureAuthenticationInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.AzureAuthenticationInfo }).(pulumi.StringPtrOutput)
}

// UTC Date and time when project was created
func (o ProjectOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// List of DatabaseInfo
func (o ProjectOutput) DatabasesInfo() DatabaseInfoResponseArrayOutput {
	return o.ApplyT(func(v *Project) DatabaseInfoResponseArrayOutput { return v.DatabasesInfo }).(DatabaseInfoResponseArrayOutput)
}

// HTTP strong entity tag value. This is ignored if submitted.
func (o ProjectOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.ETag }).(pulumi.StringPtrOutput)
}

func (o ProjectOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project's provisioning state
func (o ProjectOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Information for connecting to source
func (o ProjectOutput) SourceConnectionInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v *Project) pulumi.AnyOutput { return v.SourceConnectionInfo }).(pulumi.AnyOutput)
}

// Source platform for the project
func (o ProjectOutput) SourcePlatform() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.SourcePlatform }).(pulumi.StringOutput)
}

func (o ProjectOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Project) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

func (o ProjectOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Project) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Information for connecting to target
func (o ProjectOutput) TargetConnectionInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v *Project) pulumi.AnyOutput { return v.TargetConnectionInfo }).(pulumi.AnyOutput)
}

// Target platform for the project
func (o ProjectOutput) TargetPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.TargetPlatform }).(pulumi.StringOutput)
}

func (o ProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectOutput{})
}
