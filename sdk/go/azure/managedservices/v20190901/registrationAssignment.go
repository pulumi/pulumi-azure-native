// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190901

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Registration assignment.
type RegistrationAssignment struct {
	pulumi.CustomResourceState

	// Name of the registration assignment.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of a registration assignment.
	Properties RegistrationAssignmentPropertiesResponseOutput `pulumi:"properties"`
	// Type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRegistrationAssignment registers a new resource with the given unique name, arguments, and options.
func NewRegistrationAssignment(ctx *pulumi.Context,
	name string, args *RegistrationAssignmentArgs, opts ...pulumi.ResourceOption) (*RegistrationAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:managedservices:RegistrationAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:managedservices/latest:RegistrationAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:managedservices/v20180601preview:RegistrationAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:managedservices/v20190401preview:RegistrationAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:managedservices/v20190601:RegistrationAssignment"),
		},
		{
			Type: pulumi.String("azure-nextgen:managedservices/v20200201preview:RegistrationAssignment"),
		},
	})
	opts = append(opts, aliases)
	var resource RegistrationAssignment
	err := ctx.RegisterResource("azure-nextgen:managedservices/v20190901:RegistrationAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistrationAssignment gets an existing RegistrationAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistrationAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistrationAssignmentState, opts ...pulumi.ResourceOption) (*RegistrationAssignment, error) {
	var resource RegistrationAssignment
	err := ctx.ReadResource("azure-nextgen:managedservices/v20190901:RegistrationAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistrationAssignment resources.
type registrationAssignmentState struct {
	// Name of the registration assignment.
	Name *string `pulumi:"name"`
	// Properties of a registration assignment.
	Properties *RegistrationAssignmentPropertiesResponse `pulumi:"properties"`
	// Type of the resource.
	Type *string `pulumi:"type"`
}

type RegistrationAssignmentState struct {
	// Name of the registration assignment.
	Name pulumi.StringPtrInput
	// Properties of a registration assignment.
	Properties RegistrationAssignmentPropertiesResponsePtrInput
	// Type of the resource.
	Type pulumi.StringPtrInput
}

func (RegistrationAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*registrationAssignmentState)(nil)).Elem()
}

type registrationAssignmentArgs struct {
	// Properties of a registration assignment.
	Properties *RegistrationAssignmentProperties `pulumi:"properties"`
	// Guid of the registration assignment.
	RegistrationAssignmentId *string `pulumi:"registrationAssignmentId"`
	// Scope of the resource.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a RegistrationAssignment resource.
type RegistrationAssignmentArgs struct {
	// Properties of a registration assignment.
	Properties RegistrationAssignmentPropertiesPtrInput
	// Guid of the registration assignment.
	RegistrationAssignmentId pulumi.StringPtrInput
	// Scope of the resource.
	Scope pulumi.StringInput
}

func (RegistrationAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registrationAssignmentArgs)(nil)).Elem()
}

type RegistrationAssignmentInput interface {
	pulumi.Input

	ToRegistrationAssignmentOutput() RegistrationAssignmentOutput
	ToRegistrationAssignmentOutputWithContext(ctx context.Context) RegistrationAssignmentOutput
}

func (*RegistrationAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationAssignment)(nil))
}

func (i *RegistrationAssignment) ToRegistrationAssignmentOutput() RegistrationAssignmentOutput {
	return i.ToRegistrationAssignmentOutputWithContext(context.Background())
}

func (i *RegistrationAssignment) ToRegistrationAssignmentOutputWithContext(ctx context.Context) RegistrationAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationAssignmentOutput)
}

type RegistrationAssignmentOutput struct {
	*pulumi.OutputState
}

func (RegistrationAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationAssignment)(nil))
}

func (o RegistrationAssignmentOutput) ToRegistrationAssignmentOutput() RegistrationAssignmentOutput {
	return o
}

func (o RegistrationAssignmentOutput) ToRegistrationAssignmentOutputWithContext(ctx context.Context) RegistrationAssignmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RegistrationAssignmentOutput{})
}
