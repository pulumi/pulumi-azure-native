// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package videoanalyzer

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupPipelineTopology(ctx *pulumi.Context, args *LookupPipelineTopologyArgs, opts ...pulumi.InvokeOption) (*LookupPipelineTopologyResult, error) {
	var rv LookupPipelineTopologyResult
	err := ctx.Invoke("azure-native:videoanalyzer:getPipelineTopology", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPipelineTopologyArgs struct {
	AccountName          string `pulumi:"accountName"`
	PipelineTopologyName string `pulumi:"pipelineTopologyName"`
	ResourceGroupName    string `pulumi:"resourceGroupName"`
}

// Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives the content can be reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology to be parameterized. This allows  individual pipelines refer to different values, such as individual cameras' RTSP endpoints and credentials. Overall a topology is composed of the following:
//
//   - Parameters: list of user defined parameters that can be references across the topology nodes.
//   - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
//   - Processors: list of nodes which perform data analysis or transformations.
//   - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
type LookupPipelineTopologyResult struct {
	Description *string                        `pulumi:"description"`
	Id          string                         `pulumi:"id"`
	Kind        string                         `pulumi:"kind"`
	Name        string                         `pulumi:"name"`
	Parameters  []ParameterDeclarationResponse `pulumi:"parameters"`
	Processors  []EncoderProcessorResponse     `pulumi:"processors"`
	Sinks       []VideoSinkResponse            `pulumi:"sinks"`
	Sku         SkuResponse                    `pulumi:"sku"`
	Sources     []interface{}                  `pulumi:"sources"`
	SystemData  SystemDataResponse             `pulumi:"systemData"`
	Type        string                         `pulumi:"type"`
}
