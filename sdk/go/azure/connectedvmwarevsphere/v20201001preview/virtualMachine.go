// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Define the virtualMachine.
type VirtualMachine struct {
	pulumi.CustomResourceState

	// Gets the name of the corresponding resource in Kubernetes.
	CustomResourceName pulumi.StringOutput `pulumi:"customResourceName"`
	// Gets or sets the extended location.
	ExtendedLocation ExtendedLocationResponsePtrOutput `pulumi:"extendedLocation"`
	// Firmware type
	FirmwareType pulumi.StringPtrOutput `pulumi:"firmwareType"`
	// Gets or sets the folder path of the vm.
	FolderPath pulumi.StringOutput `pulumi:"folderPath"`
	// Guest agent status properties.
	GuestAgentProfile GuestAgentProfileResponsePtrOutput `pulumi:"guestAgentProfile"`
	// Hardware properties.
	HardwareProfile HardwareProfileResponsePtrOutput `pulumi:"hardwareProfile"`
	// The identity of the resource.
	Identity IdentityResponsePtrOutput `pulumi:"identity"`
	// Gets or sets the instance uuid of the vm.
	InstanceUuid pulumi.StringOutput `pulumi:"instanceUuid"`
	// Gets or sets the inventory Item ID for the virtual machine.
	InventoryItemId pulumi.StringPtrOutput `pulumi:"inventoryItemId"`
	// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Gets or sets the location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Gets or sets the vCenter Managed Object name for the virtual machine.
	MoName pulumi.StringOutput `pulumi:"moName"`
	// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
	MoRefId pulumi.StringPtrOutput `pulumi:"moRefId"`
	// Gets or sets the name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network properties.
	NetworkProfile NetworkProfileResponsePtrOutput `pulumi:"networkProfile"`
	// OS properties.
	OsProfile OsProfileResponsePtrOutput `pulumi:"osProfile"`
	// Placement properties.
	PlacementProfile PlacementProfileResponsePtrOutput `pulumi:"placementProfile"`
	// Gets the power state of the virtual machine.
	PowerState pulumi.StringOutput `pulumi:"powerState"`
	// Gets or sets the provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
	// deploy.
	ResourcePoolId pulumi.StringPtrOutput `pulumi:"resourcePoolId"`
	// Gets or sets the SMBIOS UUID of the vm.
	SmbiosUuid pulumi.StringPtrOutput `pulumi:"smbiosUuid"`
	// The resource status information.
	Statuses ResourceStatusResponseArrayOutput `pulumi:"statuses"`
	// Storage properties.
	StorageProfile StorageProfileResponsePtrOutput `pulumi:"storageProfile"`
	// The system data.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Gets or sets the Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Gets or sets the ARM Id of the template resource to deploy the virtual machine.
	TemplateId pulumi.StringPtrOutput `pulumi:"templateId"`
	// Gets or sets the type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// Gets or sets a unique identifier for this resource.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
	VCenterId pulumi.StringPtrOutput `pulumi:"vCenterId"`
	// Gets or sets a unique identifier for the vm resource.
	VmId pulumi.StringOutput `pulumi:"vmId"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:connectedvmwarevsphere:VirtualMachine"),
		},
	})
	opts = append(opts, aliases)
	var resource VirtualMachine
	err := ctx.RegisterResource("azure-native:connectedvmwarevsphere/v20201001preview:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("azure-native:connectedvmwarevsphere/v20201001preview:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
}

type VirtualMachineState struct {
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// Gets or sets the extended location.
	ExtendedLocation *ExtendedLocation `pulumi:"extendedLocation"`
	// Firmware type
	FirmwareType *string `pulumi:"firmwareType"`
	// Hardware properties.
	HardwareProfile *HardwareProfile `pulumi:"hardwareProfile"`
	// The identity of the resource.
	Identity *Identity `pulumi:"identity"`
	// Gets or sets the inventory Item ID for the virtual machine.
	InventoryItemId *string `pulumi:"inventoryItemId"`
	// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
	Kind *string `pulumi:"kind"`
	// Gets or sets the location.
	Location *string `pulumi:"location"`
	// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
	MoRefId *string `pulumi:"moRefId"`
	// Network properties.
	NetworkProfile *NetworkProfile `pulumi:"networkProfile"`
	// OS properties.
	OsProfile *OsProfile `pulumi:"osProfile"`
	// Placement properties.
	PlacementProfile *PlacementProfile `pulumi:"placementProfile"`
	// The Resource Group Name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
	// deploy.
	ResourcePoolId *string `pulumi:"resourcePoolId"`
	// Gets or sets the SMBIOS UUID of the vm.
	SmbiosUuid *string `pulumi:"smbiosUuid"`
	// Storage properties.
	StorageProfile *StorageProfile `pulumi:"storageProfile"`
	// Gets or sets the Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Gets or sets the ARM Id of the template resource to deploy the virtual machine.
	TemplateId *string `pulumi:"templateId"`
	// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
	VCenterId *string `pulumi:"vCenterId"`
	// Name of the virtual machine resource.
	VirtualMachineName *string `pulumi:"virtualMachineName"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// Gets or sets the extended location.
	ExtendedLocation ExtendedLocationPtrInput
	// Firmware type
	FirmwareType pulumi.StringPtrInput
	// Hardware properties.
	HardwareProfile HardwareProfilePtrInput
	// The identity of the resource.
	Identity IdentityPtrInput
	// Gets or sets the inventory Item ID for the virtual machine.
	InventoryItemId pulumi.StringPtrInput
	// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
	Kind pulumi.StringPtrInput
	// Gets or sets the location.
	Location pulumi.StringPtrInput
	// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
	MoRefId pulumi.StringPtrInput
	// Network properties.
	NetworkProfile NetworkProfilePtrInput
	// OS properties.
	OsProfile OsProfilePtrInput
	// Placement properties.
	PlacementProfile PlacementProfilePtrInput
	// The Resource Group Name.
	ResourceGroupName pulumi.StringInput
	// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
	// deploy.
	ResourcePoolId pulumi.StringPtrInput
	// Gets or sets the SMBIOS UUID of the vm.
	SmbiosUuid pulumi.StringPtrInput
	// Storage properties.
	StorageProfile StorageProfilePtrInput
	// Gets or sets the Resource tags.
	Tags pulumi.StringMapInput
	// Gets or sets the ARM Id of the template resource to deploy the virtual machine.
	TemplateId pulumi.StringPtrInput
	// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
	VCenterId pulumi.StringPtrInput
	// Name of the virtual machine resource.
	VirtualMachineName pulumi.StringPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VirtualMachineOutput{})
}
