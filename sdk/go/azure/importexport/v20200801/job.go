// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains the job information.
type Job struct {
	pulumi.CustomResourceState

	// Specifies the job identity details
	Identity IdentityDetailsResponsePtrOutput `pulumi:"identity"`
	// Specifies the Azure location where the job is created.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Specifies the name of the job.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the job properties
	Properties JobDetailsResponseOutput `pulumi:"properties"`
	// SystemData of ImportExport Jobs.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Specifies the tags that are assigned to the job.
	Tags pulumi.AnyOutput `pulumi:"tags"`
	// Specifies the type of the job resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Properties != nil {
		args.Properties = args.Properties.ToJobDetailsPtrOutput().ApplyT(func(v *JobDetails) *JobDetails { return v.Defaults() }).(JobDetailsPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:importexport:Job"),
		},
		{
			Type: pulumi.String("azure-native:importexport/v20161101:Job"),
		},
		{
			Type: pulumi.String("azure-native:importexport/v20210101:Job"),
		},
	})
	opts = append(opts, aliases)
	var resource Job
	err := ctx.RegisterResource("azure-native:importexport/v20200801:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("azure-native:importexport/v20200801:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
}

type JobState struct {
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// The name of the import/export job.
	JobName *string `pulumi:"jobName"`
	// Specifies the supported Azure location where the job should be created
	Location *string `pulumi:"location"`
	// Specifies the job properties
	Properties *JobDetails `pulumi:"properties"`
	// The resource group name uniquely identifies the resource group within the user subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the tags that will be assigned to the job.
	Tags interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// The name of the import/export job.
	JobName pulumi.StringPtrInput
	// Specifies the supported Azure location where the job should be created
	Location pulumi.StringPtrInput
	// Specifies the job properties
	Properties JobDetailsPtrInput
	// The resource group name uniquely identifies the resource group within the user subscription.
	ResourceGroupName pulumi.StringInput
	// Specifies the tags that will be assigned to the job.
	Tags pulumi.Input
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Specifies the job identity details
func (o JobOutput) Identity() IdentityDetailsResponsePtrOutput {
	return o.ApplyT(func(v *Job) IdentityDetailsResponsePtrOutput { return v.Identity }).(IdentityDetailsResponsePtrOutput)
}

// Specifies the Azure location where the job is created.
func (o JobOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Specifies the name of the job.
func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the job properties
func (o JobOutput) Properties() JobDetailsResponseOutput {
	return o.ApplyT(func(v *Job) JobDetailsResponseOutput { return v.Properties }).(JobDetailsResponseOutput)
}

// SystemData of ImportExport Jobs.
func (o JobOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Job) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Specifies the tags that are assigned to the job.
func (o JobOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Job) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

// Specifies the type of the job resource.
func (o JobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(JobOutput{})
}
