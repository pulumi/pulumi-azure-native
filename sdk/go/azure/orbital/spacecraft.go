// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package orbital

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Customer creates a spacecraft resource to schedule a contact.
// API Version: 2021-04-04-preview.
type Spacecraft struct {
	pulumi.CustomResourceState

	// Authorization status of spacecraft.
	AuthorizationStatus pulumi.StringOutput `pulumi:"authorizationStatus"`
	// Details of the authorization status.
	AuthorizationStatusExtended pulumi.StringOutput `pulumi:"authorizationStatusExtended"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Links of the Spacecraft
	Links SpacecraftLinkResponseArrayOutput `pulumi:"links"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// NORAD ID of the spacecraft.
	NoradId pulumi.StringOutput `pulumi:"noradId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Title line of Two Line Element (TLE).
	TitleLine pulumi.StringPtrOutput `pulumi:"titleLine"`
	// Line 1 of Two Line Element (TLE).
	TleLine1 pulumi.StringPtrOutput `pulumi:"tleLine1"`
	// Line 2 of Two Line Element (TLE).
	TleLine2 pulumi.StringPtrOutput `pulumi:"tleLine2"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSpacecraft registers a new resource with the given unique name, arguments, and options.
func NewSpacecraft(ctx *pulumi.Context,
	name string, args *SpacecraftArgs, opts ...pulumi.ResourceOption) (*Spacecraft, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NoradId == nil {
		return nil, errors.New("invalid value for required argument 'NoradId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:orbital/v20210404preview:Spacecraft"),
		},
		{
			Type: pulumi.String("azure-native:orbital/v20220301:Spacecraft"),
		},
	})
	opts = append(opts, aliases)
	var resource Spacecraft
	err := ctx.RegisterResource("azure-native:orbital:Spacecraft", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpacecraft gets an existing Spacecraft resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpacecraft(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpacecraftState, opts ...pulumi.ResourceOption) (*Spacecraft, error) {
	var resource Spacecraft
	err := ctx.ReadResource("azure-native:orbital:Spacecraft", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Spacecraft resources.
type spacecraftState struct {
}

type SpacecraftState struct {
}

func (SpacecraftState) ElementType() reflect.Type {
	return reflect.TypeOf((*spacecraftState)(nil)).Elem()
}

type spacecraftArgs struct {
	// Links of the Spacecraft
	Links []SpacecraftLink `pulumi:"links"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// NORAD ID of the spacecraft.
	NoradId string `pulumi:"noradId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Spacecraft ID
	SpacecraftName *string `pulumi:"spacecraftName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Title line of Two Line Element (TLE).
	TitleLine *string `pulumi:"titleLine"`
	// Line 1 of Two Line Element (TLE).
	TleLine1 *string `pulumi:"tleLine1"`
	// Line 2 of Two Line Element (TLE).
	TleLine2 *string `pulumi:"tleLine2"`
}

// The set of arguments for constructing a Spacecraft resource.
type SpacecraftArgs struct {
	// Links of the Spacecraft
	Links SpacecraftLinkArrayInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// NORAD ID of the spacecraft.
	NoradId pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Spacecraft ID
	SpacecraftName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Title line of Two Line Element (TLE).
	TitleLine pulumi.StringPtrInput
	// Line 1 of Two Line Element (TLE).
	TleLine1 pulumi.StringPtrInput
	// Line 2 of Two Line Element (TLE).
	TleLine2 pulumi.StringPtrInput
}

func (SpacecraftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spacecraftArgs)(nil)).Elem()
}

type SpacecraftInput interface {
	pulumi.Input

	ToSpacecraftOutput() SpacecraftOutput
	ToSpacecraftOutputWithContext(ctx context.Context) SpacecraftOutput
}

func (*Spacecraft) ElementType() reflect.Type {
	return reflect.TypeOf((**Spacecraft)(nil)).Elem()
}

func (i *Spacecraft) ToSpacecraftOutput() SpacecraftOutput {
	return i.ToSpacecraftOutputWithContext(context.Background())
}

func (i *Spacecraft) ToSpacecraftOutputWithContext(ctx context.Context) SpacecraftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacecraftOutput)
}

type SpacecraftOutput struct{ *pulumi.OutputState }

func (SpacecraftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Spacecraft)(nil)).Elem()
}

func (o SpacecraftOutput) ToSpacecraftOutput() SpacecraftOutput {
	return o
}

func (o SpacecraftOutput) ToSpacecraftOutputWithContext(ctx context.Context) SpacecraftOutput {
	return o
}

// Authorization status of spacecraft.
func (o SpacecraftOutput) AuthorizationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.AuthorizationStatus }).(pulumi.StringOutput)
}

// Details of the authorization status.
func (o SpacecraftOutput) AuthorizationStatusExtended() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.AuthorizationStatusExtended }).(pulumi.StringOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o SpacecraftOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Links of the Spacecraft
func (o SpacecraftOutput) Links() SpacecraftLinkResponseArrayOutput {
	return o.ApplyT(func(v *Spacecraft) SpacecraftLinkResponseArrayOutput { return v.Links }).(SpacecraftLinkResponseArrayOutput)
}

// The geo-location where the resource lives
func (o SpacecraftOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SpacecraftOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NORAD ID of the spacecraft.
func (o SpacecraftOutput) NoradId() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.NoradId }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SpacecraftOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Spacecraft) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SpacecraftOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Title line of Two Line Element (TLE).
func (o SpacecraftOutput) TitleLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringPtrOutput { return v.TitleLine }).(pulumi.StringPtrOutput)
}

// Line 1 of Two Line Element (TLE).
func (o SpacecraftOutput) TleLine1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringPtrOutput { return v.TleLine1 }).(pulumi.StringPtrOutput)
}

// Line 2 of Two Line Element (TLE).
func (o SpacecraftOutput) TleLine2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringPtrOutput { return v.TleLine2 }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SpacecraftOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SpacecraftOutput{})
}
