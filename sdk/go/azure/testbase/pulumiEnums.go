// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package testbase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Action string

const (
	ActionInstall   = Action("Install")
	ActionLaunch    = Action("Launch")
	ActionClose     = Action("Close")
	ActionUninstall = Action("Uninstall")
	ActionCustom    = Action("Custom")
)

func (Action) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (e Action) ToActionOutput() ActionOutput {
	return pulumi.ToOutput(e).(ActionOutput)
}

func (e Action) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ActionOutput)
}

func (e Action) ToActionPtrOutput() ActionPtrOutput {
	return e.ToActionPtrOutputWithContext(context.Background())
}

func (e Action) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return Action(e).ToActionOutputWithContext(ctx).ToActionPtrOutputWithContext(ctx)
}

func (e Action) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Action) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Action) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Action) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ActionOutput struct{ *pulumi.OutputState }

func (ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (o ActionOutput) ToActionOutput() ActionOutput {
	return o
}

func (o ActionOutput) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return o
}

func (o ActionOutput) ToActionPtrOutput() ActionPtrOutput {
	return o.ToActionPtrOutputWithContext(context.Background())
}

func (o ActionOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Action) *Action {
		return &v
	}).(ActionPtrOutput)
}

func (o ActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Action) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Action) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ActionPtrOutput struct{ *pulumi.OutputState }

func (ActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (o ActionPtrOutput) ToActionPtrOutput() ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) Elem() ActionOutput {
	return o.ApplyT(func(v *Action) Action {
		if v != nil {
			return *v
		}
		var ret Action
		return ret
	}).(ActionOutput)
}

func (o ActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Action) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ActionInput is an input type that accepts ActionArgs and ActionOutput values.
// You can construct a concrete instance of `ActionInput` via:
//
//          ActionArgs{...}
type ActionInput interface {
	pulumi.Input

	ToActionOutput() ActionOutput
	ToActionOutputWithContext(context.Context) ActionOutput
}

var actionPtrType = reflect.TypeOf((**Action)(nil)).Elem()

type ActionPtrInput interface {
	pulumi.Input

	ToActionPtrOutput() ActionPtrOutput
	ToActionPtrOutputWithContext(context.Context) ActionPtrOutput
}

type actionPtr string

func ActionPtr(v string) ActionPtrInput {
	return (*actionPtr)(&v)
}

func (*actionPtr) ElementType() reflect.Type {
	return actionPtrType
}

func (in *actionPtr) ToActionPtrOutput() ActionPtrOutput {
	return pulumi.ToOutput(in).(ActionPtrOutput)
}

func (in *actionPtr) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ActionPtrOutput)
}

type ContentType string

const (
	ContentTypeInline = ContentType("Inline")
	ContentTypeFile   = ContentType("File")
	ContentTypePath   = ContentType("Path")
)

func (ContentType) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentType)(nil)).Elem()
}

func (e ContentType) ToContentTypeOutput() ContentTypeOutput {
	return pulumi.ToOutput(e).(ContentTypeOutput)
}

func (e ContentType) ToContentTypeOutputWithContext(ctx context.Context) ContentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentTypeOutput)
}

func (e ContentType) ToContentTypePtrOutput() ContentTypePtrOutput {
	return e.ToContentTypePtrOutputWithContext(context.Background())
}

func (e ContentType) ToContentTypePtrOutputWithContext(ctx context.Context) ContentTypePtrOutput {
	return ContentType(e).ToContentTypeOutputWithContext(ctx).ToContentTypePtrOutputWithContext(ctx)
}

func (e ContentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentTypeOutput struct{ *pulumi.OutputState }

func (ContentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentType)(nil)).Elem()
}

func (o ContentTypeOutput) ToContentTypeOutput() ContentTypeOutput {
	return o
}

func (o ContentTypeOutput) ToContentTypeOutputWithContext(ctx context.Context) ContentTypeOutput {
	return o
}

func (o ContentTypeOutput) ToContentTypePtrOutput() ContentTypePtrOutput {
	return o.ToContentTypePtrOutputWithContext(context.Background())
}

func (o ContentTypeOutput) ToContentTypePtrOutputWithContext(ctx context.Context) ContentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentType) *ContentType {
		return &v
	}).(ContentTypePtrOutput)
}

func (o ContentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentTypePtrOutput struct{ *pulumi.OutputState }

func (ContentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentType)(nil)).Elem()
}

func (o ContentTypePtrOutput) ToContentTypePtrOutput() ContentTypePtrOutput {
	return o
}

func (o ContentTypePtrOutput) ToContentTypePtrOutputWithContext(ctx context.Context) ContentTypePtrOutput {
	return o
}

func (o ContentTypePtrOutput) Elem() ContentTypeOutput {
	return o.ApplyT(func(v *ContentType) ContentType {
		if v != nil {
			return *v
		}
		var ret ContentType
		return ret
	}).(ContentTypeOutput)
}

func (o ContentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ContentTypeInput is an input type that accepts ContentTypeArgs and ContentTypeOutput values.
// You can construct a concrete instance of `ContentTypeInput` via:
//
//          ContentTypeArgs{...}
type ContentTypeInput interface {
	pulumi.Input

	ToContentTypeOutput() ContentTypeOutput
	ToContentTypeOutputWithContext(context.Context) ContentTypeOutput
}

var contentTypePtrType = reflect.TypeOf((**ContentType)(nil)).Elem()

type ContentTypePtrInput interface {
	pulumi.Input

	ToContentTypePtrOutput() ContentTypePtrOutput
	ToContentTypePtrOutputWithContext(context.Context) ContentTypePtrOutput
}

type contentTypePtr string

func ContentTypePtr(v string) ContentTypePtrInput {
	return (*contentTypePtr)(&v)
}

func (*contentTypePtr) ElementType() reflect.Type {
	return contentTypePtrType
}

func (in *contentTypePtr) ToContentTypePtrOutput() ContentTypePtrOutput {
	return pulumi.ToOutput(in).(ContentTypePtrOutput)
}

func (in *contentTypePtr) ToContentTypePtrOutputWithContext(ctx context.Context) ContentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentTypePtrOutput)
}

type TestType string

const (
	TestTypeOutOfBoxTest   = TestType("OutOfBoxTest")
	TestTypeFunctionalTest = TestType("FunctionalTest")
)

func (TestType) ElementType() reflect.Type {
	return reflect.TypeOf((*TestType)(nil)).Elem()
}

func (e TestType) ToTestTypeOutput() TestTypeOutput {
	return pulumi.ToOutput(e).(TestTypeOutput)
}

func (e TestType) ToTestTypeOutputWithContext(ctx context.Context) TestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TestTypeOutput)
}

func (e TestType) ToTestTypePtrOutput() TestTypePtrOutput {
	return e.ToTestTypePtrOutputWithContext(context.Background())
}

func (e TestType) ToTestTypePtrOutputWithContext(ctx context.Context) TestTypePtrOutput {
	return TestType(e).ToTestTypeOutputWithContext(ctx).ToTestTypePtrOutputWithContext(ctx)
}

func (e TestType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TestType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TestTypeOutput struct{ *pulumi.OutputState }

func (TestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestType)(nil)).Elem()
}

func (o TestTypeOutput) ToTestTypeOutput() TestTypeOutput {
	return o
}

func (o TestTypeOutput) ToTestTypeOutputWithContext(ctx context.Context) TestTypeOutput {
	return o
}

func (o TestTypeOutput) ToTestTypePtrOutput() TestTypePtrOutput {
	return o.ToTestTypePtrOutputWithContext(context.Background())
}

func (o TestTypeOutput) ToTestTypePtrOutputWithContext(ctx context.Context) TestTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TestType) *TestType {
		return &v
	}).(TestTypePtrOutput)
}

func (o TestTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TestTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TestType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TestTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TestTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TestType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TestTypePtrOutput struct{ *pulumi.OutputState }

func (TestTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestType)(nil)).Elem()
}

func (o TestTypePtrOutput) ToTestTypePtrOutput() TestTypePtrOutput {
	return o
}

func (o TestTypePtrOutput) ToTestTypePtrOutputWithContext(ctx context.Context) TestTypePtrOutput {
	return o
}

func (o TestTypePtrOutput) Elem() TestTypeOutput {
	return o.ApplyT(func(v *TestType) TestType {
		if v != nil {
			return *v
		}
		var ret TestType
		return ret
	}).(TestTypeOutput)
}

func (o TestTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TestTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TestType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TestTypeInput is an input type that accepts TestTypeArgs and TestTypeOutput values.
// You can construct a concrete instance of `TestTypeInput` via:
//
//          TestTypeArgs{...}
type TestTypeInput interface {
	pulumi.Input

	ToTestTypeOutput() TestTypeOutput
	ToTestTypeOutputWithContext(context.Context) TestTypeOutput
}

var testTypePtrType = reflect.TypeOf((**TestType)(nil)).Elem()

type TestTypePtrInput interface {
	pulumi.Input

	ToTestTypePtrOutput() TestTypePtrOutput
	ToTestTypePtrOutputWithContext(context.Context) TestTypePtrOutput
}

type testTypePtr string

func TestTypePtr(v string) TestTypePtrInput {
	return (*testTypePtr)(&v)
}

func (*testTypePtr) ElementType() reflect.Type {
	return testTypePtrType
}

func (in *testTypePtr) ToTestTypePtrOutput() TestTypePtrOutput {
	return pulumi.ToOutput(in).(TestTypePtrOutput)
}

func (in *testTypePtr) ToTestTypePtrOutputWithContext(ctx context.Context) TestTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TestTypePtrOutput)
}

type Tier string

const (
	TierStandard = Tier("Standard")
)

func (Tier) ElementType() reflect.Type {
	return reflect.TypeOf((*Tier)(nil)).Elem()
}

func (e Tier) ToTierOutput() TierOutput {
	return pulumi.ToOutput(e).(TierOutput)
}

func (e Tier) ToTierOutputWithContext(ctx context.Context) TierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TierOutput)
}

func (e Tier) ToTierPtrOutput() TierPtrOutput {
	return e.ToTierPtrOutputWithContext(context.Background())
}

func (e Tier) ToTierPtrOutputWithContext(ctx context.Context) TierPtrOutput {
	return Tier(e).ToTierOutputWithContext(ctx).ToTierPtrOutputWithContext(ctx)
}

func (e Tier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Tier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Tier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Tier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TierOutput struct{ *pulumi.OutputState }

func (TierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tier)(nil)).Elem()
}

func (o TierOutput) ToTierOutput() TierOutput {
	return o
}

func (o TierOutput) ToTierOutputWithContext(ctx context.Context) TierOutput {
	return o
}

func (o TierOutput) ToTierPtrOutput() TierPtrOutput {
	return o.ToTierPtrOutputWithContext(context.Background())
}

func (o TierOutput) ToTierPtrOutputWithContext(ctx context.Context) TierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tier) *Tier {
		return &v
	}).(TierPtrOutput)
}

func (o TierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Tier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Tier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TierPtrOutput struct{ *pulumi.OutputState }

func (TierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tier)(nil)).Elem()
}

func (o TierPtrOutput) ToTierPtrOutput() TierPtrOutput {
	return o
}

func (o TierPtrOutput) ToTierPtrOutputWithContext(ctx context.Context) TierPtrOutput {
	return o
}

func (o TierPtrOutput) Elem() TierOutput {
	return o.ApplyT(func(v *Tier) Tier {
		if v != nil {
			return *v
		}
		var ret Tier
		return ret
	}).(TierOutput)
}

func (o TierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Tier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TierInput is an input type that accepts TierArgs and TierOutput values.
// You can construct a concrete instance of `TierInput` via:
//
//          TierArgs{...}
type TierInput interface {
	pulumi.Input

	ToTierOutput() TierOutput
	ToTierOutputWithContext(context.Context) TierOutput
}

var tierPtrType = reflect.TypeOf((**Tier)(nil)).Elem()

type TierPtrInput interface {
	pulumi.Input

	ToTierPtrOutput() TierPtrOutput
	ToTierPtrOutputWithContext(context.Context) TierPtrOutput
}

type tierPtr string

func TierPtr(v string) TierPtrInput {
	return (*tierPtr)(&v)
}

func (*tierPtr) ElementType() reflect.Type {
	return tierPtrType
}

func (in *tierPtr) ToTierPtrOutput() TierPtrOutput {
	return pulumi.ToOutput(in).(TierPtrOutput)
}

func (in *tierPtr) ToTierPtrOutputWithContext(ctx context.Context) TierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TierPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionOutput{})
	pulumi.RegisterOutputType(ActionPtrOutput{})
	pulumi.RegisterOutputType(ContentTypeOutput{})
	pulumi.RegisterOutputType(ContentTypePtrOutput{})
	pulumi.RegisterOutputType(TestTypeOutput{})
	pulumi.RegisterOutputType(TestTypePtrOutput{})
	pulumi.RegisterOutputType(TierOutput{})
	pulumi.RegisterOutputType(TierPtrOutput{})
}
