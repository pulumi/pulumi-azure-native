// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package testbase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The command used in the test
type Command struct {
	// The action of the command.
	Action string `pulumi:"action"`
	// Specifies whether to run the command even if a previous command is failed.
	AlwaysRun *bool `pulumi:"alwaysRun"`
	// Specifies whether to apply update before the command.
	ApplyUpdateBefore *bool `pulumi:"applyUpdateBefore"`
	// The content of the command. The content depends on source type.
	Content string `pulumi:"content"`
	// The type of command content.
	ContentType string `pulumi:"contentType"`
	// Specifies the max run time of the command.
	MaxRunTime *int `pulumi:"maxRunTime"`
	// The name of the command.
	Name string `pulumi:"name"`
	// Specifies whether to restart the VM after the command executed.
	RestartAfter *bool `pulumi:"restartAfter"`
	// Specifies whether to run the command in interactive mode.
	RunAsInteractive *bool `pulumi:"runAsInteractive"`
	// Specifies whether to run the command as administrator.
	RunElevated *bool `pulumi:"runElevated"`
}

// CommandInput is an input type that accepts CommandArgs and CommandOutput values.
// You can construct a concrete instance of `CommandInput` via:
//
//          CommandArgs{...}
type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(context.Context) CommandOutput
}

// The command used in the test
type CommandArgs struct {
	// The action of the command.
	Action pulumi.StringInput `pulumi:"action"`
	// Specifies whether to run the command even if a previous command is failed.
	AlwaysRun pulumi.BoolPtrInput `pulumi:"alwaysRun"`
	// Specifies whether to apply update before the command.
	ApplyUpdateBefore pulumi.BoolPtrInput `pulumi:"applyUpdateBefore"`
	// The content of the command. The content depends on source type.
	Content pulumi.StringInput `pulumi:"content"`
	// The type of command content.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// Specifies the max run time of the command.
	MaxRunTime pulumi.IntPtrInput `pulumi:"maxRunTime"`
	// The name of the command.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies whether to restart the VM after the command executed.
	RestartAfter pulumi.BoolPtrInput `pulumi:"restartAfter"`
	// Specifies whether to run the command in interactive mode.
	RunAsInteractive pulumi.BoolPtrInput `pulumi:"runAsInteractive"`
	// Specifies whether to run the command as administrator.
	RunElevated pulumi.BoolPtrInput `pulumi:"runElevated"`
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (i CommandArgs) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i CommandArgs) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//          CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// The command used in the test
type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// The action of the command.
func (o CommandOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v Command) string { return v.Action }).(pulumi.StringOutput)
}

// Specifies whether to run the command even if a previous command is failed.
func (o CommandOutput) AlwaysRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Command) *bool { return v.AlwaysRun }).(pulumi.BoolPtrOutput)
}

// Specifies whether to apply update before the command.
func (o CommandOutput) ApplyUpdateBefore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Command) *bool { return v.ApplyUpdateBefore }).(pulumi.BoolPtrOutput)
}

// The content of the command. The content depends on source type.
func (o CommandOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v Command) string { return v.Content }).(pulumi.StringOutput)
}

// The type of command content.
func (o CommandOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v Command) string { return v.ContentType }).(pulumi.StringOutput)
}

// Specifies the max run time of the command.
func (o CommandOutput) MaxRunTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Command) *int { return v.MaxRunTime }).(pulumi.IntPtrOutput)
}

// The name of the command.
func (o CommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Command) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether to restart the VM after the command executed.
func (o CommandOutput) RestartAfter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Command) *bool { return v.RestartAfter }).(pulumi.BoolPtrOutput)
}

// Specifies whether to run the command in interactive mode.
func (o CommandOutput) RunAsInteractive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Command) *bool { return v.RunAsInteractive }).(pulumi.BoolPtrOutput)
}

// Specifies whether to run the command as administrator.
func (o CommandOutput) RunElevated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Command) *bool { return v.RunElevated }).(pulumi.BoolPtrOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Command {
		return vs[0].([]Command)[vs[1].(int)]
	}).(CommandOutput)
}

// The command used in the test
type CommandResponse struct {
	// The action of the command.
	Action string `pulumi:"action"`
	// Specifies whether to run the command even if a previous command is failed.
	AlwaysRun *bool `pulumi:"alwaysRun"`
	// Specifies whether to apply update before the command.
	ApplyUpdateBefore *bool `pulumi:"applyUpdateBefore"`
	// The content of the command. The content depends on source type.
	Content string `pulumi:"content"`
	// The type of command content.
	ContentType string `pulumi:"contentType"`
	// Specifies the max run time of the command.
	MaxRunTime *int `pulumi:"maxRunTime"`
	// The name of the command.
	Name string `pulumi:"name"`
	// Specifies whether to restart the VM after the command executed.
	RestartAfter *bool `pulumi:"restartAfter"`
	// Specifies whether to run the command in interactive mode.
	RunAsInteractive *bool `pulumi:"runAsInteractive"`
	// Specifies whether to run the command as administrator.
	RunElevated *bool `pulumi:"runElevated"`
}

// CommandResponseInput is an input type that accepts CommandResponseArgs and CommandResponseOutput values.
// You can construct a concrete instance of `CommandResponseInput` via:
//
//          CommandResponseArgs{...}
type CommandResponseInput interface {
	pulumi.Input

	ToCommandResponseOutput() CommandResponseOutput
	ToCommandResponseOutputWithContext(context.Context) CommandResponseOutput
}

// The command used in the test
type CommandResponseArgs struct {
	// The action of the command.
	Action pulumi.StringInput `pulumi:"action"`
	// Specifies whether to run the command even if a previous command is failed.
	AlwaysRun pulumi.BoolPtrInput `pulumi:"alwaysRun"`
	// Specifies whether to apply update before the command.
	ApplyUpdateBefore pulumi.BoolPtrInput `pulumi:"applyUpdateBefore"`
	// The content of the command. The content depends on source type.
	Content pulumi.StringInput `pulumi:"content"`
	// The type of command content.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// Specifies the max run time of the command.
	MaxRunTime pulumi.IntPtrInput `pulumi:"maxRunTime"`
	// The name of the command.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies whether to restart the VM after the command executed.
	RestartAfter pulumi.BoolPtrInput `pulumi:"restartAfter"`
	// Specifies whether to run the command in interactive mode.
	RunAsInteractive pulumi.BoolPtrInput `pulumi:"runAsInteractive"`
	// Specifies whether to run the command as administrator.
	RunElevated pulumi.BoolPtrInput `pulumi:"runElevated"`
}

func (CommandResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandResponse)(nil)).Elem()
}

func (i CommandResponseArgs) ToCommandResponseOutput() CommandResponseOutput {
	return i.ToCommandResponseOutputWithContext(context.Background())
}

func (i CommandResponseArgs) ToCommandResponseOutputWithContext(ctx context.Context) CommandResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandResponseOutput)
}

// CommandResponseArrayInput is an input type that accepts CommandResponseArray and CommandResponseArrayOutput values.
// You can construct a concrete instance of `CommandResponseArrayInput` via:
//
//          CommandResponseArray{ CommandResponseArgs{...} }
type CommandResponseArrayInput interface {
	pulumi.Input

	ToCommandResponseArrayOutput() CommandResponseArrayOutput
	ToCommandResponseArrayOutputWithContext(context.Context) CommandResponseArrayOutput
}

type CommandResponseArray []CommandResponseInput

func (CommandResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandResponse)(nil)).Elem()
}

func (i CommandResponseArray) ToCommandResponseArrayOutput() CommandResponseArrayOutput {
	return i.ToCommandResponseArrayOutputWithContext(context.Background())
}

func (i CommandResponseArray) ToCommandResponseArrayOutputWithContext(ctx context.Context) CommandResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandResponseArrayOutput)
}

// The command used in the test
type CommandResponseOutput struct{ *pulumi.OutputState }

func (CommandResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandResponse)(nil)).Elem()
}

func (o CommandResponseOutput) ToCommandResponseOutput() CommandResponseOutput {
	return o
}

func (o CommandResponseOutput) ToCommandResponseOutputWithContext(ctx context.Context) CommandResponseOutput {
	return o
}

// The action of the command.
func (o CommandResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Action }).(pulumi.StringOutput)
}

// Specifies whether to run the command even if a previous command is failed.
func (o CommandResponseOutput) AlwaysRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandResponse) *bool { return v.AlwaysRun }).(pulumi.BoolPtrOutput)
}

// Specifies whether to apply update before the command.
func (o CommandResponseOutput) ApplyUpdateBefore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandResponse) *bool { return v.ApplyUpdateBefore }).(pulumi.BoolPtrOutput)
}

// The content of the command. The content depends on source type.
func (o CommandResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Content }).(pulumi.StringOutput)
}

// The type of command content.
func (o CommandResponseOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.ContentType }).(pulumi.StringOutput)
}

// Specifies the max run time of the command.
func (o CommandResponseOutput) MaxRunTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommandResponse) *int { return v.MaxRunTime }).(pulumi.IntPtrOutput)
}

// The name of the command.
func (o CommandResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether to restart the VM after the command executed.
func (o CommandResponseOutput) RestartAfter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandResponse) *bool { return v.RestartAfter }).(pulumi.BoolPtrOutput)
}

// Specifies whether to run the command in interactive mode.
func (o CommandResponseOutput) RunAsInteractive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandResponse) *bool { return v.RunAsInteractive }).(pulumi.BoolPtrOutput)
}

// Specifies whether to run the command as administrator.
func (o CommandResponseOutput) RunElevated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandResponse) *bool { return v.RunElevated }).(pulumi.BoolPtrOutput)
}

type CommandResponseArrayOutput struct{ *pulumi.OutputState }

func (CommandResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandResponse)(nil)).Elem()
}

func (o CommandResponseArrayOutput) ToCommandResponseArrayOutput() CommandResponseArrayOutput {
	return o
}

func (o CommandResponseArrayOutput) ToCommandResponseArrayOutputWithContext(ctx context.Context) CommandResponseArrayOutput {
	return o
}

func (o CommandResponseArrayOutput) Index(i pulumi.IntInput) CommandResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandResponse {
		return vs[0].([]CommandResponse)[vs[1].(int)]
	}).(CommandResponseOutput)
}

// The validation results. There's validation on package when it's created or updated.
type PackageValidationResultResponse struct {
	// Error information.
	Errors []string `pulumi:"errors"`
	// Indicates whether the package passed the validation.
	IsValid bool `pulumi:"isValid"`
	// Validation name.
	ValidationName string `pulumi:"validationName"`
}

// PackageValidationResultResponseInput is an input type that accepts PackageValidationResultResponseArgs and PackageValidationResultResponseOutput values.
// You can construct a concrete instance of `PackageValidationResultResponseInput` via:
//
//          PackageValidationResultResponseArgs{...}
type PackageValidationResultResponseInput interface {
	pulumi.Input

	ToPackageValidationResultResponseOutput() PackageValidationResultResponseOutput
	ToPackageValidationResultResponseOutputWithContext(context.Context) PackageValidationResultResponseOutput
}

// The validation results. There's validation on package when it's created or updated.
type PackageValidationResultResponseArgs struct {
	// Error information.
	Errors pulumi.StringArrayInput `pulumi:"errors"`
	// Indicates whether the package passed the validation.
	IsValid pulumi.BoolInput `pulumi:"isValid"`
	// Validation name.
	ValidationName pulumi.StringInput `pulumi:"validationName"`
}

func (PackageValidationResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageValidationResultResponse)(nil)).Elem()
}

func (i PackageValidationResultResponseArgs) ToPackageValidationResultResponseOutput() PackageValidationResultResponseOutput {
	return i.ToPackageValidationResultResponseOutputWithContext(context.Background())
}

func (i PackageValidationResultResponseArgs) ToPackageValidationResultResponseOutputWithContext(ctx context.Context) PackageValidationResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageValidationResultResponseOutput)
}

// PackageValidationResultResponseArrayInput is an input type that accepts PackageValidationResultResponseArray and PackageValidationResultResponseArrayOutput values.
// You can construct a concrete instance of `PackageValidationResultResponseArrayInput` via:
//
//          PackageValidationResultResponseArray{ PackageValidationResultResponseArgs{...} }
type PackageValidationResultResponseArrayInput interface {
	pulumi.Input

	ToPackageValidationResultResponseArrayOutput() PackageValidationResultResponseArrayOutput
	ToPackageValidationResultResponseArrayOutputWithContext(context.Context) PackageValidationResultResponseArrayOutput
}

type PackageValidationResultResponseArray []PackageValidationResultResponseInput

func (PackageValidationResultResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageValidationResultResponse)(nil)).Elem()
}

func (i PackageValidationResultResponseArray) ToPackageValidationResultResponseArrayOutput() PackageValidationResultResponseArrayOutput {
	return i.ToPackageValidationResultResponseArrayOutputWithContext(context.Background())
}

func (i PackageValidationResultResponseArray) ToPackageValidationResultResponseArrayOutputWithContext(ctx context.Context) PackageValidationResultResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageValidationResultResponseArrayOutput)
}

// The validation results. There's validation on package when it's created or updated.
type PackageValidationResultResponseOutput struct{ *pulumi.OutputState }

func (PackageValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageValidationResultResponse)(nil)).Elem()
}

func (o PackageValidationResultResponseOutput) ToPackageValidationResultResponseOutput() PackageValidationResultResponseOutput {
	return o
}

func (o PackageValidationResultResponseOutput) ToPackageValidationResultResponseOutputWithContext(ctx context.Context) PackageValidationResultResponseOutput {
	return o
}

// Error information.
func (o PackageValidationResultResponseOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PackageValidationResultResponse) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// Indicates whether the package passed the validation.
func (o PackageValidationResultResponseOutput) IsValid() pulumi.BoolOutput {
	return o.ApplyT(func(v PackageValidationResultResponse) bool { return v.IsValid }).(pulumi.BoolOutput)
}

// Validation name.
func (o PackageValidationResultResponseOutput) ValidationName() pulumi.StringOutput {
	return o.ApplyT(func(v PackageValidationResultResponse) string { return v.ValidationName }).(pulumi.StringOutput)
}

type PackageValidationResultResponseArrayOutput struct{ *pulumi.OutputState }

func (PackageValidationResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageValidationResultResponse)(nil)).Elem()
}

func (o PackageValidationResultResponseArrayOutput) ToPackageValidationResultResponseArrayOutput() PackageValidationResultResponseArrayOutput {
	return o
}

func (o PackageValidationResultResponseArrayOutput) ToPackageValidationResultResponseArrayOutputWithContext(ctx context.Context) PackageValidationResultResponseArrayOutput {
	return o
}

func (o PackageValidationResultResponseArrayOutput) Index(i pulumi.IntInput) PackageValidationResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageValidationResultResponse {
		return vs[0].([]PackageValidationResultResponse)[vs[1].(int)]
	}).(PackageValidationResultResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The type of identity that last modified the resource.
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// SystemDataResponseInput is an input type that accepts SystemDataResponseArgs and SystemDataResponseOutput values.
// You can construct a concrete instance of `SystemDataResponseInput` via:
//
//          SystemDataResponseArgs{...}
type SystemDataResponseInput interface {
	pulumi.Input

	ToSystemDataResponseOutput() SystemDataResponseOutput
	ToSystemDataResponseOutputWithContext(context.Context) SystemDataResponseOutput
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseArgs struct {
	// The timestamp of resource creation (UTC).
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy pulumi.StringPtrInput `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType pulumi.StringPtrInput `pulumi:"createdByType"`
	// The type of identity that last modified the resource.
	LastModifiedAt pulumi.StringPtrInput `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy pulumi.StringPtrInput `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType pulumi.StringPtrInput `pulumi:"lastModifiedByType"`
}

func (SystemDataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (i SystemDataResponseArgs) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return i.ToSystemDataResponseOutputWithContext(context.Background())
}

func (i SystemDataResponseArgs) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponseOutput)
}

func (i SystemDataResponseArgs) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return i.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (i SystemDataResponseArgs) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponseOutput).ToSystemDataResponsePtrOutputWithContext(ctx)
}

// SystemDataResponsePtrInput is an input type that accepts SystemDataResponseArgs, SystemDataResponsePtr and SystemDataResponsePtrOutput values.
// You can construct a concrete instance of `SystemDataResponsePtrInput` via:
//
//          SystemDataResponseArgs{...}
//
//  or:
//
//          nil
type SystemDataResponsePtrInput interface {
	pulumi.Input

	ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput
	ToSystemDataResponsePtrOutputWithContext(context.Context) SystemDataResponsePtrOutput
}

type systemDataResponsePtrType SystemDataResponseArgs

func SystemDataResponsePtr(v *SystemDataResponseArgs) SystemDataResponsePtrInput {
	return (*systemDataResponsePtrType)(v)
}

func (*systemDataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDataResponse)(nil)).Elem()
}

func (i *systemDataResponsePtrType) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return i.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (i *systemDataResponsePtrType) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponsePtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return o.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (o SystemDataResponseOutput) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *SystemDataResponse {
		return &v
	}).(SystemDataResponsePtrOutput)
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

type SystemDataResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) Elem() SystemDataResponseOutput {
	return o.ApplyT(func(v *SystemDataResponse) SystemDataResponse { return *v }).(SystemDataResponseOutput)
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedByType
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedByType
	}).(pulumi.StringPtrOutput)
}

// The information of the target OS to be tested.
type TargetOSInfo struct {
	// Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'.
	OsUpdateType string `pulumi:"osUpdateType"`
	// Specifies the target OSs to be tested.
	TargetOSs []string `pulumi:"targetOSs"`
}

// TargetOSInfoInput is an input type that accepts TargetOSInfoArgs and TargetOSInfoOutput values.
// You can construct a concrete instance of `TargetOSInfoInput` via:
//
//          TargetOSInfoArgs{...}
type TargetOSInfoInput interface {
	pulumi.Input

	ToTargetOSInfoOutput() TargetOSInfoOutput
	ToTargetOSInfoOutputWithContext(context.Context) TargetOSInfoOutput
}

// The information of the target OS to be tested.
type TargetOSInfoArgs struct {
	// Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'.
	OsUpdateType pulumi.StringInput `pulumi:"osUpdateType"`
	// Specifies the target OSs to be tested.
	TargetOSs pulumi.StringArrayInput `pulumi:"targetOSs"`
}

func (TargetOSInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetOSInfo)(nil)).Elem()
}

func (i TargetOSInfoArgs) ToTargetOSInfoOutput() TargetOSInfoOutput {
	return i.ToTargetOSInfoOutputWithContext(context.Background())
}

func (i TargetOSInfoArgs) ToTargetOSInfoOutputWithContext(ctx context.Context) TargetOSInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOSInfoOutput)
}

// TargetOSInfoArrayInput is an input type that accepts TargetOSInfoArray and TargetOSInfoArrayOutput values.
// You can construct a concrete instance of `TargetOSInfoArrayInput` via:
//
//          TargetOSInfoArray{ TargetOSInfoArgs{...} }
type TargetOSInfoArrayInput interface {
	pulumi.Input

	ToTargetOSInfoArrayOutput() TargetOSInfoArrayOutput
	ToTargetOSInfoArrayOutputWithContext(context.Context) TargetOSInfoArrayOutput
}

type TargetOSInfoArray []TargetOSInfoInput

func (TargetOSInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetOSInfo)(nil)).Elem()
}

func (i TargetOSInfoArray) ToTargetOSInfoArrayOutput() TargetOSInfoArrayOutput {
	return i.ToTargetOSInfoArrayOutputWithContext(context.Background())
}

func (i TargetOSInfoArray) ToTargetOSInfoArrayOutputWithContext(ctx context.Context) TargetOSInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOSInfoArrayOutput)
}

// The information of the target OS to be tested.
type TargetOSInfoOutput struct{ *pulumi.OutputState }

func (TargetOSInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetOSInfo)(nil)).Elem()
}

func (o TargetOSInfoOutput) ToTargetOSInfoOutput() TargetOSInfoOutput {
	return o
}

func (o TargetOSInfoOutput) ToTargetOSInfoOutputWithContext(ctx context.Context) TargetOSInfoOutput {
	return o
}

// Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'.
func (o TargetOSInfoOutput) OsUpdateType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetOSInfo) string { return v.OsUpdateType }).(pulumi.StringOutput)
}

// Specifies the target OSs to be tested.
func (o TargetOSInfoOutput) TargetOSs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TargetOSInfo) []string { return v.TargetOSs }).(pulumi.StringArrayOutput)
}

type TargetOSInfoArrayOutput struct{ *pulumi.OutputState }

func (TargetOSInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetOSInfo)(nil)).Elem()
}

func (o TargetOSInfoArrayOutput) ToTargetOSInfoArrayOutput() TargetOSInfoArrayOutput {
	return o
}

func (o TargetOSInfoArrayOutput) ToTargetOSInfoArrayOutputWithContext(ctx context.Context) TargetOSInfoArrayOutput {
	return o
}

func (o TargetOSInfoArrayOutput) Index(i pulumi.IntInput) TargetOSInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetOSInfo {
		return vs[0].([]TargetOSInfo)[vs[1].(int)]
	}).(TargetOSInfoOutput)
}

// The information of the target OS to be tested.
type TargetOSInfoResponse struct {
	// Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'.
	OsUpdateType string `pulumi:"osUpdateType"`
	// Specifies the target OSs to be tested.
	TargetOSs []string `pulumi:"targetOSs"`
}

// TargetOSInfoResponseInput is an input type that accepts TargetOSInfoResponseArgs and TargetOSInfoResponseOutput values.
// You can construct a concrete instance of `TargetOSInfoResponseInput` via:
//
//          TargetOSInfoResponseArgs{...}
type TargetOSInfoResponseInput interface {
	pulumi.Input

	ToTargetOSInfoResponseOutput() TargetOSInfoResponseOutput
	ToTargetOSInfoResponseOutputWithContext(context.Context) TargetOSInfoResponseOutput
}

// The information of the target OS to be tested.
type TargetOSInfoResponseArgs struct {
	// Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'.
	OsUpdateType pulumi.StringInput `pulumi:"osUpdateType"`
	// Specifies the target OSs to be tested.
	TargetOSs pulumi.StringArrayInput `pulumi:"targetOSs"`
}

func (TargetOSInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetOSInfoResponse)(nil)).Elem()
}

func (i TargetOSInfoResponseArgs) ToTargetOSInfoResponseOutput() TargetOSInfoResponseOutput {
	return i.ToTargetOSInfoResponseOutputWithContext(context.Background())
}

func (i TargetOSInfoResponseArgs) ToTargetOSInfoResponseOutputWithContext(ctx context.Context) TargetOSInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOSInfoResponseOutput)
}

// TargetOSInfoResponseArrayInput is an input type that accepts TargetOSInfoResponseArray and TargetOSInfoResponseArrayOutput values.
// You can construct a concrete instance of `TargetOSInfoResponseArrayInput` via:
//
//          TargetOSInfoResponseArray{ TargetOSInfoResponseArgs{...} }
type TargetOSInfoResponseArrayInput interface {
	pulumi.Input

	ToTargetOSInfoResponseArrayOutput() TargetOSInfoResponseArrayOutput
	ToTargetOSInfoResponseArrayOutputWithContext(context.Context) TargetOSInfoResponseArrayOutput
}

type TargetOSInfoResponseArray []TargetOSInfoResponseInput

func (TargetOSInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetOSInfoResponse)(nil)).Elem()
}

func (i TargetOSInfoResponseArray) ToTargetOSInfoResponseArrayOutput() TargetOSInfoResponseArrayOutput {
	return i.ToTargetOSInfoResponseArrayOutputWithContext(context.Background())
}

func (i TargetOSInfoResponseArray) ToTargetOSInfoResponseArrayOutputWithContext(ctx context.Context) TargetOSInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOSInfoResponseArrayOutput)
}

// The information of the target OS to be tested.
type TargetOSInfoResponseOutput struct{ *pulumi.OutputState }

func (TargetOSInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetOSInfoResponse)(nil)).Elem()
}

func (o TargetOSInfoResponseOutput) ToTargetOSInfoResponseOutput() TargetOSInfoResponseOutput {
	return o
}

func (o TargetOSInfoResponseOutput) ToTargetOSInfoResponseOutputWithContext(ctx context.Context) TargetOSInfoResponseOutput {
	return o
}

// Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'.
func (o TargetOSInfoResponseOutput) OsUpdateType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetOSInfoResponse) string { return v.OsUpdateType }).(pulumi.StringOutput)
}

// Specifies the target OSs to be tested.
func (o TargetOSInfoResponseOutput) TargetOSs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TargetOSInfoResponse) []string { return v.TargetOSs }).(pulumi.StringArrayOutput)
}

type TargetOSInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetOSInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetOSInfoResponse)(nil)).Elem()
}

func (o TargetOSInfoResponseArrayOutput) ToTargetOSInfoResponseArrayOutput() TargetOSInfoResponseArrayOutput {
	return o
}

func (o TargetOSInfoResponseArrayOutput) ToTargetOSInfoResponseArrayOutputWithContext(ctx context.Context) TargetOSInfoResponseArrayOutput {
	return o
}

func (o TargetOSInfoResponseArrayOutput) Index(i pulumi.IntInput) TargetOSInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetOSInfoResponse {
		return vs[0].([]TargetOSInfoResponse)[vs[1].(int)]
	}).(TargetOSInfoResponseOutput)
}

// The definition of a Test.
type Test struct {
	// The commands used in the test.
	Commands []Command `pulumi:"commands"`
	// Indicates if this test is active.It doesn't schedule test for not active Test.
	IsActive *bool `pulumi:"isActive"`
	// The type of the test.
	TestType string `pulumi:"testType"`
}

// TestInput is an input type that accepts TestArgs and TestOutput values.
// You can construct a concrete instance of `TestInput` via:
//
//          TestArgs{...}
type TestInput interface {
	pulumi.Input

	ToTestOutput() TestOutput
	ToTestOutputWithContext(context.Context) TestOutput
}

// The definition of a Test.
type TestArgs struct {
	// The commands used in the test.
	Commands CommandArrayInput `pulumi:"commands"`
	// Indicates if this test is active.It doesn't schedule test for not active Test.
	IsActive pulumi.BoolPtrInput `pulumi:"isActive"`
	// The type of the test.
	TestType pulumi.StringInput `pulumi:"testType"`
}

func (TestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Test)(nil)).Elem()
}

func (i TestArgs) ToTestOutput() TestOutput {
	return i.ToTestOutputWithContext(context.Background())
}

func (i TestArgs) ToTestOutputWithContext(ctx context.Context) TestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestOutput)
}

// TestArrayInput is an input type that accepts TestArray and TestArrayOutput values.
// You can construct a concrete instance of `TestArrayInput` via:
//
//          TestArray{ TestArgs{...} }
type TestArrayInput interface {
	pulumi.Input

	ToTestArrayOutput() TestArrayOutput
	ToTestArrayOutputWithContext(context.Context) TestArrayOutput
}

type TestArray []TestInput

func (TestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Test)(nil)).Elem()
}

func (i TestArray) ToTestArrayOutput() TestArrayOutput {
	return i.ToTestArrayOutputWithContext(context.Background())
}

func (i TestArray) ToTestArrayOutputWithContext(ctx context.Context) TestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestArrayOutput)
}

// The definition of a Test.
type TestOutput struct{ *pulumi.OutputState }

func (TestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Test)(nil)).Elem()
}

func (o TestOutput) ToTestOutput() TestOutput {
	return o
}

func (o TestOutput) ToTestOutputWithContext(ctx context.Context) TestOutput {
	return o
}

// The commands used in the test.
func (o TestOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v Test) []Command { return v.Commands }).(CommandArrayOutput)
}

// Indicates if this test is active.It doesn't schedule test for not active Test.
func (o TestOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Test) *bool { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// The type of the test.
func (o TestOutput) TestType() pulumi.StringOutput {
	return o.ApplyT(func(v Test) string { return v.TestType }).(pulumi.StringOutput)
}

type TestArrayOutput struct{ *pulumi.OutputState }

func (TestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Test)(nil)).Elem()
}

func (o TestArrayOutput) ToTestArrayOutput() TestArrayOutput {
	return o
}

func (o TestArrayOutput) ToTestArrayOutputWithContext(ctx context.Context) TestArrayOutput {
	return o
}

func (o TestArrayOutput) Index(i pulumi.IntInput) TestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Test {
		return vs[0].([]Test)[vs[1].(int)]
	}).(TestOutput)
}

// Describes a Test Base Account SKU.
type TestBaseAccountSKU struct {
	// The locations that the SKU is available.
	Locations []string `pulumi:"locations"`
	// The name of the SKU. This is typically a letter + number code, such as B0 or S0.
	Name string `pulumi:"name"`
	// The type of resource the SKU applies to.
	ResourceType *string `pulumi:"resourceType"`
	// The tier of this particular SKU.
	Tier string `pulumi:"tier"`
}

// TestBaseAccountSKUInput is an input type that accepts TestBaseAccountSKUArgs and TestBaseAccountSKUOutput values.
// You can construct a concrete instance of `TestBaseAccountSKUInput` via:
//
//          TestBaseAccountSKUArgs{...}
type TestBaseAccountSKUInput interface {
	pulumi.Input

	ToTestBaseAccountSKUOutput() TestBaseAccountSKUOutput
	ToTestBaseAccountSKUOutputWithContext(context.Context) TestBaseAccountSKUOutput
}

// Describes a Test Base Account SKU.
type TestBaseAccountSKUArgs struct {
	// The locations that the SKU is available.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// The name of the SKU. This is typically a letter + number code, such as B0 or S0.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of resource the SKU applies to.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// The tier of this particular SKU.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (TestBaseAccountSKUArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestBaseAccountSKU)(nil)).Elem()
}

func (i TestBaseAccountSKUArgs) ToTestBaseAccountSKUOutput() TestBaseAccountSKUOutput {
	return i.ToTestBaseAccountSKUOutputWithContext(context.Background())
}

func (i TestBaseAccountSKUArgs) ToTestBaseAccountSKUOutputWithContext(ctx context.Context) TestBaseAccountSKUOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestBaseAccountSKUOutput)
}

func (i TestBaseAccountSKUArgs) ToTestBaseAccountSKUPtrOutput() TestBaseAccountSKUPtrOutput {
	return i.ToTestBaseAccountSKUPtrOutputWithContext(context.Background())
}

func (i TestBaseAccountSKUArgs) ToTestBaseAccountSKUPtrOutputWithContext(ctx context.Context) TestBaseAccountSKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestBaseAccountSKUOutput).ToTestBaseAccountSKUPtrOutputWithContext(ctx)
}

// TestBaseAccountSKUPtrInput is an input type that accepts TestBaseAccountSKUArgs, TestBaseAccountSKUPtr and TestBaseAccountSKUPtrOutput values.
// You can construct a concrete instance of `TestBaseAccountSKUPtrInput` via:
//
//          TestBaseAccountSKUArgs{...}
//
//  or:
//
//          nil
type TestBaseAccountSKUPtrInput interface {
	pulumi.Input

	ToTestBaseAccountSKUPtrOutput() TestBaseAccountSKUPtrOutput
	ToTestBaseAccountSKUPtrOutputWithContext(context.Context) TestBaseAccountSKUPtrOutput
}

type testBaseAccountSKUPtrType TestBaseAccountSKUArgs

func TestBaseAccountSKUPtr(v *TestBaseAccountSKUArgs) TestBaseAccountSKUPtrInput {
	return (*testBaseAccountSKUPtrType)(v)
}

func (*testBaseAccountSKUPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestBaseAccountSKU)(nil)).Elem()
}

func (i *testBaseAccountSKUPtrType) ToTestBaseAccountSKUPtrOutput() TestBaseAccountSKUPtrOutput {
	return i.ToTestBaseAccountSKUPtrOutputWithContext(context.Background())
}

func (i *testBaseAccountSKUPtrType) ToTestBaseAccountSKUPtrOutputWithContext(ctx context.Context) TestBaseAccountSKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestBaseAccountSKUPtrOutput)
}

// Describes a Test Base Account SKU.
type TestBaseAccountSKUOutput struct{ *pulumi.OutputState }

func (TestBaseAccountSKUOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestBaseAccountSKU)(nil)).Elem()
}

func (o TestBaseAccountSKUOutput) ToTestBaseAccountSKUOutput() TestBaseAccountSKUOutput {
	return o
}

func (o TestBaseAccountSKUOutput) ToTestBaseAccountSKUOutputWithContext(ctx context.Context) TestBaseAccountSKUOutput {
	return o
}

func (o TestBaseAccountSKUOutput) ToTestBaseAccountSKUPtrOutput() TestBaseAccountSKUPtrOutput {
	return o.ToTestBaseAccountSKUPtrOutputWithContext(context.Background())
}

func (o TestBaseAccountSKUOutput) ToTestBaseAccountSKUPtrOutputWithContext(ctx context.Context) TestBaseAccountSKUPtrOutput {
	return o.ApplyT(func(v TestBaseAccountSKU) *TestBaseAccountSKU {
		return &v
	}).(TestBaseAccountSKUPtrOutput)
}

// The locations that the SKU is available.
func (o TestBaseAccountSKUOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestBaseAccountSKU) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// The name of the SKU. This is typically a letter + number code, such as B0 or S0.
func (o TestBaseAccountSKUOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TestBaseAccountSKU) string { return v.Name }).(pulumi.StringOutput)
}

// The type of resource the SKU applies to.
func (o TestBaseAccountSKUOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestBaseAccountSKU) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// The tier of this particular SKU.
func (o TestBaseAccountSKUOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v TestBaseAccountSKU) string { return v.Tier }).(pulumi.StringOutput)
}

type TestBaseAccountSKUPtrOutput struct{ *pulumi.OutputState }

func (TestBaseAccountSKUPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestBaseAccountSKU)(nil)).Elem()
}

func (o TestBaseAccountSKUPtrOutput) ToTestBaseAccountSKUPtrOutput() TestBaseAccountSKUPtrOutput {
	return o
}

func (o TestBaseAccountSKUPtrOutput) ToTestBaseAccountSKUPtrOutputWithContext(ctx context.Context) TestBaseAccountSKUPtrOutput {
	return o
}

func (o TestBaseAccountSKUPtrOutput) Elem() TestBaseAccountSKUOutput {
	return o.ApplyT(func(v *TestBaseAccountSKU) TestBaseAccountSKU { return *v }).(TestBaseAccountSKUOutput)
}

// The locations that the SKU is available.
func (o TestBaseAccountSKUPtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestBaseAccountSKU) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// The name of the SKU. This is typically a letter + number code, such as B0 or S0.
func (o TestBaseAccountSKUPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestBaseAccountSKU) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of resource the SKU applies to.
func (o TestBaseAccountSKUPtrOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestBaseAccountSKU) *string {
		if v == nil {
			return nil
		}
		return v.ResourceType
	}).(pulumi.StringPtrOutput)
}

// The tier of this particular SKU.
func (o TestBaseAccountSKUPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestBaseAccountSKU) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Properties of the Test Base Account SKU Capability.
type TestBaseAccountSKUCapabilityResponse struct {
	// An invariant to describe the feature, such as 'SLA'.
	Name string `pulumi:"name"`
	// An invariant if the feature is measured by quantity, such as 99.9%.
	Value string `pulumi:"value"`
}

// TestBaseAccountSKUCapabilityResponseInput is an input type that accepts TestBaseAccountSKUCapabilityResponseArgs and TestBaseAccountSKUCapabilityResponseOutput values.
// You can construct a concrete instance of `TestBaseAccountSKUCapabilityResponseInput` via:
//
//          TestBaseAccountSKUCapabilityResponseArgs{...}
type TestBaseAccountSKUCapabilityResponseInput interface {
	pulumi.Input

	ToTestBaseAccountSKUCapabilityResponseOutput() TestBaseAccountSKUCapabilityResponseOutput
	ToTestBaseAccountSKUCapabilityResponseOutputWithContext(context.Context) TestBaseAccountSKUCapabilityResponseOutput
}

// Properties of the Test Base Account SKU Capability.
type TestBaseAccountSKUCapabilityResponseArgs struct {
	// An invariant to describe the feature, such as 'SLA'.
	Name pulumi.StringInput `pulumi:"name"`
	// An invariant if the feature is measured by quantity, such as 99.9%.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TestBaseAccountSKUCapabilityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestBaseAccountSKUCapabilityResponse)(nil)).Elem()
}

func (i TestBaseAccountSKUCapabilityResponseArgs) ToTestBaseAccountSKUCapabilityResponseOutput() TestBaseAccountSKUCapabilityResponseOutput {
	return i.ToTestBaseAccountSKUCapabilityResponseOutputWithContext(context.Background())
}

func (i TestBaseAccountSKUCapabilityResponseArgs) ToTestBaseAccountSKUCapabilityResponseOutputWithContext(ctx context.Context) TestBaseAccountSKUCapabilityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestBaseAccountSKUCapabilityResponseOutput)
}

// TestBaseAccountSKUCapabilityResponseArrayInput is an input type that accepts TestBaseAccountSKUCapabilityResponseArray and TestBaseAccountSKUCapabilityResponseArrayOutput values.
// You can construct a concrete instance of `TestBaseAccountSKUCapabilityResponseArrayInput` via:
//
//          TestBaseAccountSKUCapabilityResponseArray{ TestBaseAccountSKUCapabilityResponseArgs{...} }
type TestBaseAccountSKUCapabilityResponseArrayInput interface {
	pulumi.Input

	ToTestBaseAccountSKUCapabilityResponseArrayOutput() TestBaseAccountSKUCapabilityResponseArrayOutput
	ToTestBaseAccountSKUCapabilityResponseArrayOutputWithContext(context.Context) TestBaseAccountSKUCapabilityResponseArrayOutput
}

type TestBaseAccountSKUCapabilityResponseArray []TestBaseAccountSKUCapabilityResponseInput

func (TestBaseAccountSKUCapabilityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestBaseAccountSKUCapabilityResponse)(nil)).Elem()
}

func (i TestBaseAccountSKUCapabilityResponseArray) ToTestBaseAccountSKUCapabilityResponseArrayOutput() TestBaseAccountSKUCapabilityResponseArrayOutput {
	return i.ToTestBaseAccountSKUCapabilityResponseArrayOutputWithContext(context.Background())
}

func (i TestBaseAccountSKUCapabilityResponseArray) ToTestBaseAccountSKUCapabilityResponseArrayOutputWithContext(ctx context.Context) TestBaseAccountSKUCapabilityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestBaseAccountSKUCapabilityResponseArrayOutput)
}

// Properties of the Test Base Account SKU Capability.
type TestBaseAccountSKUCapabilityResponseOutput struct{ *pulumi.OutputState }

func (TestBaseAccountSKUCapabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestBaseAccountSKUCapabilityResponse)(nil)).Elem()
}

func (o TestBaseAccountSKUCapabilityResponseOutput) ToTestBaseAccountSKUCapabilityResponseOutput() TestBaseAccountSKUCapabilityResponseOutput {
	return o
}

func (o TestBaseAccountSKUCapabilityResponseOutput) ToTestBaseAccountSKUCapabilityResponseOutputWithContext(ctx context.Context) TestBaseAccountSKUCapabilityResponseOutput {
	return o
}

// An invariant to describe the feature, such as 'SLA'.
func (o TestBaseAccountSKUCapabilityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TestBaseAccountSKUCapabilityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// An invariant if the feature is measured by quantity, such as 99.9%.
func (o TestBaseAccountSKUCapabilityResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TestBaseAccountSKUCapabilityResponse) string { return v.Value }).(pulumi.StringOutput)
}

type TestBaseAccountSKUCapabilityResponseArrayOutput struct{ *pulumi.OutputState }

func (TestBaseAccountSKUCapabilityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestBaseAccountSKUCapabilityResponse)(nil)).Elem()
}

func (o TestBaseAccountSKUCapabilityResponseArrayOutput) ToTestBaseAccountSKUCapabilityResponseArrayOutput() TestBaseAccountSKUCapabilityResponseArrayOutput {
	return o
}

func (o TestBaseAccountSKUCapabilityResponseArrayOutput) ToTestBaseAccountSKUCapabilityResponseArrayOutputWithContext(ctx context.Context) TestBaseAccountSKUCapabilityResponseArrayOutput {
	return o
}

func (o TestBaseAccountSKUCapabilityResponseArrayOutput) Index(i pulumi.IntInput) TestBaseAccountSKUCapabilityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TestBaseAccountSKUCapabilityResponse {
		return vs[0].([]TestBaseAccountSKUCapabilityResponse)[vs[1].(int)]
	}).(TestBaseAccountSKUCapabilityResponseOutput)
}

// Describes a Test Base Account SKU.
type TestBaseAccountSKUResponse struct {
	// The capabilities of a SKU.
	Capabilities []TestBaseAccountSKUCapabilityResponse `pulumi:"capabilities"`
	// The locations that the SKU is available.
	Locations []string `pulumi:"locations"`
	// The name of the SKU. This is typically a letter + number code, such as B0 or S0.
	Name string `pulumi:"name"`
	// The type of resource the SKU applies to.
	ResourceType *string `pulumi:"resourceType"`
	// The tier of this particular SKU.
	Tier string `pulumi:"tier"`
}

// TestBaseAccountSKUResponseInput is an input type that accepts TestBaseAccountSKUResponseArgs and TestBaseAccountSKUResponseOutput values.
// You can construct a concrete instance of `TestBaseAccountSKUResponseInput` via:
//
//          TestBaseAccountSKUResponseArgs{...}
type TestBaseAccountSKUResponseInput interface {
	pulumi.Input

	ToTestBaseAccountSKUResponseOutput() TestBaseAccountSKUResponseOutput
	ToTestBaseAccountSKUResponseOutputWithContext(context.Context) TestBaseAccountSKUResponseOutput
}

// Describes a Test Base Account SKU.
type TestBaseAccountSKUResponseArgs struct {
	// The capabilities of a SKU.
	Capabilities TestBaseAccountSKUCapabilityResponseArrayInput `pulumi:"capabilities"`
	// The locations that the SKU is available.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// The name of the SKU. This is typically a letter + number code, such as B0 or S0.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of resource the SKU applies to.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// The tier of this particular SKU.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (TestBaseAccountSKUResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestBaseAccountSKUResponse)(nil)).Elem()
}

func (i TestBaseAccountSKUResponseArgs) ToTestBaseAccountSKUResponseOutput() TestBaseAccountSKUResponseOutput {
	return i.ToTestBaseAccountSKUResponseOutputWithContext(context.Background())
}

func (i TestBaseAccountSKUResponseArgs) ToTestBaseAccountSKUResponseOutputWithContext(ctx context.Context) TestBaseAccountSKUResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestBaseAccountSKUResponseOutput)
}

func (i TestBaseAccountSKUResponseArgs) ToTestBaseAccountSKUResponsePtrOutput() TestBaseAccountSKUResponsePtrOutput {
	return i.ToTestBaseAccountSKUResponsePtrOutputWithContext(context.Background())
}

func (i TestBaseAccountSKUResponseArgs) ToTestBaseAccountSKUResponsePtrOutputWithContext(ctx context.Context) TestBaseAccountSKUResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestBaseAccountSKUResponseOutput).ToTestBaseAccountSKUResponsePtrOutputWithContext(ctx)
}

// TestBaseAccountSKUResponsePtrInput is an input type that accepts TestBaseAccountSKUResponseArgs, TestBaseAccountSKUResponsePtr and TestBaseAccountSKUResponsePtrOutput values.
// You can construct a concrete instance of `TestBaseAccountSKUResponsePtrInput` via:
//
//          TestBaseAccountSKUResponseArgs{...}
//
//  or:
//
//          nil
type TestBaseAccountSKUResponsePtrInput interface {
	pulumi.Input

	ToTestBaseAccountSKUResponsePtrOutput() TestBaseAccountSKUResponsePtrOutput
	ToTestBaseAccountSKUResponsePtrOutputWithContext(context.Context) TestBaseAccountSKUResponsePtrOutput
}

type testBaseAccountSKUResponsePtrType TestBaseAccountSKUResponseArgs

func TestBaseAccountSKUResponsePtr(v *TestBaseAccountSKUResponseArgs) TestBaseAccountSKUResponsePtrInput {
	return (*testBaseAccountSKUResponsePtrType)(v)
}

func (*testBaseAccountSKUResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestBaseAccountSKUResponse)(nil)).Elem()
}

func (i *testBaseAccountSKUResponsePtrType) ToTestBaseAccountSKUResponsePtrOutput() TestBaseAccountSKUResponsePtrOutput {
	return i.ToTestBaseAccountSKUResponsePtrOutputWithContext(context.Background())
}

func (i *testBaseAccountSKUResponsePtrType) ToTestBaseAccountSKUResponsePtrOutputWithContext(ctx context.Context) TestBaseAccountSKUResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestBaseAccountSKUResponsePtrOutput)
}

// Describes a Test Base Account SKU.
type TestBaseAccountSKUResponseOutput struct{ *pulumi.OutputState }

func (TestBaseAccountSKUResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestBaseAccountSKUResponse)(nil)).Elem()
}

func (o TestBaseAccountSKUResponseOutput) ToTestBaseAccountSKUResponseOutput() TestBaseAccountSKUResponseOutput {
	return o
}

func (o TestBaseAccountSKUResponseOutput) ToTestBaseAccountSKUResponseOutputWithContext(ctx context.Context) TestBaseAccountSKUResponseOutput {
	return o
}

func (o TestBaseAccountSKUResponseOutput) ToTestBaseAccountSKUResponsePtrOutput() TestBaseAccountSKUResponsePtrOutput {
	return o.ToTestBaseAccountSKUResponsePtrOutputWithContext(context.Background())
}

func (o TestBaseAccountSKUResponseOutput) ToTestBaseAccountSKUResponsePtrOutputWithContext(ctx context.Context) TestBaseAccountSKUResponsePtrOutput {
	return o.ApplyT(func(v TestBaseAccountSKUResponse) *TestBaseAccountSKUResponse {
		return &v
	}).(TestBaseAccountSKUResponsePtrOutput)
}

// The capabilities of a SKU.
func (o TestBaseAccountSKUResponseOutput) Capabilities() TestBaseAccountSKUCapabilityResponseArrayOutput {
	return o.ApplyT(func(v TestBaseAccountSKUResponse) []TestBaseAccountSKUCapabilityResponse { return v.Capabilities }).(TestBaseAccountSKUCapabilityResponseArrayOutput)
}

// The locations that the SKU is available.
func (o TestBaseAccountSKUResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestBaseAccountSKUResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// The name of the SKU. This is typically a letter + number code, such as B0 or S0.
func (o TestBaseAccountSKUResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TestBaseAccountSKUResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of resource the SKU applies to.
func (o TestBaseAccountSKUResponseOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestBaseAccountSKUResponse) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// The tier of this particular SKU.
func (o TestBaseAccountSKUResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v TestBaseAccountSKUResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type TestBaseAccountSKUResponsePtrOutput struct{ *pulumi.OutputState }

func (TestBaseAccountSKUResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestBaseAccountSKUResponse)(nil)).Elem()
}

func (o TestBaseAccountSKUResponsePtrOutput) ToTestBaseAccountSKUResponsePtrOutput() TestBaseAccountSKUResponsePtrOutput {
	return o
}

func (o TestBaseAccountSKUResponsePtrOutput) ToTestBaseAccountSKUResponsePtrOutputWithContext(ctx context.Context) TestBaseAccountSKUResponsePtrOutput {
	return o
}

func (o TestBaseAccountSKUResponsePtrOutput) Elem() TestBaseAccountSKUResponseOutput {
	return o.ApplyT(func(v *TestBaseAccountSKUResponse) TestBaseAccountSKUResponse { return *v }).(TestBaseAccountSKUResponseOutput)
}

// The capabilities of a SKU.
func (o TestBaseAccountSKUResponsePtrOutput) Capabilities() TestBaseAccountSKUCapabilityResponseArrayOutput {
	return o.ApplyT(func(v *TestBaseAccountSKUResponse) []TestBaseAccountSKUCapabilityResponse {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(TestBaseAccountSKUCapabilityResponseArrayOutput)
}

// The locations that the SKU is available.
func (o TestBaseAccountSKUResponsePtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestBaseAccountSKUResponse) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// The name of the SKU. This is typically a letter + number code, such as B0 or S0.
func (o TestBaseAccountSKUResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestBaseAccountSKUResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of resource the SKU applies to.
func (o TestBaseAccountSKUResponsePtrOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestBaseAccountSKUResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceType
	}).(pulumi.StringPtrOutput)
}

// The tier of this particular SKU.
func (o TestBaseAccountSKUResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestBaseAccountSKUResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// The definition of a Test.
type TestResponse struct {
	// The commands used in the test.
	Commands []CommandResponse `pulumi:"commands"`
	// Indicates if this test is active.It doesn't schedule test for not active Test.
	IsActive *bool `pulumi:"isActive"`
	// The type of the test.
	TestType string `pulumi:"testType"`
	// The status of the validation run of the package.
	ValidationRunStatus string `pulumi:"validationRunStatus"`
}

// TestResponseInput is an input type that accepts TestResponseArgs and TestResponseOutput values.
// You can construct a concrete instance of `TestResponseInput` via:
//
//          TestResponseArgs{...}
type TestResponseInput interface {
	pulumi.Input

	ToTestResponseOutput() TestResponseOutput
	ToTestResponseOutputWithContext(context.Context) TestResponseOutput
}

// The definition of a Test.
type TestResponseArgs struct {
	// The commands used in the test.
	Commands CommandResponseArrayInput `pulumi:"commands"`
	// Indicates if this test is active.It doesn't schedule test for not active Test.
	IsActive pulumi.BoolPtrInput `pulumi:"isActive"`
	// The type of the test.
	TestType pulumi.StringInput `pulumi:"testType"`
	// The status of the validation run of the package.
	ValidationRunStatus pulumi.StringInput `pulumi:"validationRunStatus"`
}

func (TestResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestResponse)(nil)).Elem()
}

func (i TestResponseArgs) ToTestResponseOutput() TestResponseOutput {
	return i.ToTestResponseOutputWithContext(context.Background())
}

func (i TestResponseArgs) ToTestResponseOutputWithContext(ctx context.Context) TestResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestResponseOutput)
}

// TestResponseArrayInput is an input type that accepts TestResponseArray and TestResponseArrayOutput values.
// You can construct a concrete instance of `TestResponseArrayInput` via:
//
//          TestResponseArray{ TestResponseArgs{...} }
type TestResponseArrayInput interface {
	pulumi.Input

	ToTestResponseArrayOutput() TestResponseArrayOutput
	ToTestResponseArrayOutputWithContext(context.Context) TestResponseArrayOutput
}

type TestResponseArray []TestResponseInput

func (TestResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestResponse)(nil)).Elem()
}

func (i TestResponseArray) ToTestResponseArrayOutput() TestResponseArrayOutput {
	return i.ToTestResponseArrayOutputWithContext(context.Background())
}

func (i TestResponseArray) ToTestResponseArrayOutputWithContext(ctx context.Context) TestResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestResponseArrayOutput)
}

// The definition of a Test.
type TestResponseOutput struct{ *pulumi.OutputState }

func (TestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestResponse)(nil)).Elem()
}

func (o TestResponseOutput) ToTestResponseOutput() TestResponseOutput {
	return o
}

func (o TestResponseOutput) ToTestResponseOutputWithContext(ctx context.Context) TestResponseOutput {
	return o
}

// The commands used in the test.
func (o TestResponseOutput) Commands() CommandResponseArrayOutput {
	return o.ApplyT(func(v TestResponse) []CommandResponse { return v.Commands }).(CommandResponseArrayOutput)
}

// Indicates if this test is active.It doesn't schedule test for not active Test.
func (o TestResponseOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TestResponse) *bool { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// The type of the test.
func (o TestResponseOutput) TestType() pulumi.StringOutput {
	return o.ApplyT(func(v TestResponse) string { return v.TestType }).(pulumi.StringOutput)
}

// The status of the validation run of the package.
func (o TestResponseOutput) ValidationRunStatus() pulumi.StringOutput {
	return o.ApplyT(func(v TestResponse) string { return v.ValidationRunStatus }).(pulumi.StringOutput)
}

type TestResponseArrayOutput struct{ *pulumi.OutputState }

func (TestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestResponse)(nil)).Elem()
}

func (o TestResponseArrayOutput) ToTestResponseArrayOutput() TestResponseArrayOutput {
	return o
}

func (o TestResponseArrayOutput) ToTestResponseArrayOutputWithContext(ctx context.Context) TestResponseArrayOutput {
	return o
}

func (o TestResponseArrayOutput) Index(i pulumi.IntInput) TestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TestResponse {
		return vs[0].([]TestResponse)[vs[1].(int)]
	}).(TestResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(CommandResponseOutput{})
	pulumi.RegisterOutputType(CommandResponseArrayOutput{})
	pulumi.RegisterOutputType(PackageValidationResultResponseOutput{})
	pulumi.RegisterOutputType(PackageValidationResultResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponsePtrOutput{})
	pulumi.RegisterOutputType(TargetOSInfoOutput{})
	pulumi.RegisterOutputType(TargetOSInfoArrayOutput{})
	pulumi.RegisterOutputType(TargetOSInfoResponseOutput{})
	pulumi.RegisterOutputType(TargetOSInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(TestOutput{})
	pulumi.RegisterOutputType(TestArrayOutput{})
	pulumi.RegisterOutputType(TestBaseAccountSKUOutput{})
	pulumi.RegisterOutputType(TestBaseAccountSKUPtrOutput{})
	pulumi.RegisterOutputType(TestBaseAccountSKUCapabilityResponseOutput{})
	pulumi.RegisterOutputType(TestBaseAccountSKUCapabilityResponseArrayOutput{})
	pulumi.RegisterOutputType(TestBaseAccountSKUResponseOutput{})
	pulumi.RegisterOutputType(TestBaseAccountSKUResponsePtrOutput{})
	pulumi.RegisterOutputType(TestResponseOutput{})
	pulumi.RegisterOutputType(TestResponseArrayOutput{})
}
