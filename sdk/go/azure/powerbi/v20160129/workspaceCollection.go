// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20160129

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WorkspaceCollection struct {
	pulumi.CustomResourceState

	// Azure location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Workspace collection name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Properties
	Properties pulumi.AnyOutput          `pulumi:"properties"`
	Sku        AzureSkuResponsePtrOutput `pulumi:"sku"`
	Tags       pulumi.StringMapOutput    `pulumi:"tags"`
	// Resource type
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewWorkspaceCollection registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceCollection(ctx *pulumi.Context,
	name string, args *WorkspaceCollectionArgs, opts ...pulumi.ResourceOption) (*WorkspaceCollection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:powerbi:WorkspaceCollection"),
		},
	})
	opts = append(opts, aliases)
	var resource WorkspaceCollection
	err := ctx.RegisterResource("azure-native:powerbi/v20160129:WorkspaceCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceCollection gets an existing WorkspaceCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceCollectionState, opts ...pulumi.ResourceOption) (*WorkspaceCollection, error) {
	var resource WorkspaceCollection
	err := ctx.ReadResource("azure-native:powerbi/v20160129:WorkspaceCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceCollection resources.
type workspaceCollectionState struct {
}

type WorkspaceCollectionState struct {
}

func (WorkspaceCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceCollectionState)(nil)).Elem()
}

type workspaceCollectionArgs struct {
	// Azure location
	Location *string `pulumi:"location"`
	// Azure resource group
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	Sku               *AzureSku         `pulumi:"sku"`
	Tags              map[string]string `pulumi:"tags"`
	// Power BI Embedded Workspace Collection name
	WorkspaceCollectionName *string `pulumi:"workspaceCollectionName"`
}

// The set of arguments for constructing a WorkspaceCollection resource.
type WorkspaceCollectionArgs struct {
	// Azure location
	Location pulumi.StringPtrInput
	// Azure resource group
	ResourceGroupName pulumi.StringInput
	Sku               AzureSkuPtrInput
	Tags              pulumi.StringMapInput
	// Power BI Embedded Workspace Collection name
	WorkspaceCollectionName pulumi.StringPtrInput
}

func (WorkspaceCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceCollectionArgs)(nil)).Elem()
}

type WorkspaceCollectionInput interface {
	pulumi.Input

	ToWorkspaceCollectionOutput() WorkspaceCollectionOutput
	ToWorkspaceCollectionOutputWithContext(ctx context.Context) WorkspaceCollectionOutput
}

func (*WorkspaceCollection) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceCollection)(nil)).Elem()
}

func (i *WorkspaceCollection) ToWorkspaceCollectionOutput() WorkspaceCollectionOutput {
	return i.ToWorkspaceCollectionOutputWithContext(context.Background())
}

func (i *WorkspaceCollection) ToWorkspaceCollectionOutputWithContext(ctx context.Context) WorkspaceCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceCollectionOutput)
}

type WorkspaceCollectionOutput struct{ *pulumi.OutputState }

func (WorkspaceCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceCollection)(nil)).Elem()
}

func (o WorkspaceCollectionOutput) ToWorkspaceCollectionOutput() WorkspaceCollectionOutput {
	return o
}

func (o WorkspaceCollectionOutput) ToWorkspaceCollectionOutputWithContext(ctx context.Context) WorkspaceCollectionOutput {
	return o
}

// Azure location
func (o WorkspaceCollectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceCollection) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Workspace collection name
func (o WorkspaceCollectionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceCollection) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties
func (o WorkspaceCollectionOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v *WorkspaceCollection) pulumi.AnyOutput { return v.Properties }).(pulumi.AnyOutput)
}

func (o WorkspaceCollectionOutput) Sku() AzureSkuResponsePtrOutput {
	return o.ApplyT(func(v *WorkspaceCollection) AzureSkuResponsePtrOutput { return v.Sku }).(AzureSkuResponsePtrOutput)
}

func (o WorkspaceCollectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkspaceCollection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o WorkspaceCollectionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceCollection) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceCollectionOutput{})
}
