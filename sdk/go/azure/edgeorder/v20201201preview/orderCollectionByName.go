// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specifies the properties or parameters for an order collection. Order collection is a grouping of one or more orders.
type OrderCollectionByName struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// List of order ARM Ids which are part of an order collection.
	OrderIds pulumi.StringArrayOutput `pulumi:"orderIds"`
	// Represents resource creation and update time
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewOrderCollectionByName registers a new resource with the given unique name, arguments, and options.
func NewOrderCollectionByName(ctx *pulumi.Context,
	name string, args *OrderCollectionByNameArgs, opts ...pulumi.ResourceOption) (*OrderCollectionByName, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrderCollectionName == nil {
		return nil, errors.New("invalid value for required argument 'OrderCollectionName'")
	}
	if args.OrderIds == nil {
		return nil, errors.New("invalid value for required argument 'OrderIds'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource OrderCollectionByName
	err := ctx.RegisterResource("azure-nextgen:edgeorder/v20201201preview:OrderCollectionByName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrderCollectionByName gets an existing OrderCollectionByName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrderCollectionByName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrderCollectionByNameState, opts ...pulumi.ResourceOption) (*OrderCollectionByName, error) {
	var resource OrderCollectionByName
	err := ctx.ReadResource("azure-nextgen:edgeorder/v20201201preview:OrderCollectionByName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrderCollectionByName resources.
type orderCollectionByNameState struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// List of order ARM Ids which are part of an order collection.
	OrderIds []string `pulumi:"orderIds"`
	// Represents resource creation and update time
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `pulumi:"type"`
}

type OrderCollectionByNameState struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// List of order ARM Ids which are part of an order collection.
	OrderIds pulumi.StringArrayInput
	// Represents resource creation and update time
	SystemData SystemDataResponsePtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringPtrInput
}

func (OrderCollectionByNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*orderCollectionByNameState)(nil)).Elem()
}

type orderCollectionByNameArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the order collection
	OrderCollectionName string `pulumi:"orderCollectionName"`
	// List of order ARM Ids which are part of an order collection.
	OrderIds []string `pulumi:"orderIds"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a OrderCollectionByName resource.
type OrderCollectionByNameArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the order collection
	OrderCollectionName pulumi.StringInput
	// List of order ARM Ids which are part of an order collection.
	OrderIds pulumi.StringArrayInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (OrderCollectionByNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orderCollectionByNameArgs)(nil)).Elem()
}

type OrderCollectionByNameInput interface {
	pulumi.Input

	ToOrderCollectionByNameOutput() OrderCollectionByNameOutput
	ToOrderCollectionByNameOutputWithContext(ctx context.Context) OrderCollectionByNameOutput
}

func (*OrderCollectionByName) ElementType() reflect.Type {
	return reflect.TypeOf((*OrderCollectionByName)(nil))
}

func (i *OrderCollectionByName) ToOrderCollectionByNameOutput() OrderCollectionByNameOutput {
	return i.ToOrderCollectionByNameOutputWithContext(context.Background())
}

func (i *OrderCollectionByName) ToOrderCollectionByNameOutputWithContext(ctx context.Context) OrderCollectionByNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderCollectionByNameOutput)
}

type OrderCollectionByNameOutput struct {
	*pulumi.OutputState
}

func (OrderCollectionByNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrderCollectionByName)(nil))
}

func (o OrderCollectionByNameOutput) ToOrderCollectionByNameOutput() OrderCollectionByNameOutput {
	return o
}

func (o OrderCollectionByNameOutput) ToOrderCollectionByNameOutputWithContext(ctx context.Context) OrderCollectionByNameOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OrderCollectionByNameOutput{})
}
