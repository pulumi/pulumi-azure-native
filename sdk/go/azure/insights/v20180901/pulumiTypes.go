// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An arm role receiver.
type ArmRoleReceiver struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
}

// ArmRoleReceiverInput is an input type that accepts ArmRoleReceiverArgs and ArmRoleReceiverOutput values.
// You can construct a concrete instance of `ArmRoleReceiverInput` via:
//
//          ArmRoleReceiverArgs{...}
type ArmRoleReceiverInput interface {
	pulumi.Input

	ToArmRoleReceiverOutput() ArmRoleReceiverOutput
	ToArmRoleReceiverOutputWithContext(context.Context) ArmRoleReceiverOutput
}

// An arm role receiver.
type ArmRoleReceiverArgs struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The arm role id.
	RoleId pulumi.StringInput `pulumi:"roleId"`
}

func (ArmRoleReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiver)(nil)).Elem()
}

func (i ArmRoleReceiverArgs) ToArmRoleReceiverOutput() ArmRoleReceiverOutput {
	return i.ToArmRoleReceiverOutputWithContext(context.Background())
}

func (i ArmRoleReceiverArgs) ToArmRoleReceiverOutputWithContext(ctx context.Context) ArmRoleReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverOutput)
}

// ArmRoleReceiverArrayInput is an input type that accepts ArmRoleReceiverArray and ArmRoleReceiverArrayOutput values.
// You can construct a concrete instance of `ArmRoleReceiverArrayInput` via:
//
//          ArmRoleReceiverArray{ ArmRoleReceiverArgs{...} }
type ArmRoleReceiverArrayInput interface {
	pulumi.Input

	ToArmRoleReceiverArrayOutput() ArmRoleReceiverArrayOutput
	ToArmRoleReceiverArrayOutputWithContext(context.Context) ArmRoleReceiverArrayOutput
}

type ArmRoleReceiverArray []ArmRoleReceiverInput

func (ArmRoleReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiver)(nil)).Elem()
}

func (i ArmRoleReceiverArray) ToArmRoleReceiverArrayOutput() ArmRoleReceiverArrayOutput {
	return i.ToArmRoleReceiverArrayOutputWithContext(context.Background())
}

func (i ArmRoleReceiverArray) ToArmRoleReceiverArrayOutputWithContext(ctx context.Context) ArmRoleReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverArrayOutput)
}

// An arm role receiver.
type ArmRoleReceiverOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiver)(nil)).Elem()
}

func (o ArmRoleReceiverOutput) ToArmRoleReceiverOutput() ArmRoleReceiverOutput {
	return o
}

func (o ArmRoleReceiverOutput) ToArmRoleReceiverOutputWithContext(ctx context.Context) ArmRoleReceiverOutput {
	return o
}

// The name of the arm role receiver. Names must be unique across all receivers within an action group.
func (o ArmRoleReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The arm role id.
func (o ArmRoleReceiverOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiver) string { return v.RoleId }).(pulumi.StringOutput)
}

type ArmRoleReceiverArrayOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiver)(nil)).Elem()
}

func (o ArmRoleReceiverArrayOutput) ToArmRoleReceiverArrayOutput() ArmRoleReceiverArrayOutput {
	return o
}

func (o ArmRoleReceiverArrayOutput) ToArmRoleReceiverArrayOutputWithContext(ctx context.Context) ArmRoleReceiverArrayOutput {
	return o
}

func (o ArmRoleReceiverArrayOutput) Index(i pulumi.IntInput) ArmRoleReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArmRoleReceiver {
		return vs[0].([]ArmRoleReceiver)[vs[1].(int)]
	}).(ArmRoleReceiverOutput)
}

// An arm role receiver.
type ArmRoleReceiverInvokeResponse struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
}

// ArmRoleReceiverInvokeResponseInput is an input type that accepts ArmRoleReceiverInvokeResponseArgs and ArmRoleReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `ArmRoleReceiverInvokeResponseInput` via:
//
//          ArmRoleReceiverInvokeResponseArgs{...}
type ArmRoleReceiverInvokeResponseInput interface {
	pulumi.Input

	ToArmRoleReceiverInvokeResponseOutput() ArmRoleReceiverInvokeResponseOutput
	ToArmRoleReceiverInvokeResponseOutputWithContext(context.Context) ArmRoleReceiverInvokeResponseOutput
}

// An arm role receiver.
type ArmRoleReceiverInvokeResponseArgs struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The arm role id.
	RoleId pulumi.StringInput `pulumi:"roleId"`
}

func (ArmRoleReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiverInvokeResponse)(nil)).Elem()
}

func (i ArmRoleReceiverInvokeResponseArgs) ToArmRoleReceiverInvokeResponseOutput() ArmRoleReceiverInvokeResponseOutput {
	return i.ToArmRoleReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i ArmRoleReceiverInvokeResponseArgs) ToArmRoleReceiverInvokeResponseOutputWithContext(ctx context.Context) ArmRoleReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverInvokeResponseOutput)
}

// ArmRoleReceiverInvokeResponseArrayInput is an input type that accepts ArmRoleReceiverInvokeResponseArray and ArmRoleReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ArmRoleReceiverInvokeResponseArrayInput` via:
//
//          ArmRoleReceiverInvokeResponseArray{ ArmRoleReceiverInvokeResponseArgs{...} }
type ArmRoleReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToArmRoleReceiverInvokeResponseArrayOutput() ArmRoleReceiverInvokeResponseArrayOutput
	ToArmRoleReceiverInvokeResponseArrayOutputWithContext(context.Context) ArmRoleReceiverInvokeResponseArrayOutput
}

type ArmRoleReceiverInvokeResponseArray []ArmRoleReceiverInvokeResponseInput

func (ArmRoleReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiverInvokeResponse)(nil)).Elem()
}

func (i ArmRoleReceiverInvokeResponseArray) ToArmRoleReceiverInvokeResponseArrayOutput() ArmRoleReceiverInvokeResponseArrayOutput {
	return i.ToArmRoleReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ArmRoleReceiverInvokeResponseArray) ToArmRoleReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) ArmRoleReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverInvokeResponseArrayOutput)
}

// An arm role receiver.
type ArmRoleReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiverInvokeResponse)(nil)).Elem()
}

func (o ArmRoleReceiverInvokeResponseOutput) ToArmRoleReceiverInvokeResponseOutput() ArmRoleReceiverInvokeResponseOutput {
	return o
}

func (o ArmRoleReceiverInvokeResponseOutput) ToArmRoleReceiverInvokeResponseOutputWithContext(ctx context.Context) ArmRoleReceiverInvokeResponseOutput {
	return o
}

// The name of the arm role receiver. Names must be unique across all receivers within an action group.
func (o ArmRoleReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The arm role id.
func (o ArmRoleReceiverInvokeResponseOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiverInvokeResponse) string { return v.RoleId }).(pulumi.StringOutput)
}

type ArmRoleReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiverInvokeResponse)(nil)).Elem()
}

func (o ArmRoleReceiverInvokeResponseArrayOutput) ToArmRoleReceiverInvokeResponseArrayOutput() ArmRoleReceiverInvokeResponseArrayOutput {
	return o
}

func (o ArmRoleReceiverInvokeResponseArrayOutput) ToArmRoleReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) ArmRoleReceiverInvokeResponseArrayOutput {
	return o
}

func (o ArmRoleReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) ArmRoleReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArmRoleReceiverInvokeResponse {
		return vs[0].([]ArmRoleReceiverInvokeResponse)[vs[1].(int)]
	}).(ArmRoleReceiverInvokeResponseOutput)
}

// An arm role receiver.
type ArmRoleReceiverResponse struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
}

// ArmRoleReceiverResponseInput is an input type that accepts ArmRoleReceiverResponseArgs and ArmRoleReceiverResponseOutput values.
// You can construct a concrete instance of `ArmRoleReceiverResponseInput` via:
//
//          ArmRoleReceiverResponseArgs{...}
type ArmRoleReceiverResponseInput interface {
	pulumi.Input

	ToArmRoleReceiverResponseOutput() ArmRoleReceiverResponseOutput
	ToArmRoleReceiverResponseOutputWithContext(context.Context) ArmRoleReceiverResponseOutput
}

// An arm role receiver.
type ArmRoleReceiverResponseArgs struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The arm role id.
	RoleId pulumi.StringInput `pulumi:"roleId"`
}

func (ArmRoleReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiverResponse)(nil)).Elem()
}

func (i ArmRoleReceiverResponseArgs) ToArmRoleReceiverResponseOutput() ArmRoleReceiverResponseOutput {
	return i.ToArmRoleReceiverResponseOutputWithContext(context.Background())
}

func (i ArmRoleReceiverResponseArgs) ToArmRoleReceiverResponseOutputWithContext(ctx context.Context) ArmRoleReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverResponseOutput)
}

// ArmRoleReceiverResponseArrayInput is an input type that accepts ArmRoleReceiverResponseArray and ArmRoleReceiverResponseArrayOutput values.
// You can construct a concrete instance of `ArmRoleReceiverResponseArrayInput` via:
//
//          ArmRoleReceiverResponseArray{ ArmRoleReceiverResponseArgs{...} }
type ArmRoleReceiverResponseArrayInput interface {
	pulumi.Input

	ToArmRoleReceiverResponseArrayOutput() ArmRoleReceiverResponseArrayOutput
	ToArmRoleReceiverResponseArrayOutputWithContext(context.Context) ArmRoleReceiverResponseArrayOutput
}

type ArmRoleReceiverResponseArray []ArmRoleReceiverResponseInput

func (ArmRoleReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiverResponse)(nil)).Elem()
}

func (i ArmRoleReceiverResponseArray) ToArmRoleReceiverResponseArrayOutput() ArmRoleReceiverResponseArrayOutput {
	return i.ToArmRoleReceiverResponseArrayOutputWithContext(context.Background())
}

func (i ArmRoleReceiverResponseArray) ToArmRoleReceiverResponseArrayOutputWithContext(ctx context.Context) ArmRoleReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverResponseArrayOutput)
}

// An arm role receiver.
type ArmRoleReceiverResponseOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiverResponse)(nil)).Elem()
}

func (o ArmRoleReceiverResponseOutput) ToArmRoleReceiverResponseOutput() ArmRoleReceiverResponseOutput {
	return o
}

func (o ArmRoleReceiverResponseOutput) ToArmRoleReceiverResponseOutputWithContext(ctx context.Context) ArmRoleReceiverResponseOutput {
	return o
}

// The name of the arm role receiver. Names must be unique across all receivers within an action group.
func (o ArmRoleReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The arm role id.
func (o ArmRoleReceiverResponseOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiverResponse) string { return v.RoleId }).(pulumi.StringOutput)
}

type ArmRoleReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiverResponse)(nil)).Elem()
}

func (o ArmRoleReceiverResponseArrayOutput) ToArmRoleReceiverResponseArrayOutput() ArmRoleReceiverResponseArrayOutput {
	return o
}

func (o ArmRoleReceiverResponseArrayOutput) ToArmRoleReceiverResponseArrayOutputWithContext(ctx context.Context) ArmRoleReceiverResponseArrayOutput {
	return o
}

func (o ArmRoleReceiverResponseArrayOutput) Index(i pulumi.IntInput) ArmRoleReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArmRoleReceiverResponse {
		return vs[0].([]ArmRoleReceiverResponse)[vs[1].(int)]
	}).(ArmRoleReceiverResponseOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiver struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// AutomationRunbookReceiverInput is an input type that accepts AutomationRunbookReceiverArgs and AutomationRunbookReceiverOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverInput` via:
//
//          AutomationRunbookReceiverArgs{...}
type AutomationRunbookReceiverInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput
	ToAutomationRunbookReceiverOutputWithContext(context.Context) AutomationRunbookReceiverOutput
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverArgs struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

func (AutomationRunbookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiver)(nil)).Elem()
}

func (i AutomationRunbookReceiverArgs) ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput {
	return i.ToAutomationRunbookReceiverOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverArgs) ToAutomationRunbookReceiverOutputWithContext(ctx context.Context) AutomationRunbookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverOutput)
}

// AutomationRunbookReceiverArrayInput is an input type that accepts AutomationRunbookReceiverArray and AutomationRunbookReceiverArrayOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverArrayInput` via:
//
//          AutomationRunbookReceiverArray{ AutomationRunbookReceiverArgs{...} }
type AutomationRunbookReceiverArrayInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput
	ToAutomationRunbookReceiverArrayOutputWithContext(context.Context) AutomationRunbookReceiverArrayOutput
}

type AutomationRunbookReceiverArray []AutomationRunbookReceiverInput

func (AutomationRunbookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiver)(nil)).Elem()
}

func (i AutomationRunbookReceiverArray) ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput {
	return i.ToAutomationRunbookReceiverArrayOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverArray) ToAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverArrayOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiver)(nil)).Elem()
}

func (o AutomationRunbookReceiverOutput) ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput {
	return o
}

func (o AutomationRunbookReceiverOutput) ToAutomationRunbookReceiverOutputWithContext(ctx context.Context) AutomationRunbookReceiverOutput {
	return o
}

// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
func (o AutomationRunbookReceiverOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o AutomationRunbookReceiverOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// Indicates name of the webhook.
func (o AutomationRunbookReceiverOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name for this runbook.
func (o AutomationRunbookReceiverOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o AutomationRunbookReceiverOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

// The resource id for webhook linked to this runbook.
func (o AutomationRunbookReceiverOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type AutomationRunbookReceiverArrayOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiver)(nil)).Elem()
}

func (o AutomationRunbookReceiverArrayOutput) ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput {
	return o
}

func (o AutomationRunbookReceiverArrayOutput) ToAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverArrayOutput {
	return o
}

func (o AutomationRunbookReceiverArrayOutput) Index(i pulumi.IntInput) AutomationRunbookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRunbookReceiver {
		return vs[0].([]AutomationRunbookReceiver)[vs[1].(int)]
	}).(AutomationRunbookReceiverOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverInvokeResponse struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// AutomationRunbookReceiverInvokeResponseInput is an input type that accepts AutomationRunbookReceiverInvokeResponseArgs and AutomationRunbookReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverInvokeResponseInput` via:
//
//          AutomationRunbookReceiverInvokeResponseArgs{...}
type AutomationRunbookReceiverInvokeResponseInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverInvokeResponseOutput() AutomationRunbookReceiverInvokeResponseOutput
	ToAutomationRunbookReceiverInvokeResponseOutputWithContext(context.Context) AutomationRunbookReceiverInvokeResponseOutput
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverInvokeResponseArgs struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

func (AutomationRunbookReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiverInvokeResponse)(nil)).Elem()
}

func (i AutomationRunbookReceiverInvokeResponseArgs) ToAutomationRunbookReceiverInvokeResponseOutput() AutomationRunbookReceiverInvokeResponseOutput {
	return i.ToAutomationRunbookReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverInvokeResponseArgs) ToAutomationRunbookReceiverInvokeResponseOutputWithContext(ctx context.Context) AutomationRunbookReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverInvokeResponseOutput)
}

// AutomationRunbookReceiverInvokeResponseArrayInput is an input type that accepts AutomationRunbookReceiverInvokeResponseArray and AutomationRunbookReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverInvokeResponseArrayInput` via:
//
//          AutomationRunbookReceiverInvokeResponseArray{ AutomationRunbookReceiverInvokeResponseArgs{...} }
type AutomationRunbookReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverInvokeResponseArrayOutput() AutomationRunbookReceiverInvokeResponseArrayOutput
	ToAutomationRunbookReceiverInvokeResponseArrayOutputWithContext(context.Context) AutomationRunbookReceiverInvokeResponseArrayOutput
}

type AutomationRunbookReceiverInvokeResponseArray []AutomationRunbookReceiverInvokeResponseInput

func (AutomationRunbookReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiverInvokeResponse)(nil)).Elem()
}

func (i AutomationRunbookReceiverInvokeResponseArray) ToAutomationRunbookReceiverInvokeResponseArrayOutput() AutomationRunbookReceiverInvokeResponseArrayOutput {
	return i.ToAutomationRunbookReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverInvokeResponseArray) ToAutomationRunbookReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverInvokeResponseArrayOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiverInvokeResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverInvokeResponseOutput) ToAutomationRunbookReceiverInvokeResponseOutput() AutomationRunbookReceiverInvokeResponseOutput {
	return o
}

func (o AutomationRunbookReceiverInvokeResponseOutput) ToAutomationRunbookReceiverInvokeResponseOutputWithContext(ctx context.Context) AutomationRunbookReceiverInvokeResponseOutput {
	return o
}

// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
func (o AutomationRunbookReceiverInvokeResponseOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverInvokeResponse) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o AutomationRunbookReceiverInvokeResponseOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverInvokeResponse) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// Indicates name of the webhook.
func (o AutomationRunbookReceiverInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name for this runbook.
func (o AutomationRunbookReceiverInvokeResponseOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverInvokeResponse) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o AutomationRunbookReceiverInvokeResponseOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverInvokeResponse) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

// The resource id for webhook linked to this runbook.
func (o AutomationRunbookReceiverInvokeResponseOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverInvokeResponse) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type AutomationRunbookReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiverInvokeResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverInvokeResponseArrayOutput) ToAutomationRunbookReceiverInvokeResponseArrayOutput() AutomationRunbookReceiverInvokeResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverInvokeResponseArrayOutput) ToAutomationRunbookReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverInvokeResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) AutomationRunbookReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRunbookReceiverInvokeResponse {
		return vs[0].([]AutomationRunbookReceiverInvokeResponse)[vs[1].(int)]
	}).(AutomationRunbookReceiverInvokeResponseOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponse struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// AutomationRunbookReceiverResponseInput is an input type that accepts AutomationRunbookReceiverResponseArgs and AutomationRunbookReceiverResponseOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverResponseInput` via:
//
//          AutomationRunbookReceiverResponseArgs{...}
type AutomationRunbookReceiverResponseInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverResponseOutput() AutomationRunbookReceiverResponseOutput
	ToAutomationRunbookReceiverResponseOutputWithContext(context.Context) AutomationRunbookReceiverResponseOutput
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponseArgs struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

func (AutomationRunbookReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (i AutomationRunbookReceiverResponseArgs) ToAutomationRunbookReceiverResponseOutput() AutomationRunbookReceiverResponseOutput {
	return i.ToAutomationRunbookReceiverResponseOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverResponseArgs) ToAutomationRunbookReceiverResponseOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverResponseOutput)
}

// AutomationRunbookReceiverResponseArrayInput is an input type that accepts AutomationRunbookReceiverResponseArray and AutomationRunbookReceiverResponseArrayOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverResponseArrayInput` via:
//
//          AutomationRunbookReceiverResponseArray{ AutomationRunbookReceiverResponseArgs{...} }
type AutomationRunbookReceiverResponseArrayInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverResponseArrayOutput() AutomationRunbookReceiverResponseArrayOutput
	ToAutomationRunbookReceiverResponseArrayOutputWithContext(context.Context) AutomationRunbookReceiverResponseArrayOutput
}

type AutomationRunbookReceiverResponseArray []AutomationRunbookReceiverResponseInput

func (AutomationRunbookReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (i AutomationRunbookReceiverResponseArray) ToAutomationRunbookReceiverResponseArrayOutput() AutomationRunbookReceiverResponseArrayOutput {
	return i.ToAutomationRunbookReceiverResponseArrayOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverResponseArray) ToAutomationRunbookReceiverResponseArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverResponseArrayOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponseOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverResponseOutput) ToAutomationRunbookReceiverResponseOutput() AutomationRunbookReceiverResponseOutput {
	return o
}

func (o AutomationRunbookReceiverResponseOutput) ToAutomationRunbookReceiverResponseOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseOutput {
	return o
}

// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
func (o AutomationRunbookReceiverResponseOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o AutomationRunbookReceiverResponseOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// Indicates name of the webhook.
func (o AutomationRunbookReceiverResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name for this runbook.
func (o AutomationRunbookReceiverResponseOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o AutomationRunbookReceiverResponseOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

// The resource id for webhook linked to this runbook.
func (o AutomationRunbookReceiverResponseOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type AutomationRunbookReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverResponseArrayOutput) ToAutomationRunbookReceiverResponseArrayOutput() AutomationRunbookReceiverResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverResponseArrayOutput) ToAutomationRunbookReceiverResponseArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverResponseArrayOutput) Index(i pulumi.IntInput) AutomationRunbookReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRunbookReceiverResponse {
		return vs[0].([]AutomationRunbookReceiverResponse)[vs[1].(int)]
	}).(AutomationRunbookReceiverResponseOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiver struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureAppPushReceiverInput is an input type that accepts AzureAppPushReceiverArgs and AzureAppPushReceiverOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverInput` via:
//
//          AzureAppPushReceiverArgs{...}
type AzureAppPushReceiverInput interface {
	pulumi.Input

	ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput
	ToAzureAppPushReceiverOutputWithContext(context.Context) AzureAppPushReceiverOutput
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverArgs struct {
	// The email address registered for the Azure mobile app.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureAppPushReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiver)(nil)).Elem()
}

func (i AzureAppPushReceiverArgs) ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput {
	return i.ToAzureAppPushReceiverOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverArgs) ToAzureAppPushReceiverOutputWithContext(ctx context.Context) AzureAppPushReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverOutput)
}

// AzureAppPushReceiverArrayInput is an input type that accepts AzureAppPushReceiverArray and AzureAppPushReceiverArrayOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverArrayInput` via:
//
//          AzureAppPushReceiverArray{ AzureAppPushReceiverArgs{...} }
type AzureAppPushReceiverArrayInput interface {
	pulumi.Input

	ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput
	ToAzureAppPushReceiverArrayOutputWithContext(context.Context) AzureAppPushReceiverArrayOutput
}

type AzureAppPushReceiverArray []AzureAppPushReceiverInput

func (AzureAppPushReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiver)(nil)).Elem()
}

func (i AzureAppPushReceiverArray) ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput {
	return i.ToAzureAppPushReceiverArrayOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverArray) ToAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverArrayOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiver)(nil)).Elem()
}

func (o AzureAppPushReceiverOutput) ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput {
	return o
}

func (o AzureAppPushReceiverOutput) ToAzureAppPushReceiverOutputWithContext(ctx context.Context) AzureAppPushReceiverOutput {
	return o
}

// The email address registered for the Azure mobile app.
func (o AzureAppPushReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
func (o AzureAppPushReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type AzureAppPushReceiverArrayOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiver)(nil)).Elem()
}

func (o AzureAppPushReceiverArrayOutput) ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput {
	return o
}

func (o AzureAppPushReceiverArrayOutput) ToAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverArrayOutput {
	return o
}

func (o AzureAppPushReceiverArrayOutput) Index(i pulumi.IntInput) AzureAppPushReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureAppPushReceiver {
		return vs[0].([]AzureAppPushReceiver)[vs[1].(int)]
	}).(AzureAppPushReceiverOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverInvokeResponse struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureAppPushReceiverInvokeResponseInput is an input type that accepts AzureAppPushReceiverInvokeResponseArgs and AzureAppPushReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverInvokeResponseInput` via:
//
//          AzureAppPushReceiverInvokeResponseArgs{...}
type AzureAppPushReceiverInvokeResponseInput interface {
	pulumi.Input

	ToAzureAppPushReceiverInvokeResponseOutput() AzureAppPushReceiverInvokeResponseOutput
	ToAzureAppPushReceiverInvokeResponseOutputWithContext(context.Context) AzureAppPushReceiverInvokeResponseOutput
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverInvokeResponseArgs struct {
	// The email address registered for the Azure mobile app.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureAppPushReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiverInvokeResponse)(nil)).Elem()
}

func (i AzureAppPushReceiverInvokeResponseArgs) ToAzureAppPushReceiverInvokeResponseOutput() AzureAppPushReceiverInvokeResponseOutput {
	return i.ToAzureAppPushReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverInvokeResponseArgs) ToAzureAppPushReceiverInvokeResponseOutputWithContext(ctx context.Context) AzureAppPushReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverInvokeResponseOutput)
}

// AzureAppPushReceiverInvokeResponseArrayInput is an input type that accepts AzureAppPushReceiverInvokeResponseArray and AzureAppPushReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverInvokeResponseArrayInput` via:
//
//          AzureAppPushReceiverInvokeResponseArray{ AzureAppPushReceiverInvokeResponseArgs{...} }
type AzureAppPushReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToAzureAppPushReceiverInvokeResponseArrayOutput() AzureAppPushReceiverInvokeResponseArrayOutput
	ToAzureAppPushReceiverInvokeResponseArrayOutputWithContext(context.Context) AzureAppPushReceiverInvokeResponseArrayOutput
}

type AzureAppPushReceiverInvokeResponseArray []AzureAppPushReceiverInvokeResponseInput

func (AzureAppPushReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiverInvokeResponse)(nil)).Elem()
}

func (i AzureAppPushReceiverInvokeResponseArray) ToAzureAppPushReceiverInvokeResponseArrayOutput() AzureAppPushReceiverInvokeResponseArrayOutput {
	return i.ToAzureAppPushReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverInvokeResponseArray) ToAzureAppPushReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverInvokeResponseArrayOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiverInvokeResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverInvokeResponseOutput) ToAzureAppPushReceiverInvokeResponseOutput() AzureAppPushReceiverInvokeResponseOutput {
	return o
}

func (o AzureAppPushReceiverInvokeResponseOutput) ToAzureAppPushReceiverInvokeResponseOutputWithContext(ctx context.Context) AzureAppPushReceiverInvokeResponseOutput {
	return o
}

// The email address registered for the Azure mobile app.
func (o AzureAppPushReceiverInvokeResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverInvokeResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
func (o AzureAppPushReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AzureAppPushReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiverInvokeResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverInvokeResponseArrayOutput) ToAzureAppPushReceiverInvokeResponseArrayOutput() AzureAppPushReceiverInvokeResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverInvokeResponseArrayOutput) ToAzureAppPushReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverInvokeResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) AzureAppPushReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureAppPushReceiverInvokeResponse {
		return vs[0].([]AzureAppPushReceiverInvokeResponse)[vs[1].(int)]
	}).(AzureAppPushReceiverInvokeResponseOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponse struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureAppPushReceiverResponseInput is an input type that accepts AzureAppPushReceiverResponseArgs and AzureAppPushReceiverResponseOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverResponseInput` via:
//
//          AzureAppPushReceiverResponseArgs{...}
type AzureAppPushReceiverResponseInput interface {
	pulumi.Input

	ToAzureAppPushReceiverResponseOutput() AzureAppPushReceiverResponseOutput
	ToAzureAppPushReceiverResponseOutputWithContext(context.Context) AzureAppPushReceiverResponseOutput
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponseArgs struct {
	// The email address registered for the Azure mobile app.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureAppPushReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiverResponse)(nil)).Elem()
}

func (i AzureAppPushReceiverResponseArgs) ToAzureAppPushReceiverResponseOutput() AzureAppPushReceiverResponseOutput {
	return i.ToAzureAppPushReceiverResponseOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverResponseArgs) ToAzureAppPushReceiverResponseOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverResponseOutput)
}

// AzureAppPushReceiverResponseArrayInput is an input type that accepts AzureAppPushReceiverResponseArray and AzureAppPushReceiverResponseArrayOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverResponseArrayInput` via:
//
//          AzureAppPushReceiverResponseArray{ AzureAppPushReceiverResponseArgs{...} }
type AzureAppPushReceiverResponseArrayInput interface {
	pulumi.Input

	ToAzureAppPushReceiverResponseArrayOutput() AzureAppPushReceiverResponseArrayOutput
	ToAzureAppPushReceiverResponseArrayOutputWithContext(context.Context) AzureAppPushReceiverResponseArrayOutput
}

type AzureAppPushReceiverResponseArray []AzureAppPushReceiverResponseInput

func (AzureAppPushReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiverResponse)(nil)).Elem()
}

func (i AzureAppPushReceiverResponseArray) ToAzureAppPushReceiverResponseArrayOutput() AzureAppPushReceiverResponseArrayOutput {
	return i.ToAzureAppPushReceiverResponseArrayOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverResponseArray) ToAzureAppPushReceiverResponseArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverResponseArrayOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponseOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiverResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverResponseOutput) ToAzureAppPushReceiverResponseOutput() AzureAppPushReceiverResponseOutput {
	return o
}

func (o AzureAppPushReceiverResponseOutput) ToAzureAppPushReceiverResponseOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseOutput {
	return o
}

// The email address registered for the Azure mobile app.
func (o AzureAppPushReceiverResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
func (o AzureAppPushReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AzureAppPushReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiverResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverResponseArrayOutput) ToAzureAppPushReceiverResponseArrayOutput() AzureAppPushReceiverResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverResponseArrayOutput) ToAzureAppPushReceiverResponseArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverResponseArrayOutput) Index(i pulumi.IntInput) AzureAppPushReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureAppPushReceiverResponse {
		return vs[0].([]AzureAppPushReceiverResponse)[vs[1].(int)]
	}).(AzureAppPushReceiverResponseOutput)
}

// An azure function receiver.
type AzureFunctionReceiver struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureFunctionReceiverInput is an input type that accepts AzureFunctionReceiverArgs and AzureFunctionReceiverOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverInput` via:
//
//          AzureFunctionReceiverArgs{...}
type AzureFunctionReceiverInput interface {
	pulumi.Input

	ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput
	ToAzureFunctionReceiverOutputWithContext(context.Context) AzureFunctionReceiverOutput
}

// An azure function receiver.
type AzureFunctionReceiverArgs struct {
	// The azure resource id of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureFunctionReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiver)(nil)).Elem()
}

func (i AzureFunctionReceiverArgs) ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput {
	return i.ToAzureFunctionReceiverOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverArgs) ToAzureFunctionReceiverOutputWithContext(ctx context.Context) AzureFunctionReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverOutput)
}

// AzureFunctionReceiverArrayInput is an input type that accepts AzureFunctionReceiverArray and AzureFunctionReceiverArrayOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverArrayInput` via:
//
//          AzureFunctionReceiverArray{ AzureFunctionReceiverArgs{...} }
type AzureFunctionReceiverArrayInput interface {
	pulumi.Input

	ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput
	ToAzureFunctionReceiverArrayOutputWithContext(context.Context) AzureFunctionReceiverArrayOutput
}

type AzureFunctionReceiverArray []AzureFunctionReceiverInput

func (AzureFunctionReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiver)(nil)).Elem()
}

func (i AzureFunctionReceiverArray) ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput {
	return i.ToAzureFunctionReceiverArrayOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverArray) ToAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverArrayOutput)
}

// An azure function receiver.
type AzureFunctionReceiverOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiver)(nil)).Elem()
}

func (o AzureFunctionReceiverOutput) ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput {
	return o
}

func (o AzureFunctionReceiverOutput) ToAzureFunctionReceiverOutputWithContext(ctx context.Context) AzureFunctionReceiverOutput {
	return o
}

// The azure resource id of the function app.
func (o AzureFunctionReceiverOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o AzureFunctionReceiverOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The http trigger url where http request sent to.
func (o AzureFunctionReceiverOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The name of the azure function receiver. Names must be unique across all receivers within an action group.
func (o AzureFunctionReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type AzureFunctionReceiverArrayOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiver)(nil)).Elem()
}

func (o AzureFunctionReceiverArrayOutput) ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput {
	return o
}

func (o AzureFunctionReceiverArrayOutput) ToAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverArrayOutput {
	return o
}

func (o AzureFunctionReceiverArrayOutput) Index(i pulumi.IntInput) AzureFunctionReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFunctionReceiver {
		return vs[0].([]AzureFunctionReceiver)[vs[1].(int)]
	}).(AzureFunctionReceiverOutput)
}

// An azure function receiver.
type AzureFunctionReceiverInvokeResponse struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureFunctionReceiverInvokeResponseInput is an input type that accepts AzureFunctionReceiverInvokeResponseArgs and AzureFunctionReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverInvokeResponseInput` via:
//
//          AzureFunctionReceiverInvokeResponseArgs{...}
type AzureFunctionReceiverInvokeResponseInput interface {
	pulumi.Input

	ToAzureFunctionReceiverInvokeResponseOutput() AzureFunctionReceiverInvokeResponseOutput
	ToAzureFunctionReceiverInvokeResponseOutputWithContext(context.Context) AzureFunctionReceiverInvokeResponseOutput
}

// An azure function receiver.
type AzureFunctionReceiverInvokeResponseArgs struct {
	// The azure resource id of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureFunctionReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiverInvokeResponse)(nil)).Elem()
}

func (i AzureFunctionReceiverInvokeResponseArgs) ToAzureFunctionReceiverInvokeResponseOutput() AzureFunctionReceiverInvokeResponseOutput {
	return i.ToAzureFunctionReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverInvokeResponseArgs) ToAzureFunctionReceiverInvokeResponseOutputWithContext(ctx context.Context) AzureFunctionReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverInvokeResponseOutput)
}

// AzureFunctionReceiverInvokeResponseArrayInput is an input type that accepts AzureFunctionReceiverInvokeResponseArray and AzureFunctionReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverInvokeResponseArrayInput` via:
//
//          AzureFunctionReceiverInvokeResponseArray{ AzureFunctionReceiverInvokeResponseArgs{...} }
type AzureFunctionReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToAzureFunctionReceiverInvokeResponseArrayOutput() AzureFunctionReceiverInvokeResponseArrayOutput
	ToAzureFunctionReceiverInvokeResponseArrayOutputWithContext(context.Context) AzureFunctionReceiverInvokeResponseArrayOutput
}

type AzureFunctionReceiverInvokeResponseArray []AzureFunctionReceiverInvokeResponseInput

func (AzureFunctionReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiverInvokeResponse)(nil)).Elem()
}

func (i AzureFunctionReceiverInvokeResponseArray) ToAzureFunctionReceiverInvokeResponseArrayOutput() AzureFunctionReceiverInvokeResponseArrayOutput {
	return i.ToAzureFunctionReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverInvokeResponseArray) ToAzureFunctionReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverInvokeResponseArrayOutput)
}

// An azure function receiver.
type AzureFunctionReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiverInvokeResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverInvokeResponseOutput) ToAzureFunctionReceiverInvokeResponseOutput() AzureFunctionReceiverInvokeResponseOutput {
	return o
}

func (o AzureFunctionReceiverInvokeResponseOutput) ToAzureFunctionReceiverInvokeResponseOutputWithContext(ctx context.Context) AzureFunctionReceiverInvokeResponseOutput {
	return o
}

// The azure resource id of the function app.
func (o AzureFunctionReceiverInvokeResponseOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverInvokeResponse) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o AzureFunctionReceiverInvokeResponseOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverInvokeResponse) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The http trigger url where http request sent to.
func (o AzureFunctionReceiverInvokeResponseOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverInvokeResponse) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The name of the azure function receiver. Names must be unique across all receivers within an action group.
func (o AzureFunctionReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AzureFunctionReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiverInvokeResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverInvokeResponseArrayOutput) ToAzureFunctionReceiverInvokeResponseArrayOutput() AzureFunctionReceiverInvokeResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverInvokeResponseArrayOutput) ToAzureFunctionReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverInvokeResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) AzureFunctionReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFunctionReceiverInvokeResponse {
		return vs[0].([]AzureFunctionReceiverInvokeResponse)[vs[1].(int)]
	}).(AzureFunctionReceiverInvokeResponseOutput)
}

// An azure function receiver.
type AzureFunctionReceiverResponse struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureFunctionReceiverResponseInput is an input type that accepts AzureFunctionReceiverResponseArgs and AzureFunctionReceiverResponseOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverResponseInput` via:
//
//          AzureFunctionReceiverResponseArgs{...}
type AzureFunctionReceiverResponseInput interface {
	pulumi.Input

	ToAzureFunctionReceiverResponseOutput() AzureFunctionReceiverResponseOutput
	ToAzureFunctionReceiverResponseOutputWithContext(context.Context) AzureFunctionReceiverResponseOutput
}

// An azure function receiver.
type AzureFunctionReceiverResponseArgs struct {
	// The azure resource id of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureFunctionReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiverResponse)(nil)).Elem()
}

func (i AzureFunctionReceiverResponseArgs) ToAzureFunctionReceiverResponseOutput() AzureFunctionReceiverResponseOutput {
	return i.ToAzureFunctionReceiverResponseOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverResponseArgs) ToAzureFunctionReceiverResponseOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverResponseOutput)
}

// AzureFunctionReceiverResponseArrayInput is an input type that accepts AzureFunctionReceiverResponseArray and AzureFunctionReceiverResponseArrayOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverResponseArrayInput` via:
//
//          AzureFunctionReceiverResponseArray{ AzureFunctionReceiverResponseArgs{...} }
type AzureFunctionReceiverResponseArrayInput interface {
	pulumi.Input

	ToAzureFunctionReceiverResponseArrayOutput() AzureFunctionReceiverResponseArrayOutput
	ToAzureFunctionReceiverResponseArrayOutputWithContext(context.Context) AzureFunctionReceiverResponseArrayOutput
}

type AzureFunctionReceiverResponseArray []AzureFunctionReceiverResponseInput

func (AzureFunctionReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiverResponse)(nil)).Elem()
}

func (i AzureFunctionReceiverResponseArray) ToAzureFunctionReceiverResponseArrayOutput() AzureFunctionReceiverResponseArrayOutput {
	return i.ToAzureFunctionReceiverResponseArrayOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverResponseArray) ToAzureFunctionReceiverResponseArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverResponseArrayOutput)
}

// An azure function receiver.
type AzureFunctionReceiverResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiverResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverResponseOutput) ToAzureFunctionReceiverResponseOutput() AzureFunctionReceiverResponseOutput {
	return o
}

func (o AzureFunctionReceiverResponseOutput) ToAzureFunctionReceiverResponseOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseOutput {
	return o
}

// The azure resource id of the function app.
func (o AzureFunctionReceiverResponseOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o AzureFunctionReceiverResponseOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The http trigger url where http request sent to.
func (o AzureFunctionReceiverResponseOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The name of the azure function receiver. Names must be unique across all receivers within an action group.
func (o AzureFunctionReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AzureFunctionReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiverResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverResponseArrayOutput) ToAzureFunctionReceiverResponseArrayOutput() AzureFunctionReceiverResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverResponseArrayOutput) ToAzureFunctionReceiverResponseArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverResponseArrayOutput) Index(i pulumi.IntInput) AzureFunctionReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFunctionReceiverResponse {
		return vs[0].([]AzureFunctionReceiverResponse)[vs[1].(int)]
	}).(AzureFunctionReceiverResponseOutput)
}

// An email receiver.
type EmailReceiver struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// EmailReceiverInput is an input type that accepts EmailReceiverArgs and EmailReceiverOutput values.
// You can construct a concrete instance of `EmailReceiverInput` via:
//
//          EmailReceiverArgs{...}
type EmailReceiverInput interface {
	pulumi.Input

	ToEmailReceiverOutput() EmailReceiverOutput
	ToEmailReceiverOutputWithContext(context.Context) EmailReceiverOutput
}

// An email receiver.
type EmailReceiverArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (EmailReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiver)(nil)).Elem()
}

func (i EmailReceiverArgs) ToEmailReceiverOutput() EmailReceiverOutput {
	return i.ToEmailReceiverOutputWithContext(context.Background())
}

func (i EmailReceiverArgs) ToEmailReceiverOutputWithContext(ctx context.Context) EmailReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverOutput)
}

// EmailReceiverArrayInput is an input type that accepts EmailReceiverArray and EmailReceiverArrayOutput values.
// You can construct a concrete instance of `EmailReceiverArrayInput` via:
//
//          EmailReceiverArray{ EmailReceiverArgs{...} }
type EmailReceiverArrayInput interface {
	pulumi.Input

	ToEmailReceiverArrayOutput() EmailReceiverArrayOutput
	ToEmailReceiverArrayOutputWithContext(context.Context) EmailReceiverArrayOutput
}

type EmailReceiverArray []EmailReceiverInput

func (EmailReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiver)(nil)).Elem()
}

func (i EmailReceiverArray) ToEmailReceiverArrayOutput() EmailReceiverArrayOutput {
	return i.ToEmailReceiverArrayOutputWithContext(context.Background())
}

func (i EmailReceiverArray) ToEmailReceiverArrayOutputWithContext(ctx context.Context) EmailReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverArrayOutput)
}

// An email receiver.
type EmailReceiverOutput struct{ *pulumi.OutputState }

func (EmailReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiver)(nil)).Elem()
}

func (o EmailReceiverOutput) ToEmailReceiverOutput() EmailReceiverOutput {
	return o
}

func (o EmailReceiverOutput) ToEmailReceiverOutputWithContext(ctx context.Context) EmailReceiverOutput {
	return o
}

// The email address of this receiver.
func (o EmailReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique across all receivers within an action group.
func (o EmailReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type EmailReceiverArrayOutput struct{ *pulumi.OutputState }

func (EmailReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiver)(nil)).Elem()
}

func (o EmailReceiverArrayOutput) ToEmailReceiverArrayOutput() EmailReceiverArrayOutput {
	return o
}

func (o EmailReceiverArrayOutput) ToEmailReceiverArrayOutputWithContext(ctx context.Context) EmailReceiverArrayOutput {
	return o
}

func (o EmailReceiverArrayOutput) Index(i pulumi.IntInput) EmailReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailReceiver {
		return vs[0].([]EmailReceiver)[vs[1].(int)]
	}).(EmailReceiverOutput)
}

// An email receiver.
type EmailReceiverInvokeResponse struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The receiver status of the e-mail.
	Status string `pulumi:"status"`
}

// EmailReceiverInvokeResponseInput is an input type that accepts EmailReceiverInvokeResponseArgs and EmailReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `EmailReceiverInvokeResponseInput` via:
//
//          EmailReceiverInvokeResponseArgs{...}
type EmailReceiverInvokeResponseInput interface {
	pulumi.Input

	ToEmailReceiverInvokeResponseOutput() EmailReceiverInvokeResponseOutput
	ToEmailReceiverInvokeResponseOutputWithContext(context.Context) EmailReceiverInvokeResponseOutput
}

// An email receiver.
type EmailReceiverInvokeResponseArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The receiver status of the e-mail.
	Status pulumi.StringInput `pulumi:"status"`
}

func (EmailReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiverInvokeResponse)(nil)).Elem()
}

func (i EmailReceiverInvokeResponseArgs) ToEmailReceiverInvokeResponseOutput() EmailReceiverInvokeResponseOutput {
	return i.ToEmailReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i EmailReceiverInvokeResponseArgs) ToEmailReceiverInvokeResponseOutputWithContext(ctx context.Context) EmailReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverInvokeResponseOutput)
}

// EmailReceiverInvokeResponseArrayInput is an input type that accepts EmailReceiverInvokeResponseArray and EmailReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `EmailReceiverInvokeResponseArrayInput` via:
//
//          EmailReceiverInvokeResponseArray{ EmailReceiverInvokeResponseArgs{...} }
type EmailReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToEmailReceiverInvokeResponseArrayOutput() EmailReceiverInvokeResponseArrayOutput
	ToEmailReceiverInvokeResponseArrayOutputWithContext(context.Context) EmailReceiverInvokeResponseArrayOutput
}

type EmailReceiverInvokeResponseArray []EmailReceiverInvokeResponseInput

func (EmailReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiverInvokeResponse)(nil)).Elem()
}

func (i EmailReceiverInvokeResponseArray) ToEmailReceiverInvokeResponseArrayOutput() EmailReceiverInvokeResponseArrayOutput {
	return i.ToEmailReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i EmailReceiverInvokeResponseArray) ToEmailReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) EmailReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverInvokeResponseArrayOutput)
}

// An email receiver.
type EmailReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (EmailReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiverInvokeResponse)(nil)).Elem()
}

func (o EmailReceiverInvokeResponseOutput) ToEmailReceiverInvokeResponseOutput() EmailReceiverInvokeResponseOutput {
	return o
}

func (o EmailReceiverInvokeResponseOutput) ToEmailReceiverInvokeResponseOutputWithContext(ctx context.Context) EmailReceiverInvokeResponseOutput {
	return o
}

// The email address of this receiver.
func (o EmailReceiverInvokeResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverInvokeResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique across all receivers within an action group.
func (o EmailReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The receiver status of the e-mail.
func (o EmailReceiverInvokeResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverInvokeResponse) string { return v.Status }).(pulumi.StringOutput)
}

type EmailReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (EmailReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiverInvokeResponse)(nil)).Elem()
}

func (o EmailReceiverInvokeResponseArrayOutput) ToEmailReceiverInvokeResponseArrayOutput() EmailReceiverInvokeResponseArrayOutput {
	return o
}

func (o EmailReceiverInvokeResponseArrayOutput) ToEmailReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) EmailReceiverInvokeResponseArrayOutput {
	return o
}

func (o EmailReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) EmailReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailReceiverInvokeResponse {
		return vs[0].([]EmailReceiverInvokeResponse)[vs[1].(int)]
	}).(EmailReceiverInvokeResponseOutput)
}

// An email receiver.
type EmailReceiverResponse struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The receiver status of the e-mail.
	Status string `pulumi:"status"`
}

// EmailReceiverResponseInput is an input type that accepts EmailReceiverResponseArgs and EmailReceiverResponseOutput values.
// You can construct a concrete instance of `EmailReceiverResponseInput` via:
//
//          EmailReceiverResponseArgs{...}
type EmailReceiverResponseInput interface {
	pulumi.Input

	ToEmailReceiverResponseOutput() EmailReceiverResponseOutput
	ToEmailReceiverResponseOutputWithContext(context.Context) EmailReceiverResponseOutput
}

// An email receiver.
type EmailReceiverResponseArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The receiver status of the e-mail.
	Status pulumi.StringInput `pulumi:"status"`
}

func (EmailReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiverResponse)(nil)).Elem()
}

func (i EmailReceiverResponseArgs) ToEmailReceiverResponseOutput() EmailReceiverResponseOutput {
	return i.ToEmailReceiverResponseOutputWithContext(context.Background())
}

func (i EmailReceiverResponseArgs) ToEmailReceiverResponseOutputWithContext(ctx context.Context) EmailReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverResponseOutput)
}

// EmailReceiverResponseArrayInput is an input type that accepts EmailReceiverResponseArray and EmailReceiverResponseArrayOutput values.
// You can construct a concrete instance of `EmailReceiverResponseArrayInput` via:
//
//          EmailReceiverResponseArray{ EmailReceiverResponseArgs{...} }
type EmailReceiverResponseArrayInput interface {
	pulumi.Input

	ToEmailReceiverResponseArrayOutput() EmailReceiverResponseArrayOutput
	ToEmailReceiverResponseArrayOutputWithContext(context.Context) EmailReceiverResponseArrayOutput
}

type EmailReceiverResponseArray []EmailReceiverResponseInput

func (EmailReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiverResponse)(nil)).Elem()
}

func (i EmailReceiverResponseArray) ToEmailReceiverResponseArrayOutput() EmailReceiverResponseArrayOutput {
	return i.ToEmailReceiverResponseArrayOutputWithContext(context.Background())
}

func (i EmailReceiverResponseArray) ToEmailReceiverResponseArrayOutputWithContext(ctx context.Context) EmailReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverResponseArrayOutput)
}

// An email receiver.
type EmailReceiverResponseOutput struct{ *pulumi.OutputState }

func (EmailReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiverResponse)(nil)).Elem()
}

func (o EmailReceiverResponseOutput) ToEmailReceiverResponseOutput() EmailReceiverResponseOutput {
	return o
}

func (o EmailReceiverResponseOutput) ToEmailReceiverResponseOutputWithContext(ctx context.Context) EmailReceiverResponseOutput {
	return o
}

// The email address of this receiver.
func (o EmailReceiverResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique across all receivers within an action group.
func (o EmailReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The receiver status of the e-mail.
func (o EmailReceiverResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.Status }).(pulumi.StringOutput)
}

type EmailReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (EmailReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiverResponse)(nil)).Elem()
}

func (o EmailReceiverResponseArrayOutput) ToEmailReceiverResponseArrayOutput() EmailReceiverResponseArrayOutput {
	return o
}

func (o EmailReceiverResponseArrayOutput) ToEmailReceiverResponseArrayOutputWithContext(ctx context.Context) EmailReceiverResponseArrayOutput {
	return o
}

func (o EmailReceiverResponseArrayOutput) Index(i pulumi.IntInput) EmailReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailReceiverResponse {
		return vs[0].([]EmailReceiverResponse)[vs[1].(int)]
	}).(EmailReceiverResponseOutput)
}

// An Itsm receiver.
type ItsmReceiver struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// ItsmReceiverInput is an input type that accepts ItsmReceiverArgs and ItsmReceiverOutput values.
// You can construct a concrete instance of `ItsmReceiverInput` via:
//
//          ItsmReceiverArgs{...}
type ItsmReceiverInput interface {
	pulumi.Input

	ToItsmReceiverOutput() ItsmReceiverOutput
	ToItsmReceiverOutputWithContext(context.Context) ItsmReceiverOutput
}

// An Itsm receiver.
type ItsmReceiverArgs struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region pulumi.StringInput `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (ItsmReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiver)(nil)).Elem()
}

func (i ItsmReceiverArgs) ToItsmReceiverOutput() ItsmReceiverOutput {
	return i.ToItsmReceiverOutputWithContext(context.Background())
}

func (i ItsmReceiverArgs) ToItsmReceiverOutputWithContext(ctx context.Context) ItsmReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverOutput)
}

// ItsmReceiverArrayInput is an input type that accepts ItsmReceiverArray and ItsmReceiverArrayOutput values.
// You can construct a concrete instance of `ItsmReceiverArrayInput` via:
//
//          ItsmReceiverArray{ ItsmReceiverArgs{...} }
type ItsmReceiverArrayInput interface {
	pulumi.Input

	ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput
	ToItsmReceiverArrayOutputWithContext(context.Context) ItsmReceiverArrayOutput
}

type ItsmReceiverArray []ItsmReceiverInput

func (ItsmReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiver)(nil)).Elem()
}

func (i ItsmReceiverArray) ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput {
	return i.ToItsmReceiverArrayOutputWithContext(context.Background())
}

func (i ItsmReceiverArray) ToItsmReceiverArrayOutputWithContext(ctx context.Context) ItsmReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverArrayOutput)
}

// An Itsm receiver.
type ItsmReceiverOutput struct{ *pulumi.OutputState }

func (ItsmReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiver)(nil)).Elem()
}

func (o ItsmReceiverOutput) ToItsmReceiverOutput() ItsmReceiverOutput {
	return o
}

func (o ItsmReceiverOutput) ToItsmReceiverOutputWithContext(ctx context.Context) ItsmReceiverOutput {
	return o
}

// Unique identification of ITSM connection among multiple defined in above workspace.
func (o ItsmReceiverOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
func (o ItsmReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
func (o ItsmReceiverOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.Region }).(pulumi.StringOutput)
}

// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ItsmReceiverOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// OMS LA instance identifier.
func (o ItsmReceiverOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ItsmReceiverArrayOutput struct{ *pulumi.OutputState }

func (ItsmReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiver)(nil)).Elem()
}

func (o ItsmReceiverArrayOutput) ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput {
	return o
}

func (o ItsmReceiverArrayOutput) ToItsmReceiverArrayOutputWithContext(ctx context.Context) ItsmReceiverArrayOutput {
	return o
}

func (o ItsmReceiverArrayOutput) Index(i pulumi.IntInput) ItsmReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ItsmReceiver {
		return vs[0].([]ItsmReceiver)[vs[1].(int)]
	}).(ItsmReceiverOutput)
}

// An Itsm receiver.
type ItsmReceiverInvokeResponse struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// ItsmReceiverInvokeResponseInput is an input type that accepts ItsmReceiverInvokeResponseArgs and ItsmReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `ItsmReceiverInvokeResponseInput` via:
//
//          ItsmReceiverInvokeResponseArgs{...}
type ItsmReceiverInvokeResponseInput interface {
	pulumi.Input

	ToItsmReceiverInvokeResponseOutput() ItsmReceiverInvokeResponseOutput
	ToItsmReceiverInvokeResponseOutputWithContext(context.Context) ItsmReceiverInvokeResponseOutput
}

// An Itsm receiver.
type ItsmReceiverInvokeResponseArgs struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region pulumi.StringInput `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (ItsmReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiverInvokeResponse)(nil)).Elem()
}

func (i ItsmReceiverInvokeResponseArgs) ToItsmReceiverInvokeResponseOutput() ItsmReceiverInvokeResponseOutput {
	return i.ToItsmReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i ItsmReceiverInvokeResponseArgs) ToItsmReceiverInvokeResponseOutputWithContext(ctx context.Context) ItsmReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverInvokeResponseOutput)
}

// ItsmReceiverInvokeResponseArrayInput is an input type that accepts ItsmReceiverInvokeResponseArray and ItsmReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ItsmReceiverInvokeResponseArrayInput` via:
//
//          ItsmReceiverInvokeResponseArray{ ItsmReceiverInvokeResponseArgs{...} }
type ItsmReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToItsmReceiverInvokeResponseArrayOutput() ItsmReceiverInvokeResponseArrayOutput
	ToItsmReceiverInvokeResponseArrayOutputWithContext(context.Context) ItsmReceiverInvokeResponseArrayOutput
}

type ItsmReceiverInvokeResponseArray []ItsmReceiverInvokeResponseInput

func (ItsmReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiverInvokeResponse)(nil)).Elem()
}

func (i ItsmReceiverInvokeResponseArray) ToItsmReceiverInvokeResponseArrayOutput() ItsmReceiverInvokeResponseArrayOutput {
	return i.ToItsmReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ItsmReceiverInvokeResponseArray) ToItsmReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) ItsmReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverInvokeResponseArrayOutput)
}

// An Itsm receiver.
type ItsmReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (ItsmReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiverInvokeResponse)(nil)).Elem()
}

func (o ItsmReceiverInvokeResponseOutput) ToItsmReceiverInvokeResponseOutput() ItsmReceiverInvokeResponseOutput {
	return o
}

func (o ItsmReceiverInvokeResponseOutput) ToItsmReceiverInvokeResponseOutputWithContext(ctx context.Context) ItsmReceiverInvokeResponseOutput {
	return o
}

// Unique identification of ITSM connection among multiple defined in above workspace.
func (o ItsmReceiverInvokeResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverInvokeResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
func (o ItsmReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
func (o ItsmReceiverInvokeResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverInvokeResponse) string { return v.Region }).(pulumi.StringOutput)
}

// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ItsmReceiverInvokeResponseOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverInvokeResponse) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// OMS LA instance identifier.
func (o ItsmReceiverInvokeResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverInvokeResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ItsmReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ItsmReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiverInvokeResponse)(nil)).Elem()
}

func (o ItsmReceiverInvokeResponseArrayOutput) ToItsmReceiverInvokeResponseArrayOutput() ItsmReceiverInvokeResponseArrayOutput {
	return o
}

func (o ItsmReceiverInvokeResponseArrayOutput) ToItsmReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) ItsmReceiverInvokeResponseArrayOutput {
	return o
}

func (o ItsmReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) ItsmReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ItsmReceiverInvokeResponse {
		return vs[0].([]ItsmReceiverInvokeResponse)[vs[1].(int)]
	}).(ItsmReceiverInvokeResponseOutput)
}

// An Itsm receiver.
type ItsmReceiverResponse struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// ItsmReceiverResponseInput is an input type that accepts ItsmReceiverResponseArgs and ItsmReceiverResponseOutput values.
// You can construct a concrete instance of `ItsmReceiverResponseInput` via:
//
//          ItsmReceiverResponseArgs{...}
type ItsmReceiverResponseInput interface {
	pulumi.Input

	ToItsmReceiverResponseOutput() ItsmReceiverResponseOutput
	ToItsmReceiverResponseOutputWithContext(context.Context) ItsmReceiverResponseOutput
}

// An Itsm receiver.
type ItsmReceiverResponseArgs struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region pulumi.StringInput `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (ItsmReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiverResponse)(nil)).Elem()
}

func (i ItsmReceiverResponseArgs) ToItsmReceiverResponseOutput() ItsmReceiverResponseOutput {
	return i.ToItsmReceiverResponseOutputWithContext(context.Background())
}

func (i ItsmReceiverResponseArgs) ToItsmReceiverResponseOutputWithContext(ctx context.Context) ItsmReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverResponseOutput)
}

// ItsmReceiverResponseArrayInput is an input type that accepts ItsmReceiverResponseArray and ItsmReceiverResponseArrayOutput values.
// You can construct a concrete instance of `ItsmReceiverResponseArrayInput` via:
//
//          ItsmReceiverResponseArray{ ItsmReceiverResponseArgs{...} }
type ItsmReceiverResponseArrayInput interface {
	pulumi.Input

	ToItsmReceiverResponseArrayOutput() ItsmReceiverResponseArrayOutput
	ToItsmReceiverResponseArrayOutputWithContext(context.Context) ItsmReceiverResponseArrayOutput
}

type ItsmReceiverResponseArray []ItsmReceiverResponseInput

func (ItsmReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiverResponse)(nil)).Elem()
}

func (i ItsmReceiverResponseArray) ToItsmReceiverResponseArrayOutput() ItsmReceiverResponseArrayOutput {
	return i.ToItsmReceiverResponseArrayOutputWithContext(context.Background())
}

func (i ItsmReceiverResponseArray) ToItsmReceiverResponseArrayOutputWithContext(ctx context.Context) ItsmReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverResponseArrayOutput)
}

// An Itsm receiver.
type ItsmReceiverResponseOutput struct{ *pulumi.OutputState }

func (ItsmReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiverResponse)(nil)).Elem()
}

func (o ItsmReceiverResponseOutput) ToItsmReceiverResponseOutput() ItsmReceiverResponseOutput {
	return o
}

func (o ItsmReceiverResponseOutput) ToItsmReceiverResponseOutputWithContext(ctx context.Context) ItsmReceiverResponseOutput {
	return o
}

// Unique identification of ITSM connection among multiple defined in above workspace.
func (o ItsmReceiverResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
func (o ItsmReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
func (o ItsmReceiverResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.Region }).(pulumi.StringOutput)
}

// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ItsmReceiverResponseOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// OMS LA instance identifier.
func (o ItsmReceiverResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ItsmReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ItsmReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiverResponse)(nil)).Elem()
}

func (o ItsmReceiverResponseArrayOutput) ToItsmReceiverResponseArrayOutput() ItsmReceiverResponseArrayOutput {
	return o
}

func (o ItsmReceiverResponseArrayOutput) ToItsmReceiverResponseArrayOutputWithContext(ctx context.Context) ItsmReceiverResponseArrayOutput {
	return o
}

func (o ItsmReceiverResponseArrayOutput) Index(i pulumi.IntInput) ItsmReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ItsmReceiverResponse {
		return vs[0].([]ItsmReceiverResponse)[vs[1].(int)]
	}).(ItsmReceiverResponseOutput)
}

// A logic app receiver.
type LogicAppReceiver struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
}

// LogicAppReceiverInput is an input type that accepts LogicAppReceiverArgs and LogicAppReceiverOutput values.
// You can construct a concrete instance of `LogicAppReceiverInput` via:
//
//          LogicAppReceiverArgs{...}
type LogicAppReceiverInput interface {
	pulumi.Input

	ToLogicAppReceiverOutput() LogicAppReceiverOutput
	ToLogicAppReceiverOutputWithContext(context.Context) LogicAppReceiverOutput
}

// A logic app receiver.
type LogicAppReceiverArgs struct {
	// The callback url where http request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LogicAppReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiver)(nil)).Elem()
}

func (i LogicAppReceiverArgs) ToLogicAppReceiverOutput() LogicAppReceiverOutput {
	return i.ToLogicAppReceiverOutputWithContext(context.Background())
}

func (i LogicAppReceiverArgs) ToLogicAppReceiverOutputWithContext(ctx context.Context) LogicAppReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverOutput)
}

// LogicAppReceiverArrayInput is an input type that accepts LogicAppReceiverArray and LogicAppReceiverArrayOutput values.
// You can construct a concrete instance of `LogicAppReceiverArrayInput` via:
//
//          LogicAppReceiverArray{ LogicAppReceiverArgs{...} }
type LogicAppReceiverArrayInput interface {
	pulumi.Input

	ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput
	ToLogicAppReceiverArrayOutputWithContext(context.Context) LogicAppReceiverArrayOutput
}

type LogicAppReceiverArray []LogicAppReceiverInput

func (LogicAppReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiver)(nil)).Elem()
}

func (i LogicAppReceiverArray) ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput {
	return i.ToLogicAppReceiverArrayOutputWithContext(context.Background())
}

func (i LogicAppReceiverArray) ToLogicAppReceiverArrayOutputWithContext(ctx context.Context) LogicAppReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverArrayOutput)
}

// A logic app receiver.
type LogicAppReceiverOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiver)(nil)).Elem()
}

func (o LogicAppReceiverOutput) ToLogicAppReceiverOutput() LogicAppReceiverOutput {
	return o
}

func (o LogicAppReceiverOutput) ToLogicAppReceiverOutputWithContext(ctx context.Context) LogicAppReceiverOutput {
	return o
}

// The callback url where http request sent to.
func (o LogicAppReceiverOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The name of the logic app receiver. Names must be unique across all receivers within an action group.
func (o LogicAppReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The azure resource id of the logic app receiver.
func (o LogicAppReceiverOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.ResourceId }).(pulumi.StringOutput)
}

type LogicAppReceiverArrayOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiver)(nil)).Elem()
}

func (o LogicAppReceiverArrayOutput) ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput {
	return o
}

func (o LogicAppReceiverArrayOutput) ToLogicAppReceiverArrayOutputWithContext(ctx context.Context) LogicAppReceiverArrayOutput {
	return o
}

func (o LogicAppReceiverArrayOutput) Index(i pulumi.IntInput) LogicAppReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicAppReceiver {
		return vs[0].([]LogicAppReceiver)[vs[1].(int)]
	}).(LogicAppReceiverOutput)
}

// A logic app receiver.
type LogicAppReceiverInvokeResponse struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
}

// LogicAppReceiverInvokeResponseInput is an input type that accepts LogicAppReceiverInvokeResponseArgs and LogicAppReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `LogicAppReceiverInvokeResponseInput` via:
//
//          LogicAppReceiverInvokeResponseArgs{...}
type LogicAppReceiverInvokeResponseInput interface {
	pulumi.Input

	ToLogicAppReceiverInvokeResponseOutput() LogicAppReceiverInvokeResponseOutput
	ToLogicAppReceiverInvokeResponseOutputWithContext(context.Context) LogicAppReceiverInvokeResponseOutput
}

// A logic app receiver.
type LogicAppReceiverInvokeResponseArgs struct {
	// The callback url where http request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LogicAppReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiverInvokeResponse)(nil)).Elem()
}

func (i LogicAppReceiverInvokeResponseArgs) ToLogicAppReceiverInvokeResponseOutput() LogicAppReceiverInvokeResponseOutput {
	return i.ToLogicAppReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i LogicAppReceiverInvokeResponseArgs) ToLogicAppReceiverInvokeResponseOutputWithContext(ctx context.Context) LogicAppReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverInvokeResponseOutput)
}

// LogicAppReceiverInvokeResponseArrayInput is an input type that accepts LogicAppReceiverInvokeResponseArray and LogicAppReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `LogicAppReceiverInvokeResponseArrayInput` via:
//
//          LogicAppReceiverInvokeResponseArray{ LogicAppReceiverInvokeResponseArgs{...} }
type LogicAppReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToLogicAppReceiverInvokeResponseArrayOutput() LogicAppReceiverInvokeResponseArrayOutput
	ToLogicAppReceiverInvokeResponseArrayOutputWithContext(context.Context) LogicAppReceiverInvokeResponseArrayOutput
}

type LogicAppReceiverInvokeResponseArray []LogicAppReceiverInvokeResponseInput

func (LogicAppReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiverInvokeResponse)(nil)).Elem()
}

func (i LogicAppReceiverInvokeResponseArray) ToLogicAppReceiverInvokeResponseArrayOutput() LogicAppReceiverInvokeResponseArrayOutput {
	return i.ToLogicAppReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i LogicAppReceiverInvokeResponseArray) ToLogicAppReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) LogicAppReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverInvokeResponseArrayOutput)
}

// A logic app receiver.
type LogicAppReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiverInvokeResponse)(nil)).Elem()
}

func (o LogicAppReceiverInvokeResponseOutput) ToLogicAppReceiverInvokeResponseOutput() LogicAppReceiverInvokeResponseOutput {
	return o
}

func (o LogicAppReceiverInvokeResponseOutput) ToLogicAppReceiverInvokeResponseOutputWithContext(ctx context.Context) LogicAppReceiverInvokeResponseOutput {
	return o
}

// The callback url where http request sent to.
func (o LogicAppReceiverInvokeResponseOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverInvokeResponse) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The name of the logic app receiver. Names must be unique across all receivers within an action group.
func (o LogicAppReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The azure resource id of the logic app receiver.
func (o LogicAppReceiverInvokeResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverInvokeResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

type LogicAppReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiverInvokeResponse)(nil)).Elem()
}

func (o LogicAppReceiverInvokeResponseArrayOutput) ToLogicAppReceiverInvokeResponseArrayOutput() LogicAppReceiverInvokeResponseArrayOutput {
	return o
}

func (o LogicAppReceiverInvokeResponseArrayOutput) ToLogicAppReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) LogicAppReceiverInvokeResponseArrayOutput {
	return o
}

func (o LogicAppReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) LogicAppReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicAppReceiverInvokeResponse {
		return vs[0].([]LogicAppReceiverInvokeResponse)[vs[1].(int)]
	}).(LogicAppReceiverInvokeResponseOutput)
}

// A logic app receiver.
type LogicAppReceiverResponse struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
}

// LogicAppReceiverResponseInput is an input type that accepts LogicAppReceiverResponseArgs and LogicAppReceiverResponseOutput values.
// You can construct a concrete instance of `LogicAppReceiverResponseInput` via:
//
//          LogicAppReceiverResponseArgs{...}
type LogicAppReceiverResponseInput interface {
	pulumi.Input

	ToLogicAppReceiverResponseOutput() LogicAppReceiverResponseOutput
	ToLogicAppReceiverResponseOutputWithContext(context.Context) LogicAppReceiverResponseOutput
}

// A logic app receiver.
type LogicAppReceiverResponseArgs struct {
	// The callback url where http request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LogicAppReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiverResponse)(nil)).Elem()
}

func (i LogicAppReceiverResponseArgs) ToLogicAppReceiverResponseOutput() LogicAppReceiverResponseOutput {
	return i.ToLogicAppReceiverResponseOutputWithContext(context.Background())
}

func (i LogicAppReceiverResponseArgs) ToLogicAppReceiverResponseOutputWithContext(ctx context.Context) LogicAppReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverResponseOutput)
}

// LogicAppReceiverResponseArrayInput is an input type that accepts LogicAppReceiverResponseArray and LogicAppReceiverResponseArrayOutput values.
// You can construct a concrete instance of `LogicAppReceiverResponseArrayInput` via:
//
//          LogicAppReceiverResponseArray{ LogicAppReceiverResponseArgs{...} }
type LogicAppReceiverResponseArrayInput interface {
	pulumi.Input

	ToLogicAppReceiverResponseArrayOutput() LogicAppReceiverResponseArrayOutput
	ToLogicAppReceiverResponseArrayOutputWithContext(context.Context) LogicAppReceiverResponseArrayOutput
}

type LogicAppReceiverResponseArray []LogicAppReceiverResponseInput

func (LogicAppReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiverResponse)(nil)).Elem()
}

func (i LogicAppReceiverResponseArray) ToLogicAppReceiverResponseArrayOutput() LogicAppReceiverResponseArrayOutput {
	return i.ToLogicAppReceiverResponseArrayOutputWithContext(context.Background())
}

func (i LogicAppReceiverResponseArray) ToLogicAppReceiverResponseArrayOutputWithContext(ctx context.Context) LogicAppReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverResponseArrayOutput)
}

// A logic app receiver.
type LogicAppReceiverResponseOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiverResponse)(nil)).Elem()
}

func (o LogicAppReceiverResponseOutput) ToLogicAppReceiverResponseOutput() LogicAppReceiverResponseOutput {
	return o
}

func (o LogicAppReceiverResponseOutput) ToLogicAppReceiverResponseOutputWithContext(ctx context.Context) LogicAppReceiverResponseOutput {
	return o
}

// The callback url where http request sent to.
func (o LogicAppReceiverResponseOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The name of the logic app receiver. Names must be unique across all receivers within an action group.
func (o LogicAppReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The azure resource id of the logic app receiver.
func (o LogicAppReceiverResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

type LogicAppReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiverResponse)(nil)).Elem()
}

func (o LogicAppReceiverResponseArrayOutput) ToLogicAppReceiverResponseArrayOutput() LogicAppReceiverResponseArrayOutput {
	return o
}

func (o LogicAppReceiverResponseArrayOutput) ToLogicAppReceiverResponseArrayOutputWithContext(ctx context.Context) LogicAppReceiverResponseArrayOutput {
	return o
}

func (o LogicAppReceiverResponseArrayOutput) Index(i pulumi.IntInput) LogicAppReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicAppReceiverResponse {
		return vs[0].([]LogicAppReceiverResponse)[vs[1].(int)]
	}).(LogicAppReceiverResponseOutput)
}

// An SMS receiver.
type SmsReceiver struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// SmsReceiverInput is an input type that accepts SmsReceiverArgs and SmsReceiverOutput values.
// You can construct a concrete instance of `SmsReceiverInput` via:
//
//          SmsReceiverArgs{...}
type SmsReceiverInput interface {
	pulumi.Input

	ToSmsReceiverOutput() SmsReceiverOutput
	ToSmsReceiverOutputWithContext(context.Context) SmsReceiverOutput
}

// An SMS receiver.
type SmsReceiverArgs struct {
	// The country code of the SMS receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (SmsReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiver)(nil)).Elem()
}

func (i SmsReceiverArgs) ToSmsReceiverOutput() SmsReceiverOutput {
	return i.ToSmsReceiverOutputWithContext(context.Background())
}

func (i SmsReceiverArgs) ToSmsReceiverOutputWithContext(ctx context.Context) SmsReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverOutput)
}

// SmsReceiverArrayInput is an input type that accepts SmsReceiverArray and SmsReceiverArrayOutput values.
// You can construct a concrete instance of `SmsReceiverArrayInput` via:
//
//          SmsReceiverArray{ SmsReceiverArgs{...} }
type SmsReceiverArrayInput interface {
	pulumi.Input

	ToSmsReceiverArrayOutput() SmsReceiverArrayOutput
	ToSmsReceiverArrayOutputWithContext(context.Context) SmsReceiverArrayOutput
}

type SmsReceiverArray []SmsReceiverInput

func (SmsReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiver)(nil)).Elem()
}

func (i SmsReceiverArray) ToSmsReceiverArrayOutput() SmsReceiverArrayOutput {
	return i.ToSmsReceiverArrayOutputWithContext(context.Background())
}

func (i SmsReceiverArray) ToSmsReceiverArrayOutputWithContext(ctx context.Context) SmsReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverArrayOutput)
}

// An SMS receiver.
type SmsReceiverOutput struct{ *pulumi.OutputState }

func (SmsReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiver)(nil)).Elem()
}

func (o SmsReceiverOutput) ToSmsReceiverOutput() SmsReceiverOutput {
	return o
}

func (o SmsReceiverOutput) ToSmsReceiverOutputWithContext(ctx context.Context) SmsReceiverOutput {
	return o
}

// The country code of the SMS receiver.
func (o SmsReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique across all receivers within an action group.
func (o SmsReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o SmsReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type SmsReceiverArrayOutput struct{ *pulumi.OutputState }

func (SmsReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiver)(nil)).Elem()
}

func (o SmsReceiverArrayOutput) ToSmsReceiverArrayOutput() SmsReceiverArrayOutput {
	return o
}

func (o SmsReceiverArrayOutput) ToSmsReceiverArrayOutputWithContext(ctx context.Context) SmsReceiverArrayOutput {
	return o
}

func (o SmsReceiverArrayOutput) Index(i pulumi.IntInput) SmsReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmsReceiver {
		return vs[0].([]SmsReceiver)[vs[1].(int)]
	}).(SmsReceiverOutput)
}

// An SMS receiver.
type SmsReceiverInvokeResponse struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
	// The status of the receiver.
	Status string `pulumi:"status"`
}

// SmsReceiverInvokeResponseInput is an input type that accepts SmsReceiverInvokeResponseArgs and SmsReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `SmsReceiverInvokeResponseInput` via:
//
//          SmsReceiverInvokeResponseArgs{...}
type SmsReceiverInvokeResponseInput interface {
	pulumi.Input

	ToSmsReceiverInvokeResponseOutput() SmsReceiverInvokeResponseOutput
	ToSmsReceiverInvokeResponseOutputWithContext(context.Context) SmsReceiverInvokeResponseOutput
}

// An SMS receiver.
type SmsReceiverInvokeResponseArgs struct {
	// The country code of the SMS receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
	// The status of the receiver.
	Status pulumi.StringInput `pulumi:"status"`
}

func (SmsReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiverInvokeResponse)(nil)).Elem()
}

func (i SmsReceiverInvokeResponseArgs) ToSmsReceiverInvokeResponseOutput() SmsReceiverInvokeResponseOutput {
	return i.ToSmsReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i SmsReceiverInvokeResponseArgs) ToSmsReceiverInvokeResponseOutputWithContext(ctx context.Context) SmsReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverInvokeResponseOutput)
}

// SmsReceiverInvokeResponseArrayInput is an input type that accepts SmsReceiverInvokeResponseArray and SmsReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `SmsReceiverInvokeResponseArrayInput` via:
//
//          SmsReceiverInvokeResponseArray{ SmsReceiverInvokeResponseArgs{...} }
type SmsReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToSmsReceiverInvokeResponseArrayOutput() SmsReceiverInvokeResponseArrayOutput
	ToSmsReceiverInvokeResponseArrayOutputWithContext(context.Context) SmsReceiverInvokeResponseArrayOutput
}

type SmsReceiverInvokeResponseArray []SmsReceiverInvokeResponseInput

func (SmsReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiverInvokeResponse)(nil)).Elem()
}

func (i SmsReceiverInvokeResponseArray) ToSmsReceiverInvokeResponseArrayOutput() SmsReceiverInvokeResponseArrayOutput {
	return i.ToSmsReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i SmsReceiverInvokeResponseArray) ToSmsReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) SmsReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverInvokeResponseArrayOutput)
}

// An SMS receiver.
type SmsReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (SmsReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiverInvokeResponse)(nil)).Elem()
}

func (o SmsReceiverInvokeResponseOutput) ToSmsReceiverInvokeResponseOutput() SmsReceiverInvokeResponseOutput {
	return o
}

func (o SmsReceiverInvokeResponseOutput) ToSmsReceiverInvokeResponseOutputWithContext(ctx context.Context) SmsReceiverInvokeResponseOutput {
	return o
}

// The country code of the SMS receiver.
func (o SmsReceiverInvokeResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverInvokeResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique across all receivers within an action group.
func (o SmsReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o SmsReceiverInvokeResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverInvokeResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// The status of the receiver.
func (o SmsReceiverInvokeResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverInvokeResponse) string { return v.Status }).(pulumi.StringOutput)
}

type SmsReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (SmsReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiverInvokeResponse)(nil)).Elem()
}

func (o SmsReceiverInvokeResponseArrayOutput) ToSmsReceiverInvokeResponseArrayOutput() SmsReceiverInvokeResponseArrayOutput {
	return o
}

func (o SmsReceiverInvokeResponseArrayOutput) ToSmsReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) SmsReceiverInvokeResponseArrayOutput {
	return o
}

func (o SmsReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) SmsReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmsReceiverInvokeResponse {
		return vs[0].([]SmsReceiverInvokeResponse)[vs[1].(int)]
	}).(SmsReceiverInvokeResponseOutput)
}

// An SMS receiver.
type SmsReceiverResponse struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
	// The status of the receiver.
	Status string `pulumi:"status"`
}

// SmsReceiverResponseInput is an input type that accepts SmsReceiverResponseArgs and SmsReceiverResponseOutput values.
// You can construct a concrete instance of `SmsReceiverResponseInput` via:
//
//          SmsReceiverResponseArgs{...}
type SmsReceiverResponseInput interface {
	pulumi.Input

	ToSmsReceiverResponseOutput() SmsReceiverResponseOutput
	ToSmsReceiverResponseOutputWithContext(context.Context) SmsReceiverResponseOutput
}

// An SMS receiver.
type SmsReceiverResponseArgs struct {
	// The country code of the SMS receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
	// The status of the receiver.
	Status pulumi.StringInput `pulumi:"status"`
}

func (SmsReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiverResponse)(nil)).Elem()
}

func (i SmsReceiverResponseArgs) ToSmsReceiverResponseOutput() SmsReceiverResponseOutput {
	return i.ToSmsReceiverResponseOutputWithContext(context.Background())
}

func (i SmsReceiverResponseArgs) ToSmsReceiverResponseOutputWithContext(ctx context.Context) SmsReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverResponseOutput)
}

// SmsReceiverResponseArrayInput is an input type that accepts SmsReceiverResponseArray and SmsReceiverResponseArrayOutput values.
// You can construct a concrete instance of `SmsReceiverResponseArrayInput` via:
//
//          SmsReceiverResponseArray{ SmsReceiverResponseArgs{...} }
type SmsReceiverResponseArrayInput interface {
	pulumi.Input

	ToSmsReceiverResponseArrayOutput() SmsReceiverResponseArrayOutput
	ToSmsReceiverResponseArrayOutputWithContext(context.Context) SmsReceiverResponseArrayOutput
}

type SmsReceiverResponseArray []SmsReceiverResponseInput

func (SmsReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiverResponse)(nil)).Elem()
}

func (i SmsReceiverResponseArray) ToSmsReceiverResponseArrayOutput() SmsReceiverResponseArrayOutput {
	return i.ToSmsReceiverResponseArrayOutputWithContext(context.Background())
}

func (i SmsReceiverResponseArray) ToSmsReceiverResponseArrayOutputWithContext(ctx context.Context) SmsReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverResponseArrayOutput)
}

// An SMS receiver.
type SmsReceiverResponseOutput struct{ *pulumi.OutputState }

func (SmsReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiverResponse)(nil)).Elem()
}

func (o SmsReceiverResponseOutput) ToSmsReceiverResponseOutput() SmsReceiverResponseOutput {
	return o
}

func (o SmsReceiverResponseOutput) ToSmsReceiverResponseOutputWithContext(ctx context.Context) SmsReceiverResponseOutput {
	return o
}

// The country code of the SMS receiver.
func (o SmsReceiverResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique across all receivers within an action group.
func (o SmsReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o SmsReceiverResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// The status of the receiver.
func (o SmsReceiverResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.Status }).(pulumi.StringOutput)
}

type SmsReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (SmsReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiverResponse)(nil)).Elem()
}

func (o SmsReceiverResponseArrayOutput) ToSmsReceiverResponseArrayOutput() SmsReceiverResponseArrayOutput {
	return o
}

func (o SmsReceiverResponseArrayOutput) ToSmsReceiverResponseArrayOutputWithContext(ctx context.Context) SmsReceiverResponseArrayOutput {
	return o
}

func (o SmsReceiverResponseArrayOutput) Index(i pulumi.IntInput) SmsReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmsReceiverResponse {
		return vs[0].([]SmsReceiverResponse)[vs[1].(int)]
	}).(SmsReceiverResponseOutput)
}

// A voice receiver.
type VoiceReceiver struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// VoiceReceiverInput is an input type that accepts VoiceReceiverArgs and VoiceReceiverOutput values.
// You can construct a concrete instance of `VoiceReceiverInput` via:
//
//          VoiceReceiverArgs{...}
type VoiceReceiverInput interface {
	pulumi.Input

	ToVoiceReceiverOutput() VoiceReceiverOutput
	ToVoiceReceiverOutputWithContext(context.Context) VoiceReceiverOutput
}

// A voice receiver.
type VoiceReceiverArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (VoiceReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiver)(nil)).Elem()
}

func (i VoiceReceiverArgs) ToVoiceReceiverOutput() VoiceReceiverOutput {
	return i.ToVoiceReceiverOutputWithContext(context.Background())
}

func (i VoiceReceiverArgs) ToVoiceReceiverOutputWithContext(ctx context.Context) VoiceReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverOutput)
}

// VoiceReceiverArrayInput is an input type that accepts VoiceReceiverArray and VoiceReceiverArrayOutput values.
// You can construct a concrete instance of `VoiceReceiverArrayInput` via:
//
//          VoiceReceiverArray{ VoiceReceiverArgs{...} }
type VoiceReceiverArrayInput interface {
	pulumi.Input

	ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput
	ToVoiceReceiverArrayOutputWithContext(context.Context) VoiceReceiverArrayOutput
}

type VoiceReceiverArray []VoiceReceiverInput

func (VoiceReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiver)(nil)).Elem()
}

func (i VoiceReceiverArray) ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput {
	return i.ToVoiceReceiverArrayOutputWithContext(context.Background())
}

func (i VoiceReceiverArray) ToVoiceReceiverArrayOutputWithContext(ctx context.Context) VoiceReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverArrayOutput)
}

// A voice receiver.
type VoiceReceiverOutput struct{ *pulumi.OutputState }

func (VoiceReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiver)(nil)).Elem()
}

func (o VoiceReceiverOutput) ToVoiceReceiverOutput() VoiceReceiverOutput {
	return o
}

func (o VoiceReceiverOutput) ToVoiceReceiverOutputWithContext(ctx context.Context) VoiceReceiverOutput {
	return o
}

// The country code of the voice receiver.
func (o VoiceReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver. Names must be unique across all receivers within an action group.
func (o VoiceReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o VoiceReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type VoiceReceiverArrayOutput struct{ *pulumi.OutputState }

func (VoiceReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiver)(nil)).Elem()
}

func (o VoiceReceiverArrayOutput) ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput {
	return o
}

func (o VoiceReceiverArrayOutput) ToVoiceReceiverArrayOutputWithContext(ctx context.Context) VoiceReceiverArrayOutput {
	return o
}

func (o VoiceReceiverArrayOutput) Index(i pulumi.IntInput) VoiceReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VoiceReceiver {
		return vs[0].([]VoiceReceiver)[vs[1].(int)]
	}).(VoiceReceiverOutput)
}

// A voice receiver.
type VoiceReceiverInvokeResponse struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// VoiceReceiverInvokeResponseInput is an input type that accepts VoiceReceiverInvokeResponseArgs and VoiceReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `VoiceReceiverInvokeResponseInput` via:
//
//          VoiceReceiverInvokeResponseArgs{...}
type VoiceReceiverInvokeResponseInput interface {
	pulumi.Input

	ToVoiceReceiverInvokeResponseOutput() VoiceReceiverInvokeResponseOutput
	ToVoiceReceiverInvokeResponseOutputWithContext(context.Context) VoiceReceiverInvokeResponseOutput
}

// A voice receiver.
type VoiceReceiverInvokeResponseArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (VoiceReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiverInvokeResponse)(nil)).Elem()
}

func (i VoiceReceiverInvokeResponseArgs) ToVoiceReceiverInvokeResponseOutput() VoiceReceiverInvokeResponseOutput {
	return i.ToVoiceReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i VoiceReceiverInvokeResponseArgs) ToVoiceReceiverInvokeResponseOutputWithContext(ctx context.Context) VoiceReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverInvokeResponseOutput)
}

// VoiceReceiverInvokeResponseArrayInput is an input type that accepts VoiceReceiverInvokeResponseArray and VoiceReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `VoiceReceiverInvokeResponseArrayInput` via:
//
//          VoiceReceiverInvokeResponseArray{ VoiceReceiverInvokeResponseArgs{...} }
type VoiceReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToVoiceReceiverInvokeResponseArrayOutput() VoiceReceiverInvokeResponseArrayOutput
	ToVoiceReceiverInvokeResponseArrayOutputWithContext(context.Context) VoiceReceiverInvokeResponseArrayOutput
}

type VoiceReceiverInvokeResponseArray []VoiceReceiverInvokeResponseInput

func (VoiceReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiverInvokeResponse)(nil)).Elem()
}

func (i VoiceReceiverInvokeResponseArray) ToVoiceReceiverInvokeResponseArrayOutput() VoiceReceiverInvokeResponseArrayOutput {
	return i.ToVoiceReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i VoiceReceiverInvokeResponseArray) ToVoiceReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) VoiceReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverInvokeResponseArrayOutput)
}

// A voice receiver.
type VoiceReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (VoiceReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiverInvokeResponse)(nil)).Elem()
}

func (o VoiceReceiverInvokeResponseOutput) ToVoiceReceiverInvokeResponseOutput() VoiceReceiverInvokeResponseOutput {
	return o
}

func (o VoiceReceiverInvokeResponseOutput) ToVoiceReceiverInvokeResponseOutputWithContext(ctx context.Context) VoiceReceiverInvokeResponseOutput {
	return o
}

// The country code of the voice receiver.
func (o VoiceReceiverInvokeResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverInvokeResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver. Names must be unique across all receivers within an action group.
func (o VoiceReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o VoiceReceiverInvokeResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverInvokeResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type VoiceReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (VoiceReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiverInvokeResponse)(nil)).Elem()
}

func (o VoiceReceiverInvokeResponseArrayOutput) ToVoiceReceiverInvokeResponseArrayOutput() VoiceReceiverInvokeResponseArrayOutput {
	return o
}

func (o VoiceReceiverInvokeResponseArrayOutput) ToVoiceReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) VoiceReceiverInvokeResponseArrayOutput {
	return o
}

func (o VoiceReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) VoiceReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VoiceReceiverInvokeResponse {
		return vs[0].([]VoiceReceiverInvokeResponse)[vs[1].(int)]
	}).(VoiceReceiverInvokeResponseOutput)
}

// A voice receiver.
type VoiceReceiverResponse struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// VoiceReceiverResponseInput is an input type that accepts VoiceReceiverResponseArgs and VoiceReceiverResponseOutput values.
// You can construct a concrete instance of `VoiceReceiverResponseInput` via:
//
//          VoiceReceiverResponseArgs{...}
type VoiceReceiverResponseInput interface {
	pulumi.Input

	ToVoiceReceiverResponseOutput() VoiceReceiverResponseOutput
	ToVoiceReceiverResponseOutputWithContext(context.Context) VoiceReceiverResponseOutput
}

// A voice receiver.
type VoiceReceiverResponseArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (VoiceReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiverResponse)(nil)).Elem()
}

func (i VoiceReceiverResponseArgs) ToVoiceReceiverResponseOutput() VoiceReceiverResponseOutput {
	return i.ToVoiceReceiverResponseOutputWithContext(context.Background())
}

func (i VoiceReceiverResponseArgs) ToVoiceReceiverResponseOutputWithContext(ctx context.Context) VoiceReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverResponseOutput)
}

// VoiceReceiverResponseArrayInput is an input type that accepts VoiceReceiverResponseArray and VoiceReceiverResponseArrayOutput values.
// You can construct a concrete instance of `VoiceReceiverResponseArrayInput` via:
//
//          VoiceReceiverResponseArray{ VoiceReceiverResponseArgs{...} }
type VoiceReceiverResponseArrayInput interface {
	pulumi.Input

	ToVoiceReceiverResponseArrayOutput() VoiceReceiverResponseArrayOutput
	ToVoiceReceiverResponseArrayOutputWithContext(context.Context) VoiceReceiverResponseArrayOutput
}

type VoiceReceiverResponseArray []VoiceReceiverResponseInput

func (VoiceReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiverResponse)(nil)).Elem()
}

func (i VoiceReceiverResponseArray) ToVoiceReceiverResponseArrayOutput() VoiceReceiverResponseArrayOutput {
	return i.ToVoiceReceiverResponseArrayOutputWithContext(context.Background())
}

func (i VoiceReceiverResponseArray) ToVoiceReceiverResponseArrayOutputWithContext(ctx context.Context) VoiceReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverResponseArrayOutput)
}

// A voice receiver.
type VoiceReceiverResponseOutput struct{ *pulumi.OutputState }

func (VoiceReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiverResponse)(nil)).Elem()
}

func (o VoiceReceiverResponseOutput) ToVoiceReceiverResponseOutput() VoiceReceiverResponseOutput {
	return o
}

func (o VoiceReceiverResponseOutput) ToVoiceReceiverResponseOutputWithContext(ctx context.Context) VoiceReceiverResponseOutput {
	return o
}

// The country code of the voice receiver.
func (o VoiceReceiverResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver. Names must be unique across all receivers within an action group.
func (o VoiceReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o VoiceReceiverResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type VoiceReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (VoiceReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiverResponse)(nil)).Elem()
}

func (o VoiceReceiverResponseArrayOutput) ToVoiceReceiverResponseArrayOutput() VoiceReceiverResponseArrayOutput {
	return o
}

func (o VoiceReceiverResponseArrayOutput) ToVoiceReceiverResponseArrayOutputWithContext(ctx context.Context) VoiceReceiverResponseArrayOutput {
	return o
}

func (o VoiceReceiverResponseArrayOutput) Index(i pulumi.IntInput) VoiceReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VoiceReceiverResponse {
		return vs[0].([]VoiceReceiverResponse)[vs[1].(int)]
	}).(VoiceReceiverResponseOutput)
}

// A webhook receiver.
type WebhookReceiver struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
}

// WebhookReceiverInput is an input type that accepts WebhookReceiverArgs and WebhookReceiverOutput values.
// You can construct a concrete instance of `WebhookReceiverInput` via:
//
//          WebhookReceiverArgs{...}
type WebhookReceiverInput interface {
	pulumi.Input

	ToWebhookReceiverOutput() WebhookReceiverOutput
	ToWebhookReceiverOutputWithContext(context.Context) WebhookReceiverOutput
}

// A webhook receiver.
type WebhookReceiverArgs struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
}

func (WebhookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiver)(nil)).Elem()
}

func (i WebhookReceiverArgs) ToWebhookReceiverOutput() WebhookReceiverOutput {
	return i.ToWebhookReceiverOutputWithContext(context.Background())
}

func (i WebhookReceiverArgs) ToWebhookReceiverOutputWithContext(ctx context.Context) WebhookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverOutput)
}

// WebhookReceiverArrayInput is an input type that accepts WebhookReceiverArray and WebhookReceiverArrayOutput values.
// You can construct a concrete instance of `WebhookReceiverArrayInput` via:
//
//          WebhookReceiverArray{ WebhookReceiverArgs{...} }
type WebhookReceiverArrayInput interface {
	pulumi.Input

	ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput
	ToWebhookReceiverArrayOutputWithContext(context.Context) WebhookReceiverArrayOutput
}

type WebhookReceiverArray []WebhookReceiverInput

func (WebhookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiver)(nil)).Elem()
}

func (i WebhookReceiverArray) ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput {
	return i.ToWebhookReceiverArrayOutputWithContext(context.Background())
}

func (i WebhookReceiverArray) ToWebhookReceiverArrayOutputWithContext(ctx context.Context) WebhookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverArrayOutput)
}

// A webhook receiver.
type WebhookReceiverOutput struct{ *pulumi.OutputState }

func (WebhookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiver)(nil)).Elem()
}

func (o WebhookReceiverOutput) ToWebhookReceiverOutput() WebhookReceiverOutput {
	return o
}

func (o WebhookReceiverOutput) ToWebhookReceiverOutputWithContext(ctx context.Context) WebhookReceiverOutput {
	return o
}

// The name of the webhook receiver. Names must be unique across all receivers within an action group.
func (o WebhookReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o WebhookReceiverOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiver) string { return v.ServiceUri }).(pulumi.StringOutput)
}

type WebhookReceiverArrayOutput struct{ *pulumi.OutputState }

func (WebhookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiver)(nil)).Elem()
}

func (o WebhookReceiverArrayOutput) ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput {
	return o
}

func (o WebhookReceiverArrayOutput) ToWebhookReceiverArrayOutputWithContext(ctx context.Context) WebhookReceiverArrayOutput {
	return o
}

func (o WebhookReceiverArrayOutput) Index(i pulumi.IntInput) WebhookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookReceiver {
		return vs[0].([]WebhookReceiver)[vs[1].(int)]
	}).(WebhookReceiverOutput)
}

// A webhook receiver.
type WebhookReceiverInvokeResponse struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
}

// WebhookReceiverInvokeResponseInput is an input type that accepts WebhookReceiverInvokeResponseArgs and WebhookReceiverInvokeResponseOutput values.
// You can construct a concrete instance of `WebhookReceiverInvokeResponseInput` via:
//
//          WebhookReceiverInvokeResponseArgs{...}
type WebhookReceiverInvokeResponseInput interface {
	pulumi.Input

	ToWebhookReceiverInvokeResponseOutput() WebhookReceiverInvokeResponseOutput
	ToWebhookReceiverInvokeResponseOutputWithContext(context.Context) WebhookReceiverInvokeResponseOutput
}

// A webhook receiver.
type WebhookReceiverInvokeResponseArgs struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
}

func (WebhookReceiverInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiverInvokeResponse)(nil)).Elem()
}

func (i WebhookReceiverInvokeResponseArgs) ToWebhookReceiverInvokeResponseOutput() WebhookReceiverInvokeResponseOutput {
	return i.ToWebhookReceiverInvokeResponseOutputWithContext(context.Background())
}

func (i WebhookReceiverInvokeResponseArgs) ToWebhookReceiverInvokeResponseOutputWithContext(ctx context.Context) WebhookReceiverInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverInvokeResponseOutput)
}

// WebhookReceiverInvokeResponseArrayInput is an input type that accepts WebhookReceiverInvokeResponseArray and WebhookReceiverInvokeResponseArrayOutput values.
// You can construct a concrete instance of `WebhookReceiverInvokeResponseArrayInput` via:
//
//          WebhookReceiverInvokeResponseArray{ WebhookReceiverInvokeResponseArgs{...} }
type WebhookReceiverInvokeResponseArrayInput interface {
	pulumi.Input

	ToWebhookReceiverInvokeResponseArrayOutput() WebhookReceiverInvokeResponseArrayOutput
	ToWebhookReceiverInvokeResponseArrayOutputWithContext(context.Context) WebhookReceiverInvokeResponseArrayOutput
}

type WebhookReceiverInvokeResponseArray []WebhookReceiverInvokeResponseInput

func (WebhookReceiverInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiverInvokeResponse)(nil)).Elem()
}

func (i WebhookReceiverInvokeResponseArray) ToWebhookReceiverInvokeResponseArrayOutput() WebhookReceiverInvokeResponseArrayOutput {
	return i.ToWebhookReceiverInvokeResponseArrayOutputWithContext(context.Background())
}

func (i WebhookReceiverInvokeResponseArray) ToWebhookReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) WebhookReceiverInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverInvokeResponseArrayOutput)
}

// A webhook receiver.
type WebhookReceiverInvokeResponseOutput struct{ *pulumi.OutputState }

func (WebhookReceiverInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiverInvokeResponse)(nil)).Elem()
}

func (o WebhookReceiverInvokeResponseOutput) ToWebhookReceiverInvokeResponseOutput() WebhookReceiverInvokeResponseOutput {
	return o
}

func (o WebhookReceiverInvokeResponseOutput) ToWebhookReceiverInvokeResponseOutputWithContext(ctx context.Context) WebhookReceiverInvokeResponseOutput {
	return o
}

// The name of the webhook receiver. Names must be unique across all receivers within an action group.
func (o WebhookReceiverInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o WebhookReceiverInvokeResponseOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverInvokeResponse) string { return v.ServiceUri }).(pulumi.StringOutput)
}

type WebhookReceiverInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (WebhookReceiverInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiverInvokeResponse)(nil)).Elem()
}

func (o WebhookReceiverInvokeResponseArrayOutput) ToWebhookReceiverInvokeResponseArrayOutput() WebhookReceiverInvokeResponseArrayOutput {
	return o
}

func (o WebhookReceiverInvokeResponseArrayOutput) ToWebhookReceiverInvokeResponseArrayOutputWithContext(ctx context.Context) WebhookReceiverInvokeResponseArrayOutput {
	return o
}

func (o WebhookReceiverInvokeResponseArrayOutput) Index(i pulumi.IntInput) WebhookReceiverInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookReceiverInvokeResponse {
		return vs[0].([]WebhookReceiverInvokeResponse)[vs[1].(int)]
	}).(WebhookReceiverInvokeResponseOutput)
}

// A webhook receiver.
type WebhookReceiverResponse struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
}

// WebhookReceiverResponseInput is an input type that accepts WebhookReceiverResponseArgs and WebhookReceiverResponseOutput values.
// You can construct a concrete instance of `WebhookReceiverResponseInput` via:
//
//          WebhookReceiverResponseArgs{...}
type WebhookReceiverResponseInput interface {
	pulumi.Input

	ToWebhookReceiverResponseOutput() WebhookReceiverResponseOutput
	ToWebhookReceiverResponseOutputWithContext(context.Context) WebhookReceiverResponseOutput
}

// A webhook receiver.
type WebhookReceiverResponseArgs struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
}

func (WebhookReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiverResponse)(nil)).Elem()
}

func (i WebhookReceiverResponseArgs) ToWebhookReceiverResponseOutput() WebhookReceiverResponseOutput {
	return i.ToWebhookReceiverResponseOutputWithContext(context.Background())
}

func (i WebhookReceiverResponseArgs) ToWebhookReceiverResponseOutputWithContext(ctx context.Context) WebhookReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverResponseOutput)
}

// WebhookReceiverResponseArrayInput is an input type that accepts WebhookReceiverResponseArray and WebhookReceiverResponseArrayOutput values.
// You can construct a concrete instance of `WebhookReceiverResponseArrayInput` via:
//
//          WebhookReceiverResponseArray{ WebhookReceiverResponseArgs{...} }
type WebhookReceiverResponseArrayInput interface {
	pulumi.Input

	ToWebhookReceiverResponseArrayOutput() WebhookReceiverResponseArrayOutput
	ToWebhookReceiverResponseArrayOutputWithContext(context.Context) WebhookReceiverResponseArrayOutput
}

type WebhookReceiverResponseArray []WebhookReceiverResponseInput

func (WebhookReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiverResponse)(nil)).Elem()
}

func (i WebhookReceiverResponseArray) ToWebhookReceiverResponseArrayOutput() WebhookReceiverResponseArrayOutput {
	return i.ToWebhookReceiverResponseArrayOutputWithContext(context.Background())
}

func (i WebhookReceiverResponseArray) ToWebhookReceiverResponseArrayOutputWithContext(ctx context.Context) WebhookReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverResponseArrayOutput)
}

// A webhook receiver.
type WebhookReceiverResponseOutput struct{ *pulumi.OutputState }

func (WebhookReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiverResponse)(nil)).Elem()
}

func (o WebhookReceiverResponseOutput) ToWebhookReceiverResponseOutput() WebhookReceiverResponseOutput {
	return o
}

func (o WebhookReceiverResponseOutput) ToWebhookReceiverResponseOutputWithContext(ctx context.Context) WebhookReceiverResponseOutput {
	return o
}

// The name of the webhook receiver. Names must be unique across all receivers within an action group.
func (o WebhookReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o WebhookReceiverResponseOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) string { return v.ServiceUri }).(pulumi.StringOutput)
}

type WebhookReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (WebhookReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiverResponse)(nil)).Elem()
}

func (o WebhookReceiverResponseArrayOutput) ToWebhookReceiverResponseArrayOutput() WebhookReceiverResponseArrayOutput {
	return o
}

func (o WebhookReceiverResponseArrayOutput) ToWebhookReceiverResponseArrayOutputWithContext(ctx context.Context) WebhookReceiverResponseArrayOutput {
	return o
}

func (o WebhookReceiverResponseArrayOutput) Index(i pulumi.IntInput) WebhookReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookReceiverResponse {
		return vs[0].([]WebhookReceiverResponse)[vs[1].(int)]
	}).(WebhookReceiverResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ArmRoleReceiverOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverArrayOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverResponseOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverArrayOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverResponseOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverArrayOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverResponseOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(EmailReceiverOutput{})
	pulumi.RegisterOutputType(EmailReceiverArrayOutput{})
	pulumi.RegisterOutputType(EmailReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(EmailReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(EmailReceiverResponseOutput{})
	pulumi.RegisterOutputType(EmailReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(ItsmReceiverOutput{})
	pulumi.RegisterOutputType(ItsmReceiverArrayOutput{})
	pulumi.RegisterOutputType(ItsmReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(ItsmReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ItsmReceiverResponseOutput{})
	pulumi.RegisterOutputType(ItsmReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverResponseOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(SmsReceiverOutput{})
	pulumi.RegisterOutputType(SmsReceiverArrayOutput{})
	pulumi.RegisterOutputType(SmsReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(SmsReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(SmsReceiverResponseOutput{})
	pulumi.RegisterOutputType(SmsReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(VoiceReceiverOutput{})
	pulumi.RegisterOutputType(VoiceReceiverArrayOutput{})
	pulumi.RegisterOutputType(VoiceReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(VoiceReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(VoiceReceiverResponseOutput{})
	pulumi.RegisterOutputType(VoiceReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverOutput{})
	pulumi.RegisterOutputType(WebhookReceiverArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverInvokeResponseOutput{})
	pulumi.RegisterOutputType(WebhookReceiverInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverResponseOutput{})
	pulumi.RegisterOutputType(WebhookReceiverResponseArrayOutput{})
}
