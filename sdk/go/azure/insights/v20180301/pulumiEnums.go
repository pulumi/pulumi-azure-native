// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// the criteria time aggregation types.
type AggregationTypeEnum string

const (
	AggregationTypeEnumAverage = AggregationTypeEnum("Average")
	AggregationTypeEnumCount   = AggregationTypeEnum("Count")
	AggregationTypeEnumMinimum = AggregationTypeEnum("Minimum")
	AggregationTypeEnumMaximum = AggregationTypeEnum("Maximum")
	AggregationTypeEnumTotal   = AggregationTypeEnum("Total")
)

func (AggregationTypeEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationTypeEnum)(nil)).Elem()
}

func (e AggregationTypeEnum) ToAggregationTypeEnumOutput() AggregationTypeEnumOutput {
	return pulumi.ToOutput(e).(AggregationTypeEnumOutput)
}

func (e AggregationTypeEnum) ToAggregationTypeEnumOutputWithContext(ctx context.Context) AggregationTypeEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AggregationTypeEnumOutput)
}

func (e AggregationTypeEnum) ToAggregationTypeEnumPtrOutput() AggregationTypeEnumPtrOutput {
	return e.ToAggregationTypeEnumPtrOutputWithContext(context.Background())
}

func (e AggregationTypeEnum) ToAggregationTypeEnumPtrOutputWithContext(ctx context.Context) AggregationTypeEnumPtrOutput {
	return AggregationTypeEnum(e).ToAggregationTypeEnumOutputWithContext(ctx).ToAggregationTypeEnumPtrOutputWithContext(ctx)
}

func (e AggregationTypeEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationTypeEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationTypeEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AggregationTypeEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AggregationTypeEnumOutput struct{ *pulumi.OutputState }

func (AggregationTypeEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationTypeEnum)(nil)).Elem()
}

func (o AggregationTypeEnumOutput) ToAggregationTypeEnumOutput() AggregationTypeEnumOutput {
	return o
}

func (o AggregationTypeEnumOutput) ToAggregationTypeEnumOutputWithContext(ctx context.Context) AggregationTypeEnumOutput {
	return o
}

func (o AggregationTypeEnumOutput) ToAggregationTypeEnumPtrOutput() AggregationTypeEnumPtrOutput {
	return o.ToAggregationTypeEnumPtrOutputWithContext(context.Background())
}

func (o AggregationTypeEnumOutput) ToAggregationTypeEnumPtrOutputWithContext(ctx context.Context) AggregationTypeEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregationTypeEnum) *AggregationTypeEnum {
		return &v
	}).(AggregationTypeEnumPtrOutput)
}

func (o AggregationTypeEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AggregationTypeEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationTypeEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AggregationTypeEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationTypeEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationTypeEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AggregationTypeEnumPtrOutput struct{ *pulumi.OutputState }

func (AggregationTypeEnumPtrOutput) ElementType() reflect.Type {
	return aggregationTypeEnumPtrType
}

func (o AggregationTypeEnumPtrOutput) ToAggregationTypeEnumPtrOutput() AggregationTypeEnumPtrOutput {
	return o
}

func (o AggregationTypeEnumPtrOutput) ToAggregationTypeEnumPtrOutputWithContext(ctx context.Context) AggregationTypeEnumPtrOutput {
	return o
}

func (o AggregationTypeEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationTypeEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AggregationTypeEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AggregationTypeEnumPtrOutput) Elem() AggregationTypeEnumOutput {
	return o.ApplyT(func(v *AggregationTypeEnum) AggregationTypeEnum {
		var ret AggregationTypeEnum
		if v != nil {
			ret = *v
		}
		return ret
	}).(AggregationTypeEnumOutput)
}

// AggregationTypeEnumInput is an input type that accepts AggregationTypeEnumArgs and AggregationTypeEnumOutput values.
// You can construct a concrete instance of `AggregationTypeEnumInput` via:
//
//          AggregationTypeEnumArgs{...}
type AggregationTypeEnumInput interface {
	pulumi.Input

	ToAggregationTypeEnumOutput() AggregationTypeEnumOutput
	ToAggregationTypeEnumOutputWithContext(context.Context) AggregationTypeEnumOutput
}

var aggregationTypeEnumPtrType = reflect.TypeOf((**AggregationTypeEnum)(nil)).Elem()

type AggregationTypeEnumPtrInput interface {
	pulumi.Input

	ToAggregationTypeEnumPtrOutput() AggregationTypeEnumPtrOutput
	ToAggregationTypeEnumPtrOutputWithContext(context.Context) AggregationTypeEnumPtrOutput
}

type aggregationTypeEnumPtr string

func AggregationTypeEnumPtr(v string) AggregationTypeEnumPtrInput {
	return (*aggregationTypeEnumPtr)(&v)
}

func (*aggregationTypeEnumPtr) ElementType() reflect.Type {
	return aggregationTypeEnumPtrType
}

func (in *aggregationTypeEnumPtr) ToAggregationTypeEnumPtrOutput() AggregationTypeEnumPtrOutput {
	return pulumi.ToOutput(in).(AggregationTypeEnumPtrOutput)
}

func (in *aggregationTypeEnumPtr) ToAggregationTypeEnumPtrOutputWithContext(ctx context.Context) AggregationTypeEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AggregationTypeEnumPtrOutput)
}

// Specifies the type of threshold criteria
type CriterionType string

const (
	CriterionTypeStaticThresholdCriterion  = CriterionType("StaticThresholdCriterion")
	CriterionTypeDynamicThresholdCriterion = CriterionType("DynamicThresholdCriterion")
)

func (CriterionType) ElementType() reflect.Type {
	return reflect.TypeOf((*CriterionType)(nil)).Elem()
}

func (e CriterionType) ToCriterionTypeOutput() CriterionTypeOutput {
	return pulumi.ToOutput(e).(CriterionTypeOutput)
}

func (e CriterionType) ToCriterionTypeOutputWithContext(ctx context.Context) CriterionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CriterionTypeOutput)
}

func (e CriterionType) ToCriterionTypePtrOutput() CriterionTypePtrOutput {
	return e.ToCriterionTypePtrOutputWithContext(context.Background())
}

func (e CriterionType) ToCriterionTypePtrOutputWithContext(ctx context.Context) CriterionTypePtrOutput {
	return CriterionType(e).ToCriterionTypeOutputWithContext(ctx).ToCriterionTypePtrOutputWithContext(ctx)
}

func (e CriterionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CriterionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CriterionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CriterionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CriterionTypeOutput struct{ *pulumi.OutputState }

func (CriterionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CriterionType)(nil)).Elem()
}

func (o CriterionTypeOutput) ToCriterionTypeOutput() CriterionTypeOutput {
	return o
}

func (o CriterionTypeOutput) ToCriterionTypeOutputWithContext(ctx context.Context) CriterionTypeOutput {
	return o
}

func (o CriterionTypeOutput) ToCriterionTypePtrOutput() CriterionTypePtrOutput {
	return o.ToCriterionTypePtrOutputWithContext(context.Background())
}

func (o CriterionTypeOutput) ToCriterionTypePtrOutputWithContext(ctx context.Context) CriterionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CriterionType) *CriterionType {
		return &v
	}).(CriterionTypePtrOutput)
}

func (o CriterionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CriterionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CriterionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CriterionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CriterionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CriterionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CriterionTypePtrOutput struct{ *pulumi.OutputState }

func (CriterionTypePtrOutput) ElementType() reflect.Type {
	return criterionTypePtrType
}

func (o CriterionTypePtrOutput) ToCriterionTypePtrOutput() CriterionTypePtrOutput {
	return o
}

func (o CriterionTypePtrOutput) ToCriterionTypePtrOutputWithContext(ctx context.Context) CriterionTypePtrOutput {
	return o
}

func (o CriterionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CriterionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CriterionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o CriterionTypePtrOutput) Elem() CriterionTypeOutput {
	return o.ApplyT(func(v *CriterionType) CriterionType {
		var ret CriterionType
		if v != nil {
			ret = *v
		}
		return ret
	}).(CriterionTypeOutput)
}

// CriterionTypeInput is an input type that accepts CriterionTypeArgs and CriterionTypeOutput values.
// You can construct a concrete instance of `CriterionTypeInput` via:
//
//          CriterionTypeArgs{...}
type CriterionTypeInput interface {
	pulumi.Input

	ToCriterionTypeOutput() CriterionTypeOutput
	ToCriterionTypeOutputWithContext(context.Context) CriterionTypeOutput
}

var criterionTypePtrType = reflect.TypeOf((**CriterionType)(nil)).Elem()

type CriterionTypePtrInput interface {
	pulumi.Input

	ToCriterionTypePtrOutput() CriterionTypePtrOutput
	ToCriterionTypePtrOutputWithContext(context.Context) CriterionTypePtrOutput
}

type criterionTypePtr string

func CriterionTypePtr(v string) CriterionTypePtrInput {
	return (*criterionTypePtr)(&v)
}

func (*criterionTypePtr) ElementType() reflect.Type {
	return criterionTypePtrType
}

func (in *criterionTypePtr) ToCriterionTypePtrOutput() CriterionTypePtrOutput {
	return pulumi.ToOutput(in).(CriterionTypePtrOutput)
}

func (in *criterionTypePtr) ToCriterionTypePtrOutputWithContext(ctx context.Context) CriterionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CriterionTypePtrOutput)
}

// The operator used to compare the metric value against the threshold.
type DynamicThresholdOperator string

const (
	DynamicThresholdOperatorGreaterThan       = DynamicThresholdOperator("GreaterThan")
	DynamicThresholdOperatorLessThan          = DynamicThresholdOperator("LessThan")
	DynamicThresholdOperatorGreaterOrLessThan = DynamicThresholdOperator("GreaterOrLessThan")
)

func (DynamicThresholdOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdOperator)(nil)).Elem()
}

func (e DynamicThresholdOperator) ToDynamicThresholdOperatorOutput() DynamicThresholdOperatorOutput {
	return pulumi.ToOutput(e).(DynamicThresholdOperatorOutput)
}

func (e DynamicThresholdOperator) ToDynamicThresholdOperatorOutputWithContext(ctx context.Context) DynamicThresholdOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DynamicThresholdOperatorOutput)
}

func (e DynamicThresholdOperator) ToDynamicThresholdOperatorPtrOutput() DynamicThresholdOperatorPtrOutput {
	return e.ToDynamicThresholdOperatorPtrOutputWithContext(context.Background())
}

func (e DynamicThresholdOperator) ToDynamicThresholdOperatorPtrOutputWithContext(ctx context.Context) DynamicThresholdOperatorPtrOutput {
	return DynamicThresholdOperator(e).ToDynamicThresholdOperatorOutputWithContext(ctx).ToDynamicThresholdOperatorPtrOutputWithContext(ctx)
}

func (e DynamicThresholdOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DynamicThresholdOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DynamicThresholdOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DynamicThresholdOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DynamicThresholdOperatorOutput struct{ *pulumi.OutputState }

func (DynamicThresholdOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdOperator)(nil)).Elem()
}

func (o DynamicThresholdOperatorOutput) ToDynamicThresholdOperatorOutput() DynamicThresholdOperatorOutput {
	return o
}

func (o DynamicThresholdOperatorOutput) ToDynamicThresholdOperatorOutputWithContext(ctx context.Context) DynamicThresholdOperatorOutput {
	return o
}

func (o DynamicThresholdOperatorOutput) ToDynamicThresholdOperatorPtrOutput() DynamicThresholdOperatorPtrOutput {
	return o.ToDynamicThresholdOperatorPtrOutputWithContext(context.Background())
}

func (o DynamicThresholdOperatorOutput) ToDynamicThresholdOperatorPtrOutputWithContext(ctx context.Context) DynamicThresholdOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DynamicThresholdOperator) *DynamicThresholdOperator {
		return &v
	}).(DynamicThresholdOperatorPtrOutput)
}

func (o DynamicThresholdOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DynamicThresholdOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DynamicThresholdOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DynamicThresholdOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DynamicThresholdOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DynamicThresholdOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DynamicThresholdOperatorPtrOutput struct{ *pulumi.OutputState }

func (DynamicThresholdOperatorPtrOutput) ElementType() reflect.Type {
	return dynamicThresholdOperatorPtrType
}

func (o DynamicThresholdOperatorPtrOutput) ToDynamicThresholdOperatorPtrOutput() DynamicThresholdOperatorPtrOutput {
	return o
}

func (o DynamicThresholdOperatorPtrOutput) ToDynamicThresholdOperatorPtrOutputWithContext(ctx context.Context) DynamicThresholdOperatorPtrOutput {
	return o
}

func (o DynamicThresholdOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DynamicThresholdOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DynamicThresholdOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o DynamicThresholdOperatorPtrOutput) Elem() DynamicThresholdOperatorOutput {
	return o.ApplyT(func(v *DynamicThresholdOperator) DynamicThresholdOperator {
		var ret DynamicThresholdOperator
		if v != nil {
			ret = *v
		}
		return ret
	}).(DynamicThresholdOperatorOutput)
}

// DynamicThresholdOperatorInput is an input type that accepts DynamicThresholdOperatorArgs and DynamicThresholdOperatorOutput values.
// You can construct a concrete instance of `DynamicThresholdOperatorInput` via:
//
//          DynamicThresholdOperatorArgs{...}
type DynamicThresholdOperatorInput interface {
	pulumi.Input

	ToDynamicThresholdOperatorOutput() DynamicThresholdOperatorOutput
	ToDynamicThresholdOperatorOutputWithContext(context.Context) DynamicThresholdOperatorOutput
}

var dynamicThresholdOperatorPtrType = reflect.TypeOf((**DynamicThresholdOperator)(nil)).Elem()

type DynamicThresholdOperatorPtrInput interface {
	pulumi.Input

	ToDynamicThresholdOperatorPtrOutput() DynamicThresholdOperatorPtrOutput
	ToDynamicThresholdOperatorPtrOutputWithContext(context.Context) DynamicThresholdOperatorPtrOutput
}

type dynamicThresholdOperatorPtr string

func DynamicThresholdOperatorPtr(v string) DynamicThresholdOperatorPtrInput {
	return (*dynamicThresholdOperatorPtr)(&v)
}

func (*dynamicThresholdOperatorPtr) ElementType() reflect.Type {
	return dynamicThresholdOperatorPtrType
}

func (in *dynamicThresholdOperatorPtr) ToDynamicThresholdOperatorPtrOutput() DynamicThresholdOperatorPtrOutput {
	return pulumi.ToOutput(in).(DynamicThresholdOperatorPtrOutput)
}

func (in *dynamicThresholdOperatorPtr) ToDynamicThresholdOperatorPtrOutputWithContext(ctx context.Context) DynamicThresholdOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DynamicThresholdOperatorPtrOutput)
}

// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
type DynamicThresholdSensitivity string

const (
	DynamicThresholdSensitivityLow    = DynamicThresholdSensitivity("Low")
	DynamicThresholdSensitivityMedium = DynamicThresholdSensitivity("Medium")
	DynamicThresholdSensitivityHigh   = DynamicThresholdSensitivity("High")
)

func (DynamicThresholdSensitivity) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdSensitivity)(nil)).Elem()
}

func (e DynamicThresholdSensitivity) ToDynamicThresholdSensitivityOutput() DynamicThresholdSensitivityOutput {
	return pulumi.ToOutput(e).(DynamicThresholdSensitivityOutput)
}

func (e DynamicThresholdSensitivity) ToDynamicThresholdSensitivityOutputWithContext(ctx context.Context) DynamicThresholdSensitivityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DynamicThresholdSensitivityOutput)
}

func (e DynamicThresholdSensitivity) ToDynamicThresholdSensitivityPtrOutput() DynamicThresholdSensitivityPtrOutput {
	return e.ToDynamicThresholdSensitivityPtrOutputWithContext(context.Background())
}

func (e DynamicThresholdSensitivity) ToDynamicThresholdSensitivityPtrOutputWithContext(ctx context.Context) DynamicThresholdSensitivityPtrOutput {
	return DynamicThresholdSensitivity(e).ToDynamicThresholdSensitivityOutputWithContext(ctx).ToDynamicThresholdSensitivityPtrOutputWithContext(ctx)
}

func (e DynamicThresholdSensitivity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DynamicThresholdSensitivity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DynamicThresholdSensitivity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DynamicThresholdSensitivity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DynamicThresholdSensitivityOutput struct{ *pulumi.OutputState }

func (DynamicThresholdSensitivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdSensitivity)(nil)).Elem()
}

func (o DynamicThresholdSensitivityOutput) ToDynamicThresholdSensitivityOutput() DynamicThresholdSensitivityOutput {
	return o
}

func (o DynamicThresholdSensitivityOutput) ToDynamicThresholdSensitivityOutputWithContext(ctx context.Context) DynamicThresholdSensitivityOutput {
	return o
}

func (o DynamicThresholdSensitivityOutput) ToDynamicThresholdSensitivityPtrOutput() DynamicThresholdSensitivityPtrOutput {
	return o.ToDynamicThresholdSensitivityPtrOutputWithContext(context.Background())
}

func (o DynamicThresholdSensitivityOutput) ToDynamicThresholdSensitivityPtrOutputWithContext(ctx context.Context) DynamicThresholdSensitivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DynamicThresholdSensitivity) *DynamicThresholdSensitivity {
		return &v
	}).(DynamicThresholdSensitivityPtrOutput)
}

func (o DynamicThresholdSensitivityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DynamicThresholdSensitivityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DynamicThresholdSensitivity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DynamicThresholdSensitivityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DynamicThresholdSensitivityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DynamicThresholdSensitivity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DynamicThresholdSensitivityPtrOutput struct{ *pulumi.OutputState }

func (DynamicThresholdSensitivityPtrOutput) ElementType() reflect.Type {
	return dynamicThresholdSensitivityPtrType
}

func (o DynamicThresholdSensitivityPtrOutput) ToDynamicThresholdSensitivityPtrOutput() DynamicThresholdSensitivityPtrOutput {
	return o
}

func (o DynamicThresholdSensitivityPtrOutput) ToDynamicThresholdSensitivityPtrOutputWithContext(ctx context.Context) DynamicThresholdSensitivityPtrOutput {
	return o
}

func (o DynamicThresholdSensitivityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DynamicThresholdSensitivityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DynamicThresholdSensitivity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o DynamicThresholdSensitivityPtrOutput) Elem() DynamicThresholdSensitivityOutput {
	return o.ApplyT(func(v *DynamicThresholdSensitivity) DynamicThresholdSensitivity {
		var ret DynamicThresholdSensitivity
		if v != nil {
			ret = *v
		}
		return ret
	}).(DynamicThresholdSensitivityOutput)
}

// DynamicThresholdSensitivityInput is an input type that accepts DynamicThresholdSensitivityArgs and DynamicThresholdSensitivityOutput values.
// You can construct a concrete instance of `DynamicThresholdSensitivityInput` via:
//
//          DynamicThresholdSensitivityArgs{...}
type DynamicThresholdSensitivityInput interface {
	pulumi.Input

	ToDynamicThresholdSensitivityOutput() DynamicThresholdSensitivityOutput
	ToDynamicThresholdSensitivityOutputWithContext(context.Context) DynamicThresholdSensitivityOutput
}

var dynamicThresholdSensitivityPtrType = reflect.TypeOf((**DynamicThresholdSensitivity)(nil)).Elem()

type DynamicThresholdSensitivityPtrInput interface {
	pulumi.Input

	ToDynamicThresholdSensitivityPtrOutput() DynamicThresholdSensitivityPtrOutput
	ToDynamicThresholdSensitivityPtrOutputWithContext(context.Context) DynamicThresholdSensitivityPtrOutput
}

type dynamicThresholdSensitivityPtr string

func DynamicThresholdSensitivityPtr(v string) DynamicThresholdSensitivityPtrInput {
	return (*dynamicThresholdSensitivityPtr)(&v)
}

func (*dynamicThresholdSensitivityPtr) ElementType() reflect.Type {
	return dynamicThresholdSensitivityPtrType
}

func (in *dynamicThresholdSensitivityPtr) ToDynamicThresholdSensitivityPtrOutput() DynamicThresholdSensitivityPtrOutput {
	return pulumi.ToOutput(in).(DynamicThresholdSensitivityPtrOutput)
}

func (in *dynamicThresholdSensitivityPtr) ToDynamicThresholdSensitivityPtrOutputWithContext(ctx context.Context) DynamicThresholdSensitivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DynamicThresholdSensitivityPtrOutput)
}

// specifies the type of the alert criteria.
type Odatatype string

const (
	Odatatype_Microsoft_Azure_Monitor_SingleResourceMultipleMetricCriteria   = Odatatype("Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria")
	Odatatype_Microsoft_Azure_Monitor_MultipleResourceMultipleMetricCriteria = Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria")
	Odatatype_Microsoft_Azure_Monitor_WebtestLocationAvailabilityCriteria    = Odatatype("Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria")
)

func (Odatatype) ElementType() reflect.Type {
	return reflect.TypeOf((*Odatatype)(nil)).Elem()
}

func (e Odatatype) ToOdatatypeOutput() OdatatypeOutput {
	return pulumi.ToOutput(e).(OdatatypeOutput)
}

func (e Odatatype) ToOdatatypeOutputWithContext(ctx context.Context) OdatatypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OdatatypeOutput)
}

func (e Odatatype) ToOdatatypePtrOutput() OdatatypePtrOutput {
	return e.ToOdatatypePtrOutputWithContext(context.Background())
}

func (e Odatatype) ToOdatatypePtrOutputWithContext(ctx context.Context) OdatatypePtrOutput {
	return Odatatype(e).ToOdatatypeOutputWithContext(ctx).ToOdatatypePtrOutputWithContext(ctx)
}

func (e Odatatype) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Odatatype) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Odatatype) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Odatatype) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OdatatypeOutput struct{ *pulumi.OutputState }

func (OdatatypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Odatatype)(nil)).Elem()
}

func (o OdatatypeOutput) ToOdatatypeOutput() OdatatypeOutput {
	return o
}

func (o OdatatypeOutput) ToOdatatypeOutputWithContext(ctx context.Context) OdatatypeOutput {
	return o
}

func (o OdatatypeOutput) ToOdatatypePtrOutput() OdatatypePtrOutput {
	return o.ToOdatatypePtrOutputWithContext(context.Background())
}

func (o OdatatypeOutput) ToOdatatypePtrOutputWithContext(ctx context.Context) OdatatypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Odatatype) *Odatatype {
		return &v
	}).(OdatatypePtrOutput)
}

func (o OdatatypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OdatatypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Odatatype) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OdatatypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OdatatypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Odatatype) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OdatatypePtrOutput struct{ *pulumi.OutputState }

func (OdatatypePtrOutput) ElementType() reflect.Type {
	return odatatypePtrType
}

func (o OdatatypePtrOutput) ToOdatatypePtrOutput() OdatatypePtrOutput {
	return o
}

func (o OdatatypePtrOutput) ToOdatatypePtrOutputWithContext(ctx context.Context) OdatatypePtrOutput {
	return o
}

func (o OdatatypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OdatatypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Odatatype) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o OdatatypePtrOutput) Elem() OdatatypeOutput {
	return o.ApplyT(func(v *Odatatype) Odatatype {
		var ret Odatatype
		if v != nil {
			ret = *v
		}
		return ret
	}).(OdatatypeOutput)
}

// OdatatypeInput is an input type that accepts OdatatypeArgs and OdatatypeOutput values.
// You can construct a concrete instance of `OdatatypeInput` via:
//
//          OdatatypeArgs{...}
type OdatatypeInput interface {
	pulumi.Input

	ToOdatatypeOutput() OdatatypeOutput
	ToOdatatypeOutputWithContext(context.Context) OdatatypeOutput
}

var odatatypePtrType = reflect.TypeOf((**Odatatype)(nil)).Elem()

type OdatatypePtrInput interface {
	pulumi.Input

	ToOdatatypePtrOutput() OdatatypePtrOutput
	ToOdatatypePtrOutputWithContext(context.Context) OdatatypePtrOutput
}

type odatatypePtr string

func OdatatypePtr(v string) OdatatypePtrInput {
	return (*odatatypePtr)(&v)
}

func (*odatatypePtr) ElementType() reflect.Type {
	return odatatypePtrType
}

func (in *odatatypePtr) ToOdatatypePtrOutput() OdatatypePtrOutput {
	return pulumi.ToOutput(in).(OdatatypePtrOutput)
}

func (in *odatatypePtr) ToOdatatypePtrOutputWithContext(ctx context.Context) OdatatypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OdatatypePtrOutput)
}

// the criteria operator.
type Operator string

const (
	OperatorEquals             = Operator("Equals")
	OperatorNotEquals          = Operator("NotEquals")
	OperatorGreaterThan        = Operator("GreaterThan")
	OperatorGreaterThanOrEqual = Operator("GreaterThanOrEqual")
	OperatorLessThan           = Operator("LessThan")
	OperatorLessThanOrEqual    = Operator("LessThanOrEqual")
)

func (Operator) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (e Operator) ToOperatorOutput() OperatorOutput {
	return pulumi.ToOutput(e).(OperatorOutput)
}

func (e Operator) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorOutput)
}

func (e Operator) ToOperatorPtrOutput() OperatorPtrOutput {
	return e.ToOperatorPtrOutputWithContext(context.Background())
}

func (e Operator) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return Operator(e).ToOperatorOutputWithContext(ctx).ToOperatorPtrOutputWithContext(ctx)
}

func (e Operator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Operator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorOutput struct{ *pulumi.OutputState }

func (OperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (o OperatorOutput) ToOperatorOutput() OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o.ToOperatorPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Operator) *Operator {
		return &v
	}).(OperatorPtrOutput)
}

func (o OperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorPtrOutput struct{ *pulumi.OutputState }

func (OperatorPtrOutput) ElementType() reflect.Type {
	return operatorPtrType
}

func (o OperatorPtrOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Operator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o OperatorPtrOutput) Elem() OperatorOutput {
	return o.ApplyT(func(v *Operator) Operator {
		var ret Operator
		if v != nil {
			ret = *v
		}
		return ret
	}).(OperatorOutput)
}

// OperatorInput is an input type that accepts OperatorArgs and OperatorOutput values.
// You can construct a concrete instance of `OperatorInput` via:
//
//          OperatorArgs{...}
type OperatorInput interface {
	pulumi.Input

	ToOperatorOutput() OperatorOutput
	ToOperatorOutputWithContext(context.Context) OperatorOutput
}

var operatorPtrType = reflect.TypeOf((**Operator)(nil)).Elem()

type OperatorPtrInput interface {
	pulumi.Input

	ToOperatorPtrOutput() OperatorPtrOutput
	ToOperatorPtrOutputWithContext(context.Context) OperatorPtrOutput
}

type operatorPtr string

func OperatorPtr(v string) OperatorPtrInput {
	return (*operatorPtr)(&v)
}

func (*operatorPtr) ElementType() reflect.Type {
	return operatorPtrType
}

func (in *operatorPtr) ToOperatorPtrOutput() OperatorPtrOutput {
	return pulumi.ToOutput(in).(OperatorPtrOutput)
}

func (in *operatorPtr) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AggregationTypeEnumOutput{})
	pulumi.RegisterOutputType(AggregationTypeEnumPtrOutput{})
	pulumi.RegisterOutputType(CriterionTypeOutput{})
	pulumi.RegisterOutputType(CriterionTypePtrOutput{})
	pulumi.RegisterOutputType(DynamicThresholdOperatorOutput{})
	pulumi.RegisterOutputType(DynamicThresholdOperatorPtrOutput{})
	pulumi.RegisterOutputType(DynamicThresholdSensitivityOutput{})
	pulumi.RegisterOutputType(DynamicThresholdSensitivityPtrOutput{})
	pulumi.RegisterOutputType(OdatatypeOutput{})
	pulumi.RegisterOutputType(OdatatypePtrOutput{})
	pulumi.RegisterOutputType(OperatorOutput{})
	pulumi.RegisterOutputType(OperatorPtrOutput{})
}
