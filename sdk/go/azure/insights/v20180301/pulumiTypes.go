// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiver struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// AutomationRunbookReceiverInput is an input type that accepts AutomationRunbookReceiverArgs and AutomationRunbookReceiverOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverInput` via:
//
//          AutomationRunbookReceiverArgs{...}
type AutomationRunbookReceiverInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput
	ToAutomationRunbookReceiverOutputWithContext(context.Context) AutomationRunbookReceiverOutput
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverArgs struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

func (AutomationRunbookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiver)(nil)).Elem()
}

func (i AutomationRunbookReceiverArgs) ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput {
	return i.ToAutomationRunbookReceiverOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverArgs) ToAutomationRunbookReceiverOutputWithContext(ctx context.Context) AutomationRunbookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverOutput)
}

// AutomationRunbookReceiverArrayInput is an input type that accepts AutomationRunbookReceiverArray and AutomationRunbookReceiverArrayOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverArrayInput` via:
//
//          AutomationRunbookReceiverArray{ AutomationRunbookReceiverArgs{...} }
type AutomationRunbookReceiverArrayInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput
	ToAutomationRunbookReceiverArrayOutputWithContext(context.Context) AutomationRunbookReceiverArrayOutput
}

type AutomationRunbookReceiverArray []AutomationRunbookReceiverInput

func (AutomationRunbookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiver)(nil)).Elem()
}

func (i AutomationRunbookReceiverArray) ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput {
	return i.ToAutomationRunbookReceiverArrayOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverArray) ToAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverArrayOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiver)(nil)).Elem()
}

func (o AutomationRunbookReceiverOutput) ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput {
	return o
}

func (o AutomationRunbookReceiverOutput) ToAutomationRunbookReceiverOutputWithContext(ctx context.Context) AutomationRunbookReceiverOutput {
	return o
}

// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
func (o AutomationRunbookReceiverOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o AutomationRunbookReceiverOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// Indicates name of the webhook.
func (o AutomationRunbookReceiverOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name for this runbook.
func (o AutomationRunbookReceiverOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o AutomationRunbookReceiverOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

// The resource id for webhook linked to this runbook.
func (o AutomationRunbookReceiverOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type AutomationRunbookReceiverArrayOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiver)(nil)).Elem()
}

func (o AutomationRunbookReceiverArrayOutput) ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput {
	return o
}

func (o AutomationRunbookReceiverArrayOutput) ToAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverArrayOutput {
	return o
}

func (o AutomationRunbookReceiverArrayOutput) Index(i pulumi.IntInput) AutomationRunbookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRunbookReceiver {
		return vs[0].([]AutomationRunbookReceiver)[vs[1].(int)]
	}).(AutomationRunbookReceiverOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponse struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// AutomationRunbookReceiverResponseInput is an input type that accepts AutomationRunbookReceiverResponseArgs and AutomationRunbookReceiverResponseOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverResponseInput` via:
//
//          AutomationRunbookReceiverResponseArgs{...}
type AutomationRunbookReceiverResponseInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverResponseOutput() AutomationRunbookReceiverResponseOutput
	ToAutomationRunbookReceiverResponseOutputWithContext(context.Context) AutomationRunbookReceiverResponseOutput
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponseArgs struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

func (AutomationRunbookReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (i AutomationRunbookReceiverResponseArgs) ToAutomationRunbookReceiverResponseOutput() AutomationRunbookReceiverResponseOutput {
	return i.ToAutomationRunbookReceiverResponseOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverResponseArgs) ToAutomationRunbookReceiverResponseOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverResponseOutput)
}

// AutomationRunbookReceiverResponseArrayInput is an input type that accepts AutomationRunbookReceiverResponseArray and AutomationRunbookReceiverResponseArrayOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverResponseArrayInput` via:
//
//          AutomationRunbookReceiverResponseArray{ AutomationRunbookReceiverResponseArgs{...} }
type AutomationRunbookReceiverResponseArrayInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverResponseArrayOutput() AutomationRunbookReceiverResponseArrayOutput
	ToAutomationRunbookReceiverResponseArrayOutputWithContext(context.Context) AutomationRunbookReceiverResponseArrayOutput
}

type AutomationRunbookReceiverResponseArray []AutomationRunbookReceiverResponseInput

func (AutomationRunbookReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (i AutomationRunbookReceiverResponseArray) ToAutomationRunbookReceiverResponseArrayOutput() AutomationRunbookReceiverResponseArrayOutput {
	return i.ToAutomationRunbookReceiverResponseArrayOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverResponseArray) ToAutomationRunbookReceiverResponseArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverResponseArrayOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponseOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverResponseOutput) ToAutomationRunbookReceiverResponseOutput() AutomationRunbookReceiverResponseOutput {
	return o
}

func (o AutomationRunbookReceiverResponseOutput) ToAutomationRunbookReceiverResponseOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseOutput {
	return o
}

// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
func (o AutomationRunbookReceiverResponseOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o AutomationRunbookReceiverResponseOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// Indicates name of the webhook.
func (o AutomationRunbookReceiverResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name for this runbook.
func (o AutomationRunbookReceiverResponseOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o AutomationRunbookReceiverResponseOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

// The resource id for webhook linked to this runbook.
func (o AutomationRunbookReceiverResponseOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type AutomationRunbookReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverResponseArrayOutput) ToAutomationRunbookReceiverResponseArrayOutput() AutomationRunbookReceiverResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverResponseArrayOutput) ToAutomationRunbookReceiverResponseArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverResponseArrayOutput) Index(i pulumi.IntInput) AutomationRunbookReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRunbookReceiverResponse {
		return vs[0].([]AutomationRunbookReceiverResponse)[vs[1].(int)]
	}).(AutomationRunbookReceiverResponseOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiver struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureAppPushReceiverInput is an input type that accepts AzureAppPushReceiverArgs and AzureAppPushReceiverOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverInput` via:
//
//          AzureAppPushReceiverArgs{...}
type AzureAppPushReceiverInput interface {
	pulumi.Input

	ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput
	ToAzureAppPushReceiverOutputWithContext(context.Context) AzureAppPushReceiverOutput
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverArgs struct {
	// The email address registered for the Azure mobile app.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureAppPushReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiver)(nil)).Elem()
}

func (i AzureAppPushReceiverArgs) ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput {
	return i.ToAzureAppPushReceiverOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverArgs) ToAzureAppPushReceiverOutputWithContext(ctx context.Context) AzureAppPushReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverOutput)
}

// AzureAppPushReceiverArrayInput is an input type that accepts AzureAppPushReceiverArray and AzureAppPushReceiverArrayOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverArrayInput` via:
//
//          AzureAppPushReceiverArray{ AzureAppPushReceiverArgs{...} }
type AzureAppPushReceiverArrayInput interface {
	pulumi.Input

	ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput
	ToAzureAppPushReceiverArrayOutputWithContext(context.Context) AzureAppPushReceiverArrayOutput
}

type AzureAppPushReceiverArray []AzureAppPushReceiverInput

func (AzureAppPushReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiver)(nil)).Elem()
}

func (i AzureAppPushReceiverArray) ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput {
	return i.ToAzureAppPushReceiverArrayOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverArray) ToAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverArrayOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiver)(nil)).Elem()
}

func (o AzureAppPushReceiverOutput) ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput {
	return o
}

func (o AzureAppPushReceiverOutput) ToAzureAppPushReceiverOutputWithContext(ctx context.Context) AzureAppPushReceiverOutput {
	return o
}

// The email address registered for the Azure mobile app.
func (o AzureAppPushReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
func (o AzureAppPushReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type AzureAppPushReceiverArrayOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiver)(nil)).Elem()
}

func (o AzureAppPushReceiverArrayOutput) ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput {
	return o
}

func (o AzureAppPushReceiverArrayOutput) ToAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverArrayOutput {
	return o
}

func (o AzureAppPushReceiverArrayOutput) Index(i pulumi.IntInput) AzureAppPushReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureAppPushReceiver {
		return vs[0].([]AzureAppPushReceiver)[vs[1].(int)]
	}).(AzureAppPushReceiverOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponse struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureAppPushReceiverResponseInput is an input type that accepts AzureAppPushReceiverResponseArgs and AzureAppPushReceiverResponseOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverResponseInput` via:
//
//          AzureAppPushReceiverResponseArgs{...}
type AzureAppPushReceiverResponseInput interface {
	pulumi.Input

	ToAzureAppPushReceiverResponseOutput() AzureAppPushReceiverResponseOutput
	ToAzureAppPushReceiverResponseOutputWithContext(context.Context) AzureAppPushReceiverResponseOutput
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponseArgs struct {
	// The email address registered for the Azure mobile app.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureAppPushReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiverResponse)(nil)).Elem()
}

func (i AzureAppPushReceiverResponseArgs) ToAzureAppPushReceiverResponseOutput() AzureAppPushReceiverResponseOutput {
	return i.ToAzureAppPushReceiverResponseOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverResponseArgs) ToAzureAppPushReceiverResponseOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverResponseOutput)
}

// AzureAppPushReceiverResponseArrayInput is an input type that accepts AzureAppPushReceiverResponseArray and AzureAppPushReceiverResponseArrayOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverResponseArrayInput` via:
//
//          AzureAppPushReceiverResponseArray{ AzureAppPushReceiverResponseArgs{...} }
type AzureAppPushReceiverResponseArrayInput interface {
	pulumi.Input

	ToAzureAppPushReceiverResponseArrayOutput() AzureAppPushReceiverResponseArrayOutput
	ToAzureAppPushReceiverResponseArrayOutputWithContext(context.Context) AzureAppPushReceiverResponseArrayOutput
}

type AzureAppPushReceiverResponseArray []AzureAppPushReceiverResponseInput

func (AzureAppPushReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiverResponse)(nil)).Elem()
}

func (i AzureAppPushReceiverResponseArray) ToAzureAppPushReceiverResponseArrayOutput() AzureAppPushReceiverResponseArrayOutput {
	return i.ToAzureAppPushReceiverResponseArrayOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverResponseArray) ToAzureAppPushReceiverResponseArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverResponseArrayOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponseOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiverResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverResponseOutput) ToAzureAppPushReceiverResponseOutput() AzureAppPushReceiverResponseOutput {
	return o
}

func (o AzureAppPushReceiverResponseOutput) ToAzureAppPushReceiverResponseOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseOutput {
	return o
}

// The email address registered for the Azure mobile app.
func (o AzureAppPushReceiverResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
func (o AzureAppPushReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AzureAppPushReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiverResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverResponseArrayOutput) ToAzureAppPushReceiverResponseArrayOutput() AzureAppPushReceiverResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverResponseArrayOutput) ToAzureAppPushReceiverResponseArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverResponseArrayOutput) Index(i pulumi.IntInput) AzureAppPushReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureAppPushReceiverResponse {
		return vs[0].([]AzureAppPushReceiverResponse)[vs[1].(int)]
	}).(AzureAppPushReceiverResponseOutput)
}

// An azure function receiver.
type AzureFunctionReceiver struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureFunctionReceiverInput is an input type that accepts AzureFunctionReceiverArgs and AzureFunctionReceiverOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverInput` via:
//
//          AzureFunctionReceiverArgs{...}
type AzureFunctionReceiverInput interface {
	pulumi.Input

	ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput
	ToAzureFunctionReceiverOutputWithContext(context.Context) AzureFunctionReceiverOutput
}

// An azure function receiver.
type AzureFunctionReceiverArgs struct {
	// The azure resource id of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureFunctionReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiver)(nil)).Elem()
}

func (i AzureFunctionReceiverArgs) ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput {
	return i.ToAzureFunctionReceiverOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverArgs) ToAzureFunctionReceiverOutputWithContext(ctx context.Context) AzureFunctionReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverOutput)
}

// AzureFunctionReceiverArrayInput is an input type that accepts AzureFunctionReceiverArray and AzureFunctionReceiverArrayOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverArrayInput` via:
//
//          AzureFunctionReceiverArray{ AzureFunctionReceiverArgs{...} }
type AzureFunctionReceiverArrayInput interface {
	pulumi.Input

	ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput
	ToAzureFunctionReceiverArrayOutputWithContext(context.Context) AzureFunctionReceiverArrayOutput
}

type AzureFunctionReceiverArray []AzureFunctionReceiverInput

func (AzureFunctionReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiver)(nil)).Elem()
}

func (i AzureFunctionReceiverArray) ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput {
	return i.ToAzureFunctionReceiverArrayOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverArray) ToAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverArrayOutput)
}

// An azure function receiver.
type AzureFunctionReceiverOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiver)(nil)).Elem()
}

func (o AzureFunctionReceiverOutput) ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput {
	return o
}

func (o AzureFunctionReceiverOutput) ToAzureFunctionReceiverOutputWithContext(ctx context.Context) AzureFunctionReceiverOutput {
	return o
}

// The azure resource id of the function app.
func (o AzureFunctionReceiverOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o AzureFunctionReceiverOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The http trigger url where http request sent to.
func (o AzureFunctionReceiverOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The name of the azure function receiver. Names must be unique across all receivers within an action group.
func (o AzureFunctionReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type AzureFunctionReceiverArrayOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiver)(nil)).Elem()
}

func (o AzureFunctionReceiverArrayOutput) ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput {
	return o
}

func (o AzureFunctionReceiverArrayOutput) ToAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverArrayOutput {
	return o
}

func (o AzureFunctionReceiverArrayOutput) Index(i pulumi.IntInput) AzureFunctionReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFunctionReceiver {
		return vs[0].([]AzureFunctionReceiver)[vs[1].(int)]
	}).(AzureFunctionReceiverOutput)
}

// An azure function receiver.
type AzureFunctionReceiverResponse struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureFunctionReceiverResponseInput is an input type that accepts AzureFunctionReceiverResponseArgs and AzureFunctionReceiverResponseOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverResponseInput` via:
//
//          AzureFunctionReceiverResponseArgs{...}
type AzureFunctionReceiverResponseInput interface {
	pulumi.Input

	ToAzureFunctionReceiverResponseOutput() AzureFunctionReceiverResponseOutput
	ToAzureFunctionReceiverResponseOutputWithContext(context.Context) AzureFunctionReceiverResponseOutput
}

// An azure function receiver.
type AzureFunctionReceiverResponseArgs struct {
	// The azure resource id of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureFunctionReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiverResponse)(nil)).Elem()
}

func (i AzureFunctionReceiverResponseArgs) ToAzureFunctionReceiverResponseOutput() AzureFunctionReceiverResponseOutput {
	return i.ToAzureFunctionReceiverResponseOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverResponseArgs) ToAzureFunctionReceiverResponseOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverResponseOutput)
}

// AzureFunctionReceiverResponseArrayInput is an input type that accepts AzureFunctionReceiverResponseArray and AzureFunctionReceiverResponseArrayOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverResponseArrayInput` via:
//
//          AzureFunctionReceiverResponseArray{ AzureFunctionReceiverResponseArgs{...} }
type AzureFunctionReceiverResponseArrayInput interface {
	pulumi.Input

	ToAzureFunctionReceiverResponseArrayOutput() AzureFunctionReceiverResponseArrayOutput
	ToAzureFunctionReceiverResponseArrayOutputWithContext(context.Context) AzureFunctionReceiverResponseArrayOutput
}

type AzureFunctionReceiverResponseArray []AzureFunctionReceiverResponseInput

func (AzureFunctionReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiverResponse)(nil)).Elem()
}

func (i AzureFunctionReceiverResponseArray) ToAzureFunctionReceiverResponseArrayOutput() AzureFunctionReceiverResponseArrayOutput {
	return i.ToAzureFunctionReceiverResponseArrayOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverResponseArray) ToAzureFunctionReceiverResponseArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverResponseArrayOutput)
}

// An azure function receiver.
type AzureFunctionReceiverResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiverResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverResponseOutput) ToAzureFunctionReceiverResponseOutput() AzureFunctionReceiverResponseOutput {
	return o
}

func (o AzureFunctionReceiverResponseOutput) ToAzureFunctionReceiverResponseOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseOutput {
	return o
}

// The azure resource id of the function app.
func (o AzureFunctionReceiverResponseOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o AzureFunctionReceiverResponseOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The http trigger url where http request sent to.
func (o AzureFunctionReceiverResponseOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The name of the azure function receiver. Names must be unique across all receivers within an action group.
func (o AzureFunctionReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AzureFunctionReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiverResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverResponseArrayOutput) ToAzureFunctionReceiverResponseArrayOutput() AzureFunctionReceiverResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverResponseArrayOutput) ToAzureFunctionReceiverResponseArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverResponseArrayOutput) Index(i pulumi.IntInput) AzureFunctionReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFunctionReceiverResponse {
		return vs[0].([]AzureFunctionReceiverResponse)[vs[1].(int)]
	}).(AzureFunctionReceiverResponseOutput)
}

// Criterion for dynamic threshold.
type DynamicMetricCriteria struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity string `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimension `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriods `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// DynamicMetricCriteriaInput is an input type that accepts DynamicMetricCriteriaArgs and DynamicMetricCriteriaOutput values.
// You can construct a concrete instance of `DynamicMetricCriteriaInput` via:
//
//          DynamicMetricCriteriaArgs{...}
type DynamicMetricCriteriaInput interface {
	pulumi.Input

	ToDynamicMetricCriteriaOutput() DynamicMetricCriteriaOutput
	ToDynamicMetricCriteriaOutputWithContext(context.Context) DynamicMetricCriteriaOutput
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaArgs struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity pulumi.StringInput `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	CriterionType pulumi.StringInput `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions MetricDimensionArrayInput `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriodsInput `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore pulumi.StringPtrInput `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace pulumi.StringPtrInput `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation pulumi.BoolPtrInput `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation pulumi.StringInput `pulumi:"timeAggregation"`
}

func (DynamicMetricCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMetricCriteria)(nil)).Elem()
}

func (i DynamicMetricCriteriaArgs) ToDynamicMetricCriteriaOutput() DynamicMetricCriteriaOutput {
	return i.ToDynamicMetricCriteriaOutputWithContext(context.Background())
}

func (i DynamicMetricCriteriaArgs) ToDynamicMetricCriteriaOutputWithContext(ctx context.Context) DynamicMetricCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicMetricCriteriaOutput)
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaOutput struct{ *pulumi.OutputState }

func (DynamicMetricCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMetricCriteria)(nil)).Elem()
}

func (o DynamicMetricCriteriaOutput) ToDynamicMetricCriteriaOutput() DynamicMetricCriteriaOutput {
	return o
}

func (o DynamicMetricCriteriaOutput) ToDynamicMetricCriteriaOutputWithContext(ctx context.Context) DynamicMetricCriteriaOutput {
	return o
}

// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
func (o DynamicMetricCriteriaOutput) AlertSensitivity() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.AlertSensitivity }).(pulumi.StringOutput)
}

// Specifies the type of threshold criteria
func (o DynamicMetricCriteriaOutput) CriterionType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.CriterionType }).(pulumi.StringOutput)
}

// List of dimension conditions.
func (o DynamicMetricCriteriaOutput) Dimensions() MetricDimensionArrayOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) []MetricDimension { return v.Dimensions }).(MetricDimensionArrayOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
func (o DynamicMetricCriteriaOutput) FailingPeriods() DynamicThresholdFailingPeriodsOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) DynamicThresholdFailingPeriods { return v.FailingPeriods }).(DynamicThresholdFailingPeriodsOutput)
}

// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
func (o DynamicMetricCriteriaOutput) IgnoreDataBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) *string { return v.IgnoreDataBefore }).(pulumi.StringPtrOutput)
}

// Name of the metric.
func (o DynamicMetricCriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.MetricName }).(pulumi.StringOutput)
}

// Namespace of the metric.
func (o DynamicMetricCriteriaOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// Name of the criteria.
func (o DynamicMetricCriteriaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.Name }).(pulumi.StringOutput)
}

// The operator used to compare the metric value against the threshold.
func (o DynamicMetricCriteriaOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.Operator }).(pulumi.StringOutput)
}

// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
func (o DynamicMetricCriteriaOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// the criteria time aggregation types.
func (o DynamicMetricCriteriaOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaResponse struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity string `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimensionResponse `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriodsResponse `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// DynamicMetricCriteriaResponseInput is an input type that accepts DynamicMetricCriteriaResponseArgs and DynamicMetricCriteriaResponseOutput values.
// You can construct a concrete instance of `DynamicMetricCriteriaResponseInput` via:
//
//          DynamicMetricCriteriaResponseArgs{...}
type DynamicMetricCriteriaResponseInput interface {
	pulumi.Input

	ToDynamicMetricCriteriaResponseOutput() DynamicMetricCriteriaResponseOutput
	ToDynamicMetricCriteriaResponseOutputWithContext(context.Context) DynamicMetricCriteriaResponseOutput
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaResponseArgs struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity pulumi.StringInput `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	CriterionType pulumi.StringInput `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions MetricDimensionResponseArrayInput `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriodsResponseInput `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore pulumi.StringPtrInput `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace pulumi.StringPtrInput `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation pulumi.BoolPtrInput `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation pulumi.StringInput `pulumi:"timeAggregation"`
}

func (DynamicMetricCriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMetricCriteriaResponse)(nil)).Elem()
}

func (i DynamicMetricCriteriaResponseArgs) ToDynamicMetricCriteriaResponseOutput() DynamicMetricCriteriaResponseOutput {
	return i.ToDynamicMetricCriteriaResponseOutputWithContext(context.Background())
}

func (i DynamicMetricCriteriaResponseArgs) ToDynamicMetricCriteriaResponseOutputWithContext(ctx context.Context) DynamicMetricCriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicMetricCriteriaResponseOutput)
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaResponseOutput struct{ *pulumi.OutputState }

func (DynamicMetricCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMetricCriteriaResponse)(nil)).Elem()
}

func (o DynamicMetricCriteriaResponseOutput) ToDynamicMetricCriteriaResponseOutput() DynamicMetricCriteriaResponseOutput {
	return o
}

func (o DynamicMetricCriteriaResponseOutput) ToDynamicMetricCriteriaResponseOutputWithContext(ctx context.Context) DynamicMetricCriteriaResponseOutput {
	return o
}

// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
func (o DynamicMetricCriteriaResponseOutput) AlertSensitivity() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.AlertSensitivity }).(pulumi.StringOutput)
}

// Specifies the type of threshold criteria
func (o DynamicMetricCriteriaResponseOutput) CriterionType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.CriterionType }).(pulumi.StringOutput)
}

// List of dimension conditions.
func (o DynamicMetricCriteriaResponseOutput) Dimensions() MetricDimensionResponseArrayOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) []MetricDimensionResponse { return v.Dimensions }).(MetricDimensionResponseArrayOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
func (o DynamicMetricCriteriaResponseOutput) FailingPeriods() DynamicThresholdFailingPeriodsResponseOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) DynamicThresholdFailingPeriodsResponse { return v.FailingPeriods }).(DynamicThresholdFailingPeriodsResponseOutput)
}

// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
func (o DynamicMetricCriteriaResponseOutput) IgnoreDataBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) *string { return v.IgnoreDataBefore }).(pulumi.StringPtrOutput)
}

// Name of the metric.
func (o DynamicMetricCriteriaResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

// Namespace of the metric.
func (o DynamicMetricCriteriaResponseOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// Name of the criteria.
func (o DynamicMetricCriteriaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator used to compare the metric value against the threshold.
func (o DynamicMetricCriteriaResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
func (o DynamicMetricCriteriaResponseOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// the criteria time aggregation types.
func (o DynamicMetricCriteriaResponseOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriods struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods float64 `pulumi:"numberOfEvaluationPeriods"`
}

// DynamicThresholdFailingPeriodsInput is an input type that accepts DynamicThresholdFailingPeriodsArgs and DynamicThresholdFailingPeriodsOutput values.
// You can construct a concrete instance of `DynamicThresholdFailingPeriodsInput` via:
//
//          DynamicThresholdFailingPeriodsArgs{...}
type DynamicThresholdFailingPeriodsInput interface {
	pulumi.Input

	ToDynamicThresholdFailingPeriodsOutput() DynamicThresholdFailingPeriodsOutput
	ToDynamicThresholdFailingPeriodsOutputWithContext(context.Context) DynamicThresholdFailingPeriodsOutput
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsArgs struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert pulumi.Float64Input `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods pulumi.Float64Input `pulumi:"numberOfEvaluationPeriods"`
}

func (DynamicThresholdFailingPeriodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdFailingPeriods)(nil)).Elem()
}

func (i DynamicThresholdFailingPeriodsArgs) ToDynamicThresholdFailingPeriodsOutput() DynamicThresholdFailingPeriodsOutput {
	return i.ToDynamicThresholdFailingPeriodsOutputWithContext(context.Background())
}

func (i DynamicThresholdFailingPeriodsArgs) ToDynamicThresholdFailingPeriodsOutputWithContext(ctx context.Context) DynamicThresholdFailingPeriodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicThresholdFailingPeriodsOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsOutput struct{ *pulumi.OutputState }

func (DynamicThresholdFailingPeriodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdFailingPeriods)(nil)).Elem()
}

func (o DynamicThresholdFailingPeriodsOutput) ToDynamicThresholdFailingPeriodsOutput() DynamicThresholdFailingPeriodsOutput {
	return o
}

func (o DynamicThresholdFailingPeriodsOutput) ToDynamicThresholdFailingPeriodsOutputWithContext(ctx context.Context) DynamicThresholdFailingPeriodsOutput {
	return o
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
func (o DynamicThresholdFailingPeriodsOutput) MinFailingPeriodsToAlert() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicThresholdFailingPeriods) float64 { return v.MinFailingPeriodsToAlert }).(pulumi.Float64Output)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
func (o DynamicThresholdFailingPeriodsOutput) NumberOfEvaluationPeriods() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicThresholdFailingPeriods) float64 { return v.NumberOfEvaluationPeriods }).(pulumi.Float64Output)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsResponse struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods float64 `pulumi:"numberOfEvaluationPeriods"`
}

// DynamicThresholdFailingPeriodsResponseInput is an input type that accepts DynamicThresholdFailingPeriodsResponseArgs and DynamicThresholdFailingPeriodsResponseOutput values.
// You can construct a concrete instance of `DynamicThresholdFailingPeriodsResponseInput` via:
//
//          DynamicThresholdFailingPeriodsResponseArgs{...}
type DynamicThresholdFailingPeriodsResponseInput interface {
	pulumi.Input

	ToDynamicThresholdFailingPeriodsResponseOutput() DynamicThresholdFailingPeriodsResponseOutput
	ToDynamicThresholdFailingPeriodsResponseOutputWithContext(context.Context) DynamicThresholdFailingPeriodsResponseOutput
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsResponseArgs struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert pulumi.Float64Input `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods pulumi.Float64Input `pulumi:"numberOfEvaluationPeriods"`
}

func (DynamicThresholdFailingPeriodsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdFailingPeriodsResponse)(nil)).Elem()
}

func (i DynamicThresholdFailingPeriodsResponseArgs) ToDynamicThresholdFailingPeriodsResponseOutput() DynamicThresholdFailingPeriodsResponseOutput {
	return i.ToDynamicThresholdFailingPeriodsResponseOutputWithContext(context.Background())
}

func (i DynamicThresholdFailingPeriodsResponseArgs) ToDynamicThresholdFailingPeriodsResponseOutputWithContext(ctx context.Context) DynamicThresholdFailingPeriodsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicThresholdFailingPeriodsResponseOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsResponseOutput struct{ *pulumi.OutputState }

func (DynamicThresholdFailingPeriodsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdFailingPeriodsResponse)(nil)).Elem()
}

func (o DynamicThresholdFailingPeriodsResponseOutput) ToDynamicThresholdFailingPeriodsResponseOutput() DynamicThresholdFailingPeriodsResponseOutput {
	return o
}

func (o DynamicThresholdFailingPeriodsResponseOutput) ToDynamicThresholdFailingPeriodsResponseOutputWithContext(ctx context.Context) DynamicThresholdFailingPeriodsResponseOutput {
	return o
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
func (o DynamicThresholdFailingPeriodsResponseOutput) MinFailingPeriodsToAlert() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicThresholdFailingPeriodsResponse) float64 { return v.MinFailingPeriodsToAlert }).(pulumi.Float64Output)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
func (o DynamicThresholdFailingPeriodsResponseOutput) NumberOfEvaluationPeriods() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicThresholdFailingPeriodsResponse) float64 { return v.NumberOfEvaluationPeriods }).(pulumi.Float64Output)
}

// An email receiver.
type EmailReceiver struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// EmailReceiverInput is an input type that accepts EmailReceiverArgs and EmailReceiverOutput values.
// You can construct a concrete instance of `EmailReceiverInput` via:
//
//          EmailReceiverArgs{...}
type EmailReceiverInput interface {
	pulumi.Input

	ToEmailReceiverOutput() EmailReceiverOutput
	ToEmailReceiverOutputWithContext(context.Context) EmailReceiverOutput
}

// An email receiver.
type EmailReceiverArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (EmailReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiver)(nil)).Elem()
}

func (i EmailReceiverArgs) ToEmailReceiverOutput() EmailReceiverOutput {
	return i.ToEmailReceiverOutputWithContext(context.Background())
}

func (i EmailReceiverArgs) ToEmailReceiverOutputWithContext(ctx context.Context) EmailReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverOutput)
}

// EmailReceiverArrayInput is an input type that accepts EmailReceiverArray and EmailReceiverArrayOutput values.
// You can construct a concrete instance of `EmailReceiverArrayInput` via:
//
//          EmailReceiverArray{ EmailReceiverArgs{...} }
type EmailReceiverArrayInput interface {
	pulumi.Input

	ToEmailReceiverArrayOutput() EmailReceiverArrayOutput
	ToEmailReceiverArrayOutputWithContext(context.Context) EmailReceiverArrayOutput
}

type EmailReceiverArray []EmailReceiverInput

func (EmailReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiver)(nil)).Elem()
}

func (i EmailReceiverArray) ToEmailReceiverArrayOutput() EmailReceiverArrayOutput {
	return i.ToEmailReceiverArrayOutputWithContext(context.Background())
}

func (i EmailReceiverArray) ToEmailReceiverArrayOutputWithContext(ctx context.Context) EmailReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverArrayOutput)
}

// An email receiver.
type EmailReceiverOutput struct{ *pulumi.OutputState }

func (EmailReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiver)(nil)).Elem()
}

func (o EmailReceiverOutput) ToEmailReceiverOutput() EmailReceiverOutput {
	return o
}

func (o EmailReceiverOutput) ToEmailReceiverOutputWithContext(ctx context.Context) EmailReceiverOutput {
	return o
}

// The email address of this receiver.
func (o EmailReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique across all receivers within an action group.
func (o EmailReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type EmailReceiverArrayOutput struct{ *pulumi.OutputState }

func (EmailReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiver)(nil)).Elem()
}

func (o EmailReceiverArrayOutput) ToEmailReceiverArrayOutput() EmailReceiverArrayOutput {
	return o
}

func (o EmailReceiverArrayOutput) ToEmailReceiverArrayOutputWithContext(ctx context.Context) EmailReceiverArrayOutput {
	return o
}

func (o EmailReceiverArrayOutput) Index(i pulumi.IntInput) EmailReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailReceiver {
		return vs[0].([]EmailReceiver)[vs[1].(int)]
	}).(EmailReceiverOutput)
}

// An email receiver.
type EmailReceiverResponse struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The receiver status of the e-mail.
	Status string `pulumi:"status"`
}

// EmailReceiverResponseInput is an input type that accepts EmailReceiverResponseArgs and EmailReceiverResponseOutput values.
// You can construct a concrete instance of `EmailReceiverResponseInput` via:
//
//          EmailReceiverResponseArgs{...}
type EmailReceiverResponseInput interface {
	pulumi.Input

	ToEmailReceiverResponseOutput() EmailReceiverResponseOutput
	ToEmailReceiverResponseOutputWithContext(context.Context) EmailReceiverResponseOutput
}

// An email receiver.
type EmailReceiverResponseArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The receiver status of the e-mail.
	Status pulumi.StringInput `pulumi:"status"`
}

func (EmailReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiverResponse)(nil)).Elem()
}

func (i EmailReceiverResponseArgs) ToEmailReceiverResponseOutput() EmailReceiverResponseOutput {
	return i.ToEmailReceiverResponseOutputWithContext(context.Background())
}

func (i EmailReceiverResponseArgs) ToEmailReceiverResponseOutputWithContext(ctx context.Context) EmailReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverResponseOutput)
}

// EmailReceiverResponseArrayInput is an input type that accepts EmailReceiverResponseArray and EmailReceiverResponseArrayOutput values.
// You can construct a concrete instance of `EmailReceiverResponseArrayInput` via:
//
//          EmailReceiverResponseArray{ EmailReceiverResponseArgs{...} }
type EmailReceiverResponseArrayInput interface {
	pulumi.Input

	ToEmailReceiverResponseArrayOutput() EmailReceiverResponseArrayOutput
	ToEmailReceiverResponseArrayOutputWithContext(context.Context) EmailReceiverResponseArrayOutput
}

type EmailReceiverResponseArray []EmailReceiverResponseInput

func (EmailReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiverResponse)(nil)).Elem()
}

func (i EmailReceiverResponseArray) ToEmailReceiverResponseArrayOutput() EmailReceiverResponseArrayOutput {
	return i.ToEmailReceiverResponseArrayOutputWithContext(context.Background())
}

func (i EmailReceiverResponseArray) ToEmailReceiverResponseArrayOutputWithContext(ctx context.Context) EmailReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverResponseArrayOutput)
}

// An email receiver.
type EmailReceiverResponseOutput struct{ *pulumi.OutputState }

func (EmailReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiverResponse)(nil)).Elem()
}

func (o EmailReceiverResponseOutput) ToEmailReceiverResponseOutput() EmailReceiverResponseOutput {
	return o
}

func (o EmailReceiverResponseOutput) ToEmailReceiverResponseOutputWithContext(ctx context.Context) EmailReceiverResponseOutput {
	return o
}

// The email address of this receiver.
func (o EmailReceiverResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique across all receivers within an action group.
func (o EmailReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The receiver status of the e-mail.
func (o EmailReceiverResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.Status }).(pulumi.StringOutput)
}

type EmailReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (EmailReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiverResponse)(nil)).Elem()
}

func (o EmailReceiverResponseArrayOutput) ToEmailReceiverResponseArrayOutput() EmailReceiverResponseArrayOutput {
	return o
}

func (o EmailReceiverResponseArrayOutput) ToEmailReceiverResponseArrayOutputWithContext(ctx context.Context) EmailReceiverResponseArrayOutput {
	return o
}

func (o EmailReceiverResponseArrayOutput) Index(i pulumi.IntInput) EmailReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailReceiverResponse {
		return vs[0].([]EmailReceiverResponse)[vs[1].(int)]
	}).(EmailReceiverResponseOutput)
}

// An Itsm receiver.
type ItsmReceiver struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// ItsmReceiverInput is an input type that accepts ItsmReceiverArgs and ItsmReceiverOutput values.
// You can construct a concrete instance of `ItsmReceiverInput` via:
//
//          ItsmReceiverArgs{...}
type ItsmReceiverInput interface {
	pulumi.Input

	ToItsmReceiverOutput() ItsmReceiverOutput
	ToItsmReceiverOutputWithContext(context.Context) ItsmReceiverOutput
}

// An Itsm receiver.
type ItsmReceiverArgs struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region pulumi.StringInput `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (ItsmReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiver)(nil)).Elem()
}

func (i ItsmReceiverArgs) ToItsmReceiverOutput() ItsmReceiverOutput {
	return i.ToItsmReceiverOutputWithContext(context.Background())
}

func (i ItsmReceiverArgs) ToItsmReceiverOutputWithContext(ctx context.Context) ItsmReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverOutput)
}

// ItsmReceiverArrayInput is an input type that accepts ItsmReceiverArray and ItsmReceiverArrayOutput values.
// You can construct a concrete instance of `ItsmReceiverArrayInput` via:
//
//          ItsmReceiverArray{ ItsmReceiverArgs{...} }
type ItsmReceiverArrayInput interface {
	pulumi.Input

	ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput
	ToItsmReceiverArrayOutputWithContext(context.Context) ItsmReceiverArrayOutput
}

type ItsmReceiverArray []ItsmReceiverInput

func (ItsmReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiver)(nil)).Elem()
}

func (i ItsmReceiverArray) ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput {
	return i.ToItsmReceiverArrayOutputWithContext(context.Background())
}

func (i ItsmReceiverArray) ToItsmReceiverArrayOutputWithContext(ctx context.Context) ItsmReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverArrayOutput)
}

// An Itsm receiver.
type ItsmReceiverOutput struct{ *pulumi.OutputState }

func (ItsmReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiver)(nil)).Elem()
}

func (o ItsmReceiverOutput) ToItsmReceiverOutput() ItsmReceiverOutput {
	return o
}

func (o ItsmReceiverOutput) ToItsmReceiverOutputWithContext(ctx context.Context) ItsmReceiverOutput {
	return o
}

// Unique identification of ITSM connection among multiple defined in above workspace.
func (o ItsmReceiverOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
func (o ItsmReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
func (o ItsmReceiverOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.Region }).(pulumi.StringOutput)
}

// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ItsmReceiverOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// OMS LA instance identifier.
func (o ItsmReceiverOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ItsmReceiverArrayOutput struct{ *pulumi.OutputState }

func (ItsmReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiver)(nil)).Elem()
}

func (o ItsmReceiverArrayOutput) ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput {
	return o
}

func (o ItsmReceiverArrayOutput) ToItsmReceiverArrayOutputWithContext(ctx context.Context) ItsmReceiverArrayOutput {
	return o
}

func (o ItsmReceiverArrayOutput) Index(i pulumi.IntInput) ItsmReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ItsmReceiver {
		return vs[0].([]ItsmReceiver)[vs[1].(int)]
	}).(ItsmReceiverOutput)
}

// An Itsm receiver.
type ItsmReceiverResponse struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// ItsmReceiverResponseInput is an input type that accepts ItsmReceiverResponseArgs and ItsmReceiverResponseOutput values.
// You can construct a concrete instance of `ItsmReceiverResponseInput` via:
//
//          ItsmReceiverResponseArgs{...}
type ItsmReceiverResponseInput interface {
	pulumi.Input

	ToItsmReceiverResponseOutput() ItsmReceiverResponseOutput
	ToItsmReceiverResponseOutputWithContext(context.Context) ItsmReceiverResponseOutput
}

// An Itsm receiver.
type ItsmReceiverResponseArgs struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region pulumi.StringInput `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (ItsmReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiverResponse)(nil)).Elem()
}

func (i ItsmReceiverResponseArgs) ToItsmReceiverResponseOutput() ItsmReceiverResponseOutput {
	return i.ToItsmReceiverResponseOutputWithContext(context.Background())
}

func (i ItsmReceiverResponseArgs) ToItsmReceiverResponseOutputWithContext(ctx context.Context) ItsmReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverResponseOutput)
}

// ItsmReceiverResponseArrayInput is an input type that accepts ItsmReceiverResponseArray and ItsmReceiverResponseArrayOutput values.
// You can construct a concrete instance of `ItsmReceiverResponseArrayInput` via:
//
//          ItsmReceiverResponseArray{ ItsmReceiverResponseArgs{...} }
type ItsmReceiverResponseArrayInput interface {
	pulumi.Input

	ToItsmReceiverResponseArrayOutput() ItsmReceiverResponseArrayOutput
	ToItsmReceiverResponseArrayOutputWithContext(context.Context) ItsmReceiverResponseArrayOutput
}

type ItsmReceiverResponseArray []ItsmReceiverResponseInput

func (ItsmReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiverResponse)(nil)).Elem()
}

func (i ItsmReceiverResponseArray) ToItsmReceiverResponseArrayOutput() ItsmReceiverResponseArrayOutput {
	return i.ToItsmReceiverResponseArrayOutputWithContext(context.Background())
}

func (i ItsmReceiverResponseArray) ToItsmReceiverResponseArrayOutputWithContext(ctx context.Context) ItsmReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverResponseArrayOutput)
}

// An Itsm receiver.
type ItsmReceiverResponseOutput struct{ *pulumi.OutputState }

func (ItsmReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiverResponse)(nil)).Elem()
}

func (o ItsmReceiverResponseOutput) ToItsmReceiverResponseOutput() ItsmReceiverResponseOutput {
	return o
}

func (o ItsmReceiverResponseOutput) ToItsmReceiverResponseOutputWithContext(ctx context.Context) ItsmReceiverResponseOutput {
	return o
}

// Unique identification of ITSM connection among multiple defined in above workspace.
func (o ItsmReceiverResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
func (o ItsmReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
func (o ItsmReceiverResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.Region }).(pulumi.StringOutput)
}

// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ItsmReceiverResponseOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// OMS LA instance identifier.
func (o ItsmReceiverResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ItsmReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ItsmReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiverResponse)(nil)).Elem()
}

func (o ItsmReceiverResponseArrayOutput) ToItsmReceiverResponseArrayOutput() ItsmReceiverResponseArrayOutput {
	return o
}

func (o ItsmReceiverResponseArrayOutput) ToItsmReceiverResponseArrayOutputWithContext(ctx context.Context) ItsmReceiverResponseArrayOutput {
	return o
}

func (o ItsmReceiverResponseArrayOutput) Index(i pulumi.IntInput) ItsmReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ItsmReceiverResponse {
		return vs[0].([]ItsmReceiverResponse)[vs[1].(int)]
	}).(ItsmReceiverResponseOutput)
}

// A logic app receiver.
type LogicAppReceiver struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
}

// LogicAppReceiverInput is an input type that accepts LogicAppReceiverArgs and LogicAppReceiverOutput values.
// You can construct a concrete instance of `LogicAppReceiverInput` via:
//
//          LogicAppReceiverArgs{...}
type LogicAppReceiverInput interface {
	pulumi.Input

	ToLogicAppReceiverOutput() LogicAppReceiverOutput
	ToLogicAppReceiverOutputWithContext(context.Context) LogicAppReceiverOutput
}

// A logic app receiver.
type LogicAppReceiverArgs struct {
	// The callback url where http request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LogicAppReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiver)(nil)).Elem()
}

func (i LogicAppReceiverArgs) ToLogicAppReceiverOutput() LogicAppReceiverOutput {
	return i.ToLogicAppReceiverOutputWithContext(context.Background())
}

func (i LogicAppReceiverArgs) ToLogicAppReceiverOutputWithContext(ctx context.Context) LogicAppReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverOutput)
}

// LogicAppReceiverArrayInput is an input type that accepts LogicAppReceiverArray and LogicAppReceiverArrayOutput values.
// You can construct a concrete instance of `LogicAppReceiverArrayInput` via:
//
//          LogicAppReceiverArray{ LogicAppReceiverArgs{...} }
type LogicAppReceiverArrayInput interface {
	pulumi.Input

	ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput
	ToLogicAppReceiverArrayOutputWithContext(context.Context) LogicAppReceiverArrayOutput
}

type LogicAppReceiverArray []LogicAppReceiverInput

func (LogicAppReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiver)(nil)).Elem()
}

func (i LogicAppReceiverArray) ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput {
	return i.ToLogicAppReceiverArrayOutputWithContext(context.Background())
}

func (i LogicAppReceiverArray) ToLogicAppReceiverArrayOutputWithContext(ctx context.Context) LogicAppReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverArrayOutput)
}

// A logic app receiver.
type LogicAppReceiverOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiver)(nil)).Elem()
}

func (o LogicAppReceiverOutput) ToLogicAppReceiverOutput() LogicAppReceiverOutput {
	return o
}

func (o LogicAppReceiverOutput) ToLogicAppReceiverOutputWithContext(ctx context.Context) LogicAppReceiverOutput {
	return o
}

// The callback url where http request sent to.
func (o LogicAppReceiverOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The name of the logic app receiver. Names must be unique across all receivers within an action group.
func (o LogicAppReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The azure resource id of the logic app receiver.
func (o LogicAppReceiverOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.ResourceId }).(pulumi.StringOutput)
}

type LogicAppReceiverArrayOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiver)(nil)).Elem()
}

func (o LogicAppReceiverArrayOutput) ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput {
	return o
}

func (o LogicAppReceiverArrayOutput) ToLogicAppReceiverArrayOutputWithContext(ctx context.Context) LogicAppReceiverArrayOutput {
	return o
}

func (o LogicAppReceiverArrayOutput) Index(i pulumi.IntInput) LogicAppReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicAppReceiver {
		return vs[0].([]LogicAppReceiver)[vs[1].(int)]
	}).(LogicAppReceiverOutput)
}

// A logic app receiver.
type LogicAppReceiverResponse struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
}

// LogicAppReceiverResponseInput is an input type that accepts LogicAppReceiverResponseArgs and LogicAppReceiverResponseOutput values.
// You can construct a concrete instance of `LogicAppReceiverResponseInput` via:
//
//          LogicAppReceiverResponseArgs{...}
type LogicAppReceiverResponseInput interface {
	pulumi.Input

	ToLogicAppReceiverResponseOutput() LogicAppReceiverResponseOutput
	ToLogicAppReceiverResponseOutputWithContext(context.Context) LogicAppReceiverResponseOutput
}

// A logic app receiver.
type LogicAppReceiverResponseArgs struct {
	// The callback url where http request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LogicAppReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiverResponse)(nil)).Elem()
}

func (i LogicAppReceiverResponseArgs) ToLogicAppReceiverResponseOutput() LogicAppReceiverResponseOutput {
	return i.ToLogicAppReceiverResponseOutputWithContext(context.Background())
}

func (i LogicAppReceiverResponseArgs) ToLogicAppReceiverResponseOutputWithContext(ctx context.Context) LogicAppReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverResponseOutput)
}

// LogicAppReceiverResponseArrayInput is an input type that accepts LogicAppReceiverResponseArray and LogicAppReceiverResponseArrayOutput values.
// You can construct a concrete instance of `LogicAppReceiverResponseArrayInput` via:
//
//          LogicAppReceiverResponseArray{ LogicAppReceiverResponseArgs{...} }
type LogicAppReceiverResponseArrayInput interface {
	pulumi.Input

	ToLogicAppReceiverResponseArrayOutput() LogicAppReceiverResponseArrayOutput
	ToLogicAppReceiverResponseArrayOutputWithContext(context.Context) LogicAppReceiverResponseArrayOutput
}

type LogicAppReceiverResponseArray []LogicAppReceiverResponseInput

func (LogicAppReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiverResponse)(nil)).Elem()
}

func (i LogicAppReceiverResponseArray) ToLogicAppReceiverResponseArrayOutput() LogicAppReceiverResponseArrayOutput {
	return i.ToLogicAppReceiverResponseArrayOutputWithContext(context.Background())
}

func (i LogicAppReceiverResponseArray) ToLogicAppReceiverResponseArrayOutputWithContext(ctx context.Context) LogicAppReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverResponseArrayOutput)
}

// A logic app receiver.
type LogicAppReceiverResponseOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiverResponse)(nil)).Elem()
}

func (o LogicAppReceiverResponseOutput) ToLogicAppReceiverResponseOutput() LogicAppReceiverResponseOutput {
	return o
}

func (o LogicAppReceiverResponseOutput) ToLogicAppReceiverResponseOutputWithContext(ctx context.Context) LogicAppReceiverResponseOutput {
	return o
}

// The callback url where http request sent to.
func (o LogicAppReceiverResponseOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The name of the logic app receiver. Names must be unique across all receivers within an action group.
func (o LogicAppReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The azure resource id of the logic app receiver.
func (o LogicAppReceiverResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

type LogicAppReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiverResponse)(nil)).Elem()
}

func (o LogicAppReceiverResponseArrayOutput) ToLogicAppReceiverResponseArrayOutput() LogicAppReceiverResponseArrayOutput {
	return o
}

func (o LogicAppReceiverResponseArrayOutput) ToLogicAppReceiverResponseArrayOutputWithContext(ctx context.Context) LogicAppReceiverResponseArrayOutput {
	return o
}

func (o LogicAppReceiverResponseArrayOutput) Index(i pulumi.IntInput) LogicAppReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicAppReceiverResponse {
		return vs[0].([]LogicAppReceiverResponse)[vs[1].(int)]
	}).(LogicAppReceiverResponseOutput)
}

// An alert action.
type MetricAlertAction struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// MetricAlertActionInput is an input type that accepts MetricAlertActionArgs and MetricAlertActionOutput values.
// You can construct a concrete instance of `MetricAlertActionInput` via:
//
//          MetricAlertActionArgs{...}
type MetricAlertActionInput interface {
	pulumi.Input

	ToMetricAlertActionOutput() MetricAlertActionOutput
	ToMetricAlertActionOutputWithContext(context.Context) MetricAlertActionOutput
}

// An alert action.
type MetricAlertActionArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (MetricAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return i.ToMetricAlertActionOutputWithContext(context.Background())
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionOutput)
}

// MetricAlertActionArrayInput is an input type that accepts MetricAlertActionArray and MetricAlertActionArrayOutput values.
// You can construct a concrete instance of `MetricAlertActionArrayInput` via:
//
//          MetricAlertActionArray{ MetricAlertActionArgs{...} }
type MetricAlertActionArrayInput interface {
	pulumi.Input

	ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput
	ToMetricAlertActionArrayOutputWithContext(context.Context) MetricAlertActionArrayOutput
}

type MetricAlertActionArray []MetricAlertActionInput

func (MetricAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return i.ToMetricAlertActionArrayOutputWithContext(context.Background())
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionArrayOutput)
}

// An alert action.
type MetricAlertActionOutput struct{ *pulumi.OutputState }

func (MetricAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return o
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return o
}

// the id of the action group to use.
func (o MetricAlertActionOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertAction) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// The properties of a webhook object.
func (o MetricAlertActionOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertAction) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) Index(i pulumi.IntInput) MetricAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertAction {
		return vs[0].([]MetricAlertAction)[vs[1].(int)]
	}).(MetricAlertActionOutput)
}

// An alert action.
type MetricAlertActionResponse struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// MetricAlertActionResponseInput is an input type that accepts MetricAlertActionResponseArgs and MetricAlertActionResponseOutput values.
// You can construct a concrete instance of `MetricAlertActionResponseInput` via:
//
//          MetricAlertActionResponseArgs{...}
type MetricAlertActionResponseInput interface {
	pulumi.Input

	ToMetricAlertActionResponseOutput() MetricAlertActionResponseOutput
	ToMetricAlertActionResponseOutputWithContext(context.Context) MetricAlertActionResponseOutput
}

// An alert action.
type MetricAlertActionResponseArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (MetricAlertActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertActionResponse)(nil)).Elem()
}

func (i MetricAlertActionResponseArgs) ToMetricAlertActionResponseOutput() MetricAlertActionResponseOutput {
	return i.ToMetricAlertActionResponseOutputWithContext(context.Background())
}

func (i MetricAlertActionResponseArgs) ToMetricAlertActionResponseOutputWithContext(ctx context.Context) MetricAlertActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionResponseOutput)
}

// MetricAlertActionResponseArrayInput is an input type that accepts MetricAlertActionResponseArray and MetricAlertActionResponseArrayOutput values.
// You can construct a concrete instance of `MetricAlertActionResponseArrayInput` via:
//
//          MetricAlertActionResponseArray{ MetricAlertActionResponseArgs{...} }
type MetricAlertActionResponseArrayInput interface {
	pulumi.Input

	ToMetricAlertActionResponseArrayOutput() MetricAlertActionResponseArrayOutput
	ToMetricAlertActionResponseArrayOutputWithContext(context.Context) MetricAlertActionResponseArrayOutput
}

type MetricAlertActionResponseArray []MetricAlertActionResponseInput

func (MetricAlertActionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertActionResponse)(nil)).Elem()
}

func (i MetricAlertActionResponseArray) ToMetricAlertActionResponseArrayOutput() MetricAlertActionResponseArrayOutput {
	return i.ToMetricAlertActionResponseArrayOutputWithContext(context.Background())
}

func (i MetricAlertActionResponseArray) ToMetricAlertActionResponseArrayOutputWithContext(ctx context.Context) MetricAlertActionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionResponseArrayOutput)
}

// An alert action.
type MetricAlertActionResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertActionResponse)(nil)).Elem()
}

func (o MetricAlertActionResponseOutput) ToMetricAlertActionResponseOutput() MetricAlertActionResponseOutput {
	return o
}

func (o MetricAlertActionResponseOutput) ToMetricAlertActionResponseOutputWithContext(ctx context.Context) MetricAlertActionResponseOutput {
	return o
}

// the id of the action group to use.
func (o MetricAlertActionResponseOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertActionResponse) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// The properties of a webhook object.
func (o MetricAlertActionResponseOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertActionResponse) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertActionResponse)(nil)).Elem()
}

func (o MetricAlertActionResponseArrayOutput) ToMetricAlertActionResponseArrayOutput() MetricAlertActionResponseArrayOutput {
	return o
}

func (o MetricAlertActionResponseArrayOutput) ToMetricAlertActionResponseArrayOutputWithContext(ctx context.Context) MetricAlertActionResponseArrayOutput {
	return o
}

func (o MetricAlertActionResponseArrayOutput) Index(i pulumi.IntInput) MetricAlertActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertActionResponse {
		return vs[0].([]MetricAlertActionResponse)[vs[1].(int)]
	}).(MetricAlertActionResponseOutput)
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteria struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf []interface{} `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	OdataType string `pulumi:"odataType"`
}

// MetricAlertMultipleResourceMultipleMetricCriteriaInput is an input type that accepts MetricAlertMultipleResourceMultipleMetricCriteriaArgs and MetricAlertMultipleResourceMultipleMetricCriteriaOutput values.
// You can construct a concrete instance of `MetricAlertMultipleResourceMultipleMetricCriteriaInput` via:
//
//          MetricAlertMultipleResourceMultipleMetricCriteriaArgs{...}
type MetricAlertMultipleResourceMultipleMetricCriteriaInput interface {
	pulumi.Input

	ToMetricAlertMultipleResourceMultipleMetricCriteriaOutput() MetricAlertMultipleResourceMultipleMetricCriteriaOutput
	ToMetricAlertMultipleResourceMultipleMetricCriteriaOutputWithContext(context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaOutput
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaArgs struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf pulumi.ArrayInput `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MetricAlertMultipleResourceMultipleMetricCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertMultipleResourceMultipleMetricCriteria)(nil)).Elem()
}

func (i MetricAlertMultipleResourceMultipleMetricCriteriaArgs) ToMetricAlertMultipleResourceMultipleMetricCriteriaOutput() MetricAlertMultipleResourceMultipleMetricCriteriaOutput {
	return i.ToMetricAlertMultipleResourceMultipleMetricCriteriaOutputWithContext(context.Background())
}

func (i MetricAlertMultipleResourceMultipleMetricCriteriaArgs) ToMetricAlertMultipleResourceMultipleMetricCriteriaOutputWithContext(ctx context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertMultipleResourceMultipleMetricCriteriaOutput)
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaOutput struct{ *pulumi.OutputState }

func (MetricAlertMultipleResourceMultipleMetricCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertMultipleResourceMultipleMetricCriteria)(nil)).Elem()
}

func (o MetricAlertMultipleResourceMultipleMetricCriteriaOutput) ToMetricAlertMultipleResourceMultipleMetricCriteriaOutput() MetricAlertMultipleResourceMultipleMetricCriteriaOutput {
	return o
}

func (o MetricAlertMultipleResourceMultipleMetricCriteriaOutput) ToMetricAlertMultipleResourceMultipleMetricCriteriaOutputWithContext(ctx context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaOutput {
	return o
}

// the list of multiple metric criteria for this 'all of' operation.
func (o MetricAlertMultipleResourceMultipleMetricCriteriaOutput) AllOf() pulumi.ArrayOutput {
	return o.ApplyT(func(v MetricAlertMultipleResourceMultipleMetricCriteria) []interface{} { return v.AllOf }).(pulumi.ArrayOutput)
}

// specifies the type of the alert criteria.
func (o MetricAlertMultipleResourceMultipleMetricCriteriaOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertMultipleResourceMultipleMetricCriteria) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaResponse struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf []interface{} `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	OdataType string `pulumi:"odataType"`
}

// MetricAlertMultipleResourceMultipleMetricCriteriaResponseInput is an input type that accepts MetricAlertMultipleResourceMultipleMetricCriteriaResponseArgs and MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput values.
// You can construct a concrete instance of `MetricAlertMultipleResourceMultipleMetricCriteriaResponseInput` via:
//
//          MetricAlertMultipleResourceMultipleMetricCriteriaResponseArgs{...}
type MetricAlertMultipleResourceMultipleMetricCriteriaResponseInput interface {
	pulumi.Input

	ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput() MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput
	ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutputWithContext(context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaResponseArgs struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf pulumi.ArrayInput `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MetricAlertMultipleResourceMultipleMetricCriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertMultipleResourceMultipleMetricCriteriaResponse)(nil)).Elem()
}

func (i MetricAlertMultipleResourceMultipleMetricCriteriaResponseArgs) ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput() MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput {
	return i.ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutputWithContext(context.Background())
}

func (i MetricAlertMultipleResourceMultipleMetricCriteriaResponseArgs) ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput)
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertMultipleResourceMultipleMetricCriteriaResponse)(nil)).Elem()
}

func (o MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput() MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput {
	return o
}

func (o MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput {
	return o
}

// the list of multiple metric criteria for this 'all of' operation.
func (o MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) AllOf() pulumi.ArrayOutput {
	return o.ApplyT(func(v MetricAlertMultipleResourceMultipleMetricCriteriaResponse) []interface{} { return v.AllOf }).(pulumi.ArrayOutput)
}

// specifies the type of the alert criteria.
func (o MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertMultipleResourceMultipleMetricCriteriaResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteria struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []MetricCriteria `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	OdataType string `pulumi:"odataType"`
}

// MetricAlertSingleResourceMultipleMetricCriteriaInput is an input type that accepts MetricAlertSingleResourceMultipleMetricCriteriaArgs and MetricAlertSingleResourceMultipleMetricCriteriaOutput values.
// You can construct a concrete instance of `MetricAlertSingleResourceMultipleMetricCriteriaInput` via:
//
//          MetricAlertSingleResourceMultipleMetricCriteriaArgs{...}
type MetricAlertSingleResourceMultipleMetricCriteriaInput interface {
	pulumi.Input

	ToMetricAlertSingleResourceMultipleMetricCriteriaOutput() MetricAlertSingleResourceMultipleMetricCriteriaOutput
	ToMetricAlertSingleResourceMultipleMetricCriteriaOutputWithContext(context.Context) MetricAlertSingleResourceMultipleMetricCriteriaOutput
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaArgs struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf MetricCriteriaArrayInput `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MetricAlertSingleResourceMultipleMetricCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertSingleResourceMultipleMetricCriteria)(nil)).Elem()
}

func (i MetricAlertSingleResourceMultipleMetricCriteriaArgs) ToMetricAlertSingleResourceMultipleMetricCriteriaOutput() MetricAlertSingleResourceMultipleMetricCriteriaOutput {
	return i.ToMetricAlertSingleResourceMultipleMetricCriteriaOutputWithContext(context.Background())
}

func (i MetricAlertSingleResourceMultipleMetricCriteriaArgs) ToMetricAlertSingleResourceMultipleMetricCriteriaOutputWithContext(ctx context.Context) MetricAlertSingleResourceMultipleMetricCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertSingleResourceMultipleMetricCriteriaOutput)
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaOutput struct{ *pulumi.OutputState }

func (MetricAlertSingleResourceMultipleMetricCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertSingleResourceMultipleMetricCriteria)(nil)).Elem()
}

func (o MetricAlertSingleResourceMultipleMetricCriteriaOutput) ToMetricAlertSingleResourceMultipleMetricCriteriaOutput() MetricAlertSingleResourceMultipleMetricCriteriaOutput {
	return o
}

func (o MetricAlertSingleResourceMultipleMetricCriteriaOutput) ToMetricAlertSingleResourceMultipleMetricCriteriaOutputWithContext(ctx context.Context) MetricAlertSingleResourceMultipleMetricCriteriaOutput {
	return o
}

// The list of metric criteria for this 'all of' operation.
func (o MetricAlertSingleResourceMultipleMetricCriteriaOutput) AllOf() MetricCriteriaArrayOutput {
	return o.ApplyT(func(v MetricAlertSingleResourceMultipleMetricCriteria) []MetricCriteria { return v.AllOf }).(MetricCriteriaArrayOutput)
}

// specifies the type of the alert criteria.
func (o MetricAlertSingleResourceMultipleMetricCriteriaOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertSingleResourceMultipleMetricCriteria) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaResponse struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []MetricCriteriaResponse `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	OdataType string `pulumi:"odataType"`
}

// MetricAlertSingleResourceMultipleMetricCriteriaResponseInput is an input type that accepts MetricAlertSingleResourceMultipleMetricCriteriaResponseArgs and MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput values.
// You can construct a concrete instance of `MetricAlertSingleResourceMultipleMetricCriteriaResponseInput` via:
//
//          MetricAlertSingleResourceMultipleMetricCriteriaResponseArgs{...}
type MetricAlertSingleResourceMultipleMetricCriteriaResponseInput interface {
	pulumi.Input

	ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutput() MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput
	ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutputWithContext(context.Context) MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaResponseArgs struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf MetricCriteriaResponseArrayInput `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MetricAlertSingleResourceMultipleMetricCriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertSingleResourceMultipleMetricCriteriaResponse)(nil)).Elem()
}

func (i MetricAlertSingleResourceMultipleMetricCriteriaResponseArgs) ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutput() MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput {
	return i.ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutputWithContext(context.Background())
}

func (i MetricAlertSingleResourceMultipleMetricCriteriaResponseArgs) ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput)
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertSingleResourceMultipleMetricCriteriaResponse)(nil)).Elem()
}

func (o MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutput() MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput {
	return o
}

func (o MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput {
	return o
}

// The list of metric criteria for this 'all of' operation.
func (o MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) AllOf() MetricCriteriaResponseArrayOutput {
	return o.ApplyT(func(v MetricAlertSingleResourceMultipleMetricCriteriaResponse) []MetricCriteriaResponse {
		return v.AllOf
	}).(MetricCriteriaResponseArrayOutput)
}

// specifies the type of the alert criteria.
func (o MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertSingleResourceMultipleMetricCriteriaResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Criterion to filter metrics.
type MetricCriteria struct {
	// Specifies the type of threshold criteria
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimension `pulumi:"dimensions"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// the criteria operator.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold float64 `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// MetricCriteriaInput is an input type that accepts MetricCriteriaArgs and MetricCriteriaOutput values.
// You can construct a concrete instance of `MetricCriteriaInput` via:
//
//          MetricCriteriaArgs{...}
type MetricCriteriaInput interface {
	pulumi.Input

	ToMetricCriteriaOutput() MetricCriteriaOutput
	ToMetricCriteriaOutputWithContext(context.Context) MetricCriteriaOutput
}

// Criterion to filter metrics.
type MetricCriteriaArgs struct {
	// Specifies the type of threshold criteria
	CriterionType pulumi.StringInput `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions MetricDimensionArrayInput `pulumi:"dimensions"`
	// Name of the metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace pulumi.StringPtrInput `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name pulumi.StringInput `pulumi:"name"`
	// the criteria operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation pulumi.BoolPtrInput `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation pulumi.StringInput `pulumi:"timeAggregation"`
}

func (MetricCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricCriteria)(nil)).Elem()
}

func (i MetricCriteriaArgs) ToMetricCriteriaOutput() MetricCriteriaOutput {
	return i.ToMetricCriteriaOutputWithContext(context.Background())
}

func (i MetricCriteriaArgs) ToMetricCriteriaOutputWithContext(ctx context.Context) MetricCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricCriteriaOutput)
}

// MetricCriteriaArrayInput is an input type that accepts MetricCriteriaArray and MetricCriteriaArrayOutput values.
// You can construct a concrete instance of `MetricCriteriaArrayInput` via:
//
//          MetricCriteriaArray{ MetricCriteriaArgs{...} }
type MetricCriteriaArrayInput interface {
	pulumi.Input

	ToMetricCriteriaArrayOutput() MetricCriteriaArrayOutput
	ToMetricCriteriaArrayOutputWithContext(context.Context) MetricCriteriaArrayOutput
}

type MetricCriteriaArray []MetricCriteriaInput

func (MetricCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricCriteria)(nil)).Elem()
}

func (i MetricCriteriaArray) ToMetricCriteriaArrayOutput() MetricCriteriaArrayOutput {
	return i.ToMetricCriteriaArrayOutputWithContext(context.Background())
}

func (i MetricCriteriaArray) ToMetricCriteriaArrayOutputWithContext(ctx context.Context) MetricCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricCriteriaArrayOutput)
}

// Criterion to filter metrics.
type MetricCriteriaOutput struct{ *pulumi.OutputState }

func (MetricCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricCriteria)(nil)).Elem()
}

func (o MetricCriteriaOutput) ToMetricCriteriaOutput() MetricCriteriaOutput {
	return o
}

func (o MetricCriteriaOutput) ToMetricCriteriaOutputWithContext(ctx context.Context) MetricCriteriaOutput {
	return o
}

// Specifies the type of threshold criteria
func (o MetricCriteriaOutput) CriterionType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.CriterionType }).(pulumi.StringOutput)
}

// List of dimension conditions.
func (o MetricCriteriaOutput) Dimensions() MetricDimensionArrayOutput {
	return o.ApplyT(func(v MetricCriteria) []MetricDimension { return v.Dimensions }).(MetricDimensionArrayOutput)
}

// Name of the metric.
func (o MetricCriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.MetricName }).(pulumi.StringOutput)
}

// Namespace of the metric.
func (o MetricCriteriaOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricCriteria) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// Name of the criteria.
func (o MetricCriteriaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.Name }).(pulumi.StringOutput)
}

// the criteria operator.
func (o MetricCriteriaOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.Operator }).(pulumi.StringOutput)
}

// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
func (o MetricCriteriaOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricCriteria) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// the criteria threshold value that activates the alert.
func (o MetricCriteriaOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v MetricCriteria) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// the criteria time aggregation types.
func (o MetricCriteriaOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

type MetricCriteriaArrayOutput struct{ *pulumi.OutputState }

func (MetricCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricCriteria)(nil)).Elem()
}

func (o MetricCriteriaArrayOutput) ToMetricCriteriaArrayOutput() MetricCriteriaArrayOutput {
	return o
}

func (o MetricCriteriaArrayOutput) ToMetricCriteriaArrayOutputWithContext(ctx context.Context) MetricCriteriaArrayOutput {
	return o
}

func (o MetricCriteriaArrayOutput) Index(i pulumi.IntInput) MetricCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricCriteria {
		return vs[0].([]MetricCriteria)[vs[1].(int)]
	}).(MetricCriteriaOutput)
}

// Criterion to filter metrics.
type MetricCriteriaResponse struct {
	// Specifies the type of threshold criteria
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimensionResponse `pulumi:"dimensions"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// the criteria operator.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold float64 `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// MetricCriteriaResponseInput is an input type that accepts MetricCriteriaResponseArgs and MetricCriteriaResponseOutput values.
// You can construct a concrete instance of `MetricCriteriaResponseInput` via:
//
//          MetricCriteriaResponseArgs{...}
type MetricCriteriaResponseInput interface {
	pulumi.Input

	ToMetricCriteriaResponseOutput() MetricCriteriaResponseOutput
	ToMetricCriteriaResponseOutputWithContext(context.Context) MetricCriteriaResponseOutput
}

// Criterion to filter metrics.
type MetricCriteriaResponseArgs struct {
	// Specifies the type of threshold criteria
	CriterionType pulumi.StringInput `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions MetricDimensionResponseArrayInput `pulumi:"dimensions"`
	// Name of the metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace pulumi.StringPtrInput `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name pulumi.StringInput `pulumi:"name"`
	// the criteria operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation pulumi.BoolPtrInput `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation pulumi.StringInput `pulumi:"timeAggregation"`
}

func (MetricCriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricCriteriaResponse)(nil)).Elem()
}

func (i MetricCriteriaResponseArgs) ToMetricCriteriaResponseOutput() MetricCriteriaResponseOutput {
	return i.ToMetricCriteriaResponseOutputWithContext(context.Background())
}

func (i MetricCriteriaResponseArgs) ToMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricCriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricCriteriaResponseOutput)
}

// MetricCriteriaResponseArrayInput is an input type that accepts MetricCriteriaResponseArray and MetricCriteriaResponseArrayOutput values.
// You can construct a concrete instance of `MetricCriteriaResponseArrayInput` via:
//
//          MetricCriteriaResponseArray{ MetricCriteriaResponseArgs{...} }
type MetricCriteriaResponseArrayInput interface {
	pulumi.Input

	ToMetricCriteriaResponseArrayOutput() MetricCriteriaResponseArrayOutput
	ToMetricCriteriaResponseArrayOutputWithContext(context.Context) MetricCriteriaResponseArrayOutput
}

type MetricCriteriaResponseArray []MetricCriteriaResponseInput

func (MetricCriteriaResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricCriteriaResponse)(nil)).Elem()
}

func (i MetricCriteriaResponseArray) ToMetricCriteriaResponseArrayOutput() MetricCriteriaResponseArrayOutput {
	return i.ToMetricCriteriaResponseArrayOutputWithContext(context.Background())
}

func (i MetricCriteriaResponseArray) ToMetricCriteriaResponseArrayOutputWithContext(ctx context.Context) MetricCriteriaResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricCriteriaResponseArrayOutput)
}

// Criterion to filter metrics.
type MetricCriteriaResponseOutput struct{ *pulumi.OutputState }

func (MetricCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricCriteriaResponse)(nil)).Elem()
}

func (o MetricCriteriaResponseOutput) ToMetricCriteriaResponseOutput() MetricCriteriaResponseOutput {
	return o
}

func (o MetricCriteriaResponseOutput) ToMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricCriteriaResponseOutput {
	return o
}

// Specifies the type of threshold criteria
func (o MetricCriteriaResponseOutput) CriterionType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.CriterionType }).(pulumi.StringOutput)
}

// List of dimension conditions.
func (o MetricCriteriaResponseOutput) Dimensions() MetricDimensionResponseArrayOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) []MetricDimensionResponse { return v.Dimensions }).(MetricDimensionResponseArrayOutput)
}

// Name of the metric.
func (o MetricCriteriaResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

// Namespace of the metric.
func (o MetricCriteriaResponseOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// Name of the criteria.
func (o MetricCriteriaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// the criteria operator.
func (o MetricCriteriaResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
func (o MetricCriteriaResponseOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// the criteria threshold value that activates the alert.
func (o MetricCriteriaResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v MetricCriteriaResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// the criteria time aggregation types.
func (o MetricCriteriaResponseOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

type MetricCriteriaResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricCriteriaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricCriteriaResponse)(nil)).Elem()
}

func (o MetricCriteriaResponseArrayOutput) ToMetricCriteriaResponseArrayOutput() MetricCriteriaResponseArrayOutput {
	return o
}

func (o MetricCriteriaResponseArrayOutput) ToMetricCriteriaResponseArrayOutputWithContext(ctx context.Context) MetricCriteriaResponseArrayOutput {
	return o
}

func (o MetricCriteriaResponseArrayOutput) Index(i pulumi.IntInput) MetricCriteriaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricCriteriaResponse {
		return vs[0].([]MetricCriteriaResponse)[vs[1].(int)]
	}).(MetricCriteriaResponseOutput)
}

// Specifies a metric dimension.
type MetricDimension struct {
	// Name of the dimension.
	Name string `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator string `pulumi:"operator"`
	// list of dimension values.
	Values []string `pulumi:"values"`
}

// MetricDimensionInput is an input type that accepts MetricDimensionArgs and MetricDimensionOutput values.
// You can construct a concrete instance of `MetricDimensionInput` via:
//
//          MetricDimensionArgs{...}
type MetricDimensionInput interface {
	pulumi.Input

	ToMetricDimensionOutput() MetricDimensionOutput
	ToMetricDimensionOutputWithContext(context.Context) MetricDimensionOutput
}

// Specifies a metric dimension.
type MetricDimensionArgs struct {
	// Name of the dimension.
	Name pulumi.StringInput `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator pulumi.StringInput `pulumi:"operator"`
	// list of dimension values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDimension)(nil)).Elem()
}

func (i MetricDimensionArgs) ToMetricDimensionOutput() MetricDimensionOutput {
	return i.ToMetricDimensionOutputWithContext(context.Background())
}

func (i MetricDimensionArgs) ToMetricDimensionOutputWithContext(ctx context.Context) MetricDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDimensionOutput)
}

// MetricDimensionArrayInput is an input type that accepts MetricDimensionArray and MetricDimensionArrayOutput values.
// You can construct a concrete instance of `MetricDimensionArrayInput` via:
//
//          MetricDimensionArray{ MetricDimensionArgs{...} }
type MetricDimensionArrayInput interface {
	pulumi.Input

	ToMetricDimensionArrayOutput() MetricDimensionArrayOutput
	ToMetricDimensionArrayOutputWithContext(context.Context) MetricDimensionArrayOutput
}

type MetricDimensionArray []MetricDimensionInput

func (MetricDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDimension)(nil)).Elem()
}

func (i MetricDimensionArray) ToMetricDimensionArrayOutput() MetricDimensionArrayOutput {
	return i.ToMetricDimensionArrayOutputWithContext(context.Background())
}

func (i MetricDimensionArray) ToMetricDimensionArrayOutputWithContext(ctx context.Context) MetricDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDimensionArrayOutput)
}

// Specifies a metric dimension.
type MetricDimensionOutput struct{ *pulumi.OutputState }

func (MetricDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDimension)(nil)).Elem()
}

func (o MetricDimensionOutput) ToMetricDimensionOutput() MetricDimensionOutput {
	return o
}

func (o MetricDimensionOutput) ToMetricDimensionOutputWithContext(ctx context.Context) MetricDimensionOutput {
	return o
}

// Name of the dimension.
func (o MetricDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDimension) string { return v.Name }).(pulumi.StringOutput)
}

// the dimension operator. Only 'Include' and 'Exclude' are supported
func (o MetricDimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDimension) string { return v.Operator }).(pulumi.StringOutput)
}

// list of dimension values.
func (o MetricDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricDimensionArrayOutput struct{ *pulumi.OutputState }

func (MetricDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDimension)(nil)).Elem()
}

func (o MetricDimensionArrayOutput) ToMetricDimensionArrayOutput() MetricDimensionArrayOutput {
	return o
}

func (o MetricDimensionArrayOutput) ToMetricDimensionArrayOutputWithContext(ctx context.Context) MetricDimensionArrayOutput {
	return o
}

func (o MetricDimensionArrayOutput) Index(i pulumi.IntInput) MetricDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricDimension {
		return vs[0].([]MetricDimension)[vs[1].(int)]
	}).(MetricDimensionOutput)
}

// Specifies a metric dimension.
type MetricDimensionResponse struct {
	// Name of the dimension.
	Name string `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator string `pulumi:"operator"`
	// list of dimension values.
	Values []string `pulumi:"values"`
}

// MetricDimensionResponseInput is an input type that accepts MetricDimensionResponseArgs and MetricDimensionResponseOutput values.
// You can construct a concrete instance of `MetricDimensionResponseInput` via:
//
//          MetricDimensionResponseArgs{...}
type MetricDimensionResponseInput interface {
	pulumi.Input

	ToMetricDimensionResponseOutput() MetricDimensionResponseOutput
	ToMetricDimensionResponseOutputWithContext(context.Context) MetricDimensionResponseOutput
}

// Specifies a metric dimension.
type MetricDimensionResponseArgs struct {
	// Name of the dimension.
	Name pulumi.StringInput `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator pulumi.StringInput `pulumi:"operator"`
	// list of dimension values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricDimensionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDimensionResponse)(nil)).Elem()
}

func (i MetricDimensionResponseArgs) ToMetricDimensionResponseOutput() MetricDimensionResponseOutput {
	return i.ToMetricDimensionResponseOutputWithContext(context.Background())
}

func (i MetricDimensionResponseArgs) ToMetricDimensionResponseOutputWithContext(ctx context.Context) MetricDimensionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDimensionResponseOutput)
}

// MetricDimensionResponseArrayInput is an input type that accepts MetricDimensionResponseArray and MetricDimensionResponseArrayOutput values.
// You can construct a concrete instance of `MetricDimensionResponseArrayInput` via:
//
//          MetricDimensionResponseArray{ MetricDimensionResponseArgs{...} }
type MetricDimensionResponseArrayInput interface {
	pulumi.Input

	ToMetricDimensionResponseArrayOutput() MetricDimensionResponseArrayOutput
	ToMetricDimensionResponseArrayOutputWithContext(context.Context) MetricDimensionResponseArrayOutput
}

type MetricDimensionResponseArray []MetricDimensionResponseInput

func (MetricDimensionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDimensionResponse)(nil)).Elem()
}

func (i MetricDimensionResponseArray) ToMetricDimensionResponseArrayOutput() MetricDimensionResponseArrayOutput {
	return i.ToMetricDimensionResponseArrayOutputWithContext(context.Background())
}

func (i MetricDimensionResponseArray) ToMetricDimensionResponseArrayOutputWithContext(ctx context.Context) MetricDimensionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDimensionResponseArrayOutput)
}

// Specifies a metric dimension.
type MetricDimensionResponseOutput struct{ *pulumi.OutputState }

func (MetricDimensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDimensionResponse)(nil)).Elem()
}

func (o MetricDimensionResponseOutput) ToMetricDimensionResponseOutput() MetricDimensionResponseOutput {
	return o
}

func (o MetricDimensionResponseOutput) ToMetricDimensionResponseOutputWithContext(ctx context.Context) MetricDimensionResponseOutput {
	return o
}

// Name of the dimension.
func (o MetricDimensionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDimensionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// the dimension operator. Only 'Include' and 'Exclude' are supported
func (o MetricDimensionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDimensionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// list of dimension values.
func (o MetricDimensionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricDimensionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricDimensionResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricDimensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDimensionResponse)(nil)).Elem()
}

func (o MetricDimensionResponseArrayOutput) ToMetricDimensionResponseArrayOutput() MetricDimensionResponseArrayOutput {
	return o
}

func (o MetricDimensionResponseArrayOutput) ToMetricDimensionResponseArrayOutputWithContext(ctx context.Context) MetricDimensionResponseArrayOutput {
	return o
}

func (o MetricDimensionResponseArrayOutput) Index(i pulumi.IntInput) MetricDimensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricDimensionResponse {
		return vs[0].([]MetricDimensionResponse)[vs[1].(int)]
	}).(MetricDimensionResponseOutput)
}

// An SMS receiver.
type SmsReceiver struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// SmsReceiverInput is an input type that accepts SmsReceiverArgs and SmsReceiverOutput values.
// You can construct a concrete instance of `SmsReceiverInput` via:
//
//          SmsReceiverArgs{...}
type SmsReceiverInput interface {
	pulumi.Input

	ToSmsReceiverOutput() SmsReceiverOutput
	ToSmsReceiverOutputWithContext(context.Context) SmsReceiverOutput
}

// An SMS receiver.
type SmsReceiverArgs struct {
	// The country code of the SMS receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (SmsReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiver)(nil)).Elem()
}

func (i SmsReceiverArgs) ToSmsReceiverOutput() SmsReceiverOutput {
	return i.ToSmsReceiverOutputWithContext(context.Background())
}

func (i SmsReceiverArgs) ToSmsReceiverOutputWithContext(ctx context.Context) SmsReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverOutput)
}

// SmsReceiverArrayInput is an input type that accepts SmsReceiverArray and SmsReceiverArrayOutput values.
// You can construct a concrete instance of `SmsReceiverArrayInput` via:
//
//          SmsReceiverArray{ SmsReceiverArgs{...} }
type SmsReceiverArrayInput interface {
	pulumi.Input

	ToSmsReceiverArrayOutput() SmsReceiverArrayOutput
	ToSmsReceiverArrayOutputWithContext(context.Context) SmsReceiverArrayOutput
}

type SmsReceiverArray []SmsReceiverInput

func (SmsReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiver)(nil)).Elem()
}

func (i SmsReceiverArray) ToSmsReceiverArrayOutput() SmsReceiverArrayOutput {
	return i.ToSmsReceiverArrayOutputWithContext(context.Background())
}

func (i SmsReceiverArray) ToSmsReceiverArrayOutputWithContext(ctx context.Context) SmsReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverArrayOutput)
}

// An SMS receiver.
type SmsReceiverOutput struct{ *pulumi.OutputState }

func (SmsReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiver)(nil)).Elem()
}

func (o SmsReceiverOutput) ToSmsReceiverOutput() SmsReceiverOutput {
	return o
}

func (o SmsReceiverOutput) ToSmsReceiverOutputWithContext(ctx context.Context) SmsReceiverOutput {
	return o
}

// The country code of the SMS receiver.
func (o SmsReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique across all receivers within an action group.
func (o SmsReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o SmsReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type SmsReceiverArrayOutput struct{ *pulumi.OutputState }

func (SmsReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiver)(nil)).Elem()
}

func (o SmsReceiverArrayOutput) ToSmsReceiverArrayOutput() SmsReceiverArrayOutput {
	return o
}

func (o SmsReceiverArrayOutput) ToSmsReceiverArrayOutputWithContext(ctx context.Context) SmsReceiverArrayOutput {
	return o
}

func (o SmsReceiverArrayOutput) Index(i pulumi.IntInput) SmsReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmsReceiver {
		return vs[0].([]SmsReceiver)[vs[1].(int)]
	}).(SmsReceiverOutput)
}

// An SMS receiver.
type SmsReceiverResponse struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
	// The status of the receiver.
	Status string `pulumi:"status"`
}

// SmsReceiverResponseInput is an input type that accepts SmsReceiverResponseArgs and SmsReceiverResponseOutput values.
// You can construct a concrete instance of `SmsReceiverResponseInput` via:
//
//          SmsReceiverResponseArgs{...}
type SmsReceiverResponseInput interface {
	pulumi.Input

	ToSmsReceiverResponseOutput() SmsReceiverResponseOutput
	ToSmsReceiverResponseOutputWithContext(context.Context) SmsReceiverResponseOutput
}

// An SMS receiver.
type SmsReceiverResponseArgs struct {
	// The country code of the SMS receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
	// The status of the receiver.
	Status pulumi.StringInput `pulumi:"status"`
}

func (SmsReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiverResponse)(nil)).Elem()
}

func (i SmsReceiverResponseArgs) ToSmsReceiverResponseOutput() SmsReceiverResponseOutput {
	return i.ToSmsReceiverResponseOutputWithContext(context.Background())
}

func (i SmsReceiverResponseArgs) ToSmsReceiverResponseOutputWithContext(ctx context.Context) SmsReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverResponseOutput)
}

// SmsReceiverResponseArrayInput is an input type that accepts SmsReceiverResponseArray and SmsReceiverResponseArrayOutput values.
// You can construct a concrete instance of `SmsReceiverResponseArrayInput` via:
//
//          SmsReceiverResponseArray{ SmsReceiverResponseArgs{...} }
type SmsReceiverResponseArrayInput interface {
	pulumi.Input

	ToSmsReceiverResponseArrayOutput() SmsReceiverResponseArrayOutput
	ToSmsReceiverResponseArrayOutputWithContext(context.Context) SmsReceiverResponseArrayOutput
}

type SmsReceiverResponseArray []SmsReceiverResponseInput

func (SmsReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiverResponse)(nil)).Elem()
}

func (i SmsReceiverResponseArray) ToSmsReceiverResponseArrayOutput() SmsReceiverResponseArrayOutput {
	return i.ToSmsReceiverResponseArrayOutputWithContext(context.Background())
}

func (i SmsReceiverResponseArray) ToSmsReceiverResponseArrayOutputWithContext(ctx context.Context) SmsReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverResponseArrayOutput)
}

// An SMS receiver.
type SmsReceiverResponseOutput struct{ *pulumi.OutputState }

func (SmsReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiverResponse)(nil)).Elem()
}

func (o SmsReceiverResponseOutput) ToSmsReceiverResponseOutput() SmsReceiverResponseOutput {
	return o
}

func (o SmsReceiverResponseOutput) ToSmsReceiverResponseOutputWithContext(ctx context.Context) SmsReceiverResponseOutput {
	return o
}

// The country code of the SMS receiver.
func (o SmsReceiverResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique across all receivers within an action group.
func (o SmsReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o SmsReceiverResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// The status of the receiver.
func (o SmsReceiverResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.Status }).(pulumi.StringOutput)
}

type SmsReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (SmsReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiverResponse)(nil)).Elem()
}

func (o SmsReceiverResponseArrayOutput) ToSmsReceiverResponseArrayOutput() SmsReceiverResponseArrayOutput {
	return o
}

func (o SmsReceiverResponseArrayOutput) ToSmsReceiverResponseArrayOutputWithContext(ctx context.Context) SmsReceiverResponseArrayOutput {
	return o
}

func (o SmsReceiverResponseArrayOutput) Index(i pulumi.IntInput) SmsReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmsReceiverResponse {
		return vs[0].([]SmsReceiverResponse)[vs[1].(int)]
	}).(SmsReceiverResponseOutput)
}

// A voice receiver.
type VoiceReceiver struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// VoiceReceiverInput is an input type that accepts VoiceReceiverArgs and VoiceReceiverOutput values.
// You can construct a concrete instance of `VoiceReceiverInput` via:
//
//          VoiceReceiverArgs{...}
type VoiceReceiverInput interface {
	pulumi.Input

	ToVoiceReceiverOutput() VoiceReceiverOutput
	ToVoiceReceiverOutputWithContext(context.Context) VoiceReceiverOutput
}

// A voice receiver.
type VoiceReceiverArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (VoiceReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiver)(nil)).Elem()
}

func (i VoiceReceiverArgs) ToVoiceReceiverOutput() VoiceReceiverOutput {
	return i.ToVoiceReceiverOutputWithContext(context.Background())
}

func (i VoiceReceiverArgs) ToVoiceReceiverOutputWithContext(ctx context.Context) VoiceReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverOutput)
}

// VoiceReceiverArrayInput is an input type that accepts VoiceReceiverArray and VoiceReceiverArrayOutput values.
// You can construct a concrete instance of `VoiceReceiverArrayInput` via:
//
//          VoiceReceiverArray{ VoiceReceiverArgs{...} }
type VoiceReceiverArrayInput interface {
	pulumi.Input

	ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput
	ToVoiceReceiverArrayOutputWithContext(context.Context) VoiceReceiverArrayOutput
}

type VoiceReceiverArray []VoiceReceiverInput

func (VoiceReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiver)(nil)).Elem()
}

func (i VoiceReceiverArray) ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput {
	return i.ToVoiceReceiverArrayOutputWithContext(context.Background())
}

func (i VoiceReceiverArray) ToVoiceReceiverArrayOutputWithContext(ctx context.Context) VoiceReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverArrayOutput)
}

// A voice receiver.
type VoiceReceiverOutput struct{ *pulumi.OutputState }

func (VoiceReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiver)(nil)).Elem()
}

func (o VoiceReceiverOutput) ToVoiceReceiverOutput() VoiceReceiverOutput {
	return o
}

func (o VoiceReceiverOutput) ToVoiceReceiverOutputWithContext(ctx context.Context) VoiceReceiverOutput {
	return o
}

// The country code of the voice receiver.
func (o VoiceReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver. Names must be unique across all receivers within an action group.
func (o VoiceReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o VoiceReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type VoiceReceiverArrayOutput struct{ *pulumi.OutputState }

func (VoiceReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiver)(nil)).Elem()
}

func (o VoiceReceiverArrayOutput) ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput {
	return o
}

func (o VoiceReceiverArrayOutput) ToVoiceReceiverArrayOutputWithContext(ctx context.Context) VoiceReceiverArrayOutput {
	return o
}

func (o VoiceReceiverArrayOutput) Index(i pulumi.IntInput) VoiceReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VoiceReceiver {
		return vs[0].([]VoiceReceiver)[vs[1].(int)]
	}).(VoiceReceiverOutput)
}

// A voice receiver.
type VoiceReceiverResponse struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// VoiceReceiverResponseInput is an input type that accepts VoiceReceiverResponseArgs and VoiceReceiverResponseOutput values.
// You can construct a concrete instance of `VoiceReceiverResponseInput` via:
//
//          VoiceReceiverResponseArgs{...}
type VoiceReceiverResponseInput interface {
	pulumi.Input

	ToVoiceReceiverResponseOutput() VoiceReceiverResponseOutput
	ToVoiceReceiverResponseOutputWithContext(context.Context) VoiceReceiverResponseOutput
}

// A voice receiver.
type VoiceReceiverResponseArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (VoiceReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiverResponse)(nil)).Elem()
}

func (i VoiceReceiverResponseArgs) ToVoiceReceiverResponseOutput() VoiceReceiverResponseOutput {
	return i.ToVoiceReceiverResponseOutputWithContext(context.Background())
}

func (i VoiceReceiverResponseArgs) ToVoiceReceiverResponseOutputWithContext(ctx context.Context) VoiceReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverResponseOutput)
}

// VoiceReceiverResponseArrayInput is an input type that accepts VoiceReceiverResponseArray and VoiceReceiverResponseArrayOutput values.
// You can construct a concrete instance of `VoiceReceiverResponseArrayInput` via:
//
//          VoiceReceiverResponseArray{ VoiceReceiverResponseArgs{...} }
type VoiceReceiverResponseArrayInput interface {
	pulumi.Input

	ToVoiceReceiverResponseArrayOutput() VoiceReceiverResponseArrayOutput
	ToVoiceReceiverResponseArrayOutputWithContext(context.Context) VoiceReceiverResponseArrayOutput
}

type VoiceReceiverResponseArray []VoiceReceiverResponseInput

func (VoiceReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiverResponse)(nil)).Elem()
}

func (i VoiceReceiverResponseArray) ToVoiceReceiverResponseArrayOutput() VoiceReceiverResponseArrayOutput {
	return i.ToVoiceReceiverResponseArrayOutputWithContext(context.Background())
}

func (i VoiceReceiverResponseArray) ToVoiceReceiverResponseArrayOutputWithContext(ctx context.Context) VoiceReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverResponseArrayOutput)
}

// A voice receiver.
type VoiceReceiverResponseOutput struct{ *pulumi.OutputState }

func (VoiceReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiverResponse)(nil)).Elem()
}

func (o VoiceReceiverResponseOutput) ToVoiceReceiverResponseOutput() VoiceReceiverResponseOutput {
	return o
}

func (o VoiceReceiverResponseOutput) ToVoiceReceiverResponseOutputWithContext(ctx context.Context) VoiceReceiverResponseOutput {
	return o
}

// The country code of the voice receiver.
func (o VoiceReceiverResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver. Names must be unique across all receivers within an action group.
func (o VoiceReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o VoiceReceiverResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type VoiceReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (VoiceReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiverResponse)(nil)).Elem()
}

func (o VoiceReceiverResponseArrayOutput) ToVoiceReceiverResponseArrayOutput() VoiceReceiverResponseArrayOutput {
	return o
}

func (o VoiceReceiverResponseArrayOutput) ToVoiceReceiverResponseArrayOutputWithContext(ctx context.Context) VoiceReceiverResponseArrayOutput {
	return o
}

func (o VoiceReceiverResponseArrayOutput) Index(i pulumi.IntInput) VoiceReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VoiceReceiverResponse {
		return vs[0].([]VoiceReceiverResponse)[vs[1].(int)]
	}).(VoiceReceiverResponseOutput)
}

// A webhook receiver.
type WebhookReceiver struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
}

// WebhookReceiverInput is an input type that accepts WebhookReceiverArgs and WebhookReceiverOutput values.
// You can construct a concrete instance of `WebhookReceiverInput` via:
//
//          WebhookReceiverArgs{...}
type WebhookReceiverInput interface {
	pulumi.Input

	ToWebhookReceiverOutput() WebhookReceiverOutput
	ToWebhookReceiverOutputWithContext(context.Context) WebhookReceiverOutput
}

// A webhook receiver.
type WebhookReceiverArgs struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
}

func (WebhookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiver)(nil)).Elem()
}

func (i WebhookReceiverArgs) ToWebhookReceiverOutput() WebhookReceiverOutput {
	return i.ToWebhookReceiverOutputWithContext(context.Background())
}

func (i WebhookReceiverArgs) ToWebhookReceiverOutputWithContext(ctx context.Context) WebhookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverOutput)
}

// WebhookReceiverArrayInput is an input type that accepts WebhookReceiverArray and WebhookReceiverArrayOutput values.
// You can construct a concrete instance of `WebhookReceiverArrayInput` via:
//
//          WebhookReceiverArray{ WebhookReceiverArgs{...} }
type WebhookReceiverArrayInput interface {
	pulumi.Input

	ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput
	ToWebhookReceiverArrayOutputWithContext(context.Context) WebhookReceiverArrayOutput
}

type WebhookReceiverArray []WebhookReceiverInput

func (WebhookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiver)(nil)).Elem()
}

func (i WebhookReceiverArray) ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput {
	return i.ToWebhookReceiverArrayOutputWithContext(context.Background())
}

func (i WebhookReceiverArray) ToWebhookReceiverArrayOutputWithContext(ctx context.Context) WebhookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverArrayOutput)
}

// A webhook receiver.
type WebhookReceiverOutput struct{ *pulumi.OutputState }

func (WebhookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiver)(nil)).Elem()
}

func (o WebhookReceiverOutput) ToWebhookReceiverOutput() WebhookReceiverOutput {
	return o
}

func (o WebhookReceiverOutput) ToWebhookReceiverOutputWithContext(ctx context.Context) WebhookReceiverOutput {
	return o
}

// The name of the webhook receiver. Names must be unique across all receivers within an action group.
func (o WebhookReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o WebhookReceiverOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiver) string { return v.ServiceUri }).(pulumi.StringOutput)
}

type WebhookReceiverArrayOutput struct{ *pulumi.OutputState }

func (WebhookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiver)(nil)).Elem()
}

func (o WebhookReceiverArrayOutput) ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput {
	return o
}

func (o WebhookReceiverArrayOutput) ToWebhookReceiverArrayOutputWithContext(ctx context.Context) WebhookReceiverArrayOutput {
	return o
}

func (o WebhookReceiverArrayOutput) Index(i pulumi.IntInput) WebhookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookReceiver {
		return vs[0].([]WebhookReceiver)[vs[1].(int)]
	}).(WebhookReceiverOutput)
}

// A webhook receiver.
type WebhookReceiverResponse struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
}

// WebhookReceiverResponseInput is an input type that accepts WebhookReceiverResponseArgs and WebhookReceiverResponseOutput values.
// You can construct a concrete instance of `WebhookReceiverResponseInput` via:
//
//          WebhookReceiverResponseArgs{...}
type WebhookReceiverResponseInput interface {
	pulumi.Input

	ToWebhookReceiverResponseOutput() WebhookReceiverResponseOutput
	ToWebhookReceiverResponseOutputWithContext(context.Context) WebhookReceiverResponseOutput
}

// A webhook receiver.
type WebhookReceiverResponseArgs struct {
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
}

func (WebhookReceiverResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiverResponse)(nil)).Elem()
}

func (i WebhookReceiverResponseArgs) ToWebhookReceiverResponseOutput() WebhookReceiverResponseOutput {
	return i.ToWebhookReceiverResponseOutputWithContext(context.Background())
}

func (i WebhookReceiverResponseArgs) ToWebhookReceiverResponseOutputWithContext(ctx context.Context) WebhookReceiverResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverResponseOutput)
}

// WebhookReceiverResponseArrayInput is an input type that accepts WebhookReceiverResponseArray and WebhookReceiverResponseArrayOutput values.
// You can construct a concrete instance of `WebhookReceiverResponseArrayInput` via:
//
//          WebhookReceiverResponseArray{ WebhookReceiverResponseArgs{...} }
type WebhookReceiverResponseArrayInput interface {
	pulumi.Input

	ToWebhookReceiverResponseArrayOutput() WebhookReceiverResponseArrayOutput
	ToWebhookReceiverResponseArrayOutputWithContext(context.Context) WebhookReceiverResponseArrayOutput
}

type WebhookReceiverResponseArray []WebhookReceiverResponseInput

func (WebhookReceiverResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiverResponse)(nil)).Elem()
}

func (i WebhookReceiverResponseArray) ToWebhookReceiverResponseArrayOutput() WebhookReceiverResponseArrayOutput {
	return i.ToWebhookReceiverResponseArrayOutputWithContext(context.Background())
}

func (i WebhookReceiverResponseArray) ToWebhookReceiverResponseArrayOutputWithContext(ctx context.Context) WebhookReceiverResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverResponseArrayOutput)
}

// A webhook receiver.
type WebhookReceiverResponseOutput struct{ *pulumi.OutputState }

func (WebhookReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiverResponse)(nil)).Elem()
}

func (o WebhookReceiverResponseOutput) ToWebhookReceiverResponseOutput() WebhookReceiverResponseOutput {
	return o
}

func (o WebhookReceiverResponseOutput) ToWebhookReceiverResponseOutputWithContext(ctx context.Context) WebhookReceiverResponseOutput {
	return o
}

// The name of the webhook receiver. Names must be unique across all receivers within an action group.
func (o WebhookReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o WebhookReceiverResponseOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) string { return v.ServiceUri }).(pulumi.StringOutput)
}

type WebhookReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (WebhookReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiverResponse)(nil)).Elem()
}

func (o WebhookReceiverResponseArrayOutput) ToWebhookReceiverResponseArrayOutput() WebhookReceiverResponseArrayOutput {
	return o
}

func (o WebhookReceiverResponseArrayOutput) ToWebhookReceiverResponseArrayOutputWithContext(ctx context.Context) WebhookReceiverResponseArrayOutput {
	return o
}

func (o WebhookReceiverResponseArrayOutput) Index(i pulumi.IntInput) WebhookReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookReceiverResponse {
		return vs[0].([]WebhookReceiverResponse)[vs[1].(int)]
	}).(WebhookReceiverResponseOutput)
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteria struct {
	// The Application Insights resource Id.
	ComponentId string `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount float64 `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	OdataType string `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId string `pulumi:"webTestId"`
}

// WebtestLocationAvailabilityCriteriaInput is an input type that accepts WebtestLocationAvailabilityCriteriaArgs and WebtestLocationAvailabilityCriteriaOutput values.
// You can construct a concrete instance of `WebtestLocationAvailabilityCriteriaInput` via:
//
//          WebtestLocationAvailabilityCriteriaArgs{...}
type WebtestLocationAvailabilityCriteriaInput interface {
	pulumi.Input

	ToWebtestLocationAvailabilityCriteriaOutput() WebtestLocationAvailabilityCriteriaOutput
	ToWebtestLocationAvailabilityCriteriaOutputWithContext(context.Context) WebtestLocationAvailabilityCriteriaOutput
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaArgs struct {
	// The Application Insights resource Id.
	ComponentId pulumi.StringInput `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount pulumi.Float64Input `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId pulumi.StringInput `pulumi:"webTestId"`
}

func (WebtestLocationAvailabilityCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestLocationAvailabilityCriteria)(nil)).Elem()
}

func (i WebtestLocationAvailabilityCriteriaArgs) ToWebtestLocationAvailabilityCriteriaOutput() WebtestLocationAvailabilityCriteriaOutput {
	return i.ToWebtestLocationAvailabilityCriteriaOutputWithContext(context.Background())
}

func (i WebtestLocationAvailabilityCriteriaArgs) ToWebtestLocationAvailabilityCriteriaOutputWithContext(ctx context.Context) WebtestLocationAvailabilityCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebtestLocationAvailabilityCriteriaOutput)
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaOutput struct{ *pulumi.OutputState }

func (WebtestLocationAvailabilityCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestLocationAvailabilityCriteria)(nil)).Elem()
}

func (o WebtestLocationAvailabilityCriteriaOutput) ToWebtestLocationAvailabilityCriteriaOutput() WebtestLocationAvailabilityCriteriaOutput {
	return o
}

func (o WebtestLocationAvailabilityCriteriaOutput) ToWebtestLocationAvailabilityCriteriaOutputWithContext(ctx context.Context) WebtestLocationAvailabilityCriteriaOutput {
	return o
}

// The Application Insights resource Id.
func (o WebtestLocationAvailabilityCriteriaOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteria) string { return v.ComponentId }).(pulumi.StringOutput)
}

// The number of failed locations.
func (o WebtestLocationAvailabilityCriteriaOutput) FailedLocationCount() pulumi.Float64Output {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteria) float64 { return v.FailedLocationCount }).(pulumi.Float64Output)
}

// specifies the type of the alert criteria.
func (o WebtestLocationAvailabilityCriteriaOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteria) string { return v.OdataType }).(pulumi.StringOutput)
}

// The Application Insights web test Id.
func (o WebtestLocationAvailabilityCriteriaOutput) WebTestId() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteria) string { return v.WebTestId }).(pulumi.StringOutput)
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaResponse struct {
	// The Application Insights resource Id.
	ComponentId string `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount float64 `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	OdataType string `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId string `pulumi:"webTestId"`
}

// WebtestLocationAvailabilityCriteriaResponseInput is an input type that accepts WebtestLocationAvailabilityCriteriaResponseArgs and WebtestLocationAvailabilityCriteriaResponseOutput values.
// You can construct a concrete instance of `WebtestLocationAvailabilityCriteriaResponseInput` via:
//
//          WebtestLocationAvailabilityCriteriaResponseArgs{...}
type WebtestLocationAvailabilityCriteriaResponseInput interface {
	pulumi.Input

	ToWebtestLocationAvailabilityCriteriaResponseOutput() WebtestLocationAvailabilityCriteriaResponseOutput
	ToWebtestLocationAvailabilityCriteriaResponseOutputWithContext(context.Context) WebtestLocationAvailabilityCriteriaResponseOutput
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaResponseArgs struct {
	// The Application Insights resource Id.
	ComponentId pulumi.StringInput `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount pulumi.Float64Input `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId pulumi.StringInput `pulumi:"webTestId"`
}

func (WebtestLocationAvailabilityCriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestLocationAvailabilityCriteriaResponse)(nil)).Elem()
}

func (i WebtestLocationAvailabilityCriteriaResponseArgs) ToWebtestLocationAvailabilityCriteriaResponseOutput() WebtestLocationAvailabilityCriteriaResponseOutput {
	return i.ToWebtestLocationAvailabilityCriteriaResponseOutputWithContext(context.Background())
}

func (i WebtestLocationAvailabilityCriteriaResponseArgs) ToWebtestLocationAvailabilityCriteriaResponseOutputWithContext(ctx context.Context) WebtestLocationAvailabilityCriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebtestLocationAvailabilityCriteriaResponseOutput)
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaResponseOutput struct{ *pulumi.OutputState }

func (WebtestLocationAvailabilityCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestLocationAvailabilityCriteriaResponse)(nil)).Elem()
}

func (o WebtestLocationAvailabilityCriteriaResponseOutput) ToWebtestLocationAvailabilityCriteriaResponseOutput() WebtestLocationAvailabilityCriteriaResponseOutput {
	return o
}

func (o WebtestLocationAvailabilityCriteriaResponseOutput) ToWebtestLocationAvailabilityCriteriaResponseOutputWithContext(ctx context.Context) WebtestLocationAvailabilityCriteriaResponseOutput {
	return o
}

// The Application Insights resource Id.
func (o WebtestLocationAvailabilityCriteriaResponseOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteriaResponse) string { return v.ComponentId }).(pulumi.StringOutput)
}

// The number of failed locations.
func (o WebtestLocationAvailabilityCriteriaResponseOutput) FailedLocationCount() pulumi.Float64Output {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteriaResponse) float64 { return v.FailedLocationCount }).(pulumi.Float64Output)
}

// specifies the type of the alert criteria.
func (o WebtestLocationAvailabilityCriteriaResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteriaResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The Application Insights web test Id.
func (o WebtestLocationAvailabilityCriteriaResponseOutput) WebTestId() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteriaResponse) string { return v.WebTestId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AutomationRunbookReceiverOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverArrayOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverResponseOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverArrayOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverResponseOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(DynamicMetricCriteriaOutput{})
	pulumi.RegisterOutputType(DynamicMetricCriteriaResponseOutput{})
	pulumi.RegisterOutputType(DynamicThresholdFailingPeriodsOutput{})
	pulumi.RegisterOutputType(DynamicThresholdFailingPeriodsResponseOutput{})
	pulumi.RegisterOutputType(EmailReceiverOutput{})
	pulumi.RegisterOutputType(EmailReceiverArrayOutput{})
	pulumi.RegisterOutputType(EmailReceiverResponseOutput{})
	pulumi.RegisterOutputType(EmailReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(ItsmReceiverOutput{})
	pulumi.RegisterOutputType(ItsmReceiverArrayOutput{})
	pulumi.RegisterOutputType(ItsmReceiverResponseOutput{})
	pulumi.RegisterOutputType(ItsmReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverResponseOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertActionOutput{})
	pulumi.RegisterOutputType(MetricAlertActionArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertActionResponseOutput{})
	pulumi.RegisterOutputType(MetricAlertActionResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertMultipleResourceMultipleMetricCriteriaOutput{})
	pulumi.RegisterOutputType(MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput{})
	pulumi.RegisterOutputType(MetricAlertSingleResourceMultipleMetricCriteriaOutput{})
	pulumi.RegisterOutputType(MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput{})
	pulumi.RegisterOutputType(MetricCriteriaOutput{})
	pulumi.RegisterOutputType(MetricCriteriaArrayOutput{})
	pulumi.RegisterOutputType(MetricCriteriaResponseOutput{})
	pulumi.RegisterOutputType(MetricCriteriaResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricDimensionOutput{})
	pulumi.RegisterOutputType(MetricDimensionArrayOutput{})
	pulumi.RegisterOutputType(MetricDimensionResponseOutput{})
	pulumi.RegisterOutputType(MetricDimensionResponseArrayOutput{})
	pulumi.RegisterOutputType(SmsReceiverOutput{})
	pulumi.RegisterOutputType(SmsReceiverArrayOutput{})
	pulumi.RegisterOutputType(SmsReceiverResponseOutput{})
	pulumi.RegisterOutputType(SmsReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(VoiceReceiverOutput{})
	pulumi.RegisterOutputType(VoiceReceiverArrayOutput{})
	pulumi.RegisterOutputType(VoiceReceiverResponseOutput{})
	pulumi.RegisterOutputType(VoiceReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverOutput{})
	pulumi.RegisterOutputType(WebhookReceiverArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverResponseOutput{})
	pulumi.RegisterOutputType(WebhookReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(WebtestLocationAvailabilityCriteriaOutput{})
	pulumi.RegisterOutputType(WebtestLocationAvailabilityCriteriaResponseOutput{})
}
