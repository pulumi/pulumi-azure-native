// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Static definitions of the ProactiveDetection configuration rule (same values for all components).
type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions struct {
	// The rule description
	Description *string `pulumi:"description"`
	// The rule name as it is displayed in UI
	DisplayName *string `pulumi:"displayName"`
	// URL which displays additional info about the proactive detection rule
	HelpUrl *string `pulumi:"helpUrl"`
	// A flag indicating whether the rule is enabled by default
	IsEnabledByDefault *bool `pulumi:"isEnabledByDefault"`
	// A flag indicating whether the rule is hidden (from the UI)
	IsHidden *bool `pulumi:"isHidden"`
	// A flag indicating whether the rule is in preview
	IsInPreview *bool `pulumi:"isInPreview"`
	// The rule name
	Name *string `pulumi:"name"`
	// A flag indicating whether email notifications are supported for detections for this rule
	SupportsEmailNotifications *bool `pulumi:"supportsEmailNotifications"`
}

// Static definitions of the ProactiveDetection configuration rule (same values for all components).
type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions)(nil)).Elem()
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput {
	return o
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutputWithContext(ctx context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput {
	return o
}

// The rule description
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *string {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The rule name as it is displayed in UI
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *string {
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URL which displays additional info about the proactive detection rule
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) HelpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *string {
		return v.HelpUrl
	}).(pulumi.StringPtrOutput)
}

// A flag indicating whether the rule is enabled by default
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) IsEnabledByDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *bool {
		return v.IsEnabledByDefault
	}).(pulumi.BoolPtrOutput)
}

// A flag indicating whether the rule is hidden (from the UI)
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) IsHidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *bool {
		return v.IsHidden
	}).(pulumi.BoolPtrOutput)
}

// A flag indicating whether the rule is in preview
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) IsInPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *bool {
		return v.IsInPreview
	}).(pulumi.BoolPtrOutput)
}

// The rule name
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A flag indicating whether email notifications are supported for detections for this rule
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput) SupportsEmailNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *bool {
		return v.SupportsEmailNotifications
	}).(pulumi.BoolPtrOutput)
}

type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions)(nil)).Elem()
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput {
	return o
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput {
	return o
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) Elem() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions {
		if v != nil {
			return *v
		}
		var ret ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions
		return ret
	}).(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput)
}

// The rule description
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The rule name as it is displayed in UI
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URL which displays additional info about the proactive detection rule
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) HelpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.HelpUrl
	}).(pulumi.StringPtrOutput)
}

// A flag indicating whether the rule is enabled by default
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) IsEnabledByDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabledByDefault
	}).(pulumi.BoolPtrOutput)
}

// A flag indicating whether the rule is hidden (from the UI)
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) IsHidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *bool {
		if v == nil {
			return nil
		}
		return v.IsHidden
	}).(pulumi.BoolPtrOutput)
}

// A flag indicating whether the rule is in preview
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) IsInPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *bool {
		if v == nil {
			return nil
		}
		return v.IsInPreview
	}).(pulumi.BoolPtrOutput)
}

// The rule name
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A flag indicating whether email notifications are supported for detections for this rule
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput) SupportsEmailNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions) *bool {
		if v == nil {
			return nil
		}
		return v.SupportsEmailNotifications
	}).(pulumi.BoolPtrOutput)
}

// Static definitions of the ProactiveDetection configuration rule (same values for all components).
type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions struct {
	// The rule description
	Description *string `pulumi:"description"`
	// The rule name as it is displayed in UI
	DisplayName *string `pulumi:"displayName"`
	// URL which displays additional info about the proactive detection rule
	HelpUrl *string `pulumi:"helpUrl"`
	// A flag indicating whether the rule is enabled by default
	IsEnabledByDefault *bool `pulumi:"isEnabledByDefault"`
	// A flag indicating whether the rule is hidden (from the UI)
	IsHidden *bool `pulumi:"isHidden"`
	// A flag indicating whether the rule is in preview
	IsInPreview *bool `pulumi:"isInPreview"`
	// The rule name
	Name *string `pulumi:"name"`
	// A flag indicating whether email notifications are supported for detections for this rule
	SupportsEmailNotifications *bool `pulumi:"supportsEmailNotifications"`
}

// ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsInput is an input type that accepts ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs and ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput values.
// You can construct a concrete instance of `ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsInput` via:
//
//	ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs{...}
type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsInput interface {
	pulumi.Input

	ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput
	ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutputWithContext(context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput
}

// Static definitions of the ProactiveDetection configuration rule (same values for all components).
type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs struct {
	// The rule description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The rule name as it is displayed in UI
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// URL which displays additional info about the proactive detection rule
	HelpUrl pulumi.StringPtrInput `pulumi:"helpUrl"`
	// A flag indicating whether the rule is enabled by default
	IsEnabledByDefault pulumi.BoolPtrInput `pulumi:"isEnabledByDefault"`
	// A flag indicating whether the rule is hidden (from the UI)
	IsHidden pulumi.BoolPtrInput `pulumi:"isHidden"`
	// A flag indicating whether the rule is in preview
	IsInPreview pulumi.BoolPtrInput `pulumi:"isInPreview"`
	// The rule name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A flag indicating whether email notifications are supported for detections for this rule
	SupportsEmailNotifications pulumi.BoolPtrInput `pulumi:"supportsEmailNotifications"`
}

func (ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions)(nil)).Elem()
}

func (i ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput {
	return i.ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutputWithContext(context.Background())
}

func (i ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutputWithContext(ctx context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput)
}

func (i ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput {
	return i.ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(context.Background())
}

func (i ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput).ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(ctx)
}

// ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrInput is an input type that accepts ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs, ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtr and ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput values.
// You can construct a concrete instance of `ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrInput` via:
//
//	        ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs{...}
//
//	or:
//
//	        nil
type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrInput interface {
	pulumi.Input

	ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput
	ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput
}

type applicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrType ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs

func ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtr(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrInput {
	return (*applicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrType)(v)
}

func (*applicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions)(nil)).Elem()
}

func (i *applicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrType) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput {
	return i.ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(context.Background())
}

func (i *applicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrType) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput)
}

// Static definitions of the ProactiveDetection configuration rule (same values for all components).
type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions)(nil)).Elem()
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput {
	return o
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutputWithContext(ctx context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput {
	return o
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput {
	return o.ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(context.Background())
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions {
		return &v
	}).(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput)
}

// The rule description
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *string {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The rule name as it is displayed in UI
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *string {
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URL which displays additional info about the proactive detection rule
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) HelpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *string {
		return v.HelpUrl
	}).(pulumi.StringPtrOutput)
}

// A flag indicating whether the rule is enabled by default
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) IsEnabledByDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *bool {
		return v.IsEnabledByDefault
	}).(pulumi.BoolPtrOutput)
}

// A flag indicating whether the rule is hidden (from the UI)
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) IsHidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *bool {
		return v.IsHidden
	}).(pulumi.BoolPtrOutput)
}

// A flag indicating whether the rule is in preview
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) IsInPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *bool {
		return v.IsInPreview
	}).(pulumi.BoolPtrOutput)
}

// The rule name
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A flag indicating whether email notifications are supported for detections for this rule
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput) SupportsEmailNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *bool {
		return v.SupportsEmailNotifications
	}).(pulumi.BoolPtrOutput)
}

type ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions)(nil)).Elem()
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput {
	return o
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) ToApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput {
	return o
}

func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) Elem() ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions {
		if v != nil {
			return *v
		}
		var ret ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions
		return ret
	}).(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput)
}

// The rule description
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The rule name as it is displayed in UI
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URL which displays additional info about the proactive detection rule
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) HelpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.HelpUrl
	}).(pulumi.StringPtrOutput)
}

// A flag indicating whether the rule is enabled by default
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) IsEnabledByDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabledByDefault
	}).(pulumi.BoolPtrOutput)
}

// A flag indicating whether the rule is hidden (from the UI)
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) IsHidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *bool {
		if v == nil {
			return nil
		}
		return v.IsHidden
	}).(pulumi.BoolPtrOutput)
}

// A flag indicating whether the rule is in preview
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) IsInPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *bool {
		if v == nil {
			return nil
		}
		return v.IsInPreview
	}).(pulumi.BoolPtrOutput)
}

// The rule name
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A flag indicating whether email notifications are supported for detections for this rule
func (o ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput) SupportsEmailNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitions) *bool {
		if v == nil {
			return nil
		}
		return v.SupportsEmailNotifications
	}).(pulumi.BoolPtrOutput)
}

// A header to add to the WebTest.
type HeaderField struct {
	// The name of the header.
	HeaderFieldName *string `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue *string `pulumi:"headerFieldValue"`
}

// HeaderFieldInput is an input type that accepts HeaderFieldArgs and HeaderFieldOutput values.
// You can construct a concrete instance of `HeaderFieldInput` via:
//
//	HeaderFieldArgs{...}
type HeaderFieldInput interface {
	pulumi.Input

	ToHeaderFieldOutput() HeaderFieldOutput
	ToHeaderFieldOutputWithContext(context.Context) HeaderFieldOutput
}

// A header to add to the WebTest.
type HeaderFieldArgs struct {
	// The name of the header.
	HeaderFieldName pulumi.StringPtrInput `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue pulumi.StringPtrInput `pulumi:"headerFieldValue"`
}

func (HeaderFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderField)(nil)).Elem()
}

func (i HeaderFieldArgs) ToHeaderFieldOutput() HeaderFieldOutput {
	return i.ToHeaderFieldOutputWithContext(context.Background())
}

func (i HeaderFieldArgs) ToHeaderFieldOutputWithContext(ctx context.Context) HeaderFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderFieldOutput)
}

// HeaderFieldArrayInput is an input type that accepts HeaderFieldArray and HeaderFieldArrayOutput values.
// You can construct a concrete instance of `HeaderFieldArrayInput` via:
//
//	HeaderFieldArray{ HeaderFieldArgs{...} }
type HeaderFieldArrayInput interface {
	pulumi.Input

	ToHeaderFieldArrayOutput() HeaderFieldArrayOutput
	ToHeaderFieldArrayOutputWithContext(context.Context) HeaderFieldArrayOutput
}

type HeaderFieldArray []HeaderFieldInput

func (HeaderFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderField)(nil)).Elem()
}

func (i HeaderFieldArray) ToHeaderFieldArrayOutput() HeaderFieldArrayOutput {
	return i.ToHeaderFieldArrayOutputWithContext(context.Background())
}

func (i HeaderFieldArray) ToHeaderFieldArrayOutputWithContext(ctx context.Context) HeaderFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderFieldArrayOutput)
}

// A header to add to the WebTest.
type HeaderFieldOutput struct{ *pulumi.OutputState }

func (HeaderFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderField)(nil)).Elem()
}

func (o HeaderFieldOutput) ToHeaderFieldOutput() HeaderFieldOutput {
	return o
}

func (o HeaderFieldOutput) ToHeaderFieldOutputWithContext(ctx context.Context) HeaderFieldOutput {
	return o
}

// The name of the header.
func (o HeaderFieldOutput) HeaderFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderField) *string { return v.HeaderFieldName }).(pulumi.StringPtrOutput)
}

// The value of the header.
func (o HeaderFieldOutput) HeaderFieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderField) *string { return v.HeaderFieldValue }).(pulumi.StringPtrOutput)
}

type HeaderFieldArrayOutput struct{ *pulumi.OutputState }

func (HeaderFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderField)(nil)).Elem()
}

func (o HeaderFieldArrayOutput) ToHeaderFieldArrayOutput() HeaderFieldArrayOutput {
	return o
}

func (o HeaderFieldArrayOutput) ToHeaderFieldArrayOutputWithContext(ctx context.Context) HeaderFieldArrayOutput {
	return o
}

func (o HeaderFieldArrayOutput) Index(i pulumi.IntInput) HeaderFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderField {
		return vs[0].([]HeaderField)[vs[1].(int)]
	}).(HeaderFieldOutput)
}

// A header to add to the WebTest.
type HeaderFieldResponse struct {
	// The name of the header.
	HeaderFieldName *string `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue *string `pulumi:"headerFieldValue"`
}

// A header to add to the WebTest.
type HeaderFieldResponseOutput struct{ *pulumi.OutputState }

func (HeaderFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderFieldResponse)(nil)).Elem()
}

func (o HeaderFieldResponseOutput) ToHeaderFieldResponseOutput() HeaderFieldResponseOutput {
	return o
}

func (o HeaderFieldResponseOutput) ToHeaderFieldResponseOutputWithContext(ctx context.Context) HeaderFieldResponseOutput {
	return o
}

// The name of the header.
func (o HeaderFieldResponseOutput) HeaderFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderFieldResponse) *string { return v.HeaderFieldName }).(pulumi.StringPtrOutput)
}

// The value of the header.
func (o HeaderFieldResponseOutput) HeaderFieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderFieldResponse) *string { return v.HeaderFieldValue }).(pulumi.StringPtrOutput)
}

type HeaderFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (HeaderFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderFieldResponse)(nil)).Elem()
}

func (o HeaderFieldResponseArrayOutput) ToHeaderFieldResponseArrayOutput() HeaderFieldResponseArrayOutput {
	return o
}

func (o HeaderFieldResponseArrayOutput) ToHeaderFieldResponseArrayOutputWithContext(ctx context.Context) HeaderFieldResponseArrayOutput {
	return o
}

func (o HeaderFieldResponseArrayOutput) Index(i pulumi.IntInput) HeaderFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderFieldResponse {
		return vs[0].([]HeaderFieldResponse)[vs[1].(int)]
	}).(HeaderFieldResponseOutput)
}

// The private link scope resource reference.
type PrivateLinkScopedResourceResponse struct {
	// The full resource Id of the private link scope resource.
	ResourceId *string `pulumi:"resourceId"`
	// The private link scope unique Identifier.
	ScopeId *string `pulumi:"scopeId"`
}

// The private link scope resource reference.
type PrivateLinkScopedResourceResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (o PrivateLinkScopedResourceResponseOutput) ToPrivateLinkScopedResourceResponseOutput() PrivateLinkScopedResourceResponseOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseOutput) ToPrivateLinkScopedResourceResponseOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseOutput {
	return o
}

// The full resource Id of the private link scope resource.
func (o PrivateLinkScopedResourceResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResourceResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The private link scope unique Identifier.
func (o PrivateLinkScopedResourceResponseOutput) ScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResourceResponse) *string { return v.ScopeId }).(pulumi.StringPtrOutput)
}

type PrivateLinkScopedResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (o PrivateLinkScopedResourceResponseArrayOutput) ToPrivateLinkScopedResourceResponseArrayOutput() PrivateLinkScopedResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseArrayOutput) ToPrivateLinkScopedResourceResponseArrayOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseArrayOutput) Index(i pulumi.IntInput) PrivateLinkScopedResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkScopedResourceResponse {
		return vs[0].([]PrivateLinkScopedResourceResponse)[vs[1].(int)]
	}).(PrivateLinkScopedResourceResponseOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocation struct {
	// Location ID for the WebTest to run from.
	Location *string `pulumi:"location"`
}

// WebTestGeolocationInput is an input type that accepts WebTestGeolocationArgs and WebTestGeolocationOutput values.
// You can construct a concrete instance of `WebTestGeolocationInput` via:
//
//	WebTestGeolocationArgs{...}
type WebTestGeolocationInput interface {
	pulumi.Input

	ToWebTestGeolocationOutput() WebTestGeolocationOutput
	ToWebTestGeolocationOutputWithContext(context.Context) WebTestGeolocationOutput
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationArgs struct {
	// Location ID for the WebTest to run from.
	Location pulumi.StringPtrInput `pulumi:"location"`
}

func (WebTestGeolocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocation)(nil)).Elem()
}

func (i WebTestGeolocationArgs) ToWebTestGeolocationOutput() WebTestGeolocationOutput {
	return i.ToWebTestGeolocationOutputWithContext(context.Background())
}

func (i WebTestGeolocationArgs) ToWebTestGeolocationOutputWithContext(ctx context.Context) WebTestGeolocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationOutput)
}

// WebTestGeolocationArrayInput is an input type that accepts WebTestGeolocationArray and WebTestGeolocationArrayOutput values.
// You can construct a concrete instance of `WebTestGeolocationArrayInput` via:
//
//	WebTestGeolocationArray{ WebTestGeolocationArgs{...} }
type WebTestGeolocationArrayInput interface {
	pulumi.Input

	ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput
	ToWebTestGeolocationArrayOutputWithContext(context.Context) WebTestGeolocationArrayOutput
}

type WebTestGeolocationArray []WebTestGeolocationInput

func (WebTestGeolocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocation)(nil)).Elem()
}

func (i WebTestGeolocationArray) ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput {
	return i.ToWebTestGeolocationArrayOutputWithContext(context.Background())
}

func (i WebTestGeolocationArray) ToWebTestGeolocationArrayOutputWithContext(ctx context.Context) WebTestGeolocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationArrayOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocation)(nil)).Elem()
}

func (o WebTestGeolocationOutput) ToWebTestGeolocationOutput() WebTestGeolocationOutput {
	return o
}

func (o WebTestGeolocationOutput) ToWebTestGeolocationOutputWithContext(ctx context.Context) WebTestGeolocationOutput {
	return o
}

// Location ID for the WebTest to run from.
func (o WebTestGeolocationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestGeolocation) *string { return v.Location }).(pulumi.StringPtrOutput)
}

type WebTestGeolocationArrayOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocation)(nil)).Elem()
}

func (o WebTestGeolocationArrayOutput) ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput {
	return o
}

func (o WebTestGeolocationArrayOutput) ToWebTestGeolocationArrayOutputWithContext(ctx context.Context) WebTestGeolocationArrayOutput {
	return o
}

func (o WebTestGeolocationArrayOutput) Index(i pulumi.IntInput) WebTestGeolocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebTestGeolocation {
		return vs[0].([]WebTestGeolocation)[vs[1].(int)]
	}).(WebTestGeolocationOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponse struct {
	// Location ID for the WebTest to run from.
	Location *string `pulumi:"location"`
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponseOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocationResponse)(nil)).Elem()
}

func (o WebTestGeolocationResponseOutput) ToWebTestGeolocationResponseOutput() WebTestGeolocationResponseOutput {
	return o
}

func (o WebTestGeolocationResponseOutput) ToWebTestGeolocationResponseOutputWithContext(ctx context.Context) WebTestGeolocationResponseOutput {
	return o
}

// Location ID for the WebTest to run from.
func (o WebTestGeolocationResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestGeolocationResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

type WebTestGeolocationResponseArrayOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocationResponse)(nil)).Elem()
}

func (o WebTestGeolocationResponseArrayOutput) ToWebTestGeolocationResponseArrayOutput() WebTestGeolocationResponseArrayOutput {
	return o
}

func (o WebTestGeolocationResponseArrayOutput) ToWebTestGeolocationResponseArrayOutputWithContext(ctx context.Context) WebTestGeolocationResponseArrayOutput {
	return o
}

func (o WebTestGeolocationResponseArrayOutput) Index(i pulumi.IntInput) WebTestGeolocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebTestGeolocationResponse {
		return vs[0].([]WebTestGeolocationResponse)[vs[1].(int)]
	}).(WebTestGeolocationResponseOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfiguration struct {
	// The XML specification of a WebTest to run against an application.
	WebTest *string `pulumi:"webTest"`
}

// WebTestPropertiesConfigurationInput is an input type that accepts WebTestPropertiesConfigurationArgs and WebTestPropertiesConfigurationOutput values.
// You can construct a concrete instance of `WebTestPropertiesConfigurationInput` via:
//
//	WebTestPropertiesConfigurationArgs{...}
type WebTestPropertiesConfigurationInput interface {
	pulumi.Input

	ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput
	ToWebTestPropertiesConfigurationOutputWithContext(context.Context) WebTestPropertiesConfigurationOutput
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfigurationArgs struct {
	// The XML specification of a WebTest to run against an application.
	WebTest pulumi.StringPtrInput `pulumi:"webTest"`
}

func (WebTestPropertiesConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesConfiguration)(nil)).Elem()
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput {
	return i.ToWebTestPropertiesConfigurationOutputWithContext(context.Background())
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationOutput)
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return i.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationOutput).ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx)
}

// WebTestPropertiesConfigurationPtrInput is an input type that accepts WebTestPropertiesConfigurationArgs, WebTestPropertiesConfigurationPtr and WebTestPropertiesConfigurationPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesConfigurationPtrInput` via:
//
//	        WebTestPropertiesConfigurationArgs{...}
//
//	or:
//
//	        nil
type WebTestPropertiesConfigurationPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput
	ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Context) WebTestPropertiesConfigurationPtrOutput
}

type webTestPropertiesConfigurationPtrType WebTestPropertiesConfigurationArgs

func WebTestPropertiesConfigurationPtr(v *WebTestPropertiesConfigurationArgs) WebTestPropertiesConfigurationPtrInput {
	return (*webTestPropertiesConfigurationPtrType)(v)
}

func (*webTestPropertiesConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesConfiguration)(nil)).Elem()
}

func (i *webTestPropertiesConfigurationPtrType) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return i.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesConfigurationPtrType) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfigurationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput {
	return o
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationOutput {
	return o
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return o.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestPropertiesConfiguration) *WebTestPropertiesConfiguration {
		return &v
	}).(WebTestPropertiesConfigurationPtrOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesConfigurationOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesConfiguration) *string { return v.WebTest }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesConfigurationPtrOutput) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesConfigurationPtrOutput) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesConfigurationPtrOutput) Elem() WebTestPropertiesConfigurationOutput {
	return o.ApplyT(func(v *WebTestPropertiesConfiguration) WebTestPropertiesConfiguration {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesConfiguration
		return ret
	}).(WebTestPropertiesConfigurationOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesConfigurationPtrOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.WebTest
	}).(pulumi.StringPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesContentValidation struct {
	// Content to look for in the return of the WebTest.  Must not be null or empty.
	ContentMatch *string `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `pulumi:"passIfTextFound"`
}

// WebTestPropertiesContentValidationInput is an input type that accepts WebTestPropertiesContentValidationArgs and WebTestPropertiesContentValidationOutput values.
// You can construct a concrete instance of `WebTestPropertiesContentValidationInput` via:
//
//	WebTestPropertiesContentValidationArgs{...}
type WebTestPropertiesContentValidationInput interface {
	pulumi.Input

	ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput
	ToWebTestPropertiesContentValidationOutputWithContext(context.Context) WebTestPropertiesContentValidationOutput
}

// The collection of content validation properties
type WebTestPropertiesContentValidationArgs struct {
	// Content to look for in the return of the WebTest.  Must not be null or empty.
	ContentMatch pulumi.StringPtrInput `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound pulumi.BoolPtrInput `pulumi:"passIfTextFound"`
}

func (WebTestPropertiesContentValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesContentValidation)(nil)).Elem()
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput {
	return i.ToWebTestPropertiesContentValidationOutputWithContext(context.Background())
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationOutput)
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return i.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationOutput).ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx)
}

// WebTestPropertiesContentValidationPtrInput is an input type that accepts WebTestPropertiesContentValidationArgs, WebTestPropertiesContentValidationPtr and WebTestPropertiesContentValidationPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesContentValidationPtrInput` via:
//
//	        WebTestPropertiesContentValidationArgs{...}
//
//	or:
//
//	        nil
type WebTestPropertiesContentValidationPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput
	ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Context) WebTestPropertiesContentValidationPtrOutput
}

type webTestPropertiesContentValidationPtrType WebTestPropertiesContentValidationArgs

func WebTestPropertiesContentValidationPtr(v *WebTestPropertiesContentValidationArgs) WebTestPropertiesContentValidationPtrInput {
	return (*webTestPropertiesContentValidationPtrType)(v)
}

func (*webTestPropertiesContentValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesContentValidation)(nil)).Elem()
}

func (i *webTestPropertiesContentValidationPtrType) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return i.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesContentValidationPtrType) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesContentValidationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesContentValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput {
	return o
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationOutput {
	return o
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return o.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestPropertiesContentValidation) *WebTestPropertiesContentValidation {
		return &v
	}).(WebTestPropertiesContentValidationPtrOutput)
}

// Content to look for in the return of the WebTest.  Must not be null or empty.
func (o WebTestPropertiesContentValidationOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *string { return v.ContentMatch }).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesContentValidationOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesContentValidationOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *bool { return v.PassIfTextFound }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesContentValidationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesContentValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesContentValidationPtrOutput) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesContentValidationPtrOutput) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesContentValidationPtrOutput) Elem() WebTestPropertiesContentValidationOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) WebTestPropertiesContentValidation {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesContentValidation
		return ret
	}).(WebTestPropertiesContentValidationOutput)
}

// Content to look for in the return of the WebTest.  Must not be null or empty.
func (o WebTestPropertiesContentValidationPtrOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *string {
		if v == nil {
			return nil
		}
		return v.ContentMatch
	}).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesContentValidationPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesContentValidationPtrOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.PassIfTextFound
	}).(pulumi.BoolPtrOutput)
}

// The collection of request properties
type WebTestPropertiesRequest struct {
	// Follow redirects for this web test.
	FollowRedirects *bool `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers []HeaderField `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb *string `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody *string `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl *string `pulumi:"requestUrl"`
}

// WebTestPropertiesRequestInput is an input type that accepts WebTestPropertiesRequestArgs and WebTestPropertiesRequestOutput values.
// You can construct a concrete instance of `WebTestPropertiesRequestInput` via:
//
//	WebTestPropertiesRequestArgs{...}
type WebTestPropertiesRequestInput interface {
	pulumi.Input

	ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput
	ToWebTestPropertiesRequestOutputWithContext(context.Context) WebTestPropertiesRequestOutput
}

// The collection of request properties
type WebTestPropertiesRequestArgs struct {
	// Follow redirects for this web test.
	FollowRedirects pulumi.BoolPtrInput `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers HeaderFieldArrayInput `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb pulumi.StringPtrInput `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests pulumi.BoolPtrInput `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody pulumi.StringPtrInput `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl pulumi.StringPtrInput `pulumi:"requestUrl"`
}

func (WebTestPropertiesRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesRequest)(nil)).Elem()
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput {
	return i.ToWebTestPropertiesRequestOutputWithContext(context.Background())
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestOutputWithContext(ctx context.Context) WebTestPropertiesRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestOutput)
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return i.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestOutput).ToWebTestPropertiesRequestPtrOutputWithContext(ctx)
}

// WebTestPropertiesRequestPtrInput is an input type that accepts WebTestPropertiesRequestArgs, WebTestPropertiesRequestPtr and WebTestPropertiesRequestPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesRequestPtrInput` via:
//
//	        WebTestPropertiesRequestArgs{...}
//
//	or:
//
//	        nil
type WebTestPropertiesRequestPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput
	ToWebTestPropertiesRequestPtrOutputWithContext(context.Context) WebTestPropertiesRequestPtrOutput
}

type webTestPropertiesRequestPtrType WebTestPropertiesRequestArgs

func WebTestPropertiesRequestPtr(v *WebTestPropertiesRequestArgs) WebTestPropertiesRequestPtrInput {
	return (*webTestPropertiesRequestPtrType)(v)
}

func (*webTestPropertiesRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesRequest)(nil)).Elem()
}

func (i *webTestPropertiesRequestPtrType) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return i.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesRequestPtrType) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestPtrOutput)
}

// The collection of request properties
type WebTestPropertiesRequestOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesRequest)(nil)).Elem()
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput {
	return o
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestOutputWithContext(ctx context.Context) WebTestPropertiesRequestOutput {
	return o
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return o.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestPropertiesRequest) *WebTestPropertiesRequest {
		return &v
	}).(WebTestPropertiesRequestPtrOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesRequestOutput) Headers() HeaderFieldArrayOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) []HeaderField { return v.Headers }).(HeaderFieldArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesRequestOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.HttpVerb }).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesRequestOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *bool { return v.ParseDependentRequests }).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesRequestOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.RequestBody }).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesRequestOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.RequestUrl }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesRequestPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesRequest)(nil)).Elem()
}

func (o WebTestPropertiesRequestPtrOutput) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return o
}

func (o WebTestPropertiesRequestPtrOutput) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return o
}

func (o WebTestPropertiesRequestPtrOutput) Elem() WebTestPropertiesRequestOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) WebTestPropertiesRequest {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesRequest
		return ret
	}).(WebTestPropertiesRequestOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesRequestPtrOutput) Headers() HeaderFieldArrayOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) []HeaderField {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderFieldArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesRequestPtrOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpVerb
	}).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesRequestPtrOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *bool {
		if v == nil {
			return nil
		}
		return v.ParseDependentRequests
	}).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesRequestPtrOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesRequestPtrOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestUrl
	}).(pulumi.StringPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponseConfiguration struct {
	// The XML specification of a WebTest to run against an application.
	WebTest *string `pulumi:"webTest"`
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponseConfigurationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesResponseConfigurationOutput) ToWebTestPropertiesResponseConfigurationOutput() WebTestPropertiesResponseConfigurationOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationOutput) ToWebTestPropertiesResponseConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationOutput {
	return o
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesResponseConfigurationOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseConfiguration) *string { return v.WebTest }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesResponseConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) ToWebTestPropertiesResponseConfigurationPtrOutput() WebTestPropertiesResponseConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) Elem() WebTestPropertiesResponseConfigurationOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseConfiguration) WebTestPropertiesResponseConfiguration {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesResponseConfiguration
		return ret
	}).(WebTestPropertiesResponseConfigurationOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesResponseConfigurationPtrOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.WebTest
	}).(pulumi.StringPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesResponseContentValidation struct {
	// Content to look for in the return of the WebTest.  Must not be null or empty.
	ContentMatch *string `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `pulumi:"passIfTextFound"`
}

// The collection of content validation properties
type WebTestPropertiesResponseContentValidationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseContentValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesResponseContentValidationOutput) ToWebTestPropertiesResponseContentValidationOutput() WebTestPropertiesResponseContentValidationOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationOutput) ToWebTestPropertiesResponseContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationOutput {
	return o
}

// Content to look for in the return of the WebTest.  Must not be null or empty.
func (o WebTestPropertiesResponseContentValidationOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *string { return v.ContentMatch }).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesResponseContentValidationOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesResponseContentValidationOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *bool { return v.PassIfTextFound }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesResponseContentValidationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseContentValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) ToWebTestPropertiesResponseContentValidationPtrOutput() WebTestPropertiesResponseContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) Elem() WebTestPropertiesResponseContentValidationOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) WebTestPropertiesResponseContentValidation {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesResponseContentValidation
		return ret
	}).(WebTestPropertiesResponseContentValidationOutput)
}

// Content to look for in the return of the WebTest.  Must not be null or empty.
func (o WebTestPropertiesResponseContentValidationPtrOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *string {
		if v == nil {
			return nil
		}
		return v.ContentMatch
	}).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesResponseContentValidationPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesResponseContentValidationPtrOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.PassIfTextFound
	}).(pulumi.BoolPtrOutput)
}

// The collection of request properties
type WebTestPropertiesResponseRequest struct {
	// Follow redirects for this web test.
	FollowRedirects *bool `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers []HeaderFieldResponse `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb *string `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody *string `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl *string `pulumi:"requestUrl"`
}

// The collection of request properties
type WebTestPropertiesResponseRequestOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseRequest)(nil)).Elem()
}

func (o WebTestPropertiesResponseRequestOutput) ToWebTestPropertiesResponseRequestOutput() WebTestPropertiesResponseRequestOutput {
	return o
}

func (o WebTestPropertiesResponseRequestOutput) ToWebTestPropertiesResponseRequestOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestOutput {
	return o
}

// Follow redirects for this web test.
func (o WebTestPropertiesResponseRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesResponseRequestOutput) Headers() HeaderFieldResponseArrayOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) []HeaderFieldResponse { return v.Headers }).(HeaderFieldResponseArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesResponseRequestOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.HttpVerb }).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesResponseRequestOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *bool { return v.ParseDependentRequests }).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesResponseRequestOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.RequestBody }).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesResponseRequestOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.RequestUrl }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesResponseRequestPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseRequest)(nil)).Elem()
}

func (o WebTestPropertiesResponseRequestPtrOutput) ToWebTestPropertiesResponseRequestPtrOutput() WebTestPropertiesResponseRequestPtrOutput {
	return o
}

func (o WebTestPropertiesResponseRequestPtrOutput) ToWebTestPropertiesResponseRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestPtrOutput {
	return o
}

func (o WebTestPropertiesResponseRequestPtrOutput) Elem() WebTestPropertiesResponseRequestOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) WebTestPropertiesResponseRequest {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesResponseRequest
		return ret
	}).(WebTestPropertiesResponseRequestOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesResponseRequestPtrOutput) Headers() HeaderFieldResponseArrayOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) []HeaderFieldResponse {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderFieldResponseArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpVerb
	}).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesResponseRequestPtrOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *bool {
		if v == nil {
			return nil
		}
		return v.ParseDependentRequests
	}).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesResponseRequestPtrOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestUrl
	}).(pulumi.StringPtrOutput)
}

// The collection of validation rule properties
type WebTestPropertiesResponseValidationRules struct {
	// The collection of content validation properties
	ContentValidation *WebTestPropertiesResponseContentValidation `pulumi:"contentValidation"`
	// Validate that the WebTest returns the http status code provided.
	ExpectedHttpStatusCode *int `pulumi:"expectedHttpStatusCode"`
	// When set, validation will ignore the status code.
	IgnoreHttpsStatusCode *bool `pulumi:"ignoreHttpsStatusCode"`
	// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
	SSLCertRemainingLifetimeCheck *int `pulumi:"sSLCertRemainingLifetimeCheck"`
	// Checks to see if the SSL cert is still valid.
	SSLCheck *bool `pulumi:"sSLCheck"`
}

// The collection of validation rule properties
type WebTestPropertiesResponseValidationRulesOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseValidationRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseValidationRules)(nil)).Elem()
}

func (o WebTestPropertiesResponseValidationRulesOutput) ToWebTestPropertiesResponseValidationRulesOutput() WebTestPropertiesResponseValidationRulesOutput {
	return o
}

func (o WebTestPropertiesResponseValidationRulesOutput) ToWebTestPropertiesResponseValidationRulesOutputWithContext(ctx context.Context) WebTestPropertiesResponseValidationRulesOutput {
	return o
}

// The collection of content validation properties
func (o WebTestPropertiesResponseValidationRulesOutput) ContentValidation() WebTestPropertiesResponseContentValidationPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *WebTestPropertiesResponseContentValidation {
		return v.ContentValidation
	}).(WebTestPropertiesResponseContentValidationPtrOutput)
}

// Validate that the WebTest returns the http status code provided.
func (o WebTestPropertiesResponseValidationRulesOutput) ExpectedHttpStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *int { return v.ExpectedHttpStatusCode }).(pulumi.IntPtrOutput)
}

// When set, validation will ignore the status code.
func (o WebTestPropertiesResponseValidationRulesOutput) IgnoreHttpsStatusCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *bool { return v.IgnoreHttpsStatusCode }).(pulumi.BoolPtrOutput)
}

// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
func (o WebTestPropertiesResponseValidationRulesOutput) SSLCertRemainingLifetimeCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *int { return v.SSLCertRemainingLifetimeCheck }).(pulumi.IntPtrOutput)
}

// Checks to see if the SSL cert is still valid.
func (o WebTestPropertiesResponseValidationRulesOutput) SSLCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *bool { return v.SSLCheck }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesResponseValidationRulesPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseValidationRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseValidationRules)(nil)).Elem()
}

func (o WebTestPropertiesResponseValidationRulesPtrOutput) ToWebTestPropertiesResponseValidationRulesPtrOutput() WebTestPropertiesResponseValidationRulesPtrOutput {
	return o
}

func (o WebTestPropertiesResponseValidationRulesPtrOutput) ToWebTestPropertiesResponseValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseValidationRulesPtrOutput {
	return o
}

func (o WebTestPropertiesResponseValidationRulesPtrOutput) Elem() WebTestPropertiesResponseValidationRulesOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) WebTestPropertiesResponseValidationRules {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesResponseValidationRules
		return ret
	}).(WebTestPropertiesResponseValidationRulesOutput)
}

// The collection of content validation properties
func (o WebTestPropertiesResponseValidationRulesPtrOutput) ContentValidation() WebTestPropertiesResponseContentValidationPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *WebTestPropertiesResponseContentValidation {
		if v == nil {
			return nil
		}
		return v.ContentValidation
	}).(WebTestPropertiesResponseContentValidationPtrOutput)
}

// Validate that the WebTest returns the http status code provided.
func (o WebTestPropertiesResponseValidationRulesPtrOutput) ExpectedHttpStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.ExpectedHttpStatusCode
	}).(pulumi.IntPtrOutput)
}

// When set, validation will ignore the status code.
func (o WebTestPropertiesResponseValidationRulesPtrOutput) IgnoreHttpsStatusCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreHttpsStatusCode
	}).(pulumi.BoolPtrOutput)
}

// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
func (o WebTestPropertiesResponseValidationRulesPtrOutput) SSLCertRemainingLifetimeCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.SSLCertRemainingLifetimeCheck
	}).(pulumi.IntPtrOutput)
}

// Checks to see if the SSL cert is still valid.
func (o WebTestPropertiesResponseValidationRulesPtrOutput) SSLCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.SSLCheck
	}).(pulumi.BoolPtrOutput)
}

// The collection of validation rule properties
type WebTestPropertiesValidationRules struct {
	// The collection of content validation properties
	ContentValidation *WebTestPropertiesContentValidation `pulumi:"contentValidation"`
	// Validate that the WebTest returns the http status code provided.
	ExpectedHttpStatusCode *int `pulumi:"expectedHttpStatusCode"`
	// When set, validation will ignore the status code.
	IgnoreHttpsStatusCode *bool `pulumi:"ignoreHttpsStatusCode"`
	// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
	SSLCertRemainingLifetimeCheck *int `pulumi:"sSLCertRemainingLifetimeCheck"`
	// Checks to see if the SSL cert is still valid.
	SSLCheck *bool `pulumi:"sSLCheck"`
}

// WebTestPropertiesValidationRulesInput is an input type that accepts WebTestPropertiesValidationRulesArgs and WebTestPropertiesValidationRulesOutput values.
// You can construct a concrete instance of `WebTestPropertiesValidationRulesInput` via:
//
//	WebTestPropertiesValidationRulesArgs{...}
type WebTestPropertiesValidationRulesInput interface {
	pulumi.Input

	ToWebTestPropertiesValidationRulesOutput() WebTestPropertiesValidationRulesOutput
	ToWebTestPropertiesValidationRulesOutputWithContext(context.Context) WebTestPropertiesValidationRulesOutput
}

// The collection of validation rule properties
type WebTestPropertiesValidationRulesArgs struct {
	// The collection of content validation properties
	ContentValidation WebTestPropertiesContentValidationPtrInput `pulumi:"contentValidation"`
	// Validate that the WebTest returns the http status code provided.
	ExpectedHttpStatusCode pulumi.IntPtrInput `pulumi:"expectedHttpStatusCode"`
	// When set, validation will ignore the status code.
	IgnoreHttpsStatusCode pulumi.BoolPtrInput `pulumi:"ignoreHttpsStatusCode"`
	// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
	SSLCertRemainingLifetimeCheck pulumi.IntPtrInput `pulumi:"sSLCertRemainingLifetimeCheck"`
	// Checks to see if the SSL cert is still valid.
	SSLCheck pulumi.BoolPtrInput `pulumi:"sSLCheck"`
}

func (WebTestPropertiesValidationRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesValidationRules)(nil)).Elem()
}

func (i WebTestPropertiesValidationRulesArgs) ToWebTestPropertiesValidationRulesOutput() WebTestPropertiesValidationRulesOutput {
	return i.ToWebTestPropertiesValidationRulesOutputWithContext(context.Background())
}

func (i WebTestPropertiesValidationRulesArgs) ToWebTestPropertiesValidationRulesOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesValidationRulesOutput)
}

func (i WebTestPropertiesValidationRulesArgs) ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput {
	return i.ToWebTestPropertiesValidationRulesPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesValidationRulesArgs) ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesValidationRulesOutput).ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx)
}

// WebTestPropertiesValidationRulesPtrInput is an input type that accepts WebTestPropertiesValidationRulesArgs, WebTestPropertiesValidationRulesPtr and WebTestPropertiesValidationRulesPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesValidationRulesPtrInput` via:
//
//	        WebTestPropertiesValidationRulesArgs{...}
//
//	or:
//
//	        nil
type WebTestPropertiesValidationRulesPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput
	ToWebTestPropertiesValidationRulesPtrOutputWithContext(context.Context) WebTestPropertiesValidationRulesPtrOutput
}

type webTestPropertiesValidationRulesPtrType WebTestPropertiesValidationRulesArgs

func WebTestPropertiesValidationRulesPtr(v *WebTestPropertiesValidationRulesArgs) WebTestPropertiesValidationRulesPtrInput {
	return (*webTestPropertiesValidationRulesPtrType)(v)
}

func (*webTestPropertiesValidationRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesValidationRules)(nil)).Elem()
}

func (i *webTestPropertiesValidationRulesPtrType) ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput {
	return i.ToWebTestPropertiesValidationRulesPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesValidationRulesPtrType) ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesValidationRulesPtrOutput)
}

// The collection of validation rule properties
type WebTestPropertiesValidationRulesOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesValidationRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesValidationRules)(nil)).Elem()
}

func (o WebTestPropertiesValidationRulesOutput) ToWebTestPropertiesValidationRulesOutput() WebTestPropertiesValidationRulesOutput {
	return o
}

func (o WebTestPropertiesValidationRulesOutput) ToWebTestPropertiesValidationRulesOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesOutput {
	return o
}

func (o WebTestPropertiesValidationRulesOutput) ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput {
	return o.ToWebTestPropertiesValidationRulesPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesValidationRulesOutput) ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestPropertiesValidationRules) *WebTestPropertiesValidationRules {
		return &v
	}).(WebTestPropertiesValidationRulesPtrOutput)
}

// The collection of content validation properties
func (o WebTestPropertiesValidationRulesOutput) ContentValidation() WebTestPropertiesContentValidationPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *WebTestPropertiesContentValidation {
		return v.ContentValidation
	}).(WebTestPropertiesContentValidationPtrOutput)
}

// Validate that the WebTest returns the http status code provided.
func (o WebTestPropertiesValidationRulesOutput) ExpectedHttpStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *int { return v.ExpectedHttpStatusCode }).(pulumi.IntPtrOutput)
}

// When set, validation will ignore the status code.
func (o WebTestPropertiesValidationRulesOutput) IgnoreHttpsStatusCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *bool { return v.IgnoreHttpsStatusCode }).(pulumi.BoolPtrOutput)
}

// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
func (o WebTestPropertiesValidationRulesOutput) SSLCertRemainingLifetimeCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *int { return v.SSLCertRemainingLifetimeCheck }).(pulumi.IntPtrOutput)
}

// Checks to see if the SSL cert is still valid.
func (o WebTestPropertiesValidationRulesOutput) SSLCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *bool { return v.SSLCheck }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesValidationRulesPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesValidationRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesValidationRules)(nil)).Elem()
}

func (o WebTestPropertiesValidationRulesPtrOutput) ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput {
	return o
}

func (o WebTestPropertiesValidationRulesPtrOutput) ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesPtrOutput {
	return o
}

func (o WebTestPropertiesValidationRulesPtrOutput) Elem() WebTestPropertiesValidationRulesOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) WebTestPropertiesValidationRules {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesValidationRules
		return ret
	}).(WebTestPropertiesValidationRulesOutput)
}

// The collection of content validation properties
func (o WebTestPropertiesValidationRulesPtrOutput) ContentValidation() WebTestPropertiesContentValidationPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *WebTestPropertiesContentValidation {
		if v == nil {
			return nil
		}
		return v.ContentValidation
	}).(WebTestPropertiesContentValidationPtrOutput)
}

// Validate that the WebTest returns the http status code provided.
func (o WebTestPropertiesValidationRulesPtrOutput) ExpectedHttpStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.ExpectedHttpStatusCode
	}).(pulumi.IntPtrOutput)
}

// When set, validation will ignore the status code.
func (o WebTestPropertiesValidationRulesPtrOutput) IgnoreHttpsStatusCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreHttpsStatusCode
	}).(pulumi.BoolPtrOutput)
}

// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
func (o WebTestPropertiesValidationRulesPtrOutput) SSLCertRemainingLifetimeCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.SSLCertRemainingLifetimeCheck
	}).(pulumi.IntPtrOutput)
}

// Checks to see if the SSL cert is still valid.
func (o WebTestPropertiesValidationRulesPtrOutput) SSLCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.SSLCheck
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitionsPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsPtrOutput{})
	pulumi.RegisterOutputType(HeaderFieldOutput{})
	pulumi.RegisterOutputType(HeaderFieldArrayOutput{})
	pulumi.RegisterOutputType(HeaderFieldResponseOutput{})
	pulumi.RegisterOutputType(HeaderFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationArrayOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationResponseOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationResponseArrayOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesConfigurationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesContentValidationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesContentValidationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesRequestOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesRequestPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseConfigurationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseContentValidationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseContentValidationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseRequestOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseRequestPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseValidationRulesOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseValidationRulesPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesValidationRulesOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesValidationRulesPtrOutput{})
}
