// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201005preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The kind of WebTest that this web test watches. Choices are ping and multistep.
type WebTestKind string

const (
	WebTestKindPing      = WebTestKind("ping")
	WebTestKindMultistep = WebTestKind("multistep")
)

func (WebTestKind) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestKind)(nil)).Elem()
}

func (e WebTestKind) ToWebTestKindOutput() WebTestKindOutput {
	return pulumi.ToOutput(e).(WebTestKindOutput)
}

func (e WebTestKind) ToWebTestKindOutputWithContext(ctx context.Context) WebTestKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WebTestKindOutput)
}

func (e WebTestKind) ToWebTestKindPtrOutput() WebTestKindPtrOutput {
	return e.ToWebTestKindPtrOutputWithContext(context.Background())
}

func (e WebTestKind) ToWebTestKindPtrOutputWithContext(ctx context.Context) WebTestKindPtrOutput {
	return WebTestKind(e).ToWebTestKindOutputWithContext(ctx).ToWebTestKindPtrOutputWithContext(ctx)
}

func (e WebTestKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WebTestKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WebTestKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WebTestKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WebTestKindOutput struct{ *pulumi.OutputState }

func (WebTestKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestKind)(nil)).Elem()
}

func (o WebTestKindOutput) ToWebTestKindOutput() WebTestKindOutput {
	return o
}

func (o WebTestKindOutput) ToWebTestKindOutputWithContext(ctx context.Context) WebTestKindOutput {
	return o
}

func (o WebTestKindOutput) ToWebTestKindPtrOutput() WebTestKindPtrOutput {
	return o.ToWebTestKindPtrOutputWithContext(context.Background())
}

func (o WebTestKindOutput) ToWebTestKindPtrOutputWithContext(ctx context.Context) WebTestKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestKind) *WebTestKind {
		return &v
	}).(WebTestKindPtrOutput)
}

func (o WebTestKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WebTestKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WebTestKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WebTestKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WebTestKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WebTestKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WebTestKindPtrOutput struct{ *pulumi.OutputState }

func (WebTestKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestKind)(nil)).Elem()
}

func (o WebTestKindPtrOutput) ToWebTestKindPtrOutput() WebTestKindPtrOutput {
	return o
}

func (o WebTestKindPtrOutput) ToWebTestKindPtrOutputWithContext(ctx context.Context) WebTestKindPtrOutput {
	return o
}

func (o WebTestKindPtrOutput) Elem() WebTestKindOutput {
	return o.ApplyT(func(v *WebTestKind) WebTestKind {
		if v != nil {
			return *v
		}
		var ret WebTestKind
		return ret
	}).(WebTestKindOutput)
}

func (o WebTestKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WebTestKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WebTestKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WebTestKindInput is an input type that accepts WebTestKindArgs and WebTestKindOutput values.
// You can construct a concrete instance of `WebTestKindInput` via:
//
//	WebTestKindArgs{...}
type WebTestKindInput interface {
	pulumi.Input

	ToWebTestKindOutput() WebTestKindOutput
	ToWebTestKindOutputWithContext(context.Context) WebTestKindOutput
}

var webTestKindPtrType = reflect.TypeOf((**WebTestKind)(nil)).Elem()

type WebTestKindPtrInput interface {
	pulumi.Input

	ToWebTestKindPtrOutput() WebTestKindPtrOutput
	ToWebTestKindPtrOutputWithContext(context.Context) WebTestKindPtrOutput
}

type webTestKindPtr string

func WebTestKindPtr(v string) WebTestKindPtrInput {
	return (*webTestKindPtr)(&v)
}

func (*webTestKindPtr) ElementType() reflect.Type {
	return webTestKindPtrType
}

func (in *webTestKindPtr) ToWebTestKindPtrOutput() WebTestKindPtrOutput {
	return pulumi.ToOutput(in).(WebTestKindPtrOutput)
}

func (in *webTestKindPtr) ToWebTestKindPtrOutputWithContext(ctx context.Context) WebTestKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WebTestKindPtrOutput)
}

// The kind of web test this is, valid choices are ping, multistep, basic, and standard.
type WebTestKindEnum string

const (
	WebTestKindEnumPing      = WebTestKindEnum("ping")
	WebTestKindEnumMultistep = WebTestKindEnum("multistep")
	WebTestKindEnumBasic     = WebTestKindEnum("basic")
	WebTestKindEnumStandard  = WebTestKindEnum("standard")
)

func (WebTestKindEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestKindEnum)(nil)).Elem()
}

func (e WebTestKindEnum) ToWebTestKindEnumOutput() WebTestKindEnumOutput {
	return pulumi.ToOutput(e).(WebTestKindEnumOutput)
}

func (e WebTestKindEnum) ToWebTestKindEnumOutputWithContext(ctx context.Context) WebTestKindEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WebTestKindEnumOutput)
}

func (e WebTestKindEnum) ToWebTestKindEnumPtrOutput() WebTestKindEnumPtrOutput {
	return e.ToWebTestKindEnumPtrOutputWithContext(context.Background())
}

func (e WebTestKindEnum) ToWebTestKindEnumPtrOutputWithContext(ctx context.Context) WebTestKindEnumPtrOutput {
	return WebTestKindEnum(e).ToWebTestKindEnumOutputWithContext(ctx).ToWebTestKindEnumPtrOutputWithContext(ctx)
}

func (e WebTestKindEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WebTestKindEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WebTestKindEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WebTestKindEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WebTestKindEnumOutput struct{ *pulumi.OutputState }

func (WebTestKindEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestKindEnum)(nil)).Elem()
}

func (o WebTestKindEnumOutput) ToWebTestKindEnumOutput() WebTestKindEnumOutput {
	return o
}

func (o WebTestKindEnumOutput) ToWebTestKindEnumOutputWithContext(ctx context.Context) WebTestKindEnumOutput {
	return o
}

func (o WebTestKindEnumOutput) ToWebTestKindEnumPtrOutput() WebTestKindEnumPtrOutput {
	return o.ToWebTestKindEnumPtrOutputWithContext(context.Background())
}

func (o WebTestKindEnumOutput) ToWebTestKindEnumPtrOutputWithContext(ctx context.Context) WebTestKindEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestKindEnum) *WebTestKindEnum {
		return &v
	}).(WebTestKindEnumPtrOutput)
}

func (o WebTestKindEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WebTestKindEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WebTestKindEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WebTestKindEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WebTestKindEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WebTestKindEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WebTestKindEnumPtrOutput struct{ *pulumi.OutputState }

func (WebTestKindEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestKindEnum)(nil)).Elem()
}

func (o WebTestKindEnumPtrOutput) ToWebTestKindEnumPtrOutput() WebTestKindEnumPtrOutput {
	return o
}

func (o WebTestKindEnumPtrOutput) ToWebTestKindEnumPtrOutputWithContext(ctx context.Context) WebTestKindEnumPtrOutput {
	return o
}

func (o WebTestKindEnumPtrOutput) Elem() WebTestKindEnumOutput {
	return o.ApplyT(func(v *WebTestKindEnum) WebTestKindEnum {
		if v != nil {
			return *v
		}
		var ret WebTestKindEnum
		return ret
	}).(WebTestKindEnumOutput)
}

func (o WebTestKindEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WebTestKindEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WebTestKindEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WebTestKindEnumInput is an input type that accepts WebTestKindEnumArgs and WebTestKindEnumOutput values.
// You can construct a concrete instance of `WebTestKindEnumInput` via:
//
//	WebTestKindEnumArgs{...}
type WebTestKindEnumInput interface {
	pulumi.Input

	ToWebTestKindEnumOutput() WebTestKindEnumOutput
	ToWebTestKindEnumOutputWithContext(context.Context) WebTestKindEnumOutput
}

var webTestKindEnumPtrType = reflect.TypeOf((**WebTestKindEnum)(nil)).Elem()

type WebTestKindEnumPtrInput interface {
	pulumi.Input

	ToWebTestKindEnumPtrOutput() WebTestKindEnumPtrOutput
	ToWebTestKindEnumPtrOutputWithContext(context.Context) WebTestKindEnumPtrOutput
}

type webTestKindEnumPtr string

func WebTestKindEnumPtr(v string) WebTestKindEnumPtrInput {
	return (*webTestKindEnumPtr)(&v)
}

func (*webTestKindEnumPtr) ElementType() reflect.Type {
	return webTestKindEnumPtrType
}

func (in *webTestKindEnumPtr) ToWebTestKindEnumPtrOutput() WebTestKindEnumPtrOutput {
	return pulumi.ToOutput(in).(WebTestKindEnumPtrOutput)
}

func (in *webTestKindEnumPtr) ToWebTestKindEnumPtrOutputWithContext(ctx context.Context) WebTestKindEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WebTestKindEnumPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(WebTestKindOutput{})
	pulumi.RegisterOutputType(WebTestKindPtrOutput{})
	pulumi.RegisterOutputType(WebTestKindEnumOutput{})
	pulumi.RegisterOutputType(WebTestKindEnumPtrOutput{})
}
