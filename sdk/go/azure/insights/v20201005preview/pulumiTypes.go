// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201005preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A header to add to the WebTest.
type HeaderField struct {
	// The name of the header.
	HeaderFieldName *string `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue *string `pulumi:"headerFieldValue"`
}

// HeaderFieldInput is an input type that accepts HeaderFieldArgs and HeaderFieldOutput values.
// You can construct a concrete instance of `HeaderFieldInput` via:
//
//          HeaderFieldArgs{...}
type HeaderFieldInput interface {
	pulumi.Input

	ToHeaderFieldOutput() HeaderFieldOutput
	ToHeaderFieldOutputWithContext(context.Context) HeaderFieldOutput
}

// A header to add to the WebTest.
type HeaderFieldArgs struct {
	// The name of the header.
	HeaderFieldName pulumi.StringPtrInput `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue pulumi.StringPtrInput `pulumi:"headerFieldValue"`
}

func (HeaderFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderField)(nil)).Elem()
}

func (i HeaderFieldArgs) ToHeaderFieldOutput() HeaderFieldOutput {
	return i.ToHeaderFieldOutputWithContext(context.Background())
}

func (i HeaderFieldArgs) ToHeaderFieldOutputWithContext(ctx context.Context) HeaderFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderFieldOutput)
}

// HeaderFieldArrayInput is an input type that accepts HeaderFieldArray and HeaderFieldArrayOutput values.
// You can construct a concrete instance of `HeaderFieldArrayInput` via:
//
//          HeaderFieldArray{ HeaderFieldArgs{...} }
type HeaderFieldArrayInput interface {
	pulumi.Input

	ToHeaderFieldArrayOutput() HeaderFieldArrayOutput
	ToHeaderFieldArrayOutputWithContext(context.Context) HeaderFieldArrayOutput
}

type HeaderFieldArray []HeaderFieldInput

func (HeaderFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderField)(nil)).Elem()
}

func (i HeaderFieldArray) ToHeaderFieldArrayOutput() HeaderFieldArrayOutput {
	return i.ToHeaderFieldArrayOutputWithContext(context.Background())
}

func (i HeaderFieldArray) ToHeaderFieldArrayOutputWithContext(ctx context.Context) HeaderFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderFieldArrayOutput)
}

// A header to add to the WebTest.
type HeaderFieldOutput struct{ *pulumi.OutputState }

func (HeaderFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderField)(nil)).Elem()
}

func (o HeaderFieldOutput) ToHeaderFieldOutput() HeaderFieldOutput {
	return o
}

func (o HeaderFieldOutput) ToHeaderFieldOutputWithContext(ctx context.Context) HeaderFieldOutput {
	return o
}

// The name of the header.
func (o HeaderFieldOutput) HeaderFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderField) *string { return v.HeaderFieldName }).(pulumi.StringPtrOutput)
}

// The value of the header.
func (o HeaderFieldOutput) HeaderFieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderField) *string { return v.HeaderFieldValue }).(pulumi.StringPtrOutput)
}

type HeaderFieldArrayOutput struct{ *pulumi.OutputState }

func (HeaderFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderField)(nil)).Elem()
}

func (o HeaderFieldArrayOutput) ToHeaderFieldArrayOutput() HeaderFieldArrayOutput {
	return o
}

func (o HeaderFieldArrayOutput) ToHeaderFieldArrayOutputWithContext(ctx context.Context) HeaderFieldArrayOutput {
	return o
}

func (o HeaderFieldArrayOutput) Index(i pulumi.IntInput) HeaderFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderField {
		return vs[0].([]HeaderField)[vs[1].(int)]
	}).(HeaderFieldOutput)
}

// A header to add to the WebTest.
type HeaderFieldResponse struct {
	// The name of the header.
	HeaderFieldName *string `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue *string `pulumi:"headerFieldValue"`
}

// HeaderFieldResponseInput is an input type that accepts HeaderFieldResponseArgs and HeaderFieldResponseOutput values.
// You can construct a concrete instance of `HeaderFieldResponseInput` via:
//
//          HeaderFieldResponseArgs{...}
type HeaderFieldResponseInput interface {
	pulumi.Input

	ToHeaderFieldResponseOutput() HeaderFieldResponseOutput
	ToHeaderFieldResponseOutputWithContext(context.Context) HeaderFieldResponseOutput
}

// A header to add to the WebTest.
type HeaderFieldResponseArgs struct {
	// The name of the header.
	HeaderFieldName pulumi.StringPtrInput `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue pulumi.StringPtrInput `pulumi:"headerFieldValue"`
}

func (HeaderFieldResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderFieldResponse)(nil)).Elem()
}

func (i HeaderFieldResponseArgs) ToHeaderFieldResponseOutput() HeaderFieldResponseOutput {
	return i.ToHeaderFieldResponseOutputWithContext(context.Background())
}

func (i HeaderFieldResponseArgs) ToHeaderFieldResponseOutputWithContext(ctx context.Context) HeaderFieldResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderFieldResponseOutput)
}

// HeaderFieldResponseArrayInput is an input type that accepts HeaderFieldResponseArray and HeaderFieldResponseArrayOutput values.
// You can construct a concrete instance of `HeaderFieldResponseArrayInput` via:
//
//          HeaderFieldResponseArray{ HeaderFieldResponseArgs{...} }
type HeaderFieldResponseArrayInput interface {
	pulumi.Input

	ToHeaderFieldResponseArrayOutput() HeaderFieldResponseArrayOutput
	ToHeaderFieldResponseArrayOutputWithContext(context.Context) HeaderFieldResponseArrayOutput
}

type HeaderFieldResponseArray []HeaderFieldResponseInput

func (HeaderFieldResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderFieldResponse)(nil)).Elem()
}

func (i HeaderFieldResponseArray) ToHeaderFieldResponseArrayOutput() HeaderFieldResponseArrayOutput {
	return i.ToHeaderFieldResponseArrayOutputWithContext(context.Background())
}

func (i HeaderFieldResponseArray) ToHeaderFieldResponseArrayOutputWithContext(ctx context.Context) HeaderFieldResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderFieldResponseArrayOutput)
}

// A header to add to the WebTest.
type HeaderFieldResponseOutput struct{ *pulumi.OutputState }

func (HeaderFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderFieldResponse)(nil)).Elem()
}

func (o HeaderFieldResponseOutput) ToHeaderFieldResponseOutput() HeaderFieldResponseOutput {
	return o
}

func (o HeaderFieldResponseOutput) ToHeaderFieldResponseOutputWithContext(ctx context.Context) HeaderFieldResponseOutput {
	return o
}

// The name of the header.
func (o HeaderFieldResponseOutput) HeaderFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderFieldResponse) *string { return v.HeaderFieldName }).(pulumi.StringPtrOutput)
}

// The value of the header.
func (o HeaderFieldResponseOutput) HeaderFieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderFieldResponse) *string { return v.HeaderFieldValue }).(pulumi.StringPtrOutput)
}

type HeaderFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (HeaderFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderFieldResponse)(nil)).Elem()
}

func (o HeaderFieldResponseArrayOutput) ToHeaderFieldResponseArrayOutput() HeaderFieldResponseArrayOutput {
	return o
}

func (o HeaderFieldResponseArrayOutput) ToHeaderFieldResponseArrayOutputWithContext(ctx context.Context) HeaderFieldResponseArrayOutput {
	return o
}

func (o HeaderFieldResponseArrayOutput) Index(i pulumi.IntInput) HeaderFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderFieldResponse {
		return vs[0].([]HeaderFieldResponse)[vs[1].(int)]
	}).(HeaderFieldResponseOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocation struct {
	// Location ID for the WebTest to run from.
	Location *string `pulumi:"location"`
}

// WebTestGeolocationInput is an input type that accepts WebTestGeolocationArgs and WebTestGeolocationOutput values.
// You can construct a concrete instance of `WebTestGeolocationInput` via:
//
//          WebTestGeolocationArgs{...}
type WebTestGeolocationInput interface {
	pulumi.Input

	ToWebTestGeolocationOutput() WebTestGeolocationOutput
	ToWebTestGeolocationOutputWithContext(context.Context) WebTestGeolocationOutput
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationArgs struct {
	// Location ID for the WebTest to run from.
	Location pulumi.StringPtrInput `pulumi:"location"`
}

func (WebTestGeolocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocation)(nil)).Elem()
}

func (i WebTestGeolocationArgs) ToWebTestGeolocationOutput() WebTestGeolocationOutput {
	return i.ToWebTestGeolocationOutputWithContext(context.Background())
}

func (i WebTestGeolocationArgs) ToWebTestGeolocationOutputWithContext(ctx context.Context) WebTestGeolocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationOutput)
}

// WebTestGeolocationArrayInput is an input type that accepts WebTestGeolocationArray and WebTestGeolocationArrayOutput values.
// You can construct a concrete instance of `WebTestGeolocationArrayInput` via:
//
//          WebTestGeolocationArray{ WebTestGeolocationArgs{...} }
type WebTestGeolocationArrayInput interface {
	pulumi.Input

	ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput
	ToWebTestGeolocationArrayOutputWithContext(context.Context) WebTestGeolocationArrayOutput
}

type WebTestGeolocationArray []WebTestGeolocationInput

func (WebTestGeolocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocation)(nil)).Elem()
}

func (i WebTestGeolocationArray) ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput {
	return i.ToWebTestGeolocationArrayOutputWithContext(context.Background())
}

func (i WebTestGeolocationArray) ToWebTestGeolocationArrayOutputWithContext(ctx context.Context) WebTestGeolocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationArrayOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocation)(nil)).Elem()
}

func (o WebTestGeolocationOutput) ToWebTestGeolocationOutput() WebTestGeolocationOutput {
	return o
}

func (o WebTestGeolocationOutput) ToWebTestGeolocationOutputWithContext(ctx context.Context) WebTestGeolocationOutput {
	return o
}

// Location ID for the WebTest to run from.
func (o WebTestGeolocationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestGeolocation) *string { return v.Location }).(pulumi.StringPtrOutput)
}

type WebTestGeolocationArrayOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocation)(nil)).Elem()
}

func (o WebTestGeolocationArrayOutput) ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput {
	return o
}

func (o WebTestGeolocationArrayOutput) ToWebTestGeolocationArrayOutputWithContext(ctx context.Context) WebTestGeolocationArrayOutput {
	return o
}

func (o WebTestGeolocationArrayOutput) Index(i pulumi.IntInput) WebTestGeolocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebTestGeolocation {
		return vs[0].([]WebTestGeolocation)[vs[1].(int)]
	}).(WebTestGeolocationOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponse struct {
	// Location ID for the WebTest to run from.
	Location *string `pulumi:"location"`
}

// WebTestGeolocationResponseInput is an input type that accepts WebTestGeolocationResponseArgs and WebTestGeolocationResponseOutput values.
// You can construct a concrete instance of `WebTestGeolocationResponseInput` via:
//
//          WebTestGeolocationResponseArgs{...}
type WebTestGeolocationResponseInput interface {
	pulumi.Input

	ToWebTestGeolocationResponseOutput() WebTestGeolocationResponseOutput
	ToWebTestGeolocationResponseOutputWithContext(context.Context) WebTestGeolocationResponseOutput
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponseArgs struct {
	// Location ID for the WebTest to run from.
	Location pulumi.StringPtrInput `pulumi:"location"`
}

func (WebTestGeolocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocationResponse)(nil)).Elem()
}

func (i WebTestGeolocationResponseArgs) ToWebTestGeolocationResponseOutput() WebTestGeolocationResponseOutput {
	return i.ToWebTestGeolocationResponseOutputWithContext(context.Background())
}

func (i WebTestGeolocationResponseArgs) ToWebTestGeolocationResponseOutputWithContext(ctx context.Context) WebTestGeolocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationResponseOutput)
}

// WebTestGeolocationResponseArrayInput is an input type that accepts WebTestGeolocationResponseArray and WebTestGeolocationResponseArrayOutput values.
// You can construct a concrete instance of `WebTestGeolocationResponseArrayInput` via:
//
//          WebTestGeolocationResponseArray{ WebTestGeolocationResponseArgs{...} }
type WebTestGeolocationResponseArrayInput interface {
	pulumi.Input

	ToWebTestGeolocationResponseArrayOutput() WebTestGeolocationResponseArrayOutput
	ToWebTestGeolocationResponseArrayOutputWithContext(context.Context) WebTestGeolocationResponseArrayOutput
}

type WebTestGeolocationResponseArray []WebTestGeolocationResponseInput

func (WebTestGeolocationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocationResponse)(nil)).Elem()
}

func (i WebTestGeolocationResponseArray) ToWebTestGeolocationResponseArrayOutput() WebTestGeolocationResponseArrayOutput {
	return i.ToWebTestGeolocationResponseArrayOutputWithContext(context.Background())
}

func (i WebTestGeolocationResponseArray) ToWebTestGeolocationResponseArrayOutputWithContext(ctx context.Context) WebTestGeolocationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationResponseArrayOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponseOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocationResponse)(nil)).Elem()
}

func (o WebTestGeolocationResponseOutput) ToWebTestGeolocationResponseOutput() WebTestGeolocationResponseOutput {
	return o
}

func (o WebTestGeolocationResponseOutput) ToWebTestGeolocationResponseOutputWithContext(ctx context.Context) WebTestGeolocationResponseOutput {
	return o
}

// Location ID for the WebTest to run from.
func (o WebTestGeolocationResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestGeolocationResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

type WebTestGeolocationResponseArrayOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocationResponse)(nil)).Elem()
}

func (o WebTestGeolocationResponseArrayOutput) ToWebTestGeolocationResponseArrayOutput() WebTestGeolocationResponseArrayOutput {
	return o
}

func (o WebTestGeolocationResponseArrayOutput) ToWebTestGeolocationResponseArrayOutputWithContext(ctx context.Context) WebTestGeolocationResponseArrayOutput {
	return o
}

func (o WebTestGeolocationResponseArrayOutput) Index(i pulumi.IntInput) WebTestGeolocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebTestGeolocationResponse {
		return vs[0].([]WebTestGeolocationResponse)[vs[1].(int)]
	}).(WebTestGeolocationResponseOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfiguration struct {
	// The XML specification of a WebTest to run against an application.
	WebTest *string `pulumi:"webTest"`
}

// WebTestPropertiesConfigurationInput is an input type that accepts WebTestPropertiesConfigurationArgs and WebTestPropertiesConfigurationOutput values.
// You can construct a concrete instance of `WebTestPropertiesConfigurationInput` via:
//
//          WebTestPropertiesConfigurationArgs{...}
type WebTestPropertiesConfigurationInput interface {
	pulumi.Input

	ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput
	ToWebTestPropertiesConfigurationOutputWithContext(context.Context) WebTestPropertiesConfigurationOutput
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfigurationArgs struct {
	// The XML specification of a WebTest to run against an application.
	WebTest pulumi.StringPtrInput `pulumi:"webTest"`
}

func (WebTestPropertiesConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesConfiguration)(nil)).Elem()
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput {
	return i.ToWebTestPropertiesConfigurationOutputWithContext(context.Background())
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationOutput)
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return i.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationOutput).ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx)
}

// WebTestPropertiesConfigurationPtrInput is an input type that accepts WebTestPropertiesConfigurationArgs, WebTestPropertiesConfigurationPtr and WebTestPropertiesConfigurationPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesConfigurationPtrInput` via:
//
//          WebTestPropertiesConfigurationArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesConfigurationPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput
	ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Context) WebTestPropertiesConfigurationPtrOutput
}

type webTestPropertiesConfigurationPtrType WebTestPropertiesConfigurationArgs

func WebTestPropertiesConfigurationPtr(v *WebTestPropertiesConfigurationArgs) WebTestPropertiesConfigurationPtrInput {
	return (*webTestPropertiesConfigurationPtrType)(v)
}

func (*webTestPropertiesConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesConfiguration)(nil)).Elem()
}

func (i *webTestPropertiesConfigurationPtrType) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return i.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesConfigurationPtrType) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfigurationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput {
	return o
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationOutput {
	return o
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return o.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesConfiguration) *WebTestPropertiesConfiguration {
		return &v
	}).(WebTestPropertiesConfigurationPtrOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesConfigurationOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesConfiguration) *string { return v.WebTest }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesConfigurationPtrOutput) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesConfigurationPtrOutput) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesConfigurationPtrOutput) Elem() WebTestPropertiesConfigurationOutput {
	return o.ApplyT(func(v *WebTestPropertiesConfiguration) WebTestPropertiesConfiguration { return *v }).(WebTestPropertiesConfigurationOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesConfigurationPtrOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.WebTest
	}).(pulumi.StringPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesContentValidation struct {
	// Content to look for in the return of the WebTest.
	ContentMatch *string `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `pulumi:"passIfTextFound"`
}

// WebTestPropertiesContentValidationInput is an input type that accepts WebTestPropertiesContentValidationArgs and WebTestPropertiesContentValidationOutput values.
// You can construct a concrete instance of `WebTestPropertiesContentValidationInput` via:
//
//          WebTestPropertiesContentValidationArgs{...}
type WebTestPropertiesContentValidationInput interface {
	pulumi.Input

	ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput
	ToWebTestPropertiesContentValidationOutputWithContext(context.Context) WebTestPropertiesContentValidationOutput
}

// The collection of content validation properties
type WebTestPropertiesContentValidationArgs struct {
	// Content to look for in the return of the WebTest.
	ContentMatch pulumi.StringPtrInput `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound pulumi.BoolPtrInput `pulumi:"passIfTextFound"`
}

func (WebTestPropertiesContentValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesContentValidation)(nil)).Elem()
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput {
	return i.ToWebTestPropertiesContentValidationOutputWithContext(context.Background())
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationOutput)
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return i.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationOutput).ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx)
}

// WebTestPropertiesContentValidationPtrInput is an input type that accepts WebTestPropertiesContentValidationArgs, WebTestPropertiesContentValidationPtr and WebTestPropertiesContentValidationPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesContentValidationPtrInput` via:
//
//          WebTestPropertiesContentValidationArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesContentValidationPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput
	ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Context) WebTestPropertiesContentValidationPtrOutput
}

type webTestPropertiesContentValidationPtrType WebTestPropertiesContentValidationArgs

func WebTestPropertiesContentValidationPtr(v *WebTestPropertiesContentValidationArgs) WebTestPropertiesContentValidationPtrInput {
	return (*webTestPropertiesContentValidationPtrType)(v)
}

func (*webTestPropertiesContentValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesContentValidation)(nil)).Elem()
}

func (i *webTestPropertiesContentValidationPtrType) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return i.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesContentValidationPtrType) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesContentValidationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesContentValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput {
	return o
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationOutput {
	return o
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return o.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *WebTestPropertiesContentValidation {
		return &v
	}).(WebTestPropertiesContentValidationPtrOutput)
}

// Content to look for in the return of the WebTest.
func (o WebTestPropertiesContentValidationOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *string { return v.ContentMatch }).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesContentValidationOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesContentValidationOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *bool { return v.PassIfTextFound }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesContentValidationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesContentValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesContentValidationPtrOutput) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesContentValidationPtrOutput) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesContentValidationPtrOutput) Elem() WebTestPropertiesContentValidationOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) WebTestPropertiesContentValidation { return *v }).(WebTestPropertiesContentValidationOutput)
}

// Content to look for in the return of the WebTest.
func (o WebTestPropertiesContentValidationPtrOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *string {
		if v == nil {
			return nil
		}
		return v.ContentMatch
	}).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesContentValidationPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesContentValidationPtrOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.PassIfTextFound
	}).(pulumi.BoolPtrOutput)
}

// The collection of request properties
type WebTestPropertiesRequest struct {
	// Follow redirects for this web test.
	FollowRedirects *bool `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers []HeaderField `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb *string `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody *string `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl *string `pulumi:"requestUrl"`
}

// WebTestPropertiesRequestInput is an input type that accepts WebTestPropertiesRequestArgs and WebTestPropertiesRequestOutput values.
// You can construct a concrete instance of `WebTestPropertiesRequestInput` via:
//
//          WebTestPropertiesRequestArgs{...}
type WebTestPropertiesRequestInput interface {
	pulumi.Input

	ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput
	ToWebTestPropertiesRequestOutputWithContext(context.Context) WebTestPropertiesRequestOutput
}

// The collection of request properties
type WebTestPropertiesRequestArgs struct {
	// Follow redirects for this web test.
	FollowRedirects pulumi.BoolPtrInput `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers HeaderFieldArrayInput `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb pulumi.StringPtrInput `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests pulumi.BoolPtrInput `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody pulumi.StringPtrInput `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl pulumi.StringPtrInput `pulumi:"requestUrl"`
}

func (WebTestPropertiesRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesRequest)(nil)).Elem()
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput {
	return i.ToWebTestPropertiesRequestOutputWithContext(context.Background())
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestOutputWithContext(ctx context.Context) WebTestPropertiesRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestOutput)
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return i.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestOutput).ToWebTestPropertiesRequestPtrOutputWithContext(ctx)
}

// WebTestPropertiesRequestPtrInput is an input type that accepts WebTestPropertiesRequestArgs, WebTestPropertiesRequestPtr and WebTestPropertiesRequestPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesRequestPtrInput` via:
//
//          WebTestPropertiesRequestArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesRequestPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput
	ToWebTestPropertiesRequestPtrOutputWithContext(context.Context) WebTestPropertiesRequestPtrOutput
}

type webTestPropertiesRequestPtrType WebTestPropertiesRequestArgs

func WebTestPropertiesRequestPtr(v *WebTestPropertiesRequestArgs) WebTestPropertiesRequestPtrInput {
	return (*webTestPropertiesRequestPtrType)(v)
}

func (*webTestPropertiesRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesRequest)(nil)).Elem()
}

func (i *webTestPropertiesRequestPtrType) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return i.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesRequestPtrType) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestPtrOutput)
}

// The collection of request properties
type WebTestPropertiesRequestOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesRequest)(nil)).Elem()
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput {
	return o
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestOutputWithContext(ctx context.Context) WebTestPropertiesRequestOutput {
	return o
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return o.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *WebTestPropertiesRequest {
		return &v
	}).(WebTestPropertiesRequestPtrOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesRequestOutput) Headers() HeaderFieldArrayOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) []HeaderField { return v.Headers }).(HeaderFieldArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesRequestOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.HttpVerb }).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesRequestOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *bool { return v.ParseDependentRequests }).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesRequestOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.RequestBody }).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesRequestOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.RequestUrl }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesRequestPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesRequest)(nil)).Elem()
}

func (o WebTestPropertiesRequestPtrOutput) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return o
}

func (o WebTestPropertiesRequestPtrOutput) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return o
}

func (o WebTestPropertiesRequestPtrOutput) Elem() WebTestPropertiesRequestOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) WebTestPropertiesRequest { return *v }).(WebTestPropertiesRequestOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesRequestPtrOutput) Headers() HeaderFieldArrayOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) []HeaderField {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderFieldArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesRequestPtrOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpVerb
	}).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesRequestPtrOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *bool {
		if v == nil {
			return nil
		}
		return v.ParseDependentRequests
	}).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesRequestPtrOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesRequestPtrOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestUrl
	}).(pulumi.StringPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponseConfiguration struct {
	// The XML specification of a WebTest to run against an application.
	WebTest *string `pulumi:"webTest"`
}

// WebTestPropertiesResponseConfigurationInput is an input type that accepts WebTestPropertiesResponseConfigurationArgs and WebTestPropertiesResponseConfigurationOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponseConfigurationInput` via:
//
//          WebTestPropertiesResponseConfigurationArgs{...}
type WebTestPropertiesResponseConfigurationInput interface {
	pulumi.Input

	ToWebTestPropertiesResponseConfigurationOutput() WebTestPropertiesResponseConfigurationOutput
	ToWebTestPropertiesResponseConfigurationOutputWithContext(context.Context) WebTestPropertiesResponseConfigurationOutput
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponseConfigurationArgs struct {
	// The XML specification of a WebTest to run against an application.
	WebTest pulumi.StringPtrInput `pulumi:"webTest"`
}

func (WebTestPropertiesResponseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseConfiguration)(nil)).Elem()
}

func (i WebTestPropertiesResponseConfigurationArgs) ToWebTestPropertiesResponseConfigurationOutput() WebTestPropertiesResponseConfigurationOutput {
	return i.ToWebTestPropertiesResponseConfigurationOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponseConfigurationArgs) ToWebTestPropertiesResponseConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseConfigurationOutput)
}

func (i WebTestPropertiesResponseConfigurationArgs) ToWebTestPropertiesResponseConfigurationPtrOutput() WebTestPropertiesResponseConfigurationPtrOutput {
	return i.ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponseConfigurationArgs) ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseConfigurationOutput).ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(ctx)
}

// WebTestPropertiesResponseConfigurationPtrInput is an input type that accepts WebTestPropertiesResponseConfigurationArgs, WebTestPropertiesResponseConfigurationPtr and WebTestPropertiesResponseConfigurationPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponseConfigurationPtrInput` via:
//
//          WebTestPropertiesResponseConfigurationArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesResponseConfigurationPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesResponseConfigurationPtrOutput() WebTestPropertiesResponseConfigurationPtrOutput
	ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(context.Context) WebTestPropertiesResponseConfigurationPtrOutput
}

type webTestPropertiesResponseConfigurationPtrType WebTestPropertiesResponseConfigurationArgs

func WebTestPropertiesResponseConfigurationPtr(v *WebTestPropertiesResponseConfigurationArgs) WebTestPropertiesResponseConfigurationPtrInput {
	return (*webTestPropertiesResponseConfigurationPtrType)(v)
}

func (*webTestPropertiesResponseConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseConfiguration)(nil)).Elem()
}

func (i *webTestPropertiesResponseConfigurationPtrType) ToWebTestPropertiesResponseConfigurationPtrOutput() WebTestPropertiesResponseConfigurationPtrOutput {
	return i.ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesResponseConfigurationPtrType) ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseConfigurationPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponseConfigurationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesResponseConfigurationOutput) ToWebTestPropertiesResponseConfigurationOutput() WebTestPropertiesResponseConfigurationOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationOutput) ToWebTestPropertiesResponseConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationOutput) ToWebTestPropertiesResponseConfigurationPtrOutput() WebTestPropertiesResponseConfigurationPtrOutput {
	return o.ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesResponseConfigurationOutput) ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseConfiguration) *WebTestPropertiesResponseConfiguration {
		return &v
	}).(WebTestPropertiesResponseConfigurationPtrOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesResponseConfigurationOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseConfiguration) *string { return v.WebTest }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesResponseConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) ToWebTestPropertiesResponseConfigurationPtrOutput() WebTestPropertiesResponseConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) Elem() WebTestPropertiesResponseConfigurationOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseConfiguration) WebTestPropertiesResponseConfiguration { return *v }).(WebTestPropertiesResponseConfigurationOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesResponseConfigurationPtrOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.WebTest
	}).(pulumi.StringPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesResponseContentValidation struct {
	// Content to look for in the return of the WebTest.
	ContentMatch *string `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `pulumi:"passIfTextFound"`
}

// WebTestPropertiesResponseContentValidationInput is an input type that accepts WebTestPropertiesResponseContentValidationArgs and WebTestPropertiesResponseContentValidationOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponseContentValidationInput` via:
//
//          WebTestPropertiesResponseContentValidationArgs{...}
type WebTestPropertiesResponseContentValidationInput interface {
	pulumi.Input

	ToWebTestPropertiesResponseContentValidationOutput() WebTestPropertiesResponseContentValidationOutput
	ToWebTestPropertiesResponseContentValidationOutputWithContext(context.Context) WebTestPropertiesResponseContentValidationOutput
}

// The collection of content validation properties
type WebTestPropertiesResponseContentValidationArgs struct {
	// Content to look for in the return of the WebTest.
	ContentMatch pulumi.StringPtrInput `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound pulumi.BoolPtrInput `pulumi:"passIfTextFound"`
}

func (WebTestPropertiesResponseContentValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseContentValidation)(nil)).Elem()
}

func (i WebTestPropertiesResponseContentValidationArgs) ToWebTestPropertiesResponseContentValidationOutput() WebTestPropertiesResponseContentValidationOutput {
	return i.ToWebTestPropertiesResponseContentValidationOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponseContentValidationArgs) ToWebTestPropertiesResponseContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseContentValidationOutput)
}

func (i WebTestPropertiesResponseContentValidationArgs) ToWebTestPropertiesResponseContentValidationPtrOutput() WebTestPropertiesResponseContentValidationPtrOutput {
	return i.ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponseContentValidationArgs) ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseContentValidationOutput).ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(ctx)
}

// WebTestPropertiesResponseContentValidationPtrInput is an input type that accepts WebTestPropertiesResponseContentValidationArgs, WebTestPropertiesResponseContentValidationPtr and WebTestPropertiesResponseContentValidationPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponseContentValidationPtrInput` via:
//
//          WebTestPropertiesResponseContentValidationArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesResponseContentValidationPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesResponseContentValidationPtrOutput() WebTestPropertiesResponseContentValidationPtrOutput
	ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(context.Context) WebTestPropertiesResponseContentValidationPtrOutput
}

type webTestPropertiesResponseContentValidationPtrType WebTestPropertiesResponseContentValidationArgs

func WebTestPropertiesResponseContentValidationPtr(v *WebTestPropertiesResponseContentValidationArgs) WebTestPropertiesResponseContentValidationPtrInput {
	return (*webTestPropertiesResponseContentValidationPtrType)(v)
}

func (*webTestPropertiesResponseContentValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseContentValidation)(nil)).Elem()
}

func (i *webTestPropertiesResponseContentValidationPtrType) ToWebTestPropertiesResponseContentValidationPtrOutput() WebTestPropertiesResponseContentValidationPtrOutput {
	return i.ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesResponseContentValidationPtrType) ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseContentValidationPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesResponseContentValidationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseContentValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesResponseContentValidationOutput) ToWebTestPropertiesResponseContentValidationOutput() WebTestPropertiesResponseContentValidationOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationOutput) ToWebTestPropertiesResponseContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationOutput) ToWebTestPropertiesResponseContentValidationPtrOutput() WebTestPropertiesResponseContentValidationPtrOutput {
	return o.ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesResponseContentValidationOutput) ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *WebTestPropertiesResponseContentValidation {
		return &v
	}).(WebTestPropertiesResponseContentValidationPtrOutput)
}

// Content to look for in the return of the WebTest.
func (o WebTestPropertiesResponseContentValidationOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *string { return v.ContentMatch }).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesResponseContentValidationOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesResponseContentValidationOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *bool { return v.PassIfTextFound }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesResponseContentValidationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseContentValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) ToWebTestPropertiesResponseContentValidationPtrOutput() WebTestPropertiesResponseContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) Elem() WebTestPropertiesResponseContentValidationOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) WebTestPropertiesResponseContentValidation {
		return *v
	}).(WebTestPropertiesResponseContentValidationOutput)
}

// Content to look for in the return of the WebTest.
func (o WebTestPropertiesResponseContentValidationPtrOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *string {
		if v == nil {
			return nil
		}
		return v.ContentMatch
	}).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesResponseContentValidationPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesResponseContentValidationPtrOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.PassIfTextFound
	}).(pulumi.BoolPtrOutput)
}

// The collection of request properties
type WebTestPropertiesResponseRequest struct {
	// Follow redirects for this web test.
	FollowRedirects *bool `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers []HeaderFieldResponse `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb *string `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody *string `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl *string `pulumi:"requestUrl"`
}

// WebTestPropertiesResponseRequestInput is an input type that accepts WebTestPropertiesResponseRequestArgs and WebTestPropertiesResponseRequestOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponseRequestInput` via:
//
//          WebTestPropertiesResponseRequestArgs{...}
type WebTestPropertiesResponseRequestInput interface {
	pulumi.Input

	ToWebTestPropertiesResponseRequestOutput() WebTestPropertiesResponseRequestOutput
	ToWebTestPropertiesResponseRequestOutputWithContext(context.Context) WebTestPropertiesResponseRequestOutput
}

// The collection of request properties
type WebTestPropertiesResponseRequestArgs struct {
	// Follow redirects for this web test.
	FollowRedirects pulumi.BoolPtrInput `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers HeaderFieldResponseArrayInput `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb pulumi.StringPtrInput `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests pulumi.BoolPtrInput `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody pulumi.StringPtrInput `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl pulumi.StringPtrInput `pulumi:"requestUrl"`
}

func (WebTestPropertiesResponseRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseRequest)(nil)).Elem()
}

func (i WebTestPropertiesResponseRequestArgs) ToWebTestPropertiesResponseRequestOutput() WebTestPropertiesResponseRequestOutput {
	return i.ToWebTestPropertiesResponseRequestOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponseRequestArgs) ToWebTestPropertiesResponseRequestOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseRequestOutput)
}

func (i WebTestPropertiesResponseRequestArgs) ToWebTestPropertiesResponseRequestPtrOutput() WebTestPropertiesResponseRequestPtrOutput {
	return i.ToWebTestPropertiesResponseRequestPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponseRequestArgs) ToWebTestPropertiesResponseRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseRequestOutput).ToWebTestPropertiesResponseRequestPtrOutputWithContext(ctx)
}

// WebTestPropertiesResponseRequestPtrInput is an input type that accepts WebTestPropertiesResponseRequestArgs, WebTestPropertiesResponseRequestPtr and WebTestPropertiesResponseRequestPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponseRequestPtrInput` via:
//
//          WebTestPropertiesResponseRequestArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesResponseRequestPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesResponseRequestPtrOutput() WebTestPropertiesResponseRequestPtrOutput
	ToWebTestPropertiesResponseRequestPtrOutputWithContext(context.Context) WebTestPropertiesResponseRequestPtrOutput
}

type webTestPropertiesResponseRequestPtrType WebTestPropertiesResponseRequestArgs

func WebTestPropertiesResponseRequestPtr(v *WebTestPropertiesResponseRequestArgs) WebTestPropertiesResponseRequestPtrInput {
	return (*webTestPropertiesResponseRequestPtrType)(v)
}

func (*webTestPropertiesResponseRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseRequest)(nil)).Elem()
}

func (i *webTestPropertiesResponseRequestPtrType) ToWebTestPropertiesResponseRequestPtrOutput() WebTestPropertiesResponseRequestPtrOutput {
	return i.ToWebTestPropertiesResponseRequestPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesResponseRequestPtrType) ToWebTestPropertiesResponseRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseRequestPtrOutput)
}

// The collection of request properties
type WebTestPropertiesResponseRequestOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseRequest)(nil)).Elem()
}

func (o WebTestPropertiesResponseRequestOutput) ToWebTestPropertiesResponseRequestOutput() WebTestPropertiesResponseRequestOutput {
	return o
}

func (o WebTestPropertiesResponseRequestOutput) ToWebTestPropertiesResponseRequestOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestOutput {
	return o
}

func (o WebTestPropertiesResponseRequestOutput) ToWebTestPropertiesResponseRequestPtrOutput() WebTestPropertiesResponseRequestPtrOutput {
	return o.ToWebTestPropertiesResponseRequestPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesResponseRequestOutput) ToWebTestPropertiesResponseRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *WebTestPropertiesResponseRequest {
		return &v
	}).(WebTestPropertiesResponseRequestPtrOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesResponseRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesResponseRequestOutput) Headers() HeaderFieldResponseArrayOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) []HeaderFieldResponse { return v.Headers }).(HeaderFieldResponseArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesResponseRequestOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.HttpVerb }).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesResponseRequestOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *bool { return v.ParseDependentRequests }).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesResponseRequestOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.RequestBody }).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesResponseRequestOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.RequestUrl }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesResponseRequestPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseRequest)(nil)).Elem()
}

func (o WebTestPropertiesResponseRequestPtrOutput) ToWebTestPropertiesResponseRequestPtrOutput() WebTestPropertiesResponseRequestPtrOutput {
	return o
}

func (o WebTestPropertiesResponseRequestPtrOutput) ToWebTestPropertiesResponseRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestPtrOutput {
	return o
}

func (o WebTestPropertiesResponseRequestPtrOutput) Elem() WebTestPropertiesResponseRequestOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) WebTestPropertiesResponseRequest { return *v }).(WebTestPropertiesResponseRequestOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesResponseRequestPtrOutput) Headers() HeaderFieldResponseArrayOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) []HeaderFieldResponse {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderFieldResponseArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpVerb
	}).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesResponseRequestPtrOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *bool {
		if v == nil {
			return nil
		}
		return v.ParseDependentRequests
	}).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesResponseRequestPtrOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestUrl
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(HeaderFieldOutput{})
	pulumi.RegisterOutputType(HeaderFieldArrayOutput{})
	pulumi.RegisterOutputType(HeaderFieldResponseOutput{})
	pulumi.RegisterOutputType(HeaderFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationArrayOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationResponseOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationResponseArrayOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesConfigurationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesContentValidationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesContentValidationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesRequestOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesRequestPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseConfigurationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseContentValidationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseContentValidationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseRequestOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseRequestPtrOutput{})
}
