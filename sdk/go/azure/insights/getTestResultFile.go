// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package insights

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Test result.
// API Version: 2020-02-10-preview.
func GetTestResultFile(ctx *pulumi.Context, args *GetTestResultFileArgs, opts ...pulumi.InvokeOption) (*GetTestResultFileResult, error) {
	var rv GetTestResultFileResult
	err := ctx.Invoke("azure-native:insights:getTestResultFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetTestResultFileArgs struct {
	// The continuation token.
	ContinuationToken *string `pulumi:"continuationToken"`
	// The format to use when returning the webtest result.
	DownloadAs string `pulumi:"downloadAs"`
	// The location ID where the webtest was physically run.
	GeoLocationId string `pulumi:"geoLocationId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The success state criteria for the webtest result.
	TestSuccessfulCriteria *bool `pulumi:"testSuccessfulCriteria"`
	// The posix (epoch) time stamp for the webtest result.
	TimeStamp int `pulumi:"timeStamp"`
	// The name of the Application Insights webtest resource.
	WebTestName string `pulumi:"webTestName"`
}

// Test result.
type GetTestResultFileResult struct {
	// File contents.
	Data *string `pulumi:"data"`
	// The URI that can be used to request the next section of the result file in the event the file is too large for a single request.
	NextLink *string `pulumi:"nextLink"`
}

func GetTestResultFileOutput(ctx *pulumi.Context, args GetTestResultFileOutputArgs, opts ...pulumi.InvokeOption) GetTestResultFileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTestResultFileResult, error) {
			args := v.(GetTestResultFileArgs)
			r, err := GetTestResultFile(ctx, &args, opts...)
			var s GetTestResultFileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTestResultFileResultOutput)
}

type GetTestResultFileOutputArgs struct {
	// The continuation token.
	ContinuationToken pulumi.StringPtrInput `pulumi:"continuationToken"`
	// The format to use when returning the webtest result.
	DownloadAs pulumi.StringInput `pulumi:"downloadAs"`
	// The location ID where the webtest was physically run.
	GeoLocationId pulumi.StringInput `pulumi:"geoLocationId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The success state criteria for the webtest result.
	TestSuccessfulCriteria pulumi.BoolPtrInput `pulumi:"testSuccessfulCriteria"`
	// The posix (epoch) time stamp for the webtest result.
	TimeStamp pulumi.IntInput `pulumi:"timeStamp"`
	// The name of the Application Insights webtest resource.
	WebTestName pulumi.StringInput `pulumi:"webTestName"`
}

func (GetTestResultFileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTestResultFileArgs)(nil)).Elem()
}

// Test result.
type GetTestResultFileResultOutput struct{ *pulumi.OutputState }

func (GetTestResultFileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTestResultFileResult)(nil)).Elem()
}

func (o GetTestResultFileResultOutput) ToGetTestResultFileResultOutput() GetTestResultFileResultOutput {
	return o
}

func (o GetTestResultFileResultOutput) ToGetTestResultFileResultOutputWithContext(ctx context.Context) GetTestResultFileResultOutput {
	return o
}

// File contents.
func (o GetTestResultFileResultOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTestResultFileResult) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// The URI that can be used to request the next section of the result file in the event the file is too large for a single request.
func (o GetTestResultFileResultOutput) NextLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTestResultFileResult) *string { return v.NextLink }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTestResultFileResultOutput{})
}
