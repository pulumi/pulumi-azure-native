// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSources struct {
	// The list of Azure VM extension data source configurations.
	Extensions []ExtensionDataSource `pulumi:"extensions"`
	// The list of performance counter data source configurations.
	PerformanceCounters []PerfCounterDataSource `pulumi:"performanceCounters"`
	// The list of Syslog data source configurations.
	Syslog []SyslogDataSource `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs []WindowsEventLogDataSource `pulumi:"windowsEventLogs"`
}

// DataCollectionRuleDataSourcesInput is an input type that accepts DataCollectionRuleDataSourcesArgs and DataCollectionRuleDataSourcesOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesInput` via:
//
//          DataCollectionRuleDataSourcesArgs{...}
type DataCollectionRuleDataSourcesInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput
	ToDataCollectionRuleDataSourcesOutputWithContext(context.Context) DataCollectionRuleDataSourcesOutput
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSourcesArgs struct {
	// The list of Azure VM extension data source configurations.
	Extensions ExtensionDataSourceArrayInput `pulumi:"extensions"`
	// The list of performance counter data source configurations.
	PerformanceCounters PerfCounterDataSourceArrayInput `pulumi:"performanceCounters"`
	// The list of Syslog data source configurations.
	Syslog SyslogDataSourceArrayInput `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs WindowsEventLogDataSourceArrayInput `pulumi:"windowsEventLogs"`
}

func (DataCollectionRuleDataSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSources)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput {
	return i.ToDataCollectionRuleDataSourcesOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesOutput)
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesOutput).ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx)
}

// DataCollectionRuleDataSourcesPtrInput is an input type that accepts DataCollectionRuleDataSourcesArgs, DataCollectionRuleDataSourcesPtr and DataCollectionRuleDataSourcesPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPtrInput` via:
//
//          DataCollectionRuleDataSourcesArgs{...}
//
//  or:
//
//          nil
type DataCollectionRuleDataSourcesPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput
	ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Context) DataCollectionRuleDataSourcesPtrOutput
}

type dataCollectionRuleDataSourcesPtrType DataCollectionRuleDataSourcesArgs

func DataCollectionRuleDataSourcesPtr(v *DataCollectionRuleDataSourcesArgs) DataCollectionRuleDataSourcesPtrInput {
	return (*dataCollectionRuleDataSourcesPtrType)(v)
}

func (*dataCollectionRuleDataSourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSources)(nil)).Elem()
}

func (i *dataCollectionRuleDataSourcesPtrType) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDataSourcesPtrType) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPtrOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSourcesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSources)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput {
	return o
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesOutput {
	return o
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return o.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) *DataCollectionRuleDataSources {
		return &v
	}).(DataCollectionRuleDataSourcesPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleDataSourcesOutput) Extensions() ExtensionDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []ExtensionDataSource { return v.Extensions }).(ExtensionDataSourceArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleDataSourcesOutput) PerformanceCounters() PerfCounterDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []PerfCounterDataSource { return v.PerformanceCounters }).(PerfCounterDataSourceArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleDataSourcesOutput) Syslog() SyslogDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []SyslogDataSource { return v.Syslog }).(SyslogDataSourceArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleDataSourcesOutput) WindowsEventLogs() WindowsEventLogDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []WindowsEventLogDataSource { return v.WindowsEventLogs }).(WindowsEventLogDataSourceArrayOutput)
}

type DataCollectionRuleDataSourcesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSources)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPtrOutput) Elem() DataCollectionRuleDataSourcesOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) DataCollectionRuleDataSources { return *v }).(DataCollectionRuleDataSourcesOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) Extensions() ExtensionDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []ExtensionDataSource {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(ExtensionDataSourceArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) PerformanceCounters() PerfCounterDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []PerfCounterDataSource {
		if v == nil {
			return nil
		}
		return v.PerformanceCounters
	}).(PerfCounterDataSourceArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) Syslog() SyslogDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []SyslogDataSource {
		if v == nil {
			return nil
		}
		return v.Syslog
	}).(SyslogDataSourceArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) WindowsEventLogs() WindowsEventLogDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []WindowsEventLogDataSource {
		if v == nil {
			return nil
		}
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceArrayOutput)
}

// The specification of destinations.
type DataCollectionRuleDestinations struct {
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics *DestinationsSpecAzureMonitorMetrics `pulumi:"azureMonitorMetrics"`
	// List of Log Analytics destinations.
	LogAnalytics []LogAnalyticsDestination `pulumi:"logAnalytics"`
}

// DataCollectionRuleDestinationsInput is an input type that accepts DataCollectionRuleDestinationsArgs and DataCollectionRuleDestinationsOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsInput` via:
//
//          DataCollectionRuleDestinationsArgs{...}
type DataCollectionRuleDestinationsInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput
	ToDataCollectionRuleDestinationsOutputWithContext(context.Context) DataCollectionRuleDestinationsOutput
}

// The specification of destinations.
type DataCollectionRuleDestinationsArgs struct {
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics DestinationsSpecAzureMonitorMetricsPtrInput `pulumi:"azureMonitorMetrics"`
	// List of Log Analytics destinations.
	LogAnalytics LogAnalyticsDestinationArrayInput `pulumi:"logAnalytics"`
}

func (DataCollectionRuleDestinationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinations)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput {
	return i.ToDataCollectionRuleDestinationsOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsOutput)
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return i.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsOutput).ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx)
}

// DataCollectionRuleDestinationsPtrInput is an input type that accepts DataCollectionRuleDestinationsArgs, DataCollectionRuleDestinationsPtr and DataCollectionRuleDestinationsPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsPtrInput` via:
//
//          DataCollectionRuleDestinationsArgs{...}
//
//  or:
//
//          nil
type DataCollectionRuleDestinationsPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput
	ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Context) DataCollectionRuleDestinationsPtrOutput
}

type dataCollectionRuleDestinationsPtrType DataCollectionRuleDestinationsArgs

func DataCollectionRuleDestinationsPtr(v *DataCollectionRuleDestinationsArgs) DataCollectionRuleDestinationsPtrInput {
	return (*dataCollectionRuleDestinationsPtrType)(v)
}

func (*dataCollectionRuleDestinationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinations)(nil)).Elem()
}

func (i *dataCollectionRuleDestinationsPtrType) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return i.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDestinationsPtrType) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsPtrOutput)
}

// The specification of destinations.
type DataCollectionRuleDestinationsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinations)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput {
	return o
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsOutput {
	return o
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return o.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) *DataCollectionRuleDestinations {
		return &v
	}).(DataCollectionRuleDestinationsPtrOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleDestinationsOutput) AzureMonitorMetrics() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) *DestinationsSpecAzureMonitorMetrics {
		return v.AzureMonitorMetrics
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleDestinationsOutput) LogAnalytics() LogAnalyticsDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []LogAnalyticsDestination { return v.LogAnalytics }).(LogAnalyticsDestinationArrayOutput)
}

type DataCollectionRuleDestinationsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinations)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsPtrOutput) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsPtrOutput) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsPtrOutput) Elem() DataCollectionRuleDestinationsOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) DataCollectionRuleDestinations { return *v }).(DataCollectionRuleDestinationsOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleDestinationsPtrOutput) AzureMonitorMetrics() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) *DestinationsSpecAzureMonitorMetrics {
		if v == nil {
			return nil
		}
		return v.AzureMonitorMetrics
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleDestinationsPtrOutput) LogAnalytics() LogAnalyticsDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []LogAnalyticsDestination {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsDestinationArrayOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleResponseDataSources struct {
	// The list of Azure VM extension data source configurations.
	Extensions []ExtensionDataSourceResponse `pulumi:"extensions"`
	// The list of performance counter data source configurations.
	PerformanceCounters []PerfCounterDataSourceResponse `pulumi:"performanceCounters"`
	// The list of Syslog data source configurations.
	Syslog []SyslogDataSourceResponse `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs []WindowsEventLogDataSourceResponse `pulumi:"windowsEventLogs"`
}

// DataCollectionRuleResponseDataSourcesInput is an input type that accepts DataCollectionRuleResponseDataSourcesArgs and DataCollectionRuleResponseDataSourcesOutput values.
// You can construct a concrete instance of `DataCollectionRuleResponseDataSourcesInput` via:
//
//          DataCollectionRuleResponseDataSourcesArgs{...}
type DataCollectionRuleResponseDataSourcesInput interface {
	pulumi.Input

	ToDataCollectionRuleResponseDataSourcesOutput() DataCollectionRuleResponseDataSourcesOutput
	ToDataCollectionRuleResponseDataSourcesOutputWithContext(context.Context) DataCollectionRuleResponseDataSourcesOutput
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleResponseDataSourcesArgs struct {
	// The list of Azure VM extension data source configurations.
	Extensions ExtensionDataSourceResponseArrayInput `pulumi:"extensions"`
	// The list of performance counter data source configurations.
	PerformanceCounters PerfCounterDataSourceResponseArrayInput `pulumi:"performanceCounters"`
	// The list of Syslog data source configurations.
	Syslog SyslogDataSourceResponseArrayInput `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs WindowsEventLogDataSourceResponseArrayInput `pulumi:"windowsEventLogs"`
}

func (DataCollectionRuleResponseDataSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseDataSources)(nil)).Elem()
}

func (i DataCollectionRuleResponseDataSourcesArgs) ToDataCollectionRuleResponseDataSourcesOutput() DataCollectionRuleResponseDataSourcesOutput {
	return i.ToDataCollectionRuleResponseDataSourcesOutputWithContext(context.Background())
}

func (i DataCollectionRuleResponseDataSourcesArgs) ToDataCollectionRuleResponseDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResponseDataSourcesOutput)
}

func (i DataCollectionRuleResponseDataSourcesArgs) ToDataCollectionRuleResponseDataSourcesPtrOutput() DataCollectionRuleResponseDataSourcesPtrOutput {
	return i.ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleResponseDataSourcesArgs) ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResponseDataSourcesOutput).ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(ctx)
}

// DataCollectionRuleResponseDataSourcesPtrInput is an input type that accepts DataCollectionRuleResponseDataSourcesArgs, DataCollectionRuleResponseDataSourcesPtr and DataCollectionRuleResponseDataSourcesPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleResponseDataSourcesPtrInput` via:
//
//          DataCollectionRuleResponseDataSourcesArgs{...}
//
//  or:
//
//          nil
type DataCollectionRuleResponseDataSourcesPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleResponseDataSourcesPtrOutput() DataCollectionRuleResponseDataSourcesPtrOutput
	ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(context.Context) DataCollectionRuleResponseDataSourcesPtrOutput
}

type dataCollectionRuleResponseDataSourcesPtrType DataCollectionRuleResponseDataSourcesArgs

func DataCollectionRuleResponseDataSourcesPtr(v *DataCollectionRuleResponseDataSourcesArgs) DataCollectionRuleResponseDataSourcesPtrInput {
	return (*dataCollectionRuleResponseDataSourcesPtrType)(v)
}

func (*dataCollectionRuleResponseDataSourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseDataSources)(nil)).Elem()
}

func (i *dataCollectionRuleResponseDataSourcesPtrType) ToDataCollectionRuleResponseDataSourcesPtrOutput() DataCollectionRuleResponseDataSourcesPtrOutput {
	return i.ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleResponseDataSourcesPtrType) ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResponseDataSourcesPtrOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleResponseDataSourcesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDataSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseDataSources)(nil)).Elem()
}

func (o DataCollectionRuleResponseDataSourcesOutput) ToDataCollectionRuleResponseDataSourcesOutput() DataCollectionRuleResponseDataSourcesOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesOutput) ToDataCollectionRuleResponseDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesOutput) ToDataCollectionRuleResponseDataSourcesPtrOutput() DataCollectionRuleResponseDataSourcesPtrOutput {
	return o.ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleResponseDataSourcesOutput) ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) *DataCollectionRuleResponseDataSources {
		return &v
	}).(DataCollectionRuleResponseDataSourcesPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) Extensions() ExtensionDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []ExtensionDataSourceResponse { return v.Extensions }).(ExtensionDataSourceResponseArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) PerformanceCounters() PerfCounterDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []PerfCounterDataSourceResponse {
		return v.PerformanceCounters
	}).(PerfCounterDataSourceResponseArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) Syslog() SyslogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []SyslogDataSourceResponse { return v.Syslog }).(SyslogDataSourceResponseArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) WindowsEventLogs() WindowsEventLogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []WindowsEventLogDataSourceResponse {
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceResponseArrayOutput)
}

type DataCollectionRuleResponseDataSourcesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDataSourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseDataSources)(nil)).Elem()
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) ToDataCollectionRuleResponseDataSourcesPtrOutput() DataCollectionRuleResponseDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) Elem() DataCollectionRuleResponseDataSourcesOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) DataCollectionRuleResponseDataSources { return *v }).(DataCollectionRuleResponseDataSourcesOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) Extensions() ExtensionDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []ExtensionDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(ExtensionDataSourceResponseArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) PerformanceCounters() PerfCounterDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []PerfCounterDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.PerformanceCounters
	}).(PerfCounterDataSourceResponseArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) Syslog() SyslogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []SyslogDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.Syslog
	}).(SyslogDataSourceResponseArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) WindowsEventLogs() WindowsEventLogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []WindowsEventLogDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceResponseArrayOutput)
}

// The specification of destinations.
type DataCollectionRuleResponseDestinations struct {
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics *DestinationsSpecResponseAzureMonitorMetrics `pulumi:"azureMonitorMetrics"`
	// List of Log Analytics destinations.
	LogAnalytics []LogAnalyticsDestinationResponse `pulumi:"logAnalytics"`
}

// DataCollectionRuleResponseDestinationsInput is an input type that accepts DataCollectionRuleResponseDestinationsArgs and DataCollectionRuleResponseDestinationsOutput values.
// You can construct a concrete instance of `DataCollectionRuleResponseDestinationsInput` via:
//
//          DataCollectionRuleResponseDestinationsArgs{...}
type DataCollectionRuleResponseDestinationsInput interface {
	pulumi.Input

	ToDataCollectionRuleResponseDestinationsOutput() DataCollectionRuleResponseDestinationsOutput
	ToDataCollectionRuleResponseDestinationsOutputWithContext(context.Context) DataCollectionRuleResponseDestinationsOutput
}

// The specification of destinations.
type DataCollectionRuleResponseDestinationsArgs struct {
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics DestinationsSpecResponseAzureMonitorMetricsPtrInput `pulumi:"azureMonitorMetrics"`
	// List of Log Analytics destinations.
	LogAnalytics LogAnalyticsDestinationResponseArrayInput `pulumi:"logAnalytics"`
}

func (DataCollectionRuleResponseDestinationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseDestinations)(nil)).Elem()
}

func (i DataCollectionRuleResponseDestinationsArgs) ToDataCollectionRuleResponseDestinationsOutput() DataCollectionRuleResponseDestinationsOutput {
	return i.ToDataCollectionRuleResponseDestinationsOutputWithContext(context.Background())
}

func (i DataCollectionRuleResponseDestinationsArgs) ToDataCollectionRuleResponseDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResponseDestinationsOutput)
}

func (i DataCollectionRuleResponseDestinationsArgs) ToDataCollectionRuleResponseDestinationsPtrOutput() DataCollectionRuleResponseDestinationsPtrOutput {
	return i.ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleResponseDestinationsArgs) ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResponseDestinationsOutput).ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(ctx)
}

// DataCollectionRuleResponseDestinationsPtrInput is an input type that accepts DataCollectionRuleResponseDestinationsArgs, DataCollectionRuleResponseDestinationsPtr and DataCollectionRuleResponseDestinationsPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleResponseDestinationsPtrInput` via:
//
//          DataCollectionRuleResponseDestinationsArgs{...}
//
//  or:
//
//          nil
type DataCollectionRuleResponseDestinationsPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleResponseDestinationsPtrOutput() DataCollectionRuleResponseDestinationsPtrOutput
	ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(context.Context) DataCollectionRuleResponseDestinationsPtrOutput
}

type dataCollectionRuleResponseDestinationsPtrType DataCollectionRuleResponseDestinationsArgs

func DataCollectionRuleResponseDestinationsPtr(v *DataCollectionRuleResponseDestinationsArgs) DataCollectionRuleResponseDestinationsPtrInput {
	return (*dataCollectionRuleResponseDestinationsPtrType)(v)
}

func (*dataCollectionRuleResponseDestinationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseDestinations)(nil)).Elem()
}

func (i *dataCollectionRuleResponseDestinationsPtrType) ToDataCollectionRuleResponseDestinationsPtrOutput() DataCollectionRuleResponseDestinationsPtrOutput {
	return i.ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleResponseDestinationsPtrType) ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResponseDestinationsPtrOutput)
}

// The specification of destinations.
type DataCollectionRuleResponseDestinationsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseDestinations)(nil)).Elem()
}

func (o DataCollectionRuleResponseDestinationsOutput) ToDataCollectionRuleResponseDestinationsOutput() DataCollectionRuleResponseDestinationsOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsOutput) ToDataCollectionRuleResponseDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsOutput) ToDataCollectionRuleResponseDestinationsPtrOutput() DataCollectionRuleResponseDestinationsPtrOutput {
	return o.ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleResponseDestinationsOutput) ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) *DataCollectionRuleResponseDestinations {
		return &v
	}).(DataCollectionRuleResponseDestinationsPtrOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleResponseDestinationsOutput) AzureMonitorMetrics() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) *DestinationsSpecResponseAzureMonitorMetrics {
		return v.AzureMonitorMetrics
	}).(DestinationsSpecResponseAzureMonitorMetricsPtrOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleResponseDestinationsOutput) LogAnalytics() LogAnalyticsDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []LogAnalyticsDestinationResponse {
		return v.LogAnalytics
	}).(LogAnalyticsDestinationResponseArrayOutput)
}

type DataCollectionRuleResponseDestinationsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDestinationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseDestinations)(nil)).Elem()
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) ToDataCollectionRuleResponseDestinationsPtrOutput() DataCollectionRuleResponseDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) Elem() DataCollectionRuleResponseDestinationsOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) DataCollectionRuleResponseDestinations { return *v }).(DataCollectionRuleResponseDestinationsOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleResponseDestinationsPtrOutput) AzureMonitorMetrics() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) *DestinationsSpecResponseAzureMonitorMetrics {
		if v == nil {
			return nil
		}
		return v.AzureMonitorMetrics
	}).(DestinationsSpecResponseAzureMonitorMetricsPtrOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) LogAnalytics() LogAnalyticsDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []LogAnalyticsDestinationResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsDestinationResponseArrayOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlow struct {
	// List of destinations for this data flow.
	Destinations []string `pulumi:"destinations"`
	// List of streams for this data flow.
	Streams []string `pulumi:"streams"`
}

// DataFlowInput is an input type that accepts DataFlowArgs and DataFlowOutput values.
// You can construct a concrete instance of `DataFlowInput` via:
//
//          DataFlowArgs{...}
type DataFlowInput interface {
	pulumi.Input

	ToDataFlowOutput() DataFlowOutput
	ToDataFlowOutputWithContext(context.Context) DataFlowOutput
}

// Definition of which streams are sent to which destinations.
type DataFlowArgs struct {
	// List of destinations for this data flow.
	Destinations pulumi.StringArrayInput `pulumi:"destinations"`
	// List of streams for this data flow.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlow)(nil)).Elem()
}

func (i DataFlowArgs) ToDataFlowOutput() DataFlowOutput {
	return i.ToDataFlowOutputWithContext(context.Background())
}

func (i DataFlowArgs) ToDataFlowOutputWithContext(ctx context.Context) DataFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowOutput)
}

// DataFlowArrayInput is an input type that accepts DataFlowArray and DataFlowArrayOutput values.
// You can construct a concrete instance of `DataFlowArrayInput` via:
//
//          DataFlowArray{ DataFlowArgs{...} }
type DataFlowArrayInput interface {
	pulumi.Input

	ToDataFlowArrayOutput() DataFlowArrayOutput
	ToDataFlowArrayOutputWithContext(context.Context) DataFlowArrayOutput
}

type DataFlowArray []DataFlowInput

func (DataFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlow)(nil)).Elem()
}

func (i DataFlowArray) ToDataFlowArrayOutput() DataFlowArrayOutput {
	return i.ToDataFlowArrayOutputWithContext(context.Background())
}

func (i DataFlowArray) ToDataFlowArrayOutputWithContext(ctx context.Context) DataFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowArrayOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlowOutput struct{ *pulumi.OutputState }

func (DataFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlow)(nil)).Elem()
}

func (o DataFlowOutput) ToDataFlowOutput() DataFlowOutput {
	return o
}

func (o DataFlowOutput) ToDataFlowOutputWithContext(ctx context.Context) DataFlowOutput {
	return o
}

// List of destinations for this data flow.
func (o DataFlowOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlow) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// List of streams for this data flow.
func (o DataFlowOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlow) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataFlowArrayOutput struct{ *pulumi.OutputState }

func (DataFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlow)(nil)).Elem()
}

func (o DataFlowArrayOutput) ToDataFlowArrayOutput() DataFlowArrayOutput {
	return o
}

func (o DataFlowArrayOutput) ToDataFlowArrayOutputWithContext(ctx context.Context) DataFlowArrayOutput {
	return o
}

func (o DataFlowArrayOutput) Index(i pulumi.IntInput) DataFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlow {
		return vs[0].([]DataFlow)[vs[1].(int)]
	}).(DataFlowOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlowResponse struct {
	// List of destinations for this data flow.
	Destinations []string `pulumi:"destinations"`
	// List of streams for this data flow.
	Streams []string `pulumi:"streams"`
}

// DataFlowResponseInput is an input type that accepts DataFlowResponseArgs and DataFlowResponseOutput values.
// You can construct a concrete instance of `DataFlowResponseInput` via:
//
//          DataFlowResponseArgs{...}
type DataFlowResponseInput interface {
	pulumi.Input

	ToDataFlowResponseOutput() DataFlowResponseOutput
	ToDataFlowResponseOutputWithContext(context.Context) DataFlowResponseOutput
}

// Definition of which streams are sent to which destinations.
type DataFlowResponseArgs struct {
	// List of destinations for this data flow.
	Destinations pulumi.StringArrayInput `pulumi:"destinations"`
	// List of streams for this data flow.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataFlowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponse)(nil)).Elem()
}

func (i DataFlowResponseArgs) ToDataFlowResponseOutput() DataFlowResponseOutput {
	return i.ToDataFlowResponseOutputWithContext(context.Background())
}

func (i DataFlowResponseArgs) ToDataFlowResponseOutputWithContext(ctx context.Context) DataFlowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseOutput)
}

// DataFlowResponseArrayInput is an input type that accepts DataFlowResponseArray and DataFlowResponseArrayOutput values.
// You can construct a concrete instance of `DataFlowResponseArrayInput` via:
//
//          DataFlowResponseArray{ DataFlowResponseArgs{...} }
type DataFlowResponseArrayInput interface {
	pulumi.Input

	ToDataFlowResponseArrayOutput() DataFlowResponseArrayOutput
	ToDataFlowResponseArrayOutputWithContext(context.Context) DataFlowResponseArrayOutput
}

type DataFlowResponseArray []DataFlowResponseInput

func (DataFlowResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowResponse)(nil)).Elem()
}

func (i DataFlowResponseArray) ToDataFlowResponseArrayOutput() DataFlowResponseArrayOutput {
	return i.ToDataFlowResponseArrayOutputWithContext(context.Background())
}

func (i DataFlowResponseArray) ToDataFlowResponseArrayOutputWithContext(ctx context.Context) DataFlowResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseArrayOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlowResponseOutput struct{ *pulumi.OutputState }

func (DataFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutput() DataFlowResponseOutput {
	return o
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutputWithContext(ctx context.Context) DataFlowResponseOutput {
	return o
}

// List of destinations for this data flow.
func (o DataFlowResponseOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlowResponse) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// List of streams for this data flow.
func (o DataFlowResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlowResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataFlowResponseArrayOutput struct{ *pulumi.OutputState }

func (DataFlowResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponseArrayOutput) ToDataFlowResponseArrayOutput() DataFlowResponseArrayOutput {
	return o
}

func (o DataFlowResponseArrayOutput) ToDataFlowResponseArrayOutputWithContext(ctx context.Context) DataFlowResponseArrayOutput {
	return o
}

func (o DataFlowResponseArrayOutput) Index(i pulumi.IntInput) DataFlowResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowResponse {
		return vs[0].([]DataFlowResponse)[vs[1].(int)]
	}).(DataFlowResponseOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetrics struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
}

// DestinationsSpecAzureMonitorMetricsInput is an input type that accepts DestinationsSpecAzureMonitorMetricsArgs and DestinationsSpecAzureMonitorMetricsOutput values.
// You can construct a concrete instance of `DestinationsSpecAzureMonitorMetricsInput` via:
//
//          DestinationsSpecAzureMonitorMetricsArgs{...}
type DestinationsSpecAzureMonitorMetricsInput interface {
	pulumi.Input

	ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput
	ToDestinationsSpecAzureMonitorMetricsOutputWithContext(context.Context) DestinationsSpecAzureMonitorMetricsOutput
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetricsArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DestinationsSpecAzureMonitorMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsOutputWithContext(context.Background())
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsOutput)
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsOutput).ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx)
}

// DestinationsSpecAzureMonitorMetricsPtrInput is an input type that accepts DestinationsSpecAzureMonitorMetricsArgs, DestinationsSpecAzureMonitorMetricsPtr and DestinationsSpecAzureMonitorMetricsPtrOutput values.
// You can construct a concrete instance of `DestinationsSpecAzureMonitorMetricsPtrInput` via:
//
//          DestinationsSpecAzureMonitorMetricsArgs{...}
//
//  or:
//
//          nil
type DestinationsSpecAzureMonitorMetricsPtrInput interface {
	pulumi.Input

	ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput
	ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput
}

type destinationsSpecAzureMonitorMetricsPtrType DestinationsSpecAzureMonitorMetricsArgs

func DestinationsSpecAzureMonitorMetricsPtr(v *DestinationsSpecAzureMonitorMetricsArgs) DestinationsSpecAzureMonitorMetricsPtrInput {
	return (*destinationsSpecAzureMonitorMetricsPtrType)(v)
}

func (*destinationsSpecAzureMonitorMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (i *destinationsSpecAzureMonitorMetricsPtrType) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i *destinationsSpecAzureMonitorMetricsPtrType) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetricsOutput struct{ *pulumi.OutputState }

func (DestinationsSpecAzureMonitorMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DestinationsSpecAzureMonitorMetrics) *DestinationsSpecAzureMonitorMetrics {
		return &v
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecAzureMonitorMetricsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationsSpecAzureMonitorMetrics) string { return v.Name }).(pulumi.StringOutput)
}

type DestinationsSpecAzureMonitorMetricsPtrOutput struct{ *pulumi.OutputState }

func (DestinationsSpecAzureMonitorMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) Elem() DestinationsSpecAzureMonitorMetricsOutput {
	return o.ApplyT(func(v *DestinationsSpecAzureMonitorMetrics) DestinationsSpecAzureMonitorMetrics { return *v }).(DestinationsSpecAzureMonitorMetricsOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecAzureMonitorMetricsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationsSpecAzureMonitorMetrics) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecResponseAzureMonitorMetrics struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
}

// DestinationsSpecResponseAzureMonitorMetricsInput is an input type that accepts DestinationsSpecResponseAzureMonitorMetricsArgs and DestinationsSpecResponseAzureMonitorMetricsOutput values.
// You can construct a concrete instance of `DestinationsSpecResponseAzureMonitorMetricsInput` via:
//
//          DestinationsSpecResponseAzureMonitorMetricsArgs{...}
type DestinationsSpecResponseAzureMonitorMetricsInput interface {
	pulumi.Input

	ToDestinationsSpecResponseAzureMonitorMetricsOutput() DestinationsSpecResponseAzureMonitorMetricsOutput
	ToDestinationsSpecResponseAzureMonitorMetricsOutputWithContext(context.Context) DestinationsSpecResponseAzureMonitorMetricsOutput
}

// Azure Monitor Metrics destination.
type DestinationsSpecResponseAzureMonitorMetricsArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DestinationsSpecResponseAzureMonitorMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecResponseAzureMonitorMetrics)(nil)).Elem()
}

func (i DestinationsSpecResponseAzureMonitorMetricsArgs) ToDestinationsSpecResponseAzureMonitorMetricsOutput() DestinationsSpecResponseAzureMonitorMetricsOutput {
	return i.ToDestinationsSpecResponseAzureMonitorMetricsOutputWithContext(context.Background())
}

func (i DestinationsSpecResponseAzureMonitorMetricsArgs) ToDestinationsSpecResponseAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecResponseAzureMonitorMetricsOutput)
}

func (i DestinationsSpecResponseAzureMonitorMetricsArgs) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutput() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return i.ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i DestinationsSpecResponseAzureMonitorMetricsArgs) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecResponseAzureMonitorMetricsOutput).ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(ctx)
}

// DestinationsSpecResponseAzureMonitorMetricsPtrInput is an input type that accepts DestinationsSpecResponseAzureMonitorMetricsArgs, DestinationsSpecResponseAzureMonitorMetricsPtr and DestinationsSpecResponseAzureMonitorMetricsPtrOutput values.
// You can construct a concrete instance of `DestinationsSpecResponseAzureMonitorMetricsPtrInput` via:
//
//          DestinationsSpecResponseAzureMonitorMetricsArgs{...}
//
//  or:
//
//          nil
type DestinationsSpecResponseAzureMonitorMetricsPtrInput interface {
	pulumi.Input

	ToDestinationsSpecResponseAzureMonitorMetricsPtrOutput() DestinationsSpecResponseAzureMonitorMetricsPtrOutput
	ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(context.Context) DestinationsSpecResponseAzureMonitorMetricsPtrOutput
}

type destinationsSpecResponseAzureMonitorMetricsPtrType DestinationsSpecResponseAzureMonitorMetricsArgs

func DestinationsSpecResponseAzureMonitorMetricsPtr(v *DestinationsSpecResponseAzureMonitorMetricsArgs) DestinationsSpecResponseAzureMonitorMetricsPtrInput {
	return (*destinationsSpecResponseAzureMonitorMetricsPtrType)(v)
}

func (*destinationsSpecResponseAzureMonitorMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecResponseAzureMonitorMetrics)(nil)).Elem()
}

func (i *destinationsSpecResponseAzureMonitorMetricsPtrType) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutput() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return i.ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i *destinationsSpecResponseAzureMonitorMetricsPtrType) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecResponseAzureMonitorMetricsPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecResponseAzureMonitorMetricsOutput struct{ *pulumi.OutputState }

func (DestinationsSpecResponseAzureMonitorMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecResponseAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecResponseAzureMonitorMetricsOutput) ToDestinationsSpecResponseAzureMonitorMetricsOutput() DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsOutput) ToDestinationsSpecResponseAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsOutput) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutput() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o.ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (o DestinationsSpecResponseAzureMonitorMetricsOutput) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DestinationsSpecResponseAzureMonitorMetrics) *DestinationsSpecResponseAzureMonitorMetrics {
		return &v
	}).(DestinationsSpecResponseAzureMonitorMetricsPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecResponseAzureMonitorMetricsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationsSpecResponseAzureMonitorMetrics) string { return v.Name }).(pulumi.StringOutput)
}

type DestinationsSpecResponseAzureMonitorMetricsPtrOutput struct{ *pulumi.OutputState }

func (DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecResponseAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutput() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) Elem() DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o.ApplyT(func(v *DestinationsSpecResponseAzureMonitorMetrics) DestinationsSpecResponseAzureMonitorMetrics {
		return *v
	}).(DestinationsSpecResponseAzureMonitorMetricsOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationsSpecResponseAzureMonitorMetrics) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSource struct {
	// The name of the VM extension.
	ExtensionName string `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings interface{} `pulumi:"extensionSettings"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// ExtensionDataSourceInput is an input type that accepts ExtensionDataSourceArgs and ExtensionDataSourceOutput values.
// You can construct a concrete instance of `ExtensionDataSourceInput` via:
//
//          ExtensionDataSourceArgs{...}
type ExtensionDataSourceInput interface {
	pulumi.Input

	ToExtensionDataSourceOutput() ExtensionDataSourceOutput
	ToExtensionDataSourceOutputWithContext(context.Context) ExtensionDataSourceOutput
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceArgs struct {
	// The name of the VM extension.
	ExtensionName pulumi.StringInput `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings pulumi.Input `pulumi:"extensionSettings"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (ExtensionDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSource)(nil)).Elem()
}

func (i ExtensionDataSourceArgs) ToExtensionDataSourceOutput() ExtensionDataSourceOutput {
	return i.ToExtensionDataSourceOutputWithContext(context.Background())
}

func (i ExtensionDataSourceArgs) ToExtensionDataSourceOutputWithContext(ctx context.Context) ExtensionDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionDataSourceOutput)
}

// ExtensionDataSourceArrayInput is an input type that accepts ExtensionDataSourceArray and ExtensionDataSourceArrayOutput values.
// You can construct a concrete instance of `ExtensionDataSourceArrayInput` via:
//
//          ExtensionDataSourceArray{ ExtensionDataSourceArgs{...} }
type ExtensionDataSourceArrayInput interface {
	pulumi.Input

	ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput
	ToExtensionDataSourceArrayOutputWithContext(context.Context) ExtensionDataSourceArrayOutput
}

type ExtensionDataSourceArray []ExtensionDataSourceInput

func (ExtensionDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSource)(nil)).Elem()
}

func (i ExtensionDataSourceArray) ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput {
	return i.ToExtensionDataSourceArrayOutputWithContext(context.Background())
}

func (i ExtensionDataSourceArray) ToExtensionDataSourceArrayOutputWithContext(ctx context.Context) ExtensionDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionDataSourceArrayOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSource)(nil)).Elem()
}

func (o ExtensionDataSourceOutput) ToExtensionDataSourceOutput() ExtensionDataSourceOutput {
	return o
}

func (o ExtensionDataSourceOutput) ToExtensionDataSourceOutputWithContext(ctx context.Context) ExtensionDataSourceOutput {
	return o
}

// The name of the VM extension.
func (o ExtensionDataSourceOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionDataSource) string { return v.ExtensionName }).(pulumi.StringOutput)
}

// The extension settings. The format is specific for particular extension.
func (o ExtensionDataSourceOutput) ExtensionSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ExtensionDataSource) interface{} { return v.ExtensionSettings }).(pulumi.AnyOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o ExtensionDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionDataSource) string { return v.Name }).(pulumi.StringOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o ExtensionDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type ExtensionDataSourceArrayOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSource)(nil)).Elem()
}

func (o ExtensionDataSourceArrayOutput) ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput {
	return o
}

func (o ExtensionDataSourceArrayOutput) ToExtensionDataSourceArrayOutputWithContext(ctx context.Context) ExtensionDataSourceArrayOutput {
	return o
}

func (o ExtensionDataSourceArrayOutput) Index(i pulumi.IntInput) ExtensionDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionDataSource {
		return vs[0].([]ExtensionDataSource)[vs[1].(int)]
	}).(ExtensionDataSourceOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceResponse struct {
	// The name of the VM extension.
	ExtensionName string `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings interface{} `pulumi:"extensionSettings"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// ExtensionDataSourceResponseInput is an input type that accepts ExtensionDataSourceResponseArgs and ExtensionDataSourceResponseOutput values.
// You can construct a concrete instance of `ExtensionDataSourceResponseInput` via:
//
//          ExtensionDataSourceResponseArgs{...}
type ExtensionDataSourceResponseInput interface {
	pulumi.Input

	ToExtensionDataSourceResponseOutput() ExtensionDataSourceResponseOutput
	ToExtensionDataSourceResponseOutputWithContext(context.Context) ExtensionDataSourceResponseOutput
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceResponseArgs struct {
	// The name of the VM extension.
	ExtensionName pulumi.StringInput `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings pulumi.Input `pulumi:"extensionSettings"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (ExtensionDataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSourceResponse)(nil)).Elem()
}

func (i ExtensionDataSourceResponseArgs) ToExtensionDataSourceResponseOutput() ExtensionDataSourceResponseOutput {
	return i.ToExtensionDataSourceResponseOutputWithContext(context.Background())
}

func (i ExtensionDataSourceResponseArgs) ToExtensionDataSourceResponseOutputWithContext(ctx context.Context) ExtensionDataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionDataSourceResponseOutput)
}

// ExtensionDataSourceResponseArrayInput is an input type that accepts ExtensionDataSourceResponseArray and ExtensionDataSourceResponseArrayOutput values.
// You can construct a concrete instance of `ExtensionDataSourceResponseArrayInput` via:
//
//          ExtensionDataSourceResponseArray{ ExtensionDataSourceResponseArgs{...} }
type ExtensionDataSourceResponseArrayInput interface {
	pulumi.Input

	ToExtensionDataSourceResponseArrayOutput() ExtensionDataSourceResponseArrayOutput
	ToExtensionDataSourceResponseArrayOutputWithContext(context.Context) ExtensionDataSourceResponseArrayOutput
}

type ExtensionDataSourceResponseArray []ExtensionDataSourceResponseInput

func (ExtensionDataSourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSourceResponse)(nil)).Elem()
}

func (i ExtensionDataSourceResponseArray) ToExtensionDataSourceResponseArrayOutput() ExtensionDataSourceResponseArrayOutput {
	return i.ToExtensionDataSourceResponseArrayOutputWithContext(context.Background())
}

func (i ExtensionDataSourceResponseArray) ToExtensionDataSourceResponseArrayOutputWithContext(ctx context.Context) ExtensionDataSourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionDataSourceResponseArrayOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceResponseOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSourceResponse)(nil)).Elem()
}

func (o ExtensionDataSourceResponseOutput) ToExtensionDataSourceResponseOutput() ExtensionDataSourceResponseOutput {
	return o
}

func (o ExtensionDataSourceResponseOutput) ToExtensionDataSourceResponseOutputWithContext(ctx context.Context) ExtensionDataSourceResponseOutput {
	return o
}

// The name of the VM extension.
func (o ExtensionDataSourceResponseOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) string { return v.ExtensionName }).(pulumi.StringOutput)
}

// The extension settings. The format is specific for particular extension.
func (o ExtensionDataSourceResponseOutput) ExtensionSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) interface{} { return v.ExtensionSettings }).(pulumi.AnyOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o ExtensionDataSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o ExtensionDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type ExtensionDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSourceResponse)(nil)).Elem()
}

func (o ExtensionDataSourceResponseArrayOutput) ToExtensionDataSourceResponseArrayOutput() ExtensionDataSourceResponseArrayOutput {
	return o
}

func (o ExtensionDataSourceResponseArrayOutput) ToExtensionDataSourceResponseArrayOutputWithContext(ctx context.Context) ExtensionDataSourceResponseArrayOutput {
	return o
}

func (o ExtensionDataSourceResponseArrayOutput) Index(i pulumi.IntInput) ExtensionDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionDataSourceResponse {
		return vs[0].([]ExtensionDataSourceResponse)[vs[1].(int)]
	}).(ExtensionDataSourceResponseOutput)
}

// Log Analytics destination.
type LogAnalyticsDestination struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId string `pulumi:"workspaceResourceId"`
}

// LogAnalyticsDestinationInput is an input type that accepts LogAnalyticsDestinationArgs and LogAnalyticsDestinationOutput values.
// You can construct a concrete instance of `LogAnalyticsDestinationInput` via:
//
//          LogAnalyticsDestinationArgs{...}
type LogAnalyticsDestinationInput interface {
	pulumi.Input

	ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput
	ToLogAnalyticsDestinationOutputWithContext(context.Context) LogAnalyticsDestinationOutput
}

// Log Analytics destination.
type LogAnalyticsDestinationArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId pulumi.StringInput `pulumi:"workspaceResourceId"`
}

func (LogAnalyticsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestination)(nil)).Elem()
}

func (i LogAnalyticsDestinationArgs) ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput {
	return i.ToLogAnalyticsDestinationOutputWithContext(context.Background())
}

func (i LogAnalyticsDestinationArgs) ToLogAnalyticsDestinationOutputWithContext(ctx context.Context) LogAnalyticsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsDestinationOutput)
}

// LogAnalyticsDestinationArrayInput is an input type that accepts LogAnalyticsDestinationArray and LogAnalyticsDestinationArrayOutput values.
// You can construct a concrete instance of `LogAnalyticsDestinationArrayInput` via:
//
//          LogAnalyticsDestinationArray{ LogAnalyticsDestinationArgs{...} }
type LogAnalyticsDestinationArrayInput interface {
	pulumi.Input

	ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput
	ToLogAnalyticsDestinationArrayOutputWithContext(context.Context) LogAnalyticsDestinationArrayOutput
}

type LogAnalyticsDestinationArray []LogAnalyticsDestinationInput

func (LogAnalyticsDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestination)(nil)).Elem()
}

func (i LogAnalyticsDestinationArray) ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput {
	return i.ToLogAnalyticsDestinationArrayOutputWithContext(context.Background())
}

func (i LogAnalyticsDestinationArray) ToLogAnalyticsDestinationArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsDestinationArrayOutput)
}

// Log Analytics destination.
type LogAnalyticsDestinationOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestination)(nil)).Elem()
}

func (o LogAnalyticsDestinationOutput) ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput {
	return o
}

func (o LogAnalyticsDestinationOutput) ToLogAnalyticsDestinationOutputWithContext(ctx context.Context) LogAnalyticsDestinationOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o LogAnalyticsDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsDestination) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Log Analytics workspace.
func (o LogAnalyticsDestinationOutput) WorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsDestination) string { return v.WorkspaceResourceId }).(pulumi.StringOutput)
}

type LogAnalyticsDestinationArrayOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestination)(nil)).Elem()
}

func (o LogAnalyticsDestinationArrayOutput) ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput {
	return o
}

func (o LogAnalyticsDestinationArrayOutput) ToLogAnalyticsDestinationArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationArrayOutput {
	return o
}

func (o LogAnalyticsDestinationArrayOutput) Index(i pulumi.IntInput) LogAnalyticsDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogAnalyticsDestination {
		return vs[0].([]LogAnalyticsDestination)[vs[1].(int)]
	}).(LogAnalyticsDestinationOutput)
}

// Log Analytics destination.
type LogAnalyticsDestinationResponse struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId string `pulumi:"workspaceResourceId"`
}

// LogAnalyticsDestinationResponseInput is an input type that accepts LogAnalyticsDestinationResponseArgs and LogAnalyticsDestinationResponseOutput values.
// You can construct a concrete instance of `LogAnalyticsDestinationResponseInput` via:
//
//          LogAnalyticsDestinationResponseArgs{...}
type LogAnalyticsDestinationResponseInput interface {
	pulumi.Input

	ToLogAnalyticsDestinationResponseOutput() LogAnalyticsDestinationResponseOutput
	ToLogAnalyticsDestinationResponseOutputWithContext(context.Context) LogAnalyticsDestinationResponseOutput
}

// Log Analytics destination.
type LogAnalyticsDestinationResponseArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId pulumi.StringInput `pulumi:"workspaceResourceId"`
}

func (LogAnalyticsDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestinationResponse)(nil)).Elem()
}

func (i LogAnalyticsDestinationResponseArgs) ToLogAnalyticsDestinationResponseOutput() LogAnalyticsDestinationResponseOutput {
	return i.ToLogAnalyticsDestinationResponseOutputWithContext(context.Background())
}

func (i LogAnalyticsDestinationResponseArgs) ToLogAnalyticsDestinationResponseOutputWithContext(ctx context.Context) LogAnalyticsDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsDestinationResponseOutput)
}

// LogAnalyticsDestinationResponseArrayInput is an input type that accepts LogAnalyticsDestinationResponseArray and LogAnalyticsDestinationResponseArrayOutput values.
// You can construct a concrete instance of `LogAnalyticsDestinationResponseArrayInput` via:
//
//          LogAnalyticsDestinationResponseArray{ LogAnalyticsDestinationResponseArgs{...} }
type LogAnalyticsDestinationResponseArrayInput interface {
	pulumi.Input

	ToLogAnalyticsDestinationResponseArrayOutput() LogAnalyticsDestinationResponseArrayOutput
	ToLogAnalyticsDestinationResponseArrayOutputWithContext(context.Context) LogAnalyticsDestinationResponseArrayOutput
}

type LogAnalyticsDestinationResponseArray []LogAnalyticsDestinationResponseInput

func (LogAnalyticsDestinationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestinationResponse)(nil)).Elem()
}

func (i LogAnalyticsDestinationResponseArray) ToLogAnalyticsDestinationResponseArrayOutput() LogAnalyticsDestinationResponseArrayOutput {
	return i.ToLogAnalyticsDestinationResponseArrayOutputWithContext(context.Background())
}

func (i LogAnalyticsDestinationResponseArray) ToLogAnalyticsDestinationResponseArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsDestinationResponseArrayOutput)
}

// Log Analytics destination.
type LogAnalyticsDestinationResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestinationResponse)(nil)).Elem()
}

func (o LogAnalyticsDestinationResponseOutput) ToLogAnalyticsDestinationResponseOutput() LogAnalyticsDestinationResponseOutput {
	return o
}

func (o LogAnalyticsDestinationResponseOutput) ToLogAnalyticsDestinationResponseOutputWithContext(ctx context.Context) LogAnalyticsDestinationResponseOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o LogAnalyticsDestinationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsDestinationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Log Analytics workspace.
func (o LogAnalyticsDestinationResponseOutput) WorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsDestinationResponse) string { return v.WorkspaceResourceId }).(pulumi.StringOutput)
}

type LogAnalyticsDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestinationResponse)(nil)).Elem()
}

func (o LogAnalyticsDestinationResponseArrayOutput) ToLogAnalyticsDestinationResponseArrayOutput() LogAnalyticsDestinationResponseArrayOutput {
	return o
}

func (o LogAnalyticsDestinationResponseArrayOutput) ToLogAnalyticsDestinationResponseArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationResponseArrayOutput {
	return o
}

func (o LogAnalyticsDestinationResponseArrayOutput) Index(i pulumi.IntInput) LogAnalyticsDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogAnalyticsDestinationResponse {
		return vs[0].([]LogAnalyticsDestinationResponse)[vs[1].(int)]
	}).(LogAnalyticsDestinationResponseOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSource struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers []string `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds int `pulumi:"samplingFrequencyInSeconds"`
	// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
	ScheduledTransferPeriod string `pulumi:"scheduledTransferPeriod"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// PerfCounterDataSourceInput is an input type that accepts PerfCounterDataSourceArgs and PerfCounterDataSourceOutput values.
// You can construct a concrete instance of `PerfCounterDataSourceInput` via:
//
//          PerfCounterDataSourceArgs{...}
type PerfCounterDataSourceInput interface {
	pulumi.Input

	ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput
	ToPerfCounterDataSourceOutputWithContext(context.Context) PerfCounterDataSourceOutput
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceArgs struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers pulumi.StringArrayInput `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds pulumi.IntInput `pulumi:"samplingFrequencyInSeconds"`
	// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
	ScheduledTransferPeriod pulumi.StringInput `pulumi:"scheduledTransferPeriod"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (PerfCounterDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSource)(nil)).Elem()
}

func (i PerfCounterDataSourceArgs) ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput {
	return i.ToPerfCounterDataSourceOutputWithContext(context.Background())
}

func (i PerfCounterDataSourceArgs) ToPerfCounterDataSourceOutputWithContext(ctx context.Context) PerfCounterDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfCounterDataSourceOutput)
}

// PerfCounterDataSourceArrayInput is an input type that accepts PerfCounterDataSourceArray and PerfCounterDataSourceArrayOutput values.
// You can construct a concrete instance of `PerfCounterDataSourceArrayInput` via:
//
//          PerfCounterDataSourceArray{ PerfCounterDataSourceArgs{...} }
type PerfCounterDataSourceArrayInput interface {
	pulumi.Input

	ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput
	ToPerfCounterDataSourceArrayOutputWithContext(context.Context) PerfCounterDataSourceArrayOutput
}

type PerfCounterDataSourceArray []PerfCounterDataSourceInput

func (PerfCounterDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSource)(nil)).Elem()
}

func (i PerfCounterDataSourceArray) ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput {
	return i.ToPerfCounterDataSourceArrayOutputWithContext(context.Background())
}

func (i PerfCounterDataSourceArray) ToPerfCounterDataSourceArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfCounterDataSourceArrayOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSource)(nil)).Elem()
}

func (o PerfCounterDataSourceOutput) ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput {
	return o
}

func (o PerfCounterDataSourceOutput) ToPerfCounterDataSourceOutputWithContext(ctx context.Context) PerfCounterDataSourceOutput {
	return o
}

// A list of specifier names of the performance counters you want to collect.
// Use a wildcard (*) to collect a counter for all instances.
// To get a list of performance counters on Windows, run the command 'typeperf'.
func (o PerfCounterDataSourceOutput) CounterSpecifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSource) []string { return v.CounterSpecifiers }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PerfCounterDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PerfCounterDataSource) string { return v.Name }).(pulumi.StringOutput)
}

// The number of seconds between consecutive counter measurements (samples).
func (o PerfCounterDataSourceOutput) SamplingFrequencyInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v PerfCounterDataSource) int { return v.SamplingFrequencyInSeconds }).(pulumi.IntOutput)
}

// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
func (o PerfCounterDataSourceOutput) ScheduledTransferPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v PerfCounterDataSource) string { return v.ScheduledTransferPeriod }).(pulumi.StringOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o PerfCounterDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PerfCounterDataSourceArrayOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSource)(nil)).Elem()
}

func (o PerfCounterDataSourceArrayOutput) ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput {
	return o
}

func (o PerfCounterDataSourceArrayOutput) ToPerfCounterDataSourceArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceArrayOutput {
	return o
}

func (o PerfCounterDataSourceArrayOutput) Index(i pulumi.IntInput) PerfCounterDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PerfCounterDataSource {
		return vs[0].([]PerfCounterDataSource)[vs[1].(int)]
	}).(PerfCounterDataSourceOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceResponse struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers []string `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds int `pulumi:"samplingFrequencyInSeconds"`
	// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
	ScheduledTransferPeriod string `pulumi:"scheduledTransferPeriod"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// PerfCounterDataSourceResponseInput is an input type that accepts PerfCounterDataSourceResponseArgs and PerfCounterDataSourceResponseOutput values.
// You can construct a concrete instance of `PerfCounterDataSourceResponseInput` via:
//
//          PerfCounterDataSourceResponseArgs{...}
type PerfCounterDataSourceResponseInput interface {
	pulumi.Input

	ToPerfCounterDataSourceResponseOutput() PerfCounterDataSourceResponseOutput
	ToPerfCounterDataSourceResponseOutputWithContext(context.Context) PerfCounterDataSourceResponseOutput
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceResponseArgs struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers pulumi.StringArrayInput `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds pulumi.IntInput `pulumi:"samplingFrequencyInSeconds"`
	// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
	ScheduledTransferPeriod pulumi.StringInput `pulumi:"scheduledTransferPeriod"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (PerfCounterDataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSourceResponse)(nil)).Elem()
}

func (i PerfCounterDataSourceResponseArgs) ToPerfCounterDataSourceResponseOutput() PerfCounterDataSourceResponseOutput {
	return i.ToPerfCounterDataSourceResponseOutputWithContext(context.Background())
}

func (i PerfCounterDataSourceResponseArgs) ToPerfCounterDataSourceResponseOutputWithContext(ctx context.Context) PerfCounterDataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfCounterDataSourceResponseOutput)
}

// PerfCounterDataSourceResponseArrayInput is an input type that accepts PerfCounterDataSourceResponseArray and PerfCounterDataSourceResponseArrayOutput values.
// You can construct a concrete instance of `PerfCounterDataSourceResponseArrayInput` via:
//
//          PerfCounterDataSourceResponseArray{ PerfCounterDataSourceResponseArgs{...} }
type PerfCounterDataSourceResponseArrayInput interface {
	pulumi.Input

	ToPerfCounterDataSourceResponseArrayOutput() PerfCounterDataSourceResponseArrayOutput
	ToPerfCounterDataSourceResponseArrayOutputWithContext(context.Context) PerfCounterDataSourceResponseArrayOutput
}

type PerfCounterDataSourceResponseArray []PerfCounterDataSourceResponseInput

func (PerfCounterDataSourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSourceResponse)(nil)).Elem()
}

func (i PerfCounterDataSourceResponseArray) ToPerfCounterDataSourceResponseArrayOutput() PerfCounterDataSourceResponseArrayOutput {
	return i.ToPerfCounterDataSourceResponseArrayOutputWithContext(context.Background())
}

func (i PerfCounterDataSourceResponseArray) ToPerfCounterDataSourceResponseArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfCounterDataSourceResponseArrayOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceResponseOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSourceResponse)(nil)).Elem()
}

func (o PerfCounterDataSourceResponseOutput) ToPerfCounterDataSourceResponseOutput() PerfCounterDataSourceResponseOutput {
	return o
}

func (o PerfCounterDataSourceResponseOutput) ToPerfCounterDataSourceResponseOutputWithContext(ctx context.Context) PerfCounterDataSourceResponseOutput {
	return o
}

// A list of specifier names of the performance counters you want to collect.
// Use a wildcard (*) to collect a counter for all instances.
// To get a list of performance counters on Windows, run the command 'typeperf'.
func (o PerfCounterDataSourceResponseOutput) CounterSpecifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) []string { return v.CounterSpecifiers }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PerfCounterDataSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The number of seconds between consecutive counter measurements (samples).
func (o PerfCounterDataSourceResponseOutput) SamplingFrequencyInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) int { return v.SamplingFrequencyInSeconds }).(pulumi.IntOutput)
}

// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
func (o PerfCounterDataSourceResponseOutput) ScheduledTransferPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) string { return v.ScheduledTransferPeriod }).(pulumi.StringOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o PerfCounterDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PerfCounterDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSourceResponse)(nil)).Elem()
}

func (o PerfCounterDataSourceResponseArrayOutput) ToPerfCounterDataSourceResponseArrayOutput() PerfCounterDataSourceResponseArrayOutput {
	return o
}

func (o PerfCounterDataSourceResponseArrayOutput) ToPerfCounterDataSourceResponseArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceResponseArrayOutput {
	return o
}

func (o PerfCounterDataSourceResponseArrayOutput) Index(i pulumi.IntInput) PerfCounterDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PerfCounterDataSourceResponse {
		return vs[0].([]PerfCounterDataSourceResponse)[vs[1].(int)]
	}).(PerfCounterDataSourceResponseOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSource struct {
	// The list of facility names.
	FacilityNames []string `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels []string `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// SyslogDataSourceInput is an input type that accepts SyslogDataSourceArgs and SyslogDataSourceOutput values.
// You can construct a concrete instance of `SyslogDataSourceInput` via:
//
//          SyslogDataSourceArgs{...}
type SyslogDataSourceInput interface {
	pulumi.Input

	ToSyslogDataSourceOutput() SyslogDataSourceOutput
	ToSyslogDataSourceOutputWithContext(context.Context) SyslogDataSourceOutput
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceArgs struct {
	// The list of facility names.
	FacilityNames pulumi.StringArrayInput `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels pulumi.StringArrayInput `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (SyslogDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSource)(nil)).Elem()
}

func (i SyslogDataSourceArgs) ToSyslogDataSourceOutput() SyslogDataSourceOutput {
	return i.ToSyslogDataSourceOutputWithContext(context.Background())
}

func (i SyslogDataSourceArgs) ToSyslogDataSourceOutputWithContext(ctx context.Context) SyslogDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogDataSourceOutput)
}

// SyslogDataSourceArrayInput is an input type that accepts SyslogDataSourceArray and SyslogDataSourceArrayOutput values.
// You can construct a concrete instance of `SyslogDataSourceArrayInput` via:
//
//          SyslogDataSourceArray{ SyslogDataSourceArgs{...} }
type SyslogDataSourceArrayInput interface {
	pulumi.Input

	ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput
	ToSyslogDataSourceArrayOutputWithContext(context.Context) SyslogDataSourceArrayOutput
}

type SyslogDataSourceArray []SyslogDataSourceInput

func (SyslogDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSource)(nil)).Elem()
}

func (i SyslogDataSourceArray) ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput {
	return i.ToSyslogDataSourceArrayOutputWithContext(context.Background())
}

func (i SyslogDataSourceArray) ToSyslogDataSourceArrayOutputWithContext(ctx context.Context) SyslogDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogDataSourceArrayOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSource)(nil)).Elem()
}

func (o SyslogDataSourceOutput) ToSyslogDataSourceOutput() SyslogDataSourceOutput {
	return o
}

func (o SyslogDataSourceOutput) ToSyslogDataSourceOutputWithContext(ctx context.Context) SyslogDataSourceOutput {
	return o
}

// The list of facility names.
func (o SyslogDataSourceOutput) FacilityNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.FacilityNames }).(pulumi.StringArrayOutput)
}

// The log levels to collect.
func (o SyslogDataSourceOutput) LogLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.LogLevels }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o SyslogDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SyslogDataSource) string { return v.Name }).(pulumi.StringOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o SyslogDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type SyslogDataSourceArrayOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSource)(nil)).Elem()
}

func (o SyslogDataSourceArrayOutput) ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput {
	return o
}

func (o SyslogDataSourceArrayOutput) ToSyslogDataSourceArrayOutputWithContext(ctx context.Context) SyslogDataSourceArrayOutput {
	return o
}

func (o SyslogDataSourceArrayOutput) Index(i pulumi.IntInput) SyslogDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyslogDataSource {
		return vs[0].([]SyslogDataSource)[vs[1].(int)]
	}).(SyslogDataSourceOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceResponse struct {
	// The list of facility names.
	FacilityNames []string `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels []string `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// SyslogDataSourceResponseInput is an input type that accepts SyslogDataSourceResponseArgs and SyslogDataSourceResponseOutput values.
// You can construct a concrete instance of `SyslogDataSourceResponseInput` via:
//
//          SyslogDataSourceResponseArgs{...}
type SyslogDataSourceResponseInput interface {
	pulumi.Input

	ToSyslogDataSourceResponseOutput() SyslogDataSourceResponseOutput
	ToSyslogDataSourceResponseOutputWithContext(context.Context) SyslogDataSourceResponseOutput
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceResponseArgs struct {
	// The list of facility names.
	FacilityNames pulumi.StringArrayInput `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels pulumi.StringArrayInput `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (SyslogDataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSourceResponse)(nil)).Elem()
}

func (i SyslogDataSourceResponseArgs) ToSyslogDataSourceResponseOutput() SyslogDataSourceResponseOutput {
	return i.ToSyslogDataSourceResponseOutputWithContext(context.Background())
}

func (i SyslogDataSourceResponseArgs) ToSyslogDataSourceResponseOutputWithContext(ctx context.Context) SyslogDataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogDataSourceResponseOutput)
}

// SyslogDataSourceResponseArrayInput is an input type that accepts SyslogDataSourceResponseArray and SyslogDataSourceResponseArrayOutput values.
// You can construct a concrete instance of `SyslogDataSourceResponseArrayInput` via:
//
//          SyslogDataSourceResponseArray{ SyslogDataSourceResponseArgs{...} }
type SyslogDataSourceResponseArrayInput interface {
	pulumi.Input

	ToSyslogDataSourceResponseArrayOutput() SyslogDataSourceResponseArrayOutput
	ToSyslogDataSourceResponseArrayOutputWithContext(context.Context) SyslogDataSourceResponseArrayOutput
}

type SyslogDataSourceResponseArray []SyslogDataSourceResponseInput

func (SyslogDataSourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSourceResponse)(nil)).Elem()
}

func (i SyslogDataSourceResponseArray) ToSyslogDataSourceResponseArrayOutput() SyslogDataSourceResponseArrayOutput {
	return i.ToSyslogDataSourceResponseArrayOutputWithContext(context.Background())
}

func (i SyslogDataSourceResponseArray) ToSyslogDataSourceResponseArrayOutputWithContext(ctx context.Context) SyslogDataSourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogDataSourceResponseArrayOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceResponseOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSourceResponse)(nil)).Elem()
}

func (o SyslogDataSourceResponseOutput) ToSyslogDataSourceResponseOutput() SyslogDataSourceResponseOutput {
	return o
}

func (o SyslogDataSourceResponseOutput) ToSyslogDataSourceResponseOutputWithContext(ctx context.Context) SyslogDataSourceResponseOutput {
	return o
}

// The list of facility names.
func (o SyslogDataSourceResponseOutput) FacilityNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.FacilityNames }).(pulumi.StringArrayOutput)
}

// The log levels to collect.
func (o SyslogDataSourceResponseOutput) LogLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.LogLevels }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o SyslogDataSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o SyslogDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type SyslogDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSourceResponse)(nil)).Elem()
}

func (o SyslogDataSourceResponseArrayOutput) ToSyslogDataSourceResponseArrayOutput() SyslogDataSourceResponseArrayOutput {
	return o
}

func (o SyslogDataSourceResponseArrayOutput) ToSyslogDataSourceResponseArrayOutputWithContext(ctx context.Context) SyslogDataSourceResponseArrayOutput {
	return o
}

func (o SyslogDataSourceResponseArrayOutput) Index(i pulumi.IntInput) SyslogDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyslogDataSourceResponse {
		return vs[0].([]SyslogDataSourceResponse)[vs[1].(int)]
	}).(SyslogDataSourceResponseOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSource struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
	ScheduledTransferPeriod string `pulumi:"scheduledTransferPeriod"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries []string `pulumi:"xPathQueries"`
}

// WindowsEventLogDataSourceInput is an input type that accepts WindowsEventLogDataSourceArgs and WindowsEventLogDataSourceOutput values.
// You can construct a concrete instance of `WindowsEventLogDataSourceInput` via:
//
//          WindowsEventLogDataSourceArgs{...}
type WindowsEventLogDataSourceInput interface {
	pulumi.Input

	ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput
	ToWindowsEventLogDataSourceOutputWithContext(context.Context) WindowsEventLogDataSourceOutput
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceArgs struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
	ScheduledTransferPeriod pulumi.StringInput `pulumi:"scheduledTransferPeriod"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries pulumi.StringArrayInput `pulumi:"xPathQueries"`
}

func (WindowsEventLogDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSource)(nil)).Elem()
}

func (i WindowsEventLogDataSourceArgs) ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput {
	return i.ToWindowsEventLogDataSourceOutputWithContext(context.Background())
}

func (i WindowsEventLogDataSourceArgs) ToWindowsEventLogDataSourceOutputWithContext(ctx context.Context) WindowsEventLogDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsEventLogDataSourceOutput)
}

// WindowsEventLogDataSourceArrayInput is an input type that accepts WindowsEventLogDataSourceArray and WindowsEventLogDataSourceArrayOutput values.
// You can construct a concrete instance of `WindowsEventLogDataSourceArrayInput` via:
//
//          WindowsEventLogDataSourceArray{ WindowsEventLogDataSourceArgs{...} }
type WindowsEventLogDataSourceArrayInput interface {
	pulumi.Input

	ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput
	ToWindowsEventLogDataSourceArrayOutputWithContext(context.Context) WindowsEventLogDataSourceArrayOutput
}

type WindowsEventLogDataSourceArray []WindowsEventLogDataSourceInput

func (WindowsEventLogDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSource)(nil)).Elem()
}

func (i WindowsEventLogDataSourceArray) ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput {
	return i.ToWindowsEventLogDataSourceArrayOutputWithContext(context.Background())
}

func (i WindowsEventLogDataSourceArray) ToWindowsEventLogDataSourceArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsEventLogDataSourceArrayOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSource)(nil)).Elem()
}

func (o WindowsEventLogDataSourceOutput) ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput {
	return o
}

func (o WindowsEventLogDataSourceOutput) ToWindowsEventLogDataSourceOutputWithContext(ctx context.Context) WindowsEventLogDataSourceOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsEventLogDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) string { return v.Name }).(pulumi.StringOutput)
}

// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
func (o WindowsEventLogDataSourceOutput) ScheduledTransferPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) string { return v.ScheduledTransferPeriod }).(pulumi.StringOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o WindowsEventLogDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// A list of Windows Event Log queries in XPATH format.
func (o WindowsEventLogDataSourceOutput) XPathQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) []string { return v.XPathQueries }).(pulumi.StringArrayOutput)
}

type WindowsEventLogDataSourceArrayOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSource)(nil)).Elem()
}

func (o WindowsEventLogDataSourceArrayOutput) ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceArrayOutput) ToWindowsEventLogDataSourceArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceArrayOutput) Index(i pulumi.IntInput) WindowsEventLogDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsEventLogDataSource {
		return vs[0].([]WindowsEventLogDataSource)[vs[1].(int)]
	}).(WindowsEventLogDataSourceOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceResponse struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name string `pulumi:"name"`
	// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
	ScheduledTransferPeriod string `pulumi:"scheduledTransferPeriod"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries []string `pulumi:"xPathQueries"`
}

// WindowsEventLogDataSourceResponseInput is an input type that accepts WindowsEventLogDataSourceResponseArgs and WindowsEventLogDataSourceResponseOutput values.
// You can construct a concrete instance of `WindowsEventLogDataSourceResponseInput` via:
//
//          WindowsEventLogDataSourceResponseArgs{...}
type WindowsEventLogDataSourceResponseInput interface {
	pulumi.Input

	ToWindowsEventLogDataSourceResponseOutput() WindowsEventLogDataSourceResponseOutput
	ToWindowsEventLogDataSourceResponseOutputWithContext(context.Context) WindowsEventLogDataSourceResponseOutput
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceResponseArgs struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
	ScheduledTransferPeriod pulumi.StringInput `pulumi:"scheduledTransferPeriod"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries pulumi.StringArrayInput `pulumi:"xPathQueries"`
}

func (WindowsEventLogDataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSourceResponse)(nil)).Elem()
}

func (i WindowsEventLogDataSourceResponseArgs) ToWindowsEventLogDataSourceResponseOutput() WindowsEventLogDataSourceResponseOutput {
	return i.ToWindowsEventLogDataSourceResponseOutputWithContext(context.Background())
}

func (i WindowsEventLogDataSourceResponseArgs) ToWindowsEventLogDataSourceResponseOutputWithContext(ctx context.Context) WindowsEventLogDataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsEventLogDataSourceResponseOutput)
}

// WindowsEventLogDataSourceResponseArrayInput is an input type that accepts WindowsEventLogDataSourceResponseArray and WindowsEventLogDataSourceResponseArrayOutput values.
// You can construct a concrete instance of `WindowsEventLogDataSourceResponseArrayInput` via:
//
//          WindowsEventLogDataSourceResponseArray{ WindowsEventLogDataSourceResponseArgs{...} }
type WindowsEventLogDataSourceResponseArrayInput interface {
	pulumi.Input

	ToWindowsEventLogDataSourceResponseArrayOutput() WindowsEventLogDataSourceResponseArrayOutput
	ToWindowsEventLogDataSourceResponseArrayOutputWithContext(context.Context) WindowsEventLogDataSourceResponseArrayOutput
}

type WindowsEventLogDataSourceResponseArray []WindowsEventLogDataSourceResponseInput

func (WindowsEventLogDataSourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSourceResponse)(nil)).Elem()
}

func (i WindowsEventLogDataSourceResponseArray) ToWindowsEventLogDataSourceResponseArrayOutput() WindowsEventLogDataSourceResponseArrayOutput {
	return i.ToWindowsEventLogDataSourceResponseArrayOutputWithContext(context.Background())
}

func (i WindowsEventLogDataSourceResponseArray) ToWindowsEventLogDataSourceResponseArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsEventLogDataSourceResponseArrayOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceResponseOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSourceResponse)(nil)).Elem()
}

func (o WindowsEventLogDataSourceResponseOutput) ToWindowsEventLogDataSourceResponseOutput() WindowsEventLogDataSourceResponseOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseOutput) ToWindowsEventLogDataSourceResponseOutputWithContext(ctx context.Context) WindowsEventLogDataSourceResponseOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsEventLogDataSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The interval between data uploads (scheduled transfers), rounded up to the nearest minute.
func (o WindowsEventLogDataSourceResponseOutput) ScheduledTransferPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) string { return v.ScheduledTransferPeriod }).(pulumi.StringOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o WindowsEventLogDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// A list of Windows Event Log queries in XPATH format.
func (o WindowsEventLogDataSourceResponseOutput) XPathQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) []string { return v.XPathQueries }).(pulumi.StringArrayOutput)
}

type WindowsEventLogDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSourceResponse)(nil)).Elem()
}

func (o WindowsEventLogDataSourceResponseArrayOutput) ToWindowsEventLogDataSourceResponseArrayOutput() WindowsEventLogDataSourceResponseArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseArrayOutput) ToWindowsEventLogDataSourceResponseArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceResponseArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseArrayOutput) Index(i pulumi.IntInput) WindowsEventLogDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsEventLogDataSourceResponse {
		return vs[0].([]WindowsEventLogDataSourceResponse)[vs[1].(int)]
	}).(WindowsEventLogDataSourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDataSourcesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDataSourcesPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDestinationsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDestinationsPtrOutput{})
	pulumi.RegisterOutputType(DataFlowOutput{})
	pulumi.RegisterOutputType(DataFlowArrayOutput{})
	pulumi.RegisterOutputType(DataFlowResponseOutput{})
	pulumi.RegisterOutputType(DataFlowResponseArrayOutput{})
	pulumi.RegisterOutputType(DestinationsSpecAzureMonitorMetricsOutput{})
	pulumi.RegisterOutputType(DestinationsSpecAzureMonitorMetricsPtrOutput{})
	pulumi.RegisterOutputType(DestinationsSpecResponseAzureMonitorMetricsOutput{})
	pulumi.RegisterOutputType(DestinationsSpecResponseAzureMonitorMetricsPtrOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceArrayOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceResponseOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceArrayOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceResponseOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceArrayOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceResponseOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceArrayOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceResponseOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceResponseArrayOutput{})
}
