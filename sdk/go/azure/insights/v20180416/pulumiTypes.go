// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180416

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specify action need to be taken when rule type is Alert
type AlertingAction struct {
	// Azure action group reference.
	AznsAction *AzNsActionGroup `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
	OdataType string `pulumi:"odataType"`
	// Severity of the alert
	Severity string `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin *int `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerCondition `pulumi:"trigger"`
}

// AlertingActionInput is an input type that accepts AlertingActionArgs and AlertingActionOutput values.
// You can construct a concrete instance of `AlertingActionInput` via:
//
//          AlertingActionArgs{...}
type AlertingActionInput interface {
	pulumi.Input

	ToAlertingActionOutput() AlertingActionOutput
	ToAlertingActionOutputWithContext(context.Context) AlertingActionOutput
}

// Specify action need to be taken when rule type is Alert
type AlertingActionArgs struct {
	// Azure action group reference.
	AznsAction AzNsActionGroupPtrInput `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Severity of the alert
	Severity pulumi.StringInput `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin pulumi.IntPtrInput `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerConditionInput `pulumi:"trigger"`
}

func (AlertingActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingAction)(nil)).Elem()
}

func (i AlertingActionArgs) ToAlertingActionOutput() AlertingActionOutput {
	return i.ToAlertingActionOutputWithContext(context.Background())
}

func (i AlertingActionArgs) ToAlertingActionOutputWithContext(ctx context.Context) AlertingActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertingActionOutput)
}

// Specify action need to be taken when rule type is Alert
type AlertingActionOutput struct{ *pulumi.OutputState }

func (AlertingActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingAction)(nil)).Elem()
}

func (o AlertingActionOutput) ToAlertingActionOutput() AlertingActionOutput {
	return o
}

func (o AlertingActionOutput) ToAlertingActionOutputWithContext(ctx context.Context) AlertingActionOutput {
	return o
}

// Azure action group reference.
func (o AlertingActionOutput) AznsAction() AzNsActionGroupPtrOutput {
	return o.ApplyT(func(v AlertingAction) *AzNsActionGroup { return v.AznsAction }).(AzNsActionGroupPtrOutput)
}

// Specifies the action. Supported values - AlertingAction, LogToMetricAction
// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
func (o AlertingActionOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingAction) string { return v.OdataType }).(pulumi.StringOutput)
}

// Severity of the alert
func (o AlertingActionOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingAction) string { return v.Severity }).(pulumi.StringOutput)
}

// time (in minutes) for which Alerts should be throttled or suppressed.
func (o AlertingActionOutput) ThrottlingInMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertingAction) *int { return v.ThrottlingInMin }).(pulumi.IntPtrOutput)
}

// The trigger condition that results in the alert rule being.
func (o AlertingActionOutput) Trigger() TriggerConditionOutput {
	return o.ApplyT(func(v AlertingAction) TriggerCondition { return v.Trigger }).(TriggerConditionOutput)
}

// Specify action need to be taken when rule type is Alert
type AlertingActionInvokeResponse struct {
	// Azure action group reference.
	AznsAction *AzNsActionGroupInvokeResponse `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
	OdataType string `pulumi:"odataType"`
	// Severity of the alert
	Severity string `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin *int `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerConditionInvokeResponse `pulumi:"trigger"`
}

// AlertingActionInvokeResponseInput is an input type that accepts AlertingActionInvokeResponseArgs and AlertingActionInvokeResponseOutput values.
// You can construct a concrete instance of `AlertingActionInvokeResponseInput` via:
//
//          AlertingActionInvokeResponseArgs{...}
type AlertingActionInvokeResponseInput interface {
	pulumi.Input

	ToAlertingActionInvokeResponseOutput() AlertingActionInvokeResponseOutput
	ToAlertingActionInvokeResponseOutputWithContext(context.Context) AlertingActionInvokeResponseOutput
}

// Specify action need to be taken when rule type is Alert
type AlertingActionInvokeResponseArgs struct {
	// Azure action group reference.
	AznsAction AzNsActionGroupInvokeResponsePtrInput `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Severity of the alert
	Severity pulumi.StringInput `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin pulumi.IntPtrInput `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerConditionInvokeResponseInput `pulumi:"trigger"`
}

func (AlertingActionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingActionInvokeResponse)(nil)).Elem()
}

func (i AlertingActionInvokeResponseArgs) ToAlertingActionInvokeResponseOutput() AlertingActionInvokeResponseOutput {
	return i.ToAlertingActionInvokeResponseOutputWithContext(context.Background())
}

func (i AlertingActionInvokeResponseArgs) ToAlertingActionInvokeResponseOutputWithContext(ctx context.Context) AlertingActionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertingActionInvokeResponseOutput)
}

// Specify action need to be taken when rule type is Alert
type AlertingActionInvokeResponseOutput struct{ *pulumi.OutputState }

func (AlertingActionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingActionInvokeResponse)(nil)).Elem()
}

func (o AlertingActionInvokeResponseOutput) ToAlertingActionInvokeResponseOutput() AlertingActionInvokeResponseOutput {
	return o
}

func (o AlertingActionInvokeResponseOutput) ToAlertingActionInvokeResponseOutputWithContext(ctx context.Context) AlertingActionInvokeResponseOutput {
	return o
}

// Azure action group reference.
func (o AlertingActionInvokeResponseOutput) AznsAction() AzNsActionGroupInvokeResponsePtrOutput {
	return o.ApplyT(func(v AlertingActionInvokeResponse) *AzNsActionGroupInvokeResponse { return v.AznsAction }).(AzNsActionGroupInvokeResponsePtrOutput)
}

// Specifies the action. Supported values - AlertingAction, LogToMetricAction
// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
func (o AlertingActionInvokeResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingActionInvokeResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Severity of the alert
func (o AlertingActionInvokeResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingActionInvokeResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// time (in minutes) for which Alerts should be throttled or suppressed.
func (o AlertingActionInvokeResponseOutput) ThrottlingInMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertingActionInvokeResponse) *int { return v.ThrottlingInMin }).(pulumi.IntPtrOutput)
}

// The trigger condition that results in the alert rule being.
func (o AlertingActionInvokeResponseOutput) Trigger() TriggerConditionInvokeResponseOutput {
	return o.ApplyT(func(v AlertingActionInvokeResponse) TriggerConditionInvokeResponse { return v.Trigger }).(TriggerConditionInvokeResponseOutput)
}

// Specify action need to be taken when rule type is Alert
type AlertingActionResponse struct {
	// Azure action group reference.
	AznsAction *AzNsActionGroupResponse `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
	OdataType string `pulumi:"odataType"`
	// Severity of the alert
	Severity string `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin *int `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerConditionResponse `pulumi:"trigger"`
}

// AlertingActionResponseInput is an input type that accepts AlertingActionResponseArgs and AlertingActionResponseOutput values.
// You can construct a concrete instance of `AlertingActionResponseInput` via:
//
//          AlertingActionResponseArgs{...}
type AlertingActionResponseInput interface {
	pulumi.Input

	ToAlertingActionResponseOutput() AlertingActionResponseOutput
	ToAlertingActionResponseOutputWithContext(context.Context) AlertingActionResponseOutput
}

// Specify action need to be taken when rule type is Alert
type AlertingActionResponseArgs struct {
	// Azure action group reference.
	AznsAction AzNsActionGroupResponsePtrInput `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Severity of the alert
	Severity pulumi.StringInput `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin pulumi.IntPtrInput `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerConditionResponseInput `pulumi:"trigger"`
}

func (AlertingActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingActionResponse)(nil)).Elem()
}

func (i AlertingActionResponseArgs) ToAlertingActionResponseOutput() AlertingActionResponseOutput {
	return i.ToAlertingActionResponseOutputWithContext(context.Background())
}

func (i AlertingActionResponseArgs) ToAlertingActionResponseOutputWithContext(ctx context.Context) AlertingActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertingActionResponseOutput)
}

// Specify action need to be taken when rule type is Alert
type AlertingActionResponseOutput struct{ *pulumi.OutputState }

func (AlertingActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingActionResponse)(nil)).Elem()
}

func (o AlertingActionResponseOutput) ToAlertingActionResponseOutput() AlertingActionResponseOutput {
	return o
}

func (o AlertingActionResponseOutput) ToAlertingActionResponseOutputWithContext(ctx context.Context) AlertingActionResponseOutput {
	return o
}

// Azure action group reference.
func (o AlertingActionResponseOutput) AznsAction() AzNsActionGroupResponsePtrOutput {
	return o.ApplyT(func(v AlertingActionResponse) *AzNsActionGroupResponse { return v.AznsAction }).(AzNsActionGroupResponsePtrOutput)
}

// Specifies the action. Supported values - AlertingAction, LogToMetricAction
// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
func (o AlertingActionResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingActionResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Severity of the alert
func (o AlertingActionResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingActionResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// time (in minutes) for which Alerts should be throttled or suppressed.
func (o AlertingActionResponseOutput) ThrottlingInMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertingActionResponse) *int { return v.ThrottlingInMin }).(pulumi.IntPtrOutput)
}

// The trigger condition that results in the alert rule being.
func (o AlertingActionResponseOutput) Trigger() TriggerConditionResponseOutput {
	return o.ApplyT(func(v AlertingActionResponse) TriggerConditionResponse { return v.Trigger }).(TriggerConditionResponseOutput)
}

// Azure action group
type AzNsActionGroup struct {
	// Azure Action Group reference.
	ActionGroup []string `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject *string `pulumi:"emailSubject"`
}

// AzNsActionGroupInput is an input type that accepts AzNsActionGroupArgs and AzNsActionGroupOutput values.
// You can construct a concrete instance of `AzNsActionGroupInput` via:
//
//          AzNsActionGroupArgs{...}
type AzNsActionGroupInput interface {
	pulumi.Input

	ToAzNsActionGroupOutput() AzNsActionGroupOutput
	ToAzNsActionGroupOutputWithContext(context.Context) AzNsActionGroupOutput
}

// Azure action group
type AzNsActionGroupArgs struct {
	// Azure Action Group reference.
	ActionGroup pulumi.StringArrayInput `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject pulumi.StringPtrInput `pulumi:"emailSubject"`
}

func (AzNsActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzNsActionGroup)(nil)).Elem()
}

func (i AzNsActionGroupArgs) ToAzNsActionGroupOutput() AzNsActionGroupOutput {
	return i.ToAzNsActionGroupOutputWithContext(context.Background())
}

func (i AzNsActionGroupArgs) ToAzNsActionGroupOutputWithContext(ctx context.Context) AzNsActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupOutput)
}

func (i AzNsActionGroupArgs) ToAzNsActionGroupPtrOutput() AzNsActionGroupPtrOutput {
	return i.ToAzNsActionGroupPtrOutputWithContext(context.Background())
}

func (i AzNsActionGroupArgs) ToAzNsActionGroupPtrOutputWithContext(ctx context.Context) AzNsActionGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupOutput).ToAzNsActionGroupPtrOutputWithContext(ctx)
}

// AzNsActionGroupPtrInput is an input type that accepts AzNsActionGroupArgs, AzNsActionGroupPtr and AzNsActionGroupPtrOutput values.
// You can construct a concrete instance of `AzNsActionGroupPtrInput` via:
//
//          AzNsActionGroupArgs{...}
//
//  or:
//
//          nil
type AzNsActionGroupPtrInput interface {
	pulumi.Input

	ToAzNsActionGroupPtrOutput() AzNsActionGroupPtrOutput
	ToAzNsActionGroupPtrOutputWithContext(context.Context) AzNsActionGroupPtrOutput
}

type azNsActionGroupPtrType AzNsActionGroupArgs

func AzNsActionGroupPtr(v *AzNsActionGroupArgs) AzNsActionGroupPtrInput {
	return (*azNsActionGroupPtrType)(v)
}

func (*azNsActionGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzNsActionGroup)(nil)).Elem()
}

func (i *azNsActionGroupPtrType) ToAzNsActionGroupPtrOutput() AzNsActionGroupPtrOutput {
	return i.ToAzNsActionGroupPtrOutputWithContext(context.Background())
}

func (i *azNsActionGroupPtrType) ToAzNsActionGroupPtrOutputWithContext(ctx context.Context) AzNsActionGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupPtrOutput)
}

// Azure action group
type AzNsActionGroupOutput struct{ *pulumi.OutputState }

func (AzNsActionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzNsActionGroup)(nil)).Elem()
}

func (o AzNsActionGroupOutput) ToAzNsActionGroupOutput() AzNsActionGroupOutput {
	return o
}

func (o AzNsActionGroupOutput) ToAzNsActionGroupOutputWithContext(ctx context.Context) AzNsActionGroupOutput {
	return o
}

func (o AzNsActionGroupOutput) ToAzNsActionGroupPtrOutput() AzNsActionGroupPtrOutput {
	return o.ToAzNsActionGroupPtrOutputWithContext(context.Background())
}

func (o AzNsActionGroupOutput) ToAzNsActionGroupPtrOutputWithContext(ctx context.Context) AzNsActionGroupPtrOutput {
	return o.ApplyT(func(v AzNsActionGroup) *AzNsActionGroup {
		return &v
	}).(AzNsActionGroupPtrOutput)
}

// Azure Action Group reference.
func (o AzNsActionGroupOutput) ActionGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzNsActionGroup) []string { return v.ActionGroup }).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group
func (o AzNsActionGroupOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzNsActionGroup) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group
func (o AzNsActionGroupOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzNsActionGroup) *string { return v.EmailSubject }).(pulumi.StringPtrOutput)
}

type AzNsActionGroupPtrOutput struct{ *pulumi.OutputState }

func (AzNsActionGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzNsActionGroup)(nil)).Elem()
}

func (o AzNsActionGroupPtrOutput) ToAzNsActionGroupPtrOutput() AzNsActionGroupPtrOutput {
	return o
}

func (o AzNsActionGroupPtrOutput) ToAzNsActionGroupPtrOutputWithContext(ctx context.Context) AzNsActionGroupPtrOutput {
	return o
}

func (o AzNsActionGroupPtrOutput) Elem() AzNsActionGroupOutput {
	return o.ApplyT(func(v *AzNsActionGroup) AzNsActionGroup { return *v }).(AzNsActionGroupOutput)
}

// Azure Action Group reference.
func (o AzNsActionGroupPtrOutput) ActionGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzNsActionGroup) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroup
	}).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group
func (o AzNsActionGroupPtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzNsActionGroup) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group
func (o AzNsActionGroupPtrOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzNsActionGroup) *string {
		if v == nil {
			return nil
		}
		return v.EmailSubject
	}).(pulumi.StringPtrOutput)
}

// Azure action group
type AzNsActionGroupInvokeResponse struct {
	// Azure Action Group reference.
	ActionGroup []string `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject *string `pulumi:"emailSubject"`
}

// AzNsActionGroupInvokeResponseInput is an input type that accepts AzNsActionGroupInvokeResponseArgs and AzNsActionGroupInvokeResponseOutput values.
// You can construct a concrete instance of `AzNsActionGroupInvokeResponseInput` via:
//
//          AzNsActionGroupInvokeResponseArgs{...}
type AzNsActionGroupInvokeResponseInput interface {
	pulumi.Input

	ToAzNsActionGroupInvokeResponseOutput() AzNsActionGroupInvokeResponseOutput
	ToAzNsActionGroupInvokeResponseOutputWithContext(context.Context) AzNsActionGroupInvokeResponseOutput
}

// Azure action group
type AzNsActionGroupInvokeResponseArgs struct {
	// Azure Action Group reference.
	ActionGroup pulumi.StringArrayInput `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject pulumi.StringPtrInput `pulumi:"emailSubject"`
}

func (AzNsActionGroupInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzNsActionGroupInvokeResponse)(nil)).Elem()
}

func (i AzNsActionGroupInvokeResponseArgs) ToAzNsActionGroupInvokeResponseOutput() AzNsActionGroupInvokeResponseOutput {
	return i.ToAzNsActionGroupInvokeResponseOutputWithContext(context.Background())
}

func (i AzNsActionGroupInvokeResponseArgs) ToAzNsActionGroupInvokeResponseOutputWithContext(ctx context.Context) AzNsActionGroupInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupInvokeResponseOutput)
}

func (i AzNsActionGroupInvokeResponseArgs) ToAzNsActionGroupInvokeResponsePtrOutput() AzNsActionGroupInvokeResponsePtrOutput {
	return i.ToAzNsActionGroupInvokeResponsePtrOutputWithContext(context.Background())
}

func (i AzNsActionGroupInvokeResponseArgs) ToAzNsActionGroupInvokeResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupInvokeResponseOutput).ToAzNsActionGroupInvokeResponsePtrOutputWithContext(ctx)
}

// AzNsActionGroupInvokeResponsePtrInput is an input type that accepts AzNsActionGroupInvokeResponseArgs, AzNsActionGroupInvokeResponsePtr and AzNsActionGroupInvokeResponsePtrOutput values.
// You can construct a concrete instance of `AzNsActionGroupInvokeResponsePtrInput` via:
//
//          AzNsActionGroupInvokeResponseArgs{...}
//
//  or:
//
//          nil
type AzNsActionGroupInvokeResponsePtrInput interface {
	pulumi.Input

	ToAzNsActionGroupInvokeResponsePtrOutput() AzNsActionGroupInvokeResponsePtrOutput
	ToAzNsActionGroupInvokeResponsePtrOutputWithContext(context.Context) AzNsActionGroupInvokeResponsePtrOutput
}

type azNsActionGroupInvokeResponsePtrType AzNsActionGroupInvokeResponseArgs

func AzNsActionGroupInvokeResponsePtr(v *AzNsActionGroupInvokeResponseArgs) AzNsActionGroupInvokeResponsePtrInput {
	return (*azNsActionGroupInvokeResponsePtrType)(v)
}

func (*azNsActionGroupInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzNsActionGroupInvokeResponse)(nil)).Elem()
}

func (i *azNsActionGroupInvokeResponsePtrType) ToAzNsActionGroupInvokeResponsePtrOutput() AzNsActionGroupInvokeResponsePtrOutput {
	return i.ToAzNsActionGroupInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *azNsActionGroupInvokeResponsePtrType) ToAzNsActionGroupInvokeResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupInvokeResponsePtrOutput)
}

// Azure action group
type AzNsActionGroupInvokeResponseOutput struct{ *pulumi.OutputState }

func (AzNsActionGroupInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzNsActionGroupInvokeResponse)(nil)).Elem()
}

func (o AzNsActionGroupInvokeResponseOutput) ToAzNsActionGroupInvokeResponseOutput() AzNsActionGroupInvokeResponseOutput {
	return o
}

func (o AzNsActionGroupInvokeResponseOutput) ToAzNsActionGroupInvokeResponseOutputWithContext(ctx context.Context) AzNsActionGroupInvokeResponseOutput {
	return o
}

func (o AzNsActionGroupInvokeResponseOutput) ToAzNsActionGroupInvokeResponsePtrOutput() AzNsActionGroupInvokeResponsePtrOutput {
	return o.ToAzNsActionGroupInvokeResponsePtrOutputWithContext(context.Background())
}

func (o AzNsActionGroupInvokeResponseOutput) ToAzNsActionGroupInvokeResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupInvokeResponsePtrOutput {
	return o.ApplyT(func(v AzNsActionGroupInvokeResponse) *AzNsActionGroupInvokeResponse {
		return &v
	}).(AzNsActionGroupInvokeResponsePtrOutput)
}

// Azure Action Group reference.
func (o AzNsActionGroupInvokeResponseOutput) ActionGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzNsActionGroupInvokeResponse) []string { return v.ActionGroup }).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group
func (o AzNsActionGroupInvokeResponseOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzNsActionGroupInvokeResponse) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group
func (o AzNsActionGroupInvokeResponseOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzNsActionGroupInvokeResponse) *string { return v.EmailSubject }).(pulumi.StringPtrOutput)
}

type AzNsActionGroupInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (AzNsActionGroupInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzNsActionGroupInvokeResponse)(nil)).Elem()
}

func (o AzNsActionGroupInvokeResponsePtrOutput) ToAzNsActionGroupInvokeResponsePtrOutput() AzNsActionGroupInvokeResponsePtrOutput {
	return o
}

func (o AzNsActionGroupInvokeResponsePtrOutput) ToAzNsActionGroupInvokeResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupInvokeResponsePtrOutput {
	return o
}

func (o AzNsActionGroupInvokeResponsePtrOutput) Elem() AzNsActionGroupInvokeResponseOutput {
	return o.ApplyT(func(v *AzNsActionGroupInvokeResponse) AzNsActionGroupInvokeResponse { return *v }).(AzNsActionGroupInvokeResponseOutput)
}

// Azure Action Group reference.
func (o AzNsActionGroupInvokeResponsePtrOutput) ActionGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzNsActionGroupInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroup
	}).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group
func (o AzNsActionGroupInvokeResponsePtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzNsActionGroupInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group
func (o AzNsActionGroupInvokeResponsePtrOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzNsActionGroupInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.EmailSubject
	}).(pulumi.StringPtrOutput)
}

// Azure action group
type AzNsActionGroupResponse struct {
	// Azure Action Group reference.
	ActionGroup []string `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject *string `pulumi:"emailSubject"`
}

// AzNsActionGroupResponseInput is an input type that accepts AzNsActionGroupResponseArgs and AzNsActionGroupResponseOutput values.
// You can construct a concrete instance of `AzNsActionGroupResponseInput` via:
//
//          AzNsActionGroupResponseArgs{...}
type AzNsActionGroupResponseInput interface {
	pulumi.Input

	ToAzNsActionGroupResponseOutput() AzNsActionGroupResponseOutput
	ToAzNsActionGroupResponseOutputWithContext(context.Context) AzNsActionGroupResponseOutput
}

// Azure action group
type AzNsActionGroupResponseArgs struct {
	// Azure Action Group reference.
	ActionGroup pulumi.StringArrayInput `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject pulumi.StringPtrInput `pulumi:"emailSubject"`
}

func (AzNsActionGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzNsActionGroupResponse)(nil)).Elem()
}

func (i AzNsActionGroupResponseArgs) ToAzNsActionGroupResponseOutput() AzNsActionGroupResponseOutput {
	return i.ToAzNsActionGroupResponseOutputWithContext(context.Background())
}

func (i AzNsActionGroupResponseArgs) ToAzNsActionGroupResponseOutputWithContext(ctx context.Context) AzNsActionGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupResponseOutput)
}

func (i AzNsActionGroupResponseArgs) ToAzNsActionGroupResponsePtrOutput() AzNsActionGroupResponsePtrOutput {
	return i.ToAzNsActionGroupResponsePtrOutputWithContext(context.Background())
}

func (i AzNsActionGroupResponseArgs) ToAzNsActionGroupResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupResponseOutput).ToAzNsActionGroupResponsePtrOutputWithContext(ctx)
}

// AzNsActionGroupResponsePtrInput is an input type that accepts AzNsActionGroupResponseArgs, AzNsActionGroupResponsePtr and AzNsActionGroupResponsePtrOutput values.
// You can construct a concrete instance of `AzNsActionGroupResponsePtrInput` via:
//
//          AzNsActionGroupResponseArgs{...}
//
//  or:
//
//          nil
type AzNsActionGroupResponsePtrInput interface {
	pulumi.Input

	ToAzNsActionGroupResponsePtrOutput() AzNsActionGroupResponsePtrOutput
	ToAzNsActionGroupResponsePtrOutputWithContext(context.Context) AzNsActionGroupResponsePtrOutput
}

type azNsActionGroupResponsePtrType AzNsActionGroupResponseArgs

func AzNsActionGroupResponsePtr(v *AzNsActionGroupResponseArgs) AzNsActionGroupResponsePtrInput {
	return (*azNsActionGroupResponsePtrType)(v)
}

func (*azNsActionGroupResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzNsActionGroupResponse)(nil)).Elem()
}

func (i *azNsActionGroupResponsePtrType) ToAzNsActionGroupResponsePtrOutput() AzNsActionGroupResponsePtrOutput {
	return i.ToAzNsActionGroupResponsePtrOutputWithContext(context.Background())
}

func (i *azNsActionGroupResponsePtrType) ToAzNsActionGroupResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupResponsePtrOutput)
}

// Azure action group
type AzNsActionGroupResponseOutput struct{ *pulumi.OutputState }

func (AzNsActionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzNsActionGroupResponse)(nil)).Elem()
}

func (o AzNsActionGroupResponseOutput) ToAzNsActionGroupResponseOutput() AzNsActionGroupResponseOutput {
	return o
}

func (o AzNsActionGroupResponseOutput) ToAzNsActionGroupResponseOutputWithContext(ctx context.Context) AzNsActionGroupResponseOutput {
	return o
}

func (o AzNsActionGroupResponseOutput) ToAzNsActionGroupResponsePtrOutput() AzNsActionGroupResponsePtrOutput {
	return o.ToAzNsActionGroupResponsePtrOutputWithContext(context.Background())
}

func (o AzNsActionGroupResponseOutput) ToAzNsActionGroupResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupResponsePtrOutput {
	return o.ApplyT(func(v AzNsActionGroupResponse) *AzNsActionGroupResponse {
		return &v
	}).(AzNsActionGroupResponsePtrOutput)
}

// Azure Action Group reference.
func (o AzNsActionGroupResponseOutput) ActionGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzNsActionGroupResponse) []string { return v.ActionGroup }).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group
func (o AzNsActionGroupResponseOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzNsActionGroupResponse) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group
func (o AzNsActionGroupResponseOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzNsActionGroupResponse) *string { return v.EmailSubject }).(pulumi.StringPtrOutput)
}

type AzNsActionGroupResponsePtrOutput struct{ *pulumi.OutputState }

func (AzNsActionGroupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzNsActionGroupResponse)(nil)).Elem()
}

func (o AzNsActionGroupResponsePtrOutput) ToAzNsActionGroupResponsePtrOutput() AzNsActionGroupResponsePtrOutput {
	return o
}

func (o AzNsActionGroupResponsePtrOutput) ToAzNsActionGroupResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupResponsePtrOutput {
	return o
}

func (o AzNsActionGroupResponsePtrOutput) Elem() AzNsActionGroupResponseOutput {
	return o.ApplyT(func(v *AzNsActionGroupResponse) AzNsActionGroupResponse { return *v }).(AzNsActionGroupResponseOutput)
}

// Azure Action Group reference.
func (o AzNsActionGroupResponsePtrOutput) ActionGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzNsActionGroupResponse) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroup
	}).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group
func (o AzNsActionGroupResponsePtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzNsActionGroupResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group
func (o AzNsActionGroupResponsePtrOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzNsActionGroupResponse) *string {
		if v == nil {
			return nil
		}
		return v.EmailSubject
	}).(pulumi.StringPtrOutput)
}

// Specifies the criteria for converting log to metric.
type Criteria struct {
	// List of Dimensions for creating metric
	Dimensions []Dimension `pulumi:"dimensions"`
	// Name of the metric
	MetricName string `pulumi:"metricName"`
}

// CriteriaInput is an input type that accepts CriteriaArgs and CriteriaOutput values.
// You can construct a concrete instance of `CriteriaInput` via:
//
//          CriteriaArgs{...}
type CriteriaInput interface {
	pulumi.Input

	ToCriteriaOutput() CriteriaOutput
	ToCriteriaOutputWithContext(context.Context) CriteriaOutput
}

// Specifies the criteria for converting log to metric.
type CriteriaArgs struct {
	// List of Dimensions for creating metric
	Dimensions DimensionArrayInput `pulumi:"dimensions"`
	// Name of the metric
	MetricName pulumi.StringInput `pulumi:"metricName"`
}

func (CriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Criteria)(nil)).Elem()
}

func (i CriteriaArgs) ToCriteriaOutput() CriteriaOutput {
	return i.ToCriteriaOutputWithContext(context.Background())
}

func (i CriteriaArgs) ToCriteriaOutputWithContext(ctx context.Context) CriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriteriaOutput)
}

// CriteriaArrayInput is an input type that accepts CriteriaArray and CriteriaArrayOutput values.
// You can construct a concrete instance of `CriteriaArrayInput` via:
//
//          CriteriaArray{ CriteriaArgs{...} }
type CriteriaArrayInput interface {
	pulumi.Input

	ToCriteriaArrayOutput() CriteriaArrayOutput
	ToCriteriaArrayOutputWithContext(context.Context) CriteriaArrayOutput
}

type CriteriaArray []CriteriaInput

func (CriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Criteria)(nil)).Elem()
}

func (i CriteriaArray) ToCriteriaArrayOutput() CriteriaArrayOutput {
	return i.ToCriteriaArrayOutputWithContext(context.Background())
}

func (i CriteriaArray) ToCriteriaArrayOutputWithContext(ctx context.Context) CriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriteriaArrayOutput)
}

// Specifies the criteria for converting log to metric.
type CriteriaOutput struct{ *pulumi.OutputState }

func (CriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Criteria)(nil)).Elem()
}

func (o CriteriaOutput) ToCriteriaOutput() CriteriaOutput {
	return o
}

func (o CriteriaOutput) ToCriteriaOutputWithContext(ctx context.Context) CriteriaOutput {
	return o
}

// List of Dimensions for creating metric
func (o CriteriaOutput) Dimensions() DimensionArrayOutput {
	return o.ApplyT(func(v Criteria) []Dimension { return v.Dimensions }).(DimensionArrayOutput)
}

// Name of the metric
func (o CriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v Criteria) string { return v.MetricName }).(pulumi.StringOutput)
}

type CriteriaArrayOutput struct{ *pulumi.OutputState }

func (CriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Criteria)(nil)).Elem()
}

func (o CriteriaArrayOutput) ToCriteriaArrayOutput() CriteriaArrayOutput {
	return o
}

func (o CriteriaArrayOutput) ToCriteriaArrayOutputWithContext(ctx context.Context) CriteriaArrayOutput {
	return o
}

func (o CriteriaArrayOutput) Index(i pulumi.IntInput) CriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Criteria {
		return vs[0].([]Criteria)[vs[1].(int)]
	}).(CriteriaOutput)
}

// Specifies the criteria for converting log to metric.
type CriteriaInvokeResponse struct {
	// List of Dimensions for creating metric
	Dimensions []DimensionInvokeResponse `pulumi:"dimensions"`
	// Name of the metric
	MetricName string `pulumi:"metricName"`
}

// CriteriaInvokeResponseInput is an input type that accepts CriteriaInvokeResponseArgs and CriteriaInvokeResponseOutput values.
// You can construct a concrete instance of `CriteriaInvokeResponseInput` via:
//
//          CriteriaInvokeResponseArgs{...}
type CriteriaInvokeResponseInput interface {
	pulumi.Input

	ToCriteriaInvokeResponseOutput() CriteriaInvokeResponseOutput
	ToCriteriaInvokeResponseOutputWithContext(context.Context) CriteriaInvokeResponseOutput
}

// Specifies the criteria for converting log to metric.
type CriteriaInvokeResponseArgs struct {
	// List of Dimensions for creating metric
	Dimensions DimensionInvokeResponseArrayInput `pulumi:"dimensions"`
	// Name of the metric
	MetricName pulumi.StringInput `pulumi:"metricName"`
}

func (CriteriaInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CriteriaInvokeResponse)(nil)).Elem()
}

func (i CriteriaInvokeResponseArgs) ToCriteriaInvokeResponseOutput() CriteriaInvokeResponseOutput {
	return i.ToCriteriaInvokeResponseOutputWithContext(context.Background())
}

func (i CriteriaInvokeResponseArgs) ToCriteriaInvokeResponseOutputWithContext(ctx context.Context) CriteriaInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriteriaInvokeResponseOutput)
}

// CriteriaInvokeResponseArrayInput is an input type that accepts CriteriaInvokeResponseArray and CriteriaInvokeResponseArrayOutput values.
// You can construct a concrete instance of `CriteriaInvokeResponseArrayInput` via:
//
//          CriteriaInvokeResponseArray{ CriteriaInvokeResponseArgs{...} }
type CriteriaInvokeResponseArrayInput interface {
	pulumi.Input

	ToCriteriaInvokeResponseArrayOutput() CriteriaInvokeResponseArrayOutput
	ToCriteriaInvokeResponseArrayOutputWithContext(context.Context) CriteriaInvokeResponseArrayOutput
}

type CriteriaInvokeResponseArray []CriteriaInvokeResponseInput

func (CriteriaInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CriteriaInvokeResponse)(nil)).Elem()
}

func (i CriteriaInvokeResponseArray) ToCriteriaInvokeResponseArrayOutput() CriteriaInvokeResponseArrayOutput {
	return i.ToCriteriaInvokeResponseArrayOutputWithContext(context.Background())
}

func (i CriteriaInvokeResponseArray) ToCriteriaInvokeResponseArrayOutputWithContext(ctx context.Context) CriteriaInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriteriaInvokeResponseArrayOutput)
}

// Specifies the criteria for converting log to metric.
type CriteriaInvokeResponseOutput struct{ *pulumi.OutputState }

func (CriteriaInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CriteriaInvokeResponse)(nil)).Elem()
}

func (o CriteriaInvokeResponseOutput) ToCriteriaInvokeResponseOutput() CriteriaInvokeResponseOutput {
	return o
}

func (o CriteriaInvokeResponseOutput) ToCriteriaInvokeResponseOutputWithContext(ctx context.Context) CriteriaInvokeResponseOutput {
	return o
}

// List of Dimensions for creating metric
func (o CriteriaInvokeResponseOutput) Dimensions() DimensionInvokeResponseArrayOutput {
	return o.ApplyT(func(v CriteriaInvokeResponse) []DimensionInvokeResponse { return v.Dimensions }).(DimensionInvokeResponseArrayOutput)
}

// Name of the metric
func (o CriteriaInvokeResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v CriteriaInvokeResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

type CriteriaInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (CriteriaInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CriteriaInvokeResponse)(nil)).Elem()
}

func (o CriteriaInvokeResponseArrayOutput) ToCriteriaInvokeResponseArrayOutput() CriteriaInvokeResponseArrayOutput {
	return o
}

func (o CriteriaInvokeResponseArrayOutput) ToCriteriaInvokeResponseArrayOutputWithContext(ctx context.Context) CriteriaInvokeResponseArrayOutput {
	return o
}

func (o CriteriaInvokeResponseArrayOutput) Index(i pulumi.IntInput) CriteriaInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CriteriaInvokeResponse {
		return vs[0].([]CriteriaInvokeResponse)[vs[1].(int)]
	}).(CriteriaInvokeResponseOutput)
}

// Specifies the criteria for converting log to metric.
type CriteriaResponse struct {
	// List of Dimensions for creating metric
	Dimensions []DimensionResponse `pulumi:"dimensions"`
	// Name of the metric
	MetricName string `pulumi:"metricName"`
}

// CriteriaResponseInput is an input type that accepts CriteriaResponseArgs and CriteriaResponseOutput values.
// You can construct a concrete instance of `CriteriaResponseInput` via:
//
//          CriteriaResponseArgs{...}
type CriteriaResponseInput interface {
	pulumi.Input

	ToCriteriaResponseOutput() CriteriaResponseOutput
	ToCriteriaResponseOutputWithContext(context.Context) CriteriaResponseOutput
}

// Specifies the criteria for converting log to metric.
type CriteriaResponseArgs struct {
	// List of Dimensions for creating metric
	Dimensions DimensionResponseArrayInput `pulumi:"dimensions"`
	// Name of the metric
	MetricName pulumi.StringInput `pulumi:"metricName"`
}

func (CriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CriteriaResponse)(nil)).Elem()
}

func (i CriteriaResponseArgs) ToCriteriaResponseOutput() CriteriaResponseOutput {
	return i.ToCriteriaResponseOutputWithContext(context.Background())
}

func (i CriteriaResponseArgs) ToCriteriaResponseOutputWithContext(ctx context.Context) CriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriteriaResponseOutput)
}

// CriteriaResponseArrayInput is an input type that accepts CriteriaResponseArray and CriteriaResponseArrayOutput values.
// You can construct a concrete instance of `CriteriaResponseArrayInput` via:
//
//          CriteriaResponseArray{ CriteriaResponseArgs{...} }
type CriteriaResponseArrayInput interface {
	pulumi.Input

	ToCriteriaResponseArrayOutput() CriteriaResponseArrayOutput
	ToCriteriaResponseArrayOutputWithContext(context.Context) CriteriaResponseArrayOutput
}

type CriteriaResponseArray []CriteriaResponseInput

func (CriteriaResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CriteriaResponse)(nil)).Elem()
}

func (i CriteriaResponseArray) ToCriteriaResponseArrayOutput() CriteriaResponseArrayOutput {
	return i.ToCriteriaResponseArrayOutputWithContext(context.Background())
}

func (i CriteriaResponseArray) ToCriteriaResponseArrayOutputWithContext(ctx context.Context) CriteriaResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriteriaResponseArrayOutput)
}

// Specifies the criteria for converting log to metric.
type CriteriaResponseOutput struct{ *pulumi.OutputState }

func (CriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CriteriaResponse)(nil)).Elem()
}

func (o CriteriaResponseOutput) ToCriteriaResponseOutput() CriteriaResponseOutput {
	return o
}

func (o CriteriaResponseOutput) ToCriteriaResponseOutputWithContext(ctx context.Context) CriteriaResponseOutput {
	return o
}

// List of Dimensions for creating metric
func (o CriteriaResponseOutput) Dimensions() DimensionResponseArrayOutput {
	return o.ApplyT(func(v CriteriaResponse) []DimensionResponse { return v.Dimensions }).(DimensionResponseArrayOutput)
}

// Name of the metric
func (o CriteriaResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v CriteriaResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

type CriteriaResponseArrayOutput struct{ *pulumi.OutputState }

func (CriteriaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CriteriaResponse)(nil)).Elem()
}

func (o CriteriaResponseArrayOutput) ToCriteriaResponseArrayOutput() CriteriaResponseArrayOutput {
	return o
}

func (o CriteriaResponseArrayOutput) ToCriteriaResponseArrayOutputWithContext(ctx context.Context) CriteriaResponseArrayOutput {
	return o
}

func (o CriteriaResponseArrayOutput) Index(i pulumi.IntInput) CriteriaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CriteriaResponse {
		return vs[0].([]CriteriaResponse)[vs[1].(int)]
	}).(CriteriaResponseOutput)
}

// Specifies the criteria for converting log to metric.
type Dimension struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// DimensionInput is an input type that accepts DimensionArgs and DimensionOutput values.
// You can construct a concrete instance of `DimensionInput` via:
//
//          DimensionArgs{...}
type DimensionInput interface {
	pulumi.Input

	ToDimensionOutput() DimensionOutput
	ToDimensionOutputWithContext(context.Context) DimensionOutput
}

// Specifies the criteria for converting log to metric.
type DimensionArgs struct {
	// Name of the dimension
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values
	Operator pulumi.StringInput `pulumi:"operator"`
	// List of dimension values
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dimension)(nil)).Elem()
}

func (i DimensionArgs) ToDimensionOutput() DimensionOutput {
	return i.ToDimensionOutputWithContext(context.Background())
}

func (i DimensionArgs) ToDimensionOutputWithContext(ctx context.Context) DimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionOutput)
}

// DimensionArrayInput is an input type that accepts DimensionArray and DimensionArrayOutput values.
// You can construct a concrete instance of `DimensionArrayInput` via:
//
//          DimensionArray{ DimensionArgs{...} }
type DimensionArrayInput interface {
	pulumi.Input

	ToDimensionArrayOutput() DimensionArrayOutput
	ToDimensionArrayOutputWithContext(context.Context) DimensionArrayOutput
}

type DimensionArray []DimensionInput

func (DimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dimension)(nil)).Elem()
}

func (i DimensionArray) ToDimensionArrayOutput() DimensionArrayOutput {
	return i.ToDimensionArrayOutputWithContext(context.Background())
}

func (i DimensionArray) ToDimensionArrayOutputWithContext(ctx context.Context) DimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionArrayOutput)
}

// Specifies the criteria for converting log to metric.
type DimensionOutput struct{ *pulumi.OutputState }

func (DimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dimension)(nil)).Elem()
}

func (o DimensionOutput) ToDimensionOutput() DimensionOutput {
	return o
}

func (o DimensionOutput) ToDimensionOutputWithContext(ctx context.Context) DimensionOutput {
	return o
}

// Name of the dimension
func (o DimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Dimension) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values
func (o DimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v Dimension) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values
func (o DimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Dimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DimensionArrayOutput struct{ *pulumi.OutputState }

func (DimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dimension)(nil)).Elem()
}

func (o DimensionArrayOutput) ToDimensionArrayOutput() DimensionArrayOutput {
	return o
}

func (o DimensionArrayOutput) ToDimensionArrayOutputWithContext(ctx context.Context) DimensionArrayOutput {
	return o
}

func (o DimensionArrayOutput) Index(i pulumi.IntInput) DimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Dimension {
		return vs[0].([]Dimension)[vs[1].(int)]
	}).(DimensionOutput)
}

// Specifies the criteria for converting log to metric.
type DimensionInvokeResponse struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// DimensionInvokeResponseInput is an input type that accepts DimensionInvokeResponseArgs and DimensionInvokeResponseOutput values.
// You can construct a concrete instance of `DimensionInvokeResponseInput` via:
//
//          DimensionInvokeResponseArgs{...}
type DimensionInvokeResponseInput interface {
	pulumi.Input

	ToDimensionInvokeResponseOutput() DimensionInvokeResponseOutput
	ToDimensionInvokeResponseOutputWithContext(context.Context) DimensionInvokeResponseOutput
}

// Specifies the criteria for converting log to metric.
type DimensionInvokeResponseArgs struct {
	// Name of the dimension
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values
	Operator pulumi.StringInput `pulumi:"operator"`
	// List of dimension values
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DimensionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionInvokeResponse)(nil)).Elem()
}

func (i DimensionInvokeResponseArgs) ToDimensionInvokeResponseOutput() DimensionInvokeResponseOutput {
	return i.ToDimensionInvokeResponseOutputWithContext(context.Background())
}

func (i DimensionInvokeResponseArgs) ToDimensionInvokeResponseOutputWithContext(ctx context.Context) DimensionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionInvokeResponseOutput)
}

// DimensionInvokeResponseArrayInput is an input type that accepts DimensionInvokeResponseArray and DimensionInvokeResponseArrayOutput values.
// You can construct a concrete instance of `DimensionInvokeResponseArrayInput` via:
//
//          DimensionInvokeResponseArray{ DimensionInvokeResponseArgs{...} }
type DimensionInvokeResponseArrayInput interface {
	pulumi.Input

	ToDimensionInvokeResponseArrayOutput() DimensionInvokeResponseArrayOutput
	ToDimensionInvokeResponseArrayOutputWithContext(context.Context) DimensionInvokeResponseArrayOutput
}

type DimensionInvokeResponseArray []DimensionInvokeResponseInput

func (DimensionInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DimensionInvokeResponse)(nil)).Elem()
}

func (i DimensionInvokeResponseArray) ToDimensionInvokeResponseArrayOutput() DimensionInvokeResponseArrayOutput {
	return i.ToDimensionInvokeResponseArrayOutputWithContext(context.Background())
}

func (i DimensionInvokeResponseArray) ToDimensionInvokeResponseArrayOutputWithContext(ctx context.Context) DimensionInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionInvokeResponseArrayOutput)
}

// Specifies the criteria for converting log to metric.
type DimensionInvokeResponseOutput struct{ *pulumi.OutputState }

func (DimensionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionInvokeResponse)(nil)).Elem()
}

func (o DimensionInvokeResponseOutput) ToDimensionInvokeResponseOutput() DimensionInvokeResponseOutput {
	return o
}

func (o DimensionInvokeResponseOutput) ToDimensionInvokeResponseOutputWithContext(ctx context.Context) DimensionInvokeResponseOutput {
	return o
}

// Name of the dimension
func (o DimensionInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values
func (o DimensionInvokeResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionInvokeResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values
func (o DimensionInvokeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DimensionInvokeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DimensionInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (DimensionInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DimensionInvokeResponse)(nil)).Elem()
}

func (o DimensionInvokeResponseArrayOutput) ToDimensionInvokeResponseArrayOutput() DimensionInvokeResponseArrayOutput {
	return o
}

func (o DimensionInvokeResponseArrayOutput) ToDimensionInvokeResponseArrayOutputWithContext(ctx context.Context) DimensionInvokeResponseArrayOutput {
	return o
}

func (o DimensionInvokeResponseArrayOutput) Index(i pulumi.IntInput) DimensionInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DimensionInvokeResponse {
		return vs[0].([]DimensionInvokeResponse)[vs[1].(int)]
	}).(DimensionInvokeResponseOutput)
}

// Specifies the criteria for converting log to metric.
type DimensionResponse struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// DimensionResponseInput is an input type that accepts DimensionResponseArgs and DimensionResponseOutput values.
// You can construct a concrete instance of `DimensionResponseInput` via:
//
//          DimensionResponseArgs{...}
type DimensionResponseInput interface {
	pulumi.Input

	ToDimensionResponseOutput() DimensionResponseOutput
	ToDimensionResponseOutputWithContext(context.Context) DimensionResponseOutput
}

// Specifies the criteria for converting log to metric.
type DimensionResponseArgs struct {
	// Name of the dimension
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values
	Operator pulumi.StringInput `pulumi:"operator"`
	// List of dimension values
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DimensionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionResponse)(nil)).Elem()
}

func (i DimensionResponseArgs) ToDimensionResponseOutput() DimensionResponseOutput {
	return i.ToDimensionResponseOutputWithContext(context.Background())
}

func (i DimensionResponseArgs) ToDimensionResponseOutputWithContext(ctx context.Context) DimensionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionResponseOutput)
}

// DimensionResponseArrayInput is an input type that accepts DimensionResponseArray and DimensionResponseArrayOutput values.
// You can construct a concrete instance of `DimensionResponseArrayInput` via:
//
//          DimensionResponseArray{ DimensionResponseArgs{...} }
type DimensionResponseArrayInput interface {
	pulumi.Input

	ToDimensionResponseArrayOutput() DimensionResponseArrayOutput
	ToDimensionResponseArrayOutputWithContext(context.Context) DimensionResponseArrayOutput
}

type DimensionResponseArray []DimensionResponseInput

func (DimensionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DimensionResponse)(nil)).Elem()
}

func (i DimensionResponseArray) ToDimensionResponseArrayOutput() DimensionResponseArrayOutput {
	return i.ToDimensionResponseArrayOutputWithContext(context.Background())
}

func (i DimensionResponseArray) ToDimensionResponseArrayOutputWithContext(ctx context.Context) DimensionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionResponseArrayOutput)
}

// Specifies the criteria for converting log to metric.
type DimensionResponseOutput struct{ *pulumi.OutputState }

func (DimensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionResponse)(nil)).Elem()
}

func (o DimensionResponseOutput) ToDimensionResponseOutput() DimensionResponseOutput {
	return o
}

func (o DimensionResponseOutput) ToDimensionResponseOutputWithContext(ctx context.Context) DimensionResponseOutput {
	return o
}

// Name of the dimension
func (o DimensionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values
func (o DimensionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values
func (o DimensionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DimensionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DimensionResponseArrayOutput struct{ *pulumi.OutputState }

func (DimensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DimensionResponse)(nil)).Elem()
}

func (o DimensionResponseArrayOutput) ToDimensionResponseArrayOutput() DimensionResponseArrayOutput {
	return o
}

func (o DimensionResponseArrayOutput) ToDimensionResponseArrayOutputWithContext(ctx context.Context) DimensionResponseArrayOutput {
	return o
}

func (o DimensionResponseArrayOutput) Index(i pulumi.IntInput) DimensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DimensionResponse {
		return vs[0].([]DimensionResponse)[vs[1].(int)]
	}).(DimensionResponseOutput)
}

// A log metrics trigger descriptor.
type LogMetricTrigger struct {
	// Evaluation of metric on a particular column
	MetricColumn *string `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType *string `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold *float64 `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator *string `pulumi:"thresholdOperator"`
}

// LogMetricTriggerInput is an input type that accepts LogMetricTriggerArgs and LogMetricTriggerOutput values.
// You can construct a concrete instance of `LogMetricTriggerInput` via:
//
//          LogMetricTriggerArgs{...}
type LogMetricTriggerInput interface {
	pulumi.Input

	ToLogMetricTriggerOutput() LogMetricTriggerOutput
	ToLogMetricTriggerOutputWithContext(context.Context) LogMetricTriggerOutput
}

// A log metrics trigger descriptor.
type LogMetricTriggerArgs struct {
	// Evaluation of metric on a particular column
	MetricColumn pulumi.StringPtrInput `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType pulumi.StringPtrInput `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold pulumi.Float64PtrInput `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator pulumi.StringPtrInput `pulumi:"thresholdOperator"`
}

func (LogMetricTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricTrigger)(nil)).Elem()
}

func (i LogMetricTriggerArgs) ToLogMetricTriggerOutput() LogMetricTriggerOutput {
	return i.ToLogMetricTriggerOutputWithContext(context.Background())
}

func (i LogMetricTriggerArgs) ToLogMetricTriggerOutputWithContext(ctx context.Context) LogMetricTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerOutput)
}

func (i LogMetricTriggerArgs) ToLogMetricTriggerPtrOutput() LogMetricTriggerPtrOutput {
	return i.ToLogMetricTriggerPtrOutputWithContext(context.Background())
}

func (i LogMetricTriggerArgs) ToLogMetricTriggerPtrOutputWithContext(ctx context.Context) LogMetricTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerOutput).ToLogMetricTriggerPtrOutputWithContext(ctx)
}

// LogMetricTriggerPtrInput is an input type that accepts LogMetricTriggerArgs, LogMetricTriggerPtr and LogMetricTriggerPtrOutput values.
// You can construct a concrete instance of `LogMetricTriggerPtrInput` via:
//
//          LogMetricTriggerArgs{...}
//
//  or:
//
//          nil
type LogMetricTriggerPtrInput interface {
	pulumi.Input

	ToLogMetricTriggerPtrOutput() LogMetricTriggerPtrOutput
	ToLogMetricTriggerPtrOutputWithContext(context.Context) LogMetricTriggerPtrOutput
}

type logMetricTriggerPtrType LogMetricTriggerArgs

func LogMetricTriggerPtr(v *LogMetricTriggerArgs) LogMetricTriggerPtrInput {
	return (*logMetricTriggerPtrType)(v)
}

func (*logMetricTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricTrigger)(nil)).Elem()
}

func (i *logMetricTriggerPtrType) ToLogMetricTriggerPtrOutput() LogMetricTriggerPtrOutput {
	return i.ToLogMetricTriggerPtrOutputWithContext(context.Background())
}

func (i *logMetricTriggerPtrType) ToLogMetricTriggerPtrOutputWithContext(ctx context.Context) LogMetricTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerPtrOutput)
}

// A log metrics trigger descriptor.
type LogMetricTriggerOutput struct{ *pulumi.OutputState }

func (LogMetricTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricTrigger)(nil)).Elem()
}

func (o LogMetricTriggerOutput) ToLogMetricTriggerOutput() LogMetricTriggerOutput {
	return o
}

func (o LogMetricTriggerOutput) ToLogMetricTriggerOutputWithContext(ctx context.Context) LogMetricTriggerOutput {
	return o
}

func (o LogMetricTriggerOutput) ToLogMetricTriggerPtrOutput() LogMetricTriggerPtrOutput {
	return o.ToLogMetricTriggerPtrOutputWithContext(context.Background())
}

func (o LogMetricTriggerOutput) ToLogMetricTriggerPtrOutputWithContext(ctx context.Context) LogMetricTriggerPtrOutput {
	return o.ApplyT(func(v LogMetricTrigger) *LogMetricTrigger {
		return &v
	}).(LogMetricTriggerPtrOutput)
}

// Evaluation of metric on a particular column
func (o LogMetricTriggerOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTrigger) *string { return v.MetricColumn }).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'
func (o LogMetricTriggerOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTrigger) *string { return v.MetricTriggerType }).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger.
func (o LogMetricTriggerOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LogMetricTrigger) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
func (o LogMetricTriggerOutput) ThresholdOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTrigger) *string { return v.ThresholdOperator }).(pulumi.StringPtrOutput)
}

type LogMetricTriggerPtrOutput struct{ *pulumi.OutputState }

func (LogMetricTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricTrigger)(nil)).Elem()
}

func (o LogMetricTriggerPtrOutput) ToLogMetricTriggerPtrOutput() LogMetricTriggerPtrOutput {
	return o
}

func (o LogMetricTriggerPtrOutput) ToLogMetricTriggerPtrOutputWithContext(ctx context.Context) LogMetricTriggerPtrOutput {
	return o
}

func (o LogMetricTriggerPtrOutput) Elem() LogMetricTriggerOutput {
	return o.ApplyT(func(v *LogMetricTrigger) LogMetricTrigger { return *v }).(LogMetricTriggerOutput)
}

// Evaluation of metric on a particular column
func (o LogMetricTriggerPtrOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTrigger) *string {
		if v == nil {
			return nil
		}
		return v.MetricColumn
	}).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'
func (o LogMetricTriggerPtrOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTrigger) *string {
		if v == nil {
			return nil
		}
		return v.MetricTriggerType
	}).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger.
func (o LogMetricTriggerPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LogMetricTrigger) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
func (o LogMetricTriggerPtrOutput) ThresholdOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTrigger) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOperator
	}).(pulumi.StringPtrOutput)
}

// A log metrics trigger descriptor.
type LogMetricTriggerInvokeResponse struct {
	// Evaluation of metric on a particular column
	MetricColumn *string `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType *string `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold *float64 `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator *string `pulumi:"thresholdOperator"`
}

// LogMetricTriggerInvokeResponseInput is an input type that accepts LogMetricTriggerInvokeResponseArgs and LogMetricTriggerInvokeResponseOutput values.
// You can construct a concrete instance of `LogMetricTriggerInvokeResponseInput` via:
//
//          LogMetricTriggerInvokeResponseArgs{...}
type LogMetricTriggerInvokeResponseInput interface {
	pulumi.Input

	ToLogMetricTriggerInvokeResponseOutput() LogMetricTriggerInvokeResponseOutput
	ToLogMetricTriggerInvokeResponseOutputWithContext(context.Context) LogMetricTriggerInvokeResponseOutput
}

// A log metrics trigger descriptor.
type LogMetricTriggerInvokeResponseArgs struct {
	// Evaluation of metric on a particular column
	MetricColumn pulumi.StringPtrInput `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType pulumi.StringPtrInput `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold pulumi.Float64PtrInput `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator pulumi.StringPtrInput `pulumi:"thresholdOperator"`
}

func (LogMetricTriggerInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricTriggerInvokeResponse)(nil)).Elem()
}

func (i LogMetricTriggerInvokeResponseArgs) ToLogMetricTriggerInvokeResponseOutput() LogMetricTriggerInvokeResponseOutput {
	return i.ToLogMetricTriggerInvokeResponseOutputWithContext(context.Background())
}

func (i LogMetricTriggerInvokeResponseArgs) ToLogMetricTriggerInvokeResponseOutputWithContext(ctx context.Context) LogMetricTriggerInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerInvokeResponseOutput)
}

func (i LogMetricTriggerInvokeResponseArgs) ToLogMetricTriggerInvokeResponsePtrOutput() LogMetricTriggerInvokeResponsePtrOutput {
	return i.ToLogMetricTriggerInvokeResponsePtrOutputWithContext(context.Background())
}

func (i LogMetricTriggerInvokeResponseArgs) ToLogMetricTriggerInvokeResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerInvokeResponseOutput).ToLogMetricTriggerInvokeResponsePtrOutputWithContext(ctx)
}

// LogMetricTriggerInvokeResponsePtrInput is an input type that accepts LogMetricTriggerInvokeResponseArgs, LogMetricTriggerInvokeResponsePtr and LogMetricTriggerInvokeResponsePtrOutput values.
// You can construct a concrete instance of `LogMetricTriggerInvokeResponsePtrInput` via:
//
//          LogMetricTriggerInvokeResponseArgs{...}
//
//  or:
//
//          nil
type LogMetricTriggerInvokeResponsePtrInput interface {
	pulumi.Input

	ToLogMetricTriggerInvokeResponsePtrOutput() LogMetricTriggerInvokeResponsePtrOutput
	ToLogMetricTriggerInvokeResponsePtrOutputWithContext(context.Context) LogMetricTriggerInvokeResponsePtrOutput
}

type logMetricTriggerInvokeResponsePtrType LogMetricTriggerInvokeResponseArgs

func LogMetricTriggerInvokeResponsePtr(v *LogMetricTriggerInvokeResponseArgs) LogMetricTriggerInvokeResponsePtrInput {
	return (*logMetricTriggerInvokeResponsePtrType)(v)
}

func (*logMetricTriggerInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricTriggerInvokeResponse)(nil)).Elem()
}

func (i *logMetricTriggerInvokeResponsePtrType) ToLogMetricTriggerInvokeResponsePtrOutput() LogMetricTriggerInvokeResponsePtrOutput {
	return i.ToLogMetricTriggerInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *logMetricTriggerInvokeResponsePtrType) ToLogMetricTriggerInvokeResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerInvokeResponsePtrOutput)
}

// A log metrics trigger descriptor.
type LogMetricTriggerInvokeResponseOutput struct{ *pulumi.OutputState }

func (LogMetricTriggerInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricTriggerInvokeResponse)(nil)).Elem()
}

func (o LogMetricTriggerInvokeResponseOutput) ToLogMetricTriggerInvokeResponseOutput() LogMetricTriggerInvokeResponseOutput {
	return o
}

func (o LogMetricTriggerInvokeResponseOutput) ToLogMetricTriggerInvokeResponseOutputWithContext(ctx context.Context) LogMetricTriggerInvokeResponseOutput {
	return o
}

func (o LogMetricTriggerInvokeResponseOutput) ToLogMetricTriggerInvokeResponsePtrOutput() LogMetricTriggerInvokeResponsePtrOutput {
	return o.ToLogMetricTriggerInvokeResponsePtrOutputWithContext(context.Background())
}

func (o LogMetricTriggerInvokeResponseOutput) ToLogMetricTriggerInvokeResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerInvokeResponsePtrOutput {
	return o.ApplyT(func(v LogMetricTriggerInvokeResponse) *LogMetricTriggerInvokeResponse {
		return &v
	}).(LogMetricTriggerInvokeResponsePtrOutput)
}

// Evaluation of metric on a particular column
func (o LogMetricTriggerInvokeResponseOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerInvokeResponse) *string { return v.MetricColumn }).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'
func (o LogMetricTriggerInvokeResponseOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerInvokeResponse) *string { return v.MetricTriggerType }).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger.
func (o LogMetricTriggerInvokeResponseOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LogMetricTriggerInvokeResponse) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
func (o LogMetricTriggerInvokeResponseOutput) ThresholdOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerInvokeResponse) *string { return v.ThresholdOperator }).(pulumi.StringPtrOutput)
}

type LogMetricTriggerInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (LogMetricTriggerInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricTriggerInvokeResponse)(nil)).Elem()
}

func (o LogMetricTriggerInvokeResponsePtrOutput) ToLogMetricTriggerInvokeResponsePtrOutput() LogMetricTriggerInvokeResponsePtrOutput {
	return o
}

func (o LogMetricTriggerInvokeResponsePtrOutput) ToLogMetricTriggerInvokeResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerInvokeResponsePtrOutput {
	return o
}

func (o LogMetricTriggerInvokeResponsePtrOutput) Elem() LogMetricTriggerInvokeResponseOutput {
	return o.ApplyT(func(v *LogMetricTriggerInvokeResponse) LogMetricTriggerInvokeResponse { return *v }).(LogMetricTriggerInvokeResponseOutput)
}

// Evaluation of metric on a particular column
func (o LogMetricTriggerInvokeResponsePtrOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetricColumn
	}).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'
func (o LogMetricTriggerInvokeResponsePtrOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetricTriggerType
	}).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger.
func (o LogMetricTriggerInvokeResponsePtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerInvokeResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
func (o LogMetricTriggerInvokeResponsePtrOutput) ThresholdOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOperator
	}).(pulumi.StringPtrOutput)
}

// A log metrics trigger descriptor.
type LogMetricTriggerResponse struct {
	// Evaluation of metric on a particular column
	MetricColumn *string `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType *string `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold *float64 `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator *string `pulumi:"thresholdOperator"`
}

// LogMetricTriggerResponseInput is an input type that accepts LogMetricTriggerResponseArgs and LogMetricTriggerResponseOutput values.
// You can construct a concrete instance of `LogMetricTriggerResponseInput` via:
//
//          LogMetricTriggerResponseArgs{...}
type LogMetricTriggerResponseInput interface {
	pulumi.Input

	ToLogMetricTriggerResponseOutput() LogMetricTriggerResponseOutput
	ToLogMetricTriggerResponseOutputWithContext(context.Context) LogMetricTriggerResponseOutput
}

// A log metrics trigger descriptor.
type LogMetricTriggerResponseArgs struct {
	// Evaluation of metric on a particular column
	MetricColumn pulumi.StringPtrInput `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType pulumi.StringPtrInput `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold pulumi.Float64PtrInput `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator pulumi.StringPtrInput `pulumi:"thresholdOperator"`
}

func (LogMetricTriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricTriggerResponse)(nil)).Elem()
}

func (i LogMetricTriggerResponseArgs) ToLogMetricTriggerResponseOutput() LogMetricTriggerResponseOutput {
	return i.ToLogMetricTriggerResponseOutputWithContext(context.Background())
}

func (i LogMetricTriggerResponseArgs) ToLogMetricTriggerResponseOutputWithContext(ctx context.Context) LogMetricTriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerResponseOutput)
}

func (i LogMetricTriggerResponseArgs) ToLogMetricTriggerResponsePtrOutput() LogMetricTriggerResponsePtrOutput {
	return i.ToLogMetricTriggerResponsePtrOutputWithContext(context.Background())
}

func (i LogMetricTriggerResponseArgs) ToLogMetricTriggerResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerResponseOutput).ToLogMetricTriggerResponsePtrOutputWithContext(ctx)
}

// LogMetricTriggerResponsePtrInput is an input type that accepts LogMetricTriggerResponseArgs, LogMetricTriggerResponsePtr and LogMetricTriggerResponsePtrOutput values.
// You can construct a concrete instance of `LogMetricTriggerResponsePtrInput` via:
//
//          LogMetricTriggerResponseArgs{...}
//
//  or:
//
//          nil
type LogMetricTriggerResponsePtrInput interface {
	pulumi.Input

	ToLogMetricTriggerResponsePtrOutput() LogMetricTriggerResponsePtrOutput
	ToLogMetricTriggerResponsePtrOutputWithContext(context.Context) LogMetricTriggerResponsePtrOutput
}

type logMetricTriggerResponsePtrType LogMetricTriggerResponseArgs

func LogMetricTriggerResponsePtr(v *LogMetricTriggerResponseArgs) LogMetricTriggerResponsePtrInput {
	return (*logMetricTriggerResponsePtrType)(v)
}

func (*logMetricTriggerResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricTriggerResponse)(nil)).Elem()
}

func (i *logMetricTriggerResponsePtrType) ToLogMetricTriggerResponsePtrOutput() LogMetricTriggerResponsePtrOutput {
	return i.ToLogMetricTriggerResponsePtrOutputWithContext(context.Background())
}

func (i *logMetricTriggerResponsePtrType) ToLogMetricTriggerResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerResponsePtrOutput)
}

// A log metrics trigger descriptor.
type LogMetricTriggerResponseOutput struct{ *pulumi.OutputState }

func (LogMetricTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricTriggerResponse)(nil)).Elem()
}

func (o LogMetricTriggerResponseOutput) ToLogMetricTriggerResponseOutput() LogMetricTriggerResponseOutput {
	return o
}

func (o LogMetricTriggerResponseOutput) ToLogMetricTriggerResponseOutputWithContext(ctx context.Context) LogMetricTriggerResponseOutput {
	return o
}

func (o LogMetricTriggerResponseOutput) ToLogMetricTriggerResponsePtrOutput() LogMetricTriggerResponsePtrOutput {
	return o.ToLogMetricTriggerResponsePtrOutputWithContext(context.Background())
}

func (o LogMetricTriggerResponseOutput) ToLogMetricTriggerResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerResponsePtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *LogMetricTriggerResponse {
		return &v
	}).(LogMetricTriggerResponsePtrOutput)
}

// Evaluation of metric on a particular column
func (o LogMetricTriggerResponseOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *string { return v.MetricColumn }).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'
func (o LogMetricTriggerResponseOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *string { return v.MetricTriggerType }).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger.
func (o LogMetricTriggerResponseOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
func (o LogMetricTriggerResponseOutput) ThresholdOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *string { return v.ThresholdOperator }).(pulumi.StringPtrOutput)
}

type LogMetricTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (LogMetricTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricTriggerResponse)(nil)).Elem()
}

func (o LogMetricTriggerResponsePtrOutput) ToLogMetricTriggerResponsePtrOutput() LogMetricTriggerResponsePtrOutput {
	return o
}

func (o LogMetricTriggerResponsePtrOutput) ToLogMetricTriggerResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerResponsePtrOutput {
	return o
}

func (o LogMetricTriggerResponsePtrOutput) Elem() LogMetricTriggerResponseOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) LogMetricTriggerResponse { return *v }).(LogMetricTriggerResponseOutput)
}

// Evaluation of metric on a particular column
func (o LogMetricTriggerResponsePtrOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetricColumn
	}).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'
func (o LogMetricTriggerResponsePtrOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetricTriggerType
	}).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger.
func (o LogMetricTriggerResponsePtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
func (o LogMetricTriggerResponsePtrOutput) ThresholdOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOperator
	}).(pulumi.StringPtrOutput)
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricAction struct {
	// Criteria of Metric
	Criteria []Criteria `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
	OdataType string `pulumi:"odataType"`
}

// LogToMetricActionInput is an input type that accepts LogToMetricActionArgs and LogToMetricActionOutput values.
// You can construct a concrete instance of `LogToMetricActionInput` via:
//
//          LogToMetricActionArgs{...}
type LogToMetricActionInput interface {
	pulumi.Input

	ToLogToMetricActionOutput() LogToMetricActionOutput
	ToLogToMetricActionOutputWithContext(context.Context) LogToMetricActionOutput
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionArgs struct {
	// Criteria of Metric
	Criteria CriteriaArrayInput `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (LogToMetricActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogToMetricAction)(nil)).Elem()
}

func (i LogToMetricActionArgs) ToLogToMetricActionOutput() LogToMetricActionOutput {
	return i.ToLogToMetricActionOutputWithContext(context.Background())
}

func (i LogToMetricActionArgs) ToLogToMetricActionOutputWithContext(ctx context.Context) LogToMetricActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogToMetricActionOutput)
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionOutput struct{ *pulumi.OutputState }

func (LogToMetricActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogToMetricAction)(nil)).Elem()
}

func (o LogToMetricActionOutput) ToLogToMetricActionOutput() LogToMetricActionOutput {
	return o
}

func (o LogToMetricActionOutput) ToLogToMetricActionOutputWithContext(ctx context.Context) LogToMetricActionOutput {
	return o
}

// Criteria of Metric
func (o LogToMetricActionOutput) Criteria() CriteriaArrayOutput {
	return o.ApplyT(func(v LogToMetricAction) []Criteria { return v.Criteria }).(CriteriaArrayOutput)
}

// Specifies the action. Supported values - AlertingAction, LogToMetricAction
// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
func (o LogToMetricActionOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v LogToMetricAction) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionInvokeResponse struct {
	// Criteria of Metric
	Criteria []CriteriaInvokeResponse `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
	OdataType string `pulumi:"odataType"`
}

// LogToMetricActionInvokeResponseInput is an input type that accepts LogToMetricActionInvokeResponseArgs and LogToMetricActionInvokeResponseOutput values.
// You can construct a concrete instance of `LogToMetricActionInvokeResponseInput` via:
//
//          LogToMetricActionInvokeResponseArgs{...}
type LogToMetricActionInvokeResponseInput interface {
	pulumi.Input

	ToLogToMetricActionInvokeResponseOutput() LogToMetricActionInvokeResponseOutput
	ToLogToMetricActionInvokeResponseOutputWithContext(context.Context) LogToMetricActionInvokeResponseOutput
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionInvokeResponseArgs struct {
	// Criteria of Metric
	Criteria CriteriaInvokeResponseArrayInput `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (LogToMetricActionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogToMetricActionInvokeResponse)(nil)).Elem()
}

func (i LogToMetricActionInvokeResponseArgs) ToLogToMetricActionInvokeResponseOutput() LogToMetricActionInvokeResponseOutput {
	return i.ToLogToMetricActionInvokeResponseOutputWithContext(context.Background())
}

func (i LogToMetricActionInvokeResponseArgs) ToLogToMetricActionInvokeResponseOutputWithContext(ctx context.Context) LogToMetricActionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogToMetricActionInvokeResponseOutput)
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionInvokeResponseOutput struct{ *pulumi.OutputState }

func (LogToMetricActionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogToMetricActionInvokeResponse)(nil)).Elem()
}

func (o LogToMetricActionInvokeResponseOutput) ToLogToMetricActionInvokeResponseOutput() LogToMetricActionInvokeResponseOutput {
	return o
}

func (o LogToMetricActionInvokeResponseOutput) ToLogToMetricActionInvokeResponseOutputWithContext(ctx context.Context) LogToMetricActionInvokeResponseOutput {
	return o
}

// Criteria of Metric
func (o LogToMetricActionInvokeResponseOutput) Criteria() CriteriaInvokeResponseArrayOutput {
	return o.ApplyT(func(v LogToMetricActionInvokeResponse) []CriteriaInvokeResponse { return v.Criteria }).(CriteriaInvokeResponseArrayOutput)
}

// Specifies the action. Supported values - AlertingAction, LogToMetricAction
// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
func (o LogToMetricActionInvokeResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v LogToMetricActionInvokeResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionResponse struct {
	// Criteria of Metric
	Criteria []CriteriaResponse `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
	OdataType string `pulumi:"odataType"`
}

// LogToMetricActionResponseInput is an input type that accepts LogToMetricActionResponseArgs and LogToMetricActionResponseOutput values.
// You can construct a concrete instance of `LogToMetricActionResponseInput` via:
//
//          LogToMetricActionResponseArgs{...}
type LogToMetricActionResponseInput interface {
	pulumi.Input

	ToLogToMetricActionResponseOutput() LogToMetricActionResponseOutput
	ToLogToMetricActionResponseOutputWithContext(context.Context) LogToMetricActionResponseOutput
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionResponseArgs struct {
	// Criteria of Metric
	Criteria CriteriaResponseArrayInput `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (LogToMetricActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogToMetricActionResponse)(nil)).Elem()
}

func (i LogToMetricActionResponseArgs) ToLogToMetricActionResponseOutput() LogToMetricActionResponseOutput {
	return i.ToLogToMetricActionResponseOutputWithContext(context.Background())
}

func (i LogToMetricActionResponseArgs) ToLogToMetricActionResponseOutputWithContext(ctx context.Context) LogToMetricActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogToMetricActionResponseOutput)
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionResponseOutput struct{ *pulumi.OutputState }

func (LogToMetricActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogToMetricActionResponse)(nil)).Elem()
}

func (o LogToMetricActionResponseOutput) ToLogToMetricActionResponseOutput() LogToMetricActionResponseOutput {
	return o
}

func (o LogToMetricActionResponseOutput) ToLogToMetricActionResponseOutputWithContext(ctx context.Context) LogToMetricActionResponseOutput {
	return o
}

// Criteria of Metric
func (o LogToMetricActionResponseOutput) Criteria() CriteriaResponseArrayOutput {
	return o.ApplyT(func(v LogToMetricActionResponse) []CriteriaResponse { return v.Criteria }).(CriteriaResponseArrayOutput)
}

// Specifies the action. Supported values - AlertingAction, LogToMetricAction
// Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
func (o LogToMetricActionResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v LogToMetricActionResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Defines how often to run the search and the time interval.
type Schedule struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes int `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes int `pulumi:"timeWindowInMinutes"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//          ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// Defines how often to run the search and the time interval.
type ScheduleArgs struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes pulumi.IntInput `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes pulumi.IntInput `pulumi:"timeWindowInMinutes"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

func (i ScheduleArgs) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput).ToSchedulePtrOutputWithContext(ctx)
}

// SchedulePtrInput is an input type that accepts ScheduleArgs, SchedulePtr and SchedulePtrOutput values.
// You can construct a concrete instance of `SchedulePtrInput` via:
//
//          ScheduleArgs{...}
//
//  or:
//
//          nil
type SchedulePtrInput interface {
	pulumi.Input

	ToSchedulePtrOutput() SchedulePtrOutput
	ToSchedulePtrOutputWithContext(context.Context) SchedulePtrOutput
}

type schedulePtrType ScheduleArgs

func SchedulePtr(v *ScheduleArgs) SchedulePtrInput {
	return (*schedulePtrType)(v)
}

func (*schedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *schedulePtrType) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i *schedulePtrType) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePtrOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o.ToSchedulePtrOutputWithContext(context.Background())
}

func (o ScheduleOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o.ApplyT(func(v Schedule) *Schedule {
		return &v
	}).(SchedulePtrOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleOutput) FrequencyInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v Schedule) int { return v.FrequencyInMinutes }).(pulumi.IntOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleOutput) TimeWindowInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v Schedule) int { return v.TimeWindowInMinutes }).(pulumi.IntOutput)
}

type SchedulePtrOutput struct{ *pulumi.OutputState }

func (SchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o SchedulePtrOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) Elem() ScheduleOutput {
	return o.ApplyT(func(v *Schedule) Schedule { return *v }).(ScheduleOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o SchedulePtrOutput) FrequencyInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Schedule) *int {
		if v == nil {
			return nil
		}
		return &v.FrequencyInMinutes
	}).(pulumi.IntPtrOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o SchedulePtrOutput) TimeWindowInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Schedule) *int {
		if v == nil {
			return nil
		}
		return &v.TimeWindowInMinutes
	}).(pulumi.IntPtrOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleInvokeResponse struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes int `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes int `pulumi:"timeWindowInMinutes"`
}

// ScheduleInvokeResponseInput is an input type that accepts ScheduleInvokeResponseArgs and ScheduleInvokeResponseOutput values.
// You can construct a concrete instance of `ScheduleInvokeResponseInput` via:
//
//          ScheduleInvokeResponseArgs{...}
type ScheduleInvokeResponseInput interface {
	pulumi.Input

	ToScheduleInvokeResponseOutput() ScheduleInvokeResponseOutput
	ToScheduleInvokeResponseOutputWithContext(context.Context) ScheduleInvokeResponseOutput
}

// Defines how often to run the search and the time interval.
type ScheduleInvokeResponseArgs struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes pulumi.IntInput `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes pulumi.IntInput `pulumi:"timeWindowInMinutes"`
}

func (ScheduleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleInvokeResponse)(nil)).Elem()
}

func (i ScheduleInvokeResponseArgs) ToScheduleInvokeResponseOutput() ScheduleInvokeResponseOutput {
	return i.ToScheduleInvokeResponseOutputWithContext(context.Background())
}

func (i ScheduleInvokeResponseArgs) ToScheduleInvokeResponseOutputWithContext(ctx context.Context) ScheduleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleInvokeResponseOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleInvokeResponseOutput struct{ *pulumi.OutputState }

func (ScheduleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleInvokeResponse)(nil)).Elem()
}

func (o ScheduleInvokeResponseOutput) ToScheduleInvokeResponseOutput() ScheduleInvokeResponseOutput {
	return o
}

func (o ScheduleInvokeResponseOutput) ToScheduleInvokeResponseOutputWithContext(ctx context.Context) ScheduleInvokeResponseOutput {
	return o
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleInvokeResponseOutput) FrequencyInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleInvokeResponse) int { return v.FrequencyInMinutes }).(pulumi.IntOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleInvokeResponseOutput) TimeWindowInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleInvokeResponse) int { return v.TimeWindowInMinutes }).(pulumi.IntOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleResponse struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes int `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes int `pulumi:"timeWindowInMinutes"`
}

// ScheduleResponseInput is an input type that accepts ScheduleResponseArgs and ScheduleResponseOutput values.
// You can construct a concrete instance of `ScheduleResponseInput` via:
//
//          ScheduleResponseArgs{...}
type ScheduleResponseInput interface {
	pulumi.Input

	ToScheduleResponseOutput() ScheduleResponseOutput
	ToScheduleResponseOutputWithContext(context.Context) ScheduleResponseOutput
}

// Defines how often to run the search and the time interval.
type ScheduleResponseArgs struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes pulumi.IntInput `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes pulumi.IntInput `pulumi:"timeWindowInMinutes"`
}

func (ScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (i ScheduleResponseArgs) ToScheduleResponseOutput() ScheduleResponseOutput {
	return i.ToScheduleResponseOutputWithContext(context.Background())
}

func (i ScheduleResponseArgs) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleResponseOutput)
}

func (i ScheduleResponseArgs) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return i.ToScheduleResponsePtrOutputWithContext(context.Background())
}

func (i ScheduleResponseArgs) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleResponseOutput).ToScheduleResponsePtrOutputWithContext(ctx)
}

// ScheduleResponsePtrInput is an input type that accepts ScheduleResponseArgs, ScheduleResponsePtr and ScheduleResponsePtrOutput values.
// You can construct a concrete instance of `ScheduleResponsePtrInput` via:
//
//          ScheduleResponseArgs{...}
//
//  or:
//
//          nil
type ScheduleResponsePtrInput interface {
	pulumi.Input

	ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput
	ToScheduleResponsePtrOutputWithContext(context.Context) ScheduleResponsePtrOutput
}

type scheduleResponsePtrType ScheduleResponseArgs

func ScheduleResponsePtr(v *ScheduleResponseArgs) ScheduleResponsePtrInput {
	return (*scheduleResponsePtrType)(v)
}

func (*scheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleResponse)(nil)).Elem()
}

func (i *scheduleResponsePtrType) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return i.ToScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *scheduleResponsePtrType) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleResponsePtrOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return o.ToScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ScheduleResponseOutput) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *ScheduleResponse {
		return &v
	}).(ScheduleResponsePtrOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleResponseOutput) FrequencyInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleResponse) int { return v.FrequencyInMinutes }).(pulumi.IntOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleResponseOutput) TimeWindowInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleResponse) int { return v.TimeWindowInMinutes }).(pulumi.IntOutput)
}

type ScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) Elem() ScheduleResponseOutput {
	return o.ApplyT(func(v *ScheduleResponse) ScheduleResponse { return *v }).(ScheduleResponseOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleResponsePtrOutput) FrequencyInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FrequencyInMinutes
	}).(pulumi.IntPtrOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleResponsePtrOutput) TimeWindowInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TimeWindowInMinutes
	}).(pulumi.IntPtrOutput)
}

// Specifies the log search query.
type Source struct {
	// List of  Resource referred into query
	AuthorizedResources []string `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId string `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query *string `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType *string `pulumi:"queryType"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Specifies the log search query.
type SourceArgs struct {
	// List of  Resource referred into query
	AuthorizedResources pulumi.StringArrayInput `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType pulumi.StringPtrInput `pulumi:"queryType"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//          SourceArgs{...}
//
//  or:
//
//          nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Specifies the log search query.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyT(func(v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// List of  Resource referred into query
func (o SourceOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Source) []string { return v.AuthorizedResources }).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v Source) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Source) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Source) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source { return *v }).(SourceOutput)
}

// List of  Resource referred into query
func (o SourcePtrOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Source) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedResources
	}).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourcePtrOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceId
	}).(pulumi.StringPtrOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourcePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourcePtrOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return v.QueryType
	}).(pulumi.StringPtrOutput)
}

// Specifies the log search query.
type SourceInvokeResponse struct {
	// List of  Resource referred into query
	AuthorizedResources []string `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId string `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query *string `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType *string `pulumi:"queryType"`
}

// SourceInvokeResponseInput is an input type that accepts SourceInvokeResponseArgs and SourceInvokeResponseOutput values.
// You can construct a concrete instance of `SourceInvokeResponseInput` via:
//
//          SourceInvokeResponseArgs{...}
type SourceInvokeResponseInput interface {
	pulumi.Input

	ToSourceInvokeResponseOutput() SourceInvokeResponseOutput
	ToSourceInvokeResponseOutputWithContext(context.Context) SourceInvokeResponseOutput
}

// Specifies the log search query.
type SourceInvokeResponseArgs struct {
	// List of  Resource referred into query
	AuthorizedResources pulumi.StringArrayInput `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType pulumi.StringPtrInput `pulumi:"queryType"`
}

func (SourceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInvokeResponse)(nil)).Elem()
}

func (i SourceInvokeResponseArgs) ToSourceInvokeResponseOutput() SourceInvokeResponseOutput {
	return i.ToSourceInvokeResponseOutputWithContext(context.Background())
}

func (i SourceInvokeResponseArgs) ToSourceInvokeResponseOutputWithContext(ctx context.Context) SourceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInvokeResponseOutput)
}

// Specifies the log search query.
type SourceInvokeResponseOutput struct{ *pulumi.OutputState }

func (SourceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInvokeResponse)(nil)).Elem()
}

func (o SourceInvokeResponseOutput) ToSourceInvokeResponseOutput() SourceInvokeResponseOutput {
	return o
}

func (o SourceInvokeResponseOutput) ToSourceInvokeResponseOutputWithContext(ctx context.Context) SourceInvokeResponseOutput {
	return o
}

// List of  Resource referred into query
func (o SourceInvokeResponseOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceInvokeResponse) []string { return v.AuthorizedResources }).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceInvokeResponseOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SourceInvokeResponse) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceInvokeResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceInvokeResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceInvokeResponseOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceInvokeResponse) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

// Specifies the log search query.
type SourceResponse struct {
	// List of  Resource referred into query
	AuthorizedResources []string `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId string `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query *string `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType *string `pulumi:"queryType"`
}

// SourceResponseInput is an input type that accepts SourceResponseArgs and SourceResponseOutput values.
// You can construct a concrete instance of `SourceResponseInput` via:
//
//          SourceResponseArgs{...}
type SourceResponseInput interface {
	pulumi.Input

	ToSourceResponseOutput() SourceResponseOutput
	ToSourceResponseOutputWithContext(context.Context) SourceResponseOutput
}

// Specifies the log search query.
type SourceResponseArgs struct {
	// List of  Resource referred into query
	AuthorizedResources pulumi.StringArrayInput `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType pulumi.StringPtrInput `pulumi:"queryType"`
}

func (SourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (i SourceResponseArgs) ToSourceResponseOutput() SourceResponseOutput {
	return i.ToSourceResponseOutputWithContext(context.Background())
}

func (i SourceResponseArgs) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponseOutput)
}

func (i SourceResponseArgs) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return i.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (i SourceResponseArgs) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponseOutput).ToSourceResponsePtrOutputWithContext(ctx)
}

// SourceResponsePtrInput is an input type that accepts SourceResponseArgs, SourceResponsePtr and SourceResponsePtrOutput values.
// You can construct a concrete instance of `SourceResponsePtrInput` via:
//
//          SourceResponseArgs{...}
//
//  or:
//
//          nil
type SourceResponsePtrInput interface {
	pulumi.Input

	ToSourceResponsePtrOutput() SourceResponsePtrOutput
	ToSourceResponsePtrOutputWithContext(context.Context) SourceResponsePtrOutput
}

type sourceResponsePtrType SourceResponseArgs

func SourceResponsePtr(v *SourceResponseArgs) SourceResponsePtrInput {
	return (*sourceResponsePtrType)(v)
}

func (*sourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceResponse)(nil)).Elem()
}

func (i *sourceResponsePtrType) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return i.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (i *sourceResponsePtrType) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponsePtrOutput)
}

// Specifies the log search query.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (o SourceResponseOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o.ApplyT(func(v SourceResponse) *SourceResponse {
		return &v
	}).(SourceResponsePtrOutput)
}

// List of  Resource referred into query
func (o SourceResponseOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceResponse) []string { return v.AuthorizedResources }).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceResponseOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SourceResponse) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceResponseOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceResponse) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

type SourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceResponse)(nil)).Elem()
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) Elem() SourceResponseOutput {
	return o.ApplyT(func(v *SourceResponse) SourceResponse { return *v }).(SourceResponseOutput)
}

// List of  Resource referred into query
func (o SourceResponsePtrOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SourceResponse) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedResources
	}).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceResponsePtrOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceId
	}).(pulumi.StringPtrOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceResponsePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceResponsePtrOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueryType
	}).(pulumi.StringPtrOutput)
}

// The condition that results in the Log Search rule.
type TriggerCondition struct {
	// Trigger condition for metric query rule
	MetricTrigger *LogMetricTrigger `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold float64 `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator string `pulumi:"thresholdOperator"`
}

// TriggerConditionInput is an input type that accepts TriggerConditionArgs and TriggerConditionOutput values.
// You can construct a concrete instance of `TriggerConditionInput` via:
//
//          TriggerConditionArgs{...}
type TriggerConditionInput interface {
	pulumi.Input

	ToTriggerConditionOutput() TriggerConditionOutput
	ToTriggerConditionOutputWithContext(context.Context) TriggerConditionOutput
}

// The condition that results in the Log Search rule.
type TriggerConditionArgs struct {
	// Trigger condition for metric query rule
	MetricTrigger LogMetricTriggerPtrInput `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator pulumi.StringInput `pulumi:"thresholdOperator"`
}

func (TriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (i TriggerConditionArgs) ToTriggerConditionOutput() TriggerConditionOutput {
	return i.ToTriggerConditionOutputWithContext(context.Background())
}

func (i TriggerConditionArgs) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionOutput)
}

// The condition that results in the Log Search rule.
type TriggerConditionOutput struct{ *pulumi.OutputState }

func (TriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (o TriggerConditionOutput) ToTriggerConditionOutput() TriggerConditionOutput {
	return o
}

func (o TriggerConditionOutput) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return o
}

// Trigger condition for metric query rule
func (o TriggerConditionOutput) MetricTrigger() LogMetricTriggerPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *LogMetricTrigger { return v.MetricTrigger }).(LogMetricTriggerPtrOutput)
}

// Result or count threshold based on which rule should be triggered.
func (o TriggerConditionOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v TriggerCondition) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
func (o TriggerConditionOutput) ThresholdOperator() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerCondition) string { return v.ThresholdOperator }).(pulumi.StringOutput)
}

// The condition that results in the Log Search rule.
type TriggerConditionInvokeResponse struct {
	// Trigger condition for metric query rule
	MetricTrigger *LogMetricTriggerInvokeResponse `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold float64 `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator string `pulumi:"thresholdOperator"`
}

// TriggerConditionInvokeResponseInput is an input type that accepts TriggerConditionInvokeResponseArgs and TriggerConditionInvokeResponseOutput values.
// You can construct a concrete instance of `TriggerConditionInvokeResponseInput` via:
//
//          TriggerConditionInvokeResponseArgs{...}
type TriggerConditionInvokeResponseInput interface {
	pulumi.Input

	ToTriggerConditionInvokeResponseOutput() TriggerConditionInvokeResponseOutput
	ToTriggerConditionInvokeResponseOutputWithContext(context.Context) TriggerConditionInvokeResponseOutput
}

// The condition that results in the Log Search rule.
type TriggerConditionInvokeResponseArgs struct {
	// Trigger condition for metric query rule
	MetricTrigger LogMetricTriggerInvokeResponsePtrInput `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator pulumi.StringInput `pulumi:"thresholdOperator"`
}

func (TriggerConditionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerConditionInvokeResponse)(nil)).Elem()
}

func (i TriggerConditionInvokeResponseArgs) ToTriggerConditionInvokeResponseOutput() TriggerConditionInvokeResponseOutput {
	return i.ToTriggerConditionInvokeResponseOutputWithContext(context.Background())
}

func (i TriggerConditionInvokeResponseArgs) ToTriggerConditionInvokeResponseOutputWithContext(ctx context.Context) TriggerConditionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionInvokeResponseOutput)
}

// The condition that results in the Log Search rule.
type TriggerConditionInvokeResponseOutput struct{ *pulumi.OutputState }

func (TriggerConditionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerConditionInvokeResponse)(nil)).Elem()
}

func (o TriggerConditionInvokeResponseOutput) ToTriggerConditionInvokeResponseOutput() TriggerConditionInvokeResponseOutput {
	return o
}

func (o TriggerConditionInvokeResponseOutput) ToTriggerConditionInvokeResponseOutputWithContext(ctx context.Context) TriggerConditionInvokeResponseOutput {
	return o
}

// Trigger condition for metric query rule
func (o TriggerConditionInvokeResponseOutput) MetricTrigger() LogMetricTriggerInvokeResponsePtrOutput {
	return o.ApplyT(func(v TriggerConditionInvokeResponse) *LogMetricTriggerInvokeResponse { return v.MetricTrigger }).(LogMetricTriggerInvokeResponsePtrOutput)
}

// Result or count threshold based on which rule should be triggered.
func (o TriggerConditionInvokeResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v TriggerConditionInvokeResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
func (o TriggerConditionInvokeResponseOutput) ThresholdOperator() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerConditionInvokeResponse) string { return v.ThresholdOperator }).(pulumi.StringOutput)
}

// The condition that results in the Log Search rule.
type TriggerConditionResponse struct {
	// Trigger condition for metric query rule
	MetricTrigger *LogMetricTriggerResponse `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold float64 `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator string `pulumi:"thresholdOperator"`
}

// TriggerConditionResponseInput is an input type that accepts TriggerConditionResponseArgs and TriggerConditionResponseOutput values.
// You can construct a concrete instance of `TriggerConditionResponseInput` via:
//
//          TriggerConditionResponseArgs{...}
type TriggerConditionResponseInput interface {
	pulumi.Input

	ToTriggerConditionResponseOutput() TriggerConditionResponseOutput
	ToTriggerConditionResponseOutputWithContext(context.Context) TriggerConditionResponseOutput
}

// The condition that results in the Log Search rule.
type TriggerConditionResponseArgs struct {
	// Trigger condition for metric query rule
	MetricTrigger LogMetricTriggerResponsePtrInput `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator pulumi.StringInput `pulumi:"thresholdOperator"`
}

func (TriggerConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerConditionResponse)(nil)).Elem()
}

func (i TriggerConditionResponseArgs) ToTriggerConditionResponseOutput() TriggerConditionResponseOutput {
	return i.ToTriggerConditionResponseOutputWithContext(context.Background())
}

func (i TriggerConditionResponseArgs) ToTriggerConditionResponseOutputWithContext(ctx context.Context) TriggerConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionResponseOutput)
}

// The condition that results in the Log Search rule.
type TriggerConditionResponseOutput struct{ *pulumi.OutputState }

func (TriggerConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerConditionResponse)(nil)).Elem()
}

func (o TriggerConditionResponseOutput) ToTriggerConditionResponseOutput() TriggerConditionResponseOutput {
	return o
}

func (o TriggerConditionResponseOutput) ToTriggerConditionResponseOutputWithContext(ctx context.Context) TriggerConditionResponseOutput {
	return o
}

// Trigger condition for metric query rule
func (o TriggerConditionResponseOutput) MetricTrigger() LogMetricTriggerResponsePtrOutput {
	return o.ApplyT(func(v TriggerConditionResponse) *LogMetricTriggerResponse { return v.MetricTrigger }).(LogMetricTriggerResponsePtrOutput)
}

// Result or count threshold based on which rule should be triggered.
func (o TriggerConditionResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v TriggerConditionResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
func (o TriggerConditionResponseOutput) ThresholdOperator() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerConditionResponse) string { return v.ThresholdOperator }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertingActionOutput{})
	pulumi.RegisterOutputType(AlertingActionInvokeResponseOutput{})
	pulumi.RegisterOutputType(AlertingActionResponseOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupPtrOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupInvokeResponseOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupResponseOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupResponsePtrOutput{})
	pulumi.RegisterOutputType(CriteriaOutput{})
	pulumi.RegisterOutputType(CriteriaArrayOutput{})
	pulumi.RegisterOutputType(CriteriaInvokeResponseOutput{})
	pulumi.RegisterOutputType(CriteriaInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(CriteriaResponseOutput{})
	pulumi.RegisterOutputType(CriteriaResponseArrayOutput{})
	pulumi.RegisterOutputType(DimensionOutput{})
	pulumi.RegisterOutputType(DimensionArrayOutput{})
	pulumi.RegisterOutputType(DimensionInvokeResponseOutput{})
	pulumi.RegisterOutputType(DimensionInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(DimensionResponseOutput{})
	pulumi.RegisterOutputType(DimensionResponseArrayOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerPtrOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerInvokeResponseOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerResponseOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(LogToMetricActionOutput{})
	pulumi.RegisterOutputType(LogToMetricActionInvokeResponseOutput{})
	pulumi.RegisterOutputType(LogToMetricActionResponseOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(SchedulePtrOutput{})
	pulumi.RegisterOutputType(ScheduleInvokeResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceInvokeResponseOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(SourceResponsePtrOutput{})
	pulumi.RegisterOutputType(TriggerConditionOutput{})
	pulumi.RegisterOutputType(TriggerConditionInvokeResponseOutput{})
	pulumi.RegisterOutputType(TriggerConditionResponseOutput{})
}
