// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180416

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Log Search Rule resource.
func LookupScheduledQueryRule(ctx *pulumi.Context, args *LookupScheduledQueryRuleArgs, opts ...pulumi.InvokeOption) (*LookupScheduledQueryRuleResult, error) {
	var rv LookupScheduledQueryRuleResult
	err := ctx.Invoke("azure-native:insights/v20180416:getScheduledQueryRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupScheduledQueryRuleArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the rule.
	RuleName string `pulumi:"ruleName"`
}

// The Log Search Rule resource.
type LookupScheduledQueryRuleResult struct {
	// Action needs to be taken on rule execution.
	Action interface{} `pulumi:"action"`
	// The flag that indicates whether the alert should be automatically resolved or not. The default is false.
	AutoMitigate *bool `pulumi:"autoMitigate"`
	// The api-version used when creating this alert rule
	CreatedWithApiVersion string `pulumi:"createdWithApiVersion"`
	// The description of the Log Search rule.
	Description *string `pulumi:"description"`
	// The display name of the alert rule
	DisplayName *string `pulumi:"displayName"`
	// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
	Enabled *string `pulumi:"enabled"`
	// The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
	Etag string `pulumi:"etag"`
	// Azure resource Id
	Id string `pulumi:"id"`
	// True if alert rule is legacy Log Analytic rule
	IsLegacyLogAnalyticsRule bool `pulumi:"isLegacyLogAnalyticsRule"`
	// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
	Kind string `pulumi:"kind"`
	// Last time the rule was updated in IS08601 format.
	LastUpdatedTime string `pulumi:"lastUpdatedTime"`
	// Resource location
	Location string `pulumi:"location"`
	// Azure resource name
	Name string `pulumi:"name"`
	// Provisioning state of the scheduled query rule
	ProvisioningState string `pulumi:"provisioningState"`
	// Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction
	Schedule *ScheduleResponse `pulumi:"schedule"`
	// Data Source against which rule will Query Data
	Source SourceResponse `pulumi:"source"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupScheduledQueryRuleResult
func (val *LookupScheduledQueryRuleResult) Defaults() *LookupScheduledQueryRuleResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoMitigate) {
		autoMitigate_ := false
		tmp.AutoMitigate = &autoMitigate_
	}
	return &tmp
}

func LookupScheduledQueryRuleOutput(ctx *pulumi.Context, args LookupScheduledQueryRuleOutputArgs, opts ...pulumi.InvokeOption) LookupScheduledQueryRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScheduledQueryRuleResult, error) {
			args := v.(LookupScheduledQueryRuleArgs)
			r, err := LookupScheduledQueryRule(ctx, &args, opts...)
			var s LookupScheduledQueryRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScheduledQueryRuleResultOutput)
}

type LookupScheduledQueryRuleOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the rule.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
}

func (LookupScheduledQueryRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduledQueryRuleArgs)(nil)).Elem()
}

// The Log Search Rule resource.
type LookupScheduledQueryRuleResultOutput struct{ *pulumi.OutputState }

func (LookupScheduledQueryRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduledQueryRuleResult)(nil)).Elem()
}

func (o LookupScheduledQueryRuleResultOutput) ToLookupScheduledQueryRuleResultOutput() LookupScheduledQueryRuleResultOutput {
	return o
}

func (o LookupScheduledQueryRuleResultOutput) ToLookupScheduledQueryRuleResultOutputWithContext(ctx context.Context) LookupScheduledQueryRuleResultOutput {
	return o
}

// Action needs to be taken on rule execution.
func (o LookupScheduledQueryRuleResultOutput) Action() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) interface{} { return v.Action }).(pulumi.AnyOutput)
}

// The flag that indicates whether the alert should be automatically resolved or not. The default is false.
func (o LookupScheduledQueryRuleResultOutput) AutoMitigate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) *bool { return v.AutoMitigate }).(pulumi.BoolPtrOutput)
}

// The api-version used when creating this alert rule
func (o LookupScheduledQueryRuleResultOutput) CreatedWithApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.CreatedWithApiVersion }).(pulumi.StringOutput)
}

// The description of the Log Search rule.
func (o LookupScheduledQueryRuleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the alert rule
func (o LookupScheduledQueryRuleResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
func (o LookupScheduledQueryRuleResultOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
func (o LookupScheduledQueryRuleResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Azure resource Id
func (o LookupScheduledQueryRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// True if alert rule is legacy Log Analytic rule
func (o LookupScheduledQueryRuleResultOutput) IsLegacyLogAnalyticsRule() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) bool { return v.IsLegacyLogAnalyticsRule }).(pulumi.BoolOutput)
}

// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
func (o LookupScheduledQueryRuleResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Last time the rule was updated in IS08601 format.
func (o LookupScheduledQueryRuleResultOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// Resource location
func (o LookupScheduledQueryRuleResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name
func (o LookupScheduledQueryRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the scheduled query rule
func (o LookupScheduledQueryRuleResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction
func (o LookupScheduledQueryRuleResultOutput) Schedule() ScheduleResponsePtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) *ScheduleResponse { return v.Schedule }).(ScheduleResponsePtrOutput)
}

// Data Source against which rule will Query Data
func (o LookupScheduledQueryRuleResultOutput) Source() SourceResponseOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) SourceResponse { return v.Source }).(SourceResponseOutput)
}

// Resource tags
func (o LookupScheduledQueryRuleResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type
func (o LookupScheduledQueryRuleResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledQueryRuleResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScheduledQueryRuleResultOutput{})
}
