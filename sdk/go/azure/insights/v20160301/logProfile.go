// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160301

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The log profile resource.
type LogProfile struct {
	pulumi.CustomResourceState

	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories pulumi.StringArrayOutput `pulumi:"categories"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// Azure resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// the retention policy for the events in the log.
	RetentionPolicy RetentionPolicyResponseOutput `pulumi:"retentionPolicy"`
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId pulumi.StringPtrOutput `pulumi:"serviceBusRuleId"`
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId pulumi.StringPtrOutput `pulumi:"storageAccountId"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Azure resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLogProfile registers a new resource with the given unique name, arguments, and options.
func NewLogProfile(ctx *pulumi.Context,
	name string, args *LogProfileArgs, opts ...pulumi.ResourceOption) (*LogProfile, error) {
	if args == nil || args.Categories == nil {
		return nil, errors.New("missing required argument 'Categories'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Locations == nil {
		return nil, errors.New("missing required argument 'Locations'")
	}
	if args == nil || args.LogProfileName == nil {
		return nil, errors.New("missing required argument 'LogProfileName'")
	}
	if args == nil || args.RetentionPolicy == nil {
		return nil, errors.New("missing required argument 'RetentionPolicy'")
	}
	if args == nil {
		args = &LogProfileArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:insights/latest:LogProfile"),
		},
	})
	opts = append(opts, aliases)
	var resource LogProfile
	err := ctx.RegisterResource("azure-nextgen:insights/v20160301:LogProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogProfile gets an existing LogProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogProfileState, opts ...pulumi.ResourceOption) (*LogProfile, error) {
	var resource LogProfile
	err := ctx.ReadResource("azure-nextgen:insights/v20160301:LogProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogProfile resources.
type logProfileState struct {
	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories []string `pulumi:"categories"`
	// Resource location
	Location *string `pulumi:"location"`
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations []string `pulumi:"locations"`
	// Azure resource name
	Name *string `pulumi:"name"`
	// the retention policy for the events in the log.
	RetentionPolicy *RetentionPolicyResponse `pulumi:"retentionPolicy"`
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId *string `pulumi:"serviceBusRuleId"`
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type *string `pulumi:"type"`
}

type LogProfileState struct {
	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories pulumi.StringArrayInput
	// Resource location
	Location pulumi.StringPtrInput
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations pulumi.StringArrayInput
	// Azure resource name
	Name pulumi.StringPtrInput
	// the retention policy for the events in the log.
	RetentionPolicy RetentionPolicyResponsePtrInput
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId pulumi.StringPtrInput
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Azure resource type
	Type pulumi.StringPtrInput
}

func (LogProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*logProfileState)(nil)).Elem()
}

type logProfileArgs struct {
	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories []string `pulumi:"categories"`
	// Resource location
	Location string `pulumi:"location"`
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations []string `pulumi:"locations"`
	// The name of the log profile.
	LogProfileName string `pulumi:"logProfileName"`
	// the retention policy for the events in the log.
	RetentionPolicy RetentionPolicy `pulumi:"retentionPolicy"`
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId *string `pulumi:"serviceBusRuleId"`
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LogProfile resource.
type LogProfileArgs struct {
	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories pulumi.StringArrayInput
	// Resource location
	Location pulumi.StringInput
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations pulumi.StringArrayInput
	// The name of the log profile.
	LogProfileName pulumi.StringInput
	// the retention policy for the events in the log.
	RetentionPolicy RetentionPolicyInput
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId pulumi.StringPtrInput
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (LogProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logProfileArgs)(nil)).Elem()
}
