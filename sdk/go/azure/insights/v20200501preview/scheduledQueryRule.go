// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200501preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The scheduled query rule resource.
type ScheduledQueryRule struct {
	pulumi.CustomResourceState

	Actions ActionResponseArrayOutput `pulumi:"actions"`
	// The rule criteria that defines the conditions of the scheduled query rule.
	Criteria ScheduledQueryRuleCriteriaResponseOutput `pulumi:"criteria"`
	// The description of the scheduled query rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency pulumi.StringOutput `pulumi:"evaluationFrequency"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
	MuteActionsDuration pulumi.StringPtrOutput `pulumi:"muteActionsDuration"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of resource id's that this scheduled query rule is scoped to.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
	Severity pulumi.Float64Output `pulumi:"severity"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
	TargetResourceTypes pulumi.StringArrayOutput `pulumi:"targetResourceTypes"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
	WindowSize pulumi.StringOutput `pulumi:"windowSize"`
}

// NewScheduledQueryRule registers a new resource with the given unique name, arguments, and options.
func NewScheduledQueryRule(ctx *pulumi.Context,
	name string, args *ScheduledQueryRuleArgs, opts ...pulumi.ResourceOption) (*ScheduledQueryRule, error) {
	if args == nil || args.Criteria == nil {
		return nil, errors.New("missing required argument 'Criteria'")
	}
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil || args.EvaluationFrequency == nil {
		return nil, errors.New("missing required argument 'EvaluationFrequency'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.RuleName == nil {
		return nil, errors.New("missing required argument 'RuleName'")
	}
	if args == nil || args.Scopes == nil {
		return nil, errors.New("missing required argument 'Scopes'")
	}
	if args == nil || args.Severity == nil {
		return nil, errors.New("missing required argument 'Severity'")
	}
	if args == nil || args.WindowSize == nil {
		return nil, errors.New("missing required argument 'WindowSize'")
	}
	if args == nil {
		args = &ScheduledQueryRuleArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:insights/latest:ScheduledQueryRule"),
		},
		{
			Type: pulumi.String("azure-nextgen:insights/v20180416:ScheduledQueryRule"),
		},
	})
	opts = append(opts, aliases)
	var resource ScheduledQueryRule
	err := ctx.RegisterResource("azure-nextgen:insights/v20200501preview:ScheduledQueryRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledQueryRule gets an existing ScheduledQueryRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledQueryRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledQueryRuleState, opts ...pulumi.ResourceOption) (*ScheduledQueryRule, error) {
	var resource ScheduledQueryRule
	err := ctx.ReadResource("azure-nextgen:insights/v20200501preview:ScheduledQueryRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledQueryRule resources.
type scheduledQueryRuleState struct {
	Actions []ActionResponse `pulumi:"actions"`
	// The rule criteria that defines the conditions of the scheduled query rule.
	Criteria *ScheduledQueryRuleCriteriaResponse `pulumi:"criteria"`
	// The description of the scheduled query rule.
	Description *string `pulumi:"description"`
	// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
	Enabled *bool `pulumi:"enabled"`
	// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
	MuteActionsDuration *string `pulumi:"muteActionsDuration"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The list of resource id's that this scheduled query rule is scoped to.
	Scopes []string `pulumi:"scopes"`
	// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
	Severity *float64 `pulumi:"severity"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
	TargetResourceTypes []string `pulumi:"targetResourceTypes"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `pulumi:"type"`
	// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
	WindowSize *string `pulumi:"windowSize"`
}

type ScheduledQueryRuleState struct {
	Actions ActionResponseArrayInput
	// The rule criteria that defines the conditions of the scheduled query rule.
	Criteria ScheduledQueryRuleCriteriaResponsePtrInput
	// The description of the scheduled query rule.
	Description pulumi.StringPtrInput
	// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
	Enabled pulumi.BoolPtrInput
	// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
	MuteActionsDuration pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The list of resource id's that this scheduled query rule is scoped to.
	Scopes pulumi.StringArrayInput
	// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
	Severity pulumi.Float64PtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
	TargetResourceTypes pulumi.StringArrayInput
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringPtrInput
	// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
	WindowSize pulumi.StringPtrInput
}

func (ScheduledQueryRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledQueryRuleState)(nil)).Elem()
}

type scheduledQueryRuleArgs struct {
	Actions []Action `pulumi:"actions"`
	// The rule criteria that defines the conditions of the scheduled query rule.
	Criteria ScheduledQueryRuleCriteria `pulumi:"criteria"`
	// The description of the scheduled query rule.
	Description *string `pulumi:"description"`
	// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
	Enabled bool `pulumi:"enabled"`
	// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency string `pulumi:"evaluationFrequency"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
	MuteActionsDuration *string `pulumi:"muteActionsDuration"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the rule.
	RuleName string `pulumi:"ruleName"`
	// The list of resource id's that this scheduled query rule is scoped to.
	Scopes []string `pulumi:"scopes"`
	// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
	Severity float64 `pulumi:"severity"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
	TargetResourceTypes []string `pulumi:"targetResourceTypes"`
	// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
	WindowSize string `pulumi:"windowSize"`
}

// The set of arguments for constructing a ScheduledQueryRule resource.
type ScheduledQueryRuleArgs struct {
	Actions ActionArrayInput
	// The rule criteria that defines the conditions of the scheduled query rule.
	Criteria ScheduledQueryRuleCriteriaInput
	// The description of the scheduled query rule.
	Description pulumi.StringPtrInput
	// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
	Enabled pulumi.BoolInput
	// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency pulumi.StringInput
	// The geo-location where the resource lives
	Location pulumi.StringInput
	// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
	MuteActionsDuration pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the rule.
	RuleName pulumi.StringInput
	// The list of resource id's that this scheduled query rule is scoped to.
	Scopes pulumi.StringArrayInput
	// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
	Severity pulumi.Float64Input
	// Resource tags.
	Tags pulumi.StringMapInput
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
	TargetResourceTypes pulumi.StringArrayInput
	// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
	WindowSize pulumi.StringInput
}

func (ScheduledQueryRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledQueryRuleArgs)(nil)).Elem()
}
