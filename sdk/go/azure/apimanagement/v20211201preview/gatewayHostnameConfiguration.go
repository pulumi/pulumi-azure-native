// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gateway hostname configuration details.
type GatewayHostnameConfiguration struct {
	pulumi.CustomResourceState

	// Identifier of Certificate entity that will be used for TLS connection establishment
	CertificateId pulumi.StringPtrOutput `pulumi:"certificateId"`
	// Hostname value. Supports valid domain name, partial or full wildcard
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// Specifies if HTTP/2.0 is supported
	Http2Enabled pulumi.BoolPtrOutput `pulumi:"http2Enabled"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Determines whether gateway requests client certificate
	NegotiateClientCertificate pulumi.BoolPtrOutput `pulumi:"negotiateClientCertificate"`
	// Specifies if TLS 1.0 is supported
	Tls10Enabled pulumi.BoolPtrOutput `pulumi:"tls10Enabled"`
	// Specifies if TLS 1.1 is supported
	Tls11Enabled pulumi.BoolPtrOutput `pulumi:"tls11Enabled"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGatewayHostnameConfiguration registers a new resource with the given unique name, arguments, and options.
func NewGatewayHostnameConfiguration(ctx *pulumi.Context,
	name string, args *GatewayHostnameConfigurationArgs, opts ...pulumi.ResourceOption) (*GatewayHostnameConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement:GatewayHostnameConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20191201:GatewayHostnameConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20191201preview:GatewayHostnameConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20200601preview:GatewayHostnameConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20201201:GatewayHostnameConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20210101preview:GatewayHostnameConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20210401preview:GatewayHostnameConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20210801:GatewayHostnameConfiguration"),
		},
	})
	opts = append(opts, aliases)
	var resource GatewayHostnameConfiguration
	err := ctx.RegisterResource("azure-native:apimanagement/v20211201preview:GatewayHostnameConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayHostnameConfiguration gets an existing GatewayHostnameConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayHostnameConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayHostnameConfigurationState, opts ...pulumi.ResourceOption) (*GatewayHostnameConfiguration, error) {
	var resource GatewayHostnameConfiguration
	err := ctx.ReadResource("azure-native:apimanagement/v20211201preview:GatewayHostnameConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayHostnameConfiguration resources.
type gatewayHostnameConfigurationState struct {
}

type GatewayHostnameConfigurationState struct {
}

func (GatewayHostnameConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayHostnameConfigurationState)(nil)).Elem()
}

type gatewayHostnameConfigurationArgs struct {
	// Identifier of Certificate entity that will be used for TLS connection establishment
	CertificateId *string `pulumi:"certificateId"`
	// Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
	GatewayId string `pulumi:"gatewayId"`
	// Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
	HcId *string `pulumi:"hcId"`
	// Hostname value. Supports valid domain name, partial or full wildcard
	Hostname *string `pulumi:"hostname"`
	// Specifies if HTTP/2.0 is supported
	Http2Enabled *bool `pulumi:"http2Enabled"`
	// Determines whether gateway requests client certificate
	NegotiateClientCertificate *bool `pulumi:"negotiateClientCertificate"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Specifies if TLS 1.0 is supported
	Tls10Enabled *bool `pulumi:"tls10Enabled"`
	// Specifies if TLS 1.1 is supported
	Tls11Enabled *bool `pulumi:"tls11Enabled"`
}

// The set of arguments for constructing a GatewayHostnameConfiguration resource.
type GatewayHostnameConfigurationArgs struct {
	// Identifier of Certificate entity that will be used for TLS connection establishment
	CertificateId pulumi.StringPtrInput
	// Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
	GatewayId pulumi.StringInput
	// Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
	HcId pulumi.StringPtrInput
	// Hostname value. Supports valid domain name, partial or full wildcard
	Hostname pulumi.StringPtrInput
	// Specifies if HTTP/2.0 is supported
	Http2Enabled pulumi.BoolPtrInput
	// Determines whether gateway requests client certificate
	NegotiateClientCertificate pulumi.BoolPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// Specifies if TLS 1.0 is supported
	Tls10Enabled pulumi.BoolPtrInput
	// Specifies if TLS 1.1 is supported
	Tls11Enabled pulumi.BoolPtrInput
}

func (GatewayHostnameConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayHostnameConfigurationArgs)(nil)).Elem()
}

type GatewayHostnameConfigurationInput interface {
	pulumi.Input

	ToGatewayHostnameConfigurationOutput() GatewayHostnameConfigurationOutput
	ToGatewayHostnameConfigurationOutputWithContext(ctx context.Context) GatewayHostnameConfigurationOutput
}

func (*GatewayHostnameConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayHostnameConfiguration)(nil)).Elem()
}

func (i *GatewayHostnameConfiguration) ToGatewayHostnameConfigurationOutput() GatewayHostnameConfigurationOutput {
	return i.ToGatewayHostnameConfigurationOutputWithContext(context.Background())
}

func (i *GatewayHostnameConfiguration) ToGatewayHostnameConfigurationOutputWithContext(ctx context.Context) GatewayHostnameConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayHostnameConfigurationOutput)
}

type GatewayHostnameConfigurationOutput struct{ *pulumi.OutputState }

func (GatewayHostnameConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayHostnameConfiguration)(nil)).Elem()
}

func (o GatewayHostnameConfigurationOutput) ToGatewayHostnameConfigurationOutput() GatewayHostnameConfigurationOutput {
	return o
}

func (o GatewayHostnameConfigurationOutput) ToGatewayHostnameConfigurationOutputWithContext(ctx context.Context) GatewayHostnameConfigurationOutput {
	return o
}

// Identifier of Certificate entity that will be used for TLS connection establishment
func (o GatewayHostnameConfigurationOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayHostnameConfiguration) pulumi.StringPtrOutput { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// Hostname value. Supports valid domain name, partial or full wildcard
func (o GatewayHostnameConfigurationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayHostnameConfiguration) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Specifies if HTTP/2.0 is supported
func (o GatewayHostnameConfigurationOutput) Http2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayHostnameConfiguration) pulumi.BoolPtrOutput { return v.Http2Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the resource
func (o GatewayHostnameConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayHostnameConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Determines whether gateway requests client certificate
func (o GatewayHostnameConfigurationOutput) NegotiateClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayHostnameConfiguration) pulumi.BoolPtrOutput { return v.NegotiateClientCertificate }).(pulumi.BoolPtrOutput)
}

// Specifies if TLS 1.0 is supported
func (o GatewayHostnameConfigurationOutput) Tls10Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayHostnameConfiguration) pulumi.BoolPtrOutput { return v.Tls10Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies if TLS 1.1 is supported
func (o GatewayHostnameConfigurationOutput) Tls11Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayHostnameConfiguration) pulumi.BoolPtrOutput { return v.Tls11Enabled }).(pulumi.BoolPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o GatewayHostnameConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayHostnameConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GatewayHostnameConfigurationOutput{})
}
