// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// User details.
type GroupUser struct {
	pulumi.CustomResourceState

	// Email address.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// First name.
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// Collection of groups user is part of.
	Groups GroupContractPropertiesResponseArrayOutput `pulumi:"groups"`
	// Collection of user identities.
	Identities UserIdentityContractResponseArrayOutput `pulumi:"identities"`
	// Last name.
	LastName pulumi.StringPtrOutput `pulumi:"lastName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional note about a user set by the administrator.
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	RegistrationDate pulumi.StringPtrOutput `pulumi:"registrationDate"`
	// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGroupUser registers a new resource with the given unique name, arguments, and options.
func NewGroupUser(ctx *pulumi.Context,
	name string, args *GroupUserArgs, opts ...pulumi.ResourceOption) (*GroupUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20170301:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20180101:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20180601preview:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20190101:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20191201:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20191201preview:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20200601preview:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20201201:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20210101preview:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20210401preview:GroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20210801:GroupUser"),
		},
	})
	opts = append(opts, aliases)
	var resource GroupUser
	err := ctx.RegisterResource("azure-native:apimanagement/v20211201preview:GroupUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupUser gets an existing GroupUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupUserState, opts ...pulumi.ResourceOption) (*GroupUser, error) {
	var resource GroupUser
	err := ctx.ReadResource("azure-native:apimanagement/v20211201preview:GroupUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupUser resources.
type groupUserState struct {
}

type GroupUserState struct {
}

func (GroupUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupUserState)(nil)).Elem()
}

type groupUserArgs struct {
	// Group identifier. Must be unique in the current API Management service instance.
	GroupId string `pulumi:"groupId"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// User identifier. Must be unique in the current API Management service instance.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a GroupUser resource.
type GroupUserArgs struct {
	// Group identifier. Must be unique in the current API Management service instance.
	GroupId pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// User identifier. Must be unique in the current API Management service instance.
	UserId pulumi.StringPtrInput
}

func (GroupUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupUserArgs)(nil)).Elem()
}

type GroupUserInput interface {
	pulumi.Input

	ToGroupUserOutput() GroupUserOutput
	ToGroupUserOutputWithContext(ctx context.Context) GroupUserOutput
}

func (*GroupUser) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupUser)(nil)).Elem()
}

func (i *GroupUser) ToGroupUserOutput() GroupUserOutput {
	return i.ToGroupUserOutputWithContext(context.Background())
}

func (i *GroupUser) ToGroupUserOutputWithContext(ctx context.Context) GroupUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupUserOutput)
}

type GroupUserOutput struct{ *pulumi.OutputState }

func (GroupUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupUser)(nil)).Elem()
}

func (o GroupUserOutput) ToGroupUserOutput() GroupUserOutput {
	return o
}

func (o GroupUserOutput) ToGroupUserOutputWithContext(ctx context.Context) GroupUserOutput {
	return o
}

// Email address.
func (o GroupUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupUser) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// First name.
func (o GroupUserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupUser) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Collection of groups user is part of.
func (o GroupUserOutput) Groups() GroupContractPropertiesResponseArrayOutput {
	return o.ApplyT(func(v *GroupUser) GroupContractPropertiesResponseArrayOutput { return v.Groups }).(GroupContractPropertiesResponseArrayOutput)
}

// Collection of user identities.
func (o GroupUserOutput) Identities() UserIdentityContractResponseArrayOutput {
	return o.ApplyT(func(v *GroupUser) UserIdentityContractResponseArrayOutput { return v.Identities }).(UserIdentityContractResponseArrayOutput)
}

// Last name.
func (o GroupUserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupUser) pulumi.StringPtrOutput { return v.LastName }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o GroupUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional note about a user set by the administrator.
func (o GroupUserOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupUser) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o GroupUserOutput) RegistrationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupUser) pulumi.StringPtrOutput { return v.RegistrationDate }).(pulumi.StringPtrOutput)
}

// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
func (o GroupUserOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupUser) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o GroupUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GroupUserOutput{})
}
