// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Issue Attachment Contract details.
func LookupApiIssueAttachment(ctx *pulumi.Context, args *LookupApiIssueAttachmentArgs, opts ...pulumi.InvokeOption) (*LookupApiIssueAttachmentResult, error) {
	var rv LookupApiIssueAttachmentResult
	err := ctx.Invoke("azure-native:apimanagement/v20211201preview:getApiIssueAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApiIssueAttachmentArgs struct {
	// API identifier. Must be unique in the current API Management service instance.
	ApiId string `pulumi:"apiId"`
	// Attachment identifier within an Issue. Must be unique in the current Issue.
	AttachmentId string `pulumi:"attachmentId"`
	// Issue identifier. Must be unique in the current API Management service instance.
	IssueId string `pulumi:"issueId"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
}

// Issue Attachment Contract details.
type LookupApiIssueAttachmentResult struct {
	// An HTTP link or Base64-encoded binary data.
	Content string `pulumi:"content"`
	// Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property.
	ContentFormat string `pulumi:"contentFormat"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Filename by which the binary data will be saved.
	Title string `pulumi:"title"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupApiIssueAttachmentOutput(ctx *pulumi.Context, args LookupApiIssueAttachmentOutputArgs, opts ...pulumi.InvokeOption) LookupApiIssueAttachmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApiIssueAttachmentResult, error) {
			args := v.(LookupApiIssueAttachmentArgs)
			r, err := LookupApiIssueAttachment(ctx, &args, opts...)
			var s LookupApiIssueAttachmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApiIssueAttachmentResultOutput)
}

type LookupApiIssueAttachmentOutputArgs struct {
	// API identifier. Must be unique in the current API Management service instance.
	ApiId pulumi.StringInput `pulumi:"apiId"`
	// Attachment identifier within an Issue. Must be unique in the current Issue.
	AttachmentId pulumi.StringInput `pulumi:"attachmentId"`
	// Issue identifier. Must be unique in the current API Management service instance.
	IssueId pulumi.StringInput `pulumi:"issueId"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupApiIssueAttachmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiIssueAttachmentArgs)(nil)).Elem()
}

// Issue Attachment Contract details.
type LookupApiIssueAttachmentResultOutput struct{ *pulumi.OutputState }

func (LookupApiIssueAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiIssueAttachmentResult)(nil)).Elem()
}

func (o LookupApiIssueAttachmentResultOutput) ToLookupApiIssueAttachmentResultOutput() LookupApiIssueAttachmentResultOutput {
	return o
}

func (o LookupApiIssueAttachmentResultOutput) ToLookupApiIssueAttachmentResultOutputWithContext(ctx context.Context) LookupApiIssueAttachmentResultOutput {
	return o
}

// An HTTP link or Base64-encoded binary data.
func (o LookupApiIssueAttachmentResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiIssueAttachmentResult) string { return v.Content }).(pulumi.StringOutput)
}

// Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property.
func (o LookupApiIssueAttachmentResultOutput) ContentFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiIssueAttachmentResult) string { return v.ContentFormat }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupApiIssueAttachmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiIssueAttachmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupApiIssueAttachmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiIssueAttachmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// Filename by which the binary data will be saved.
func (o LookupApiIssueAttachmentResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiIssueAttachmentResult) string { return v.Title }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupApiIssueAttachmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiIssueAttachmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiIssueAttachmentResultOutput{})
}
