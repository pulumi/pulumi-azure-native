// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies for what type of messages sampling settings should not apply.
type AlwaysLog string

const (
	// Always log all erroneous request regardless of sampling settings.
	AlwaysLogAllErrors = AlwaysLog("allErrors")
)

// Type of API.
type ApiType string

const (
	ApiTypeHttp      = ApiType("http")
	ApiTypeSoap      = ApiType("soap")
	ApiTypeWebsocket = ApiType("websocket")
	ApiTypeGraphql   = ApiType("graphql")
)

// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
type ApimIdentityType string

const (
	ApimIdentityTypeSystemAssigned               = ApimIdentityType("SystemAssigned")
	ApimIdentityTypeUserAssigned                 = ApimIdentityType("UserAssigned")
	ApimIdentityType_SystemAssigned_UserAssigned = ApimIdentityType("SystemAssigned, UserAssigned")
	ApimIdentityTypeNone                         = ApimIdentityType("None")
)

// Determines the type of application which send the create user request. Default is legacy portal.
type AppType string

const (
	// User create request was sent by legacy developer portal.
	AppTypePortal = AppType("portal")
	// User create request was sent by new developer portal.
	AppTypeDeveloperPortal = AppType("developerPortal")
)

type AuthorizationMethod string

const (
	AuthorizationMethodHEAD    = AuthorizationMethod("HEAD")
	AuthorizationMethodOPTIONS = AuthorizationMethod("OPTIONS")
	AuthorizationMethodTRACE   = AuthorizationMethod("TRACE")
	AuthorizationMethodGET     = AuthorizationMethod("GET")
	AuthorizationMethodPOST    = AuthorizationMethod("POST")
	AuthorizationMethodPUT     = AuthorizationMethod("PUT")
	AuthorizationMethodPATCH   = AuthorizationMethod("PATCH")
	AuthorizationMethodDELETE  = AuthorizationMethod("DELETE")
)

func (AuthorizationMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationMethod)(nil)).Elem()
}

func (e AuthorizationMethod) ToAuthorizationMethodOutput() AuthorizationMethodOutput {
	return pulumi.ToOutput(e).(AuthorizationMethodOutput)
}

func (e AuthorizationMethod) ToAuthorizationMethodOutputWithContext(ctx context.Context) AuthorizationMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuthorizationMethodOutput)
}

func (e AuthorizationMethod) ToAuthorizationMethodPtrOutput() AuthorizationMethodPtrOutput {
	return e.ToAuthorizationMethodPtrOutputWithContext(context.Background())
}

func (e AuthorizationMethod) ToAuthorizationMethodPtrOutputWithContext(ctx context.Context) AuthorizationMethodPtrOutput {
	return AuthorizationMethod(e).ToAuthorizationMethodOutputWithContext(ctx).ToAuthorizationMethodPtrOutputWithContext(ctx)
}

func (e AuthorizationMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthorizationMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthorizationMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuthorizationMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuthorizationMethodOutput struct{ *pulumi.OutputState }

func (AuthorizationMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationMethod)(nil)).Elem()
}

func (o AuthorizationMethodOutput) ToAuthorizationMethodOutput() AuthorizationMethodOutput {
	return o
}

func (o AuthorizationMethodOutput) ToAuthorizationMethodOutputWithContext(ctx context.Context) AuthorizationMethodOutput {
	return o
}

func (o AuthorizationMethodOutput) ToAuthorizationMethodPtrOutput() AuthorizationMethodPtrOutput {
	return o.ToAuthorizationMethodPtrOutputWithContext(context.Background())
}

func (o AuthorizationMethodOutput) ToAuthorizationMethodPtrOutputWithContext(ctx context.Context) AuthorizationMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthorizationMethod) *AuthorizationMethod {
		return &v
	}).(AuthorizationMethodPtrOutput)
}

func (o AuthorizationMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuthorizationMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthorizationMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuthorizationMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthorizationMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthorizationMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuthorizationMethodPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationMethod)(nil)).Elem()
}

func (o AuthorizationMethodPtrOutput) ToAuthorizationMethodPtrOutput() AuthorizationMethodPtrOutput {
	return o
}

func (o AuthorizationMethodPtrOutput) ToAuthorizationMethodPtrOutputWithContext(ctx context.Context) AuthorizationMethodPtrOutput {
	return o
}

func (o AuthorizationMethodPtrOutput) Elem() AuthorizationMethodOutput {
	return o.ApplyT(func(v *AuthorizationMethod) AuthorizationMethod {
		if v != nil {
			return *v
		}
		var ret AuthorizationMethod
		return ret
	}).(AuthorizationMethodOutput)
}

func (o AuthorizationMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthorizationMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuthorizationMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuthorizationMethodInput is an input type that accepts AuthorizationMethodArgs and AuthorizationMethodOutput values.
// You can construct a concrete instance of `AuthorizationMethodInput` via:
//
//	AuthorizationMethodArgs{...}
type AuthorizationMethodInput interface {
	pulumi.Input

	ToAuthorizationMethodOutput() AuthorizationMethodOutput
	ToAuthorizationMethodOutputWithContext(context.Context) AuthorizationMethodOutput
}

var authorizationMethodPtrType = reflect.TypeOf((**AuthorizationMethod)(nil)).Elem()

type AuthorizationMethodPtrInput interface {
	pulumi.Input

	ToAuthorizationMethodPtrOutput() AuthorizationMethodPtrOutput
	ToAuthorizationMethodPtrOutputWithContext(context.Context) AuthorizationMethodPtrOutput
}

type authorizationMethodPtr string

func AuthorizationMethodPtr(v string) AuthorizationMethodPtrInput {
	return (*authorizationMethodPtr)(&v)
}

func (*authorizationMethodPtr) ElementType() reflect.Type {
	return authorizationMethodPtrType
}

func (in *authorizationMethodPtr) ToAuthorizationMethodPtrOutput() AuthorizationMethodPtrOutput {
	return pulumi.ToOutput(in).(AuthorizationMethodPtrOutput)
}

func (in *authorizationMethodPtr) ToAuthorizationMethodPtrOutputWithContext(ctx context.Context) AuthorizationMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuthorizationMethodPtrOutput)
}

// AuthorizationMethodArrayInput is an input type that accepts AuthorizationMethodArray and AuthorizationMethodArrayOutput values.
// You can construct a concrete instance of `AuthorizationMethodArrayInput` via:
//
//	AuthorizationMethodArray{ AuthorizationMethodArgs{...} }
type AuthorizationMethodArrayInput interface {
	pulumi.Input

	ToAuthorizationMethodArrayOutput() AuthorizationMethodArrayOutput
	ToAuthorizationMethodArrayOutputWithContext(context.Context) AuthorizationMethodArrayOutput
}

type AuthorizationMethodArray []AuthorizationMethod

func (AuthorizationMethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationMethod)(nil)).Elem()
}

func (i AuthorizationMethodArray) ToAuthorizationMethodArrayOutput() AuthorizationMethodArrayOutput {
	return i.ToAuthorizationMethodArrayOutputWithContext(context.Background())
}

func (i AuthorizationMethodArray) ToAuthorizationMethodArrayOutputWithContext(ctx context.Context) AuthorizationMethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationMethodArrayOutput)
}

type AuthorizationMethodArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationMethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationMethod)(nil)).Elem()
}

func (o AuthorizationMethodArrayOutput) ToAuthorizationMethodArrayOutput() AuthorizationMethodArrayOutput {
	return o
}

func (o AuthorizationMethodArrayOutput) ToAuthorizationMethodArrayOutputWithContext(ctx context.Context) AuthorizationMethodArrayOutput {
	return o
}

func (o AuthorizationMethodArrayOutput) Index(i pulumi.IntInput) AuthorizationMethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationMethod {
		return vs[0].([]AuthorizationMethod)[vs[1].(int)]
	}).(AuthorizationMethodOutput)
}

// Backend communication protocol.
type BackendProtocol string

const (
	// The Backend is a RESTful service.
	BackendProtocolHttp = BackendProtocol("http")
	// The Backend is a SOAP service.
	BackendProtocolSoap = BackendProtocol("soap")
)

type BearerTokenSendingMethod string

const (
	BearerTokenSendingMethodAuthorizationHeader = BearerTokenSendingMethod("authorizationHeader")
	BearerTokenSendingMethodQuery               = BearerTokenSendingMethod("query")
)

// Form of an authorization grant, which the client uses to request the access token.
type BearerTokenSendingMethods string

const (
	// Access token will be transmitted in the Authorization header using Bearer schema
	BearerTokenSendingMethodsAuthorizationHeader = BearerTokenSendingMethods("authorizationHeader")
	// Access token will be transmitted as query parameters.
	BearerTokenSendingMethodsQuery = BearerTokenSendingMethods("query")
)

// Certificate Source.
type CertificateSource string

const (
	CertificateSourceManaged  = CertificateSource("Managed")
	CertificateSourceKeyVault = CertificateSource("KeyVault")
	CertificateSourceCustom   = CertificateSource("Custom")
	CertificateSourceBuiltIn  = CertificateSource("BuiltIn")
)

// Certificate Status.
type CertificateStatus string

const (
	CertificateStatusCompleted  = CertificateStatus("Completed")
	CertificateStatusFailed     = CertificateStatus("Failed")
	CertificateStatusInProgress = CertificateStatus("InProgress")
)

type ClientAuthenticationMethod string

const (
	// Basic Client Authentication method.
	ClientAuthenticationMethodBasic = ClientAuthenticationMethod("Basic")
	// Body based Authentication method.
	ClientAuthenticationMethodBody = ClientAuthenticationMethod("Body")
)

// Determines the type of confirmation e-mail that will be sent to the newly created user.
type Confirmation string

const (
	// Send an e-mail to the user confirming they have successfully signed up.
	ConfirmationSignup = Confirmation("signup")
	// Send an e-mail inviting the user to sign-up and complete registration.
	ConfirmationInvite = Confirmation("invite")
)

// Format of the Content in which the API is getting imported.
type ContentFormat string

const (
	// The contents are inline and Content type is a WADL document.
	ContentFormat_Wadl_xml = ContentFormat("wadl-xml")
	// The WADL document is hosted on a publicly accessible internet address.
	ContentFormat_Wadl_link_json = ContentFormat("wadl-link-json")
	// The contents are inline and Content Type is a OpenAPI 2.0 JSON Document.
	ContentFormat_Swagger_json = ContentFormat("swagger-json")
	// The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address.
	ContentFormat_Swagger_link_json = ContentFormat("swagger-link-json")
	// The contents are inline and the document is a WSDL/Soap document.
	ContentFormatWsdl = ContentFormat("wsdl")
	// The WSDL document is hosted on a publicly accessible internet address.
	ContentFormat_Wsdl_link = ContentFormat("wsdl-link")
	// The contents are inline and Content Type is a OpenAPI 3.0 YAML Document.
	ContentFormatOpenapi = ContentFormat("openapi")
	// The contents are inline and Content Type is a OpenAPI 3.0 JSON Document.
	ContentFormat_Openapi_json = ContentFormat("openapi+json")
	// The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address.
	ContentFormat_Openapi_link = ContentFormat("openapi-link")
	// The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address.
	ContentFormat_Openapi_json_link = ContentFormat("openapi+json-link")
	// The GraphQL API endpoint hosted on a publicly accessible internet address.
	ContentFormat_Graphql_link = ContentFormat("graphql-link")
)

// Data masking mode.
type DataMaskingMode string

const (
	// Mask the value of an entity.
	DataMaskingModeMask = DataMaskingMode("Mask")
	// Hide the presence of an entity.
	DataMaskingModeHide = DataMaskingMode("Hide")
)

type GrantType string

const (
	// Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
	GrantTypeAuthorizationCode = GrantType("authorizationCode")
	// Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
	GrantTypeImplicit = GrantType("implicit")
	// Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3.
	GrantTypeResourceOwnerPassword = GrantType("resourceOwnerPassword")
	// Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
	GrantTypeClientCredentials = GrantType("clientCredentials")
)

// Group type.
type GroupType string

const (
	GroupTypeCustom   = GroupType("custom")
	GroupTypeSystem   = GroupType("system")
	GroupTypeExternal = GroupType("external")
)

func (GroupType) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupType)(nil)).Elem()
}

func (e GroupType) ToGroupTypeOutput() GroupTypeOutput {
	return pulumi.ToOutput(e).(GroupTypeOutput)
}

func (e GroupType) ToGroupTypeOutputWithContext(ctx context.Context) GroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GroupTypeOutput)
}

func (e GroupType) ToGroupTypePtrOutput() GroupTypePtrOutput {
	return e.ToGroupTypePtrOutputWithContext(context.Background())
}

func (e GroupType) ToGroupTypePtrOutputWithContext(ctx context.Context) GroupTypePtrOutput {
	return GroupType(e).ToGroupTypeOutputWithContext(ctx).ToGroupTypePtrOutputWithContext(ctx)
}

func (e GroupType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GroupType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GroupType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GroupType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GroupTypeOutput struct{ *pulumi.OutputState }

func (GroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupType)(nil)).Elem()
}

func (o GroupTypeOutput) ToGroupTypeOutput() GroupTypeOutput {
	return o
}

func (o GroupTypeOutput) ToGroupTypeOutputWithContext(ctx context.Context) GroupTypeOutput {
	return o
}

func (o GroupTypeOutput) ToGroupTypePtrOutput() GroupTypePtrOutput {
	return o.ToGroupTypePtrOutputWithContext(context.Background())
}

func (o GroupTypeOutput) ToGroupTypePtrOutputWithContext(ctx context.Context) GroupTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupType) *GroupType {
		return &v
	}).(GroupTypePtrOutput)
}

func (o GroupTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GroupTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GroupType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GroupTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GroupTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GroupType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GroupTypePtrOutput struct{ *pulumi.OutputState }

func (GroupTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupType)(nil)).Elem()
}

func (o GroupTypePtrOutput) ToGroupTypePtrOutput() GroupTypePtrOutput {
	return o
}

func (o GroupTypePtrOutput) ToGroupTypePtrOutputWithContext(ctx context.Context) GroupTypePtrOutput {
	return o
}

func (o GroupTypePtrOutput) Elem() GroupTypeOutput {
	return o.ApplyT(func(v *GroupType) GroupType {
		if v != nil {
			return *v
		}
		var ret GroupType
		return ret
	}).(GroupTypeOutput)
}

func (o GroupTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GroupTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GroupType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GroupTypeInput is an input type that accepts GroupTypeArgs and GroupTypeOutput values.
// You can construct a concrete instance of `GroupTypeInput` via:
//
//	GroupTypeArgs{...}
type GroupTypeInput interface {
	pulumi.Input

	ToGroupTypeOutput() GroupTypeOutput
	ToGroupTypeOutputWithContext(context.Context) GroupTypeOutput
}

var groupTypePtrType = reflect.TypeOf((**GroupType)(nil)).Elem()

type GroupTypePtrInput interface {
	pulumi.Input

	ToGroupTypePtrOutput() GroupTypePtrOutput
	ToGroupTypePtrOutputWithContext(context.Context) GroupTypePtrOutput
}

type groupTypePtr string

func GroupTypePtr(v string) GroupTypePtrInput {
	return (*groupTypePtr)(&v)
}

func (*groupTypePtr) ElementType() reflect.Type {
	return groupTypePtrType
}

func (in *groupTypePtr) ToGroupTypePtrOutput() GroupTypePtrOutput {
	return pulumi.ToOutput(in).(GroupTypePtrOutput)
}

func (in *groupTypePtr) ToGroupTypePtrOutputWithContext(ctx context.Context) GroupTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GroupTypePtrOutput)
}

// Hostname type.
type HostnameType string

const (
	HostnameTypeProxy           = HostnameType("Proxy")
	HostnameTypePortal          = HostnameType("Portal")
	HostnameTypeManagement      = HostnameType("Management")
	HostnameTypeScm             = HostnameType("Scm")
	HostnameTypeDeveloperPortal = HostnameType("DeveloperPortal")
)

// Sets correlation protocol to use for Application Insights diagnostics.
type HttpCorrelationProtocol string

const (
	// Do not read and inject correlation headers.
	HttpCorrelationProtocolNone = HttpCorrelationProtocol("None")
	// Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
	HttpCorrelationProtocolLegacy = HttpCorrelationProtocol("Legacy")
	// Inject Trace Context headers. See https://w3c.github.io/trace-context.
	HttpCorrelationProtocolW3C = HttpCorrelationProtocol("W3C")
)

// Identity Provider Type identifier.
type IdentityProviderType string

const (
	// Facebook as Identity provider.
	IdentityProviderTypeFacebook = IdentityProviderType("facebook")
	// Google as Identity provider.
	IdentityProviderTypeGoogle = IdentityProviderType("google")
	// Microsoft Live as Identity provider.
	IdentityProviderTypeMicrosoft = IdentityProviderType("microsoft")
	// Twitter as Identity provider.
	IdentityProviderTypeTwitter = IdentityProviderType("twitter")
	// Azure Active Directory as Identity provider.
	IdentityProviderTypeAad = IdentityProviderType("aad")
	// Azure Active Directory B2C as Identity provider.
	IdentityProviderTypeAadB2C = IdentityProviderType("aadB2C")
)

// The Key to be used to generate token for user.
type KeyType string

const (
	KeyTypePrimary   = KeyType("primary")
	KeyTypeSecondary = KeyType("secondary")
)

func (KeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyType)(nil)).Elem()
}

func (e KeyType) ToKeyTypeOutput() KeyTypeOutput {
	return pulumi.ToOutput(e).(KeyTypeOutput)
}

func (e KeyType) ToKeyTypeOutputWithContext(ctx context.Context) KeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KeyTypeOutput)
}

func (e KeyType) ToKeyTypePtrOutput() KeyTypePtrOutput {
	return e.ToKeyTypePtrOutputWithContext(context.Background())
}

func (e KeyType) ToKeyTypePtrOutputWithContext(ctx context.Context) KeyTypePtrOutput {
	return KeyType(e).ToKeyTypeOutputWithContext(ctx).ToKeyTypePtrOutputWithContext(ctx)
}

func (e KeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KeyTypeOutput struct{ *pulumi.OutputState }

func (KeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyType)(nil)).Elem()
}

func (o KeyTypeOutput) ToKeyTypeOutput() KeyTypeOutput {
	return o
}

func (o KeyTypeOutput) ToKeyTypeOutputWithContext(ctx context.Context) KeyTypeOutput {
	return o
}

func (o KeyTypeOutput) ToKeyTypePtrOutput() KeyTypePtrOutput {
	return o.ToKeyTypePtrOutputWithContext(context.Background())
}

func (o KeyTypeOutput) ToKeyTypePtrOutputWithContext(ctx context.Context) KeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyType) *KeyType {
		return &v
	}).(KeyTypePtrOutput)
}

func (o KeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KeyTypePtrOutput struct{ *pulumi.OutputState }

func (KeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyType)(nil)).Elem()
}

func (o KeyTypePtrOutput) ToKeyTypePtrOutput() KeyTypePtrOutput {
	return o
}

func (o KeyTypePtrOutput) ToKeyTypePtrOutputWithContext(ctx context.Context) KeyTypePtrOutput {
	return o
}

func (o KeyTypePtrOutput) Elem() KeyTypeOutput {
	return o.ApplyT(func(v *KeyType) KeyType {
		if v != nil {
			return *v
		}
		var ret KeyType
		return ret
	}).(KeyTypeOutput)
}

func (o KeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KeyTypeInput is an input type that accepts KeyTypeArgs and KeyTypeOutput values.
// You can construct a concrete instance of `KeyTypeInput` via:
//
//	KeyTypeArgs{...}
type KeyTypeInput interface {
	pulumi.Input

	ToKeyTypeOutput() KeyTypeOutput
	ToKeyTypeOutputWithContext(context.Context) KeyTypeOutput
}

var keyTypePtrType = reflect.TypeOf((**KeyType)(nil)).Elem()

type KeyTypePtrInput interface {
	pulumi.Input

	ToKeyTypePtrOutput() KeyTypePtrOutput
	ToKeyTypePtrOutputWithContext(context.Context) KeyTypePtrOutput
}

type keyTypePtr string

func KeyTypePtr(v string) KeyTypePtrInput {
	return (*keyTypePtr)(&v)
}

func (*keyTypePtr) ElementType() reflect.Type {
	return keyTypePtrType
}

func (in *keyTypePtr) ToKeyTypePtrOutput() KeyTypePtrOutput {
	return pulumi.ToOutput(in).(KeyTypePtrOutput)
}

func (in *keyTypePtr) ToKeyTypePtrOutputWithContext(ctx context.Context) KeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KeyTypePtrOutput)
}

// Logger type.
type LoggerType string

const (
	// Azure Event Hub as log destination.
	LoggerTypeAzureEventHub = LoggerType("azureEventHub")
	// Azure Application Insights as log destination.
	LoggerTypeApplicationInsights = LoggerType("applicationInsights")
	// Azure Monitor
	LoggerTypeAzureMonitor = LoggerType("azureMonitor")
)

// The format of the Operation Name for Application Insights telemetries. Default is Name.
type OperationNameFormat string

const (
	// API_NAME;rev=API_REVISION - OPERATION_NAME
	OperationNameFormatName = OperationNameFormat("Name")
	// HTTP_VERB URL
	OperationNameFormatUrl = OperationNameFormat("Url")
)

// Format of the policyContent.
type PolicyContentFormat string

const (
	// The contents are inline and Content type is an XML document.
	PolicyContentFormatXml = PolicyContentFormat("xml")
	// The policy XML document is hosted on a http endpoint accessible from the API Management service.
	PolicyContentFormat_Xml_link = PolicyContentFormat("xml-link")
	// The contents are inline and Content type is a non XML encoded policy document.
	PolicyContentFormatRawxml = PolicyContentFormat("rawxml")
	// The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service.
	PolicyContentFormat_Rawxml_link = PolicyContentFormat("rawxml-link")
)

// Format of the policy fragment content.
type PolicyFragmentContentFormat string

const (
	// The contents are inline and Content type is an XML document.
	PolicyFragmentContentFormatXml = PolicyFragmentContentFormat("xml")
	// The contents are inline and Content type is a non XML encoded policy document.
	PolicyFragmentContentFormatRawxml = PolicyFragmentContentFormat("rawxml")
)

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
type PrivateEndpointServiceConnectionStatus string

const (
	PrivateEndpointServiceConnectionStatusPending  = PrivateEndpointServiceConnectionStatus("Pending")
	PrivateEndpointServiceConnectionStatusApproved = PrivateEndpointServiceConnectionStatus("Approved")
	PrivateEndpointServiceConnectionStatusRejected = PrivateEndpointServiceConnectionStatus("Rejected")
)

// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
type ProductStateEnum string

const (
	ProductStateEnumNotPublished = ProductStateEnum("notPublished")
	ProductStateEnumPublished    = ProductStateEnum("published")
)

func (ProductStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductStateEnum)(nil)).Elem()
}

func (e ProductStateEnum) ToProductStateEnumOutput() ProductStateEnumOutput {
	return pulumi.ToOutput(e).(ProductStateEnumOutput)
}

func (e ProductStateEnum) ToProductStateEnumOutputWithContext(ctx context.Context) ProductStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProductStateEnumOutput)
}

func (e ProductStateEnum) ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput {
	return e.ToProductStateEnumPtrOutputWithContext(context.Background())
}

func (e ProductStateEnum) ToProductStateEnumPtrOutputWithContext(ctx context.Context) ProductStateEnumPtrOutput {
	return ProductStateEnum(e).ToProductStateEnumOutputWithContext(ctx).ToProductStateEnumPtrOutputWithContext(ctx)
}

func (e ProductStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProductStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProductStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProductStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProductStateEnumOutput struct{ *pulumi.OutputState }

func (ProductStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductStateEnum)(nil)).Elem()
}

func (o ProductStateEnumOutput) ToProductStateEnumOutput() ProductStateEnumOutput {
	return o
}

func (o ProductStateEnumOutput) ToProductStateEnumOutputWithContext(ctx context.Context) ProductStateEnumOutput {
	return o
}

func (o ProductStateEnumOutput) ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput {
	return o.ToProductStateEnumPtrOutputWithContext(context.Background())
}

func (o ProductStateEnumOutput) ToProductStateEnumPtrOutputWithContext(ctx context.Context) ProductStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProductStateEnum) *ProductStateEnum {
		return &v
	}).(ProductStateEnumPtrOutput)
}

func (o ProductStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProductStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProductStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProductStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProductStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProductStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProductStateEnumPtrOutput struct{ *pulumi.OutputState }

func (ProductStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductStateEnum)(nil)).Elem()
}

func (o ProductStateEnumPtrOutput) ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput {
	return o
}

func (o ProductStateEnumPtrOutput) ToProductStateEnumPtrOutputWithContext(ctx context.Context) ProductStateEnumPtrOutput {
	return o
}

func (o ProductStateEnumPtrOutput) Elem() ProductStateEnumOutput {
	return o.ApplyT(func(v *ProductStateEnum) ProductStateEnum {
		if v != nil {
			return *v
		}
		var ret ProductStateEnum
		return ret
	}).(ProductStateEnumOutput)
}

func (o ProductStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProductStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProductStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProductStateEnumInput is an input type that accepts ProductStateEnumArgs and ProductStateEnumOutput values.
// You can construct a concrete instance of `ProductStateEnumInput` via:
//
//	ProductStateEnumArgs{...}
type ProductStateEnumInput interface {
	pulumi.Input

	ToProductStateEnumOutput() ProductStateEnumOutput
	ToProductStateEnumOutputWithContext(context.Context) ProductStateEnumOutput
}

var productStateEnumPtrType = reflect.TypeOf((**ProductStateEnum)(nil)).Elem()

type ProductStateEnumPtrInput interface {
	pulumi.Input

	ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput
	ToProductStateEnumPtrOutputWithContext(context.Context) ProductStateEnumPtrOutput
}

type productStateEnumPtr string

func ProductStateEnumPtr(v string) ProductStateEnumPtrInput {
	return (*productStateEnumPtr)(&v)
}

func (*productStateEnumPtr) ElementType() reflect.Type {
	return productStateEnumPtrType
}

func (in *productStateEnumPtr) ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput {
	return pulumi.ToOutput(in).(ProductStateEnumPtrOutput)
}

func (in *productStateEnumPtr) ToProductStateEnumPtrOutputWithContext(ctx context.Context) ProductStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProductStateEnumPtrOutput)
}

type Protocol string

const (
	ProtocolHttp  = Protocol("http")
	ProtocolHttps = Protocol("https")
	ProtocolWs    = Protocol("ws")
	ProtocolWss   = Protocol("wss")
)

// Provisioning state.
type ProvisioningState string

const (
	ProvisioningStateCreated = ProvisioningState("created")
)

func (ProvisioningState) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningState)(nil)).Elem()
}

func (e ProvisioningState) ToProvisioningStateOutput() ProvisioningStateOutput {
	return pulumi.ToOutput(e).(ProvisioningStateOutput)
}

func (e ProvisioningState) ToProvisioningStateOutputWithContext(ctx context.Context) ProvisioningStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProvisioningStateOutput)
}

func (e ProvisioningState) ToProvisioningStatePtrOutput() ProvisioningStatePtrOutput {
	return e.ToProvisioningStatePtrOutputWithContext(context.Background())
}

func (e ProvisioningState) ToProvisioningStatePtrOutputWithContext(ctx context.Context) ProvisioningStatePtrOutput {
	return ProvisioningState(e).ToProvisioningStateOutputWithContext(ctx).ToProvisioningStatePtrOutputWithContext(ctx)
}

func (e ProvisioningState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProvisioningState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProvisioningState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProvisioningState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProvisioningStateOutput struct{ *pulumi.OutputState }

func (ProvisioningStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningState)(nil)).Elem()
}

func (o ProvisioningStateOutput) ToProvisioningStateOutput() ProvisioningStateOutput {
	return o
}

func (o ProvisioningStateOutput) ToProvisioningStateOutputWithContext(ctx context.Context) ProvisioningStateOutput {
	return o
}

func (o ProvisioningStateOutput) ToProvisioningStatePtrOutput() ProvisioningStatePtrOutput {
	return o.ToProvisioningStatePtrOutputWithContext(context.Background())
}

func (o ProvisioningStateOutput) ToProvisioningStatePtrOutputWithContext(ctx context.Context) ProvisioningStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisioningState) *ProvisioningState {
		return &v
	}).(ProvisioningStatePtrOutput)
}

func (o ProvisioningStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProvisioningStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProvisioningState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProvisioningStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProvisioningStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProvisioningState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProvisioningStatePtrOutput struct{ *pulumi.OutputState }

func (ProvisioningStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningState)(nil)).Elem()
}

func (o ProvisioningStatePtrOutput) ToProvisioningStatePtrOutput() ProvisioningStatePtrOutput {
	return o
}

func (o ProvisioningStatePtrOutput) ToProvisioningStatePtrOutputWithContext(ctx context.Context) ProvisioningStatePtrOutput {
	return o
}

func (o ProvisioningStatePtrOutput) Elem() ProvisioningStateOutput {
	return o.ApplyT(func(v *ProvisioningState) ProvisioningState {
		if v != nil {
			return *v
		}
		var ret ProvisioningState
		return ret
	}).(ProvisioningStateOutput)
}

func (o ProvisioningStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProvisioningStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProvisioningState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProvisioningStateInput is an input type that accepts ProvisioningStateArgs and ProvisioningStateOutput values.
// You can construct a concrete instance of `ProvisioningStateInput` via:
//
//	ProvisioningStateArgs{...}
type ProvisioningStateInput interface {
	pulumi.Input

	ToProvisioningStateOutput() ProvisioningStateOutput
	ToProvisioningStateOutputWithContext(context.Context) ProvisioningStateOutput
}

var provisioningStatePtrType = reflect.TypeOf((**ProvisioningState)(nil)).Elem()

type ProvisioningStatePtrInput interface {
	pulumi.Input

	ToProvisioningStatePtrOutput() ProvisioningStatePtrOutput
	ToProvisioningStatePtrOutputWithContext(context.Context) ProvisioningStatePtrOutput
}

type provisioningStatePtr string

func ProvisioningStatePtr(v string) ProvisioningStatePtrInput {
	return (*provisioningStatePtr)(&v)
}

func (*provisioningStatePtr) ElementType() reflect.Type {
	return provisioningStatePtrType
}

func (in *provisioningStatePtr) ToProvisioningStatePtrOutput() ProvisioningStatePtrOutput {
	return pulumi.ToOutput(in).(ProvisioningStatePtrOutput)
}

func (in *provisioningStatePtr) ToProvisioningStatePtrOutputWithContext(ctx context.Context) ProvisioningStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProvisioningStatePtrOutput)
}

// Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
type PublicNetworkAccess string

const (
	PublicNetworkAccessEnabled  = PublicNetworkAccess("Enabled")
	PublicNetworkAccessDisabled = PublicNetworkAccess("Disabled")
)

// Sampling type.
type SamplingType string

const (
	// Fixed-rate sampling.
	SamplingTypeFixed = SamplingType("fixed")
)

// Schema Type. Immutable.
type SchemaType string

const (
	// Xml schema type.
	SchemaTypeXml = SchemaType("xml")
	// Json schema type.
	SchemaTypeJson = SchemaType("json")
)

// Name of the Sku.
type SkuType string

const (
	// Developer SKU of Api Management.
	SkuTypeDeveloper = SkuType("Developer")
	// Standard SKU of Api Management.
	SkuTypeStandard = SkuType("Standard")
	// Premium SKU of Api Management.
	SkuTypePremium = SkuType("Premium")
	// Basic SKU of Api Management.
	SkuTypeBasic = SkuType("Basic")
	// Consumption SKU of Api Management.
	SkuTypeConsumption = SkuType("Consumption")
	// Isolated SKU of Api Management.
	SkuTypeIsolated = SkuType("Isolated")
)

// Type of API to create.
//   - `http` creates a REST API
//   - `soap` creates a SOAP pass-through API
//   - `websocket` creates websocket API
//   - `graphql` creates GraphQL API.
type SoapApiType string

const (
	// Imports a SOAP API having a RESTful front end.
	SoapApiTypeSoapToRest = SoapApiType("http")
	// Imports the SOAP API having a SOAP front end.
	SoapApiTypeSoapPassThrough = SoapApiType("soap")
	// Imports the API having a Websocket front end.
	SoapApiTypeWebSocket = SoapApiType("websocket")
	// Imports the API having a GraphQL front end.
	SoapApiTypeGraphQL = SoapApiType("graphql")
)

// Status of the issue.
type State string

const (
	// The issue is proposed.
	StateProposed = State("proposed")
	// The issue is opened.
	StateOpen = State("open")
	// The issue was removed.
	StateRemoved = State("removed")
	// The issue is now resolved.
	StateResolved = State("resolved")
	// The issue was closed.
	StateClosed = State("closed")
)

// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
type SubscriptionStateEnum string

const (
	SubscriptionStateEnumSuspended = SubscriptionStateEnum("suspended")
	SubscriptionStateEnumActive    = SubscriptionStateEnum("active")
	SubscriptionStateEnumExpired   = SubscriptionStateEnum("expired")
	SubscriptionStateEnumSubmitted = SubscriptionStateEnum("submitted")
	SubscriptionStateEnumRejected  = SubscriptionStateEnum("rejected")
	SubscriptionStateEnumCancelled = SubscriptionStateEnum("cancelled")
)

func (SubscriptionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return pulumi.ToOutput(e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return e.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return SubscriptionStateEnum(e).ToSubscriptionStateEnumOutputWithContext(ctx).ToSubscriptionStateEnumPtrOutputWithContext(ctx)
}

func (e SubscriptionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubscriptionStateEnumOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionStateEnum) *SubscriptionStateEnum {
		return &v
	}).(SubscriptionStateEnumPtrOutput)
}

func (o SubscriptionStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubscriptionStateEnumPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) Elem() SubscriptionStateEnumOutput {
	return o.ApplyT(func(v *SubscriptionStateEnum) SubscriptionStateEnum {
		if v != nil {
			return *v
		}
		var ret SubscriptionStateEnum
		return ret
	}).(SubscriptionStateEnumOutput)
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubscriptionStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubscriptionStateEnumInput is an input type that accepts SubscriptionStateEnumArgs and SubscriptionStateEnumOutput values.
// You can construct a concrete instance of `SubscriptionStateEnumInput` via:
//
//	SubscriptionStateEnumArgs{...}
type SubscriptionStateEnumInput interface {
	pulumi.Input

	ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput
	ToSubscriptionStateEnumOutputWithContext(context.Context) SubscriptionStateEnumOutput
}

var subscriptionStateEnumPtrType = reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()

type SubscriptionStateEnumPtrInput interface {
	pulumi.Input

	ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput
	ToSubscriptionStateEnumPtrOutputWithContext(context.Context) SubscriptionStateEnumPtrOutput
}

type subscriptionStateEnumPtr string

func SubscriptionStateEnumPtr(v string) SubscriptionStateEnumPtrInput {
	return (*subscriptionStateEnumPtr)(&v)
}

func (*subscriptionStateEnumPtr) ElementType() reflect.Type {
	return subscriptionStateEnumPtrType
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutput(in).(SubscriptionStateEnumPtrOutput)
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubscriptionStateEnumPtrOutput)
}

// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
type UserStateEnum string

const (
	// User state is active.
	UserStateEnumActive = UserStateEnum("active")
	// User is blocked. Blocked users cannot authenticate at developer portal or call API.
	UserStateEnumBlocked = UserStateEnum("blocked")
	// User account is pending. Requires identity confirmation before it can be made active.
	UserStateEnumPending = UserStateEnum("pending")
	// User account is closed. All identities and related entities are removed.
	UserStateEnumDeleted = UserStateEnum("deleted")
)

// The verbosity level applied to traces emitted by trace policies.
type Verbosity string

const (
	// All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
	VerbosityVerbose = Verbosity("verbose")
	// Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
	VerbosityInformation = Verbosity("information")
	// Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
	VerbosityError = Verbosity("error")
)

// An value that determines where the API Version identifier will be located in a HTTP request.
type VersioningScheme string

const (
	// The API Version is passed in a path segment.
	VersioningSchemeSegment = VersioningScheme("Segment")
	// The API Version is passed in a query parameter.
	VersioningSchemeQuery = VersioningScheme("Query")
	// The API Version is passed in a HTTP header.
	VersioningSchemeHeader = VersioningScheme("Header")
)

// The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
type VirtualNetworkType string

const (
	// The service is not part of any Virtual Network.
	VirtualNetworkTypeNone = VirtualNetworkType("None")
	// The service is part of Virtual Network and it is accessible from Internet.
	VirtualNetworkTypeExternal = VirtualNetworkType("External")
	// The service is part of Virtual Network and it is only accessible from within the virtual network.
	VirtualNetworkTypeInternal = VirtualNetworkType("Internal")
)

func init() {
	pulumi.RegisterOutputType(AuthorizationMethodOutput{})
	pulumi.RegisterOutputType(AuthorizationMethodPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationMethodArrayOutput{})
	pulumi.RegisterOutputType(GroupTypeOutput{})
	pulumi.RegisterOutputType(GroupTypePtrOutput{})
	pulumi.RegisterOutputType(KeyTypeOutput{})
	pulumi.RegisterOutputType(KeyTypePtrOutput{})
	pulumi.RegisterOutputType(ProductStateEnumOutput{})
	pulumi.RegisterOutputType(ProductStateEnumPtrOutput{})
	pulumi.RegisterOutputType(ProvisioningStateOutput{})
	pulumi.RegisterOutputType(ProvisioningStatePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionStateEnumOutput{})
	pulumi.RegisterOutputType(SubscriptionStateEnumPtrOutput{})
}
