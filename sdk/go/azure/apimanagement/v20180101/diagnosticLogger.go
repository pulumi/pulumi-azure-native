// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Logger details.
type DiagnosticLogger struct {
	pulumi.CustomResourceState

	// The name and SendRule connection string of the event hub for azureEventHub logger.
	// Instrumentation key for applicationInsights logger.
	Credentials pulumi.StringMapOutput `pulumi:"credentials"`
	// Logger description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether records are buffered in the logger before publishing. Default is assumed to be true.
	IsBuffered pulumi.BoolPtrOutput `pulumi:"isBuffered"`
	// Logger type.
	LoggerType pulumi.StringOutput `pulumi:"loggerType"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource type for API Management resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDiagnosticLogger registers a new resource with the given unique name, arguments, and options.
func NewDiagnosticLogger(ctx *pulumi.Context,
	name string, args *DiagnosticLoggerArgs, opts ...pulumi.ResourceOption) (*DiagnosticLogger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiagnosticId == nil {
		return nil, errors.New("invalid value for required argument 'DiagnosticId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement:DiagnosticLogger"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20170301:DiagnosticLogger"),
		},
	})
	opts = append(opts, aliases)
	var resource DiagnosticLogger
	err := ctx.RegisterResource("azure-native:apimanagement/v20180101:DiagnosticLogger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiagnosticLogger gets an existing DiagnosticLogger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiagnosticLogger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiagnosticLoggerState, opts ...pulumi.ResourceOption) (*DiagnosticLogger, error) {
	var resource DiagnosticLogger
	err := ctx.ReadResource("azure-native:apimanagement/v20180101:DiagnosticLogger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiagnosticLogger resources.
type diagnosticLoggerState struct {
}

type DiagnosticLoggerState struct {
}

func (DiagnosticLoggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*diagnosticLoggerState)(nil)).Elem()
}

type diagnosticLoggerArgs struct {
	// Diagnostic identifier. Must be unique in the current API Management service instance.
	DiagnosticId string `pulumi:"diagnosticId"`
	// Logger identifier. Must be unique in the API Management service instance.
	Loggerid *string `pulumi:"loggerid"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a DiagnosticLogger resource.
type DiagnosticLoggerArgs struct {
	// Diagnostic identifier. Must be unique in the current API Management service instance.
	DiagnosticId pulumi.StringInput
	// Logger identifier. Must be unique in the API Management service instance.
	Loggerid pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
}

func (DiagnosticLoggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diagnosticLoggerArgs)(nil)).Elem()
}

type DiagnosticLoggerInput interface {
	pulumi.Input

	ToDiagnosticLoggerOutput() DiagnosticLoggerOutput
	ToDiagnosticLoggerOutputWithContext(ctx context.Context) DiagnosticLoggerOutput
}

func (*DiagnosticLogger) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticLogger)(nil)).Elem()
}

func (i *DiagnosticLogger) ToDiagnosticLoggerOutput() DiagnosticLoggerOutput {
	return i.ToDiagnosticLoggerOutputWithContext(context.Background())
}

func (i *DiagnosticLogger) ToDiagnosticLoggerOutputWithContext(ctx context.Context) DiagnosticLoggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticLoggerOutput)
}

type DiagnosticLoggerOutput struct{ *pulumi.OutputState }

func (DiagnosticLoggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticLogger)(nil)).Elem()
}

func (o DiagnosticLoggerOutput) ToDiagnosticLoggerOutput() DiagnosticLoggerOutput {
	return o
}

func (o DiagnosticLoggerOutput) ToDiagnosticLoggerOutputWithContext(ctx context.Context) DiagnosticLoggerOutput {
	return o
}

// The name and SendRule connection string of the event hub for azureEventHub logger.
// Instrumentation key for applicationInsights logger.
func (o DiagnosticLoggerOutput) Credentials() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DiagnosticLogger) pulumi.StringMapOutput { return v.Credentials }).(pulumi.StringMapOutput)
}

// Logger description.
func (o DiagnosticLoggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticLogger) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether records are buffered in the logger before publishing. Default is assumed to be true.
func (o DiagnosticLoggerOutput) IsBuffered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiagnosticLogger) pulumi.BoolPtrOutput { return v.IsBuffered }).(pulumi.BoolPtrOutput)
}

// Logger type.
func (o DiagnosticLoggerOutput) LoggerType() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticLogger) pulumi.StringOutput { return v.LoggerType }).(pulumi.StringOutput)
}

// Resource name.
func (o DiagnosticLoggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticLogger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource type for API Management resource.
func (o DiagnosticLoggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticLogger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DiagnosticLoggerOutput{})
}
