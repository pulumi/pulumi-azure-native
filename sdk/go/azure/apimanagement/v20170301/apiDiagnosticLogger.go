// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170301

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApiDiagnosticLogger struct {
	pulumi.CustomResourceState

	Credentials pulumi.StringMapOutput                  `pulumi:"credentials"`
	Description pulumi.StringPtrOutput                  `pulumi:"description"`
	IsBuffered  pulumi.BoolPtrOutput                    `pulumi:"isBuffered"`
	LoggerType  pulumi.StringOutput                     `pulumi:"loggerType"`
	Name        pulumi.StringOutput                     `pulumi:"name"`
	Sampling    LoggerSamplingContractResponsePtrOutput `pulumi:"sampling"`
	Type        pulumi.StringOutput                     `pulumi:"type"`
}

// NewApiDiagnosticLogger registers a new resource with the given unique name, arguments, and options.
func NewApiDiagnosticLogger(ctx *pulumi.Context,
	name string, args *ApiDiagnosticLoggerArgs, opts ...pulumi.ResourceOption) (*ApiDiagnosticLogger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.DiagnosticId == nil {
		return nil, errors.New("invalid value for required argument 'DiagnosticId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:apimanagement/v20170301:ApiDiagnosticLogger"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement:ApiDiagnosticLogger"),
		},
		{
			Type: pulumi.String("azure-nextgen:apimanagement:ApiDiagnosticLogger"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20180101:ApiDiagnosticLogger"),
		},
		{
			Type: pulumi.String("azure-nextgen:apimanagement/v20180101:ApiDiagnosticLogger"),
		},
	})
	opts = append(opts, aliases)
	var resource ApiDiagnosticLogger
	err := ctx.RegisterResource("azure-native:apimanagement/v20170301:ApiDiagnosticLogger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiDiagnosticLogger gets an existing ApiDiagnosticLogger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiDiagnosticLogger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiDiagnosticLoggerState, opts ...pulumi.ResourceOption) (*ApiDiagnosticLogger, error) {
	var resource ApiDiagnosticLogger
	err := ctx.ReadResource("azure-native:apimanagement/v20170301:ApiDiagnosticLogger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiDiagnosticLogger resources.
type apiDiagnosticLoggerState struct {
}

type ApiDiagnosticLoggerState struct {
}

func (ApiDiagnosticLoggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiDiagnosticLoggerState)(nil)).Elem()
}

type apiDiagnosticLoggerArgs struct {
	ApiId             string  `pulumi:"apiId"`
	DiagnosticId      string  `pulumi:"diagnosticId"`
	Loggerid          *string `pulumi:"loggerid"`
	ResourceGroupName string  `pulumi:"resourceGroupName"`
	ServiceName       string  `pulumi:"serviceName"`
}

// The set of arguments for constructing a ApiDiagnosticLogger resource.
type ApiDiagnosticLoggerArgs struct {
	ApiId             pulumi.StringInput
	DiagnosticId      pulumi.StringInput
	Loggerid          pulumi.StringPtrInput
	ResourceGroupName pulumi.StringInput
	ServiceName       pulumi.StringInput
}

func (ApiDiagnosticLoggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiDiagnosticLoggerArgs)(nil)).Elem()
}

type ApiDiagnosticLoggerInput interface {
	pulumi.Input

	ToApiDiagnosticLoggerOutput() ApiDiagnosticLoggerOutput
	ToApiDiagnosticLoggerOutputWithContext(ctx context.Context) ApiDiagnosticLoggerOutput
}

func (*ApiDiagnosticLogger) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiDiagnosticLogger)(nil))
}

func (i *ApiDiagnosticLogger) ToApiDiagnosticLoggerOutput() ApiDiagnosticLoggerOutput {
	return i.ToApiDiagnosticLoggerOutputWithContext(context.Background())
}

func (i *ApiDiagnosticLogger) ToApiDiagnosticLoggerOutputWithContext(ctx context.Context) ApiDiagnosticLoggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiDiagnosticLoggerOutput)
}

type ApiDiagnosticLoggerOutput struct{ *pulumi.OutputState }

func (ApiDiagnosticLoggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiDiagnosticLogger)(nil))
}

func (o ApiDiagnosticLoggerOutput) ToApiDiagnosticLoggerOutput() ApiDiagnosticLoggerOutput {
	return o
}

func (o ApiDiagnosticLoggerOutput) ToApiDiagnosticLoggerOutputWithContext(ctx context.Context) ApiDiagnosticLoggerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApiDiagnosticLoggerOutput{})
}
