// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170301

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-azure-native/sdk/go/azure"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "azure-native:apimanagement/v20170301:Api":
		r, err = NewApi(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiDiagnostic":
		r, err = NewApiDiagnostic(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiDiagnosticLogger":
		r, err = NewApiDiagnosticLogger(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiIssue":
		r, err = NewApiIssue(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiIssueAttachment":
		r, err = NewApiIssueAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiIssueComment":
		r, err = NewApiIssueComment(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiManagementService":
		r, err = NewApiManagementService(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiOperation":
		r, err = NewApiOperation(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiOperationPolicy":
		r, err = NewApiOperationPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiPolicy":
		r, err = NewApiPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiRelease":
		r, err = NewApiRelease(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiSchema":
		r, err = NewApiSchema(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ApiVersionSet":
		r, err = NewApiVersionSet(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:AuthorizationServer":
		r, err = NewAuthorizationServer(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Backend":
		r, err = NewBackend(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Certificate":
		r, err = NewCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Diagnostic":
		r, err = NewDiagnostic(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:DiagnosticLogger":
		r, err = NewDiagnosticLogger(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:EmailTemplate":
		r, err = NewEmailTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Group":
		r, err = NewGroup(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:GroupUser":
		r, err = NewGroupUser(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:IdentityProvider":
		r, err = NewIdentityProvider(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Logger":
		r, err = NewLogger(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:NotificationRecipientEmail":
		r, err = NewNotificationRecipientEmail(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:NotificationRecipientUser":
		r, err = NewNotificationRecipientUser(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:OpenIdConnectProvider":
		r, err = NewOpenIdConnectProvider(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Policy":
		r, err = NewPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Product":
		r, err = NewProduct(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ProductApi":
		r, err = NewProductApi(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ProductGroup":
		r, err = NewProductGroup(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:ProductPolicy":
		r, err = NewProductPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Property":
		r, err = NewProperty(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Subscription":
		r, err = NewSubscription(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:Tag":
		r, err = NewTag(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:TagByApi":
		r, err = NewTagByApi(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:TagByOperation":
		r, err = NewTagByOperation(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:TagByProduct":
		r, err = NewTagByProduct(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:TagDescription":
		r, err = NewTagDescription(ctx, name, nil, pulumi.URN_(urn))
	case "azure-native:apimanagement/v20170301:User":
		r, err = NewUser(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := azure.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"azure-native",
		"apimanagement/v20170301",
		&module{version},
	)
}
