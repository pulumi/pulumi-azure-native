// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Content type contract details.
type ContentItem struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the content item.
	Properties pulumi.AnyOutput `pulumi:"properties"`
	// Resource type for API Management resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewContentItem registers a new resource with the given unique name, arguments, and options.
func NewContentItem(ctx *pulumi.Context,
	name string, args *ContentItemArgs, opts ...pulumi.ResourceOption) (*ContentItem, error) {
	if args == nil || args.ContentItemId == nil {
		return nil, errors.New("missing required argument 'ContentItemId'")
	}
	if args == nil || args.ContentTypeId == nil {
		return nil, errors.New("missing required argument 'ContentTypeId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil {
		args = &ContentItemArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:apimanagement/v20191201:ContentItem"),
		},
		{
			Type: pulumi.String("azure-nextgen:apimanagement/v20200601preview:ContentItem"),
		},
	})
	opts = append(opts, aliases)
	var resource ContentItem
	err := ctx.RegisterResource("azure-nextgen:apimanagement/latest:ContentItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentItem gets an existing ContentItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentItemState, opts ...pulumi.ResourceOption) (*ContentItem, error) {
	var resource ContentItem
	err := ctx.ReadResource("azure-nextgen:apimanagement/latest:ContentItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentItem resources.
type contentItemState struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// Properties of the content item.
	Properties interface{} `pulumi:"properties"`
	// Resource type for API Management resource.
	Type *string `pulumi:"type"`
}

type ContentItemState struct {
	// Resource name.
	Name pulumi.StringPtrInput
	// Properties of the content item.
	Properties pulumi.Input
	// Resource type for API Management resource.
	Type pulumi.StringPtrInput
}

func (ContentItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentItemState)(nil)).Elem()
}

type contentItemArgs struct {
	// Content item identifier.
	ContentItemId string `pulumi:"contentItemId"`
	// Content type identifier.
	ContentTypeId string `pulumi:"contentTypeId"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ContentItem resource.
type ContentItemArgs struct {
	// Content item identifier.
	ContentItemId pulumi.StringInput
	// Content type identifier.
	ContentTypeId pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
}

func (ContentItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentItemArgs)(nil)).Elem()
}
