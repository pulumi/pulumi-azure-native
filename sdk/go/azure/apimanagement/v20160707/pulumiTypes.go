// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20160707

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Description of an additional API Management resource location.
type AdditionalRegion struct {
	// The location name of the additional region among Azure Data center regions.
	Location string `pulumi:"location"`
	// The SKU type in the location.
	SkuType SkuType `pulumi:"skuType"`
	// The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
	SkuUnitCount *int `pulumi:"skuUnitCount"`
	// Virtual network configuration for the location.
	Vpnconfiguration *VirtualNetworkConfiguration `pulumi:"vpnconfiguration"`
}

// Defaults sets the appropriate defaults for AdditionalRegion
func (val *AdditionalRegion) Defaults() *AdditionalRegion {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.SkuUnitCount) {
		skuUnitCount_ := 1
		tmp.SkuUnitCount = &skuUnitCount_
	}
	return &tmp
}

// AdditionalRegionInput is an input type that accepts AdditionalRegionArgs and AdditionalRegionOutput values.
// You can construct a concrete instance of `AdditionalRegionInput` via:
//
//	AdditionalRegionArgs{...}
type AdditionalRegionInput interface {
	pulumi.Input

	ToAdditionalRegionOutput() AdditionalRegionOutput
	ToAdditionalRegionOutputWithContext(context.Context) AdditionalRegionOutput
}

// Description of an additional API Management resource location.
type AdditionalRegionArgs struct {
	// The location name of the additional region among Azure Data center regions.
	Location pulumi.StringInput `pulumi:"location"`
	// The SKU type in the location.
	SkuType SkuTypeInput `pulumi:"skuType"`
	// The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
	SkuUnitCount pulumi.IntPtrInput `pulumi:"skuUnitCount"`
	// Virtual network configuration for the location.
	Vpnconfiguration VirtualNetworkConfigurationPtrInput `pulumi:"vpnconfiguration"`
}

// Defaults sets the appropriate defaults for AdditionalRegionArgs
func (val *AdditionalRegionArgs) Defaults() *AdditionalRegionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.SkuUnitCount) {
		tmp.SkuUnitCount = pulumi.IntPtr(1)
	}
	return &tmp
}
func (AdditionalRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalRegion)(nil)).Elem()
}

func (i AdditionalRegionArgs) ToAdditionalRegionOutput() AdditionalRegionOutput {
	return i.ToAdditionalRegionOutputWithContext(context.Background())
}

func (i AdditionalRegionArgs) ToAdditionalRegionOutputWithContext(ctx context.Context) AdditionalRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalRegionOutput)
}

// AdditionalRegionArrayInput is an input type that accepts AdditionalRegionArray and AdditionalRegionArrayOutput values.
// You can construct a concrete instance of `AdditionalRegionArrayInput` via:
//
//	AdditionalRegionArray{ AdditionalRegionArgs{...} }
type AdditionalRegionArrayInput interface {
	pulumi.Input

	ToAdditionalRegionArrayOutput() AdditionalRegionArrayOutput
	ToAdditionalRegionArrayOutputWithContext(context.Context) AdditionalRegionArrayOutput
}

type AdditionalRegionArray []AdditionalRegionInput

func (AdditionalRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalRegion)(nil)).Elem()
}

func (i AdditionalRegionArray) ToAdditionalRegionArrayOutput() AdditionalRegionArrayOutput {
	return i.ToAdditionalRegionArrayOutputWithContext(context.Background())
}

func (i AdditionalRegionArray) ToAdditionalRegionArrayOutputWithContext(ctx context.Context) AdditionalRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalRegionArrayOutput)
}

// Description of an additional API Management resource location.
type AdditionalRegionOutput struct{ *pulumi.OutputState }

func (AdditionalRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalRegion)(nil)).Elem()
}

func (o AdditionalRegionOutput) ToAdditionalRegionOutput() AdditionalRegionOutput {
	return o
}

func (o AdditionalRegionOutput) ToAdditionalRegionOutputWithContext(ctx context.Context) AdditionalRegionOutput {
	return o
}

// The location name of the additional region among Azure Data center regions.
func (o AdditionalRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalRegion) string { return v.Location }).(pulumi.StringOutput)
}

// The SKU type in the location.
func (o AdditionalRegionOutput) SkuType() SkuTypeOutput {
	return o.ApplyT(func(v AdditionalRegion) SkuType { return v.SkuType }).(SkuTypeOutput)
}

// The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
func (o AdditionalRegionOutput) SkuUnitCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AdditionalRegion) *int { return v.SkuUnitCount }).(pulumi.IntPtrOutput)
}

// Virtual network configuration for the location.
func (o AdditionalRegionOutput) Vpnconfiguration() VirtualNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v AdditionalRegion) *VirtualNetworkConfiguration { return v.Vpnconfiguration }).(VirtualNetworkConfigurationPtrOutput)
}

type AdditionalRegionArrayOutput struct{ *pulumi.OutputState }

func (AdditionalRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalRegion)(nil)).Elem()
}

func (o AdditionalRegionArrayOutput) ToAdditionalRegionArrayOutput() AdditionalRegionArrayOutput {
	return o
}

func (o AdditionalRegionArrayOutput) ToAdditionalRegionArrayOutputWithContext(ctx context.Context) AdditionalRegionArrayOutput {
	return o
}

func (o AdditionalRegionArrayOutput) Index(i pulumi.IntInput) AdditionalRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalRegion {
		return vs[0].([]AdditionalRegion)[vs[1].(int)]
	}).(AdditionalRegionOutput)
}

// Description of an additional API Management resource location.
type AdditionalRegionResponse struct {
	// The location name of the additional region among Azure Data center regions.
	Location string `pulumi:"location"`
	// The SKU type in the location.
	SkuType string `pulumi:"skuType"`
	// The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
	SkuUnitCount *int `pulumi:"skuUnitCount"`
	// Static IP addresses of the location's virtual machines.
	StaticIPs []string `pulumi:"staticIPs"`
	// Virtual network configuration for the location.
	Vpnconfiguration *VirtualNetworkConfigurationResponse `pulumi:"vpnconfiguration"`
}

// Defaults sets the appropriate defaults for AdditionalRegionResponse
func (val *AdditionalRegionResponse) Defaults() *AdditionalRegionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.SkuUnitCount) {
		skuUnitCount_ := 1
		tmp.SkuUnitCount = &skuUnitCount_
	}
	return &tmp
}

// Description of an additional API Management resource location.
type AdditionalRegionResponseOutput struct{ *pulumi.OutputState }

func (AdditionalRegionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalRegionResponse)(nil)).Elem()
}

func (o AdditionalRegionResponseOutput) ToAdditionalRegionResponseOutput() AdditionalRegionResponseOutput {
	return o
}

func (o AdditionalRegionResponseOutput) ToAdditionalRegionResponseOutputWithContext(ctx context.Context) AdditionalRegionResponseOutput {
	return o
}

// The location name of the additional region among Azure Data center regions.
func (o AdditionalRegionResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalRegionResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The SKU type in the location.
func (o AdditionalRegionResponseOutput) SkuType() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalRegionResponse) string { return v.SkuType }).(pulumi.StringOutput)
}

// The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
func (o AdditionalRegionResponseOutput) SkuUnitCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AdditionalRegionResponse) *int { return v.SkuUnitCount }).(pulumi.IntPtrOutput)
}

// Static IP addresses of the location's virtual machines.
func (o AdditionalRegionResponseOutput) StaticIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AdditionalRegionResponse) []string { return v.StaticIPs }).(pulumi.StringArrayOutput)
}

// Virtual network configuration for the location.
func (o AdditionalRegionResponseOutput) Vpnconfiguration() VirtualNetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AdditionalRegionResponse) *VirtualNetworkConfigurationResponse { return v.Vpnconfiguration }).(VirtualNetworkConfigurationResponsePtrOutput)
}

type AdditionalRegionResponseArrayOutput struct{ *pulumi.OutputState }

func (AdditionalRegionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalRegionResponse)(nil)).Elem()
}

func (o AdditionalRegionResponseArrayOutput) ToAdditionalRegionResponseArrayOutput() AdditionalRegionResponseArrayOutput {
	return o
}

func (o AdditionalRegionResponseArrayOutput) ToAdditionalRegionResponseArrayOutputWithContext(ctx context.Context) AdditionalRegionResponseArrayOutput {
	return o
}

func (o AdditionalRegionResponseArrayOutput) Index(i pulumi.IntInput) AdditionalRegionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalRegionResponse {
		return vs[0].([]AdditionalRegionResponse)[vs[1].(int)]
	}).(AdditionalRegionResponseOutput)
}

// API Management service resource SKU properties.
type ApiManagementServiceSkuProperties struct {
	// Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
	Capacity *int `pulumi:"capacity"`
	// Name of the Sku.
	Name SkuType `pulumi:"name"`
}

// Defaults sets the appropriate defaults for ApiManagementServiceSkuProperties
func (val *ApiManagementServiceSkuProperties) Defaults() *ApiManagementServiceSkuProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Capacity) {
		capacity_ := 1
		tmp.Capacity = &capacity_
	}
	return &tmp
}

// ApiManagementServiceSkuPropertiesInput is an input type that accepts ApiManagementServiceSkuPropertiesArgs and ApiManagementServiceSkuPropertiesOutput values.
// You can construct a concrete instance of `ApiManagementServiceSkuPropertiesInput` via:
//
//	ApiManagementServiceSkuPropertiesArgs{...}
type ApiManagementServiceSkuPropertiesInput interface {
	pulumi.Input

	ToApiManagementServiceSkuPropertiesOutput() ApiManagementServiceSkuPropertiesOutput
	ToApiManagementServiceSkuPropertiesOutputWithContext(context.Context) ApiManagementServiceSkuPropertiesOutput
}

// API Management service resource SKU properties.
type ApiManagementServiceSkuPropertiesArgs struct {
	// Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Name of the Sku.
	Name SkuTypeInput `pulumi:"name"`
}

// Defaults sets the appropriate defaults for ApiManagementServiceSkuPropertiesArgs
func (val *ApiManagementServiceSkuPropertiesArgs) Defaults() *ApiManagementServiceSkuPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Capacity) {
		tmp.Capacity = pulumi.IntPtr(1)
	}
	return &tmp
}
func (ApiManagementServiceSkuPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiManagementServiceSkuProperties)(nil)).Elem()
}

func (i ApiManagementServiceSkuPropertiesArgs) ToApiManagementServiceSkuPropertiesOutput() ApiManagementServiceSkuPropertiesOutput {
	return i.ToApiManagementServiceSkuPropertiesOutputWithContext(context.Background())
}

func (i ApiManagementServiceSkuPropertiesArgs) ToApiManagementServiceSkuPropertiesOutputWithContext(ctx context.Context) ApiManagementServiceSkuPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiManagementServiceSkuPropertiesOutput)
}

// API Management service resource SKU properties.
type ApiManagementServiceSkuPropertiesOutput struct{ *pulumi.OutputState }

func (ApiManagementServiceSkuPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiManagementServiceSkuProperties)(nil)).Elem()
}

func (o ApiManagementServiceSkuPropertiesOutput) ToApiManagementServiceSkuPropertiesOutput() ApiManagementServiceSkuPropertiesOutput {
	return o
}

func (o ApiManagementServiceSkuPropertiesOutput) ToApiManagementServiceSkuPropertiesOutputWithContext(ctx context.Context) ApiManagementServiceSkuPropertiesOutput {
	return o
}

// Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
func (o ApiManagementServiceSkuPropertiesOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiManagementServiceSkuProperties) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Name of the Sku.
func (o ApiManagementServiceSkuPropertiesOutput) Name() SkuTypeOutput {
	return o.ApplyT(func(v ApiManagementServiceSkuProperties) SkuType { return v.Name }).(SkuTypeOutput)
}

// API Management service resource SKU properties.
type ApiManagementServiceSkuPropertiesResponse struct {
	// Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
	Capacity *int `pulumi:"capacity"`
	// Name of the Sku.
	Name string `pulumi:"name"`
}

// Defaults sets the appropriate defaults for ApiManagementServiceSkuPropertiesResponse
func (val *ApiManagementServiceSkuPropertiesResponse) Defaults() *ApiManagementServiceSkuPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Capacity) {
		capacity_ := 1
		tmp.Capacity = &capacity_
	}
	return &tmp
}

// API Management service resource SKU properties.
type ApiManagementServiceSkuPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApiManagementServiceSkuPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiManagementServiceSkuPropertiesResponse)(nil)).Elem()
}

func (o ApiManagementServiceSkuPropertiesResponseOutput) ToApiManagementServiceSkuPropertiesResponseOutput() ApiManagementServiceSkuPropertiesResponseOutput {
	return o
}

func (o ApiManagementServiceSkuPropertiesResponseOutput) ToApiManagementServiceSkuPropertiesResponseOutputWithContext(ctx context.Context) ApiManagementServiceSkuPropertiesResponseOutput {
	return o
}

// Capacity of the SKU (number of deployed units of the SKU). The default value is 1.
func (o ApiManagementServiceSkuPropertiesResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiManagementServiceSkuPropertiesResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Name of the Sku.
func (o ApiManagementServiceSkuPropertiesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiManagementServiceSkuPropertiesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// SSL certificate information.
type CertificateInformation struct {
	// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	Expiry string `pulumi:"expiry"`
	// Subject of the certificate.
	Subject string `pulumi:"subject"`
	// Thumbprint of the certificate.
	Thumbprint string `pulumi:"thumbprint"`
}

// CertificateInformationInput is an input type that accepts CertificateInformationArgs and CertificateInformationOutput values.
// You can construct a concrete instance of `CertificateInformationInput` via:
//
//	CertificateInformationArgs{...}
type CertificateInformationInput interface {
	pulumi.Input

	ToCertificateInformationOutput() CertificateInformationOutput
	ToCertificateInformationOutputWithContext(context.Context) CertificateInformationOutput
}

// SSL certificate information.
type CertificateInformationArgs struct {
	// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	Expiry pulumi.StringInput `pulumi:"expiry"`
	// Subject of the certificate.
	Subject pulumi.StringInput `pulumi:"subject"`
	// Thumbprint of the certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
}

func (CertificateInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateInformation)(nil)).Elem()
}

func (i CertificateInformationArgs) ToCertificateInformationOutput() CertificateInformationOutput {
	return i.ToCertificateInformationOutputWithContext(context.Background())
}

func (i CertificateInformationArgs) ToCertificateInformationOutputWithContext(ctx context.Context) CertificateInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateInformationOutput)
}

// SSL certificate information.
type CertificateInformationOutput struct{ *pulumi.OutputState }

func (CertificateInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateInformation)(nil)).Elem()
}

func (o CertificateInformationOutput) ToCertificateInformationOutput() CertificateInformationOutput {
	return o
}

func (o CertificateInformationOutput) ToCertificateInformationOutputWithContext(ctx context.Context) CertificateInformationOutput {
	return o
}

// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o CertificateInformationOutput) Expiry() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateInformation) string { return v.Expiry }).(pulumi.StringOutput)
}

// Subject of the certificate.
func (o CertificateInformationOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateInformation) string { return v.Subject }).(pulumi.StringOutput)
}

// Thumbprint of the certificate.
func (o CertificateInformationOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateInformation) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// SSL certificate information.
type CertificateInformationResponse struct {
	// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	Expiry string `pulumi:"expiry"`
	// Subject of the certificate.
	Subject string `pulumi:"subject"`
	// Thumbprint of the certificate.
	Thumbprint string `pulumi:"thumbprint"`
}

// SSL certificate information.
type CertificateInformationResponseOutput struct{ *pulumi.OutputState }

func (CertificateInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateInformationResponse)(nil)).Elem()
}

func (o CertificateInformationResponseOutput) ToCertificateInformationResponseOutput() CertificateInformationResponseOutput {
	return o
}

func (o CertificateInformationResponseOutput) ToCertificateInformationResponseOutputWithContext(ctx context.Context) CertificateInformationResponseOutput {
	return o
}

// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o CertificateInformationResponseOutput) Expiry() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateInformationResponse) string { return v.Expiry }).(pulumi.StringOutput)
}

// Subject of the certificate.
func (o CertificateInformationResponseOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateInformationResponse) string { return v.Subject }).(pulumi.StringOutput)
}

// Thumbprint of the certificate.
func (o CertificateInformationResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateInformationResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Custom hostname configuration.
type HostnameConfiguration struct {
	// Certificate information.
	Certificate CertificateInformation `pulumi:"certificate"`
	// Hostname.
	Hostname string `pulumi:"hostname"`
	// Hostname type.
	Type HostnameType `pulumi:"type"`
}

// HostnameConfigurationInput is an input type that accepts HostnameConfigurationArgs and HostnameConfigurationOutput values.
// You can construct a concrete instance of `HostnameConfigurationInput` via:
//
//	HostnameConfigurationArgs{...}
type HostnameConfigurationInput interface {
	pulumi.Input

	ToHostnameConfigurationOutput() HostnameConfigurationOutput
	ToHostnameConfigurationOutputWithContext(context.Context) HostnameConfigurationOutput
}

// Custom hostname configuration.
type HostnameConfigurationArgs struct {
	// Certificate information.
	Certificate CertificateInformationInput `pulumi:"certificate"`
	// Hostname.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Hostname type.
	Type HostnameTypeInput `pulumi:"type"`
}

func (HostnameConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostnameConfiguration)(nil)).Elem()
}

func (i HostnameConfigurationArgs) ToHostnameConfigurationOutput() HostnameConfigurationOutput {
	return i.ToHostnameConfigurationOutputWithContext(context.Background())
}

func (i HostnameConfigurationArgs) ToHostnameConfigurationOutputWithContext(ctx context.Context) HostnameConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnameConfigurationOutput)
}

// HostnameConfigurationArrayInput is an input type that accepts HostnameConfigurationArray and HostnameConfigurationArrayOutput values.
// You can construct a concrete instance of `HostnameConfigurationArrayInput` via:
//
//	HostnameConfigurationArray{ HostnameConfigurationArgs{...} }
type HostnameConfigurationArrayInput interface {
	pulumi.Input

	ToHostnameConfigurationArrayOutput() HostnameConfigurationArrayOutput
	ToHostnameConfigurationArrayOutputWithContext(context.Context) HostnameConfigurationArrayOutput
}

type HostnameConfigurationArray []HostnameConfigurationInput

func (HostnameConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostnameConfiguration)(nil)).Elem()
}

func (i HostnameConfigurationArray) ToHostnameConfigurationArrayOutput() HostnameConfigurationArrayOutput {
	return i.ToHostnameConfigurationArrayOutputWithContext(context.Background())
}

func (i HostnameConfigurationArray) ToHostnameConfigurationArrayOutputWithContext(ctx context.Context) HostnameConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnameConfigurationArrayOutput)
}

// Custom hostname configuration.
type HostnameConfigurationOutput struct{ *pulumi.OutputState }

func (HostnameConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostnameConfiguration)(nil)).Elem()
}

func (o HostnameConfigurationOutput) ToHostnameConfigurationOutput() HostnameConfigurationOutput {
	return o
}

func (o HostnameConfigurationOutput) ToHostnameConfigurationOutputWithContext(ctx context.Context) HostnameConfigurationOutput {
	return o
}

// Certificate information.
func (o HostnameConfigurationOutput) Certificate() CertificateInformationOutput {
	return o.ApplyT(func(v HostnameConfiguration) CertificateInformation { return v.Certificate }).(CertificateInformationOutput)
}

// Hostname.
func (o HostnameConfigurationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v HostnameConfiguration) string { return v.Hostname }).(pulumi.StringOutput)
}

// Hostname type.
func (o HostnameConfigurationOutput) Type() HostnameTypeOutput {
	return o.ApplyT(func(v HostnameConfiguration) HostnameType { return v.Type }).(HostnameTypeOutput)
}

type HostnameConfigurationArrayOutput struct{ *pulumi.OutputState }

func (HostnameConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostnameConfiguration)(nil)).Elem()
}

func (o HostnameConfigurationArrayOutput) ToHostnameConfigurationArrayOutput() HostnameConfigurationArrayOutput {
	return o
}

func (o HostnameConfigurationArrayOutput) ToHostnameConfigurationArrayOutputWithContext(ctx context.Context) HostnameConfigurationArrayOutput {
	return o
}

func (o HostnameConfigurationArrayOutput) Index(i pulumi.IntInput) HostnameConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostnameConfiguration {
		return vs[0].([]HostnameConfiguration)[vs[1].(int)]
	}).(HostnameConfigurationOutput)
}

// Custom hostname configuration.
type HostnameConfigurationResponse struct {
	// Certificate information.
	Certificate CertificateInformationResponse `pulumi:"certificate"`
	// Hostname.
	Hostname string `pulumi:"hostname"`
	// Hostname type.
	Type string `pulumi:"type"`
}

// Custom hostname configuration.
type HostnameConfigurationResponseOutput struct{ *pulumi.OutputState }

func (HostnameConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostnameConfigurationResponse)(nil)).Elem()
}

func (o HostnameConfigurationResponseOutput) ToHostnameConfigurationResponseOutput() HostnameConfigurationResponseOutput {
	return o
}

func (o HostnameConfigurationResponseOutput) ToHostnameConfigurationResponseOutputWithContext(ctx context.Context) HostnameConfigurationResponseOutput {
	return o
}

// Certificate information.
func (o HostnameConfigurationResponseOutput) Certificate() CertificateInformationResponseOutput {
	return o.ApplyT(func(v HostnameConfigurationResponse) CertificateInformationResponse { return v.Certificate }).(CertificateInformationResponseOutput)
}

// Hostname.
func (o HostnameConfigurationResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v HostnameConfigurationResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Hostname type.
func (o HostnameConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HostnameConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type HostnameConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (HostnameConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostnameConfigurationResponse)(nil)).Elem()
}

func (o HostnameConfigurationResponseArrayOutput) ToHostnameConfigurationResponseArrayOutput() HostnameConfigurationResponseArrayOutput {
	return o
}

func (o HostnameConfigurationResponseArrayOutput) ToHostnameConfigurationResponseArrayOutputWithContext(ctx context.Context) HostnameConfigurationResponseArrayOutput {
	return o
}

func (o HostnameConfigurationResponseArrayOutput) Index(i pulumi.IntInput) HostnameConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostnameConfigurationResponse {
		return vs[0].([]HostnameConfigurationResponse)[vs[1].(int)]
	}).(HostnameConfigurationResponseOutput)
}

// Configuration of a virtual network to which API Management service is deployed.
type VirtualNetworkConfiguration struct {
	// The location of the virtual network.
	Location *string `pulumi:"location"`
	// The name of the subnet Resource ID. This has format /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/{virtual network name}/subnets/{subnet name}.
	SubnetResourceId *string `pulumi:"subnetResourceId"`
}

// VirtualNetworkConfigurationInput is an input type that accepts VirtualNetworkConfigurationArgs and VirtualNetworkConfigurationOutput values.
// You can construct a concrete instance of `VirtualNetworkConfigurationInput` via:
//
//	VirtualNetworkConfigurationArgs{...}
type VirtualNetworkConfigurationInput interface {
	pulumi.Input

	ToVirtualNetworkConfigurationOutput() VirtualNetworkConfigurationOutput
	ToVirtualNetworkConfigurationOutputWithContext(context.Context) VirtualNetworkConfigurationOutput
}

// Configuration of a virtual network to which API Management service is deployed.
type VirtualNetworkConfigurationArgs struct {
	// The location of the virtual network.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the subnet Resource ID. This has format /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/{virtual network name}/subnets/{subnet name}.
	SubnetResourceId pulumi.StringPtrInput `pulumi:"subnetResourceId"`
}

func (VirtualNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkConfiguration)(nil)).Elem()
}

func (i VirtualNetworkConfigurationArgs) ToVirtualNetworkConfigurationOutput() VirtualNetworkConfigurationOutput {
	return i.ToVirtualNetworkConfigurationOutputWithContext(context.Background())
}

func (i VirtualNetworkConfigurationArgs) ToVirtualNetworkConfigurationOutputWithContext(ctx context.Context) VirtualNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkConfigurationOutput)
}

func (i VirtualNetworkConfigurationArgs) ToVirtualNetworkConfigurationPtrOutput() VirtualNetworkConfigurationPtrOutput {
	return i.ToVirtualNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualNetworkConfigurationArgs) ToVirtualNetworkConfigurationPtrOutputWithContext(ctx context.Context) VirtualNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkConfigurationOutput).ToVirtualNetworkConfigurationPtrOutputWithContext(ctx)
}

// VirtualNetworkConfigurationPtrInput is an input type that accepts VirtualNetworkConfigurationArgs, VirtualNetworkConfigurationPtr and VirtualNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualNetworkConfigurationPtrInput` via:
//
//	        VirtualNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type VirtualNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualNetworkConfigurationPtrOutput() VirtualNetworkConfigurationPtrOutput
	ToVirtualNetworkConfigurationPtrOutputWithContext(context.Context) VirtualNetworkConfigurationPtrOutput
}

type virtualNetworkConfigurationPtrType VirtualNetworkConfigurationArgs

func VirtualNetworkConfigurationPtr(v *VirtualNetworkConfigurationArgs) VirtualNetworkConfigurationPtrInput {
	return (*virtualNetworkConfigurationPtrType)(v)
}

func (*virtualNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkConfiguration)(nil)).Elem()
}

func (i *virtualNetworkConfigurationPtrType) ToVirtualNetworkConfigurationPtrOutput() VirtualNetworkConfigurationPtrOutput {
	return i.ToVirtualNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualNetworkConfigurationPtrType) ToVirtualNetworkConfigurationPtrOutputWithContext(ctx context.Context) VirtualNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkConfigurationPtrOutput)
}

// Configuration of a virtual network to which API Management service is deployed.
type VirtualNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkConfiguration)(nil)).Elem()
}

func (o VirtualNetworkConfigurationOutput) ToVirtualNetworkConfigurationOutput() VirtualNetworkConfigurationOutput {
	return o
}

func (o VirtualNetworkConfigurationOutput) ToVirtualNetworkConfigurationOutputWithContext(ctx context.Context) VirtualNetworkConfigurationOutput {
	return o
}

func (o VirtualNetworkConfigurationOutput) ToVirtualNetworkConfigurationPtrOutput() VirtualNetworkConfigurationPtrOutput {
	return o.ToVirtualNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualNetworkConfigurationOutput) ToVirtualNetworkConfigurationPtrOutputWithContext(ctx context.Context) VirtualNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualNetworkConfiguration) *VirtualNetworkConfiguration {
		return &v
	}).(VirtualNetworkConfigurationPtrOutput)
}

// The location of the virtual network.
func (o VirtualNetworkConfigurationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkConfiguration) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the subnet Resource ID. This has format /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/{virtual network name}/subnets/{subnet name}.
func (o VirtualNetworkConfigurationOutput) SubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkConfiguration) *string { return v.SubnetResourceId }).(pulumi.StringPtrOutput)
}

type VirtualNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkConfiguration)(nil)).Elem()
}

func (o VirtualNetworkConfigurationPtrOutput) ToVirtualNetworkConfigurationPtrOutput() VirtualNetworkConfigurationPtrOutput {
	return o
}

func (o VirtualNetworkConfigurationPtrOutput) ToVirtualNetworkConfigurationPtrOutputWithContext(ctx context.Context) VirtualNetworkConfigurationPtrOutput {
	return o
}

func (o VirtualNetworkConfigurationPtrOutput) Elem() VirtualNetworkConfigurationOutput {
	return o.ApplyT(func(v *VirtualNetworkConfiguration) VirtualNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret VirtualNetworkConfiguration
		return ret
	}).(VirtualNetworkConfigurationOutput)
}

// The location of the virtual network.
func (o VirtualNetworkConfigurationPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The name of the subnet Resource ID. This has format /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/{virtual network name}/subnets/{subnet name}.
func (o VirtualNetworkConfigurationPtrOutput) SubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SubnetResourceId
	}).(pulumi.StringPtrOutput)
}

// Configuration of a virtual network to which API Management service is deployed.
type VirtualNetworkConfigurationResponse struct {
	// The location of the virtual network.
	Location *string `pulumi:"location"`
	// The name of the subnet Resource ID. This has format /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/{virtual network name}/subnets/{subnet name}.
	SubnetResourceId *string `pulumi:"subnetResourceId"`
	// The name of the subnet.
	Subnetname string `pulumi:"subnetname"`
	// The virtual network ID. This is typically a GUID. Expect a null GUID by default.
	Vnetid string `pulumi:"vnetid"`
}

// Configuration of a virtual network to which API Management service is deployed.
type VirtualNetworkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkConfigurationResponse)(nil)).Elem()
}

func (o VirtualNetworkConfigurationResponseOutput) ToVirtualNetworkConfigurationResponseOutput() VirtualNetworkConfigurationResponseOutput {
	return o
}

func (o VirtualNetworkConfigurationResponseOutput) ToVirtualNetworkConfigurationResponseOutputWithContext(ctx context.Context) VirtualNetworkConfigurationResponseOutput {
	return o
}

// The location of the virtual network.
func (o VirtualNetworkConfigurationResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkConfigurationResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the subnet Resource ID. This has format /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/{virtual network name}/subnets/{subnet name}.
func (o VirtualNetworkConfigurationResponseOutput) SubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkConfigurationResponse) *string { return v.SubnetResourceId }).(pulumi.StringPtrOutput)
}

// The name of the subnet.
func (o VirtualNetworkConfigurationResponseOutput) Subnetname() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNetworkConfigurationResponse) string { return v.Subnetname }).(pulumi.StringOutput)
}

// The virtual network ID. This is typically a GUID. Expect a null GUID by default.
func (o VirtualNetworkConfigurationResponseOutput) Vnetid() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNetworkConfigurationResponse) string { return v.Vnetid }).(pulumi.StringOutput)
}

type VirtualNetworkConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualNetworkConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkConfigurationResponse)(nil)).Elem()
}

func (o VirtualNetworkConfigurationResponsePtrOutput) ToVirtualNetworkConfigurationResponsePtrOutput() VirtualNetworkConfigurationResponsePtrOutput {
	return o
}

func (o VirtualNetworkConfigurationResponsePtrOutput) ToVirtualNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualNetworkConfigurationResponsePtrOutput {
	return o
}

func (o VirtualNetworkConfigurationResponsePtrOutput) Elem() VirtualNetworkConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualNetworkConfigurationResponse) VirtualNetworkConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret VirtualNetworkConfigurationResponse
		return ret
	}).(VirtualNetworkConfigurationResponseOutput)
}

// The location of the virtual network.
func (o VirtualNetworkConfigurationResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The name of the subnet Resource ID. This has format /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/{virtual network name}/subnets/{subnet name}.
func (o VirtualNetworkConfigurationResponsePtrOutput) SubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the subnet.
func (o VirtualNetworkConfigurationResponsePtrOutput) Subnetname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Subnetname
	}).(pulumi.StringPtrOutput)
}

// The virtual network ID. This is typically a GUID. Expect a null GUID by default.
func (o VirtualNetworkConfigurationResponsePtrOutput) Vnetid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Vnetid
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AdditionalRegionOutput{})
	pulumi.RegisterOutputType(AdditionalRegionArrayOutput{})
	pulumi.RegisterOutputType(AdditionalRegionResponseOutput{})
	pulumi.RegisterOutputType(AdditionalRegionResponseArrayOutput{})
	pulumi.RegisterOutputType(ApiManagementServiceSkuPropertiesOutput{})
	pulumi.RegisterOutputType(ApiManagementServiceSkuPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CertificateInformationOutput{})
	pulumi.RegisterOutputType(CertificateInformationResponseOutput{})
	pulumi.RegisterOutputType(HostnameConfigurationOutput{})
	pulumi.RegisterOutputType(HostnameConfigurationArrayOutput{})
	pulumi.RegisterOutputType(HostnameConfigurationResponseOutput{})
	pulumi.RegisterOutputType(HostnameConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualNetworkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkConfigurationResponsePtrOutput{})
}
