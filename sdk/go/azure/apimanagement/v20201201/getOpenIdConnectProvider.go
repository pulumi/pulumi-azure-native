// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OpenId Connect Provider details.
func LookupOpenIdConnectProvider(ctx *pulumi.Context, args *LookupOpenIdConnectProviderArgs, opts ...pulumi.InvokeOption) (*LookupOpenIdConnectProviderResult, error) {
	var rv LookupOpenIdConnectProviderResult
	err := ctx.Invoke("azure-native:apimanagement/v20201201:getOpenIdConnectProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupOpenIdConnectProviderArgs struct {
	// Identifier of the OpenID Connect Provider.
	Opid string `pulumi:"opid"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
}

// OpenId Connect Provider details.
type LookupOpenIdConnectProviderResult struct {
	// Client ID of developer console which is the client application.
	ClientId string `pulumi:"clientId"`
	// Client Secret of developer console which is the client application.
	ClientSecret *string `pulumi:"clientSecret"`
	// User-friendly description of OpenID Connect Provider.
	Description *string `pulumi:"description"`
	// User-friendly OpenID Connect Provider name.
	DisplayName string `pulumi:"displayName"`
	// Resource ID.
	Id string `pulumi:"id"`
	// Metadata endpoint URI.
	MetadataEndpoint string `pulumi:"metadataEndpoint"`
	// Resource name.
	Name string `pulumi:"name"`
	// Resource type for API Management resource.
	Type string `pulumi:"type"`
}

func LookupOpenIdConnectProviderOutput(ctx *pulumi.Context, args LookupOpenIdConnectProviderOutputArgs, opts ...pulumi.InvokeOption) LookupOpenIdConnectProviderResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOpenIdConnectProviderResult, error) {
			args := v.(LookupOpenIdConnectProviderArgs)
			r, err := LookupOpenIdConnectProvider(ctx, &args, opts...)
			var s LookupOpenIdConnectProviderResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOpenIdConnectProviderResultOutput)
}

type LookupOpenIdConnectProviderOutputArgs struct {
	// Identifier of the OpenID Connect Provider.
	Opid pulumi.StringInput `pulumi:"opid"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupOpenIdConnectProviderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpenIdConnectProviderArgs)(nil)).Elem()
}

// OpenId Connect Provider details.
type LookupOpenIdConnectProviderResultOutput struct{ *pulumi.OutputState }

func (LookupOpenIdConnectProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpenIdConnectProviderResult)(nil)).Elem()
}

func (o LookupOpenIdConnectProviderResultOutput) ToLookupOpenIdConnectProviderResultOutput() LookupOpenIdConnectProviderResultOutput {
	return o
}

func (o LookupOpenIdConnectProviderResultOutput) ToLookupOpenIdConnectProviderResultOutputWithContext(ctx context.Context) LookupOpenIdConnectProviderResultOutput {
	return o
}

// Client ID of developer console which is the client application.
func (o LookupOpenIdConnectProviderResultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenIdConnectProviderResult) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client Secret of developer console which is the client application.
func (o LookupOpenIdConnectProviderResultOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOpenIdConnectProviderResult) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// User-friendly description of OpenID Connect Provider.
func (o LookupOpenIdConnectProviderResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOpenIdConnectProviderResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User-friendly OpenID Connect Provider name.
func (o LookupOpenIdConnectProviderResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenIdConnectProviderResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Resource ID.
func (o LookupOpenIdConnectProviderResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenIdConnectProviderResult) string { return v.Id }).(pulumi.StringOutput)
}

// Metadata endpoint URI.
func (o LookupOpenIdConnectProviderResultOutput) MetadataEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenIdConnectProviderResult) string { return v.MetadataEndpoint }).(pulumi.StringOutput)
}

// Resource name.
func (o LookupOpenIdConnectProviderResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenIdConnectProviderResult) string { return v.Name }).(pulumi.StringOutput)
}

// Resource type for API Management resource.
func (o LookupOpenIdConnectProviderResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenIdConnectProviderResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOpenIdConnectProviderResultOutput{})
}
