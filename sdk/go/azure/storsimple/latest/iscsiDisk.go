// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The iSCSI disk.
type IscsiDisk struct {
	pulumi.CustomResourceState

	// The access control records.
	AccessControlRecords pulumi.StringArrayOutput `pulumi:"accessControlRecords"`
	// The data policy.
	DataPolicy pulumi.StringOutput `pulumi:"dataPolicy"`
	// The description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The disk status.
	DiskStatus pulumi.StringOutput `pulumi:"diskStatus"`
	// The local used capacity in bytes.
	LocalUsedCapacityInBytes pulumi.IntOutput `pulumi:"localUsedCapacityInBytes"`
	// The monitoring.
	MonitoringStatus pulumi.StringOutput `pulumi:"monitoringStatus"`
	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioned capacity in bytes.
	ProvisionedCapacityInBytes pulumi.IntOutput `pulumi:"provisionedCapacityInBytes"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The used capacity in bytes.
	UsedCapacityInBytes pulumi.IntOutput `pulumi:"usedCapacityInBytes"`
}

// NewIscsiDisk registers a new resource with the given unique name, arguments, and options.
func NewIscsiDisk(ctx *pulumi.Context,
	name string, args *IscsiDiskArgs, opts ...pulumi.ResourceOption) (*IscsiDisk, error) {
	if args == nil || args.AccessControlRecords == nil {
		return nil, errors.New("missing required argument 'AccessControlRecords'")
	}
	if args == nil || args.DataPolicy == nil {
		return nil, errors.New("missing required argument 'DataPolicy'")
	}
	if args == nil || args.DeviceName == nil {
		return nil, errors.New("missing required argument 'DeviceName'")
	}
	if args == nil || args.DiskName == nil {
		return nil, errors.New("missing required argument 'DiskName'")
	}
	if args == nil || args.DiskStatus == nil {
		return nil, errors.New("missing required argument 'DiskStatus'")
	}
	if args == nil || args.IscsiServerName == nil {
		return nil, errors.New("missing required argument 'IscsiServerName'")
	}
	if args == nil || args.ManagerName == nil {
		return nil, errors.New("missing required argument 'ManagerName'")
	}
	if args == nil || args.MonitoringStatus == nil {
		return nil, errors.New("missing required argument 'MonitoringStatus'")
	}
	if args == nil || args.ProvisionedCapacityInBytes == nil {
		return nil, errors.New("missing required argument 'ProvisionedCapacityInBytes'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &IscsiDiskArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:storsimple/v20161001:IscsiDisk"),
		},
	})
	opts = append(opts, aliases)
	var resource IscsiDisk
	err := ctx.RegisterResource("azure-nextgen:storsimple/latest:IscsiDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIscsiDisk gets an existing IscsiDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIscsiDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IscsiDiskState, opts ...pulumi.ResourceOption) (*IscsiDisk, error) {
	var resource IscsiDisk
	err := ctx.ReadResource("azure-nextgen:storsimple/latest:IscsiDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IscsiDisk resources.
type iscsiDiskState struct {
	// The access control records.
	AccessControlRecords []string `pulumi:"accessControlRecords"`
	// The data policy.
	DataPolicy *string `pulumi:"dataPolicy"`
	// The description.
	Description *string `pulumi:"description"`
	// The disk status.
	DiskStatus *string `pulumi:"diskStatus"`
	// The local used capacity in bytes.
	LocalUsedCapacityInBytes *int `pulumi:"localUsedCapacityInBytes"`
	// The monitoring.
	MonitoringStatus *string `pulumi:"monitoringStatus"`
	// The name.
	Name *string `pulumi:"name"`
	// The provisioned capacity in bytes.
	ProvisionedCapacityInBytes *int `pulumi:"provisionedCapacityInBytes"`
	// The type.
	Type *string `pulumi:"type"`
	// The used capacity in bytes.
	UsedCapacityInBytes *int `pulumi:"usedCapacityInBytes"`
}

type IscsiDiskState struct {
	// The access control records.
	AccessControlRecords pulumi.StringArrayInput
	// The data policy.
	DataPolicy pulumi.StringPtrInput
	// The description.
	Description pulumi.StringPtrInput
	// The disk status.
	DiskStatus pulumi.StringPtrInput
	// The local used capacity in bytes.
	LocalUsedCapacityInBytes pulumi.IntPtrInput
	// The monitoring.
	MonitoringStatus pulumi.StringPtrInput
	// The name.
	Name pulumi.StringPtrInput
	// The provisioned capacity in bytes.
	ProvisionedCapacityInBytes pulumi.IntPtrInput
	// The type.
	Type pulumi.StringPtrInput
	// The used capacity in bytes.
	UsedCapacityInBytes pulumi.IntPtrInput
}

func (IscsiDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*iscsiDiskState)(nil)).Elem()
}

type iscsiDiskArgs struct {
	// The access control records.
	AccessControlRecords []string `pulumi:"accessControlRecords"`
	// The data policy.
	DataPolicy string `pulumi:"dataPolicy"`
	// The description.
	Description *string `pulumi:"description"`
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// The disk name.
	DiskName string `pulumi:"diskName"`
	// The disk status.
	DiskStatus string `pulumi:"diskStatus"`
	// The iSCSI server name.
	IscsiServerName string `pulumi:"iscsiServerName"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The monitoring.
	MonitoringStatus string `pulumi:"monitoringStatus"`
	// The provisioned capacity in bytes.
	ProvisionedCapacityInBytes int `pulumi:"provisionedCapacityInBytes"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a IscsiDisk resource.
type IscsiDiskArgs struct {
	// The access control records.
	AccessControlRecords pulumi.StringArrayInput
	// The data policy.
	DataPolicy pulumi.StringInput
	// The description.
	Description pulumi.StringPtrInput
	// The device name.
	DeviceName pulumi.StringInput
	// The disk name.
	DiskName pulumi.StringInput
	// The disk status.
	DiskStatus pulumi.StringInput
	// The iSCSI server name.
	IscsiServerName pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The monitoring.
	MonitoringStatus pulumi.StringInput
	// The provisioned capacity in bytes.
	ProvisionedCapacityInBytes pulumi.IntInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
}

func (IscsiDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iscsiDiskArgs)(nil)).Elem()
}
