// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Challenge-Handshake Authentication Protocol (CHAP) setting
type ChapSetting struct {
	pulumi.CustomResourceState

	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The chap password.
	Password AsymmetricEncryptedSecretResponseOutput `pulumi:"password"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewChapSetting registers a new resource with the given unique name, arguments, and options.
func NewChapSetting(ctx *pulumi.Context,
	name string, args *ChapSettingArgs, opts ...pulumi.ResourceOption) (*ChapSetting, error) {
	if args == nil || args.ChapUserName == nil {
		return nil, errors.New("missing required argument 'ChapUserName'")
	}
	if args == nil || args.DeviceName == nil {
		return nil, errors.New("missing required argument 'DeviceName'")
	}
	if args == nil || args.ManagerName == nil {
		return nil, errors.New("missing required argument 'ManagerName'")
	}
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ChapSettingArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:storsimple/v20161001:ChapSetting"),
		},
	})
	opts = append(opts, aliases)
	var resource ChapSetting
	err := ctx.RegisterResource("azure-nextgen:storsimple/latest:ChapSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChapSetting gets an existing ChapSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChapSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChapSettingState, opts ...pulumi.ResourceOption) (*ChapSetting, error) {
	var resource ChapSetting
	err := ctx.ReadResource("azure-nextgen:storsimple/latest:ChapSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChapSetting resources.
type chapSettingState struct {
	// The name.
	Name *string `pulumi:"name"`
	// The chap password.
	Password *AsymmetricEncryptedSecretResponse `pulumi:"password"`
	// The type.
	Type *string `pulumi:"type"`
}

type ChapSettingState struct {
	// The name.
	Name pulumi.StringPtrInput
	// The chap password.
	Password AsymmetricEncryptedSecretResponsePtrInput
	// The type.
	Type pulumi.StringPtrInput
}

func (ChapSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*chapSettingState)(nil)).Elem()
}

type chapSettingArgs struct {
	// The chap user name.
	ChapUserName string `pulumi:"chapUserName"`
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The chap password.
	Password AsymmetricEncryptedSecret `pulumi:"password"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ChapSetting resource.
type ChapSettingArgs struct {
	// The chap user name.
	ChapUserName pulumi.StringInput
	// The device name.
	DeviceName pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The chap password.
	Password AsymmetricEncryptedSecretInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
}

func (ChapSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chapSettingArgs)(nil)).Elem()
}
