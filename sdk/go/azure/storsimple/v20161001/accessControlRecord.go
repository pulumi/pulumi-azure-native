// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20161001

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The access control record
type AccessControlRecord struct {
	pulumi.CustomResourceState

	// The Iscsi initiator name (IQN)
	InitiatorName pulumi.StringOutput `pulumi:"initiatorName"`
	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAccessControlRecord registers a new resource with the given unique name, arguments, and options.
func NewAccessControlRecord(ctx *pulumi.Context,
	name string, args *AccessControlRecordArgs, opts ...pulumi.ResourceOption) (*AccessControlRecord, error) {
	if args == nil || args.AccessControlRecordName == nil {
		return nil, errors.New("missing required argument 'AccessControlRecordName'")
	}
	if args == nil || args.InitiatorName == nil {
		return nil, errors.New("missing required argument 'InitiatorName'")
	}
	if args == nil || args.ManagerName == nil {
		return nil, errors.New("missing required argument 'ManagerName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &AccessControlRecordArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:storsimple/latest:AccessControlRecord"),
		},
		{
			Type: pulumi.String("azure-nextgen:storsimple/v20170601:AccessControlRecord"),
		},
	})
	opts = append(opts, aliases)
	var resource AccessControlRecord
	err := ctx.RegisterResource("azure-nextgen:storsimple/v20161001:AccessControlRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessControlRecord gets an existing AccessControlRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessControlRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessControlRecordState, opts ...pulumi.ResourceOption) (*AccessControlRecord, error) {
	var resource AccessControlRecord
	err := ctx.ReadResource("azure-nextgen:storsimple/v20161001:AccessControlRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessControlRecord resources.
type accessControlRecordState struct {
	// The Iscsi initiator name (IQN)
	InitiatorName *string `pulumi:"initiatorName"`
	// The name.
	Name *string `pulumi:"name"`
	// The type.
	Type *string `pulumi:"type"`
}

type AccessControlRecordState struct {
	// The Iscsi initiator name (IQN)
	InitiatorName pulumi.StringPtrInput
	// The name.
	Name pulumi.StringPtrInput
	// The type.
	Type pulumi.StringPtrInput
}

func (AccessControlRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessControlRecordState)(nil)).Elem()
}

type accessControlRecordArgs struct {
	// The name of the access control record.
	AccessControlRecordName string `pulumi:"accessControlRecordName"`
	// The Iscsi initiator name (IQN)
	InitiatorName string `pulumi:"initiatorName"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a AccessControlRecord resource.
type AccessControlRecordArgs struct {
	// The name of the access control record.
	AccessControlRecordName pulumi.StringInput
	// The Iscsi initiator name (IQN)
	InitiatorName pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
}

func (AccessControlRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessControlRecordArgs)(nil)).Elem()
}
