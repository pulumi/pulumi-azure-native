// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20161001

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The storage account credential
type StorageAccountCredential struct {
	pulumi.CustomResourceState

	// The details of the storage account password
	AccessKey AsymmetricEncryptedSecretResponsePtrOutput `pulumi:"accessKey"`
	// The cloud service provider
	CloudType pulumi.StringOutput `pulumi:"cloudType"`
	// SSL needs to be enabled or not
	EnableSSL pulumi.StringOutput `pulumi:"enableSSL"`
	// The storage endpoint
	EndPoint pulumi.StringOutput `pulumi:"endPoint"`
	// The storage account's geo location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The storage account login
	Login pulumi.StringOutput `pulumi:"login"`
	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStorageAccountCredential registers a new resource with the given unique name, arguments, and options.
func NewStorageAccountCredential(ctx *pulumi.Context,
	name string, args *StorageAccountCredentialArgs, opts ...pulumi.ResourceOption) (*StorageAccountCredential, error) {
	if args == nil || args.CloudType == nil {
		return nil, errors.New("missing required argument 'CloudType'")
	}
	if args == nil || args.CredentialName == nil {
		return nil, errors.New("missing required argument 'CredentialName'")
	}
	if args == nil || args.EnableSSL == nil {
		return nil, errors.New("missing required argument 'EnableSSL'")
	}
	if args == nil || args.EndPoint == nil {
		return nil, errors.New("missing required argument 'EndPoint'")
	}
	if args == nil || args.Login == nil {
		return nil, errors.New("missing required argument 'Login'")
	}
	if args == nil || args.ManagerName == nil {
		return nil, errors.New("missing required argument 'ManagerName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &StorageAccountCredentialArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:storsimple/latest:StorageAccountCredential"),
		},
		{
			Type: pulumi.String("azure-nextgen:storsimple/v20170601:StorageAccountCredential"),
		},
	})
	opts = append(opts, aliases)
	var resource StorageAccountCredential
	err := ctx.RegisterResource("azure-nextgen:storsimple/v20161001:StorageAccountCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageAccountCredential gets an existing StorageAccountCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageAccountCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageAccountCredentialState, opts ...pulumi.ResourceOption) (*StorageAccountCredential, error) {
	var resource StorageAccountCredential
	err := ctx.ReadResource("azure-nextgen:storsimple/v20161001:StorageAccountCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageAccountCredential resources.
type storageAccountCredentialState struct {
	// The details of the storage account password
	AccessKey *AsymmetricEncryptedSecretResponse `pulumi:"accessKey"`
	// The cloud service provider
	CloudType *string `pulumi:"cloudType"`
	// SSL needs to be enabled or not
	EnableSSL *string `pulumi:"enableSSL"`
	// The storage endpoint
	EndPoint *string `pulumi:"endPoint"`
	// The storage account's geo location
	Location *string `pulumi:"location"`
	// The storage account login
	Login *string `pulumi:"login"`
	// The name.
	Name *string `pulumi:"name"`
	// The type.
	Type *string `pulumi:"type"`
}

type StorageAccountCredentialState struct {
	// The details of the storage account password
	AccessKey AsymmetricEncryptedSecretResponsePtrInput
	// The cloud service provider
	CloudType pulumi.StringPtrInput
	// SSL needs to be enabled or not
	EnableSSL pulumi.StringPtrInput
	// The storage endpoint
	EndPoint pulumi.StringPtrInput
	// The storage account's geo location
	Location pulumi.StringPtrInput
	// The storage account login
	Login pulumi.StringPtrInput
	// The name.
	Name pulumi.StringPtrInput
	// The type.
	Type pulumi.StringPtrInput
}

func (StorageAccountCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageAccountCredentialState)(nil)).Elem()
}

type storageAccountCredentialArgs struct {
	// The details of the storage account password
	AccessKey *AsymmetricEncryptedSecret `pulumi:"accessKey"`
	// The cloud service provider
	CloudType string `pulumi:"cloudType"`
	// The credential name.
	CredentialName string `pulumi:"credentialName"`
	// SSL needs to be enabled or not
	EnableSSL string `pulumi:"enableSSL"`
	// The storage endpoint
	EndPoint string `pulumi:"endPoint"`
	// The storage account's geo location
	Location *string `pulumi:"location"`
	// The storage account login
	Login string `pulumi:"login"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a StorageAccountCredential resource.
type StorageAccountCredentialArgs struct {
	// The details of the storage account password
	AccessKey AsymmetricEncryptedSecretPtrInput
	// The cloud service provider
	CloudType pulumi.StringInput
	// The credential name.
	CredentialName pulumi.StringInput
	// SSL needs to be enabled or not
	EnableSSL pulumi.StringInput
	// The storage endpoint
	EndPoint pulumi.StringInput
	// The storage account's geo location
	Location pulumi.StringPtrInput
	// The storage account login
	Login pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
}

func (StorageAccountCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageAccountCredentialArgs)(nil)).Elem()
}
