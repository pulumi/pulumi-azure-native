// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20161001

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The storage account credential
//
// Deprecated: Version 2016-10-01 will be removed in v2 of the provider.
type StorageAccountCredential struct {
	pulumi.CustomResourceState

	// The details of the storage account password
	AccessKey AsymmetricEncryptedSecretResponsePtrOutput `pulumi:"accessKey"`
	// The cloud service provider
	CloudType pulumi.StringOutput `pulumi:"cloudType"`
	// SSL needs to be enabled or not
	EnableSSL pulumi.StringOutput `pulumi:"enableSSL"`
	// The storage endpoint
	EndPoint pulumi.StringOutput `pulumi:"endPoint"`
	// The storage account's geo location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The storage account login
	Login pulumi.StringOutput `pulumi:"login"`
	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStorageAccountCredential registers a new resource with the given unique name, arguments, and options.
func NewStorageAccountCredential(ctx *pulumi.Context,
	name string, args *StorageAccountCredentialArgs, opts ...pulumi.ResourceOption) (*StorageAccountCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudType == nil {
		return nil, errors.New("invalid value for required argument 'CloudType'")
	}
	if args.EnableSSL == nil {
		return nil, errors.New("invalid value for required argument 'EnableSSL'")
	}
	if args.EndPoint == nil {
		return nil, errors.New("invalid value for required argument 'EndPoint'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.ManagerName == nil {
		return nil, errors.New("invalid value for required argument 'ManagerName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:storsimple:StorageAccountCredential"),
		},
		{
			Type: pulumi.String("azure-native:storsimple/v20170601:StorageAccountCredential"),
		},
	})
	opts = append(opts, aliases)
	var resource StorageAccountCredential
	err := ctx.RegisterResource("azure-native:storsimple/v20161001:StorageAccountCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageAccountCredential gets an existing StorageAccountCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageAccountCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageAccountCredentialState, opts ...pulumi.ResourceOption) (*StorageAccountCredential, error) {
	var resource StorageAccountCredential
	err := ctx.ReadResource("azure-native:storsimple/v20161001:StorageAccountCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageAccountCredential resources.
type storageAccountCredentialState struct {
}

type StorageAccountCredentialState struct {
}

func (StorageAccountCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageAccountCredentialState)(nil)).Elem()
}

type storageAccountCredentialArgs struct {
	// The details of the storage account password
	AccessKey *AsymmetricEncryptedSecret `pulumi:"accessKey"`
	// The cloud service provider
	CloudType CloudType `pulumi:"cloudType"`
	// The credential name.
	CredentialName *string `pulumi:"credentialName"`
	// SSL needs to be enabled or not
	EnableSSL SslStatus `pulumi:"enableSSL"`
	// The storage endpoint
	EndPoint string `pulumi:"endPoint"`
	// The storage account's geo location
	Location *string `pulumi:"location"`
	// The storage account login
	Login string `pulumi:"login"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a StorageAccountCredential resource.
type StorageAccountCredentialArgs struct {
	// The details of the storage account password
	AccessKey AsymmetricEncryptedSecretPtrInput
	// The cloud service provider
	CloudType CloudTypeInput
	// The credential name.
	CredentialName pulumi.StringPtrInput
	// SSL needs to be enabled or not
	EnableSSL SslStatusInput
	// The storage endpoint
	EndPoint pulumi.StringInput
	// The storage account's geo location
	Location pulumi.StringPtrInput
	// The storage account login
	Login pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
}

func (StorageAccountCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageAccountCredentialArgs)(nil)).Elem()
}

type StorageAccountCredentialInput interface {
	pulumi.Input

	ToStorageAccountCredentialOutput() StorageAccountCredentialOutput
	ToStorageAccountCredentialOutputWithContext(ctx context.Context) StorageAccountCredentialOutput
}

func (*StorageAccountCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountCredential)(nil)).Elem()
}

func (i *StorageAccountCredential) ToStorageAccountCredentialOutput() StorageAccountCredentialOutput {
	return i.ToStorageAccountCredentialOutputWithContext(context.Background())
}

func (i *StorageAccountCredential) ToStorageAccountCredentialOutputWithContext(ctx context.Context) StorageAccountCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountCredentialOutput)
}

type StorageAccountCredentialOutput struct{ *pulumi.OutputState }

func (StorageAccountCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountCredential)(nil)).Elem()
}

func (o StorageAccountCredentialOutput) ToStorageAccountCredentialOutput() StorageAccountCredentialOutput {
	return o
}

func (o StorageAccountCredentialOutput) ToStorageAccountCredentialOutputWithContext(ctx context.Context) StorageAccountCredentialOutput {
	return o
}

// The details of the storage account password
func (o StorageAccountCredentialOutput) AccessKey() AsymmetricEncryptedSecretResponsePtrOutput {
	return o.ApplyT(func(v *StorageAccountCredential) AsymmetricEncryptedSecretResponsePtrOutput { return v.AccessKey }).(AsymmetricEncryptedSecretResponsePtrOutput)
}

// The cloud service provider
func (o StorageAccountCredentialOutput) CloudType() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageAccountCredential) pulumi.StringOutput { return v.CloudType }).(pulumi.StringOutput)
}

// SSL needs to be enabled or not
func (o StorageAccountCredentialOutput) EnableSSL() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageAccountCredential) pulumi.StringOutput { return v.EnableSSL }).(pulumi.StringOutput)
}

// The storage endpoint
func (o StorageAccountCredentialOutput) EndPoint() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageAccountCredential) pulumi.StringOutput { return v.EndPoint }).(pulumi.StringOutput)
}

// The storage account's geo location
func (o StorageAccountCredentialOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageAccountCredential) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The storage account login
func (o StorageAccountCredentialOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageAccountCredential) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// The name.
func (o StorageAccountCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageAccountCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type.
func (o StorageAccountCredentialOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageAccountCredential) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(StorageAccountCredentialOutput{})
}
