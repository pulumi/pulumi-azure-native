// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20161001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The File Share.
//
// Deprecated: Version 2016-10-01 will be removed in v2 of the provider.
func LookupFileShare(ctx *pulumi.Context, args *LookupFileShareArgs, opts ...pulumi.InvokeOption) (*LookupFileShareResult, error) {
	var rv LookupFileShareResult
	err := ctx.Invoke("azure-native:storsimple/v20161001:getFileShare", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFileShareArgs struct {
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// The file server name.
	FileServerName string `pulumi:"fileServerName"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The file share name.
	ShareName string `pulumi:"shareName"`
}

// The File Share.
type LookupFileShareResult struct {
	// The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\xyz.
	AdminUser string `pulumi:"adminUser"`
	// The data policy
	DataPolicy string `pulumi:"dataPolicy"`
	// Description for file share
	Description *string `pulumi:"description"`
	// The identifier.
	Id string `pulumi:"id"`
	// The local used capacity in Bytes.
	LocalUsedCapacityInBytes float64 `pulumi:"localUsedCapacityInBytes"`
	// The monitoring status
	MonitoringStatus string `pulumi:"monitoringStatus"`
	// The name.
	Name string `pulumi:"name"`
	// The total provisioned capacity in Bytes
	ProvisionedCapacityInBytes float64 `pulumi:"provisionedCapacityInBytes"`
	// The Share Status
	ShareStatus string `pulumi:"shareStatus"`
	// The type.
	Type string `pulumi:"type"`
	// The used capacity in Bytes.
	UsedCapacityInBytes float64 `pulumi:"usedCapacityInBytes"`
}

func LookupFileShareOutput(ctx *pulumi.Context, args LookupFileShareOutputArgs, opts ...pulumi.InvokeOption) LookupFileShareResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFileShareResult, error) {
			args := v.(LookupFileShareArgs)
			r, err := LookupFileShare(ctx, &args, opts...)
			var s LookupFileShareResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFileShareResultOutput)
}

type LookupFileShareOutputArgs struct {
	// The device name.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// The file server name.
	FileServerName pulumi.StringInput `pulumi:"fileServerName"`
	// The manager name
	ManagerName pulumi.StringInput `pulumi:"managerName"`
	// The resource group name
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The file share name.
	ShareName pulumi.StringInput `pulumi:"shareName"`
}

func (LookupFileShareOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFileShareArgs)(nil)).Elem()
}

// The File Share.
type LookupFileShareResultOutput struct{ *pulumi.OutputState }

func (LookupFileShareResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFileShareResult)(nil)).Elem()
}

func (o LookupFileShareResultOutput) ToLookupFileShareResultOutput() LookupFileShareResultOutput {
	return o
}

func (o LookupFileShareResultOutput) ToLookupFileShareResultOutputWithContext(ctx context.Context) LookupFileShareResultOutput {
	return o
}

// The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\xyz.
func (o LookupFileShareResultOutput) AdminUser() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileShareResult) string { return v.AdminUser }).(pulumi.StringOutput)
}

// The data policy
func (o LookupFileShareResultOutput) DataPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileShareResult) string { return v.DataPolicy }).(pulumi.StringOutput)
}

// Description for file share
func (o LookupFileShareResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFileShareResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The identifier.
func (o LookupFileShareResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileShareResult) string { return v.Id }).(pulumi.StringOutput)
}

// The local used capacity in Bytes.
func (o LookupFileShareResultOutput) LocalUsedCapacityInBytes() pulumi.Float64Output {
	return o.ApplyT(func(v LookupFileShareResult) float64 { return v.LocalUsedCapacityInBytes }).(pulumi.Float64Output)
}

// The monitoring status
func (o LookupFileShareResultOutput) MonitoringStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileShareResult) string { return v.MonitoringStatus }).(pulumi.StringOutput)
}

// The name.
func (o LookupFileShareResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileShareResult) string { return v.Name }).(pulumi.StringOutput)
}

// The total provisioned capacity in Bytes
func (o LookupFileShareResultOutput) ProvisionedCapacityInBytes() pulumi.Float64Output {
	return o.ApplyT(func(v LookupFileShareResult) float64 { return v.ProvisionedCapacityInBytes }).(pulumi.Float64Output)
}

// The Share Status
func (o LookupFileShareResultOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileShareResult) string { return v.ShareStatus }).(pulumi.StringOutput)
}

// The type.
func (o LookupFileShareResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileShareResult) string { return v.Type }).(pulumi.StringOutput)
}

// The used capacity in Bytes.
func (o LookupFileShareResultOutput) UsedCapacityInBytes() pulumi.Float64Output {
	return o.ApplyT(func(v LookupFileShareResult) float64 { return v.UsedCapacityInBytes }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(LookupFileShareResultOutput{})
}
