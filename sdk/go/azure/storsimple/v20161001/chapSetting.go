// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20161001

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Challenge-Handshake Authentication Protocol (CHAP) setting
//
// Deprecated: Version 2016-10-01 will be removed in v2 of the provider.
type ChapSetting struct {
	pulumi.CustomResourceState

	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The chap password.
	Password AsymmetricEncryptedSecretResponseOutput `pulumi:"password"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewChapSetting registers a new resource with the given unique name, arguments, and options.
func NewChapSetting(ctx *pulumi.Context,
	name string, args *ChapSettingArgs, opts ...pulumi.ResourceOption) (*ChapSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.ManagerName == nil {
		return nil, errors.New("invalid value for required argument 'ManagerName'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource ChapSetting
	err := ctx.RegisterResource("azure-native:storsimple/v20161001:ChapSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChapSetting gets an existing ChapSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChapSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChapSettingState, opts ...pulumi.ResourceOption) (*ChapSetting, error) {
	var resource ChapSetting
	err := ctx.ReadResource("azure-native:storsimple/v20161001:ChapSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChapSetting resources.
type chapSettingState struct {
}

type ChapSettingState struct {
}

func (ChapSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*chapSettingState)(nil)).Elem()
}

type chapSettingArgs struct {
	// The chap user name.
	ChapUserName *string `pulumi:"chapUserName"`
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The chap password.
	Password AsymmetricEncryptedSecret `pulumi:"password"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ChapSetting resource.
type ChapSettingArgs struct {
	// The chap user name.
	ChapUserName pulumi.StringPtrInput
	// The device name.
	DeviceName pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The chap password.
	Password AsymmetricEncryptedSecretInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
}

func (ChapSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chapSettingArgs)(nil)).Elem()
}

type ChapSettingInput interface {
	pulumi.Input

	ToChapSettingOutput() ChapSettingOutput
	ToChapSettingOutputWithContext(ctx context.Context) ChapSettingOutput
}

func (*ChapSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**ChapSetting)(nil)).Elem()
}

func (i *ChapSetting) ToChapSettingOutput() ChapSettingOutput {
	return i.ToChapSettingOutputWithContext(context.Background())
}

func (i *ChapSetting) ToChapSettingOutputWithContext(ctx context.Context) ChapSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChapSettingOutput)
}

type ChapSettingOutput struct{ *pulumi.OutputState }

func (ChapSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChapSetting)(nil)).Elem()
}

func (o ChapSettingOutput) ToChapSettingOutput() ChapSettingOutput {
	return o
}

func (o ChapSettingOutput) ToChapSettingOutputWithContext(ctx context.Context) ChapSettingOutput {
	return o
}

// The name.
func (o ChapSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChapSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The chap password.
func (o ChapSettingOutput) Password() AsymmetricEncryptedSecretResponseOutput {
	return o.ApplyT(func(v *ChapSetting) AsymmetricEncryptedSecretResponseOutput { return v.Password }).(AsymmetricEncryptedSecretResponseOutput)
}

// The type.
func (o ChapSettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ChapSetting) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ChapSettingOutput{})
}
