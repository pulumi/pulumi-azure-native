// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storsimple

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The File Share.
// API Version: 2016-10-01.
type FileShare struct {
	pulumi.CustomResourceState

	// The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\xyz.
	AdminUser pulumi.StringOutput `pulumi:"adminUser"`
	// The data policy
	DataPolicy pulumi.StringOutput `pulumi:"dataPolicy"`
	// Description for file share
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The local used capacity in Bytes.
	LocalUsedCapacityInBytes pulumi.Float64Output `pulumi:"localUsedCapacityInBytes"`
	// The monitoring status
	MonitoringStatus pulumi.StringOutput `pulumi:"monitoringStatus"`
	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The total provisioned capacity in Bytes
	ProvisionedCapacityInBytes pulumi.Float64Output `pulumi:"provisionedCapacityInBytes"`
	// The Share Status
	ShareStatus pulumi.StringOutput `pulumi:"shareStatus"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The used capacity in Bytes.
	UsedCapacityInBytes pulumi.Float64Output `pulumi:"usedCapacityInBytes"`
}

// NewFileShare registers a new resource with the given unique name, arguments, and options.
func NewFileShare(ctx *pulumi.Context,
	name string, args *FileShareArgs, opts ...pulumi.ResourceOption) (*FileShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminUser == nil {
		return nil, errors.New("invalid value for required argument 'AdminUser'")
	}
	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.FileServerName == nil {
		return nil, errors.New("invalid value for required argument 'FileServerName'")
	}
	if args.ManagerName == nil {
		return nil, errors.New("invalid value for required argument 'ManagerName'")
	}
	if args.ProvisionedCapacityInBytes == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionedCapacityInBytes'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:storsimple/latest:FileShare"),
		},
		{
			Type: pulumi.String("azure-nextgen:storsimple/v20161001:FileShare"),
		},
	})
	opts = append(opts, aliases)
	var resource FileShare
	err := ctx.RegisterResource("azure-nextgen:storsimple:FileShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileShare gets an existing FileShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileShareState, opts ...pulumi.ResourceOption) (*FileShare, error) {
	var resource FileShare
	err := ctx.ReadResource("azure-nextgen:storsimple:FileShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileShare resources.
type fileShareState struct {
	// The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\xyz.
	AdminUser *string `pulumi:"adminUser"`
	// The data policy
	DataPolicy *string `pulumi:"dataPolicy"`
	// Description for file share
	Description *string `pulumi:"description"`
	// The local used capacity in Bytes.
	LocalUsedCapacityInBytes *float64 `pulumi:"localUsedCapacityInBytes"`
	// The monitoring status
	MonitoringStatus *string `pulumi:"monitoringStatus"`
	// The name.
	Name *string `pulumi:"name"`
	// The total provisioned capacity in Bytes
	ProvisionedCapacityInBytes *float64 `pulumi:"provisionedCapacityInBytes"`
	// The Share Status
	ShareStatus *string `pulumi:"shareStatus"`
	// The type.
	Type *string `pulumi:"type"`
	// The used capacity in Bytes.
	UsedCapacityInBytes *float64 `pulumi:"usedCapacityInBytes"`
}

type FileShareState struct {
	// The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\xyz.
	AdminUser pulumi.StringPtrInput
	// The data policy
	DataPolicy pulumi.StringPtrInput
	// Description for file share
	Description pulumi.StringPtrInput
	// The local used capacity in Bytes.
	LocalUsedCapacityInBytes pulumi.Float64PtrInput
	// The monitoring status
	MonitoringStatus pulumi.StringPtrInput
	// The name.
	Name pulumi.StringPtrInput
	// The total provisioned capacity in Bytes
	ProvisionedCapacityInBytes pulumi.Float64PtrInput
	// The Share Status
	ShareStatus pulumi.StringPtrInput
	// The type.
	Type pulumi.StringPtrInput
	// The used capacity in Bytes.
	UsedCapacityInBytes pulumi.Float64PtrInput
}

func (FileShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileShareState)(nil)).Elem()
}

type fileShareArgs struct {
	// The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\xyz.
	AdminUser string `pulumi:"adminUser"`
	// The data policy
	DataPolicy string `pulumi:"dataPolicy"`
	// Description for file share
	Description *string `pulumi:"description"`
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// The file server name.
	FileServerName string `pulumi:"fileServerName"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The monitoring status
	MonitoringStatus string `pulumi:"monitoringStatus"`
	// The total provisioned capacity in Bytes
	ProvisionedCapacityInBytes float64 `pulumi:"provisionedCapacityInBytes"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The file share name.
	ShareName *string `pulumi:"shareName"`
	// The Share Status
	ShareStatus string `pulumi:"shareStatus"`
}

// The set of arguments for constructing a FileShare resource.
type FileShareArgs struct {
	// The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\xyz.
	AdminUser pulumi.StringInput
	// The data policy
	DataPolicy DataPolicy
	// Description for file share
	Description pulumi.StringPtrInput
	// The device name.
	DeviceName pulumi.StringInput
	// The file server name.
	FileServerName pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The monitoring status
	MonitoringStatus MonitoringStatus
	// The total provisioned capacity in Bytes
	ProvisionedCapacityInBytes pulumi.Float64Input
	// The resource group name
	ResourceGroupName pulumi.StringInput
	// The file share name.
	ShareName pulumi.StringPtrInput
	// The Share Status
	ShareStatus ShareStatus
}

func (FileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileShareArgs)(nil)).Elem()
}

type FileShareInput interface {
	pulumi.Input

	ToFileShareOutput() FileShareOutput
	ToFileShareOutputWithContext(ctx context.Context) FileShareOutput
}

func (*FileShare) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil))
}

func (i *FileShare) ToFileShareOutput() FileShareOutput {
	return i.ToFileShareOutputWithContext(context.Background())
}

func (i *FileShare) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput)
}

type FileShareOutput struct {
	*pulumi.OutputState
}

func (FileShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil))
}

func (o FileShareOutput) ToFileShareOutput() FileShareOutput {
	return o
}

func (o FileShareOutput) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FileShareOutput{})
}
