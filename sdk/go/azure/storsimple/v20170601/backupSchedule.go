// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170601

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The backup schedule.
type BackupSchedule struct {
	pulumi.CustomResourceState

	// The type of backup which needs to be taken.
	BackupType pulumi.StringOutput `pulumi:"backupType"`
	// The Kind of the object. Currently only Series8000 is supported
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The last successful backup run which was triggered for the schedule.
	LastSuccessfulRun pulumi.StringOutput `pulumi:"lastSuccessfulRun"`
	// The name of the object.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of backups to be retained.
	RetentionCount pulumi.Float64Output `pulumi:"retentionCount"`
	// The schedule recurrence.
	ScheduleRecurrence ScheduleRecurrenceResponseOutput `pulumi:"scheduleRecurrence"`
	// The schedule status.
	ScheduleStatus pulumi.StringOutput `pulumi:"scheduleStatus"`
	// The start time of the schedule.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The hierarchical type of the object.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBackupSchedule registers a new resource with the given unique name, arguments, and options.
func NewBackupSchedule(ctx *pulumi.Context,
	name string, args *BackupScheduleArgs, opts ...pulumi.ResourceOption) (*BackupSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'BackupPolicyName'")
	}
	if args.BackupType == nil {
		return nil, errors.New("invalid value for required argument 'BackupType'")
	}
	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.ManagerName == nil {
		return nil, errors.New("invalid value for required argument 'ManagerName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RetentionCount == nil {
		return nil, errors.New("invalid value for required argument 'RetentionCount'")
	}
	if args.ScheduleRecurrence == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleRecurrence'")
	}
	if args.ScheduleStatus == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleStatus'")
	}
	if args.StartTime == nil {
		return nil, errors.New("invalid value for required argument 'StartTime'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:storsimple:BackupSchedule"),
		},
	})
	opts = append(opts, aliases)
	var resource BackupSchedule
	err := ctx.RegisterResource("azure-native:storsimple/v20170601:BackupSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupSchedule gets an existing BackupSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupScheduleState, opts ...pulumi.ResourceOption) (*BackupSchedule, error) {
	var resource BackupSchedule
	err := ctx.ReadResource("azure-native:storsimple/v20170601:BackupSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupSchedule resources.
type backupScheduleState struct {
}

type BackupScheduleState struct {
}

func (BackupScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupScheduleState)(nil)).Elem()
}

type backupScheduleArgs struct {
	// The backup policy name.
	BackupPolicyName string `pulumi:"backupPolicyName"`
	// The backup schedule name.
	BackupScheduleName *string `pulumi:"backupScheduleName"`
	// The type of backup which needs to be taken.
	BackupType BackupType `pulumi:"backupType"`
	// The device name
	DeviceName string `pulumi:"deviceName"`
	// The Kind of the object. Currently only Series8000 is supported
	Kind *Kind `pulumi:"kind"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The number of backups to be retained.
	RetentionCount float64 `pulumi:"retentionCount"`
	// The schedule recurrence.
	ScheduleRecurrence ScheduleRecurrence `pulumi:"scheduleRecurrence"`
	// The schedule status.
	ScheduleStatus ScheduleStatus `pulumi:"scheduleStatus"`
	// The start time of the schedule.
	StartTime string `pulumi:"startTime"`
}

// The set of arguments for constructing a BackupSchedule resource.
type BackupScheduleArgs struct {
	// The backup policy name.
	BackupPolicyName pulumi.StringInput
	// The backup schedule name.
	BackupScheduleName pulumi.StringPtrInput
	// The type of backup which needs to be taken.
	BackupType BackupTypeInput
	// The device name
	DeviceName pulumi.StringInput
	// The Kind of the object. Currently only Series8000 is supported
	Kind KindPtrInput
	// The manager name
	ManagerName pulumi.StringInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
	// The number of backups to be retained.
	RetentionCount pulumi.Float64Input
	// The schedule recurrence.
	ScheduleRecurrence ScheduleRecurrenceInput
	// The schedule status.
	ScheduleStatus ScheduleStatusInput
	// The start time of the schedule.
	StartTime pulumi.StringInput
}

func (BackupScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupScheduleArgs)(nil)).Elem()
}

type BackupScheduleInput interface {
	pulumi.Input

	ToBackupScheduleOutput() BackupScheduleOutput
	ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput
}

func (*BackupSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (i *BackupSchedule) ToBackupScheduleOutput() BackupScheduleOutput {
	return i.ToBackupScheduleOutputWithContext(context.Background())
}

func (i *BackupSchedule) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleOutput)
}

type BackupScheduleOutput struct{ *pulumi.OutputState }

func (BackupScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleOutput) ToBackupScheduleOutput() BackupScheduleOutput {
	return o
}

func (o BackupScheduleOutput) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return o
}

// The type of backup which needs to be taken.
func (o BackupScheduleOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.BackupType }).(pulumi.StringOutput)
}

// The Kind of the object. Currently only Series8000 is supported
func (o BackupScheduleOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// The last successful backup run which was triggered for the schedule.
func (o BackupScheduleOutput) LastSuccessfulRun() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.LastSuccessfulRun }).(pulumi.StringOutput)
}

// The name of the object.
func (o BackupScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of backups to be retained.
func (o BackupScheduleOutput) RetentionCount() pulumi.Float64Output {
	return o.ApplyT(func(v *BackupSchedule) pulumi.Float64Output { return v.RetentionCount }).(pulumi.Float64Output)
}

// The schedule recurrence.
func (o BackupScheduleOutput) ScheduleRecurrence() ScheduleRecurrenceResponseOutput {
	return o.ApplyT(func(v *BackupSchedule) ScheduleRecurrenceResponseOutput { return v.ScheduleRecurrence }).(ScheduleRecurrenceResponseOutput)
}

// The schedule status.
func (o BackupScheduleOutput) ScheduleStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.ScheduleStatus }).(pulumi.StringOutput)
}

// The start time of the schedule.
func (o BackupScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The hierarchical type of the object.
func (o BackupScheduleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BackupScheduleOutput{})
}
