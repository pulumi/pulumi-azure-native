// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The type of backup which needs to be taken.
type BackupType string

const (
	BackupTypeLocalSnapshot = BackupType("LocalSnapshot")
	BackupTypeCloudSnapshot = BackupType("CloudSnapshot")
)

func (BackupType) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupType)(nil)).Elem()
}

func (e BackupType) ToBackupTypeOutput() BackupTypeOutput {
	return pulumi.ToOutput(e).(BackupTypeOutput)
}

func (e BackupType) ToBackupTypeOutputWithContext(ctx context.Context) BackupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BackupTypeOutput)
}

func (e BackupType) ToBackupTypePtrOutput() BackupTypePtrOutput {
	return e.ToBackupTypePtrOutputWithContext(context.Background())
}

func (e BackupType) ToBackupTypePtrOutputWithContext(ctx context.Context) BackupTypePtrOutput {
	return BackupType(e).ToBackupTypeOutputWithContext(ctx).ToBackupTypePtrOutputWithContext(ctx)
}

func (e BackupType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackupType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackupType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackupType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BackupTypeOutput struct{ *pulumi.OutputState }

func (BackupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupType)(nil)).Elem()
}

func (o BackupTypeOutput) ToBackupTypeOutput() BackupTypeOutput {
	return o
}

func (o BackupTypeOutput) ToBackupTypeOutputWithContext(ctx context.Context) BackupTypeOutput {
	return o
}

func (o BackupTypeOutput) ToBackupTypePtrOutput() BackupTypePtrOutput {
	return o.ToBackupTypePtrOutputWithContext(context.Background())
}

func (o BackupTypeOutput) ToBackupTypePtrOutputWithContext(ctx context.Context) BackupTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupType) *BackupType {
		return &v
	}).(BackupTypePtrOutput)
}

func (o BackupTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BackupTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackupType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BackupTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackupTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackupType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BackupTypePtrOutput struct{ *pulumi.OutputState }

func (BackupTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupType)(nil)).Elem()
}

func (o BackupTypePtrOutput) ToBackupTypePtrOutput() BackupTypePtrOutput {
	return o
}

func (o BackupTypePtrOutput) ToBackupTypePtrOutputWithContext(ctx context.Context) BackupTypePtrOutput {
	return o
}

func (o BackupTypePtrOutput) Elem() BackupTypeOutput {
	return o.ApplyT(func(v *BackupType) BackupType {
		if v != nil {
			return *v
		}
		var ret BackupType
		return ret
	}).(BackupTypeOutput)
}

func (o BackupTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackupTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BackupType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BackupTypeInput is an input type that accepts BackupTypeArgs and BackupTypeOutput values.
// You can construct a concrete instance of `BackupTypeInput` via:
//
//	BackupTypeArgs{...}
type BackupTypeInput interface {
	pulumi.Input

	ToBackupTypeOutput() BackupTypeOutput
	ToBackupTypeOutputWithContext(context.Context) BackupTypeOutput
}

var backupTypePtrType = reflect.TypeOf((**BackupType)(nil)).Elem()

type BackupTypePtrInput interface {
	pulumi.Input

	ToBackupTypePtrOutput() BackupTypePtrOutput
	ToBackupTypePtrOutputWithContext(context.Context) BackupTypePtrOutput
}

type backupTypePtr string

func BackupTypePtr(v string) BackupTypePtrInput {
	return (*backupTypePtr)(&v)
}

func (*backupTypePtr) ElementType() reflect.Type {
	return backupTypePtrType
}

func (in *backupTypePtr) ToBackupTypePtrOutput() BackupTypePtrOutput {
	return pulumi.ToOutput(in).(BackupTypePtrOutput)
}

func (in *backupTypePtr) ToBackupTypePtrOutputWithContext(ctx context.Context) BackupTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BackupTypePtrOutput)
}

type DayOfWeek string

const (
	DayOfWeekSunday    = DayOfWeek("Sunday")
	DayOfWeekMonday    = DayOfWeek("Monday")
	DayOfWeekTuesday   = DayOfWeek("Tuesday")
	DayOfWeekWednesday = DayOfWeek("Wednesday")
	DayOfWeekThursday  = DayOfWeek("Thursday")
	DayOfWeekFriday    = DayOfWeek("Friday")
	DayOfWeekSaturday  = DayOfWeek("Saturday")
)

func (DayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (e DayOfWeek) ToDayOfWeekOutput() DayOfWeekOutput {
	return pulumi.ToOutput(e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return e.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return DayOfWeek(e).ToDayOfWeekOutputWithContext(ctx).ToDayOfWeekPtrOutputWithContext(ctx)
}

func (e DayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DayOfWeekOutput struct{ *pulumi.OutputState }

func (DayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekOutput) ToDayOfWeekOutput() DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DayOfWeek) *DayOfWeek {
		return &v
	}).(DayOfWeekPtrOutput)
}

func (o DayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (DayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) Elem() DayOfWeekOutput {
	return o.ApplyT(func(v *DayOfWeek) DayOfWeek {
		if v != nil {
			return *v
		}
		var ret DayOfWeek
		return ret
	}).(DayOfWeekOutput)
}

func (o DayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DayOfWeekInput is an input type that accepts DayOfWeekArgs and DayOfWeekOutput values.
// You can construct a concrete instance of `DayOfWeekInput` via:
//
//	DayOfWeekArgs{...}
type DayOfWeekInput interface {
	pulumi.Input

	ToDayOfWeekOutput() DayOfWeekOutput
	ToDayOfWeekOutputWithContext(context.Context) DayOfWeekOutput
}

var dayOfWeekPtrType = reflect.TypeOf((**DayOfWeek)(nil)).Elem()

type DayOfWeekPtrInput interface {
	pulumi.Input

	ToDayOfWeekPtrOutput() DayOfWeekPtrOutput
	ToDayOfWeekPtrOutputWithContext(context.Context) DayOfWeekPtrOutput
}

type dayOfWeekPtr string

func DayOfWeekPtr(v string) DayOfWeekPtrInput {
	return (*dayOfWeekPtr)(&v)
}

func (*dayOfWeekPtr) ElementType() reflect.Type {
	return dayOfWeekPtrType
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(DayOfWeekPtrOutput)
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DayOfWeekPtrOutput)
}

// DayOfWeekArrayInput is an input type that accepts DayOfWeekArray and DayOfWeekArrayOutput values.
// You can construct a concrete instance of `DayOfWeekArrayInput` via:
//
//	DayOfWeekArray{ DayOfWeekArgs{...} }
type DayOfWeekArrayInput interface {
	pulumi.Input

	ToDayOfWeekArrayOutput() DayOfWeekArrayOutput
	ToDayOfWeekArrayOutputWithContext(context.Context) DayOfWeekArrayOutput
}

type DayOfWeekArray []DayOfWeek

func (DayOfWeekArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DayOfWeek)(nil)).Elem()
}

func (i DayOfWeekArray) ToDayOfWeekArrayOutput() DayOfWeekArrayOutput {
	return i.ToDayOfWeekArrayOutputWithContext(context.Background())
}

func (i DayOfWeekArray) ToDayOfWeekArrayOutputWithContext(ctx context.Context) DayOfWeekArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DayOfWeekArrayOutput)
}

type DayOfWeekArrayOutput struct{ *pulumi.OutputState }

func (DayOfWeekArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekArrayOutput) ToDayOfWeekArrayOutput() DayOfWeekArrayOutput {
	return o
}

func (o DayOfWeekArrayOutput) ToDayOfWeekArrayOutputWithContext(ctx context.Context) DayOfWeekArrayOutput {
	return o
}

func (o DayOfWeekArrayOutput) Index(i pulumi.IntInput) DayOfWeekOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DayOfWeek {
		return vs[0].([]DayOfWeek)[vs[1].(int)]
	}).(DayOfWeekOutput)
}

// The algorithm used to encrypt "Value".
type EncryptionAlgorithm string

const (
	EncryptionAlgorithmNone               = EncryptionAlgorithm("None")
	EncryptionAlgorithmAES256             = EncryptionAlgorithm("AES256")
	EncryptionAlgorithm_RSAES_PKCS1_v_1_5 = EncryptionAlgorithm("RSAES_PKCS1_v_1_5")
)

func (EncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionAlgorithm)(nil)).Elem()
}

func (e EncryptionAlgorithm) ToEncryptionAlgorithmOutput() EncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(EncryptionAlgorithmOutput)
}

func (e EncryptionAlgorithm) ToEncryptionAlgorithmOutputWithContext(ctx context.Context) EncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EncryptionAlgorithmOutput)
}

func (e EncryptionAlgorithm) ToEncryptionAlgorithmPtrOutput() EncryptionAlgorithmPtrOutput {
	return e.ToEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e EncryptionAlgorithm) ToEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) EncryptionAlgorithmPtrOutput {
	return EncryptionAlgorithm(e).ToEncryptionAlgorithmOutputWithContext(ctx).ToEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e EncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (EncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionAlgorithm)(nil)).Elem()
}

func (o EncryptionAlgorithmOutput) ToEncryptionAlgorithmOutput() EncryptionAlgorithmOutput {
	return o
}

func (o EncryptionAlgorithmOutput) ToEncryptionAlgorithmOutputWithContext(ctx context.Context) EncryptionAlgorithmOutput {
	return o
}

func (o EncryptionAlgorithmOutput) ToEncryptionAlgorithmPtrOutput() EncryptionAlgorithmPtrOutput {
	return o.ToEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o EncryptionAlgorithmOutput) ToEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) EncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionAlgorithm) *EncryptionAlgorithm {
		return &v
	}).(EncryptionAlgorithmPtrOutput)
}

func (o EncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (EncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionAlgorithm)(nil)).Elem()
}

func (o EncryptionAlgorithmPtrOutput) ToEncryptionAlgorithmPtrOutput() EncryptionAlgorithmPtrOutput {
	return o
}

func (o EncryptionAlgorithmPtrOutput) ToEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) EncryptionAlgorithmPtrOutput {
	return o
}

func (o EncryptionAlgorithmPtrOutput) Elem() EncryptionAlgorithmOutput {
	return o.ApplyT(func(v *EncryptionAlgorithm) EncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret EncryptionAlgorithm
		return ret
	}).(EncryptionAlgorithmOutput)
}

func (o EncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EncryptionAlgorithmInput is an input type that accepts EncryptionAlgorithmArgs and EncryptionAlgorithmOutput values.
// You can construct a concrete instance of `EncryptionAlgorithmInput` via:
//
//	EncryptionAlgorithmArgs{...}
type EncryptionAlgorithmInput interface {
	pulumi.Input

	ToEncryptionAlgorithmOutput() EncryptionAlgorithmOutput
	ToEncryptionAlgorithmOutputWithContext(context.Context) EncryptionAlgorithmOutput
}

var encryptionAlgorithmPtrType = reflect.TypeOf((**EncryptionAlgorithm)(nil)).Elem()

type EncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToEncryptionAlgorithmPtrOutput() EncryptionAlgorithmPtrOutput
	ToEncryptionAlgorithmPtrOutputWithContext(context.Context) EncryptionAlgorithmPtrOutput
}

type encryptionAlgorithmPtr string

func EncryptionAlgorithmPtr(v string) EncryptionAlgorithmPtrInput {
	return (*encryptionAlgorithmPtr)(&v)
}

func (*encryptionAlgorithmPtr) ElementType() reflect.Type {
	return encryptionAlgorithmPtrType
}

func (in *encryptionAlgorithmPtr) ToEncryptionAlgorithmPtrOutput() EncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(EncryptionAlgorithmPtrOutput)
}

func (in *encryptionAlgorithmPtr) ToEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) EncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EncryptionAlgorithmPtrOutput)
}

// The Kind of the object. Currently only Series8000 is supported
type Kind string

const (
	KindSeries8000 = Kind("Series8000")
)

func (Kind) ElementType() reflect.Type {
	return reflect.TypeOf((*Kind)(nil)).Elem()
}

func (e Kind) ToKindOutput() KindOutput {
	return pulumi.ToOutput(e).(KindOutput)
}

func (e Kind) ToKindOutputWithContext(ctx context.Context) KindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KindOutput)
}

func (e Kind) ToKindPtrOutput() KindPtrOutput {
	return e.ToKindPtrOutputWithContext(context.Background())
}

func (e Kind) ToKindPtrOutputWithContext(ctx context.Context) KindPtrOutput {
	return Kind(e).ToKindOutputWithContext(ctx).ToKindPtrOutputWithContext(ctx)
}

func (e Kind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Kind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Kind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Kind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KindOutput struct{ *pulumi.OutputState }

func (KindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Kind)(nil)).Elem()
}

func (o KindOutput) ToKindOutput() KindOutput {
	return o
}

func (o KindOutput) ToKindOutputWithContext(ctx context.Context) KindOutput {
	return o
}

func (o KindOutput) ToKindPtrOutput() KindPtrOutput {
	return o.ToKindPtrOutputWithContext(context.Background())
}

func (o KindOutput) ToKindPtrOutputWithContext(ctx context.Context) KindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Kind) *Kind {
		return &v
	}).(KindPtrOutput)
}

func (o KindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Kind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Kind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KindPtrOutput struct{ *pulumi.OutputState }

func (KindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kind)(nil)).Elem()
}

func (o KindPtrOutput) ToKindPtrOutput() KindPtrOutput {
	return o
}

func (o KindPtrOutput) ToKindPtrOutputWithContext(ctx context.Context) KindPtrOutput {
	return o
}

func (o KindPtrOutput) Elem() KindOutput {
	return o.ApplyT(func(v *Kind) Kind {
		if v != nil {
			return *v
		}
		var ret Kind
		return ret
	}).(KindOutput)
}

func (o KindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Kind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KindInput is an input type that accepts KindArgs and KindOutput values.
// You can construct a concrete instance of `KindInput` via:
//
//	KindArgs{...}
type KindInput interface {
	pulumi.Input

	ToKindOutput() KindOutput
	ToKindOutputWithContext(context.Context) KindOutput
}

var kindPtrType = reflect.TypeOf((**Kind)(nil)).Elem()

type KindPtrInput interface {
	pulumi.Input

	ToKindPtrOutput() KindPtrOutput
	ToKindPtrOutputWithContext(context.Context) KindPtrOutput
}

type kindPtr string

func KindPtr(v string) KindPtrInput {
	return (*kindPtr)(&v)
}

func (*kindPtr) ElementType() reflect.Type {
	return kindPtrType
}

func (in *kindPtr) ToKindPtrOutput() KindPtrOutput {
	return pulumi.ToOutput(in).(KindPtrOutput)
}

func (in *kindPtr) ToKindPtrOutputWithContext(ctx context.Context) KindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KindPtrOutput)
}

// Refers to the sku name which should be "Standard"
type ManagerSkuType string

const (
	ManagerSkuTypeStandard = ManagerSkuType("Standard")
)

func (ManagerSkuType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerSkuType)(nil)).Elem()
}

func (e ManagerSkuType) ToManagerSkuTypeOutput() ManagerSkuTypeOutput {
	return pulumi.ToOutput(e).(ManagerSkuTypeOutput)
}

func (e ManagerSkuType) ToManagerSkuTypeOutputWithContext(ctx context.Context) ManagerSkuTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagerSkuTypeOutput)
}

func (e ManagerSkuType) ToManagerSkuTypePtrOutput() ManagerSkuTypePtrOutput {
	return e.ToManagerSkuTypePtrOutputWithContext(context.Background())
}

func (e ManagerSkuType) ToManagerSkuTypePtrOutputWithContext(ctx context.Context) ManagerSkuTypePtrOutput {
	return ManagerSkuType(e).ToManagerSkuTypeOutputWithContext(ctx).ToManagerSkuTypePtrOutputWithContext(ctx)
}

func (e ManagerSkuType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagerSkuType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagerSkuType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagerSkuType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagerSkuTypeOutput struct{ *pulumi.OutputState }

func (ManagerSkuTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerSkuType)(nil)).Elem()
}

func (o ManagerSkuTypeOutput) ToManagerSkuTypeOutput() ManagerSkuTypeOutput {
	return o
}

func (o ManagerSkuTypeOutput) ToManagerSkuTypeOutputWithContext(ctx context.Context) ManagerSkuTypeOutput {
	return o
}

func (o ManagerSkuTypeOutput) ToManagerSkuTypePtrOutput() ManagerSkuTypePtrOutput {
	return o.ToManagerSkuTypePtrOutputWithContext(context.Background())
}

func (o ManagerSkuTypeOutput) ToManagerSkuTypePtrOutputWithContext(ctx context.Context) ManagerSkuTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagerSkuType) *ManagerSkuType {
		return &v
	}).(ManagerSkuTypePtrOutput)
}

func (o ManagerSkuTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagerSkuTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagerSkuType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagerSkuTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagerSkuTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagerSkuType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagerSkuTypePtrOutput struct{ *pulumi.OutputState }

func (ManagerSkuTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagerSkuType)(nil)).Elem()
}

func (o ManagerSkuTypePtrOutput) ToManagerSkuTypePtrOutput() ManagerSkuTypePtrOutput {
	return o
}

func (o ManagerSkuTypePtrOutput) ToManagerSkuTypePtrOutputWithContext(ctx context.Context) ManagerSkuTypePtrOutput {
	return o
}

func (o ManagerSkuTypePtrOutput) Elem() ManagerSkuTypeOutput {
	return o.ApplyT(func(v *ManagerSkuType) ManagerSkuType {
		if v != nil {
			return *v
		}
		var ret ManagerSkuType
		return ret
	}).(ManagerSkuTypeOutput)
}

func (o ManagerSkuTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagerSkuTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagerSkuType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagerSkuTypeInput is an input type that accepts ManagerSkuTypeArgs and ManagerSkuTypeOutput values.
// You can construct a concrete instance of `ManagerSkuTypeInput` via:
//
//	ManagerSkuTypeArgs{...}
type ManagerSkuTypeInput interface {
	pulumi.Input

	ToManagerSkuTypeOutput() ManagerSkuTypeOutput
	ToManagerSkuTypeOutputWithContext(context.Context) ManagerSkuTypeOutput
}

var managerSkuTypePtrType = reflect.TypeOf((**ManagerSkuType)(nil)).Elem()

type ManagerSkuTypePtrInput interface {
	pulumi.Input

	ToManagerSkuTypePtrOutput() ManagerSkuTypePtrOutput
	ToManagerSkuTypePtrOutputWithContext(context.Context) ManagerSkuTypePtrOutput
}

type managerSkuTypePtr string

func ManagerSkuTypePtr(v string) ManagerSkuTypePtrInput {
	return (*managerSkuTypePtr)(&v)
}

func (*managerSkuTypePtr) ElementType() reflect.Type {
	return managerSkuTypePtrType
}

func (in *managerSkuTypePtr) ToManagerSkuTypePtrOutput() ManagerSkuTypePtrOutput {
	return pulumi.ToOutput(in).(ManagerSkuTypePtrOutput)
}

func (in *managerSkuTypePtr) ToManagerSkuTypePtrOutputWithContext(ctx context.Context) ManagerSkuTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagerSkuTypePtrOutput)
}

// The type of StorSimple Manager.
type ManagerType string

const (
	ManagerTypeGardaV1    = ManagerType("GardaV1")
	ManagerTypeHelsinkiV1 = ManagerType("HelsinkiV1")
)

func (ManagerType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerType)(nil)).Elem()
}

func (e ManagerType) ToManagerTypeOutput() ManagerTypeOutput {
	return pulumi.ToOutput(e).(ManagerTypeOutput)
}

func (e ManagerType) ToManagerTypeOutputWithContext(ctx context.Context) ManagerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagerTypeOutput)
}

func (e ManagerType) ToManagerTypePtrOutput() ManagerTypePtrOutput {
	return e.ToManagerTypePtrOutputWithContext(context.Background())
}

func (e ManagerType) ToManagerTypePtrOutputWithContext(ctx context.Context) ManagerTypePtrOutput {
	return ManagerType(e).ToManagerTypeOutputWithContext(ctx).ToManagerTypePtrOutputWithContext(ctx)
}

func (e ManagerType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagerType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagerType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagerType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagerTypeOutput struct{ *pulumi.OutputState }

func (ManagerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerType)(nil)).Elem()
}

func (o ManagerTypeOutput) ToManagerTypeOutput() ManagerTypeOutput {
	return o
}

func (o ManagerTypeOutput) ToManagerTypeOutputWithContext(ctx context.Context) ManagerTypeOutput {
	return o
}

func (o ManagerTypeOutput) ToManagerTypePtrOutput() ManagerTypePtrOutput {
	return o.ToManagerTypePtrOutputWithContext(context.Background())
}

func (o ManagerTypeOutput) ToManagerTypePtrOutputWithContext(ctx context.Context) ManagerTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagerType) *ManagerType {
		return &v
	}).(ManagerTypePtrOutput)
}

func (o ManagerTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagerTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagerType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagerTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagerTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagerType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagerTypePtrOutput struct{ *pulumi.OutputState }

func (ManagerTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagerType)(nil)).Elem()
}

func (o ManagerTypePtrOutput) ToManagerTypePtrOutput() ManagerTypePtrOutput {
	return o
}

func (o ManagerTypePtrOutput) ToManagerTypePtrOutputWithContext(ctx context.Context) ManagerTypePtrOutput {
	return o
}

func (o ManagerTypePtrOutput) Elem() ManagerTypeOutput {
	return o.ApplyT(func(v *ManagerType) ManagerType {
		if v != nil {
			return *v
		}
		var ret ManagerType
		return ret
	}).(ManagerTypeOutput)
}

func (o ManagerTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagerTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagerType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagerTypeInput is an input type that accepts ManagerTypeArgs and ManagerTypeOutput values.
// You can construct a concrete instance of `ManagerTypeInput` via:
//
//	ManagerTypeArgs{...}
type ManagerTypeInput interface {
	pulumi.Input

	ToManagerTypeOutput() ManagerTypeOutput
	ToManagerTypeOutputWithContext(context.Context) ManagerTypeOutput
}

var managerTypePtrType = reflect.TypeOf((**ManagerType)(nil)).Elem()

type ManagerTypePtrInput interface {
	pulumi.Input

	ToManagerTypePtrOutput() ManagerTypePtrOutput
	ToManagerTypePtrOutputWithContext(context.Context) ManagerTypePtrOutput
}

type managerTypePtr string

func ManagerTypePtr(v string) ManagerTypePtrInput {
	return (*managerTypePtr)(&v)
}

func (*managerTypePtr) ElementType() reflect.Type {
	return managerTypePtrType
}

func (in *managerTypePtr) ToManagerTypePtrOutput() ManagerTypePtrOutput {
	return pulumi.ToOutput(in).(ManagerTypePtrOutput)
}

func (in *managerTypePtr) ToManagerTypePtrOutputWithContext(ctx context.Context) ManagerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagerTypePtrOutput)
}

// The monitoring status of the volume.
type MonitoringStatus string

const (
	MonitoringStatusEnabled  = MonitoringStatus("Enabled")
	MonitoringStatusDisabled = MonitoringStatus("Disabled")
)

func (MonitoringStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringStatus)(nil)).Elem()
}

func (e MonitoringStatus) ToMonitoringStatusOutput() MonitoringStatusOutput {
	return pulumi.ToOutput(e).(MonitoringStatusOutput)
}

func (e MonitoringStatus) ToMonitoringStatusOutputWithContext(ctx context.Context) MonitoringStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MonitoringStatusOutput)
}

func (e MonitoringStatus) ToMonitoringStatusPtrOutput() MonitoringStatusPtrOutput {
	return e.ToMonitoringStatusPtrOutputWithContext(context.Background())
}

func (e MonitoringStatus) ToMonitoringStatusPtrOutputWithContext(ctx context.Context) MonitoringStatusPtrOutput {
	return MonitoringStatus(e).ToMonitoringStatusOutputWithContext(ctx).ToMonitoringStatusPtrOutputWithContext(ctx)
}

func (e MonitoringStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MonitoringStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MonitoringStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MonitoringStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MonitoringStatusOutput struct{ *pulumi.OutputState }

func (MonitoringStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringStatus)(nil)).Elem()
}

func (o MonitoringStatusOutput) ToMonitoringStatusOutput() MonitoringStatusOutput {
	return o
}

func (o MonitoringStatusOutput) ToMonitoringStatusOutputWithContext(ctx context.Context) MonitoringStatusOutput {
	return o
}

func (o MonitoringStatusOutput) ToMonitoringStatusPtrOutput() MonitoringStatusPtrOutput {
	return o.ToMonitoringStatusPtrOutputWithContext(context.Background())
}

func (o MonitoringStatusOutput) ToMonitoringStatusPtrOutputWithContext(ctx context.Context) MonitoringStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringStatus) *MonitoringStatus {
		return &v
	}).(MonitoringStatusPtrOutput)
}

func (o MonitoringStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MonitoringStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MonitoringStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MonitoringStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MonitoringStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MonitoringStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MonitoringStatusPtrOutput struct{ *pulumi.OutputState }

func (MonitoringStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringStatus)(nil)).Elem()
}

func (o MonitoringStatusPtrOutput) ToMonitoringStatusPtrOutput() MonitoringStatusPtrOutput {
	return o
}

func (o MonitoringStatusPtrOutput) ToMonitoringStatusPtrOutputWithContext(ctx context.Context) MonitoringStatusPtrOutput {
	return o
}

func (o MonitoringStatusPtrOutput) Elem() MonitoringStatusOutput {
	return o.ApplyT(func(v *MonitoringStatus) MonitoringStatus {
		if v != nil {
			return *v
		}
		var ret MonitoringStatus
		return ret
	}).(MonitoringStatusOutput)
}

func (o MonitoringStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MonitoringStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MonitoringStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MonitoringStatusInput is an input type that accepts MonitoringStatusArgs and MonitoringStatusOutput values.
// You can construct a concrete instance of `MonitoringStatusInput` via:
//
//	MonitoringStatusArgs{...}
type MonitoringStatusInput interface {
	pulumi.Input

	ToMonitoringStatusOutput() MonitoringStatusOutput
	ToMonitoringStatusOutputWithContext(context.Context) MonitoringStatusOutput
}

var monitoringStatusPtrType = reflect.TypeOf((**MonitoringStatus)(nil)).Elem()

type MonitoringStatusPtrInput interface {
	pulumi.Input

	ToMonitoringStatusPtrOutput() MonitoringStatusPtrOutput
	ToMonitoringStatusPtrOutputWithContext(context.Context) MonitoringStatusPtrOutput
}

type monitoringStatusPtr string

func MonitoringStatusPtr(v string) MonitoringStatusPtrInput {
	return (*monitoringStatusPtr)(&v)
}

func (*monitoringStatusPtr) ElementType() reflect.Type {
	return monitoringStatusPtrType
}

func (in *monitoringStatusPtr) ToMonitoringStatusPtrOutput() MonitoringStatusPtrOutput {
	return pulumi.ToOutput(in).(MonitoringStatusPtrOutput)
}

func (in *monitoringStatusPtr) ToMonitoringStatusPtrOutputWithContext(ctx context.Context) MonitoringStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MonitoringStatusPtrOutput)
}

// The recurrence type.
type RecurrenceType string

const (
	RecurrenceTypeMinutes = RecurrenceType("Minutes")
	RecurrenceTypeHourly  = RecurrenceType("Hourly")
	RecurrenceTypeDaily   = RecurrenceType("Daily")
	RecurrenceTypeWeekly  = RecurrenceType("Weekly")
)

func (RecurrenceType) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceType)(nil)).Elem()
}

func (e RecurrenceType) ToRecurrenceTypeOutput() RecurrenceTypeOutput {
	return pulumi.ToOutput(e).(RecurrenceTypeOutput)
}

func (e RecurrenceType) ToRecurrenceTypeOutputWithContext(ctx context.Context) RecurrenceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RecurrenceTypeOutput)
}

func (e RecurrenceType) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return e.ToRecurrenceTypePtrOutputWithContext(context.Background())
}

func (e RecurrenceType) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return RecurrenceType(e).ToRecurrenceTypeOutputWithContext(ctx).ToRecurrenceTypePtrOutputWithContext(ctx)
}

func (e RecurrenceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurrenceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurrenceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RecurrenceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RecurrenceTypeOutput struct{ *pulumi.OutputState }

func (RecurrenceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceType)(nil)).Elem()
}

func (o RecurrenceTypeOutput) ToRecurrenceTypeOutput() RecurrenceTypeOutput {
	return o
}

func (o RecurrenceTypeOutput) ToRecurrenceTypeOutputWithContext(ctx context.Context) RecurrenceTypeOutput {
	return o
}

func (o RecurrenceTypeOutput) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return o.ToRecurrenceTypePtrOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceType) *RecurrenceType {
		return &v
	}).(RecurrenceTypePtrOutput)
}

func (o RecurrenceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurrenceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RecurrenceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurrenceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RecurrenceTypePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceType)(nil)).Elem()
}

func (o RecurrenceTypePtrOutput) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return o
}

func (o RecurrenceTypePtrOutput) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return o
}

func (o RecurrenceTypePtrOutput) Elem() RecurrenceTypeOutput {
	return o.ApplyT(func(v *RecurrenceType) RecurrenceType {
		if v != nil {
			return *v
		}
		var ret RecurrenceType
		return ret
	}).(RecurrenceTypeOutput)
}

func (o RecurrenceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurrenceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RecurrenceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RecurrenceTypeInput is an input type that accepts RecurrenceTypeArgs and RecurrenceTypeOutput values.
// You can construct a concrete instance of `RecurrenceTypeInput` via:
//
//	RecurrenceTypeArgs{...}
type RecurrenceTypeInput interface {
	pulumi.Input

	ToRecurrenceTypeOutput() RecurrenceTypeOutput
	ToRecurrenceTypeOutputWithContext(context.Context) RecurrenceTypeOutput
}

var recurrenceTypePtrType = reflect.TypeOf((**RecurrenceType)(nil)).Elem()

type RecurrenceTypePtrInput interface {
	pulumi.Input

	ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput
	ToRecurrenceTypePtrOutputWithContext(context.Context) RecurrenceTypePtrOutput
}

type recurrenceTypePtr string

func RecurrenceTypePtr(v string) RecurrenceTypePtrInput {
	return (*recurrenceTypePtr)(&v)
}

func (*recurrenceTypePtr) ElementType() reflect.Type {
	return recurrenceTypePtrType
}

func (in *recurrenceTypePtr) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return pulumi.ToOutput(in).(RecurrenceTypePtrOutput)
}

func (in *recurrenceTypePtr) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RecurrenceTypePtrOutput)
}

// The schedule status.
type ScheduleStatus string

const (
	ScheduleStatusEnabled  = ScheduleStatus("Enabled")
	ScheduleStatusDisabled = ScheduleStatus("Disabled")
)

func (ScheduleStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleStatus)(nil)).Elem()
}

func (e ScheduleStatus) ToScheduleStatusOutput() ScheduleStatusOutput {
	return pulumi.ToOutput(e).(ScheduleStatusOutput)
}

func (e ScheduleStatus) ToScheduleStatusOutputWithContext(ctx context.Context) ScheduleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduleStatusOutput)
}

func (e ScheduleStatus) ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput {
	return e.ToScheduleStatusPtrOutputWithContext(context.Background())
}

func (e ScheduleStatus) ToScheduleStatusPtrOutputWithContext(ctx context.Context) ScheduleStatusPtrOutput {
	return ScheduleStatus(e).ToScheduleStatusOutputWithContext(ctx).ToScheduleStatusPtrOutputWithContext(ctx)
}

func (e ScheduleStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduleStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduleStatusOutput struct{ *pulumi.OutputState }

func (ScheduleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleStatus)(nil)).Elem()
}

func (o ScheduleStatusOutput) ToScheduleStatusOutput() ScheduleStatusOutput {
	return o
}

func (o ScheduleStatusOutput) ToScheduleStatusOutputWithContext(ctx context.Context) ScheduleStatusOutput {
	return o
}

func (o ScheduleStatusOutput) ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput {
	return o.ToScheduleStatusPtrOutputWithContext(context.Background())
}

func (o ScheduleStatusOutput) ToScheduleStatusPtrOutputWithContext(ctx context.Context) ScheduleStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleStatus) *ScheduleStatus {
		return &v
	}).(ScheduleStatusPtrOutput)
}

func (o ScheduleStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleStatusPtrOutput struct{ *pulumi.OutputState }

func (ScheduleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleStatus)(nil)).Elem()
}

func (o ScheduleStatusPtrOutput) ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput {
	return o
}

func (o ScheduleStatusPtrOutput) ToScheduleStatusPtrOutputWithContext(ctx context.Context) ScheduleStatusPtrOutput {
	return o
}

func (o ScheduleStatusPtrOutput) Elem() ScheduleStatusOutput {
	return o.ApplyT(func(v *ScheduleStatus) ScheduleStatus {
		if v != nil {
			return *v
		}
		var ret ScheduleStatus
		return ret
	}).(ScheduleStatusOutput)
}

func (o ScheduleStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduleStatusInput is an input type that accepts ScheduleStatusArgs and ScheduleStatusOutput values.
// You can construct a concrete instance of `ScheduleStatusInput` via:
//
//	ScheduleStatusArgs{...}
type ScheduleStatusInput interface {
	pulumi.Input

	ToScheduleStatusOutput() ScheduleStatusOutput
	ToScheduleStatusOutputWithContext(context.Context) ScheduleStatusOutput
}

var scheduleStatusPtrType = reflect.TypeOf((**ScheduleStatus)(nil)).Elem()

type ScheduleStatusPtrInput interface {
	pulumi.Input

	ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput
	ToScheduleStatusPtrOutputWithContext(context.Context) ScheduleStatusPtrOutput
}

type scheduleStatusPtr string

func ScheduleStatusPtr(v string) ScheduleStatusPtrInput {
	return (*scheduleStatusPtr)(&v)
}

func (*scheduleStatusPtr) ElementType() reflect.Type {
	return scheduleStatusPtrType
}

func (in *scheduleStatusPtr) ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput {
	return pulumi.ToOutput(in).(ScheduleStatusPtrOutput)
}

func (in *scheduleStatusPtr) ToScheduleStatusPtrOutputWithContext(ctx context.Context) ScheduleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduleStatusPtrOutput)
}

// Signifies whether SSL needs to be enabled or not.
type SslStatus string

const (
	SslStatusEnabled  = SslStatus("Enabled")
	SslStatusDisabled = SslStatus("Disabled")
)

func (SslStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*SslStatus)(nil)).Elem()
}

func (e SslStatus) ToSslStatusOutput() SslStatusOutput {
	return pulumi.ToOutput(e).(SslStatusOutput)
}

func (e SslStatus) ToSslStatusOutputWithContext(ctx context.Context) SslStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SslStatusOutput)
}

func (e SslStatus) ToSslStatusPtrOutput() SslStatusPtrOutput {
	return e.ToSslStatusPtrOutputWithContext(context.Background())
}

func (e SslStatus) ToSslStatusPtrOutputWithContext(ctx context.Context) SslStatusPtrOutput {
	return SslStatus(e).ToSslStatusOutputWithContext(ctx).ToSslStatusPtrOutputWithContext(ctx)
}

func (e SslStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SslStatusOutput struct{ *pulumi.OutputState }

func (SslStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslStatus)(nil)).Elem()
}

func (o SslStatusOutput) ToSslStatusOutput() SslStatusOutput {
	return o
}

func (o SslStatusOutput) ToSslStatusOutputWithContext(ctx context.Context) SslStatusOutput {
	return o
}

func (o SslStatusOutput) ToSslStatusPtrOutput() SslStatusPtrOutput {
	return o.ToSslStatusPtrOutputWithContext(context.Background())
}

func (o SslStatusOutput) ToSslStatusPtrOutputWithContext(ctx context.Context) SslStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslStatus) *SslStatus {
		return &v
	}).(SslStatusPtrOutput)
}

func (o SslStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SslStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SslStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SslStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SslStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SslStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SslStatusPtrOutput struct{ *pulumi.OutputState }

func (SslStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslStatus)(nil)).Elem()
}

func (o SslStatusPtrOutput) ToSslStatusPtrOutput() SslStatusPtrOutput {
	return o
}

func (o SslStatusPtrOutput) ToSslStatusPtrOutputWithContext(ctx context.Context) SslStatusPtrOutput {
	return o
}

func (o SslStatusPtrOutput) Elem() SslStatusOutput {
	return o.ApplyT(func(v *SslStatus) SslStatus {
		if v != nil {
			return *v
		}
		var ret SslStatus
		return ret
	}).(SslStatusOutput)
}

func (o SslStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SslStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SslStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SslStatusInput is an input type that accepts SslStatusArgs and SslStatusOutput values.
// You can construct a concrete instance of `SslStatusInput` via:
//
//	SslStatusArgs{...}
type SslStatusInput interface {
	pulumi.Input

	ToSslStatusOutput() SslStatusOutput
	ToSslStatusOutputWithContext(context.Context) SslStatusOutput
}

var sslStatusPtrType = reflect.TypeOf((**SslStatus)(nil)).Elem()

type SslStatusPtrInput interface {
	pulumi.Input

	ToSslStatusPtrOutput() SslStatusPtrOutput
	ToSslStatusPtrOutputWithContext(context.Context) SslStatusPtrOutput
}

type sslStatusPtr string

func SslStatusPtr(v string) SslStatusPtrInput {
	return (*sslStatusPtr)(&v)
}

func (*sslStatusPtr) ElementType() reflect.Type {
	return sslStatusPtrType
}

func (in *sslStatusPtr) ToSslStatusPtrOutput() SslStatusPtrOutput {
	return pulumi.ToOutput(in).(SslStatusPtrOutput)
}

func (in *sslStatusPtr) ToSslStatusPtrOutputWithContext(ctx context.Context) SslStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SslStatusPtrOutput)
}

// The volume status.
type VolumeStatus string

const (
	VolumeStatusOnline  = VolumeStatus("Online")
	VolumeStatusOffline = VolumeStatus("Offline")
)

func (VolumeStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeStatus)(nil)).Elem()
}

func (e VolumeStatus) ToVolumeStatusOutput() VolumeStatusOutput {
	return pulumi.ToOutput(e).(VolumeStatusOutput)
}

func (e VolumeStatus) ToVolumeStatusOutputWithContext(ctx context.Context) VolumeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VolumeStatusOutput)
}

func (e VolumeStatus) ToVolumeStatusPtrOutput() VolumeStatusPtrOutput {
	return e.ToVolumeStatusPtrOutputWithContext(context.Background())
}

func (e VolumeStatus) ToVolumeStatusPtrOutputWithContext(ctx context.Context) VolumeStatusPtrOutput {
	return VolumeStatus(e).ToVolumeStatusOutputWithContext(ctx).ToVolumeStatusPtrOutputWithContext(ctx)
}

func (e VolumeStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VolumeStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VolumeStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VolumeStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VolumeStatusOutput struct{ *pulumi.OutputState }

func (VolumeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeStatus)(nil)).Elem()
}

func (o VolumeStatusOutput) ToVolumeStatusOutput() VolumeStatusOutput {
	return o
}

func (o VolumeStatusOutput) ToVolumeStatusOutputWithContext(ctx context.Context) VolumeStatusOutput {
	return o
}

func (o VolumeStatusOutput) ToVolumeStatusPtrOutput() VolumeStatusPtrOutput {
	return o.ToVolumeStatusPtrOutputWithContext(context.Background())
}

func (o VolumeStatusOutput) ToVolumeStatusPtrOutputWithContext(ctx context.Context) VolumeStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeStatus) *VolumeStatus {
		return &v
	}).(VolumeStatusPtrOutput)
}

func (o VolumeStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VolumeStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VolumeStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VolumeStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VolumeStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VolumeStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VolumeStatusPtrOutput struct{ *pulumi.OutputState }

func (VolumeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeStatus)(nil)).Elem()
}

func (o VolumeStatusPtrOutput) ToVolumeStatusPtrOutput() VolumeStatusPtrOutput {
	return o
}

func (o VolumeStatusPtrOutput) ToVolumeStatusPtrOutputWithContext(ctx context.Context) VolumeStatusPtrOutput {
	return o
}

func (o VolumeStatusPtrOutput) Elem() VolumeStatusOutput {
	return o.ApplyT(func(v *VolumeStatus) VolumeStatus {
		if v != nil {
			return *v
		}
		var ret VolumeStatus
		return ret
	}).(VolumeStatusOutput)
}

func (o VolumeStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VolumeStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VolumeStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VolumeStatusInput is an input type that accepts VolumeStatusArgs and VolumeStatusOutput values.
// You can construct a concrete instance of `VolumeStatusInput` via:
//
//	VolumeStatusArgs{...}
type VolumeStatusInput interface {
	pulumi.Input

	ToVolumeStatusOutput() VolumeStatusOutput
	ToVolumeStatusOutputWithContext(context.Context) VolumeStatusOutput
}

var volumeStatusPtrType = reflect.TypeOf((**VolumeStatus)(nil)).Elem()

type VolumeStatusPtrInput interface {
	pulumi.Input

	ToVolumeStatusPtrOutput() VolumeStatusPtrOutput
	ToVolumeStatusPtrOutputWithContext(context.Context) VolumeStatusPtrOutput
}

type volumeStatusPtr string

func VolumeStatusPtr(v string) VolumeStatusPtrInput {
	return (*volumeStatusPtr)(&v)
}

func (*volumeStatusPtr) ElementType() reflect.Type {
	return volumeStatusPtrType
}

func (in *volumeStatusPtr) ToVolumeStatusPtrOutput() VolumeStatusPtrOutput {
	return pulumi.ToOutput(in).(VolumeStatusPtrOutput)
}

func (in *volumeStatusPtr) ToVolumeStatusPtrOutputWithContext(ctx context.Context) VolumeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VolumeStatusPtrOutput)
}

// The type of the volume.
type VolumeType string

const (
	VolumeTypeTiered        = VolumeType("Tiered")
	VolumeTypeArchival      = VolumeType("Archival")
	VolumeTypeLocallyPinned = VolumeType("LocallyPinned")
)

func (VolumeType) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeType)(nil)).Elem()
}

func (e VolumeType) ToVolumeTypeOutput() VolumeTypeOutput {
	return pulumi.ToOutput(e).(VolumeTypeOutput)
}

func (e VolumeType) ToVolumeTypeOutputWithContext(ctx context.Context) VolumeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VolumeTypeOutput)
}

func (e VolumeType) ToVolumeTypePtrOutput() VolumeTypePtrOutput {
	return e.ToVolumeTypePtrOutputWithContext(context.Background())
}

func (e VolumeType) ToVolumeTypePtrOutputWithContext(ctx context.Context) VolumeTypePtrOutput {
	return VolumeType(e).ToVolumeTypeOutputWithContext(ctx).ToVolumeTypePtrOutputWithContext(ctx)
}

func (e VolumeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VolumeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VolumeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VolumeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VolumeTypeOutput struct{ *pulumi.OutputState }

func (VolumeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeType)(nil)).Elem()
}

func (o VolumeTypeOutput) ToVolumeTypeOutput() VolumeTypeOutput {
	return o
}

func (o VolumeTypeOutput) ToVolumeTypeOutputWithContext(ctx context.Context) VolumeTypeOutput {
	return o
}

func (o VolumeTypeOutput) ToVolumeTypePtrOutput() VolumeTypePtrOutput {
	return o.ToVolumeTypePtrOutputWithContext(context.Background())
}

func (o VolumeTypeOutput) ToVolumeTypePtrOutputWithContext(ctx context.Context) VolumeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeType) *VolumeType {
		return &v
	}).(VolumeTypePtrOutput)
}

func (o VolumeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VolumeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VolumeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VolumeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VolumeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VolumeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VolumeTypePtrOutput struct{ *pulumi.OutputState }

func (VolumeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeType)(nil)).Elem()
}

func (o VolumeTypePtrOutput) ToVolumeTypePtrOutput() VolumeTypePtrOutput {
	return o
}

func (o VolumeTypePtrOutput) ToVolumeTypePtrOutputWithContext(ctx context.Context) VolumeTypePtrOutput {
	return o
}

func (o VolumeTypePtrOutput) Elem() VolumeTypeOutput {
	return o.ApplyT(func(v *VolumeType) VolumeType {
		if v != nil {
			return *v
		}
		var ret VolumeType
		return ret
	}).(VolumeTypeOutput)
}

func (o VolumeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VolumeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VolumeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VolumeTypeInput is an input type that accepts VolumeTypeArgs and VolumeTypeOutput values.
// You can construct a concrete instance of `VolumeTypeInput` via:
//
//	VolumeTypeArgs{...}
type VolumeTypeInput interface {
	pulumi.Input

	ToVolumeTypeOutput() VolumeTypeOutput
	ToVolumeTypeOutputWithContext(context.Context) VolumeTypeOutput
}

var volumeTypePtrType = reflect.TypeOf((**VolumeType)(nil)).Elem()

type VolumeTypePtrInput interface {
	pulumi.Input

	ToVolumeTypePtrOutput() VolumeTypePtrOutput
	ToVolumeTypePtrOutputWithContext(context.Context) VolumeTypePtrOutput
}

type volumeTypePtr string

func VolumeTypePtr(v string) VolumeTypePtrInput {
	return (*volumeTypePtr)(&v)
}

func (*volumeTypePtr) ElementType() reflect.Type {
	return volumeTypePtrType
}

func (in *volumeTypePtr) ToVolumeTypePtrOutput() VolumeTypePtrOutput {
	return pulumi.ToOutput(in).(VolumeTypePtrOutput)
}

func (in *volumeTypePtr) ToVolumeTypePtrOutputWithContext(ctx context.Context) VolumeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VolumeTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BackupTypeOutput{})
	pulumi.RegisterOutputType(BackupTypePtrOutput{})
	pulumi.RegisterOutputType(DayOfWeekOutput{})
	pulumi.RegisterOutputType(DayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(DayOfWeekArrayOutput{})
	pulumi.RegisterOutputType(EncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(EncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(KindOutput{})
	pulumi.RegisterOutputType(KindPtrOutput{})
	pulumi.RegisterOutputType(ManagerSkuTypeOutput{})
	pulumi.RegisterOutputType(ManagerSkuTypePtrOutput{})
	pulumi.RegisterOutputType(ManagerTypeOutput{})
	pulumi.RegisterOutputType(ManagerTypePtrOutput{})
	pulumi.RegisterOutputType(MonitoringStatusOutput{})
	pulumi.RegisterOutputType(MonitoringStatusPtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTypeOutput{})
	pulumi.RegisterOutputType(RecurrenceTypePtrOutput{})
	pulumi.RegisterOutputType(ScheduleStatusOutput{})
	pulumi.RegisterOutputType(ScheduleStatusPtrOutput{})
	pulumi.RegisterOutputType(SslStatusOutput{})
	pulumi.RegisterOutputType(SslStatusPtrOutput{})
	pulumi.RegisterOutputType(VolumeStatusOutput{})
	pulumi.RegisterOutputType(VolumeStatusPtrOutput{})
	pulumi.RegisterOutputType(VolumeTypeOutput{})
	pulumi.RegisterOutputType(VolumeTypePtrOutput{})
}
