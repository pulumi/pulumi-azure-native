// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storsimple

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecret struct {
	// The algorithm used to encrypt "Value".
	EncryptionAlgorithm EncryptionAlgorithm `pulumi:"encryptionAlgorithm"`
	// Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null.
	EncryptionCertThumbprint *string `pulumi:"encryptionCertThumbprint"`
	// The value of the secret.
	Value string `pulumi:"value"`
}

// AsymmetricEncryptedSecretInput is an input type that accepts AsymmetricEncryptedSecretArgs and AsymmetricEncryptedSecretOutput values.
// You can construct a concrete instance of `AsymmetricEncryptedSecretInput` via:
//
//          AsymmetricEncryptedSecretArgs{...}
type AsymmetricEncryptedSecretInput interface {
	pulumi.Input

	ToAsymmetricEncryptedSecretOutput() AsymmetricEncryptedSecretOutput
	ToAsymmetricEncryptedSecretOutputWithContext(context.Context) AsymmetricEncryptedSecretOutput
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretArgs struct {
	// The algorithm used to encrypt "Value".
	EncryptionAlgorithm EncryptionAlgorithmInput `pulumi:"encryptionAlgorithm"`
	// Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null.
	EncryptionCertThumbprint pulumi.StringPtrInput `pulumi:"encryptionCertThumbprint"`
	// The value of the secret.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AsymmetricEncryptedSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AsymmetricEncryptedSecret)(nil)).Elem()
}

func (i AsymmetricEncryptedSecretArgs) ToAsymmetricEncryptedSecretOutput() AsymmetricEncryptedSecretOutput {
	return i.ToAsymmetricEncryptedSecretOutputWithContext(context.Background())
}

func (i AsymmetricEncryptedSecretArgs) ToAsymmetricEncryptedSecretOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsymmetricEncryptedSecretOutput)
}

func (i AsymmetricEncryptedSecretArgs) ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput {
	return i.ToAsymmetricEncryptedSecretPtrOutputWithContext(context.Background())
}

func (i AsymmetricEncryptedSecretArgs) ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsymmetricEncryptedSecretOutput).ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx)
}

// AsymmetricEncryptedSecretPtrInput is an input type that accepts AsymmetricEncryptedSecretArgs, AsymmetricEncryptedSecretPtr and AsymmetricEncryptedSecretPtrOutput values.
// You can construct a concrete instance of `AsymmetricEncryptedSecretPtrInput` via:
//
//          AsymmetricEncryptedSecretArgs{...}
//
//  or:
//
//          nil
type AsymmetricEncryptedSecretPtrInput interface {
	pulumi.Input

	ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput
	ToAsymmetricEncryptedSecretPtrOutputWithContext(context.Context) AsymmetricEncryptedSecretPtrOutput
}

type asymmetricEncryptedSecretPtrType AsymmetricEncryptedSecretArgs

func AsymmetricEncryptedSecretPtr(v *AsymmetricEncryptedSecretArgs) AsymmetricEncryptedSecretPtrInput {
	return (*asymmetricEncryptedSecretPtrType)(v)
}

func (*asymmetricEncryptedSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AsymmetricEncryptedSecret)(nil)).Elem()
}

func (i *asymmetricEncryptedSecretPtrType) ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput {
	return i.ToAsymmetricEncryptedSecretPtrOutputWithContext(context.Background())
}

func (i *asymmetricEncryptedSecretPtrType) ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsymmetricEncryptedSecretPtrOutput)
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AsymmetricEncryptedSecret)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretOutput) ToAsymmetricEncryptedSecretOutput() AsymmetricEncryptedSecretOutput {
	return o
}

func (o AsymmetricEncryptedSecretOutput) ToAsymmetricEncryptedSecretOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretOutput {
	return o
}

func (o AsymmetricEncryptedSecretOutput) ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput {
	return o.ToAsymmetricEncryptedSecretPtrOutputWithContext(context.Background())
}

func (o AsymmetricEncryptedSecretOutput) ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AsymmetricEncryptedSecret) *AsymmetricEncryptedSecret {
		return &v
	}).(AsymmetricEncryptedSecretPtrOutput)
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretOutput) EncryptionAlgorithm() EncryptionAlgorithmOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecret) EncryptionAlgorithm { return v.EncryptionAlgorithm }).(EncryptionAlgorithmOutput)
}

// Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null.
func (o AsymmetricEncryptedSecretOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecret) *string { return v.EncryptionCertThumbprint }).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecret) string { return v.Value }).(pulumi.StringOutput)
}

type AsymmetricEncryptedSecretPtrOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AsymmetricEncryptedSecret)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretPtrOutput) ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretPtrOutput) ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretPtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretPtrOutput) Elem() AsymmetricEncryptedSecretOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecret) AsymmetricEncryptedSecret {
		if v != nil {
			return *v
		}
		var ret AsymmetricEncryptedSecret
		return ret
	}).(AsymmetricEncryptedSecretOutput)
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretPtrOutput) EncryptionAlgorithm() EncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecret) *EncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return &v.EncryptionAlgorithm
	}).(EncryptionAlgorithmPtrOutput)
}

// Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null.
func (o AsymmetricEncryptedSecretPtrOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecret) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionCertThumbprint
	}).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecret) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretResponse struct {
	// The algorithm used to encrypt "Value".
	EncryptionAlgorithm string `pulumi:"encryptionAlgorithm"`
	// Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null.
	EncryptionCertThumbprint *string `pulumi:"encryptionCertThumbprint"`
	// The value of the secret.
	Value string `pulumi:"value"`
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretResponseOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AsymmetricEncryptedSecretResponse)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretResponseOutput) ToAsymmetricEncryptedSecretResponseOutput() AsymmetricEncryptedSecretResponseOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponseOutput) ToAsymmetricEncryptedSecretResponseOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretResponseOutput {
	return o
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretResponseOutput) EncryptionAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) string { return v.EncryptionAlgorithm }).(pulumi.StringOutput)
}

// Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null.
func (o AsymmetricEncryptedSecretResponseOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) *string { return v.EncryptionCertThumbprint }).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) string { return v.Value }).(pulumi.StringOutput)
}

type AsymmetricEncryptedSecretResponsePtrOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AsymmetricEncryptedSecretResponse)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) ToAsymmetricEncryptedSecretResponsePtrOutput() AsymmetricEncryptedSecretResponsePtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) ToAsymmetricEncryptedSecretResponsePtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretResponsePtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) Elem() AsymmetricEncryptedSecretResponseOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) AsymmetricEncryptedSecretResponse {
		if v != nil {
			return *v
		}
		var ret AsymmetricEncryptedSecretResponse
		return ret
	}).(AsymmetricEncryptedSecretResponseOutput)
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretResponsePtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null.
func (o AsymmetricEncryptedSecretResponsePtrOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionCertThumbprint
	}).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// The schedule for bandwidth setting.
type BandwidthSchedule struct {
	// The days of the week when this schedule is applicable.
	Days []DayOfWeek `pulumi:"days"`
	// The rate in Mbps.
	RateInMbps int `pulumi:"rateInMbps"`
	// The start time of the schedule.
	Start Time `pulumi:"start"`
	// The stop time of the schedule.
	Stop Time `pulumi:"stop"`
}

// BandwidthScheduleInput is an input type that accepts BandwidthScheduleArgs and BandwidthScheduleOutput values.
// You can construct a concrete instance of `BandwidthScheduleInput` via:
//
//          BandwidthScheduleArgs{...}
type BandwidthScheduleInput interface {
	pulumi.Input

	ToBandwidthScheduleOutput() BandwidthScheduleOutput
	ToBandwidthScheduleOutputWithContext(context.Context) BandwidthScheduleOutput
}

// The schedule for bandwidth setting.
type BandwidthScheduleArgs struct {
	// The days of the week when this schedule is applicable.
	Days DayOfWeekArrayInput `pulumi:"days"`
	// The rate in Mbps.
	RateInMbps pulumi.IntInput `pulumi:"rateInMbps"`
	// The start time of the schedule.
	Start TimeInput `pulumi:"start"`
	// The stop time of the schedule.
	Stop TimeInput `pulumi:"stop"`
}

func (BandwidthScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthSchedule)(nil)).Elem()
}

func (i BandwidthScheduleArgs) ToBandwidthScheduleOutput() BandwidthScheduleOutput {
	return i.ToBandwidthScheduleOutputWithContext(context.Background())
}

func (i BandwidthScheduleArgs) ToBandwidthScheduleOutputWithContext(ctx context.Context) BandwidthScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthScheduleOutput)
}

// BandwidthScheduleArrayInput is an input type that accepts BandwidthScheduleArray and BandwidthScheduleArrayOutput values.
// You can construct a concrete instance of `BandwidthScheduleArrayInput` via:
//
//          BandwidthScheduleArray{ BandwidthScheduleArgs{...} }
type BandwidthScheduleArrayInput interface {
	pulumi.Input

	ToBandwidthScheduleArrayOutput() BandwidthScheduleArrayOutput
	ToBandwidthScheduleArrayOutputWithContext(context.Context) BandwidthScheduleArrayOutput
}

type BandwidthScheduleArray []BandwidthScheduleInput

func (BandwidthScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthSchedule)(nil)).Elem()
}

func (i BandwidthScheduleArray) ToBandwidthScheduleArrayOutput() BandwidthScheduleArrayOutput {
	return i.ToBandwidthScheduleArrayOutputWithContext(context.Background())
}

func (i BandwidthScheduleArray) ToBandwidthScheduleArrayOutputWithContext(ctx context.Context) BandwidthScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthScheduleArrayOutput)
}

// The schedule for bandwidth setting.
type BandwidthScheduleOutput struct{ *pulumi.OutputState }

func (BandwidthScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthSchedule)(nil)).Elem()
}

func (o BandwidthScheduleOutput) ToBandwidthScheduleOutput() BandwidthScheduleOutput {
	return o
}

func (o BandwidthScheduleOutput) ToBandwidthScheduleOutputWithContext(ctx context.Context) BandwidthScheduleOutput {
	return o
}

// The days of the week when this schedule is applicable.
func (o BandwidthScheduleOutput) Days() DayOfWeekArrayOutput {
	return o.ApplyT(func(v BandwidthSchedule) []DayOfWeek { return v.Days }).(DayOfWeekArrayOutput)
}

// The rate in Mbps.
func (o BandwidthScheduleOutput) RateInMbps() pulumi.IntOutput {
	return o.ApplyT(func(v BandwidthSchedule) int { return v.RateInMbps }).(pulumi.IntOutput)
}

// The start time of the schedule.
func (o BandwidthScheduleOutput) Start() TimeOutput {
	return o.ApplyT(func(v BandwidthSchedule) Time { return v.Start }).(TimeOutput)
}

// The stop time of the schedule.
func (o BandwidthScheduleOutput) Stop() TimeOutput {
	return o.ApplyT(func(v BandwidthSchedule) Time { return v.Stop }).(TimeOutput)
}

type BandwidthScheduleArrayOutput struct{ *pulumi.OutputState }

func (BandwidthScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthSchedule)(nil)).Elem()
}

func (o BandwidthScheduleArrayOutput) ToBandwidthScheduleArrayOutput() BandwidthScheduleArrayOutput {
	return o
}

func (o BandwidthScheduleArrayOutput) ToBandwidthScheduleArrayOutputWithContext(ctx context.Context) BandwidthScheduleArrayOutput {
	return o
}

func (o BandwidthScheduleArrayOutput) Index(i pulumi.IntInput) BandwidthScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BandwidthSchedule {
		return vs[0].([]BandwidthSchedule)[vs[1].(int)]
	}).(BandwidthScheduleOutput)
}

// The schedule for bandwidth setting.
type BandwidthScheduleResponse struct {
	// The days of the week when this schedule is applicable.
	Days []string `pulumi:"days"`
	// The rate in Mbps.
	RateInMbps int `pulumi:"rateInMbps"`
	// The start time of the schedule.
	Start TimeResponse `pulumi:"start"`
	// The stop time of the schedule.
	Stop TimeResponse `pulumi:"stop"`
}

// The schedule for bandwidth setting.
type BandwidthScheduleResponseOutput struct{ *pulumi.OutputState }

func (BandwidthScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthScheduleResponse)(nil)).Elem()
}

func (o BandwidthScheduleResponseOutput) ToBandwidthScheduleResponseOutput() BandwidthScheduleResponseOutput {
	return o
}

func (o BandwidthScheduleResponseOutput) ToBandwidthScheduleResponseOutputWithContext(ctx context.Context) BandwidthScheduleResponseOutput {
	return o
}

// The days of the week when this schedule is applicable.
func (o BandwidthScheduleResponseOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BandwidthScheduleResponse) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// The rate in Mbps.
func (o BandwidthScheduleResponseOutput) RateInMbps() pulumi.IntOutput {
	return o.ApplyT(func(v BandwidthScheduleResponse) int { return v.RateInMbps }).(pulumi.IntOutput)
}

// The start time of the schedule.
func (o BandwidthScheduleResponseOutput) Start() TimeResponseOutput {
	return o.ApplyT(func(v BandwidthScheduleResponse) TimeResponse { return v.Start }).(TimeResponseOutput)
}

// The stop time of the schedule.
func (o BandwidthScheduleResponseOutput) Stop() TimeResponseOutput {
	return o.ApplyT(func(v BandwidthScheduleResponse) TimeResponse { return v.Stop }).(TimeResponseOutput)
}

type BandwidthScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (BandwidthScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthScheduleResponse)(nil)).Elem()
}

func (o BandwidthScheduleResponseArrayOutput) ToBandwidthScheduleResponseArrayOutput() BandwidthScheduleResponseArrayOutput {
	return o
}

func (o BandwidthScheduleResponseArrayOutput) ToBandwidthScheduleResponseArrayOutputWithContext(ctx context.Context) BandwidthScheduleResponseArrayOutput {
	return o
}

func (o BandwidthScheduleResponseArrayOutput) Index(i pulumi.IntInput) BandwidthScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BandwidthScheduleResponse {
		return vs[0].([]BandwidthScheduleResponse)[vs[1].(int)]
	}).(BandwidthScheduleResponseOutput)
}

// The eligibility result of failover set, for failover.
type FailoverSetEligibilityResultResponse struct {
	// The error message, if the failover set is not eligible for failover.
	ErrorMessage *string `pulumi:"errorMessage"`
	// Represents if this failover set is eligible for failover or not.
	IsEligibleForFailover *bool `pulumi:"isEligibleForFailover"`
}

// The failover set on a device.
type FailoverSetResponse struct {
	// The eligibility result of the failover set, for failover.
	EligibilityResult *FailoverSetEligibilityResultResponse `pulumi:"eligibilityResult"`
	// The list of meta data of volume containers, which are part of the failover set.
	VolumeContainers []VolumeContainerFailoverMetadataResponse `pulumi:"volumeContainers"`
}

// Represents the eligibility of a device as a failover target device.
type FailoverTargetResponse struct {
	// The amount of free local storage available on the device in bytes.
	AvailableLocalStorageInBytes *float64 `pulumi:"availableLocalStorageInBytes"`
	// The amount of free tiered storage available for the device in bytes.
	AvailableTieredStorageInBytes *float64 `pulumi:"availableTieredStorageInBytes"`
	// The count of data containers on the device.
	DataContainersCount *int `pulumi:"dataContainersCount"`
	// The path ID of the device.
	DeviceId *string `pulumi:"deviceId"`
	// The geo location (applicable only for cloud appliances) of the device.
	DeviceLocation *string `pulumi:"deviceLocation"`
	// The software version of the device.
	DeviceSoftwareVersion *string `pulumi:"deviceSoftwareVersion"`
	// The status of the device.
	DeviceStatus *string `pulumi:"deviceStatus"`
	// The eligibility result of the device, as a failover target device.
	EligibilityResult *TargetEligibilityResultResponse `pulumi:"eligibilityResult"`
	// The friendly name for the current version of software on the device.
	FriendlyDeviceSoftwareVersion *string `pulumi:"friendlyDeviceSoftwareVersion"`
	// The model number of the device.
	ModelDescription *string `pulumi:"modelDescription"`
	// The count of volumes on the device.
	VolumesCount *int `pulumi:"volumesCount"`
}

// Intrinsic settings which refers to the type of the StorSimple Manager.
type ManagerIntrinsicSettings struct {
	// The type of StorSimple Manager.
	Type ManagerType `pulumi:"type"`
}

// ManagerIntrinsicSettingsInput is an input type that accepts ManagerIntrinsicSettingsArgs and ManagerIntrinsicSettingsOutput values.
// You can construct a concrete instance of `ManagerIntrinsicSettingsInput` via:
//
//          ManagerIntrinsicSettingsArgs{...}
type ManagerIntrinsicSettingsInput interface {
	pulumi.Input

	ToManagerIntrinsicSettingsOutput() ManagerIntrinsicSettingsOutput
	ToManagerIntrinsicSettingsOutputWithContext(context.Context) ManagerIntrinsicSettingsOutput
}

// Intrinsic settings which refers to the type of the StorSimple Manager.
type ManagerIntrinsicSettingsArgs struct {
	// The type of StorSimple Manager.
	Type ManagerTypeInput `pulumi:"type"`
}

func (ManagerIntrinsicSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerIntrinsicSettings)(nil)).Elem()
}

func (i ManagerIntrinsicSettingsArgs) ToManagerIntrinsicSettingsOutput() ManagerIntrinsicSettingsOutput {
	return i.ToManagerIntrinsicSettingsOutputWithContext(context.Background())
}

func (i ManagerIntrinsicSettingsArgs) ToManagerIntrinsicSettingsOutputWithContext(ctx context.Context) ManagerIntrinsicSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerIntrinsicSettingsOutput)
}

func (i ManagerIntrinsicSettingsArgs) ToManagerIntrinsicSettingsPtrOutput() ManagerIntrinsicSettingsPtrOutput {
	return i.ToManagerIntrinsicSettingsPtrOutputWithContext(context.Background())
}

func (i ManagerIntrinsicSettingsArgs) ToManagerIntrinsicSettingsPtrOutputWithContext(ctx context.Context) ManagerIntrinsicSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerIntrinsicSettingsOutput).ToManagerIntrinsicSettingsPtrOutputWithContext(ctx)
}

// ManagerIntrinsicSettingsPtrInput is an input type that accepts ManagerIntrinsicSettingsArgs, ManagerIntrinsicSettingsPtr and ManagerIntrinsicSettingsPtrOutput values.
// You can construct a concrete instance of `ManagerIntrinsicSettingsPtrInput` via:
//
//          ManagerIntrinsicSettingsArgs{...}
//
//  or:
//
//          nil
type ManagerIntrinsicSettingsPtrInput interface {
	pulumi.Input

	ToManagerIntrinsicSettingsPtrOutput() ManagerIntrinsicSettingsPtrOutput
	ToManagerIntrinsicSettingsPtrOutputWithContext(context.Context) ManagerIntrinsicSettingsPtrOutput
}

type managerIntrinsicSettingsPtrType ManagerIntrinsicSettingsArgs

func ManagerIntrinsicSettingsPtr(v *ManagerIntrinsicSettingsArgs) ManagerIntrinsicSettingsPtrInput {
	return (*managerIntrinsicSettingsPtrType)(v)
}

func (*managerIntrinsicSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagerIntrinsicSettings)(nil)).Elem()
}

func (i *managerIntrinsicSettingsPtrType) ToManagerIntrinsicSettingsPtrOutput() ManagerIntrinsicSettingsPtrOutput {
	return i.ToManagerIntrinsicSettingsPtrOutputWithContext(context.Background())
}

func (i *managerIntrinsicSettingsPtrType) ToManagerIntrinsicSettingsPtrOutputWithContext(ctx context.Context) ManagerIntrinsicSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerIntrinsicSettingsPtrOutput)
}

// Intrinsic settings which refers to the type of the StorSimple Manager.
type ManagerIntrinsicSettingsOutput struct{ *pulumi.OutputState }

func (ManagerIntrinsicSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerIntrinsicSettings)(nil)).Elem()
}

func (o ManagerIntrinsicSettingsOutput) ToManagerIntrinsicSettingsOutput() ManagerIntrinsicSettingsOutput {
	return o
}

func (o ManagerIntrinsicSettingsOutput) ToManagerIntrinsicSettingsOutputWithContext(ctx context.Context) ManagerIntrinsicSettingsOutput {
	return o
}

func (o ManagerIntrinsicSettingsOutput) ToManagerIntrinsicSettingsPtrOutput() ManagerIntrinsicSettingsPtrOutput {
	return o.ToManagerIntrinsicSettingsPtrOutputWithContext(context.Background())
}

func (o ManagerIntrinsicSettingsOutput) ToManagerIntrinsicSettingsPtrOutputWithContext(ctx context.Context) ManagerIntrinsicSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagerIntrinsicSettings) *ManagerIntrinsicSettings {
		return &v
	}).(ManagerIntrinsicSettingsPtrOutput)
}

// The type of StorSimple Manager.
func (o ManagerIntrinsicSettingsOutput) Type() ManagerTypeOutput {
	return o.ApplyT(func(v ManagerIntrinsicSettings) ManagerType { return v.Type }).(ManagerTypeOutput)
}

type ManagerIntrinsicSettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagerIntrinsicSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagerIntrinsicSettings)(nil)).Elem()
}

func (o ManagerIntrinsicSettingsPtrOutput) ToManagerIntrinsicSettingsPtrOutput() ManagerIntrinsicSettingsPtrOutput {
	return o
}

func (o ManagerIntrinsicSettingsPtrOutput) ToManagerIntrinsicSettingsPtrOutputWithContext(ctx context.Context) ManagerIntrinsicSettingsPtrOutput {
	return o
}

func (o ManagerIntrinsicSettingsPtrOutput) Elem() ManagerIntrinsicSettingsOutput {
	return o.ApplyT(func(v *ManagerIntrinsicSettings) ManagerIntrinsicSettings {
		if v != nil {
			return *v
		}
		var ret ManagerIntrinsicSettings
		return ret
	}).(ManagerIntrinsicSettingsOutput)
}

// The type of StorSimple Manager.
func (o ManagerIntrinsicSettingsPtrOutput) Type() ManagerTypePtrOutput {
	return o.ApplyT(func(v *ManagerIntrinsicSettings) *ManagerType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(ManagerTypePtrOutput)
}

// Intrinsic settings which refers to the type of the StorSimple Manager.
type ManagerIntrinsicSettingsResponse struct {
	// The type of StorSimple Manager.
	Type string `pulumi:"type"`
}

// Intrinsic settings which refers to the type of the StorSimple Manager.
type ManagerIntrinsicSettingsResponseOutput struct{ *pulumi.OutputState }

func (ManagerIntrinsicSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerIntrinsicSettingsResponse)(nil)).Elem()
}

func (o ManagerIntrinsicSettingsResponseOutput) ToManagerIntrinsicSettingsResponseOutput() ManagerIntrinsicSettingsResponseOutput {
	return o
}

func (o ManagerIntrinsicSettingsResponseOutput) ToManagerIntrinsicSettingsResponseOutputWithContext(ctx context.Context) ManagerIntrinsicSettingsResponseOutput {
	return o
}

// The type of StorSimple Manager.
func (o ManagerIntrinsicSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagerIntrinsicSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ManagerIntrinsicSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagerIntrinsicSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagerIntrinsicSettingsResponse)(nil)).Elem()
}

func (o ManagerIntrinsicSettingsResponsePtrOutput) ToManagerIntrinsicSettingsResponsePtrOutput() ManagerIntrinsicSettingsResponsePtrOutput {
	return o
}

func (o ManagerIntrinsicSettingsResponsePtrOutput) ToManagerIntrinsicSettingsResponsePtrOutputWithContext(ctx context.Context) ManagerIntrinsicSettingsResponsePtrOutput {
	return o
}

func (o ManagerIntrinsicSettingsResponsePtrOutput) Elem() ManagerIntrinsicSettingsResponseOutput {
	return o.ApplyT(func(v *ManagerIntrinsicSettingsResponse) ManagerIntrinsicSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ManagerIntrinsicSettingsResponse
		return ret
	}).(ManagerIntrinsicSettingsResponseOutput)
}

// The type of StorSimple Manager.
func (o ManagerIntrinsicSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagerIntrinsicSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Sku.
type ManagerSku struct {
	// Refers to the sku name which should be "Standard"
	Name ManagerSkuType `pulumi:"name"`
}

// ManagerSkuInput is an input type that accepts ManagerSkuArgs and ManagerSkuOutput values.
// You can construct a concrete instance of `ManagerSkuInput` via:
//
//          ManagerSkuArgs{...}
type ManagerSkuInput interface {
	pulumi.Input

	ToManagerSkuOutput() ManagerSkuOutput
	ToManagerSkuOutputWithContext(context.Context) ManagerSkuOutput
}

// The Sku.
type ManagerSkuArgs struct {
	// Refers to the sku name which should be "Standard"
	Name ManagerSkuTypeInput `pulumi:"name"`
}

func (ManagerSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerSku)(nil)).Elem()
}

func (i ManagerSkuArgs) ToManagerSkuOutput() ManagerSkuOutput {
	return i.ToManagerSkuOutputWithContext(context.Background())
}

func (i ManagerSkuArgs) ToManagerSkuOutputWithContext(ctx context.Context) ManagerSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerSkuOutput)
}

func (i ManagerSkuArgs) ToManagerSkuPtrOutput() ManagerSkuPtrOutput {
	return i.ToManagerSkuPtrOutputWithContext(context.Background())
}

func (i ManagerSkuArgs) ToManagerSkuPtrOutputWithContext(ctx context.Context) ManagerSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerSkuOutput).ToManagerSkuPtrOutputWithContext(ctx)
}

// ManagerSkuPtrInput is an input type that accepts ManagerSkuArgs, ManagerSkuPtr and ManagerSkuPtrOutput values.
// You can construct a concrete instance of `ManagerSkuPtrInput` via:
//
//          ManagerSkuArgs{...}
//
//  or:
//
//          nil
type ManagerSkuPtrInput interface {
	pulumi.Input

	ToManagerSkuPtrOutput() ManagerSkuPtrOutput
	ToManagerSkuPtrOutputWithContext(context.Context) ManagerSkuPtrOutput
}

type managerSkuPtrType ManagerSkuArgs

func ManagerSkuPtr(v *ManagerSkuArgs) ManagerSkuPtrInput {
	return (*managerSkuPtrType)(v)
}

func (*managerSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagerSku)(nil)).Elem()
}

func (i *managerSkuPtrType) ToManagerSkuPtrOutput() ManagerSkuPtrOutput {
	return i.ToManagerSkuPtrOutputWithContext(context.Background())
}

func (i *managerSkuPtrType) ToManagerSkuPtrOutputWithContext(ctx context.Context) ManagerSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerSkuPtrOutput)
}

// The Sku.
type ManagerSkuOutput struct{ *pulumi.OutputState }

func (ManagerSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerSku)(nil)).Elem()
}

func (o ManagerSkuOutput) ToManagerSkuOutput() ManagerSkuOutput {
	return o
}

func (o ManagerSkuOutput) ToManagerSkuOutputWithContext(ctx context.Context) ManagerSkuOutput {
	return o
}

func (o ManagerSkuOutput) ToManagerSkuPtrOutput() ManagerSkuPtrOutput {
	return o.ToManagerSkuPtrOutputWithContext(context.Background())
}

func (o ManagerSkuOutput) ToManagerSkuPtrOutputWithContext(ctx context.Context) ManagerSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagerSku) *ManagerSku {
		return &v
	}).(ManagerSkuPtrOutput)
}

// Refers to the sku name which should be "Standard"
func (o ManagerSkuOutput) Name() ManagerSkuTypeOutput {
	return o.ApplyT(func(v ManagerSku) ManagerSkuType { return v.Name }).(ManagerSkuTypeOutput)
}

type ManagerSkuPtrOutput struct{ *pulumi.OutputState }

func (ManagerSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagerSku)(nil)).Elem()
}

func (o ManagerSkuPtrOutput) ToManagerSkuPtrOutput() ManagerSkuPtrOutput {
	return o
}

func (o ManagerSkuPtrOutput) ToManagerSkuPtrOutputWithContext(ctx context.Context) ManagerSkuPtrOutput {
	return o
}

func (o ManagerSkuPtrOutput) Elem() ManagerSkuOutput {
	return o.ApplyT(func(v *ManagerSku) ManagerSku {
		if v != nil {
			return *v
		}
		var ret ManagerSku
		return ret
	}).(ManagerSkuOutput)
}

// Refers to the sku name which should be "Standard"
func (o ManagerSkuPtrOutput) Name() ManagerSkuTypePtrOutput {
	return o.ApplyT(func(v *ManagerSku) *ManagerSkuType {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(ManagerSkuTypePtrOutput)
}

// The Sku.
type ManagerSkuResponse struct {
	// Refers to the sku name which should be "Standard"
	Name string `pulumi:"name"`
}

// The Sku.
type ManagerSkuResponseOutput struct{ *pulumi.OutputState }

func (ManagerSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagerSkuResponse)(nil)).Elem()
}

func (o ManagerSkuResponseOutput) ToManagerSkuResponseOutput() ManagerSkuResponseOutput {
	return o
}

func (o ManagerSkuResponseOutput) ToManagerSkuResponseOutputWithContext(ctx context.Context) ManagerSkuResponseOutput {
	return o
}

// Refers to the sku name which should be "Standard"
func (o ManagerSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagerSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ManagerSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagerSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagerSkuResponse)(nil)).Elem()
}

func (o ManagerSkuResponsePtrOutput) ToManagerSkuResponsePtrOutput() ManagerSkuResponsePtrOutput {
	return o
}

func (o ManagerSkuResponsePtrOutput) ToManagerSkuResponsePtrOutputWithContext(ctx context.Context) ManagerSkuResponsePtrOutput {
	return o
}

func (o ManagerSkuResponsePtrOutput) Elem() ManagerSkuResponseOutput {
	return o.ApplyT(func(v *ManagerSkuResponse) ManagerSkuResponse {
		if v != nil {
			return *v
		}
		var ret ManagerSkuResponse
		return ret
	}).(ManagerSkuResponseOutput)
}

// Refers to the sku name which should be "Standard"
func (o ManagerSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagerSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The schedule recurrence.
type ScheduleRecurrence struct {
	// The recurrence type.
	RecurrenceType RecurrenceType `pulumi:"recurrenceType"`
	// The recurrence value.
	RecurrenceValue int `pulumi:"recurrenceValue"`
	// The week days list. Applicable only for schedules of recurrence type 'weekly'.
	WeeklyDaysList []DayOfWeek `pulumi:"weeklyDaysList"`
}

// ScheduleRecurrenceInput is an input type that accepts ScheduleRecurrenceArgs and ScheduleRecurrenceOutput values.
// You can construct a concrete instance of `ScheduleRecurrenceInput` via:
//
//          ScheduleRecurrenceArgs{...}
type ScheduleRecurrenceInput interface {
	pulumi.Input

	ToScheduleRecurrenceOutput() ScheduleRecurrenceOutput
	ToScheduleRecurrenceOutputWithContext(context.Context) ScheduleRecurrenceOutput
}

// The schedule recurrence.
type ScheduleRecurrenceArgs struct {
	// The recurrence type.
	RecurrenceType RecurrenceTypeInput `pulumi:"recurrenceType"`
	// The recurrence value.
	RecurrenceValue pulumi.IntInput `pulumi:"recurrenceValue"`
	// The week days list. Applicable only for schedules of recurrence type 'weekly'.
	WeeklyDaysList DayOfWeekArrayInput `pulumi:"weeklyDaysList"`
}

func (ScheduleRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRecurrence)(nil)).Elem()
}

func (i ScheduleRecurrenceArgs) ToScheduleRecurrenceOutput() ScheduleRecurrenceOutput {
	return i.ToScheduleRecurrenceOutputWithContext(context.Background())
}

func (i ScheduleRecurrenceArgs) ToScheduleRecurrenceOutputWithContext(ctx context.Context) ScheduleRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRecurrenceOutput)
}

// The schedule recurrence.
type ScheduleRecurrenceOutput struct{ *pulumi.OutputState }

func (ScheduleRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRecurrence)(nil)).Elem()
}

func (o ScheduleRecurrenceOutput) ToScheduleRecurrenceOutput() ScheduleRecurrenceOutput {
	return o
}

func (o ScheduleRecurrenceOutput) ToScheduleRecurrenceOutputWithContext(ctx context.Context) ScheduleRecurrenceOutput {
	return o
}

// The recurrence type.
func (o ScheduleRecurrenceOutput) RecurrenceType() RecurrenceTypeOutput {
	return o.ApplyT(func(v ScheduleRecurrence) RecurrenceType { return v.RecurrenceType }).(RecurrenceTypeOutput)
}

// The recurrence value.
func (o ScheduleRecurrenceOutput) RecurrenceValue() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRecurrence) int { return v.RecurrenceValue }).(pulumi.IntOutput)
}

// The week days list. Applicable only for schedules of recurrence type 'weekly'.
func (o ScheduleRecurrenceOutput) WeeklyDaysList() DayOfWeekArrayOutput {
	return o.ApplyT(func(v ScheduleRecurrence) []DayOfWeek { return v.WeeklyDaysList }).(DayOfWeekArrayOutput)
}

// The schedule recurrence.
type ScheduleRecurrenceResponse struct {
	// The recurrence type.
	RecurrenceType string `pulumi:"recurrenceType"`
	// The recurrence value.
	RecurrenceValue int `pulumi:"recurrenceValue"`
	// The week days list. Applicable only for schedules of recurrence type 'weekly'.
	WeeklyDaysList []string `pulumi:"weeklyDaysList"`
}

// The schedule recurrence.
type ScheduleRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (ScheduleRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRecurrenceResponse)(nil)).Elem()
}

func (o ScheduleRecurrenceResponseOutput) ToScheduleRecurrenceResponseOutput() ScheduleRecurrenceResponseOutput {
	return o
}

func (o ScheduleRecurrenceResponseOutput) ToScheduleRecurrenceResponseOutputWithContext(ctx context.Context) ScheduleRecurrenceResponseOutput {
	return o
}

// The recurrence type.
func (o ScheduleRecurrenceResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleRecurrenceResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// The recurrence value.
func (o ScheduleRecurrenceResponseOutput) RecurrenceValue() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRecurrenceResponse) int { return v.RecurrenceValue }).(pulumi.IntOutput)
}

// The week days list. Applicable only for schedules of recurrence type 'weekly'.
func (o ScheduleRecurrenceResponseOutput) WeeklyDaysList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleRecurrenceResponse) []string { return v.WeeklyDaysList }).(pulumi.StringArrayOutput)
}

// The error/warning message due to which the device is ineligible as a failover target device.
type TargetEligibilityErrorMessageResponse struct {
	// The localized error message stating the reason why the device is not eligible as a target device.
	Message *string `pulumi:"message"`
	// The localized resolution message for the error.
	Resolution *string `pulumi:"resolution"`
	// The result code for the error, due to which the device does not qualify as a failover target device.
	ResultCode *string `pulumi:"resultCode"`
}

// The eligibility result of device, as a failover target device.
type TargetEligibilityResultResponse struct {
	// The eligibility status of device, as a failover target device.
	EligibilityStatus *string `pulumi:"eligibilityStatus"`
	// The list of error messages, if a device does not qualify as a failover target device.
	Messages []TargetEligibilityErrorMessageResponse `pulumi:"messages"`
}

// The time.
type Time struct {
	// The hour.
	Hours int `pulumi:"hours"`
	// The minute.
	Minutes int `pulumi:"minutes"`
	// The second.
	Seconds int `pulumi:"seconds"`
}

// TimeInput is an input type that accepts TimeArgs and TimeOutput values.
// You can construct a concrete instance of `TimeInput` via:
//
//          TimeArgs{...}
type TimeInput interface {
	pulumi.Input

	ToTimeOutput() TimeOutput
	ToTimeOutputWithContext(context.Context) TimeOutput
}

// The time.
type TimeArgs struct {
	// The hour.
	Hours pulumi.IntInput `pulumi:"hours"`
	// The minute.
	Minutes pulumi.IntInput `pulumi:"minutes"`
	// The second.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (TimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Time)(nil)).Elem()
}

func (i TimeArgs) ToTimeOutput() TimeOutput {
	return i.ToTimeOutputWithContext(context.Background())
}

func (i TimeArgs) ToTimeOutputWithContext(ctx context.Context) TimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOutput)
}

// The time.
type TimeOutput struct{ *pulumi.OutputState }

func (TimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Time)(nil)).Elem()
}

func (o TimeOutput) ToTimeOutput() TimeOutput {
	return o
}

func (o TimeOutput) ToTimeOutputWithContext(ctx context.Context) TimeOutput {
	return o
}

// The hour.
func (o TimeOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v Time) int { return v.Hours }).(pulumi.IntOutput)
}

// The minute.
func (o TimeOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v Time) int { return v.Minutes }).(pulumi.IntOutput)
}

// The second.
func (o TimeOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v Time) int { return v.Seconds }).(pulumi.IntOutput)
}

// The time.
type TimeResponse struct {
	// The hour.
	Hours int `pulumi:"hours"`
	// The minute.
	Minutes int `pulumi:"minutes"`
	// The second.
	Seconds int `pulumi:"seconds"`
}

// The time.
type TimeResponseOutput struct{ *pulumi.OutputState }

func (TimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeResponse)(nil)).Elem()
}

func (o TimeResponseOutput) ToTimeResponseOutput() TimeResponseOutput {
	return o
}

func (o TimeResponseOutput) ToTimeResponseOutputWithContext(ctx context.Context) TimeResponseOutput {
	return o
}

// The hour.
func (o TimeResponseOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v TimeResponse) int { return v.Hours }).(pulumi.IntOutput)
}

// The minute.
func (o TimeResponseOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v TimeResponse) int { return v.Minutes }).(pulumi.IntOutput)
}

// The second.
func (o TimeResponseOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v TimeResponse) int { return v.Seconds }).(pulumi.IntOutput)
}

// The metadata of the volume container, that is being considered as part of a failover set.
type VolumeContainerFailoverMetadataResponse struct {
	// The path ID of the volume container.
	VolumeContainerId *string `pulumi:"volumeContainerId"`
	// The list of metadata of volumes inside the volume container, which contains valid cloud snapshots.
	Volumes []VolumeFailoverMetadataResponse `pulumi:"volumes"`
}

// The metadata of a volume that has valid cloud snapshot.
type VolumeFailoverMetadataResponse struct {
	// The date at which the snapshot was taken.
	BackupCreatedDate *string `pulumi:"backupCreatedDate"`
	// The path ID of the backup-element for this volume, inside the backup set.
	BackupElementId *string `pulumi:"backupElementId"`
	// The path ID of the backup set.
	BackupId *string `pulumi:"backupId"`
	// The path ID of the backup policy using which the snapshot was taken.
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// The size of the volume in bytes at the time the snapshot was taken.
	SizeInBytes *float64 `pulumi:"sizeInBytes"`
	// The path ID of the volume.
	VolumeId *string `pulumi:"volumeId"`
	// The type of the volume.
	VolumeType *string `pulumi:"volumeType"`
}

func init() {
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretPtrOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretResponseOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretResponsePtrOutput{})
	pulumi.RegisterOutputType(BandwidthScheduleOutput{})
	pulumi.RegisterOutputType(BandwidthScheduleArrayOutput{})
	pulumi.RegisterOutputType(BandwidthScheduleResponseOutput{})
	pulumi.RegisterOutputType(BandwidthScheduleResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagerIntrinsicSettingsOutput{})
	pulumi.RegisterOutputType(ManagerIntrinsicSettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagerIntrinsicSettingsResponseOutput{})
	pulumi.RegisterOutputType(ManagerIntrinsicSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagerSkuOutput{})
	pulumi.RegisterOutputType(ManagerSkuPtrOutput{})
	pulumi.RegisterOutputType(ManagerSkuResponseOutput{})
	pulumi.RegisterOutputType(ManagerSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleRecurrenceOutput{})
	pulumi.RegisterOutputType(ScheduleRecurrenceResponseOutput{})
	pulumi.RegisterOutputType(TimeOutput{})
	pulumi.RegisterOutputType(TimeResponseOutput{})
}
