// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200713preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Authorization info used to access a resource (like code repository).
type Authorization struct {
	// Type of authorization.
	AuthorizationType string `pulumi:"authorizationType"`
	// Authorization parameters corresponding to the authorization type.
	Parameters map[string]string `pulumi:"parameters"`
}

// AuthorizationInput is an input type that accepts AuthorizationArgs and AuthorizationOutput values.
// You can construct a concrete instance of `AuthorizationInput` via:
//
//	AuthorizationArgs{...}
type AuthorizationInput interface {
	pulumi.Input

	ToAuthorizationOutput() AuthorizationOutput
	ToAuthorizationOutputWithContext(context.Context) AuthorizationOutput
}

// Authorization info used to access a resource (like code repository).
type AuthorizationArgs struct {
	// Type of authorization.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// Authorization parameters corresponding to the authorization type.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (AuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Authorization)(nil)).Elem()
}

func (i AuthorizationArgs) ToAuthorizationOutput() AuthorizationOutput {
	return i.ToAuthorizationOutputWithContext(context.Background())
}

func (i AuthorizationArgs) ToAuthorizationOutputWithContext(ctx context.Context) AuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationOutput)
}

func (i AuthorizationArgs) ToAuthorizationPtrOutput() AuthorizationPtrOutput {
	return i.ToAuthorizationPtrOutputWithContext(context.Background())
}

func (i AuthorizationArgs) ToAuthorizationPtrOutputWithContext(ctx context.Context) AuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationOutput).ToAuthorizationPtrOutputWithContext(ctx)
}

// AuthorizationPtrInput is an input type that accepts AuthorizationArgs, AuthorizationPtr and AuthorizationPtrOutput values.
// You can construct a concrete instance of `AuthorizationPtrInput` via:
//
//	        AuthorizationArgs{...}
//
//	or:
//
//	        nil
type AuthorizationPtrInput interface {
	pulumi.Input

	ToAuthorizationPtrOutput() AuthorizationPtrOutput
	ToAuthorizationPtrOutputWithContext(context.Context) AuthorizationPtrOutput
}

type authorizationPtrType AuthorizationArgs

func AuthorizationPtr(v *AuthorizationArgs) AuthorizationPtrInput {
	return (*authorizationPtrType)(v)
}

func (*authorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorization)(nil)).Elem()
}

func (i *authorizationPtrType) ToAuthorizationPtrOutput() AuthorizationPtrOutput {
	return i.ToAuthorizationPtrOutputWithContext(context.Background())
}

func (i *authorizationPtrType) ToAuthorizationPtrOutputWithContext(ctx context.Context) AuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPtrOutput)
}

// Authorization info used to access a resource (like code repository).
type AuthorizationOutput struct{ *pulumi.OutputState }

func (AuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authorization)(nil)).Elem()
}

func (o AuthorizationOutput) ToAuthorizationOutput() AuthorizationOutput {
	return o
}

func (o AuthorizationOutput) ToAuthorizationOutputWithContext(ctx context.Context) AuthorizationOutput {
	return o
}

func (o AuthorizationOutput) ToAuthorizationPtrOutput() AuthorizationPtrOutput {
	return o.ToAuthorizationPtrOutputWithContext(context.Background())
}

func (o AuthorizationOutput) ToAuthorizationPtrOutputWithContext(ctx context.Context) AuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Authorization) *Authorization {
		return &v
	}).(AuthorizationPtrOutput)
}

// Type of authorization.
func (o AuthorizationOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v Authorization) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// Authorization parameters corresponding to the authorization type.
func (o AuthorizationOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v Authorization) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type AuthorizationPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorization)(nil)).Elem()
}

func (o AuthorizationPtrOutput) ToAuthorizationPtrOutput() AuthorizationPtrOutput {
	return o
}

func (o AuthorizationPtrOutput) ToAuthorizationPtrOutputWithContext(ctx context.Context) AuthorizationPtrOutput {
	return o
}

func (o AuthorizationPtrOutput) Elem() AuthorizationOutput {
	return o.ApplyT(func(v *Authorization) Authorization {
		if v != nil {
			return *v
		}
		var ret Authorization
		return ret
	}).(AuthorizationOutput)
}

// Type of authorization.
func (o AuthorizationPtrOutput) AuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authorization) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationType
	}).(pulumi.StringPtrOutput)
}

// Authorization parameters corresponding to the authorization type.
func (o AuthorizationPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Authorization) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// Authorization info used to access a resource (like code repository).
type AuthorizationResponse struct {
	// Type of authorization.
	AuthorizationType string `pulumi:"authorizationType"`
	// Authorization parameters corresponding to the authorization type.
	Parameters map[string]string `pulumi:"parameters"`
}

// Authorization info used to access a resource (like code repository).
type AuthorizationResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationResponse)(nil)).Elem()
}

func (o AuthorizationResponseOutput) ToAuthorizationResponseOutput() AuthorizationResponseOutput {
	return o
}

func (o AuthorizationResponseOutput) ToAuthorizationResponseOutputWithContext(ctx context.Context) AuthorizationResponseOutput {
	return o
}

// Type of authorization.
func (o AuthorizationResponseOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationResponse) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// Authorization parameters corresponding to the authorization type.
func (o AuthorizationResponseOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v AuthorizationResponse) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type AuthorizationResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthorizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationResponse)(nil)).Elem()
}

func (o AuthorizationResponsePtrOutput) ToAuthorizationResponsePtrOutput() AuthorizationResponsePtrOutput {
	return o
}

func (o AuthorizationResponsePtrOutput) ToAuthorizationResponsePtrOutputWithContext(ctx context.Context) AuthorizationResponsePtrOutput {
	return o
}

func (o AuthorizationResponsePtrOutput) Elem() AuthorizationResponseOutput {
	return o.ApplyT(func(v *AuthorizationResponse) AuthorizationResponse {
		if v != nil {
			return *v
		}
		var ret AuthorizationResponse
		return ret
	}).(AuthorizationResponseOutput)
}

// Type of authorization.
func (o AuthorizationResponsePtrOutput) AuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationType
	}).(pulumi.StringPtrOutput)
}

// Authorization parameters corresponding to the authorization type.
func (o AuthorizationResponsePtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuthorizationResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// Configuration used to bootstrap a Pipeline.
type BootstrapConfiguration struct {
	// Repository containing the source code for the pipeline. Currently only 'azurePipeline' pipeline type supports this.
	SourceRepository *CodeRepository `pulumi:"sourceRepository"`
	// Template used to bootstrap the pipeline.
	Template PipelineTemplate `pulumi:"template"`
}

// BootstrapConfigurationInput is an input type that accepts BootstrapConfigurationArgs and BootstrapConfigurationOutput values.
// You can construct a concrete instance of `BootstrapConfigurationInput` via:
//
//	BootstrapConfigurationArgs{...}
type BootstrapConfigurationInput interface {
	pulumi.Input

	ToBootstrapConfigurationOutput() BootstrapConfigurationOutput
	ToBootstrapConfigurationOutputWithContext(context.Context) BootstrapConfigurationOutput
}

// Configuration used to bootstrap a Pipeline.
type BootstrapConfigurationArgs struct {
	// Repository containing the source code for the pipeline. Currently only 'azurePipeline' pipeline type supports this.
	SourceRepository CodeRepositoryPtrInput `pulumi:"sourceRepository"`
	// Template used to bootstrap the pipeline.
	Template PipelineTemplateInput `pulumi:"template"`
}

func (BootstrapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BootstrapConfiguration)(nil)).Elem()
}

func (i BootstrapConfigurationArgs) ToBootstrapConfigurationOutput() BootstrapConfigurationOutput {
	return i.ToBootstrapConfigurationOutputWithContext(context.Background())
}

func (i BootstrapConfigurationArgs) ToBootstrapConfigurationOutputWithContext(ctx context.Context) BootstrapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootstrapConfigurationOutput)
}

// Configuration used to bootstrap a Pipeline.
type BootstrapConfigurationOutput struct{ *pulumi.OutputState }

func (BootstrapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootstrapConfiguration)(nil)).Elem()
}

func (o BootstrapConfigurationOutput) ToBootstrapConfigurationOutput() BootstrapConfigurationOutput {
	return o
}

func (o BootstrapConfigurationOutput) ToBootstrapConfigurationOutputWithContext(ctx context.Context) BootstrapConfigurationOutput {
	return o
}

// Repository containing the source code for the pipeline. Currently only 'azurePipeline' pipeline type supports this.
func (o BootstrapConfigurationOutput) SourceRepository() CodeRepositoryPtrOutput {
	return o.ApplyT(func(v BootstrapConfiguration) *CodeRepository { return v.SourceRepository }).(CodeRepositoryPtrOutput)
}

// Template used to bootstrap the pipeline.
func (o BootstrapConfigurationOutput) Template() PipelineTemplateOutput {
	return o.ApplyT(func(v BootstrapConfiguration) PipelineTemplate { return v.Template }).(PipelineTemplateOutput)
}

// Configuration used to bootstrap a Pipeline.
type BootstrapConfigurationResponse struct {
	// Repository containing the source code for the pipeline. Currently only 'azurePipeline' pipeline type supports this.
	SourceRepository *CodeRepositoryResponse `pulumi:"sourceRepository"`
	// Template used to bootstrap the pipeline.
	Template PipelineTemplateResponse `pulumi:"template"`
}

// Configuration used to bootstrap a Pipeline.
type BootstrapConfigurationResponseOutput struct{ *pulumi.OutputState }

func (BootstrapConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootstrapConfigurationResponse)(nil)).Elem()
}

func (o BootstrapConfigurationResponseOutput) ToBootstrapConfigurationResponseOutput() BootstrapConfigurationResponseOutput {
	return o
}

func (o BootstrapConfigurationResponseOutput) ToBootstrapConfigurationResponseOutputWithContext(ctx context.Context) BootstrapConfigurationResponseOutput {
	return o
}

// Repository containing the source code for the pipeline. Currently only 'azurePipeline' pipeline type supports this.
func (o BootstrapConfigurationResponseOutput) SourceRepository() CodeRepositoryResponsePtrOutput {
	return o.ApplyT(func(v BootstrapConfigurationResponse) *CodeRepositoryResponse { return v.SourceRepository }).(CodeRepositoryResponsePtrOutput)
}

// Template used to bootstrap the pipeline.
func (o BootstrapConfigurationResponseOutput) Template() PipelineTemplateResponseOutput {
	return o.ApplyT(func(v BootstrapConfigurationResponse) PipelineTemplateResponse { return v.Template }).(PipelineTemplateResponseOutput)
}

// Repository containing the source code for a pipeline.
type CodeRepository struct {
	// Authorization info to access the code repository.
	Authorization *Authorization `pulumi:"authorization"`
	// Default branch used to configure Continuous Integration (CI) in the pipeline.
	DefaultBranch string `pulumi:"defaultBranch"`
	// Unique immutable identifier of the code repository.
	Id string `pulumi:"id"`
	// Repository-specific properties.
	Properties map[string]string `pulumi:"properties"`
	// Type of code repository.
	RepositoryType string `pulumi:"repositoryType"`
}

// CodeRepositoryInput is an input type that accepts CodeRepositoryArgs and CodeRepositoryOutput values.
// You can construct a concrete instance of `CodeRepositoryInput` via:
//
//	CodeRepositoryArgs{...}
type CodeRepositoryInput interface {
	pulumi.Input

	ToCodeRepositoryOutput() CodeRepositoryOutput
	ToCodeRepositoryOutputWithContext(context.Context) CodeRepositoryOutput
}

// Repository containing the source code for a pipeline.
type CodeRepositoryArgs struct {
	// Authorization info to access the code repository.
	Authorization AuthorizationPtrInput `pulumi:"authorization"`
	// Default branch used to configure Continuous Integration (CI) in the pipeline.
	DefaultBranch pulumi.StringInput `pulumi:"defaultBranch"`
	// Unique immutable identifier of the code repository.
	Id pulumi.StringInput `pulumi:"id"`
	// Repository-specific properties.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Type of code repository.
	RepositoryType pulumi.StringInput `pulumi:"repositoryType"`
}

func (CodeRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeRepository)(nil)).Elem()
}

func (i CodeRepositoryArgs) ToCodeRepositoryOutput() CodeRepositoryOutput {
	return i.ToCodeRepositoryOutputWithContext(context.Background())
}

func (i CodeRepositoryArgs) ToCodeRepositoryOutputWithContext(ctx context.Context) CodeRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeRepositoryOutput)
}

func (i CodeRepositoryArgs) ToCodeRepositoryPtrOutput() CodeRepositoryPtrOutput {
	return i.ToCodeRepositoryPtrOutputWithContext(context.Background())
}

func (i CodeRepositoryArgs) ToCodeRepositoryPtrOutputWithContext(ctx context.Context) CodeRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeRepositoryOutput).ToCodeRepositoryPtrOutputWithContext(ctx)
}

// CodeRepositoryPtrInput is an input type that accepts CodeRepositoryArgs, CodeRepositoryPtr and CodeRepositoryPtrOutput values.
// You can construct a concrete instance of `CodeRepositoryPtrInput` via:
//
//	        CodeRepositoryArgs{...}
//
//	or:
//
//	        nil
type CodeRepositoryPtrInput interface {
	pulumi.Input

	ToCodeRepositoryPtrOutput() CodeRepositoryPtrOutput
	ToCodeRepositoryPtrOutputWithContext(context.Context) CodeRepositoryPtrOutput
}

type codeRepositoryPtrType CodeRepositoryArgs

func CodeRepositoryPtr(v *CodeRepositoryArgs) CodeRepositoryPtrInput {
	return (*codeRepositoryPtrType)(v)
}

func (*codeRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeRepository)(nil)).Elem()
}

func (i *codeRepositoryPtrType) ToCodeRepositoryPtrOutput() CodeRepositoryPtrOutput {
	return i.ToCodeRepositoryPtrOutputWithContext(context.Background())
}

func (i *codeRepositoryPtrType) ToCodeRepositoryPtrOutputWithContext(ctx context.Context) CodeRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeRepositoryPtrOutput)
}

// Repository containing the source code for a pipeline.
type CodeRepositoryOutput struct{ *pulumi.OutputState }

func (CodeRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeRepository)(nil)).Elem()
}

func (o CodeRepositoryOutput) ToCodeRepositoryOutput() CodeRepositoryOutput {
	return o
}

func (o CodeRepositoryOutput) ToCodeRepositoryOutputWithContext(ctx context.Context) CodeRepositoryOutput {
	return o
}

func (o CodeRepositoryOutput) ToCodeRepositoryPtrOutput() CodeRepositoryPtrOutput {
	return o.ToCodeRepositoryPtrOutputWithContext(context.Background())
}

func (o CodeRepositoryOutput) ToCodeRepositoryPtrOutputWithContext(ctx context.Context) CodeRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeRepository) *CodeRepository {
		return &v
	}).(CodeRepositoryPtrOutput)
}

// Authorization info to access the code repository.
func (o CodeRepositoryOutput) Authorization() AuthorizationPtrOutput {
	return o.ApplyT(func(v CodeRepository) *Authorization { return v.Authorization }).(AuthorizationPtrOutput)
}

// Default branch used to configure Continuous Integration (CI) in the pipeline.
func (o CodeRepositoryOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v CodeRepository) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Unique immutable identifier of the code repository.
func (o CodeRepositoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CodeRepository) string { return v.Id }).(pulumi.StringOutput)
}

// Repository-specific properties.
func (o CodeRepositoryOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeRepository) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Type of code repository.
func (o CodeRepositoryOutput) RepositoryType() pulumi.StringOutput {
	return o.ApplyT(func(v CodeRepository) string { return v.RepositoryType }).(pulumi.StringOutput)
}

type CodeRepositoryPtrOutput struct{ *pulumi.OutputState }

func (CodeRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeRepository)(nil)).Elem()
}

func (o CodeRepositoryPtrOutput) ToCodeRepositoryPtrOutput() CodeRepositoryPtrOutput {
	return o
}

func (o CodeRepositoryPtrOutput) ToCodeRepositoryPtrOutputWithContext(ctx context.Context) CodeRepositoryPtrOutput {
	return o
}

func (o CodeRepositoryPtrOutput) Elem() CodeRepositoryOutput {
	return o.ApplyT(func(v *CodeRepository) CodeRepository {
		if v != nil {
			return *v
		}
		var ret CodeRepository
		return ret
	}).(CodeRepositoryOutput)
}

// Authorization info to access the code repository.
func (o CodeRepositoryPtrOutput) Authorization() AuthorizationPtrOutput {
	return o.ApplyT(func(v *CodeRepository) *Authorization {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(AuthorizationPtrOutput)
}

// Default branch used to configure Continuous Integration (CI) in the pipeline.
func (o CodeRepositoryPtrOutput) DefaultBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeRepository) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultBranch
	}).(pulumi.StringPtrOutput)
}

// Unique immutable identifier of the code repository.
func (o CodeRepositoryPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Repository-specific properties.
func (o CodeRepositoryPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeRepository) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Type of code repository.
func (o CodeRepositoryPtrOutput) RepositoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeRepository) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryType
	}).(pulumi.StringPtrOutput)
}

// Repository containing the source code for a pipeline.
type CodeRepositoryResponse struct {
	// Authorization info to access the code repository.
	Authorization *AuthorizationResponse `pulumi:"authorization"`
	// Default branch used to configure Continuous Integration (CI) in the pipeline.
	DefaultBranch string `pulumi:"defaultBranch"`
	// Unique immutable identifier of the code repository.
	Id string `pulumi:"id"`
	// Repository-specific properties.
	Properties map[string]string `pulumi:"properties"`
	// Type of code repository.
	RepositoryType string `pulumi:"repositoryType"`
}

// Repository containing the source code for a pipeline.
type CodeRepositoryResponseOutput struct{ *pulumi.OutputState }

func (CodeRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeRepositoryResponse)(nil)).Elem()
}

func (o CodeRepositoryResponseOutput) ToCodeRepositoryResponseOutput() CodeRepositoryResponseOutput {
	return o
}

func (o CodeRepositoryResponseOutput) ToCodeRepositoryResponseOutputWithContext(ctx context.Context) CodeRepositoryResponseOutput {
	return o
}

// Authorization info to access the code repository.
func (o CodeRepositoryResponseOutput) Authorization() AuthorizationResponsePtrOutput {
	return o.ApplyT(func(v CodeRepositoryResponse) *AuthorizationResponse { return v.Authorization }).(AuthorizationResponsePtrOutput)
}

// Default branch used to configure Continuous Integration (CI) in the pipeline.
func (o CodeRepositoryResponseOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v CodeRepositoryResponse) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Unique immutable identifier of the code repository.
func (o CodeRepositoryResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CodeRepositoryResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Repository-specific properties.
func (o CodeRepositoryResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeRepositoryResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Type of code repository.
func (o CodeRepositoryResponseOutput) RepositoryType() pulumi.StringOutput {
	return o.ApplyT(func(v CodeRepositoryResponse) string { return v.RepositoryType }).(pulumi.StringOutput)
}

type CodeRepositoryResponsePtrOutput struct{ *pulumi.OutputState }

func (CodeRepositoryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeRepositoryResponse)(nil)).Elem()
}

func (o CodeRepositoryResponsePtrOutput) ToCodeRepositoryResponsePtrOutput() CodeRepositoryResponsePtrOutput {
	return o
}

func (o CodeRepositoryResponsePtrOutput) ToCodeRepositoryResponsePtrOutputWithContext(ctx context.Context) CodeRepositoryResponsePtrOutput {
	return o
}

func (o CodeRepositoryResponsePtrOutput) Elem() CodeRepositoryResponseOutput {
	return o.ApplyT(func(v *CodeRepositoryResponse) CodeRepositoryResponse {
		if v != nil {
			return *v
		}
		var ret CodeRepositoryResponse
		return ret
	}).(CodeRepositoryResponseOutput)
}

// Authorization info to access the code repository.
func (o CodeRepositoryResponsePtrOutput) Authorization() AuthorizationResponsePtrOutput {
	return o.ApplyT(func(v *CodeRepositoryResponse) *AuthorizationResponse {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(AuthorizationResponsePtrOutput)
}

// Default branch used to configure Continuous Integration (CI) in the pipeline.
func (o CodeRepositoryResponsePtrOutput) DefaultBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeRepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultBranch
	}).(pulumi.StringPtrOutput)
}

// Unique immutable identifier of the code repository.
func (o CodeRepositoryResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeRepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Repository-specific properties.
func (o CodeRepositoryResponsePtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CodeRepositoryResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Type of code repository.
func (o CodeRepositoryResponsePtrOutput) RepositoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeRepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryType
	}).(pulumi.StringPtrOutput)
}

// Template used to bootstrap the pipeline.
type PipelineTemplate struct {
	// Unique identifier of the pipeline template.
	Id string `pulumi:"id"`
	// Dictionary of input parameters used in the pipeline template.
	Parameters map[string]string `pulumi:"parameters"`
}

// PipelineTemplateInput is an input type that accepts PipelineTemplateArgs and PipelineTemplateOutput values.
// You can construct a concrete instance of `PipelineTemplateInput` via:
//
//	PipelineTemplateArgs{...}
type PipelineTemplateInput interface {
	pulumi.Input

	ToPipelineTemplateOutput() PipelineTemplateOutput
	ToPipelineTemplateOutputWithContext(context.Context) PipelineTemplateOutput
}

// Template used to bootstrap the pipeline.
type PipelineTemplateArgs struct {
	// Unique identifier of the pipeline template.
	Id pulumi.StringInput `pulumi:"id"`
	// Dictionary of input parameters used in the pipeline template.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (PipelineTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTemplate)(nil)).Elem()
}

func (i PipelineTemplateArgs) ToPipelineTemplateOutput() PipelineTemplateOutput {
	return i.ToPipelineTemplateOutputWithContext(context.Background())
}

func (i PipelineTemplateArgs) ToPipelineTemplateOutputWithContext(ctx context.Context) PipelineTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTemplateOutput)
}

// Template used to bootstrap the pipeline.
type PipelineTemplateOutput struct{ *pulumi.OutputState }

func (PipelineTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTemplate)(nil)).Elem()
}

func (o PipelineTemplateOutput) ToPipelineTemplateOutput() PipelineTemplateOutput {
	return o
}

func (o PipelineTemplateOutput) ToPipelineTemplateOutputWithContext(ctx context.Context) PipelineTemplateOutput {
	return o
}

// Unique identifier of the pipeline template.
func (o PipelineTemplateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineTemplate) string { return v.Id }).(pulumi.StringOutput)
}

// Dictionary of input parameters used in the pipeline template.
func (o PipelineTemplateOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineTemplate) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Template used to bootstrap the pipeline.
type PipelineTemplateResponse struct {
	// Unique identifier of the pipeline template.
	Id string `pulumi:"id"`
	// Dictionary of input parameters used in the pipeline template.
	Parameters map[string]string `pulumi:"parameters"`
}

// Template used to bootstrap the pipeline.
type PipelineTemplateResponseOutput struct{ *pulumi.OutputState }

func (PipelineTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTemplateResponse)(nil)).Elem()
}

func (o PipelineTemplateResponseOutput) ToPipelineTemplateResponseOutput() PipelineTemplateResponseOutput {
	return o
}

func (o PipelineTemplateResponseOutput) ToPipelineTemplateResponseOutputWithContext(ctx context.Context) PipelineTemplateResponseOutput {
	return o
}

// Unique identifier of the pipeline template.
func (o PipelineTemplateResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineTemplateResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Dictionary of input parameters used in the pipeline template.
func (o PipelineTemplateResponseOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineTemplateResponse) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorizationOutput{})
	pulumi.RegisterOutputType(AuthorizationPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationResponseOutput{})
	pulumi.RegisterOutputType(AuthorizationResponsePtrOutput{})
	pulumi.RegisterOutputType(BootstrapConfigurationOutput{})
	pulumi.RegisterOutputType(BootstrapConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CodeRepositoryOutput{})
	pulumi.RegisterOutputType(CodeRepositoryPtrOutput{})
	pulumi.RegisterOutputType(CodeRepositoryResponseOutput{})
	pulumi.RegisterOutputType(CodeRepositoryResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineTemplateOutput{})
	pulumi.RegisterOutputType(PipelineTemplateResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
