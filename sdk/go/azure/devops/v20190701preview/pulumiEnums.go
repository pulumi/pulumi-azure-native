// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AuthorizationType string

const (
	AuthorizationTypePersonalAccessToken = AuthorizationType("personalAccessToken")
)

func (AuthorizationType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationType)(nil)).Elem()
}

func (e AuthorizationType) ToAuthorizationTypeOutput() AuthorizationTypeOutput {
	return pulumi.ToOutput(e).(AuthorizationTypeOutput)
}

func (e AuthorizationType) ToAuthorizationTypeOutputWithContext(ctx context.Context) AuthorizationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuthorizationTypeOutput)
}

func (e AuthorizationType) ToAuthorizationTypePtrOutput() AuthorizationTypePtrOutput {
	return e.ToAuthorizationTypePtrOutputWithContext(context.Background())
}

func (e AuthorizationType) ToAuthorizationTypePtrOutputWithContext(ctx context.Context) AuthorizationTypePtrOutput {
	return AuthorizationType(e).ToAuthorizationTypeOutputWithContext(ctx).ToAuthorizationTypePtrOutputWithContext(ctx)
}

func (e AuthorizationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthorizationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthorizationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuthorizationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuthorizationTypeOutput struct{ *pulumi.OutputState }

func (AuthorizationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationType)(nil)).Elem()
}

func (o AuthorizationTypeOutput) ToAuthorizationTypeOutput() AuthorizationTypeOutput {
	return o
}

func (o AuthorizationTypeOutput) ToAuthorizationTypeOutputWithContext(ctx context.Context) AuthorizationTypeOutput {
	return o
}

func (o AuthorizationTypeOutput) ToAuthorizationTypePtrOutput() AuthorizationTypePtrOutput {
	return o.ToAuthorizationTypePtrOutputWithContext(context.Background())
}

func (o AuthorizationTypeOutput) ToAuthorizationTypePtrOutputWithContext(ctx context.Context) AuthorizationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthorizationType) *AuthorizationType {
		return &v
	}).(AuthorizationTypePtrOutput)
}

func (o AuthorizationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuthorizationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthorizationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuthorizationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthorizationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthorizationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuthorizationTypePtrOutput struct{ *pulumi.OutputState }

func (AuthorizationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationType)(nil)).Elem()
}

func (o AuthorizationTypePtrOutput) ToAuthorizationTypePtrOutput() AuthorizationTypePtrOutput {
	return o
}

func (o AuthorizationTypePtrOutput) ToAuthorizationTypePtrOutputWithContext(ctx context.Context) AuthorizationTypePtrOutput {
	return o
}

func (o AuthorizationTypePtrOutput) Elem() AuthorizationTypeOutput {
	return o.ApplyT(func(v *AuthorizationType) AuthorizationType {
		if v != nil {
			return *v
		}
		var ret AuthorizationType
		return ret
	}).(AuthorizationTypeOutput)
}

func (o AuthorizationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthorizationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuthorizationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuthorizationTypeInput is an input type that accepts AuthorizationTypeArgs and AuthorizationTypeOutput values.
// You can construct a concrete instance of `AuthorizationTypeInput` via:
//
//          AuthorizationTypeArgs{...}
type AuthorizationTypeInput interface {
	pulumi.Input

	ToAuthorizationTypeOutput() AuthorizationTypeOutput
	ToAuthorizationTypeOutputWithContext(context.Context) AuthorizationTypeOutput
}

var authorizationTypePtrType = reflect.TypeOf((**AuthorizationType)(nil)).Elem()

type AuthorizationTypePtrInput interface {
	pulumi.Input

	ToAuthorizationTypePtrOutput() AuthorizationTypePtrOutput
	ToAuthorizationTypePtrOutputWithContext(context.Context) AuthorizationTypePtrOutput
}

type authorizationTypePtr string

func AuthorizationTypePtr(v string) AuthorizationTypePtrInput {
	return (*authorizationTypePtr)(&v)
}

func (*authorizationTypePtr) ElementType() reflect.Type {
	return authorizationTypePtrType
}

func (in *authorizationTypePtr) ToAuthorizationTypePtrOutput() AuthorizationTypePtrOutput {
	return pulumi.ToOutput(in).(AuthorizationTypePtrOutput)
}

func (in *authorizationTypePtr) ToAuthorizationTypePtrOutputWithContext(ctx context.Context) AuthorizationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuthorizationTypePtrOutput)
}

type CodeRepositoryType string

const (
	CodeRepositoryTypeGitHub  = CodeRepositoryType("gitHub")
	CodeRepositoryTypeVstsGit = CodeRepositoryType("vstsGit")
)

func (CodeRepositoryType) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeRepositoryType)(nil)).Elem()
}

func (e CodeRepositoryType) ToCodeRepositoryTypeOutput() CodeRepositoryTypeOutput {
	return pulumi.ToOutput(e).(CodeRepositoryTypeOutput)
}

func (e CodeRepositoryType) ToCodeRepositoryTypeOutputWithContext(ctx context.Context) CodeRepositoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CodeRepositoryTypeOutput)
}

func (e CodeRepositoryType) ToCodeRepositoryTypePtrOutput() CodeRepositoryTypePtrOutput {
	return e.ToCodeRepositoryTypePtrOutputWithContext(context.Background())
}

func (e CodeRepositoryType) ToCodeRepositoryTypePtrOutputWithContext(ctx context.Context) CodeRepositoryTypePtrOutput {
	return CodeRepositoryType(e).ToCodeRepositoryTypeOutputWithContext(ctx).ToCodeRepositoryTypePtrOutputWithContext(ctx)
}

func (e CodeRepositoryType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CodeRepositoryType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CodeRepositoryType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CodeRepositoryType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CodeRepositoryTypeOutput struct{ *pulumi.OutputState }

func (CodeRepositoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeRepositoryType)(nil)).Elem()
}

func (o CodeRepositoryTypeOutput) ToCodeRepositoryTypeOutput() CodeRepositoryTypeOutput {
	return o
}

func (o CodeRepositoryTypeOutput) ToCodeRepositoryTypeOutputWithContext(ctx context.Context) CodeRepositoryTypeOutput {
	return o
}

func (o CodeRepositoryTypeOutput) ToCodeRepositoryTypePtrOutput() CodeRepositoryTypePtrOutput {
	return o.ToCodeRepositoryTypePtrOutputWithContext(context.Background())
}

func (o CodeRepositoryTypeOutput) ToCodeRepositoryTypePtrOutputWithContext(ctx context.Context) CodeRepositoryTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeRepositoryType) *CodeRepositoryType {
		return &v
	}).(CodeRepositoryTypePtrOutput)
}

func (o CodeRepositoryTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CodeRepositoryTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CodeRepositoryType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CodeRepositoryTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CodeRepositoryTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CodeRepositoryType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CodeRepositoryTypePtrOutput struct{ *pulumi.OutputState }

func (CodeRepositoryTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeRepositoryType)(nil)).Elem()
}

func (o CodeRepositoryTypePtrOutput) ToCodeRepositoryTypePtrOutput() CodeRepositoryTypePtrOutput {
	return o
}

func (o CodeRepositoryTypePtrOutput) ToCodeRepositoryTypePtrOutputWithContext(ctx context.Context) CodeRepositoryTypePtrOutput {
	return o
}

func (o CodeRepositoryTypePtrOutput) Elem() CodeRepositoryTypeOutput {
	return o.ApplyT(func(v *CodeRepositoryType) CodeRepositoryType {
		if v != nil {
			return *v
		}
		var ret CodeRepositoryType
		return ret
	}).(CodeRepositoryTypeOutput)
}

func (o CodeRepositoryTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CodeRepositoryTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CodeRepositoryType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CodeRepositoryTypeInput is an input type that accepts CodeRepositoryTypeArgs and CodeRepositoryTypeOutput values.
// You can construct a concrete instance of `CodeRepositoryTypeInput` via:
//
//          CodeRepositoryTypeArgs{...}
type CodeRepositoryTypeInput interface {
	pulumi.Input

	ToCodeRepositoryTypeOutput() CodeRepositoryTypeOutput
	ToCodeRepositoryTypeOutputWithContext(context.Context) CodeRepositoryTypeOutput
}

var codeRepositoryTypePtrType = reflect.TypeOf((**CodeRepositoryType)(nil)).Elem()

type CodeRepositoryTypePtrInput interface {
	pulumi.Input

	ToCodeRepositoryTypePtrOutput() CodeRepositoryTypePtrOutput
	ToCodeRepositoryTypePtrOutputWithContext(context.Context) CodeRepositoryTypePtrOutput
}

type codeRepositoryTypePtr string

func CodeRepositoryTypePtr(v string) CodeRepositoryTypePtrInput {
	return (*codeRepositoryTypePtr)(&v)
}

func (*codeRepositoryTypePtr) ElementType() reflect.Type {
	return codeRepositoryTypePtrType
}

func (in *codeRepositoryTypePtr) ToCodeRepositoryTypePtrOutput() CodeRepositoryTypePtrOutput {
	return pulumi.ToOutput(in).(CodeRepositoryTypePtrOutput)
}

func (in *codeRepositoryTypePtr) ToCodeRepositoryTypePtrOutputWithContext(ctx context.Context) CodeRepositoryTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CodeRepositoryTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorizationTypeOutput{})
	pulumi.RegisterOutputType(AuthorizationTypePtrOutput{})
	pulumi.RegisterOutputType(CodeRepositoryTypeOutput{})
	pulumi.RegisterOutputType(CodeRepositoryTypePtrOutput{})
}
