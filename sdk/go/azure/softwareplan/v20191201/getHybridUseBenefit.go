// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20191201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Response on GET of a hybrid use benefit
func LookupHybridUseBenefit(ctx *pulumi.Context, args *LookupHybridUseBenefitArgs, opts ...pulumi.InvokeOption) (*LookupHybridUseBenefitResult, error) {
	var rv LookupHybridUseBenefitResult
	err := ctx.Invoke("azure-native:softwareplan/v20191201:getHybridUseBenefit", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupHybridUseBenefitArgs struct {
	// This is a unique identifier for a plan. Should be a guid.
	PlanId string `pulumi:"planId"`
	// The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
	Scope string `pulumi:"scope"`
}

// Response on GET of a hybrid use benefit
type LookupHybridUseBenefitResult struct {
	// Created date
	CreatedDate string `pulumi:"createdDate"`
	// Indicates the revision of the hybrid use benefit
	Etag int `pulumi:"etag"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Last updated date
	LastUpdatedDate string `pulumi:"lastUpdatedDate"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
	// Hybrid use benefit SKU
	Sku SkuResponse `pulumi:"sku"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupHybridUseBenefitOutput(ctx *pulumi.Context, args LookupHybridUseBenefitOutputArgs, opts ...pulumi.InvokeOption) LookupHybridUseBenefitResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHybridUseBenefitResult, error) {
			args := v.(LookupHybridUseBenefitArgs)
			r, err := LookupHybridUseBenefit(ctx, &args, opts...)
			var s LookupHybridUseBenefitResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHybridUseBenefitResultOutput)
}

type LookupHybridUseBenefitOutputArgs struct {
	// This is a unique identifier for a plan. Should be a guid.
	PlanId pulumi.StringInput `pulumi:"planId"`
	// The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupHybridUseBenefitOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHybridUseBenefitArgs)(nil)).Elem()
}

// Response on GET of a hybrid use benefit
type LookupHybridUseBenefitResultOutput struct{ *pulumi.OutputState }

func (LookupHybridUseBenefitResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHybridUseBenefitResult)(nil)).Elem()
}

func (o LookupHybridUseBenefitResultOutput) ToLookupHybridUseBenefitResultOutput() LookupHybridUseBenefitResultOutput {
	return o
}

func (o LookupHybridUseBenefitResultOutput) ToLookupHybridUseBenefitResultOutputWithContext(ctx context.Context) LookupHybridUseBenefitResultOutput {
	return o
}

// Created date
func (o LookupHybridUseBenefitResultOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridUseBenefitResult) string { return v.CreatedDate }).(pulumi.StringOutput)
}

// Indicates the revision of the hybrid use benefit
func (o LookupHybridUseBenefitResultOutput) Etag() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHybridUseBenefitResult) int { return v.Etag }).(pulumi.IntOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupHybridUseBenefitResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridUseBenefitResult) string { return v.Id }).(pulumi.StringOutput)
}

// Last updated date
func (o LookupHybridUseBenefitResultOutput) LastUpdatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridUseBenefitResult) string { return v.LastUpdatedDate }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupHybridUseBenefitResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridUseBenefitResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state
func (o LookupHybridUseBenefitResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridUseBenefitResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Hybrid use benefit SKU
func (o LookupHybridUseBenefitResultOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v LookupHybridUseBenefitResult) SkuResponse { return v.Sku }).(SkuResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupHybridUseBenefitResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHybridUseBenefitResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHybridUseBenefitResultOutput{})
}
