// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An assessment created for a group in the Migration project.
// Latest API Version: 2019-10-01.
//
// Deprecated: The 'latest' version is deprecated. Please migrate to the resource in the top-level module: 'azure-nextgen:migrate:Assessment'.
type Assessment struct {
	pulumi.CustomResourceState

	// For optimistic concurrency control.
	ETag pulumi.StringPtrOutput `pulumi:"eTag"`
	// Unique name of an assessment.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the assessment.
	Properties AssessmentPropertiesResponseOutput `pulumi:"properties"`
	// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAssessment registers a new resource with the given unique name, arguments, and options.
func NewAssessment(ctx *pulumi.Context,
	name string, args *AssessmentArgs, opts ...pulumi.ResourceOption) (*Assessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssessmentName == nil {
		return nil, errors.New("invalid value for required argument 'AssessmentName'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:migrate:Assessment"),
		},
		{
			Type: pulumi.String("azure-nextgen:migrate/v20191001:Assessment"),
		},
	})
	opts = append(opts, aliases)
	var resource Assessment
	err := ctx.RegisterResource("azure-nextgen:migrate/latest:Assessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessment gets an existing Assessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentState, opts ...pulumi.ResourceOption) (*Assessment, error) {
	var resource Assessment
	err := ctx.ReadResource("azure-nextgen:migrate/latest:Assessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assessment resources.
type assessmentState struct {
	// For optimistic concurrency control.
	ETag *string `pulumi:"eTag"`
	// Unique name of an assessment.
	Name *string `pulumi:"name"`
	// Properties of the assessment.
	Properties *AssessmentPropertiesResponse `pulumi:"properties"`
	// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
	Type *string `pulumi:"type"`
}

type AssessmentState struct {
	// For optimistic concurrency control.
	ETag pulumi.StringPtrInput
	// Unique name of an assessment.
	Name pulumi.StringPtrInput
	// Properties of the assessment.
	Properties AssessmentPropertiesResponsePtrInput
	// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
	Type pulumi.StringPtrInput
}

func (AssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentState)(nil)).Elem()
}

type assessmentArgs struct {
	// Unique name of an assessment within a project.
	AssessmentName string `pulumi:"assessmentName"`
	// For optimistic concurrency control.
	ETag *string `pulumi:"eTag"`
	// Unique name of a group within a project.
	GroupName string `pulumi:"groupName"`
	// Name of the Azure Migrate project.
	ProjectName string `pulumi:"projectName"`
	// Properties of the assessment.
	Properties AssessmentProperties `pulumi:"properties"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Assessment resource.
type AssessmentArgs struct {
	// Unique name of an assessment within a project.
	AssessmentName pulumi.StringInput
	// For optimistic concurrency control.
	ETag pulumi.StringPtrInput
	// Unique name of a group within a project.
	GroupName pulumi.StringInput
	// Name of the Azure Migrate project.
	ProjectName pulumi.StringInput
	// Properties of the assessment.
	Properties AssessmentPropertiesInput
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName pulumi.StringInput
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentArgs)(nil)).Elem()
}

type AssessmentInput interface {
	pulumi.Input

	ToAssessmentOutput() AssessmentOutput
	ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput
}

func (*Assessment) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil))
}

func (i *Assessment) ToAssessmentOutput() AssessmentOutput {
	return i.ToAssessmentOutputWithContext(context.Background())
}

func (i *Assessment) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput)
}

type AssessmentOutput struct {
	*pulumi.OutputState
}

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil))
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AssessmentOutput{})
}
