// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package operationalinsights

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The cluster's billing type.
type BillingType string

const (
	BillingTypeCluster    = BillingType("Cluster")
	BillingTypeWorkspaces = BillingType("Workspaces")
)

// The name of the SKU.
type ClusterSkuNameEnum string

const (
	ClusterSkuNameEnumCapacityReservation = ClusterSkuNameEnum("CapacityReservation")
)

// Column data type logical hint.
type ColumnDataTypeHintEnum string

const (
	// A string that matches the pattern of a URI, for example, scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment
	ColumnDataTypeHintEnumUri = ColumnDataTypeHintEnum("uri")
	// A standard 128-bit GUID following the standard shape, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	ColumnDataTypeHintEnumGuid = ColumnDataTypeHintEnum("guid")
	// An Azure Resource Model (ARM) path: /subscriptions/{...}/resourceGroups/{...}/providers/Microsoft.{...}/{...}/{...}/{...}...
	ColumnDataTypeHintEnumArmPath = ColumnDataTypeHintEnum("armPath")
	// A standard V4/V6 ip address following the standard shape, x.x.x.x/y:y:y:y:y:y:y:y
	ColumnDataTypeHintEnumIp = ColumnDataTypeHintEnum("ip")
)

// Column data type.
type ColumnTypeEnum string

const (
	ColumnTypeEnumString   = ColumnTypeEnum("string")
	ColumnTypeEnumInt      = ColumnTypeEnum("int")
	ColumnTypeEnumLong     = ColumnTypeEnum("long")
	ColumnTypeEnumReal     = ColumnTypeEnum("real")
	ColumnTypeEnumBoolean  = ColumnTypeEnum("boolean")
	ColumnTypeEnumDateTime = ColumnTypeEnum("dateTime")
	ColumnTypeEnumGuid     = ColumnTypeEnum("guid")
	ColumnTypeEnumDynamic  = ColumnTypeEnum("dynamic")
)

// The kind of the DataSource.
type DataSourceKind string

const (
	DataSourceKindWindowsEvent                                         = DataSourceKind("WindowsEvent")
	DataSourceKindWindowsPerformanceCounter                            = DataSourceKind("WindowsPerformanceCounter")
	DataSourceKindIISLogs                                              = DataSourceKind("IISLogs")
	DataSourceKindLinuxSyslog                                          = DataSourceKind("LinuxSyslog")
	DataSourceKindLinuxSyslogCollection                                = DataSourceKind("LinuxSyslogCollection")
	DataSourceKindLinuxPerformanceObject                               = DataSourceKind("LinuxPerformanceObject")
	DataSourceKindLinuxPerformanceCollection                           = DataSourceKind("LinuxPerformanceCollection")
	DataSourceKindCustomLog                                            = DataSourceKind("CustomLog")
	DataSourceKindCustomLogCollection                                  = DataSourceKind("CustomLogCollection")
	DataSourceKindAzureAuditLog                                        = DataSourceKind("AzureAuditLog")
	DataSourceKindAzureActivityLog                                     = DataSourceKind("AzureActivityLog")
	DataSourceKindGenericDataSource                                    = DataSourceKind("GenericDataSource")
	DataSourceKindChangeTrackingCustomPath                             = DataSourceKind("ChangeTrackingCustomPath")
	DataSourceKindChangeTrackingPath                                   = DataSourceKind("ChangeTrackingPath")
	DataSourceKindChangeTrackingServices                               = DataSourceKind("ChangeTrackingServices")
	DataSourceKindChangeTrackingDataTypeConfiguration                  = DataSourceKind("ChangeTrackingDataTypeConfiguration")
	DataSourceKindChangeTrackingDefaultRegistry                        = DataSourceKind("ChangeTrackingDefaultRegistry")
	DataSourceKindChangeTrackingRegistry                               = DataSourceKind("ChangeTrackingRegistry")
	DataSourceKindChangeTrackingLinuxPath                              = DataSourceKind("ChangeTrackingLinuxPath")
	DataSourceKindLinuxChangeTrackingPath                              = DataSourceKind("LinuxChangeTrackingPath")
	DataSourceKindChangeTrackingContentLocation                        = DataSourceKind("ChangeTrackingContentLocation")
	DataSourceKindWindowsTelemetry                                     = DataSourceKind("WindowsTelemetry")
	DataSourceKindOffice365                                            = DataSourceKind("Office365")
	DataSourceKindSecurityWindowsBaselineConfiguration                 = DataSourceKind("SecurityWindowsBaselineConfiguration")
	DataSourceKindSecurityCenterSecurityWindowsBaselineConfiguration   = DataSourceKind("SecurityCenterSecurityWindowsBaselineConfiguration")
	DataSourceKindSecurityEventCollectionConfiguration                 = DataSourceKind("SecurityEventCollectionConfiguration")
	DataSourceKindSecurityInsightsSecurityEventCollectionConfiguration = DataSourceKind("SecurityInsightsSecurityEventCollectionConfiguration")
	DataSourceKindImportComputerGroup                                  = DataSourceKind("ImportComputerGroup")
	DataSourceKindNetworkMonitoring                                    = DataSourceKind("NetworkMonitoring")
	DataSourceKindItsm                                                 = DataSourceKind("Itsm")
	DataSourceKindDnsAnalytics                                         = DataSourceKind("DnsAnalytics")
	DataSourceKindApplicationInsights                                  = DataSourceKind("ApplicationInsights")
	DataSourceKindSqlDataClassification                                = DataSourceKind("SqlDataClassification")
)

// Type of managed service identity.
type IdentityType string

const (
	IdentityTypeSystemAssigned = IdentityType("SystemAssigned")
	IdentityTypeUserAssigned   = IdentityType("UserAssigned")
	IdentityTypeNone           = IdentityType("None")
)

func (IdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityType)(nil)).Elem()
}

func (e IdentityType) ToIdentityTypeOutput() IdentityTypeOutput {
	return pulumi.ToOutput(e).(IdentityTypeOutput)
}

func (e IdentityType) ToIdentityTypeOutputWithContext(ctx context.Context) IdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IdentityTypeOutput)
}

func (e IdentityType) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return e.ToIdentityTypePtrOutputWithContext(context.Background())
}

func (e IdentityType) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return IdentityType(e).ToIdentityTypeOutputWithContext(ctx).ToIdentityTypePtrOutputWithContext(ctx)
}

func (e IdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IdentityTypeOutput struct{ *pulumi.OutputState }

func (IdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityType)(nil)).Elem()
}

func (o IdentityTypeOutput) ToIdentityTypeOutput() IdentityTypeOutput {
	return o
}

func (o IdentityTypeOutput) ToIdentityTypeOutputWithContext(ctx context.Context) IdentityTypeOutput {
	return o
}

func (o IdentityTypeOutput) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return o.ToIdentityTypePtrOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityType) *IdentityType {
		return &v
	}).(IdentityTypePtrOutput)
}

func (o IdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IdentityTypePtrOutput struct{ *pulumi.OutputState }

func (IdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityType)(nil)).Elem()
}

func (o IdentityTypePtrOutput) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return o
}

func (o IdentityTypePtrOutput) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return o
}

func (o IdentityTypePtrOutput) Elem() IdentityTypeOutput {
	return o.ApplyT(func(v *IdentityType) IdentityType {
		if v != nil {
			return *v
		}
		var ret IdentityType
		return ret
	}).(IdentityTypeOutput)
}

func (o IdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IdentityTypeInput is an input type that accepts IdentityTypeArgs and IdentityTypeOutput values.
// You can construct a concrete instance of `IdentityTypeInput` via:
//
//	IdentityTypeArgs{...}
type IdentityTypeInput interface {
	pulumi.Input

	ToIdentityTypeOutput() IdentityTypeOutput
	ToIdentityTypeOutputWithContext(context.Context) IdentityTypeOutput
}

var identityTypePtrType = reflect.TypeOf((**IdentityType)(nil)).Elem()

type IdentityTypePtrInput interface {
	pulumi.Input

	ToIdentityTypePtrOutput() IdentityTypePtrOutput
	ToIdentityTypePtrOutputWithContext(context.Context) IdentityTypePtrOutput
}

type identityTypePtr string

func IdentityTypePtr(v string) IdentityTypePtrInput {
	return (*identityTypePtr)(&v)
}

func (*identityTypePtr) ElementType() reflect.Type {
	return identityTypePtrType
}

func (in *identityTypePtr) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return pulumi.ToOutput(in).(IdentityTypePtrOutput)
}

func (in *identityTypePtr) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IdentityTypePtrOutput)
}

// The provisioning state of the linked service.
type LinkedServiceEntityStatus string

const (
	LinkedServiceEntityStatusSucceeded           = LinkedServiceEntityStatus("Succeeded")
	LinkedServiceEntityStatusDeleting            = LinkedServiceEntityStatus("Deleting")
	LinkedServiceEntityStatusProvisioningAccount = LinkedServiceEntityStatus("ProvisioningAccount")
	LinkedServiceEntityStatusUpdating            = LinkedServiceEntityStatus("Updating")
)

// Type of the machine group
type MachineGroupType string

const (
	MachineGroupTypeUnknown      = MachineGroupType("unknown")
	MachineGroupType_Azure_cs    = MachineGroupType("azure-cs")
	MachineGroupType_Azure_sf    = MachineGroupType("azure-sf")
	MachineGroupType_Azure_vmss  = MachineGroupType("azure-vmss")
	MachineGroupType_User_static = MachineGroupType("user-static")
)

// The network access type for accessing Log Analytics query.
type PublicNetworkAccessType string

const (
	// Enables connectivity to Log Analytics through public DNS.
	PublicNetworkAccessTypeEnabled = PublicNetworkAccessType("Enabled")
	// Disables public connectivity to Log Analytics through public DNS.
	PublicNetworkAccessTypeDisabled = PublicNetworkAccessType("Disabled")
)

// Instruct the system how to handle and charge the logs ingested to this table.
type TablePlanEnum string

const (
	// Logs  that are adjusted to support high volume low value verbose logs.
	TablePlanEnumBasic = TablePlanEnum("Basic")
	// Logs  that allow monitoring and analytics.
	TablePlanEnumAnalytics = TablePlanEnum("Analytics")
)

// The provisioning state of the workspace.
type WorkspaceEntityStatus string

const (
	WorkspaceEntityStatusCreating            = WorkspaceEntityStatus("Creating")
	WorkspaceEntityStatusSucceeded           = WorkspaceEntityStatus("Succeeded")
	WorkspaceEntityStatusFailed              = WorkspaceEntityStatus("Failed")
	WorkspaceEntityStatusCanceled            = WorkspaceEntityStatus("Canceled")
	WorkspaceEntityStatusDeleting            = WorkspaceEntityStatus("Deleting")
	WorkspaceEntityStatusProvisioningAccount = WorkspaceEntityStatus("ProvisioningAccount")
	WorkspaceEntityStatusUpdating            = WorkspaceEntityStatus("Updating")
)

// The name of the SKU.
type WorkspaceSkuNameEnum string

const (
	WorkspaceSkuNameEnumFree                = WorkspaceSkuNameEnum("Free")
	WorkspaceSkuNameEnumStandard            = WorkspaceSkuNameEnum("Standard")
	WorkspaceSkuNameEnumPremium             = WorkspaceSkuNameEnum("Premium")
	WorkspaceSkuNameEnumPerNode             = WorkspaceSkuNameEnum("PerNode")
	WorkspaceSkuNameEnumPerGB2018           = WorkspaceSkuNameEnum("PerGB2018")
	WorkspaceSkuNameEnumStandalone          = WorkspaceSkuNameEnum("Standalone")
	WorkspaceSkuNameEnumCapacityReservation = WorkspaceSkuNameEnum("CapacityReservation")
	WorkspaceSkuNameEnumLACluster           = WorkspaceSkuNameEnum("LACluster")
)

func init() {
	pulumi.RegisterOutputType(IdentityTypeOutput{})
	pulumi.RegisterOutputType(IdentityTypePtrOutput{})
}
