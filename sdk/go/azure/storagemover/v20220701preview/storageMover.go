// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220701preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Storage Mover resource, which is a container for a group of Agents, Projects, and Endpoints.
type StorageMover struct {
	pulumi.CustomResourceState

	// A description for the Storage Mover.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of this resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource system metadata.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStorageMover registers a new resource with the given unique name, arguments, and options.
func NewStorageMover(ctx *pulumi.Context,
	name string, args *StorageMoverArgs, opts ...pulumi.ResourceOption) (*StorageMover, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:storagemover:StorageMover"),
		},
	})
	opts = append(opts, aliases)
	var resource StorageMover
	err := ctx.RegisterResource("azure-native:storagemover/v20220701preview:StorageMover", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageMover gets an existing StorageMover resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageMover(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageMoverState, opts ...pulumi.ResourceOption) (*StorageMover, error) {
	var resource StorageMover
	err := ctx.ReadResource("azure-native:storagemover/v20220701preview:StorageMover", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageMover resources.
type storageMoverState struct {
}

type StorageMoverState struct {
}

func (StorageMoverState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageMoverState)(nil)).Elem()
}

type storageMoverArgs struct {
	// A description for the Storage Mover.
	Description *string `pulumi:"description"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Storage Mover resource.
	StorageMoverName *string `pulumi:"storageMoverName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a StorageMover resource.
type StorageMoverArgs struct {
	// A description for the Storage Mover.
	Description pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the Storage Mover resource.
	StorageMoverName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (StorageMoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageMoverArgs)(nil)).Elem()
}

type StorageMoverInput interface {
	pulumi.Input

	ToStorageMoverOutput() StorageMoverOutput
	ToStorageMoverOutputWithContext(ctx context.Context) StorageMoverOutput
}

func (*StorageMover) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageMover)(nil)).Elem()
}

func (i *StorageMover) ToStorageMoverOutput() StorageMoverOutput {
	return i.ToStorageMoverOutputWithContext(context.Background())
}

func (i *StorageMover) ToStorageMoverOutputWithContext(ctx context.Context) StorageMoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageMoverOutput)
}

type StorageMoverOutput struct{ *pulumi.OutputState }

func (StorageMoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageMover)(nil)).Elem()
}

func (o StorageMoverOutput) ToStorageMoverOutput() StorageMoverOutput {
	return o
}

func (o StorageMoverOutput) ToStorageMoverOutputWithContext(ctx context.Context) StorageMoverOutput {
	return o
}

// A description for the Storage Mover.
func (o StorageMoverOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageMover) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o StorageMoverOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageMover) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o StorageMoverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageMover) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of this resource.
func (o StorageMoverOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageMover) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource system metadata.
func (o StorageMoverOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *StorageMover) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o StorageMoverOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StorageMover) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o StorageMoverOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageMover) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(StorageMoverOutput{})
}
