// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Static Site ARM resource.
func LookupStaticSite(ctx *pulumi.Context, args *LookupStaticSiteArgs, opts ...pulumi.InvokeOption) (*LookupStaticSiteResult, error) {
	var rv LookupStaticSiteResult
	err := ctx.Invoke("azure-native:web/v20190801:getStaticSite", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStaticSiteArgs struct {
	// Name of the static site.
	Name string `pulumi:"name"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Static Site ARM resource.
type LookupStaticSiteResult struct {
	// The target branch in the repository.
	Branch *string `pulumi:"branch"`
	// Build properties to configure on the repository.
	BuildProperties *StaticSiteBuildPropertiesResponse `pulumi:"buildProperties"`
	// The custom domains associated with this static site.
	CustomDomains []string `pulumi:"customDomains"`
	// The default autogenerated hostname for the static site.
	DefaultHostname string `pulumi:"defaultHostname"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Location.
	Location string `pulumi:"location"`
	// Resource Name.
	Name string `pulumi:"name"`
	// A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
	RepositoryToken *string `pulumi:"repositoryToken"`
	// URL for the repository of the static site.
	RepositoryUrl *string `pulumi:"repositoryUrl"`
	// Description of a SKU for a scalable resource.
	Sku *SkuDescriptionResponse `pulumi:"sku"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupStaticSiteOutput(ctx *pulumi.Context, args LookupStaticSiteOutputArgs, opts ...pulumi.InvokeOption) LookupStaticSiteResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStaticSiteResult, error) {
			args := v.(LookupStaticSiteArgs)
			r, err := LookupStaticSite(ctx, &args, opts...)
			var s LookupStaticSiteResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStaticSiteResultOutput)
}

type LookupStaticSiteOutputArgs struct {
	// Name of the static site.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupStaticSiteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStaticSiteArgs)(nil)).Elem()
}

// Static Site ARM resource.
type LookupStaticSiteResultOutput struct{ *pulumi.OutputState }

func (LookupStaticSiteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStaticSiteResult)(nil)).Elem()
}

func (o LookupStaticSiteResultOutput) ToLookupStaticSiteResultOutput() LookupStaticSiteResultOutput {
	return o
}

func (o LookupStaticSiteResultOutput) ToLookupStaticSiteResultOutputWithContext(ctx context.Context) LookupStaticSiteResultOutput {
	return o
}

// The target branch in the repository.
func (o LookupStaticSiteResultOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Build properties to configure on the repository.
func (o LookupStaticSiteResultOutput) BuildProperties() StaticSiteBuildPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) *StaticSiteBuildPropertiesResponse { return v.BuildProperties }).(StaticSiteBuildPropertiesResponsePtrOutput)
}

// The custom domains associated with this static site.
func (o LookupStaticSiteResultOutput) CustomDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) []string { return v.CustomDomains }).(pulumi.StringArrayOutput)
}

// The default autogenerated hostname for the static site.
func (o LookupStaticSiteResultOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) string { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Resource Id.
func (o LookupStaticSiteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o LookupStaticSiteResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location.
func (o LookupStaticSiteResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource Name.
func (o LookupStaticSiteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) string { return v.Name }).(pulumi.StringOutput)
}

// A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
func (o LookupStaticSiteResultOutput) RepositoryToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) *string { return v.RepositoryToken }).(pulumi.StringPtrOutput)
}

// URL for the repository of the static site.
func (o LookupStaticSiteResultOutput) RepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) *string { return v.RepositoryUrl }).(pulumi.StringPtrOutput)
}

// Description of a SKU for a scalable resource.
func (o LookupStaticSiteResultOutput) Sku() SkuDescriptionResponsePtrOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) *SkuDescriptionResponse { return v.Sku }).(SkuDescriptionResponsePtrOutput)
}

// Resource tags.
func (o LookupStaticSiteResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o LookupStaticSiteResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStaticSiteResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStaticSiteResultOutput{})
}
