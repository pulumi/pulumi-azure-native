// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// String dictionary resource.
func ListWebAppFunctionKeysSlot(ctx *pulumi.Context, args *ListWebAppFunctionKeysSlotArgs, opts ...pulumi.InvokeOption) (*ListWebAppFunctionKeysSlotResult, error) {
	var rv ListWebAppFunctionKeysSlotResult
	err := ctx.Invoke("azure-native:web/v20210201:listWebAppFunctionKeysSlot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListWebAppFunctionKeysSlotArgs struct {
	// Function name.
	FunctionName string `pulumi:"functionName"`
	// Site name.
	Name string `pulumi:"name"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the deployment slot.
	Slot string `pulumi:"slot"`
}

// String dictionary resource.
type ListWebAppFunctionKeysSlotResult struct {
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// Settings.
	Properties map[string]string `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

func ListWebAppFunctionKeysSlotOutput(ctx *pulumi.Context, args ListWebAppFunctionKeysSlotOutputArgs, opts ...pulumi.InvokeOption) ListWebAppFunctionKeysSlotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListWebAppFunctionKeysSlotResult, error) {
			args := v.(ListWebAppFunctionKeysSlotArgs)
			r, err := ListWebAppFunctionKeysSlot(ctx, &args, opts...)
			var s ListWebAppFunctionKeysSlotResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListWebAppFunctionKeysSlotResultOutput)
}

type ListWebAppFunctionKeysSlotOutputArgs struct {
	// Function name.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// Site name.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of the deployment slot.
	Slot pulumi.StringInput `pulumi:"slot"`
}

func (ListWebAppFunctionKeysSlotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListWebAppFunctionKeysSlotArgs)(nil)).Elem()
}

// String dictionary resource.
type ListWebAppFunctionKeysSlotResultOutput struct{ *pulumi.OutputState }

func (ListWebAppFunctionKeysSlotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListWebAppFunctionKeysSlotResult)(nil)).Elem()
}

func (o ListWebAppFunctionKeysSlotResultOutput) ToListWebAppFunctionKeysSlotResultOutput() ListWebAppFunctionKeysSlotResultOutput {
	return o
}

func (o ListWebAppFunctionKeysSlotResultOutput) ToListWebAppFunctionKeysSlotResultOutputWithContext(ctx context.Context) ListWebAppFunctionKeysSlotResultOutput {
	return o
}

// Resource Id.
func (o ListWebAppFunctionKeysSlotResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ListWebAppFunctionKeysSlotResult) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o ListWebAppFunctionKeysSlotResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListWebAppFunctionKeysSlotResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o ListWebAppFunctionKeysSlotResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ListWebAppFunctionKeysSlotResult) string { return v.Name }).(pulumi.StringOutput)
}

// Settings.
func (o ListWebAppFunctionKeysSlotResultOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ListWebAppFunctionKeysSlotResult) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Resource type.
func (o ListWebAppFunctionKeysSlotResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ListWebAppFunctionKeysSlotResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ListWebAppFunctionKeysSlotResultOutput{})
}
