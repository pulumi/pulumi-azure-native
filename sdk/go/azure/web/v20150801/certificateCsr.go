// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Certificate signing request object
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
type CertificateCsr struct {
	pulumi.CustomResourceState

	// Actual CSR string created
	CsrString pulumi.StringPtrOutput `pulumi:"csrString"`
	// Distinguished name of certificate to be created
	DistinguishedName pulumi.StringPtrOutput `pulumi:"distinguishedName"`
	// Hosting environment
	HostingEnvironment pulumi.StringPtrOutput `pulumi:"hostingEnvironment"`
	// Kind of resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource Name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// PFX password
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// PFX certificate of created certificate
	PfxBlob pulumi.StringPtrOutput `pulumi:"pfxBlob"`
	// Hash of the certificates public key
	PublicKeyHash pulumi.StringPtrOutput `pulumi:"publicKeyHash"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewCertificateCsr registers a new resource with the given unique name, arguments, and options.
func NewCertificateCsr(ctx *pulumi.Context,
	name string, args *CertificateCsrArgs, opts ...pulumi.ResourceOption) (*CertificateCsr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource CertificateCsr
	err := ctx.RegisterResource("azure-native:web/v20150801:CertificateCsr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateCsr gets an existing CertificateCsr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateCsr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateCsrState, opts ...pulumi.ResourceOption) (*CertificateCsr, error) {
	var resource CertificateCsr
	err := ctx.ReadResource("azure-native:web/v20150801:CertificateCsr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateCsr resources.
type certificateCsrState struct {
}

type CertificateCsrState struct {
}

func (CertificateCsrState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateCsrState)(nil)).Elem()
}

type certificateCsrArgs struct {
	// Actual CSR string created
	CsrString *string `pulumi:"csrString"`
	// Distinguished name of certificate to be created
	DistinguishedName *string `pulumi:"distinguishedName"`
	// Hosting environment
	HostingEnvironment *string `pulumi:"hostingEnvironment"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location *string `pulumi:"location"`
	// Resource Name
	Name *string `pulumi:"name"`
	// PFX password
	Password *string `pulumi:"password"`
	// PFX certificate of created certificate
	PfxBlob *string `pulumi:"pfxBlob"`
	// Hash of the certificates public key
	PublicKeyHash *string `pulumi:"publicKeyHash"`
	// Name of the resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a CertificateCsr resource.
type CertificateCsrArgs struct {
	// Actual CSR string created
	CsrString pulumi.StringPtrInput
	// Distinguished name of certificate to be created
	DistinguishedName pulumi.StringPtrInput
	// Hosting environment
	HostingEnvironment pulumi.StringPtrInput
	// Resource Id
	Id pulumi.StringPtrInput
	// Kind of resource
	Kind pulumi.StringPtrInput
	// Resource Location
	Location pulumi.StringPtrInput
	// Resource Name
	Name pulumi.StringPtrInput
	// PFX password
	Password pulumi.StringPtrInput
	// PFX certificate of created certificate
	PfxBlob pulumi.StringPtrInput
	// Hash of the certificates public key
	PublicKeyHash pulumi.StringPtrInput
	// Name of the resource group
	ResourceGroupName pulumi.StringInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (CertificateCsrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateCsrArgs)(nil)).Elem()
}

type CertificateCsrInput interface {
	pulumi.Input

	ToCertificateCsrOutput() CertificateCsrOutput
	ToCertificateCsrOutputWithContext(ctx context.Context) CertificateCsrOutput
}

func (*CertificateCsr) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCsr)(nil)).Elem()
}

func (i *CertificateCsr) ToCertificateCsrOutput() CertificateCsrOutput {
	return i.ToCertificateCsrOutputWithContext(context.Background())
}

func (i *CertificateCsr) ToCertificateCsrOutputWithContext(ctx context.Context) CertificateCsrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCsrOutput)
}

type CertificateCsrOutput struct{ *pulumi.OutputState }

func (CertificateCsrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCsr)(nil)).Elem()
}

func (o CertificateCsrOutput) ToCertificateCsrOutput() CertificateCsrOutput {
	return o
}

func (o CertificateCsrOutput) ToCertificateCsrOutputWithContext(ctx context.Context) CertificateCsrOutput {
	return o
}

// Actual CSR string created
func (o CertificateCsrOutput) CsrString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.CsrString }).(pulumi.StringPtrOutput)
}

// Distinguished name of certificate to be created
func (o CertificateCsrOutput) DistinguishedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.DistinguishedName }).(pulumi.StringPtrOutput)
}

// Hosting environment
func (o CertificateCsrOutput) HostingEnvironment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.HostingEnvironment }).(pulumi.StringPtrOutput)
}

// Kind of resource
func (o CertificateCsrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o CertificateCsrOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o CertificateCsrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// PFX password
func (o CertificateCsrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// PFX certificate of created certificate
func (o CertificateCsrOutput) PfxBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.PfxBlob }).(pulumi.StringPtrOutput)
}

// Hash of the certificates public key
func (o CertificateCsrOutput) PublicKeyHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.PublicKeyHash }).(pulumi.StringPtrOutput)
}

// Resource tags
func (o CertificateCsrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o CertificateCsrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCsr) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateCsrOutput{})
}
