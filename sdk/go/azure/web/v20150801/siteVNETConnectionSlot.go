// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VNETInfo contract. This contract is public and is a stripped down version of VNETInfoInternal
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
type SiteVNETConnectionSlot struct {
	pulumi.CustomResourceState

	// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
	//             Point-To-Site VPN connection.
	CertBlob pulumi.StringPtrOutput `pulumi:"certBlob"`
	// The client certificate thumbprint
	CertThumbprint pulumi.StringPtrOutput `pulumi:"certThumbprint"`
	// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
	DnsServers pulumi.StringPtrOutput `pulumi:"dnsServers"`
	// Kind of resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource Name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Flag to determine if a resync is required
	ResyncRequired pulumi.BoolPtrOutput `pulumi:"resyncRequired"`
	// The routes that this virtual network connection uses.
	Routes VnetRouteResponseArrayOutput `pulumi:"routes"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The vnet resource id
	VnetResourceId pulumi.StringPtrOutput `pulumi:"vnetResourceId"`
}

// NewSiteVNETConnectionSlot registers a new resource with the given unique name, arguments, and options.
func NewSiteVNETConnectionSlot(ctx *pulumi.Context,
	name string, args *SiteVNETConnectionSlotArgs, opts ...pulumi.ResourceOption) (*SiteVNETConnectionSlot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Slot == nil {
		return nil, errors.New("invalid value for required argument 'Slot'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:web:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20160801:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20180201:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20181101:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20190801:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200601:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200901:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201001:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201201:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210101:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210115:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210201:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210301:SiteVNETConnectionSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20220301:SiteVNETConnectionSlot"),
		},
	})
	opts = append(opts, aliases)
	var resource SiteVNETConnectionSlot
	err := ctx.RegisterResource("azure-native:web/v20150801:SiteVNETConnectionSlot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSiteVNETConnectionSlot gets an existing SiteVNETConnectionSlot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSiteVNETConnectionSlot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteVNETConnectionSlotState, opts ...pulumi.ResourceOption) (*SiteVNETConnectionSlot, error) {
	var resource SiteVNETConnectionSlot
	err := ctx.ReadResource("azure-native:web/v20150801:SiteVNETConnectionSlot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SiteVNETConnectionSlot resources.
type siteVNETConnectionSlotState struct {
}

type SiteVNETConnectionSlotState struct {
}

func (SiteVNETConnectionSlotState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteVNETConnectionSlotState)(nil)).Elem()
}

type siteVNETConnectionSlotArgs struct {
	// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
	//             Point-To-Site VPN connection.
	CertBlob *string `pulumi:"certBlob"`
	// The client certificate thumbprint
	CertThumbprint *string `pulumi:"certThumbprint"`
	// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
	DnsServers *string `pulumi:"dnsServers"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location *string `pulumi:"location"`
	// Resource Name
	Name string `pulumi:"name"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Flag to determine if a resync is required
	ResyncRequired *bool `pulumi:"resyncRequired"`
	// The routes that this virtual network connection uses.
	Routes []VnetRoute `pulumi:"routes"`
	// The name of the slot for this web app.
	Slot string `pulumi:"slot"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// The name of the Virtual Network
	VnetName *string `pulumi:"vnetName"`
	// The vnet resource id
	VnetResourceId *string `pulumi:"vnetResourceId"`
}

// The set of arguments for constructing a SiteVNETConnectionSlot resource.
type SiteVNETConnectionSlotArgs struct {
	// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
	//             Point-To-Site VPN connection.
	CertBlob pulumi.StringPtrInput
	// The client certificate thumbprint
	CertThumbprint pulumi.StringPtrInput
	// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
	DnsServers pulumi.StringPtrInput
	// Resource Id
	Id pulumi.StringPtrInput
	// Kind of resource
	Kind pulumi.StringPtrInput
	// Resource Location
	Location pulumi.StringPtrInput
	// Resource Name
	Name pulumi.StringInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
	// Flag to determine if a resync is required
	ResyncRequired pulumi.BoolPtrInput
	// The routes that this virtual network connection uses.
	Routes VnetRouteArrayInput
	// The name of the slot for this web app.
	Slot pulumi.StringInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
	// The name of the Virtual Network
	VnetName pulumi.StringPtrInput
	// The vnet resource id
	VnetResourceId pulumi.StringPtrInput
}

func (SiteVNETConnectionSlotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteVNETConnectionSlotArgs)(nil)).Elem()
}

type SiteVNETConnectionSlotInput interface {
	pulumi.Input

	ToSiteVNETConnectionSlotOutput() SiteVNETConnectionSlotOutput
	ToSiteVNETConnectionSlotOutputWithContext(ctx context.Context) SiteVNETConnectionSlotOutput
}

func (*SiteVNETConnectionSlot) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteVNETConnectionSlot)(nil)).Elem()
}

func (i *SiteVNETConnectionSlot) ToSiteVNETConnectionSlotOutput() SiteVNETConnectionSlotOutput {
	return i.ToSiteVNETConnectionSlotOutputWithContext(context.Background())
}

func (i *SiteVNETConnectionSlot) ToSiteVNETConnectionSlotOutputWithContext(ctx context.Context) SiteVNETConnectionSlotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteVNETConnectionSlotOutput)
}

type SiteVNETConnectionSlotOutput struct{ *pulumi.OutputState }

func (SiteVNETConnectionSlotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteVNETConnectionSlot)(nil)).Elem()
}

func (o SiteVNETConnectionSlotOutput) ToSiteVNETConnectionSlotOutput() SiteVNETConnectionSlotOutput {
	return o
}

func (o SiteVNETConnectionSlotOutput) ToSiteVNETConnectionSlotOutputWithContext(ctx context.Context) SiteVNETConnectionSlotOutput {
	return o
}

// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
//
//	Point-To-Site VPN connection.
func (o SiteVNETConnectionSlotOutput) CertBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringPtrOutput { return v.CertBlob }).(pulumi.StringPtrOutput)
}

// The client certificate thumbprint
func (o SiteVNETConnectionSlotOutput) CertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringPtrOutput { return v.CertThumbprint }).(pulumi.StringPtrOutput)
}

// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
func (o SiteVNETConnectionSlotOutput) DnsServers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringPtrOutput { return v.DnsServers }).(pulumi.StringPtrOutput)
}

// Kind of resource
func (o SiteVNETConnectionSlotOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o SiteVNETConnectionSlotOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o SiteVNETConnectionSlotOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Flag to determine if a resync is required
func (o SiteVNETConnectionSlotOutput) ResyncRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.BoolPtrOutput { return v.ResyncRequired }).(pulumi.BoolPtrOutput)
}

// The routes that this virtual network connection uses.
func (o SiteVNETConnectionSlotOutput) Routes() VnetRouteResponseArrayOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) VnetRouteResponseArrayOutput { return v.Routes }).(VnetRouteResponseArrayOutput)
}

// Resource tags
func (o SiteVNETConnectionSlotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o SiteVNETConnectionSlotOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The vnet resource id
func (o SiteVNETConnectionSlotOutput) VnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteVNETConnectionSlot) pulumi.StringPtrOutput { return v.VnetResourceId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SiteVNETConnectionSlotOutput{})
}
