// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// App certificate
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	var rv LookupCertificateResult
	err := ctx.Invoke("azure-native:web/v20150801:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCertificateArgs struct {
	// Name of the certificate.
	Name string `pulumi:"name"`
	// Name of the resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// App certificate
type LookupCertificateResult struct {
	// Raw bytes of .cer file
	CerBlob *string `pulumi:"cerBlob"`
	// Certificate expiration date
	ExpirationDate *string `pulumi:"expirationDate"`
	// Friendly name of the certificate
	FriendlyName *string `pulumi:"friendlyName"`
	// Host names the certificate applies to
	HostNames []string `pulumi:"hostNames"`
	// Specification for the hosting environment (App Service Environment) to use for the certificate
	HostingEnvironmentProfile *HostingEnvironmentProfileResponse `pulumi:"hostingEnvironmentProfile"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Certificate issue Date
	IssueDate *string `pulumi:"issueDate"`
	// Certificate issuer
	Issuer *string `pulumi:"issuer"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location string `pulumi:"location"`
	// Resource Name
	Name *string `pulumi:"name"`
	// Certificate password
	Password *string `pulumi:"password"`
	// Pfx blob
	PfxBlob *string `pulumi:"pfxBlob"`
	// Public key hash
	PublicKeyHash *string `pulumi:"publicKeyHash"`
	// Self link
	SelfLink *string `pulumi:"selfLink"`
	// App name
	SiteName *string `pulumi:"siteName"`
	// Subject name of the certificate
	SubjectName *string `pulumi:"subjectName"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Certificate thumbprint
	Thumbprint *string `pulumi:"thumbprint"`
	// Resource type
	Type *string `pulumi:"type"`
	// Is the certificate valid?
	Valid *bool `pulumi:"valid"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateResult, error) {
			args := v.(LookupCertificateArgs)
			r, err := LookupCertificate(ctx, &args, opts...)
			var s LookupCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCertificateResultOutput)
}

type LookupCertificateOutputArgs struct {
	// Name of the certificate.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the resource group
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

// App certificate
type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

// Raw bytes of .cer file
func (o LookupCertificateResultOutput) CerBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.CerBlob }).(pulumi.StringPtrOutput)
}

// Certificate expiration date
func (o LookupCertificateResultOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// Friendly name of the certificate
func (o LookupCertificateResultOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// Host names the certificate applies to
func (o LookupCertificateResultOutput) HostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []string { return v.HostNames }).(pulumi.StringArrayOutput)
}

// Specification for the hosting environment (App Service Environment) to use for the certificate
func (o LookupCertificateResultOutput) HostingEnvironmentProfile() HostingEnvironmentProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *HostingEnvironmentProfileResponse { return v.HostingEnvironmentProfile }).(HostingEnvironmentProfileResponsePtrOutput)
}

// Resource Id
func (o LookupCertificateResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Certificate issue Date
func (o LookupCertificateResultOutput) IssueDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.IssueDate }).(pulumi.StringPtrOutput)
}

// Certificate issuer
func (o LookupCertificateResultOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Kind of resource
func (o LookupCertificateResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o LookupCertificateResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o LookupCertificateResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Certificate password
func (o LookupCertificateResultOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Pfx blob
func (o LookupCertificateResultOutput) PfxBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.PfxBlob }).(pulumi.StringPtrOutput)
}

// Public key hash
func (o LookupCertificateResultOutput) PublicKeyHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.PublicKeyHash }).(pulumi.StringPtrOutput)
}

// Self link
func (o LookupCertificateResultOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// App name
func (o LookupCertificateResultOutput) SiteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.SiteName }).(pulumi.StringPtrOutput)
}

// Subject name of the certificate
func (o LookupCertificateResultOutput) SubjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.SubjectName }).(pulumi.StringPtrOutput)
}

// Resource tags
func (o LookupCertificateResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCertificateResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Certificate thumbprint
func (o LookupCertificateResultOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// Resource type
func (o LookupCertificateResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Is the certificate valid?
func (o LookupCertificateResultOutput) Valid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *bool { return v.Valid }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
