// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VNETInfo contract. This contract is public and is a stripped down version of VNETInfoInternal
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
func LookupSiteVNETConnectionSlot(ctx *pulumi.Context, args *LookupSiteVNETConnectionSlotArgs, opts ...pulumi.InvokeOption) (*LookupSiteVNETConnectionSlotResult, error) {
	var rv LookupSiteVNETConnectionSlotResult
	err := ctx.Invoke("azure-native:web/v20150801:getSiteVNETConnectionSlot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSiteVNETConnectionSlotArgs struct {
	// The name of the web app
	Name string `pulumi:"name"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the slot for this web app.
	Slot string `pulumi:"slot"`
	// The name of the Virtual Network
	VnetName string `pulumi:"vnetName"`
}

// VNETInfo contract. This contract is public and is a stripped down version of VNETInfoInternal
type LookupSiteVNETConnectionSlotResult struct {
	// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
	//             Point-To-Site VPN connection.
	CertBlob *string `pulumi:"certBlob"`
	// The client certificate thumbprint
	CertThumbprint *string `pulumi:"certThumbprint"`
	// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
	DnsServers *string `pulumi:"dnsServers"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location string `pulumi:"location"`
	// Resource Name
	Name *string `pulumi:"name"`
	// Flag to determine if a resync is required
	ResyncRequired *bool `pulumi:"resyncRequired"`
	// The routes that this virtual network connection uses.
	Routes []VnetRouteResponse `pulumi:"routes"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// The vnet resource id
	VnetResourceId *string `pulumi:"vnetResourceId"`
}

func LookupSiteVNETConnectionSlotOutput(ctx *pulumi.Context, args LookupSiteVNETConnectionSlotOutputArgs, opts ...pulumi.InvokeOption) LookupSiteVNETConnectionSlotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSiteVNETConnectionSlotResult, error) {
			args := v.(LookupSiteVNETConnectionSlotArgs)
			r, err := LookupSiteVNETConnectionSlot(ctx, &args, opts...)
			var s LookupSiteVNETConnectionSlotResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSiteVNETConnectionSlotResultOutput)
}

type LookupSiteVNETConnectionSlotOutputArgs struct {
	// The name of the web app
	Name pulumi.StringInput `pulumi:"name"`
	// The resource group name
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the slot for this web app.
	Slot pulumi.StringInput `pulumi:"slot"`
	// The name of the Virtual Network
	VnetName pulumi.StringInput `pulumi:"vnetName"`
}

func (LookupSiteVNETConnectionSlotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSiteVNETConnectionSlotArgs)(nil)).Elem()
}

// VNETInfo contract. This contract is public and is a stripped down version of VNETInfoInternal
type LookupSiteVNETConnectionSlotResultOutput struct{ *pulumi.OutputState }

func (LookupSiteVNETConnectionSlotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSiteVNETConnectionSlotResult)(nil)).Elem()
}

func (o LookupSiteVNETConnectionSlotResultOutput) ToLookupSiteVNETConnectionSlotResultOutput() LookupSiteVNETConnectionSlotResultOutput {
	return o
}

func (o LookupSiteVNETConnectionSlotResultOutput) ToLookupSiteVNETConnectionSlotResultOutputWithContext(ctx context.Context) LookupSiteVNETConnectionSlotResultOutput {
	return o
}

// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
//
//	Point-To-Site VPN connection.
func (o LookupSiteVNETConnectionSlotResultOutput) CertBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *string { return v.CertBlob }).(pulumi.StringPtrOutput)
}

// The client certificate thumbprint
func (o LookupSiteVNETConnectionSlotResultOutput) CertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *string { return v.CertThumbprint }).(pulumi.StringPtrOutput)
}

// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
func (o LookupSiteVNETConnectionSlotResultOutput) DnsServers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *string { return v.DnsServers }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o LookupSiteVNETConnectionSlotResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Kind of resource
func (o LookupSiteVNETConnectionSlotResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o LookupSiteVNETConnectionSlotResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o LookupSiteVNETConnectionSlotResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Flag to determine if a resync is required
func (o LookupSiteVNETConnectionSlotResultOutput) ResyncRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *bool { return v.ResyncRequired }).(pulumi.BoolPtrOutput)
}

// The routes that this virtual network connection uses.
func (o LookupSiteVNETConnectionSlotResultOutput) Routes() VnetRouteResponseArrayOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) []VnetRouteResponse { return v.Routes }).(VnetRouteResponseArrayOutput)
}

// Resource tags
func (o LookupSiteVNETConnectionSlotResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o LookupSiteVNETConnectionSlotResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The vnet resource id
func (o LookupSiteVNETConnectionSlotResultOutput) VnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteVNETConnectionSlotResult) *string { return v.VnetResourceId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSiteVNETConnectionSlotResultOutput{})
}
