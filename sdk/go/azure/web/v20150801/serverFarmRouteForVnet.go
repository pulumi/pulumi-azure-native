// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VnetRoute contract used to pass routing information for a vnet.
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
type ServerFarmRouteForVnet struct {
	pulumi.CustomResourceState

	// The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
	EndAddress pulumi.StringPtrOutput `pulumi:"endAddress"`
	// Kind of resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource Name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The type of route this is:
	//             DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918
	//             INHERITED - Routes inherited from the real Virtual Network routes
	//             STATIC - Static route set on the web app only
	//
	//             These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them
	//             with new INHERITED routes.
	RouteType pulumi.StringPtrOutput `pulumi:"routeType"`
	// The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
	StartAddress pulumi.StringPtrOutput `pulumi:"startAddress"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewServerFarmRouteForVnet registers a new resource with the given unique name, arguments, and options.
func NewServerFarmRouteForVnet(ctx *pulumi.Context,
	name string, args *ServerFarmRouteForVnetArgs, opts ...pulumi.ResourceOption) (*ServerFarmRouteForVnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VnetName == nil {
		return nil, errors.New("invalid value for required argument 'VnetName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:web:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20160901:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20180201:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20190801:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200601:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200901:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201001:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201201:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210101:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210115:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210201:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210301:ServerFarmRouteForVnet"),
		},
		{
			Type: pulumi.String("azure-native:web/v20220301:ServerFarmRouteForVnet"),
		},
	})
	opts = append(opts, aliases)
	var resource ServerFarmRouteForVnet
	err := ctx.RegisterResource("azure-native:web/v20150801:ServerFarmRouteForVnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerFarmRouteForVnet gets an existing ServerFarmRouteForVnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerFarmRouteForVnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerFarmRouteForVnetState, opts ...pulumi.ResourceOption) (*ServerFarmRouteForVnet, error) {
	var resource ServerFarmRouteForVnet
	err := ctx.ReadResource("azure-native:web/v20150801:ServerFarmRouteForVnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerFarmRouteForVnet resources.
type serverFarmRouteForVnetState struct {
}

type ServerFarmRouteForVnetState struct {
}

func (ServerFarmRouteForVnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverFarmRouteForVnetState)(nil)).Elem()
}

type serverFarmRouteForVnetArgs struct {
	// The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
	EndAddress *string `pulumi:"endAddress"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location *string `pulumi:"location"`
	// Resource Name
	Name string `pulumi:"name"`
	// Name of resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the virtual network route
	RouteName *string `pulumi:"routeName"`
	// The type of route this is:
	//             DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918
	//             INHERITED - Routes inherited from the real Virtual Network routes
	//             STATIC - Static route set on the web app only
	//
	//             These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them
	//             with new INHERITED routes.
	RouteType *string `pulumi:"routeType"`
	// The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
	StartAddress *string `pulumi:"startAddress"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// Name of virtual network
	VnetName string `pulumi:"vnetName"`
}

// The set of arguments for constructing a ServerFarmRouteForVnet resource.
type ServerFarmRouteForVnetArgs struct {
	// The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
	EndAddress pulumi.StringPtrInput
	// Resource Id
	Id pulumi.StringPtrInput
	// Kind of resource
	Kind pulumi.StringPtrInput
	// Resource Location
	Location pulumi.StringPtrInput
	// Resource Name
	Name pulumi.StringInput
	// Name of resource group
	ResourceGroupName pulumi.StringInput
	// Name of the virtual network route
	RouteName pulumi.StringPtrInput
	// The type of route this is:
	//             DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918
	//             INHERITED - Routes inherited from the real Virtual Network routes
	//             STATIC - Static route set on the web app only
	//
	//             These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them
	//             with new INHERITED routes.
	RouteType pulumi.StringPtrInput
	// The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
	StartAddress pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
	// Name of virtual network
	VnetName pulumi.StringInput
}

func (ServerFarmRouteForVnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverFarmRouteForVnetArgs)(nil)).Elem()
}

type ServerFarmRouteForVnetInput interface {
	pulumi.Input

	ToServerFarmRouteForVnetOutput() ServerFarmRouteForVnetOutput
	ToServerFarmRouteForVnetOutputWithContext(ctx context.Context) ServerFarmRouteForVnetOutput
}

func (*ServerFarmRouteForVnet) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerFarmRouteForVnet)(nil)).Elem()
}

func (i *ServerFarmRouteForVnet) ToServerFarmRouteForVnetOutput() ServerFarmRouteForVnetOutput {
	return i.ToServerFarmRouteForVnetOutputWithContext(context.Background())
}

func (i *ServerFarmRouteForVnet) ToServerFarmRouteForVnetOutputWithContext(ctx context.Context) ServerFarmRouteForVnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerFarmRouteForVnetOutput)
}

type ServerFarmRouteForVnetOutput struct{ *pulumi.OutputState }

func (ServerFarmRouteForVnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerFarmRouteForVnet)(nil)).Elem()
}

func (o ServerFarmRouteForVnetOutput) ToServerFarmRouteForVnetOutput() ServerFarmRouteForVnetOutput {
	return o
}

func (o ServerFarmRouteForVnetOutput) ToServerFarmRouteForVnetOutputWithContext(ctx context.Context) ServerFarmRouteForVnetOutput {
	return o
}

// The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
func (o ServerFarmRouteForVnetOutput) EndAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarmRouteForVnet) pulumi.StringPtrOutput { return v.EndAddress }).(pulumi.StringPtrOutput)
}

// Kind of resource
func (o ServerFarmRouteForVnetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarmRouteForVnet) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o ServerFarmRouteForVnetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerFarmRouteForVnet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o ServerFarmRouteForVnetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarmRouteForVnet) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of route this is:
//
//	DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918
//	INHERITED - Routes inherited from the real Virtual Network routes
//	STATIC - Static route set on the web app only
//
//	These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them
//	with new INHERITED routes.
func (o ServerFarmRouteForVnetOutput) RouteType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarmRouteForVnet) pulumi.StringPtrOutput { return v.RouteType }).(pulumi.StringPtrOutput)
}

// The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
func (o ServerFarmRouteForVnetOutput) StartAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarmRouteForVnet) pulumi.StringPtrOutput { return v.StartAddress }).(pulumi.StringPtrOutput)
}

// Resource tags
func (o ServerFarmRouteForVnetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerFarmRouteForVnet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o ServerFarmRouteForVnetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarmRouteForVnet) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerFarmRouteForVnetOutput{})
}
