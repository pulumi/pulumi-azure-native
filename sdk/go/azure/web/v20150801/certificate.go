// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// App certificate
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
type Certificate struct {
	pulumi.CustomResourceState

	// Raw bytes of .cer file
	CerBlob pulumi.StringPtrOutput `pulumi:"cerBlob"`
	// Certificate expiration date
	ExpirationDate pulumi.StringPtrOutput `pulumi:"expirationDate"`
	// Friendly name of the certificate
	FriendlyName pulumi.StringPtrOutput `pulumi:"friendlyName"`
	// Host names the certificate applies to
	HostNames pulumi.StringArrayOutput `pulumi:"hostNames"`
	// Specification for the hosting environment (App Service Environment) to use for the certificate
	HostingEnvironmentProfile HostingEnvironmentProfileResponsePtrOutput `pulumi:"hostingEnvironmentProfile"`
	// Certificate issue Date
	IssueDate pulumi.StringPtrOutput `pulumi:"issueDate"`
	// Certificate issuer
	Issuer pulumi.StringPtrOutput `pulumi:"issuer"`
	// Kind of resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource Name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Certificate password
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Pfx blob
	PfxBlob pulumi.StringPtrOutput `pulumi:"pfxBlob"`
	// Public key hash
	PublicKeyHash pulumi.StringPtrOutput `pulumi:"publicKeyHash"`
	// Self link
	SelfLink pulumi.StringPtrOutput `pulumi:"selfLink"`
	// App name
	SiteName pulumi.StringPtrOutput `pulumi:"siteName"`
	// Subject name of the certificate
	SubjectName pulumi.StringPtrOutput `pulumi:"subjectName"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Certificate thumbprint
	Thumbprint pulumi.StringPtrOutput `pulumi:"thumbprint"`
	// Resource type
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Is the certificate valid?
	Valid pulumi.BoolPtrOutput `pulumi:"valid"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:web:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20160301:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20180201:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20181101:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20190801:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200601:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200901:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201001:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201201:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210101:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210115:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210201:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210301:Certificate"),
		},
		{
			Type: pulumi.String("azure-native:web/v20220301:Certificate"),
		},
	})
	opts = append(opts, aliases)
	var resource Certificate
	err := ctx.RegisterResource("azure-native:web/v20150801:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("azure-native:web/v20150801:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
}

type CertificateState struct {
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Raw bytes of .cer file
	CerBlob *string `pulumi:"cerBlob"`
	// Certificate expiration date
	ExpirationDate *string `pulumi:"expirationDate"`
	// Friendly name of the certificate
	FriendlyName *string `pulumi:"friendlyName"`
	// Host names the certificate applies to
	HostNames []string `pulumi:"hostNames"`
	// Specification for the hosting environment (App Service Environment) to use for the certificate
	HostingEnvironmentProfile *HostingEnvironmentProfile `pulumi:"hostingEnvironmentProfile"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Certificate issue Date
	IssueDate *string `pulumi:"issueDate"`
	// Certificate issuer
	Issuer *string `pulumi:"issuer"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location *string `pulumi:"location"`
	// Resource Name
	Name *string `pulumi:"name"`
	// Certificate password
	Password *string `pulumi:"password"`
	// Pfx blob
	PfxBlob *string `pulumi:"pfxBlob"`
	// Public key hash
	PublicKeyHash *string `pulumi:"publicKeyHash"`
	// Name of the resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Self link
	SelfLink *string `pulumi:"selfLink"`
	// App name
	SiteName *string `pulumi:"siteName"`
	// Subject name of the certificate
	SubjectName *string `pulumi:"subjectName"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Certificate thumbprint
	Thumbprint *string `pulumi:"thumbprint"`
	// Resource type
	Type *string `pulumi:"type"`
	// Is the certificate valid?
	Valid *bool `pulumi:"valid"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Raw bytes of .cer file
	CerBlob pulumi.StringPtrInput
	// Certificate expiration date
	ExpirationDate pulumi.StringPtrInput
	// Friendly name of the certificate
	FriendlyName pulumi.StringPtrInput
	// Host names the certificate applies to
	HostNames pulumi.StringArrayInput
	// Specification for the hosting environment (App Service Environment) to use for the certificate
	HostingEnvironmentProfile HostingEnvironmentProfilePtrInput
	// Resource Id
	Id pulumi.StringPtrInput
	// Certificate issue Date
	IssueDate pulumi.StringPtrInput
	// Certificate issuer
	Issuer pulumi.StringPtrInput
	// Kind of resource
	Kind pulumi.StringPtrInput
	// Resource Location
	Location pulumi.StringPtrInput
	// Resource Name
	Name pulumi.StringPtrInput
	// Certificate password
	Password pulumi.StringPtrInput
	// Pfx blob
	PfxBlob pulumi.StringPtrInput
	// Public key hash
	PublicKeyHash pulumi.StringPtrInput
	// Name of the resource group
	ResourceGroupName pulumi.StringInput
	// Self link
	SelfLink pulumi.StringPtrInput
	// App name
	SiteName pulumi.StringPtrInput
	// Subject name of the certificate
	SubjectName pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Certificate thumbprint
	Thumbprint pulumi.StringPtrInput
	// Resource type
	Type pulumi.StringPtrInput
	// Is the certificate valid?
	Valid pulumi.BoolPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// Raw bytes of .cer file
func (o CertificateOutput) CerBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.CerBlob }).(pulumi.StringPtrOutput)
}

// Certificate expiration date
func (o CertificateOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// Friendly name of the certificate
func (o CertificateOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// Host names the certificate applies to
func (o CertificateOutput) HostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.HostNames }).(pulumi.StringArrayOutput)
}

// Specification for the hosting environment (App Service Environment) to use for the certificate
func (o CertificateOutput) HostingEnvironmentProfile() HostingEnvironmentProfileResponsePtrOutput {
	return o.ApplyT(func(v *Certificate) HostingEnvironmentProfileResponsePtrOutput { return v.HostingEnvironmentProfile }).(HostingEnvironmentProfileResponsePtrOutput)
}

// Certificate issue Date
func (o CertificateOutput) IssueDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.IssueDate }).(pulumi.StringPtrOutput)
}

// Certificate issuer
func (o CertificateOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Kind of resource
func (o CertificateOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o CertificateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o CertificateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Certificate password
func (o CertificateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Pfx blob
func (o CertificateOutput) PfxBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.PfxBlob }).(pulumi.StringPtrOutput)
}

// Public key hash
func (o CertificateOutput) PublicKeyHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.PublicKeyHash }).(pulumi.StringPtrOutput)
}

// Self link
func (o CertificateOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// App name
func (o CertificateOutput) SiteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.SiteName }).(pulumi.StringPtrOutput)
}

// Subject name of the certificate
func (o CertificateOutput) SubjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.SubjectName }).(pulumi.StringPtrOutput)
}

// Resource tags
func (o CertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Certificate thumbprint
func (o CertificateOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// Resource type
func (o CertificateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Is the certificate valid?
func (o CertificateOutput) Valid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolPtrOutput { return v.Valid }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
}
