// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the source control configuration for web app
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
type SiteSourceControlSlot struct {
	pulumi.CustomResourceState

	// Name of branch to use for deployment
	Branch pulumi.StringPtrOutput `pulumi:"branch"`
	// Whether to manual or continuous integration
	DeploymentRollbackEnabled pulumi.BoolPtrOutput `pulumi:"deploymentRollbackEnabled"`
	// Whether to manual or continuous integration
	IsManualIntegration pulumi.BoolPtrOutput `pulumi:"isManualIntegration"`
	// Mercurial or Git repository type
	IsMercurial pulumi.BoolPtrOutput `pulumi:"isMercurial"`
	// Kind of resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource Name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Repository or source control url
	RepoUrl pulumi.StringPtrOutput `pulumi:"repoUrl"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewSiteSourceControlSlot registers a new resource with the given unique name, arguments, and options.
func NewSiteSourceControlSlot(ctx *pulumi.Context,
	name string, args *SiteSourceControlSlotArgs, opts ...pulumi.ResourceOption) (*SiteSourceControlSlot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Slot == nil {
		return nil, errors.New("invalid value for required argument 'Slot'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:web:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20160801:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20180201:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20181101:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20190801:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200601:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200901:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201001:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201201:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210101:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210115:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210201:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210301:SiteSourceControlSlot"),
		},
		{
			Type: pulumi.String("azure-native:web/v20220301:SiteSourceControlSlot"),
		},
	})
	opts = append(opts, aliases)
	var resource SiteSourceControlSlot
	err := ctx.RegisterResource("azure-native:web/v20150801:SiteSourceControlSlot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSiteSourceControlSlot gets an existing SiteSourceControlSlot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSiteSourceControlSlot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteSourceControlSlotState, opts ...pulumi.ResourceOption) (*SiteSourceControlSlot, error) {
	var resource SiteSourceControlSlot
	err := ctx.ReadResource("azure-native:web/v20150801:SiteSourceControlSlot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SiteSourceControlSlot resources.
type siteSourceControlSlotState struct {
}

type SiteSourceControlSlotState struct {
}

func (SiteSourceControlSlotState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteSourceControlSlotState)(nil)).Elem()
}

type siteSourceControlSlotArgs struct {
	// Name of branch to use for deployment
	Branch *string `pulumi:"branch"`
	// Whether to manual or continuous integration
	DeploymentRollbackEnabled *bool `pulumi:"deploymentRollbackEnabled"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Whether to manual or continuous integration
	IsManualIntegration *bool `pulumi:"isManualIntegration"`
	// Mercurial or Git repository type
	IsMercurial *bool `pulumi:"isMercurial"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location *string `pulumi:"location"`
	// Resource Name
	Name string `pulumi:"name"`
	// Repository or source control url
	RepoUrl *string `pulumi:"repoUrl"`
	// Name of resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of web app slot. If not specified then will default to production slot.
	Slot string `pulumi:"slot"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a SiteSourceControlSlot resource.
type SiteSourceControlSlotArgs struct {
	// Name of branch to use for deployment
	Branch pulumi.StringPtrInput
	// Whether to manual or continuous integration
	DeploymentRollbackEnabled pulumi.BoolPtrInput
	// Resource Id
	Id pulumi.StringPtrInput
	// Whether to manual or continuous integration
	IsManualIntegration pulumi.BoolPtrInput
	// Mercurial or Git repository type
	IsMercurial pulumi.BoolPtrInput
	// Kind of resource
	Kind pulumi.StringPtrInput
	// Resource Location
	Location pulumi.StringPtrInput
	// Resource Name
	Name pulumi.StringInput
	// Repository or source control url
	RepoUrl pulumi.StringPtrInput
	// Name of resource group
	ResourceGroupName pulumi.StringInput
	// Name of web app slot. If not specified then will default to production slot.
	Slot pulumi.StringInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (SiteSourceControlSlotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteSourceControlSlotArgs)(nil)).Elem()
}

type SiteSourceControlSlotInput interface {
	pulumi.Input

	ToSiteSourceControlSlotOutput() SiteSourceControlSlotOutput
	ToSiteSourceControlSlotOutputWithContext(ctx context.Context) SiteSourceControlSlotOutput
}

func (*SiteSourceControlSlot) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteSourceControlSlot)(nil)).Elem()
}

func (i *SiteSourceControlSlot) ToSiteSourceControlSlotOutput() SiteSourceControlSlotOutput {
	return i.ToSiteSourceControlSlotOutputWithContext(context.Background())
}

func (i *SiteSourceControlSlot) ToSiteSourceControlSlotOutputWithContext(ctx context.Context) SiteSourceControlSlotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteSourceControlSlotOutput)
}

type SiteSourceControlSlotOutput struct{ *pulumi.OutputState }

func (SiteSourceControlSlotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteSourceControlSlot)(nil)).Elem()
}

func (o SiteSourceControlSlotOutput) ToSiteSourceControlSlotOutput() SiteSourceControlSlotOutput {
	return o
}

func (o SiteSourceControlSlotOutput) ToSiteSourceControlSlotOutputWithContext(ctx context.Context) SiteSourceControlSlotOutput {
	return o
}

// Name of branch to use for deployment
func (o SiteSourceControlSlotOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

// Whether to manual or continuous integration
func (o SiteSourceControlSlotOutput) DeploymentRollbackEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.BoolPtrOutput { return v.DeploymentRollbackEnabled }).(pulumi.BoolPtrOutput)
}

// Whether to manual or continuous integration
func (o SiteSourceControlSlotOutput) IsManualIntegration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.BoolPtrOutput { return v.IsManualIntegration }).(pulumi.BoolPtrOutput)
}

// Mercurial or Git repository type
func (o SiteSourceControlSlotOutput) IsMercurial() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.BoolPtrOutput { return v.IsMercurial }).(pulumi.BoolPtrOutput)
}

// Kind of resource
func (o SiteSourceControlSlotOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o SiteSourceControlSlotOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o SiteSourceControlSlotOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Repository or source control url
func (o SiteSourceControlSlotOutput) RepoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.StringPtrOutput { return v.RepoUrl }).(pulumi.StringPtrOutput)
}

// Resource tags
func (o SiteSourceControlSlotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o SiteSourceControlSlotOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteSourceControlSlot) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SiteSourceControlSlotOutput{})
}
