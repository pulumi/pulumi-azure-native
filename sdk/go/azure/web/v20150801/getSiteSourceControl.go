// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the source control configuration for web app
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
func LookupSiteSourceControl(ctx *pulumi.Context, args *LookupSiteSourceControlArgs, opts ...pulumi.InvokeOption) (*LookupSiteSourceControlResult, error) {
	var rv LookupSiteSourceControlResult
	err := ctx.Invoke("azure-native:web/v20150801:getSiteSourceControl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSiteSourceControlArgs struct {
	// Name of web app
	Name string `pulumi:"name"`
	// Name of resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Describes the source control configuration for web app
type LookupSiteSourceControlResult struct {
	// Name of branch to use for deployment
	Branch *string `pulumi:"branch"`
	// Whether to manual or continuous integration
	DeploymentRollbackEnabled *bool `pulumi:"deploymentRollbackEnabled"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Whether to manual or continuous integration
	IsManualIntegration *bool `pulumi:"isManualIntegration"`
	// Mercurial or Git repository type
	IsMercurial *bool `pulumi:"isMercurial"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location string `pulumi:"location"`
	// Resource Name
	Name *string `pulumi:"name"`
	// Repository or source control url
	RepoUrl *string `pulumi:"repoUrl"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

func LookupSiteSourceControlOutput(ctx *pulumi.Context, args LookupSiteSourceControlOutputArgs, opts ...pulumi.InvokeOption) LookupSiteSourceControlResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSiteSourceControlResult, error) {
			args := v.(LookupSiteSourceControlArgs)
			r, err := LookupSiteSourceControl(ctx, &args, opts...)
			var s LookupSiteSourceControlResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSiteSourceControlResultOutput)
}

type LookupSiteSourceControlOutputArgs struct {
	// Name of web app
	Name pulumi.StringInput `pulumi:"name"`
	// Name of resource group
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupSiteSourceControlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSiteSourceControlArgs)(nil)).Elem()
}

// Describes the source control configuration for web app
type LookupSiteSourceControlResultOutput struct{ *pulumi.OutputState }

func (LookupSiteSourceControlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSiteSourceControlResult)(nil)).Elem()
}

func (o LookupSiteSourceControlResultOutput) ToLookupSiteSourceControlResultOutput() LookupSiteSourceControlResultOutput {
	return o
}

func (o LookupSiteSourceControlResultOutput) ToLookupSiteSourceControlResultOutputWithContext(ctx context.Context) LookupSiteSourceControlResultOutput {
	return o
}

// Name of branch to use for deployment
func (o LookupSiteSourceControlResultOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Whether to manual or continuous integration
func (o LookupSiteSourceControlResultOutput) DeploymentRollbackEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *bool { return v.DeploymentRollbackEnabled }).(pulumi.BoolPtrOutput)
}

// Resource Id
func (o LookupSiteSourceControlResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Whether to manual or continuous integration
func (o LookupSiteSourceControlResultOutput) IsManualIntegration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *bool { return v.IsManualIntegration }).(pulumi.BoolPtrOutput)
}

// Mercurial or Git repository type
func (o LookupSiteSourceControlResultOutput) IsMercurial() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *bool { return v.IsMercurial }).(pulumi.BoolPtrOutput)
}

// Kind of resource
func (o LookupSiteSourceControlResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o LookupSiteSourceControlResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o LookupSiteSourceControlResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Repository or source control url
func (o LookupSiteSourceControlResultOutput) RepoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *string { return v.RepoUrl }).(pulumi.StringPtrOutput)
}

// Resource tags
func (o LookupSiteSourceControlResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o LookupSiteSourceControlResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteSourceControlResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSiteSourceControlResultOutput{})
}
