// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// App Service Plan Model
//
// Deprecated: Version 2015-08-01 will be removed in v2 of the provider.
type ServerFarm struct {
	pulumi.CustomResourceState

	// App Service Plan administration site
	AdminSiteName pulumi.StringPtrOutput `pulumi:"adminSiteName"`
	// Geographical location for the App Service Plan
	GeoRegion pulumi.StringOutput `pulumi:"geoRegion"`
	// Specification for the hosting environment (App Service Environment) to use for the App Service Plan
	HostingEnvironmentProfile HostingEnvironmentProfileResponsePtrOutput `pulumi:"hostingEnvironmentProfile"`
	// Kind of resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Location
	Location pulumi.StringOutput `pulumi:"location"`
	// Maximum number of instances that can be assigned to this App Service Plan
	MaximumNumberOfWorkers pulumi.IntPtrOutput `pulumi:"maximumNumberOfWorkers"`
	// Resource Name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Number of web apps assigned to this App Service Plan
	NumberOfSites pulumi.IntOutput `pulumi:"numberOfSites"`
	// If True apps assigned to this App Service Plan can be scaled independently
	//             If False apps assigned to this App Service Plan will scale to all instances of the plan
	PerSiteScaling pulumi.BoolPtrOutput `pulumi:"perSiteScaling"`
	// Enables creation of a Linux App Service Plan
	Reserved pulumi.BoolPtrOutput `pulumi:"reserved"`
	// Resource group of the server farm
	ResourceGroup pulumi.StringOutput `pulumi:"resourceGroup"`
	// Describes a sku for a scalable resource
	Sku SkuDescriptionResponsePtrOutput `pulumi:"sku"`
	// App Service Plan Status
	Status pulumi.StringOutput `pulumi:"status"`
	// App Service Plan Subscription
	Subscription pulumi.StringOutput `pulumi:"subscription"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Target worker tier assigned to the App Service Plan
	WorkerTierName pulumi.StringPtrOutput `pulumi:"workerTierName"`
}

// NewServerFarm registers a new resource with the given unique name, arguments, and options.
func NewServerFarm(ctx *pulumi.Context,
	name string, args *ServerFarmArgs, opts ...pulumi.ResourceOption) (*ServerFarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:web:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20160901:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20180201:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20190801:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200601:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20200901:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201001:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20201201:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210101:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210115:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210201:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20210301:ServerFarm"),
		},
		{
			Type: pulumi.String("azure-native:web/v20220301:ServerFarm"),
		},
	})
	opts = append(opts, aliases)
	var resource ServerFarm
	err := ctx.RegisterResource("azure-native:web/v20150801:ServerFarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerFarm gets an existing ServerFarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerFarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerFarmState, opts ...pulumi.ResourceOption) (*ServerFarm, error) {
	var resource ServerFarm
	err := ctx.ReadResource("azure-native:web/v20150801:ServerFarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerFarm resources.
type serverFarmState struct {
}

type ServerFarmState struct {
}

func (ServerFarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverFarmState)(nil)).Elem()
}

type serverFarmArgs struct {
	// App Service Plan administration site
	AdminSiteName *string `pulumi:"adminSiteName"`
	// OBSOLETE: If true, allow pending state for App Service Plan
	AllowPendingState *bool `pulumi:"allowPendingState"`
	// Specification for the hosting environment (App Service Environment) to use for the App Service Plan
	HostingEnvironmentProfile *HostingEnvironmentProfile `pulumi:"hostingEnvironmentProfile"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Kind of resource
	Kind *string `pulumi:"kind"`
	// Resource Location
	Location *string `pulumi:"location"`
	// Maximum number of instances that can be assigned to this App Service Plan
	MaximumNumberOfWorkers *int `pulumi:"maximumNumberOfWorkers"`
	// Resource Name
	Name *string `pulumi:"name"`
	// If True apps assigned to this App Service Plan can be scaled independently
	//             If False apps assigned to this App Service Plan will scale to all instances of the plan
	PerSiteScaling *bool `pulumi:"perSiteScaling"`
	// Enables creation of a Linux App Service Plan
	Reserved *bool `pulumi:"reserved"`
	// Name of resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Describes a sku for a scalable resource
	Sku *SkuDescription `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// Target worker tier assigned to the App Service Plan
	WorkerTierName *string `pulumi:"workerTierName"`
}

// The set of arguments for constructing a ServerFarm resource.
type ServerFarmArgs struct {
	// App Service Plan administration site
	AdminSiteName pulumi.StringPtrInput
	// OBSOLETE: If true, allow pending state for App Service Plan
	AllowPendingState pulumi.BoolPtrInput
	// Specification for the hosting environment (App Service Environment) to use for the App Service Plan
	HostingEnvironmentProfile HostingEnvironmentProfilePtrInput
	// Resource Id
	Id pulumi.StringPtrInput
	// Kind of resource
	Kind pulumi.StringPtrInput
	// Resource Location
	Location pulumi.StringPtrInput
	// Maximum number of instances that can be assigned to this App Service Plan
	MaximumNumberOfWorkers pulumi.IntPtrInput
	// Resource Name
	Name pulumi.StringPtrInput
	// If True apps assigned to this App Service Plan can be scaled independently
	//             If False apps assigned to this App Service Plan will scale to all instances of the plan
	PerSiteScaling pulumi.BoolPtrInput
	// Enables creation of a Linux App Service Plan
	Reserved pulumi.BoolPtrInput
	// Name of resource group
	ResourceGroupName pulumi.StringInput
	// Describes a sku for a scalable resource
	Sku SkuDescriptionPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
	// Target worker tier assigned to the App Service Plan
	WorkerTierName pulumi.StringPtrInput
}

func (ServerFarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverFarmArgs)(nil)).Elem()
}

type ServerFarmInput interface {
	pulumi.Input

	ToServerFarmOutput() ServerFarmOutput
	ToServerFarmOutputWithContext(ctx context.Context) ServerFarmOutput
}

func (*ServerFarm) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerFarm)(nil)).Elem()
}

func (i *ServerFarm) ToServerFarmOutput() ServerFarmOutput {
	return i.ToServerFarmOutputWithContext(context.Background())
}

func (i *ServerFarm) ToServerFarmOutputWithContext(ctx context.Context) ServerFarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerFarmOutput)
}

type ServerFarmOutput struct{ *pulumi.OutputState }

func (ServerFarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerFarm)(nil)).Elem()
}

func (o ServerFarmOutput) ToServerFarmOutput() ServerFarmOutput {
	return o
}

func (o ServerFarmOutput) ToServerFarmOutputWithContext(ctx context.Context) ServerFarmOutput {
	return o
}

// App Service Plan administration site
func (o ServerFarmOutput) AdminSiteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringPtrOutput { return v.AdminSiteName }).(pulumi.StringPtrOutput)
}

// Geographical location for the App Service Plan
func (o ServerFarmOutput) GeoRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringOutput { return v.GeoRegion }).(pulumi.StringOutput)
}

// Specification for the hosting environment (App Service Environment) to use for the App Service Plan
func (o ServerFarmOutput) HostingEnvironmentProfile() HostingEnvironmentProfileResponsePtrOutput {
	return o.ApplyT(func(v *ServerFarm) HostingEnvironmentProfileResponsePtrOutput { return v.HostingEnvironmentProfile }).(HostingEnvironmentProfileResponsePtrOutput)
}

// Kind of resource
func (o ServerFarmOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location
func (o ServerFarmOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maximum number of instances that can be assigned to this App Service Plan
func (o ServerFarmOutput) MaximumNumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.IntPtrOutput { return v.MaximumNumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Resource Name
func (o ServerFarmOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Number of web apps assigned to this App Service Plan
func (o ServerFarmOutput) NumberOfSites() pulumi.IntOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.IntOutput { return v.NumberOfSites }).(pulumi.IntOutput)
}

// If True apps assigned to this App Service Plan can be scaled independently
//
//	If False apps assigned to this App Service Plan will scale to all instances of the plan
func (o ServerFarmOutput) PerSiteScaling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.BoolPtrOutput { return v.PerSiteScaling }).(pulumi.BoolPtrOutput)
}

// Enables creation of a Linux App Service Plan
func (o ServerFarmOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.BoolPtrOutput { return v.Reserved }).(pulumi.BoolPtrOutput)
}

// Resource group of the server farm
func (o ServerFarmOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringOutput { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Describes a sku for a scalable resource
func (o ServerFarmOutput) Sku() SkuDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *ServerFarm) SkuDescriptionResponsePtrOutput { return v.Sku }).(SkuDescriptionResponsePtrOutput)
}

// App Service Plan Status
func (o ServerFarmOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// App Service Plan Subscription
func (o ServerFarmOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringOutput { return v.Subscription }).(pulumi.StringOutput)
}

// Resource tags
func (o ServerFarmOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o ServerFarmOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Target worker tier assigned to the App Service Plan
func (o ServerFarmOutput) WorkerTierName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerFarm) pulumi.StringPtrOutput { return v.WorkerTierName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerFarmOutput{})
}
