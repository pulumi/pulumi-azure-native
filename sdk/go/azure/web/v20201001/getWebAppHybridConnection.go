// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Hybrid Connection contract. This is used to configure a Hybrid Connection.
func LookupWebAppHybridConnection(ctx *pulumi.Context, args *LookupWebAppHybridConnectionArgs, opts ...pulumi.InvokeOption) (*LookupWebAppHybridConnectionResult, error) {
	var rv LookupWebAppHybridConnectionResult
	err := ctx.Invoke("azure-native:web/v20201001:getWebAppHybridConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWebAppHybridConnectionArgs struct {
	// The name of the web app.
	Name string `pulumi:"name"`
	// The namespace for this hybrid connection.
	NamespaceName string `pulumi:"namespaceName"`
	// The relay name for this hybrid connection.
	RelayName string `pulumi:"relayName"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Hybrid Connection contract. This is used to configure a Hybrid Connection.
type LookupWebAppHybridConnectionResult struct {
	// The hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// The port of the endpoint.
	Port *int `pulumi:"port"`
	// The ARM URI to the Service Bus relay.
	RelayArmUri *string `pulumi:"relayArmUri"`
	// The name of the Service Bus relay.
	RelayName *string `pulumi:"relayName"`
	// The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.
	SendKeyName *string `pulumi:"sendKeyName"`
	// The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned
	// normally, use the POST /listKeys API instead.
	SendKeyValue *string `pulumi:"sendKeyValue"`
	// The name of the Service Bus namespace.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The suffix for the service bus endpoint. By default this is .servicebus.windows.net
	ServiceBusSuffix *string `pulumi:"serviceBusSuffix"`
	// The system metadata relating to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupWebAppHybridConnectionOutput(ctx *pulumi.Context, args LookupWebAppHybridConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupWebAppHybridConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWebAppHybridConnectionResult, error) {
			args := v.(LookupWebAppHybridConnectionArgs)
			r, err := LookupWebAppHybridConnection(ctx, &args, opts...)
			var s LookupWebAppHybridConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWebAppHybridConnectionResultOutput)
}

type LookupWebAppHybridConnectionOutputArgs struct {
	// The name of the web app.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace for this hybrid connection.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// The relay name for this hybrid connection.
	RelayName pulumi.StringInput `pulumi:"relayName"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupWebAppHybridConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWebAppHybridConnectionArgs)(nil)).Elem()
}

// Hybrid Connection contract. This is used to configure a Hybrid Connection.
type LookupWebAppHybridConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupWebAppHybridConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWebAppHybridConnectionResult)(nil)).Elem()
}

func (o LookupWebAppHybridConnectionResultOutput) ToLookupWebAppHybridConnectionResultOutput() LookupWebAppHybridConnectionResultOutput {
	return o
}

func (o LookupWebAppHybridConnectionResultOutput) ToLookupWebAppHybridConnectionResultOutputWithContext(ctx context.Context) LookupWebAppHybridConnectionResultOutput {
	return o
}

// The hostname of the endpoint.
func (o LookupWebAppHybridConnectionResultOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Resource Id.
func (o LookupWebAppHybridConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o LookupWebAppHybridConnectionResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o LookupWebAppHybridConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The port of the endpoint.
func (o LookupWebAppHybridConnectionResultOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The ARM URI to the Service Bus relay.
func (o LookupWebAppHybridConnectionResultOutput) RelayArmUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *string { return v.RelayArmUri }).(pulumi.StringPtrOutput)
}

// The name of the Service Bus relay.
func (o LookupWebAppHybridConnectionResultOutput) RelayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *string { return v.RelayName }).(pulumi.StringPtrOutput)
}

// The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.
func (o LookupWebAppHybridConnectionResultOutput) SendKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *string { return v.SendKeyName }).(pulumi.StringPtrOutput)
}

// The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned
// normally, use the POST /listKeys API instead.
func (o LookupWebAppHybridConnectionResultOutput) SendKeyValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *string { return v.SendKeyValue }).(pulumi.StringPtrOutput)
}

// The name of the Service Bus namespace.
func (o LookupWebAppHybridConnectionResultOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The suffix for the service bus endpoint. By default this is .servicebus.windows.net
func (o LookupWebAppHybridConnectionResultOutput) ServiceBusSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) *string { return v.ServiceBusSuffix }).(pulumi.StringPtrOutput)
}

// The system metadata relating to this resource.
func (o LookupWebAppHybridConnectionResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource type.
func (o LookupWebAppHybridConnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppHybridConnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWebAppHybridConnectionResultOutput{})
}
