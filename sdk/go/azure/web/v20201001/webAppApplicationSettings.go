// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// String dictionary resource.
type WebAppApplicationSettings struct {
	pulumi.CustomResourceState

	// Kind of resource.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Settings.
	Properties pulumi.StringMapOutput `pulumi:"properties"`
	// The system metadata relating to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWebAppApplicationSettings registers a new resource with the given unique name, arguments, and options.
func NewWebAppApplicationSettings(ctx *pulumi.Context,
	name string, args *WebAppApplicationSettingsArgs, opts ...pulumi.ResourceOption) (*WebAppApplicationSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:web:WebAppApplicationSettings"),
		},
		{
			Type: pulumi.String("azure-nextgen:web/latest:WebAppApplicationSettings"),
		},
		{
			Type: pulumi.String("azure-nextgen:web/v20150801:WebAppApplicationSettings"),
		},
		{
			Type: pulumi.String("azure-nextgen:web/v20160801:WebAppApplicationSettings"),
		},
		{
			Type: pulumi.String("azure-nextgen:web/v20180201:WebAppApplicationSettings"),
		},
		{
			Type: pulumi.String("azure-nextgen:web/v20181101:WebAppApplicationSettings"),
		},
		{
			Type: pulumi.String("azure-nextgen:web/v20190801:WebAppApplicationSettings"),
		},
		{
			Type: pulumi.String("azure-nextgen:web/v20200601:WebAppApplicationSettings"),
		},
		{
			Type: pulumi.String("azure-nextgen:web/v20200901:WebAppApplicationSettings"),
		},
	})
	opts = append(opts, aliases)
	var resource WebAppApplicationSettings
	err := ctx.RegisterResource("azure-nextgen:web/v20201001:WebAppApplicationSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppApplicationSettings gets an existing WebAppApplicationSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppApplicationSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppApplicationSettingsState, opts ...pulumi.ResourceOption) (*WebAppApplicationSettings, error) {
	var resource WebAppApplicationSettings
	err := ctx.ReadResource("azure-nextgen:web/v20201001:WebAppApplicationSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppApplicationSettings resources.
type webAppApplicationSettingsState struct {
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name *string `pulumi:"name"`
	// Settings.
	Properties map[string]string `pulumi:"properties"`
	// The system metadata relating to this resource.
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type WebAppApplicationSettingsState struct {
	// Kind of resource.
	Kind pulumi.StringPtrInput
	// Resource Name.
	Name pulumi.StringPtrInput
	// Settings.
	Properties pulumi.StringMapInput
	// The system metadata relating to this resource.
	SystemData SystemDataResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (WebAppApplicationSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppApplicationSettingsState)(nil)).Elem()
}

type webAppApplicationSettingsArgs struct {
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Name of the app.
	Name string `pulumi:"name"`
	// Settings.
	Properties map[string]string `pulumi:"properties"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a WebAppApplicationSettings resource.
type WebAppApplicationSettingsArgs struct {
	// Kind of resource.
	Kind pulumi.StringPtrInput
	// Name of the app.
	Name pulumi.StringInput
	// Settings.
	Properties pulumi.StringMapInput
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput
}

func (WebAppApplicationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppApplicationSettingsArgs)(nil)).Elem()
}

type WebAppApplicationSettingsInput interface {
	pulumi.Input

	ToWebAppApplicationSettingsOutput() WebAppApplicationSettingsOutput
	ToWebAppApplicationSettingsOutputWithContext(ctx context.Context) WebAppApplicationSettingsOutput
}

func (*WebAppApplicationSettings) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAppApplicationSettings)(nil))
}

func (i *WebAppApplicationSettings) ToWebAppApplicationSettingsOutput() WebAppApplicationSettingsOutput {
	return i.ToWebAppApplicationSettingsOutputWithContext(context.Background())
}

func (i *WebAppApplicationSettings) ToWebAppApplicationSettingsOutputWithContext(ctx context.Context) WebAppApplicationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppApplicationSettingsOutput)
}

type WebAppApplicationSettingsOutput struct {
	*pulumi.OutputState
}

func (WebAppApplicationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAppApplicationSettings)(nil))
}

func (o WebAppApplicationSettingsOutput) ToWebAppApplicationSettingsOutput() WebAppApplicationSettingsOutput {
	return o
}

func (o WebAppApplicationSettingsOutput) ToWebAppApplicationSettingsOutputWithContext(ctx context.Context) WebAppApplicationSettingsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WebAppApplicationSettingsOutput{})
}
