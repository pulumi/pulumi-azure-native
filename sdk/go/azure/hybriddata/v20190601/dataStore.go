// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data store.
type DataStore struct {
	pulumi.CustomResourceState

	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets CustomerSecretResponseArrayOutput `pulumi:"customerSecrets"`
	// The arm id of the data store type.
	DataStoreTypeId pulumi.StringOutput `pulumi:"dataStoreTypeId"`
	// A generic json used differently by each data source type.
	ExtendedProperties pulumi.AnyOutput `pulumi:"extendedProperties"`
	// Name of the object.
	Name pulumi.StringOutput `pulumi:"name"`
	// Arm Id for the manager resource to which the data source is associated. This is optional.
	RepositoryId pulumi.StringPtrOutput `pulumi:"repositoryId"`
	// State of the data source.
	State pulumi.StringOutput `pulumi:"state"`
	// Type of the object.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataStore registers a new resource with the given unique name, arguments, and options.
func NewDataStore(ctx *pulumi.Context,
	name string, args *DataStoreArgs, opts ...pulumi.ResourceOption) (*DataStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataManagerName == nil {
		return nil, errors.New("invalid value for required argument 'DataManagerName'")
	}
	if args.DataStoreTypeId == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreTypeId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybriddata:DataStore"),
		},
		{
			Type: pulumi.String("azure-native:hybriddata/v20160601:DataStore"),
		},
	})
	opts = append(opts, aliases)
	var resource DataStore
	err := ctx.RegisterResource("azure-native:hybriddata/v20190601:DataStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataStore gets an existing DataStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataStoreState, opts ...pulumi.ResourceOption) (*DataStore, error) {
	var resource DataStore
	err := ctx.ReadResource("azure-native:hybriddata/v20190601:DataStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataStore resources.
type dataStoreState struct {
}

type DataStoreState struct {
}

func (DataStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataStoreState)(nil)).Elem()
}

type dataStoreArgs struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets []CustomerSecret `pulumi:"customerSecrets"`
	// The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
	DataManagerName string `pulumi:"dataManagerName"`
	// The data store/repository name to be created or updated.
	DataStoreName *string `pulumi:"dataStoreName"`
	// The arm id of the data store type.
	DataStoreTypeId string `pulumi:"dataStoreTypeId"`
	// A generic json used differently by each data source type.
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Arm Id for the manager resource to which the data source is associated. This is optional.
	RepositoryId *string `pulumi:"repositoryId"`
	// The Resource Group Name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// State of the data source.
	State State `pulumi:"state"`
}

// The set of arguments for constructing a DataStore resource.
type DataStoreArgs struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets CustomerSecretArrayInput
	// The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
	DataManagerName pulumi.StringInput
	// The data store/repository name to be created or updated.
	DataStoreName pulumi.StringPtrInput
	// The arm id of the data store type.
	DataStoreTypeId pulumi.StringInput
	// A generic json used differently by each data source type.
	ExtendedProperties pulumi.Input
	// Arm Id for the manager resource to which the data source is associated. This is optional.
	RepositoryId pulumi.StringPtrInput
	// The Resource Group Name
	ResourceGroupName pulumi.StringInput
	// State of the data source.
	State StateInput
}

func (DataStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataStoreArgs)(nil)).Elem()
}

type DataStoreInput interface {
	pulumi.Input

	ToDataStoreOutput() DataStoreOutput
	ToDataStoreOutputWithContext(ctx context.Context) DataStoreOutput
}

func (*DataStore) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStore)(nil)).Elem()
}

func (i *DataStore) ToDataStoreOutput() DataStoreOutput {
	return i.ToDataStoreOutputWithContext(context.Background())
}

func (i *DataStore) ToDataStoreOutputWithContext(ctx context.Context) DataStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStoreOutput)
}

type DataStoreOutput struct{ *pulumi.OutputState }

func (DataStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStore)(nil)).Elem()
}

func (o DataStoreOutput) ToDataStoreOutput() DataStoreOutput {
	return o
}

func (o DataStoreOutput) ToDataStoreOutputWithContext(ctx context.Context) DataStoreOutput {
	return o
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o DataStoreOutput) CustomerSecrets() CustomerSecretResponseArrayOutput {
	return o.ApplyT(func(v *DataStore) CustomerSecretResponseArrayOutput { return v.CustomerSecrets }).(CustomerSecretResponseArrayOutput)
}

// The arm id of the data store type.
func (o DataStoreOutput) DataStoreTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.DataStoreTypeId }).(pulumi.StringOutput)
}

// A generic json used differently by each data source type.
func (o DataStoreOutput) ExtendedProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataStore) pulumi.AnyOutput { return v.ExtendedProperties }).(pulumi.AnyOutput)
}

// Name of the object.
func (o DataStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Arm Id for the manager resource to which the data source is associated. This is optional.
func (o DataStoreOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringPtrOutput { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// State of the data source.
func (o DataStoreOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Type of the object.
func (o DataStoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DataStoreOutput{})
}
