// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190801preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The peering service prefix class.
//
// Deprecated: Version 2019-08-01-preview will be removed in v2 of the provider.
type PeeringServicePrefix struct {
	pulumi.CustomResourceState

	// The prefix learned type
	LearnedType pulumi.StringPtrOutput `pulumi:"learnedType"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Valid route prefix
	Prefix pulumi.StringPtrOutput `pulumi:"prefix"`
	// The prefix validation state
	PrefixValidationState pulumi.StringPtrOutput `pulumi:"prefixValidationState"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPeeringServicePrefix registers a new resource with the given unique name, arguments, and options.
func NewPeeringServicePrefix(ctx *pulumi.Context,
	name string, args *PeeringServicePrefixArgs, opts ...pulumi.ResourceOption) (*PeeringServicePrefix, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeeringServiceName == nil {
		return nil, errors.New("invalid value for required argument 'PeeringServiceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:peering:PeeringServicePrefix"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20190901preview:PeeringServicePrefix"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20200101preview:PeeringServicePrefix"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20200401:PeeringServicePrefix"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20201001:PeeringServicePrefix"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20210101:PeeringServicePrefix"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20210601:PeeringServicePrefix"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20220101:PeeringServicePrefix"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20220601:PeeringServicePrefix"),
		},
	})
	opts = append(opts, aliases)
	var resource PeeringServicePrefix
	err := ctx.RegisterResource("azure-native:peering/v20190801preview:PeeringServicePrefix", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringServicePrefix gets an existing PeeringServicePrefix resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringServicePrefix(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringServicePrefixState, opts ...pulumi.ResourceOption) (*PeeringServicePrefix, error) {
	var resource PeeringServicePrefix
	err := ctx.ReadResource("azure-native:peering/v20190801preview:PeeringServicePrefix", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringServicePrefix resources.
type peeringServicePrefixState struct {
}

type PeeringServicePrefixState struct {
}

func (PeeringServicePrefixState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringServicePrefixState)(nil)).Elem()
}

type peeringServicePrefixArgs struct {
	// The prefix learned type
	LearnedType *string `pulumi:"learnedType"`
	// The peering service name.
	PeeringServiceName string `pulumi:"peeringServiceName"`
	// Valid route prefix
	Prefix *string `pulumi:"prefix"`
	// The prefix name
	PrefixName *string `pulumi:"prefixName"`
	// The prefix validation state
	PrefixValidationState *string `pulumi:"prefixValidationState"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a PeeringServicePrefix resource.
type PeeringServicePrefixArgs struct {
	// The prefix learned type
	LearnedType pulumi.StringPtrInput
	// The peering service name.
	PeeringServiceName pulumi.StringInput
	// Valid route prefix
	Prefix pulumi.StringPtrInput
	// The prefix name
	PrefixName pulumi.StringPtrInput
	// The prefix validation state
	PrefixValidationState pulumi.StringPtrInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
}

func (PeeringServicePrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringServicePrefixArgs)(nil)).Elem()
}

type PeeringServicePrefixInput interface {
	pulumi.Input

	ToPeeringServicePrefixOutput() PeeringServicePrefixOutput
	ToPeeringServicePrefixOutputWithContext(ctx context.Context) PeeringServicePrefixOutput
}

func (*PeeringServicePrefix) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServicePrefix)(nil)).Elem()
}

func (i *PeeringServicePrefix) ToPeeringServicePrefixOutput() PeeringServicePrefixOutput {
	return i.ToPeeringServicePrefixOutputWithContext(context.Background())
}

func (i *PeeringServicePrefix) ToPeeringServicePrefixOutputWithContext(ctx context.Context) PeeringServicePrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixOutput)
}

type PeeringServicePrefixOutput struct{ *pulumi.OutputState }

func (PeeringServicePrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServicePrefix)(nil)).Elem()
}

func (o PeeringServicePrefixOutput) ToPeeringServicePrefixOutput() PeeringServicePrefixOutput {
	return o
}

func (o PeeringServicePrefixOutput) ToPeeringServicePrefixOutputWithContext(ctx context.Context) PeeringServicePrefixOutput {
	return o
}

// The prefix learned type
func (o PeeringServicePrefixOutput) LearnedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefix) pulumi.StringPtrOutput { return v.LearnedType }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o PeeringServicePrefixOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringServicePrefix) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Valid route prefix
func (o PeeringServicePrefixOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefix) pulumi.StringPtrOutput { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The prefix validation state
func (o PeeringServicePrefixOutput) PrefixValidationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefix) pulumi.StringPtrOutput { return v.PrefixValidationState }).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o PeeringServicePrefixOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringServicePrefix) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the resource.
func (o PeeringServicePrefixOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringServicePrefix) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PeeringServicePrefixOutput{})
}
