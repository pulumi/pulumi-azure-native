// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190801preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The properties that define a BGP session.
type BgpSession struct {
	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 *int `pulumi:"maxPrefixesAdvertisedV4"`
	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 *int `pulumi:"maxPrefixesAdvertisedV6"`
	// The MD5 authentication key of the session.
	Md5AuthenticationKey *string `pulumi:"md5AuthenticationKey"`
	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address *string `pulumi:"peerSessionIPv4Address"`
	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address *string `pulumi:"peerSessionIPv6Address"`
	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 *string `pulumi:"sessionPrefixV4"`
	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 *string `pulumi:"sessionPrefixV6"`
}

// BgpSessionInput is an input type that accepts BgpSessionArgs and BgpSessionOutput values.
// You can construct a concrete instance of `BgpSessionInput` via:
//
//          BgpSessionArgs{...}
type BgpSessionInput interface {
	pulumi.Input

	ToBgpSessionOutput() BgpSessionOutput
	ToBgpSessionOutputWithContext(context.Context) BgpSessionOutput
}

// The properties that define a BGP session.
type BgpSessionArgs struct {
	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 pulumi.IntPtrInput `pulumi:"maxPrefixesAdvertisedV4"`
	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 pulumi.IntPtrInput `pulumi:"maxPrefixesAdvertisedV6"`
	// The MD5 authentication key of the session.
	Md5AuthenticationKey pulumi.StringPtrInput `pulumi:"md5AuthenticationKey"`
	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address pulumi.StringPtrInput `pulumi:"peerSessionIPv4Address"`
	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address pulumi.StringPtrInput `pulumi:"peerSessionIPv6Address"`
	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 pulumi.StringPtrInput `pulumi:"sessionPrefixV4"`
	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 pulumi.StringPtrInput `pulumi:"sessionPrefixV6"`
}

func (BgpSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpSession)(nil)).Elem()
}

func (i BgpSessionArgs) ToBgpSessionOutput() BgpSessionOutput {
	return i.ToBgpSessionOutputWithContext(context.Background())
}

func (i BgpSessionArgs) ToBgpSessionOutputWithContext(ctx context.Context) BgpSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionOutput)
}

func (i BgpSessionArgs) ToBgpSessionPtrOutput() BgpSessionPtrOutput {
	return i.ToBgpSessionPtrOutputWithContext(context.Background())
}

func (i BgpSessionArgs) ToBgpSessionPtrOutputWithContext(ctx context.Context) BgpSessionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionOutput).ToBgpSessionPtrOutputWithContext(ctx)
}

// BgpSessionPtrInput is an input type that accepts BgpSessionArgs, BgpSessionPtr and BgpSessionPtrOutput values.
// You can construct a concrete instance of `BgpSessionPtrInput` via:
//
//          BgpSessionArgs{...}
//
//  or:
//
//          nil
type BgpSessionPtrInput interface {
	pulumi.Input

	ToBgpSessionPtrOutput() BgpSessionPtrOutput
	ToBgpSessionPtrOutputWithContext(context.Context) BgpSessionPtrOutput
}

type bgpSessionPtrType BgpSessionArgs

func BgpSessionPtr(v *BgpSessionArgs) BgpSessionPtrInput {
	return (*bgpSessionPtrType)(v)
}

func (*bgpSessionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSession)(nil)).Elem()
}

func (i *bgpSessionPtrType) ToBgpSessionPtrOutput() BgpSessionPtrOutput {
	return i.ToBgpSessionPtrOutputWithContext(context.Background())
}

func (i *bgpSessionPtrType) ToBgpSessionPtrOutputWithContext(ctx context.Context) BgpSessionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionPtrOutput)
}

// The properties that define a BGP session.
type BgpSessionOutput struct{ *pulumi.OutputState }

func (BgpSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpSession)(nil)).Elem()
}

func (o BgpSessionOutput) ToBgpSessionOutput() BgpSessionOutput {
	return o
}

func (o BgpSessionOutput) ToBgpSessionOutputWithContext(ctx context.Context) BgpSessionOutput {
	return o
}

func (o BgpSessionOutput) ToBgpSessionPtrOutput() BgpSessionPtrOutput {
	return o.ToBgpSessionPtrOutputWithContext(context.Background())
}

func (o BgpSessionOutput) ToBgpSessionPtrOutputWithContext(ctx context.Context) BgpSessionPtrOutput {
	return o.ApplyT(func(v BgpSession) *BgpSession {
		return &v
	}).(BgpSessionPtrOutput)
}

// The maximum number of prefixes advertised over the IPv4 session.
func (o BgpSessionOutput) MaxPrefixesAdvertisedV4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BgpSession) *int { return v.MaxPrefixesAdvertisedV4 }).(pulumi.IntPtrOutput)
}

// The maximum number of prefixes advertised over the IPv6 session.
func (o BgpSessionOutput) MaxPrefixesAdvertisedV6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BgpSession) *int { return v.MaxPrefixesAdvertisedV6 }).(pulumi.IntPtrOutput)
}

// The MD5 authentication key of the session.
func (o BgpSessionOutput) Md5AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.Md5AuthenticationKey }).(pulumi.StringPtrOutput)
}

// The IPv4 session address on peer's end.
func (o BgpSessionOutput) PeerSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.PeerSessionIPv4Address }).(pulumi.StringPtrOutput)
}

// The IPv6 session address on peer's end.
func (o BgpSessionOutput) PeerSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.PeerSessionIPv6Address }).(pulumi.StringPtrOutput)
}

// The IPv4 prefix that contains both ends' IPv4 addresses.
func (o BgpSessionOutput) SessionPrefixV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.SessionPrefixV4 }).(pulumi.StringPtrOutput)
}

// The IPv6 prefix that contains both ends' IPv6 addresses.
func (o BgpSessionOutput) SessionPrefixV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.SessionPrefixV6 }).(pulumi.StringPtrOutput)
}

type BgpSessionPtrOutput struct{ *pulumi.OutputState }

func (BgpSessionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSession)(nil)).Elem()
}

func (o BgpSessionPtrOutput) ToBgpSessionPtrOutput() BgpSessionPtrOutput {
	return o
}

func (o BgpSessionPtrOutput) ToBgpSessionPtrOutputWithContext(ctx context.Context) BgpSessionPtrOutput {
	return o
}

func (o BgpSessionPtrOutput) Elem() BgpSessionOutput {
	return o.ApplyT(func(v *BgpSession) BgpSession { return *v }).(BgpSessionOutput)
}

// The maximum number of prefixes advertised over the IPv4 session.
func (o BgpSessionPtrOutput) MaxPrefixesAdvertisedV4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSession) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefixesAdvertisedV4
	}).(pulumi.IntPtrOutput)
}

// The maximum number of prefixes advertised over the IPv6 session.
func (o BgpSessionPtrOutput) MaxPrefixesAdvertisedV6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSession) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefixesAdvertisedV6
	}).(pulumi.IntPtrOutput)
}

// The MD5 authentication key of the session.
func (o BgpSessionPtrOutput) Md5AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.Md5AuthenticationKey
	}).(pulumi.StringPtrOutput)
}

// The IPv4 session address on peer's end.
func (o BgpSessionPtrOutput) PeerSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.PeerSessionIPv4Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 session address on peer's end.
func (o BgpSessionPtrOutput) PeerSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.PeerSessionIPv6Address
	}).(pulumi.StringPtrOutput)
}

// The IPv4 prefix that contains both ends' IPv4 addresses.
func (o BgpSessionPtrOutput) SessionPrefixV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.SessionPrefixV4
	}).(pulumi.StringPtrOutput)
}

// The IPv6 prefix that contains both ends' IPv6 addresses.
func (o BgpSessionPtrOutput) SessionPrefixV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.SessionPrefixV6
	}).(pulumi.StringPtrOutput)
}

// The properties that define a BGP session.
type BgpSessionResponse struct {
	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 *int `pulumi:"maxPrefixesAdvertisedV4"`
	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 *int `pulumi:"maxPrefixesAdvertisedV6"`
	// The MD5 authentication key of the session.
	Md5AuthenticationKey *string `pulumi:"md5AuthenticationKey"`
	// The IPv4 session address on Microsoft's end.
	MicrosoftSessionIPv4Address string `pulumi:"microsoftSessionIPv4Address"`
	// The IPv6 session address on Microsoft's end.
	MicrosoftSessionIPv6Address string `pulumi:"microsoftSessionIPv6Address"`
	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address *string `pulumi:"peerSessionIPv4Address"`
	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address *string `pulumi:"peerSessionIPv6Address"`
	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 *string `pulumi:"sessionPrefixV4"`
	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 *string `pulumi:"sessionPrefixV6"`
	// The state of the IPv4 session.
	SessionStateV4 string `pulumi:"sessionStateV4"`
	// The state of the IPv6 session.
	SessionStateV6 string `pulumi:"sessionStateV6"`
}

// BgpSessionResponseInput is an input type that accepts BgpSessionResponseArgs and BgpSessionResponseOutput values.
// You can construct a concrete instance of `BgpSessionResponseInput` via:
//
//          BgpSessionResponseArgs{...}
type BgpSessionResponseInput interface {
	pulumi.Input

	ToBgpSessionResponseOutput() BgpSessionResponseOutput
	ToBgpSessionResponseOutputWithContext(context.Context) BgpSessionResponseOutput
}

// The properties that define a BGP session.
type BgpSessionResponseArgs struct {
	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 pulumi.IntPtrInput `pulumi:"maxPrefixesAdvertisedV4"`
	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 pulumi.IntPtrInput `pulumi:"maxPrefixesAdvertisedV6"`
	// The MD5 authentication key of the session.
	Md5AuthenticationKey pulumi.StringPtrInput `pulumi:"md5AuthenticationKey"`
	// The IPv4 session address on Microsoft's end.
	MicrosoftSessionIPv4Address pulumi.StringInput `pulumi:"microsoftSessionIPv4Address"`
	// The IPv6 session address on Microsoft's end.
	MicrosoftSessionIPv6Address pulumi.StringInput `pulumi:"microsoftSessionIPv6Address"`
	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address pulumi.StringPtrInput `pulumi:"peerSessionIPv4Address"`
	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address pulumi.StringPtrInput `pulumi:"peerSessionIPv6Address"`
	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 pulumi.StringPtrInput `pulumi:"sessionPrefixV4"`
	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 pulumi.StringPtrInput `pulumi:"sessionPrefixV6"`
	// The state of the IPv4 session.
	SessionStateV4 pulumi.StringInput `pulumi:"sessionStateV4"`
	// The state of the IPv6 session.
	SessionStateV6 pulumi.StringInput `pulumi:"sessionStateV6"`
}

func (BgpSessionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpSessionResponse)(nil)).Elem()
}

func (i BgpSessionResponseArgs) ToBgpSessionResponseOutput() BgpSessionResponseOutput {
	return i.ToBgpSessionResponseOutputWithContext(context.Background())
}

func (i BgpSessionResponseArgs) ToBgpSessionResponseOutputWithContext(ctx context.Context) BgpSessionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionResponseOutput)
}

func (i BgpSessionResponseArgs) ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput {
	return i.ToBgpSessionResponsePtrOutputWithContext(context.Background())
}

func (i BgpSessionResponseArgs) ToBgpSessionResponsePtrOutputWithContext(ctx context.Context) BgpSessionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionResponseOutput).ToBgpSessionResponsePtrOutputWithContext(ctx)
}

// BgpSessionResponsePtrInput is an input type that accepts BgpSessionResponseArgs, BgpSessionResponsePtr and BgpSessionResponsePtrOutput values.
// You can construct a concrete instance of `BgpSessionResponsePtrInput` via:
//
//          BgpSessionResponseArgs{...}
//
//  or:
//
//          nil
type BgpSessionResponsePtrInput interface {
	pulumi.Input

	ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput
	ToBgpSessionResponsePtrOutputWithContext(context.Context) BgpSessionResponsePtrOutput
}

type bgpSessionResponsePtrType BgpSessionResponseArgs

func BgpSessionResponsePtr(v *BgpSessionResponseArgs) BgpSessionResponsePtrInput {
	return (*bgpSessionResponsePtrType)(v)
}

func (*bgpSessionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSessionResponse)(nil)).Elem()
}

func (i *bgpSessionResponsePtrType) ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput {
	return i.ToBgpSessionResponsePtrOutputWithContext(context.Background())
}

func (i *bgpSessionResponsePtrType) ToBgpSessionResponsePtrOutputWithContext(ctx context.Context) BgpSessionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionResponsePtrOutput)
}

// The properties that define a BGP session.
type BgpSessionResponseOutput struct{ *pulumi.OutputState }

func (BgpSessionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpSessionResponse)(nil)).Elem()
}

func (o BgpSessionResponseOutput) ToBgpSessionResponseOutput() BgpSessionResponseOutput {
	return o
}

func (o BgpSessionResponseOutput) ToBgpSessionResponseOutputWithContext(ctx context.Context) BgpSessionResponseOutput {
	return o
}

func (o BgpSessionResponseOutput) ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput {
	return o.ToBgpSessionResponsePtrOutputWithContext(context.Background())
}

func (o BgpSessionResponseOutput) ToBgpSessionResponsePtrOutputWithContext(ctx context.Context) BgpSessionResponsePtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *BgpSessionResponse {
		return &v
	}).(BgpSessionResponsePtrOutput)
}

// The maximum number of prefixes advertised over the IPv4 session.
func (o BgpSessionResponseOutput) MaxPrefixesAdvertisedV4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *int { return v.MaxPrefixesAdvertisedV4 }).(pulumi.IntPtrOutput)
}

// The maximum number of prefixes advertised over the IPv6 session.
func (o BgpSessionResponseOutput) MaxPrefixesAdvertisedV6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *int { return v.MaxPrefixesAdvertisedV6 }).(pulumi.IntPtrOutput)
}

// The MD5 authentication key of the session.
func (o BgpSessionResponseOutput) Md5AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.Md5AuthenticationKey }).(pulumi.StringPtrOutput)
}

// The IPv4 session address on Microsoft's end.
func (o BgpSessionResponseOutput) MicrosoftSessionIPv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v BgpSessionResponse) string { return v.MicrosoftSessionIPv4Address }).(pulumi.StringOutput)
}

// The IPv6 session address on Microsoft's end.
func (o BgpSessionResponseOutput) MicrosoftSessionIPv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v BgpSessionResponse) string { return v.MicrosoftSessionIPv6Address }).(pulumi.StringOutput)
}

// The IPv4 session address on peer's end.
func (o BgpSessionResponseOutput) PeerSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.PeerSessionIPv4Address }).(pulumi.StringPtrOutput)
}

// The IPv6 session address on peer's end.
func (o BgpSessionResponseOutput) PeerSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.PeerSessionIPv6Address }).(pulumi.StringPtrOutput)
}

// The IPv4 prefix that contains both ends' IPv4 addresses.
func (o BgpSessionResponseOutput) SessionPrefixV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.SessionPrefixV4 }).(pulumi.StringPtrOutput)
}

// The IPv6 prefix that contains both ends' IPv6 addresses.
func (o BgpSessionResponseOutput) SessionPrefixV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.SessionPrefixV6 }).(pulumi.StringPtrOutput)
}

// The state of the IPv4 session.
func (o BgpSessionResponseOutput) SessionStateV4() pulumi.StringOutput {
	return o.ApplyT(func(v BgpSessionResponse) string { return v.SessionStateV4 }).(pulumi.StringOutput)
}

// The state of the IPv6 session.
func (o BgpSessionResponseOutput) SessionStateV6() pulumi.StringOutput {
	return o.ApplyT(func(v BgpSessionResponse) string { return v.SessionStateV6 }).(pulumi.StringOutput)
}

type BgpSessionResponsePtrOutput struct{ *pulumi.OutputState }

func (BgpSessionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSessionResponse)(nil)).Elem()
}

func (o BgpSessionResponsePtrOutput) ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput {
	return o
}

func (o BgpSessionResponsePtrOutput) ToBgpSessionResponsePtrOutputWithContext(ctx context.Context) BgpSessionResponsePtrOutput {
	return o
}

func (o BgpSessionResponsePtrOutput) Elem() BgpSessionResponseOutput {
	return o.ApplyT(func(v *BgpSessionResponse) BgpSessionResponse { return *v }).(BgpSessionResponseOutput)
}

// The maximum number of prefixes advertised over the IPv4 session.
func (o BgpSessionResponsePtrOutput) MaxPrefixesAdvertisedV4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefixesAdvertisedV4
	}).(pulumi.IntPtrOutput)
}

// The maximum number of prefixes advertised over the IPv6 session.
func (o BgpSessionResponsePtrOutput) MaxPrefixesAdvertisedV6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefixesAdvertisedV6
	}).(pulumi.IntPtrOutput)
}

// The MD5 authentication key of the session.
func (o BgpSessionResponsePtrOutput) Md5AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Md5AuthenticationKey
	}).(pulumi.StringPtrOutput)
}

// The IPv4 session address on Microsoft's end.
func (o BgpSessionResponsePtrOutput) MicrosoftSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MicrosoftSessionIPv4Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 session address on Microsoft's end.
func (o BgpSessionResponsePtrOutput) MicrosoftSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MicrosoftSessionIPv6Address
	}).(pulumi.StringPtrOutput)
}

// The IPv4 session address on peer's end.
func (o BgpSessionResponsePtrOutput) PeerSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeerSessionIPv4Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 session address on peer's end.
func (o BgpSessionResponsePtrOutput) PeerSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeerSessionIPv6Address
	}).(pulumi.StringPtrOutput)
}

// The IPv4 prefix that contains both ends' IPv4 addresses.
func (o BgpSessionResponsePtrOutput) SessionPrefixV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SessionPrefixV4
	}).(pulumi.StringPtrOutput)
}

// The IPv6 prefix that contains both ends' IPv6 addresses.
func (o BgpSessionResponsePtrOutput) SessionPrefixV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SessionPrefixV6
	}).(pulumi.StringPtrOutput)
}

// The state of the IPv4 session.
func (o BgpSessionResponsePtrOutput) SessionStateV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SessionStateV4
	}).(pulumi.StringPtrOutput)
}

// The state of the IPv6 session.
func (o BgpSessionResponsePtrOutput) SessionStateV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SessionStateV6
	}).(pulumi.StringPtrOutput)
}

// The contact information of the peer.
type ContactInfo struct {
	// The list of email addresses.
	Emails []string `pulumi:"emails"`
	// The list of contact numbers.
	Phone []string `pulumi:"phone"`
}

// ContactInfoInput is an input type that accepts ContactInfoArgs and ContactInfoOutput values.
// You can construct a concrete instance of `ContactInfoInput` via:
//
//          ContactInfoArgs{...}
type ContactInfoInput interface {
	pulumi.Input

	ToContactInfoOutput() ContactInfoOutput
	ToContactInfoOutputWithContext(context.Context) ContactInfoOutput
}

// The contact information of the peer.
type ContactInfoArgs struct {
	// The list of email addresses.
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// The list of contact numbers.
	Phone pulumi.StringArrayInput `pulumi:"phone"`
}

func (ContactInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactInfo)(nil)).Elem()
}

func (i ContactInfoArgs) ToContactInfoOutput() ContactInfoOutput {
	return i.ToContactInfoOutputWithContext(context.Background())
}

func (i ContactInfoArgs) ToContactInfoOutputWithContext(ctx context.Context) ContactInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactInfoOutput)
}

func (i ContactInfoArgs) ToContactInfoPtrOutput() ContactInfoPtrOutput {
	return i.ToContactInfoPtrOutputWithContext(context.Background())
}

func (i ContactInfoArgs) ToContactInfoPtrOutputWithContext(ctx context.Context) ContactInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactInfoOutput).ToContactInfoPtrOutputWithContext(ctx)
}

// ContactInfoPtrInput is an input type that accepts ContactInfoArgs, ContactInfoPtr and ContactInfoPtrOutput values.
// You can construct a concrete instance of `ContactInfoPtrInput` via:
//
//          ContactInfoArgs{...}
//
//  or:
//
//          nil
type ContactInfoPtrInput interface {
	pulumi.Input

	ToContactInfoPtrOutput() ContactInfoPtrOutput
	ToContactInfoPtrOutputWithContext(context.Context) ContactInfoPtrOutput
}

type contactInfoPtrType ContactInfoArgs

func ContactInfoPtr(v *ContactInfoArgs) ContactInfoPtrInput {
	return (*contactInfoPtrType)(v)
}

func (*contactInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactInfo)(nil)).Elem()
}

func (i *contactInfoPtrType) ToContactInfoPtrOutput() ContactInfoPtrOutput {
	return i.ToContactInfoPtrOutputWithContext(context.Background())
}

func (i *contactInfoPtrType) ToContactInfoPtrOutputWithContext(ctx context.Context) ContactInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactInfoPtrOutput)
}

// The contact information of the peer.
type ContactInfoOutput struct{ *pulumi.OutputState }

func (ContactInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactInfo)(nil)).Elem()
}

func (o ContactInfoOutput) ToContactInfoOutput() ContactInfoOutput {
	return o
}

func (o ContactInfoOutput) ToContactInfoOutputWithContext(ctx context.Context) ContactInfoOutput {
	return o
}

func (o ContactInfoOutput) ToContactInfoPtrOutput() ContactInfoPtrOutput {
	return o.ToContactInfoPtrOutputWithContext(context.Background())
}

func (o ContactInfoOutput) ToContactInfoPtrOutputWithContext(ctx context.Context) ContactInfoPtrOutput {
	return o.ApplyT(func(v ContactInfo) *ContactInfo {
		return &v
	}).(ContactInfoPtrOutput)
}

// The list of email addresses.
func (o ContactInfoOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactInfo) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// The list of contact numbers.
func (o ContactInfoOutput) Phone() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactInfo) []string { return v.Phone }).(pulumi.StringArrayOutput)
}

type ContactInfoPtrOutput struct{ *pulumi.OutputState }

func (ContactInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactInfo)(nil)).Elem()
}

func (o ContactInfoPtrOutput) ToContactInfoPtrOutput() ContactInfoPtrOutput {
	return o
}

func (o ContactInfoPtrOutput) ToContactInfoPtrOutputWithContext(ctx context.Context) ContactInfoPtrOutput {
	return o
}

func (o ContactInfoPtrOutput) Elem() ContactInfoOutput {
	return o.ApplyT(func(v *ContactInfo) ContactInfo { return *v }).(ContactInfoOutput)
}

// The list of email addresses.
func (o ContactInfoPtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactInfo) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// The list of contact numbers.
func (o ContactInfoPtrOutput) Phone() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactInfo) []string {
		if v == nil {
			return nil
		}
		return v.Phone
	}).(pulumi.StringArrayOutput)
}

// The contact information of the peer.
type ContactInfoResponse struct {
	// The list of email addresses.
	Emails []string `pulumi:"emails"`
	// The list of contact numbers.
	Phone []string `pulumi:"phone"`
}

// ContactInfoResponseInput is an input type that accepts ContactInfoResponseArgs and ContactInfoResponseOutput values.
// You can construct a concrete instance of `ContactInfoResponseInput` via:
//
//          ContactInfoResponseArgs{...}
type ContactInfoResponseInput interface {
	pulumi.Input

	ToContactInfoResponseOutput() ContactInfoResponseOutput
	ToContactInfoResponseOutputWithContext(context.Context) ContactInfoResponseOutput
}

// The contact information of the peer.
type ContactInfoResponseArgs struct {
	// The list of email addresses.
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// The list of contact numbers.
	Phone pulumi.StringArrayInput `pulumi:"phone"`
}

func (ContactInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactInfoResponse)(nil)).Elem()
}

func (i ContactInfoResponseArgs) ToContactInfoResponseOutput() ContactInfoResponseOutput {
	return i.ToContactInfoResponseOutputWithContext(context.Background())
}

func (i ContactInfoResponseArgs) ToContactInfoResponseOutputWithContext(ctx context.Context) ContactInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactInfoResponseOutput)
}

func (i ContactInfoResponseArgs) ToContactInfoResponsePtrOutput() ContactInfoResponsePtrOutput {
	return i.ToContactInfoResponsePtrOutputWithContext(context.Background())
}

func (i ContactInfoResponseArgs) ToContactInfoResponsePtrOutputWithContext(ctx context.Context) ContactInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactInfoResponseOutput).ToContactInfoResponsePtrOutputWithContext(ctx)
}

// ContactInfoResponsePtrInput is an input type that accepts ContactInfoResponseArgs, ContactInfoResponsePtr and ContactInfoResponsePtrOutput values.
// You can construct a concrete instance of `ContactInfoResponsePtrInput` via:
//
//          ContactInfoResponseArgs{...}
//
//  or:
//
//          nil
type ContactInfoResponsePtrInput interface {
	pulumi.Input

	ToContactInfoResponsePtrOutput() ContactInfoResponsePtrOutput
	ToContactInfoResponsePtrOutputWithContext(context.Context) ContactInfoResponsePtrOutput
}

type contactInfoResponsePtrType ContactInfoResponseArgs

func ContactInfoResponsePtr(v *ContactInfoResponseArgs) ContactInfoResponsePtrInput {
	return (*contactInfoResponsePtrType)(v)
}

func (*contactInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactInfoResponse)(nil)).Elem()
}

func (i *contactInfoResponsePtrType) ToContactInfoResponsePtrOutput() ContactInfoResponsePtrOutput {
	return i.ToContactInfoResponsePtrOutputWithContext(context.Background())
}

func (i *contactInfoResponsePtrType) ToContactInfoResponsePtrOutputWithContext(ctx context.Context) ContactInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactInfoResponsePtrOutput)
}

// The contact information of the peer.
type ContactInfoResponseOutput struct{ *pulumi.OutputState }

func (ContactInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactInfoResponse)(nil)).Elem()
}

func (o ContactInfoResponseOutput) ToContactInfoResponseOutput() ContactInfoResponseOutput {
	return o
}

func (o ContactInfoResponseOutput) ToContactInfoResponseOutputWithContext(ctx context.Context) ContactInfoResponseOutput {
	return o
}

func (o ContactInfoResponseOutput) ToContactInfoResponsePtrOutput() ContactInfoResponsePtrOutput {
	return o.ToContactInfoResponsePtrOutputWithContext(context.Background())
}

func (o ContactInfoResponseOutput) ToContactInfoResponsePtrOutputWithContext(ctx context.Context) ContactInfoResponsePtrOutput {
	return o.ApplyT(func(v ContactInfoResponse) *ContactInfoResponse {
		return &v
	}).(ContactInfoResponsePtrOutput)
}

// The list of email addresses.
func (o ContactInfoResponseOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactInfoResponse) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// The list of contact numbers.
func (o ContactInfoResponseOutput) Phone() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactInfoResponse) []string { return v.Phone }).(pulumi.StringArrayOutput)
}

type ContactInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ContactInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactInfoResponse)(nil)).Elem()
}

func (o ContactInfoResponsePtrOutput) ToContactInfoResponsePtrOutput() ContactInfoResponsePtrOutput {
	return o
}

func (o ContactInfoResponsePtrOutput) ToContactInfoResponsePtrOutputWithContext(ctx context.Context) ContactInfoResponsePtrOutput {
	return o
}

func (o ContactInfoResponsePtrOutput) Elem() ContactInfoResponseOutput {
	return o.ApplyT(func(v *ContactInfoResponse) ContactInfoResponse { return *v }).(ContactInfoResponseOutput)
}

// The list of email addresses.
func (o ContactInfoResponsePtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// The list of contact numbers.
func (o ContactInfoResponsePtrOutput) Phone() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.Phone
	}).(pulumi.StringArrayOutput)
}

// The properties that define a direct connection.
type DirectConnection struct {
	// The bandwidth of the connection.
	BandwidthInMbps *int `pulumi:"bandwidthInMbps"`
	// The BGP session associated with the connection.
	BgpSession *BgpSession `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `pulumi:"connectionIdentifier"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId *int `pulumi:"peeringDBFacilityId"`
	// The bandwidth that is actually provisioned.
	ProvisionedBandwidthInMbps *int `pulumi:"provisionedBandwidthInMbps"`
	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider *string `pulumi:"sessionAddressProvider"`
	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService *bool `pulumi:"useForPeeringService"`
}

// DirectConnectionInput is an input type that accepts DirectConnectionArgs and DirectConnectionOutput values.
// You can construct a concrete instance of `DirectConnectionInput` via:
//
//          DirectConnectionArgs{...}
type DirectConnectionInput interface {
	pulumi.Input

	ToDirectConnectionOutput() DirectConnectionOutput
	ToDirectConnectionOutputWithContext(context.Context) DirectConnectionOutput
}

// The properties that define a direct connection.
type DirectConnectionArgs struct {
	// The bandwidth of the connection.
	BandwidthInMbps pulumi.IntPtrInput `pulumi:"bandwidthInMbps"`
	// The BGP session associated with the connection.
	BgpSession BgpSessionPtrInput `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier pulumi.StringPtrInput `pulumi:"connectionIdentifier"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId pulumi.IntPtrInput `pulumi:"peeringDBFacilityId"`
	// The bandwidth that is actually provisioned.
	ProvisionedBandwidthInMbps pulumi.IntPtrInput `pulumi:"provisionedBandwidthInMbps"`
	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider pulumi.StringPtrInput `pulumi:"sessionAddressProvider"`
	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService pulumi.BoolPtrInput `pulumi:"useForPeeringService"`
}

func (DirectConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectConnection)(nil)).Elem()
}

func (i DirectConnectionArgs) ToDirectConnectionOutput() DirectConnectionOutput {
	return i.ToDirectConnectionOutputWithContext(context.Background())
}

func (i DirectConnectionArgs) ToDirectConnectionOutputWithContext(ctx context.Context) DirectConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectConnectionOutput)
}

// DirectConnectionArrayInput is an input type that accepts DirectConnectionArray and DirectConnectionArrayOutput values.
// You can construct a concrete instance of `DirectConnectionArrayInput` via:
//
//          DirectConnectionArray{ DirectConnectionArgs{...} }
type DirectConnectionArrayInput interface {
	pulumi.Input

	ToDirectConnectionArrayOutput() DirectConnectionArrayOutput
	ToDirectConnectionArrayOutputWithContext(context.Context) DirectConnectionArrayOutput
}

type DirectConnectionArray []DirectConnectionInput

func (DirectConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DirectConnection)(nil)).Elem()
}

func (i DirectConnectionArray) ToDirectConnectionArrayOutput() DirectConnectionArrayOutput {
	return i.ToDirectConnectionArrayOutputWithContext(context.Background())
}

func (i DirectConnectionArray) ToDirectConnectionArrayOutputWithContext(ctx context.Context) DirectConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectConnectionArrayOutput)
}

// The properties that define a direct connection.
type DirectConnectionOutput struct{ *pulumi.OutputState }

func (DirectConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectConnection)(nil)).Elem()
}

func (o DirectConnectionOutput) ToDirectConnectionOutput() DirectConnectionOutput {
	return o
}

func (o DirectConnectionOutput) ToDirectConnectionOutputWithContext(ctx context.Context) DirectConnectionOutput {
	return o
}

// The bandwidth of the connection.
func (o DirectConnectionOutput) BandwidthInMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnection) *int { return v.BandwidthInMbps }).(pulumi.IntPtrOutput)
}

// The BGP session associated with the connection.
func (o DirectConnectionOutput) BgpSession() BgpSessionPtrOutput {
	return o.ApplyT(func(v DirectConnection) *BgpSession { return v.BgpSession }).(BgpSessionPtrOutput)
}

// The unique identifier (GUID) for the connection.
func (o DirectConnectionOutput) ConnectionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DirectConnection) *string { return v.ConnectionIdentifier }).(pulumi.StringPtrOutput)
}

// The PeeringDB.com ID of the facility at which the connection has to be set up.
func (o DirectConnectionOutput) PeeringDBFacilityId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnection) *int { return v.PeeringDBFacilityId }).(pulumi.IntPtrOutput)
}

// The bandwidth that is actually provisioned.
func (o DirectConnectionOutput) ProvisionedBandwidthInMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnection) *int { return v.ProvisionedBandwidthInMbps }).(pulumi.IntPtrOutput)
}

// The field indicating if Microsoft provides session ip addresses.
func (o DirectConnectionOutput) SessionAddressProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DirectConnection) *string { return v.SessionAddressProvider }).(pulumi.StringPtrOutput)
}

// The flag that indicates whether or not the connection is used for peering service.
func (o DirectConnectionOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DirectConnection) *bool { return v.UseForPeeringService }).(pulumi.BoolPtrOutput)
}

type DirectConnectionArrayOutput struct{ *pulumi.OutputState }

func (DirectConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DirectConnection)(nil)).Elem()
}

func (o DirectConnectionArrayOutput) ToDirectConnectionArrayOutput() DirectConnectionArrayOutput {
	return o
}

func (o DirectConnectionArrayOutput) ToDirectConnectionArrayOutputWithContext(ctx context.Context) DirectConnectionArrayOutput {
	return o
}

func (o DirectConnectionArrayOutput) Index(i pulumi.IntInput) DirectConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DirectConnection {
		return vs[0].([]DirectConnection)[vs[1].(int)]
	}).(DirectConnectionOutput)
}

// The properties that define a direct connection.
type DirectConnectionResponse struct {
	// The bandwidth of the connection.
	BandwidthInMbps *int `pulumi:"bandwidthInMbps"`
	// The BGP session associated with the connection.
	BgpSession *BgpSessionResponse `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `pulumi:"connectionIdentifier"`
	// The state of the connection.
	ConnectionState string `pulumi:"connectionState"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId *int `pulumi:"peeringDBFacilityId"`
	// The bandwidth that is actually provisioned.
	ProvisionedBandwidthInMbps *int `pulumi:"provisionedBandwidthInMbps"`
	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider *string `pulumi:"sessionAddressProvider"`
	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService *bool `pulumi:"useForPeeringService"`
}

// DirectConnectionResponseInput is an input type that accepts DirectConnectionResponseArgs and DirectConnectionResponseOutput values.
// You can construct a concrete instance of `DirectConnectionResponseInput` via:
//
//          DirectConnectionResponseArgs{...}
type DirectConnectionResponseInput interface {
	pulumi.Input

	ToDirectConnectionResponseOutput() DirectConnectionResponseOutput
	ToDirectConnectionResponseOutputWithContext(context.Context) DirectConnectionResponseOutput
}

// The properties that define a direct connection.
type DirectConnectionResponseArgs struct {
	// The bandwidth of the connection.
	BandwidthInMbps pulumi.IntPtrInput `pulumi:"bandwidthInMbps"`
	// The BGP session associated with the connection.
	BgpSession BgpSessionResponsePtrInput `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier pulumi.StringPtrInput `pulumi:"connectionIdentifier"`
	// The state of the connection.
	ConnectionState pulumi.StringInput `pulumi:"connectionState"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId pulumi.IntPtrInput `pulumi:"peeringDBFacilityId"`
	// The bandwidth that is actually provisioned.
	ProvisionedBandwidthInMbps pulumi.IntPtrInput `pulumi:"provisionedBandwidthInMbps"`
	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider pulumi.StringPtrInput `pulumi:"sessionAddressProvider"`
	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService pulumi.BoolPtrInput `pulumi:"useForPeeringService"`
}

func (DirectConnectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectConnectionResponse)(nil)).Elem()
}

func (i DirectConnectionResponseArgs) ToDirectConnectionResponseOutput() DirectConnectionResponseOutput {
	return i.ToDirectConnectionResponseOutputWithContext(context.Background())
}

func (i DirectConnectionResponseArgs) ToDirectConnectionResponseOutputWithContext(ctx context.Context) DirectConnectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectConnectionResponseOutput)
}

// DirectConnectionResponseArrayInput is an input type that accepts DirectConnectionResponseArray and DirectConnectionResponseArrayOutput values.
// You can construct a concrete instance of `DirectConnectionResponseArrayInput` via:
//
//          DirectConnectionResponseArray{ DirectConnectionResponseArgs{...} }
type DirectConnectionResponseArrayInput interface {
	pulumi.Input

	ToDirectConnectionResponseArrayOutput() DirectConnectionResponseArrayOutput
	ToDirectConnectionResponseArrayOutputWithContext(context.Context) DirectConnectionResponseArrayOutput
}

type DirectConnectionResponseArray []DirectConnectionResponseInput

func (DirectConnectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DirectConnectionResponse)(nil)).Elem()
}

func (i DirectConnectionResponseArray) ToDirectConnectionResponseArrayOutput() DirectConnectionResponseArrayOutput {
	return i.ToDirectConnectionResponseArrayOutputWithContext(context.Background())
}

func (i DirectConnectionResponseArray) ToDirectConnectionResponseArrayOutputWithContext(ctx context.Context) DirectConnectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectConnectionResponseArrayOutput)
}

// The properties that define a direct connection.
type DirectConnectionResponseOutput struct{ *pulumi.OutputState }

func (DirectConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectConnectionResponse)(nil)).Elem()
}

func (o DirectConnectionResponseOutput) ToDirectConnectionResponseOutput() DirectConnectionResponseOutput {
	return o
}

func (o DirectConnectionResponseOutput) ToDirectConnectionResponseOutputWithContext(ctx context.Context) DirectConnectionResponseOutput {
	return o
}

// The bandwidth of the connection.
func (o DirectConnectionResponseOutput) BandwidthInMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *int { return v.BandwidthInMbps }).(pulumi.IntPtrOutput)
}

// The BGP session associated with the connection.
func (o DirectConnectionResponseOutput) BgpSession() BgpSessionResponsePtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *BgpSessionResponse { return v.BgpSession }).(BgpSessionResponsePtrOutput)
}

// The unique identifier (GUID) for the connection.
func (o DirectConnectionResponseOutput) ConnectionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *string { return v.ConnectionIdentifier }).(pulumi.StringPtrOutput)
}

// The state of the connection.
func (o DirectConnectionResponseOutput) ConnectionState() pulumi.StringOutput {
	return o.ApplyT(func(v DirectConnectionResponse) string { return v.ConnectionState }).(pulumi.StringOutput)
}

// The PeeringDB.com ID of the facility at which the connection has to be set up.
func (o DirectConnectionResponseOutput) PeeringDBFacilityId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *int { return v.PeeringDBFacilityId }).(pulumi.IntPtrOutput)
}

// The bandwidth that is actually provisioned.
func (o DirectConnectionResponseOutput) ProvisionedBandwidthInMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *int { return v.ProvisionedBandwidthInMbps }).(pulumi.IntPtrOutput)
}

// The field indicating if Microsoft provides session ip addresses.
func (o DirectConnectionResponseOutput) SessionAddressProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *string { return v.SessionAddressProvider }).(pulumi.StringPtrOutput)
}

// The flag that indicates whether or not the connection is used for peering service.
func (o DirectConnectionResponseOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *bool { return v.UseForPeeringService }).(pulumi.BoolPtrOutput)
}

type DirectConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (DirectConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DirectConnectionResponse)(nil)).Elem()
}

func (o DirectConnectionResponseArrayOutput) ToDirectConnectionResponseArrayOutput() DirectConnectionResponseArrayOutput {
	return o
}

func (o DirectConnectionResponseArrayOutput) ToDirectConnectionResponseArrayOutputWithContext(ctx context.Context) DirectConnectionResponseArrayOutput {
	return o
}

func (o DirectConnectionResponseArrayOutput) Index(i pulumi.IntInput) DirectConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DirectConnectionResponse {
		return vs[0].([]DirectConnectionResponse)[vs[1].(int)]
	}).(DirectConnectionResponseOutput)
}

// The properties that define an exchange connection.
type ExchangeConnection struct {
	// The BGP session associated with the connection.
	BgpSession *BgpSession `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `pulumi:"connectionIdentifier"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId *int `pulumi:"peeringDBFacilityId"`
}

// ExchangeConnectionInput is an input type that accepts ExchangeConnectionArgs and ExchangeConnectionOutput values.
// You can construct a concrete instance of `ExchangeConnectionInput` via:
//
//          ExchangeConnectionArgs{...}
type ExchangeConnectionInput interface {
	pulumi.Input

	ToExchangeConnectionOutput() ExchangeConnectionOutput
	ToExchangeConnectionOutputWithContext(context.Context) ExchangeConnectionOutput
}

// The properties that define an exchange connection.
type ExchangeConnectionArgs struct {
	// The BGP session associated with the connection.
	BgpSession BgpSessionPtrInput `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier pulumi.StringPtrInput `pulumi:"connectionIdentifier"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId pulumi.IntPtrInput `pulumi:"peeringDBFacilityId"`
}

func (ExchangeConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeConnection)(nil)).Elem()
}

func (i ExchangeConnectionArgs) ToExchangeConnectionOutput() ExchangeConnectionOutput {
	return i.ToExchangeConnectionOutputWithContext(context.Background())
}

func (i ExchangeConnectionArgs) ToExchangeConnectionOutputWithContext(ctx context.Context) ExchangeConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeConnectionOutput)
}

// ExchangeConnectionArrayInput is an input type that accepts ExchangeConnectionArray and ExchangeConnectionArrayOutput values.
// You can construct a concrete instance of `ExchangeConnectionArrayInput` via:
//
//          ExchangeConnectionArray{ ExchangeConnectionArgs{...} }
type ExchangeConnectionArrayInput interface {
	pulumi.Input

	ToExchangeConnectionArrayOutput() ExchangeConnectionArrayOutput
	ToExchangeConnectionArrayOutputWithContext(context.Context) ExchangeConnectionArrayOutput
}

type ExchangeConnectionArray []ExchangeConnectionInput

func (ExchangeConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeConnection)(nil)).Elem()
}

func (i ExchangeConnectionArray) ToExchangeConnectionArrayOutput() ExchangeConnectionArrayOutput {
	return i.ToExchangeConnectionArrayOutputWithContext(context.Background())
}

func (i ExchangeConnectionArray) ToExchangeConnectionArrayOutputWithContext(ctx context.Context) ExchangeConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeConnectionArrayOutput)
}

// The properties that define an exchange connection.
type ExchangeConnectionOutput struct{ *pulumi.OutputState }

func (ExchangeConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeConnection)(nil)).Elem()
}

func (o ExchangeConnectionOutput) ToExchangeConnectionOutput() ExchangeConnectionOutput {
	return o
}

func (o ExchangeConnectionOutput) ToExchangeConnectionOutputWithContext(ctx context.Context) ExchangeConnectionOutput {
	return o
}

// The BGP session associated with the connection.
func (o ExchangeConnectionOutput) BgpSession() BgpSessionPtrOutput {
	return o.ApplyT(func(v ExchangeConnection) *BgpSession { return v.BgpSession }).(BgpSessionPtrOutput)
}

// The unique identifier (GUID) for the connection.
func (o ExchangeConnectionOutput) ConnectionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExchangeConnection) *string { return v.ConnectionIdentifier }).(pulumi.StringPtrOutput)
}

// The PeeringDB.com ID of the facility at which the connection has to be set up.
func (o ExchangeConnectionOutput) PeeringDBFacilityId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExchangeConnection) *int { return v.PeeringDBFacilityId }).(pulumi.IntPtrOutput)
}

type ExchangeConnectionArrayOutput struct{ *pulumi.OutputState }

func (ExchangeConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeConnection)(nil)).Elem()
}

func (o ExchangeConnectionArrayOutput) ToExchangeConnectionArrayOutput() ExchangeConnectionArrayOutput {
	return o
}

func (o ExchangeConnectionArrayOutput) ToExchangeConnectionArrayOutputWithContext(ctx context.Context) ExchangeConnectionArrayOutput {
	return o
}

func (o ExchangeConnectionArrayOutput) Index(i pulumi.IntInput) ExchangeConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExchangeConnection {
		return vs[0].([]ExchangeConnection)[vs[1].(int)]
	}).(ExchangeConnectionOutput)
}

// The properties that define an exchange connection.
type ExchangeConnectionResponse struct {
	// The BGP session associated with the connection.
	BgpSession *BgpSessionResponse `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `pulumi:"connectionIdentifier"`
	// The state of the connection.
	ConnectionState string `pulumi:"connectionState"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId *int `pulumi:"peeringDBFacilityId"`
}

// ExchangeConnectionResponseInput is an input type that accepts ExchangeConnectionResponseArgs and ExchangeConnectionResponseOutput values.
// You can construct a concrete instance of `ExchangeConnectionResponseInput` via:
//
//          ExchangeConnectionResponseArgs{...}
type ExchangeConnectionResponseInput interface {
	pulumi.Input

	ToExchangeConnectionResponseOutput() ExchangeConnectionResponseOutput
	ToExchangeConnectionResponseOutputWithContext(context.Context) ExchangeConnectionResponseOutput
}

// The properties that define an exchange connection.
type ExchangeConnectionResponseArgs struct {
	// The BGP session associated with the connection.
	BgpSession BgpSessionResponsePtrInput `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier pulumi.StringPtrInput `pulumi:"connectionIdentifier"`
	// The state of the connection.
	ConnectionState pulumi.StringInput `pulumi:"connectionState"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId pulumi.IntPtrInput `pulumi:"peeringDBFacilityId"`
}

func (ExchangeConnectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeConnectionResponse)(nil)).Elem()
}

func (i ExchangeConnectionResponseArgs) ToExchangeConnectionResponseOutput() ExchangeConnectionResponseOutput {
	return i.ToExchangeConnectionResponseOutputWithContext(context.Background())
}

func (i ExchangeConnectionResponseArgs) ToExchangeConnectionResponseOutputWithContext(ctx context.Context) ExchangeConnectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeConnectionResponseOutput)
}

// ExchangeConnectionResponseArrayInput is an input type that accepts ExchangeConnectionResponseArray and ExchangeConnectionResponseArrayOutput values.
// You can construct a concrete instance of `ExchangeConnectionResponseArrayInput` via:
//
//          ExchangeConnectionResponseArray{ ExchangeConnectionResponseArgs{...} }
type ExchangeConnectionResponseArrayInput interface {
	pulumi.Input

	ToExchangeConnectionResponseArrayOutput() ExchangeConnectionResponseArrayOutput
	ToExchangeConnectionResponseArrayOutputWithContext(context.Context) ExchangeConnectionResponseArrayOutput
}

type ExchangeConnectionResponseArray []ExchangeConnectionResponseInput

func (ExchangeConnectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeConnectionResponse)(nil)).Elem()
}

func (i ExchangeConnectionResponseArray) ToExchangeConnectionResponseArrayOutput() ExchangeConnectionResponseArrayOutput {
	return i.ToExchangeConnectionResponseArrayOutputWithContext(context.Background())
}

func (i ExchangeConnectionResponseArray) ToExchangeConnectionResponseArrayOutputWithContext(ctx context.Context) ExchangeConnectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeConnectionResponseArrayOutput)
}

// The properties that define an exchange connection.
type ExchangeConnectionResponseOutput struct{ *pulumi.OutputState }

func (ExchangeConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeConnectionResponse)(nil)).Elem()
}

func (o ExchangeConnectionResponseOutput) ToExchangeConnectionResponseOutput() ExchangeConnectionResponseOutput {
	return o
}

func (o ExchangeConnectionResponseOutput) ToExchangeConnectionResponseOutputWithContext(ctx context.Context) ExchangeConnectionResponseOutput {
	return o
}

// The BGP session associated with the connection.
func (o ExchangeConnectionResponseOutput) BgpSession() BgpSessionResponsePtrOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) *BgpSessionResponse { return v.BgpSession }).(BgpSessionResponsePtrOutput)
}

// The unique identifier (GUID) for the connection.
func (o ExchangeConnectionResponseOutput) ConnectionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) *string { return v.ConnectionIdentifier }).(pulumi.StringPtrOutput)
}

// The state of the connection.
func (o ExchangeConnectionResponseOutput) ConnectionState() pulumi.StringOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) string { return v.ConnectionState }).(pulumi.StringOutput)
}

// The PeeringDB.com ID of the facility at which the connection has to be set up.
func (o ExchangeConnectionResponseOutput) PeeringDBFacilityId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) *int { return v.PeeringDBFacilityId }).(pulumi.IntPtrOutput)
}

type ExchangeConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (ExchangeConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeConnectionResponse)(nil)).Elem()
}

func (o ExchangeConnectionResponseArrayOutput) ToExchangeConnectionResponseArrayOutput() ExchangeConnectionResponseArrayOutput {
	return o
}

func (o ExchangeConnectionResponseArrayOutput) ToExchangeConnectionResponseArrayOutputWithContext(ctx context.Context) ExchangeConnectionResponseArrayOutput {
	return o
}

func (o ExchangeConnectionResponseArrayOutput) Index(i pulumi.IntInput) ExchangeConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExchangeConnectionResponse {
		return vs[0].([]ExchangeConnectionResponse)[vs[1].(int)]
	}).(ExchangeConnectionResponseOutput)
}

// The properties that define a direct peering.
type PeeringPropertiesDirect struct {
	// The set of connections that constitute a direct peering.
	Connections []DirectConnection `pulumi:"connections"`
	// The type of direct peering.
	DirectPeeringType *string `pulumi:"directPeeringType"`
	// The reference of the peer ASN.
	PeerAsn *SubResource `pulumi:"peerAsn"`
	// The flag that indicates whether or not the peering is used for peering service.
	UseForPeeringService *bool `pulumi:"useForPeeringService"`
}

// PeeringPropertiesDirectInput is an input type that accepts PeeringPropertiesDirectArgs and PeeringPropertiesDirectOutput values.
// You can construct a concrete instance of `PeeringPropertiesDirectInput` via:
//
//          PeeringPropertiesDirectArgs{...}
type PeeringPropertiesDirectInput interface {
	pulumi.Input

	ToPeeringPropertiesDirectOutput() PeeringPropertiesDirectOutput
	ToPeeringPropertiesDirectOutputWithContext(context.Context) PeeringPropertiesDirectOutput
}

// The properties that define a direct peering.
type PeeringPropertiesDirectArgs struct {
	// The set of connections that constitute a direct peering.
	Connections DirectConnectionArrayInput `pulumi:"connections"`
	// The type of direct peering.
	DirectPeeringType pulumi.StringPtrInput `pulumi:"directPeeringType"`
	// The reference of the peer ASN.
	PeerAsn SubResourcePtrInput `pulumi:"peerAsn"`
	// The flag that indicates whether or not the peering is used for peering service.
	UseForPeeringService pulumi.BoolPtrInput `pulumi:"useForPeeringService"`
}

func (PeeringPropertiesDirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesDirect)(nil)).Elem()
}

func (i PeeringPropertiesDirectArgs) ToPeeringPropertiesDirectOutput() PeeringPropertiesDirectOutput {
	return i.ToPeeringPropertiesDirectOutputWithContext(context.Background())
}

func (i PeeringPropertiesDirectArgs) ToPeeringPropertiesDirectOutputWithContext(ctx context.Context) PeeringPropertiesDirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectOutput)
}

func (i PeeringPropertiesDirectArgs) ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput {
	return i.ToPeeringPropertiesDirectPtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesDirectArgs) ToPeeringPropertiesDirectPtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectOutput).ToPeeringPropertiesDirectPtrOutputWithContext(ctx)
}

// PeeringPropertiesDirectPtrInput is an input type that accepts PeeringPropertiesDirectArgs, PeeringPropertiesDirectPtr and PeeringPropertiesDirectPtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesDirectPtrInput` via:
//
//          PeeringPropertiesDirectArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesDirectPtrInput interface {
	pulumi.Input

	ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput
	ToPeeringPropertiesDirectPtrOutputWithContext(context.Context) PeeringPropertiesDirectPtrOutput
}

type peeringPropertiesDirectPtrType PeeringPropertiesDirectArgs

func PeeringPropertiesDirectPtr(v *PeeringPropertiesDirectArgs) PeeringPropertiesDirectPtrInput {
	return (*peeringPropertiesDirectPtrType)(v)
}

func (*peeringPropertiesDirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesDirect)(nil)).Elem()
}

func (i *peeringPropertiesDirectPtrType) ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput {
	return i.ToPeeringPropertiesDirectPtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesDirectPtrType) ToPeeringPropertiesDirectPtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectPtrOutput)
}

// The properties that define a direct peering.
type PeeringPropertiesDirectOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesDirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesDirect)(nil)).Elem()
}

func (o PeeringPropertiesDirectOutput) ToPeeringPropertiesDirectOutput() PeeringPropertiesDirectOutput {
	return o
}

func (o PeeringPropertiesDirectOutput) ToPeeringPropertiesDirectOutputWithContext(ctx context.Context) PeeringPropertiesDirectOutput {
	return o
}

func (o PeeringPropertiesDirectOutput) ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput {
	return o.ToPeeringPropertiesDirectPtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesDirectOutput) ToPeeringPropertiesDirectPtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) *PeeringPropertiesDirect {
		return &v
	}).(PeeringPropertiesDirectPtrOutput)
}

// The set of connections that constitute a direct peering.
func (o PeeringPropertiesDirectOutput) Connections() DirectConnectionArrayOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) []DirectConnection { return v.Connections }).(DirectConnectionArrayOutput)
}

// The type of direct peering.
func (o PeeringPropertiesDirectOutput) DirectPeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) *string { return v.DirectPeeringType }).(pulumi.StringPtrOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesDirectOutput) PeerAsn() SubResourcePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) *SubResource { return v.PeerAsn }).(SubResourcePtrOutput)
}

// The flag that indicates whether or not the peering is used for peering service.
func (o PeeringPropertiesDirectOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) *bool { return v.UseForPeeringService }).(pulumi.BoolPtrOutput)
}

type PeeringPropertiesDirectPtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesDirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesDirect)(nil)).Elem()
}

func (o PeeringPropertiesDirectPtrOutput) ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput {
	return o
}

func (o PeeringPropertiesDirectPtrOutput) ToPeeringPropertiesDirectPtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectPtrOutput {
	return o
}

func (o PeeringPropertiesDirectPtrOutput) Elem() PeeringPropertiesDirectOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) PeeringPropertiesDirect { return *v }).(PeeringPropertiesDirectOutput)
}

// The set of connections that constitute a direct peering.
func (o PeeringPropertiesDirectPtrOutput) Connections() DirectConnectionArrayOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) []DirectConnection {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(DirectConnectionArrayOutput)
}

// The type of direct peering.
func (o PeeringPropertiesDirectPtrOutput) DirectPeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) *string {
		if v == nil {
			return nil
		}
		return v.DirectPeeringType
	}).(pulumi.StringPtrOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesDirectPtrOutput) PeerAsn() SubResourcePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) *SubResource {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(SubResourcePtrOutput)
}

// The flag that indicates whether or not the peering is used for peering service.
func (o PeeringPropertiesDirectPtrOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) *bool {
		if v == nil {
			return nil
		}
		return v.UseForPeeringService
	}).(pulumi.BoolPtrOutput)
}

// The properties that define a direct peering.
type PeeringPropertiesDirectResponse struct {
	// The set of connections that constitute a direct peering.
	Connections []DirectConnectionResponse `pulumi:"connections"`
	// The type of direct peering.
	DirectPeeringType *string `pulumi:"directPeeringType"`
	// The reference of the peer ASN.
	PeerAsn *SubResourceResponse `pulumi:"peerAsn"`
	// The flag that indicates whether or not the peering is used for peering service.
	UseForPeeringService *bool `pulumi:"useForPeeringService"`
}

// PeeringPropertiesDirectResponseInput is an input type that accepts PeeringPropertiesDirectResponseArgs and PeeringPropertiesDirectResponseOutput values.
// You can construct a concrete instance of `PeeringPropertiesDirectResponseInput` via:
//
//          PeeringPropertiesDirectResponseArgs{...}
type PeeringPropertiesDirectResponseInput interface {
	pulumi.Input

	ToPeeringPropertiesDirectResponseOutput() PeeringPropertiesDirectResponseOutput
	ToPeeringPropertiesDirectResponseOutputWithContext(context.Context) PeeringPropertiesDirectResponseOutput
}

// The properties that define a direct peering.
type PeeringPropertiesDirectResponseArgs struct {
	// The set of connections that constitute a direct peering.
	Connections DirectConnectionResponseArrayInput `pulumi:"connections"`
	// The type of direct peering.
	DirectPeeringType pulumi.StringPtrInput `pulumi:"directPeeringType"`
	// The reference of the peer ASN.
	PeerAsn SubResourceResponsePtrInput `pulumi:"peerAsn"`
	// The flag that indicates whether or not the peering is used for peering service.
	UseForPeeringService pulumi.BoolPtrInput `pulumi:"useForPeeringService"`
}

func (PeeringPropertiesDirectResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesDirectResponse)(nil)).Elem()
}

func (i PeeringPropertiesDirectResponseArgs) ToPeeringPropertiesDirectResponseOutput() PeeringPropertiesDirectResponseOutput {
	return i.ToPeeringPropertiesDirectResponseOutputWithContext(context.Background())
}

func (i PeeringPropertiesDirectResponseArgs) ToPeeringPropertiesDirectResponseOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectResponseOutput)
}

func (i PeeringPropertiesDirectResponseArgs) ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput {
	return i.ToPeeringPropertiesDirectResponsePtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesDirectResponseArgs) ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectResponseOutput).ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx)
}

// PeeringPropertiesDirectResponsePtrInput is an input type that accepts PeeringPropertiesDirectResponseArgs, PeeringPropertiesDirectResponsePtr and PeeringPropertiesDirectResponsePtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesDirectResponsePtrInput` via:
//
//          PeeringPropertiesDirectResponseArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesDirectResponsePtrInput interface {
	pulumi.Input

	ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput
	ToPeeringPropertiesDirectResponsePtrOutputWithContext(context.Context) PeeringPropertiesDirectResponsePtrOutput
}

type peeringPropertiesDirectResponsePtrType PeeringPropertiesDirectResponseArgs

func PeeringPropertiesDirectResponsePtr(v *PeeringPropertiesDirectResponseArgs) PeeringPropertiesDirectResponsePtrInput {
	return (*peeringPropertiesDirectResponsePtrType)(v)
}

func (*peeringPropertiesDirectResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesDirectResponse)(nil)).Elem()
}

func (i *peeringPropertiesDirectResponsePtrType) ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput {
	return i.ToPeeringPropertiesDirectResponsePtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesDirectResponsePtrType) ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectResponsePtrOutput)
}

// The properties that define a direct peering.
type PeeringPropertiesDirectResponseOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesDirectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesDirectResponse)(nil)).Elem()
}

func (o PeeringPropertiesDirectResponseOutput) ToPeeringPropertiesDirectResponseOutput() PeeringPropertiesDirectResponseOutput {
	return o
}

func (o PeeringPropertiesDirectResponseOutput) ToPeeringPropertiesDirectResponseOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponseOutput {
	return o
}

func (o PeeringPropertiesDirectResponseOutput) ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput {
	return o.ToPeeringPropertiesDirectResponsePtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesDirectResponseOutput) ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) *PeeringPropertiesDirectResponse {
		return &v
	}).(PeeringPropertiesDirectResponsePtrOutput)
}

// The set of connections that constitute a direct peering.
func (o PeeringPropertiesDirectResponseOutput) Connections() DirectConnectionResponseArrayOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) []DirectConnectionResponse { return v.Connections }).(DirectConnectionResponseArrayOutput)
}

// The type of direct peering.
func (o PeeringPropertiesDirectResponseOutput) DirectPeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) *string { return v.DirectPeeringType }).(pulumi.StringPtrOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesDirectResponseOutput) PeerAsn() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) *SubResourceResponse { return v.PeerAsn }).(SubResourceResponsePtrOutput)
}

// The flag that indicates whether or not the peering is used for peering service.
func (o PeeringPropertiesDirectResponseOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) *bool { return v.UseForPeeringService }).(pulumi.BoolPtrOutput)
}

type PeeringPropertiesDirectResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesDirectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesDirectResponse)(nil)).Elem()
}

func (o PeeringPropertiesDirectResponsePtrOutput) ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput {
	return o
}

func (o PeeringPropertiesDirectResponsePtrOutput) ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponsePtrOutput {
	return o
}

func (o PeeringPropertiesDirectResponsePtrOutput) Elem() PeeringPropertiesDirectResponseOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) PeeringPropertiesDirectResponse { return *v }).(PeeringPropertiesDirectResponseOutput)
}

// The set of connections that constitute a direct peering.
func (o PeeringPropertiesDirectResponsePtrOutput) Connections() DirectConnectionResponseArrayOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) []DirectConnectionResponse {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(DirectConnectionResponseArrayOutput)
}

// The type of direct peering.
func (o PeeringPropertiesDirectResponsePtrOutput) DirectPeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) *string {
		if v == nil {
			return nil
		}
		return v.DirectPeeringType
	}).(pulumi.StringPtrOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesDirectResponsePtrOutput) PeerAsn() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(SubResourceResponsePtrOutput)
}

// The flag that indicates whether or not the peering is used for peering service.
func (o PeeringPropertiesDirectResponsePtrOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UseForPeeringService
	}).(pulumi.BoolPtrOutput)
}

// The properties that define an exchange peering.
type PeeringPropertiesExchange struct {
	// The set of connections that constitute an exchange peering.
	Connections []ExchangeConnection `pulumi:"connections"`
	// The reference of the peer ASN.
	PeerAsn *SubResource `pulumi:"peerAsn"`
}

// PeeringPropertiesExchangeInput is an input type that accepts PeeringPropertiesExchangeArgs and PeeringPropertiesExchangeOutput values.
// You can construct a concrete instance of `PeeringPropertiesExchangeInput` via:
//
//          PeeringPropertiesExchangeArgs{...}
type PeeringPropertiesExchangeInput interface {
	pulumi.Input

	ToPeeringPropertiesExchangeOutput() PeeringPropertiesExchangeOutput
	ToPeeringPropertiesExchangeOutputWithContext(context.Context) PeeringPropertiesExchangeOutput
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeArgs struct {
	// The set of connections that constitute an exchange peering.
	Connections ExchangeConnectionArrayInput `pulumi:"connections"`
	// The reference of the peer ASN.
	PeerAsn SubResourcePtrInput `pulumi:"peerAsn"`
}

func (PeeringPropertiesExchangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesExchange)(nil)).Elem()
}

func (i PeeringPropertiesExchangeArgs) ToPeeringPropertiesExchangeOutput() PeeringPropertiesExchangeOutput {
	return i.ToPeeringPropertiesExchangeOutputWithContext(context.Background())
}

func (i PeeringPropertiesExchangeArgs) ToPeeringPropertiesExchangeOutputWithContext(ctx context.Context) PeeringPropertiesExchangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeOutput)
}

func (i PeeringPropertiesExchangeArgs) ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput {
	return i.ToPeeringPropertiesExchangePtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesExchangeArgs) ToPeeringPropertiesExchangePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeOutput).ToPeeringPropertiesExchangePtrOutputWithContext(ctx)
}

// PeeringPropertiesExchangePtrInput is an input type that accepts PeeringPropertiesExchangeArgs, PeeringPropertiesExchangePtr and PeeringPropertiesExchangePtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesExchangePtrInput` via:
//
//          PeeringPropertiesExchangeArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesExchangePtrInput interface {
	pulumi.Input

	ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput
	ToPeeringPropertiesExchangePtrOutputWithContext(context.Context) PeeringPropertiesExchangePtrOutput
}

type peeringPropertiesExchangePtrType PeeringPropertiesExchangeArgs

func PeeringPropertiesExchangePtr(v *PeeringPropertiesExchangeArgs) PeeringPropertiesExchangePtrInput {
	return (*peeringPropertiesExchangePtrType)(v)
}

func (*peeringPropertiesExchangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesExchange)(nil)).Elem()
}

func (i *peeringPropertiesExchangePtrType) ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput {
	return i.ToPeeringPropertiesExchangePtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesExchangePtrType) ToPeeringPropertiesExchangePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangePtrOutput)
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesExchangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesExchange)(nil)).Elem()
}

func (o PeeringPropertiesExchangeOutput) ToPeeringPropertiesExchangeOutput() PeeringPropertiesExchangeOutput {
	return o
}

func (o PeeringPropertiesExchangeOutput) ToPeeringPropertiesExchangeOutputWithContext(ctx context.Context) PeeringPropertiesExchangeOutput {
	return o
}

func (o PeeringPropertiesExchangeOutput) ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput {
	return o.ToPeeringPropertiesExchangePtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesExchangeOutput) ToPeeringPropertiesExchangePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesExchange) *PeeringPropertiesExchange {
		return &v
	}).(PeeringPropertiesExchangePtrOutput)
}

// The set of connections that constitute an exchange peering.
func (o PeeringPropertiesExchangeOutput) Connections() ExchangeConnectionArrayOutput {
	return o.ApplyT(func(v PeeringPropertiesExchange) []ExchangeConnection { return v.Connections }).(ExchangeConnectionArrayOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesExchangeOutput) PeerAsn() SubResourcePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesExchange) *SubResource { return v.PeerAsn }).(SubResourcePtrOutput)
}

type PeeringPropertiesExchangePtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesExchangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesExchange)(nil)).Elem()
}

func (o PeeringPropertiesExchangePtrOutput) ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput {
	return o
}

func (o PeeringPropertiesExchangePtrOutput) ToPeeringPropertiesExchangePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangePtrOutput {
	return o
}

func (o PeeringPropertiesExchangePtrOutput) Elem() PeeringPropertiesExchangeOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchange) PeeringPropertiesExchange { return *v }).(PeeringPropertiesExchangeOutput)
}

// The set of connections that constitute an exchange peering.
func (o PeeringPropertiesExchangePtrOutput) Connections() ExchangeConnectionArrayOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchange) []ExchangeConnection {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(ExchangeConnectionArrayOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesExchangePtrOutput) PeerAsn() SubResourcePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchange) *SubResource {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(SubResourcePtrOutput)
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeResponse struct {
	// The set of connections that constitute an exchange peering.
	Connections []ExchangeConnectionResponse `pulumi:"connections"`
	// The reference of the peer ASN.
	PeerAsn *SubResourceResponse `pulumi:"peerAsn"`
}

// PeeringPropertiesExchangeResponseInput is an input type that accepts PeeringPropertiesExchangeResponseArgs and PeeringPropertiesExchangeResponseOutput values.
// You can construct a concrete instance of `PeeringPropertiesExchangeResponseInput` via:
//
//          PeeringPropertiesExchangeResponseArgs{...}
type PeeringPropertiesExchangeResponseInput interface {
	pulumi.Input

	ToPeeringPropertiesExchangeResponseOutput() PeeringPropertiesExchangeResponseOutput
	ToPeeringPropertiesExchangeResponseOutputWithContext(context.Context) PeeringPropertiesExchangeResponseOutput
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeResponseArgs struct {
	// The set of connections that constitute an exchange peering.
	Connections ExchangeConnectionResponseArrayInput `pulumi:"connections"`
	// The reference of the peer ASN.
	PeerAsn SubResourceResponsePtrInput `pulumi:"peerAsn"`
}

func (PeeringPropertiesExchangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesExchangeResponse)(nil)).Elem()
}

func (i PeeringPropertiesExchangeResponseArgs) ToPeeringPropertiesExchangeResponseOutput() PeeringPropertiesExchangeResponseOutput {
	return i.ToPeeringPropertiesExchangeResponseOutputWithContext(context.Background())
}

func (i PeeringPropertiesExchangeResponseArgs) ToPeeringPropertiesExchangeResponseOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeResponseOutput)
}

func (i PeeringPropertiesExchangeResponseArgs) ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput {
	return i.ToPeeringPropertiesExchangeResponsePtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesExchangeResponseArgs) ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeResponseOutput).ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx)
}

// PeeringPropertiesExchangeResponsePtrInput is an input type that accepts PeeringPropertiesExchangeResponseArgs, PeeringPropertiesExchangeResponsePtr and PeeringPropertiesExchangeResponsePtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesExchangeResponsePtrInput` via:
//
//          PeeringPropertiesExchangeResponseArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesExchangeResponsePtrInput interface {
	pulumi.Input

	ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput
	ToPeeringPropertiesExchangeResponsePtrOutputWithContext(context.Context) PeeringPropertiesExchangeResponsePtrOutput
}

type peeringPropertiesExchangeResponsePtrType PeeringPropertiesExchangeResponseArgs

func PeeringPropertiesExchangeResponsePtr(v *PeeringPropertiesExchangeResponseArgs) PeeringPropertiesExchangeResponsePtrInput {
	return (*peeringPropertiesExchangeResponsePtrType)(v)
}

func (*peeringPropertiesExchangeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesExchangeResponse)(nil)).Elem()
}

func (i *peeringPropertiesExchangeResponsePtrType) ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput {
	return i.ToPeeringPropertiesExchangeResponsePtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesExchangeResponsePtrType) ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeResponsePtrOutput)
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeResponseOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesExchangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesExchangeResponse)(nil)).Elem()
}

func (o PeeringPropertiesExchangeResponseOutput) ToPeeringPropertiesExchangeResponseOutput() PeeringPropertiesExchangeResponseOutput {
	return o
}

func (o PeeringPropertiesExchangeResponseOutput) ToPeeringPropertiesExchangeResponseOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponseOutput {
	return o
}

func (o PeeringPropertiesExchangeResponseOutput) ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput {
	return o.ToPeeringPropertiesExchangeResponsePtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesExchangeResponseOutput) ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesExchangeResponse) *PeeringPropertiesExchangeResponse {
		return &v
	}).(PeeringPropertiesExchangeResponsePtrOutput)
}

// The set of connections that constitute an exchange peering.
func (o PeeringPropertiesExchangeResponseOutput) Connections() ExchangeConnectionResponseArrayOutput {
	return o.ApplyT(func(v PeeringPropertiesExchangeResponse) []ExchangeConnectionResponse { return v.Connections }).(ExchangeConnectionResponseArrayOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesExchangeResponseOutput) PeerAsn() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesExchangeResponse) *SubResourceResponse { return v.PeerAsn }).(SubResourceResponsePtrOutput)
}

type PeeringPropertiesExchangeResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesExchangeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesExchangeResponse)(nil)).Elem()
}

func (o PeeringPropertiesExchangeResponsePtrOutput) ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput {
	return o
}

func (o PeeringPropertiesExchangeResponsePtrOutput) ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponsePtrOutput {
	return o
}

func (o PeeringPropertiesExchangeResponsePtrOutput) Elem() PeeringPropertiesExchangeResponseOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchangeResponse) PeeringPropertiesExchangeResponse { return *v }).(PeeringPropertiesExchangeResponseOutput)
}

// The set of connections that constitute an exchange peering.
func (o PeeringPropertiesExchangeResponsePtrOutput) Connections() ExchangeConnectionResponseArrayOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchangeResponse) []ExchangeConnectionResponse {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(ExchangeConnectionResponseArrayOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesExchangeResponsePtrOutput) PeerAsn() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchangeResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(SubResourceResponsePtrOutput)
}

// The SKU that defines the tier and kind of the peering.
type PeeringSku struct {
	// The family of the peering SKU.
	Family *string `pulumi:"family"`
	// The name of the peering SKU.
	Name *string `pulumi:"name"`
	// The size of the peering SKU.
	Size *string `pulumi:"size"`
	// The tier of the peering SKU.
	Tier *string `pulumi:"tier"`
}

// PeeringSkuInput is an input type that accepts PeeringSkuArgs and PeeringSkuOutput values.
// You can construct a concrete instance of `PeeringSkuInput` via:
//
//          PeeringSkuArgs{...}
type PeeringSkuInput interface {
	pulumi.Input

	ToPeeringSkuOutput() PeeringSkuOutput
	ToPeeringSkuOutputWithContext(context.Context) PeeringSkuOutput
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuArgs struct {
	// The family of the peering SKU.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the peering SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the peering SKU.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the peering SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PeeringSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringSku)(nil)).Elem()
}

func (i PeeringSkuArgs) ToPeeringSkuOutput() PeeringSkuOutput {
	return i.ToPeeringSkuOutputWithContext(context.Background())
}

func (i PeeringSkuArgs) ToPeeringSkuOutputWithContext(ctx context.Context) PeeringSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuOutput)
}

func (i PeeringSkuArgs) ToPeeringSkuPtrOutput() PeeringSkuPtrOutput {
	return i.ToPeeringSkuPtrOutputWithContext(context.Background())
}

func (i PeeringSkuArgs) ToPeeringSkuPtrOutputWithContext(ctx context.Context) PeeringSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuOutput).ToPeeringSkuPtrOutputWithContext(ctx)
}

// PeeringSkuPtrInput is an input type that accepts PeeringSkuArgs, PeeringSkuPtr and PeeringSkuPtrOutput values.
// You can construct a concrete instance of `PeeringSkuPtrInput` via:
//
//          PeeringSkuArgs{...}
//
//  or:
//
//          nil
type PeeringSkuPtrInput interface {
	pulumi.Input

	ToPeeringSkuPtrOutput() PeeringSkuPtrOutput
	ToPeeringSkuPtrOutputWithContext(context.Context) PeeringSkuPtrOutput
}

type peeringSkuPtrType PeeringSkuArgs

func PeeringSkuPtr(v *PeeringSkuArgs) PeeringSkuPtrInput {
	return (*peeringSkuPtrType)(v)
}

func (*peeringSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringSku)(nil)).Elem()
}

func (i *peeringSkuPtrType) ToPeeringSkuPtrOutput() PeeringSkuPtrOutput {
	return i.ToPeeringSkuPtrOutputWithContext(context.Background())
}

func (i *peeringSkuPtrType) ToPeeringSkuPtrOutputWithContext(ctx context.Context) PeeringSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuPtrOutput)
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuOutput struct{ *pulumi.OutputState }

func (PeeringSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringSku)(nil)).Elem()
}

func (o PeeringSkuOutput) ToPeeringSkuOutput() PeeringSkuOutput {
	return o
}

func (o PeeringSkuOutput) ToPeeringSkuOutputWithContext(ctx context.Context) PeeringSkuOutput {
	return o
}

func (o PeeringSkuOutput) ToPeeringSkuPtrOutput() PeeringSkuPtrOutput {
	return o.ToPeeringSkuPtrOutputWithContext(context.Background())
}

func (o PeeringSkuOutput) ToPeeringSkuPtrOutputWithContext(ctx context.Context) PeeringSkuPtrOutput {
	return o.ApplyT(func(v PeeringSku) *PeeringSku {
		return &v
	}).(PeeringSkuPtrOutput)
}

// The family of the peering SKU.
func (o PeeringSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the peering SKU.
func (o PeeringSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the peering SKU.
func (o PeeringSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the peering SKU.
func (o PeeringSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PeeringSkuPtrOutput struct{ *pulumi.OutputState }

func (PeeringSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringSku)(nil)).Elem()
}

func (o PeeringSkuPtrOutput) ToPeeringSkuPtrOutput() PeeringSkuPtrOutput {
	return o
}

func (o PeeringSkuPtrOutput) ToPeeringSkuPtrOutputWithContext(ctx context.Context) PeeringSkuPtrOutput {
	return o
}

func (o PeeringSkuPtrOutput) Elem() PeeringSkuOutput {
	return o.ApplyT(func(v *PeeringSku) PeeringSku { return *v }).(PeeringSkuOutput)
}

// The family of the peering SKU.
func (o PeeringSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the peering SKU.
func (o PeeringSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the peering SKU.
func (o PeeringSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the peering SKU.
func (o PeeringSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuResponse struct {
	// The family of the peering SKU.
	Family *string `pulumi:"family"`
	// The name of the peering SKU.
	Name *string `pulumi:"name"`
	// The size of the peering SKU.
	Size *string `pulumi:"size"`
	// The tier of the peering SKU.
	Tier *string `pulumi:"tier"`
}

// PeeringSkuResponseInput is an input type that accepts PeeringSkuResponseArgs and PeeringSkuResponseOutput values.
// You can construct a concrete instance of `PeeringSkuResponseInput` via:
//
//          PeeringSkuResponseArgs{...}
type PeeringSkuResponseInput interface {
	pulumi.Input

	ToPeeringSkuResponseOutput() PeeringSkuResponseOutput
	ToPeeringSkuResponseOutputWithContext(context.Context) PeeringSkuResponseOutput
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuResponseArgs struct {
	// The family of the peering SKU.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the peering SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the peering SKU.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the peering SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PeeringSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringSkuResponse)(nil)).Elem()
}

func (i PeeringSkuResponseArgs) ToPeeringSkuResponseOutput() PeeringSkuResponseOutput {
	return i.ToPeeringSkuResponseOutputWithContext(context.Background())
}

func (i PeeringSkuResponseArgs) ToPeeringSkuResponseOutputWithContext(ctx context.Context) PeeringSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuResponseOutput)
}

func (i PeeringSkuResponseArgs) ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput {
	return i.ToPeeringSkuResponsePtrOutputWithContext(context.Background())
}

func (i PeeringSkuResponseArgs) ToPeeringSkuResponsePtrOutputWithContext(ctx context.Context) PeeringSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuResponseOutput).ToPeeringSkuResponsePtrOutputWithContext(ctx)
}

// PeeringSkuResponsePtrInput is an input type that accepts PeeringSkuResponseArgs, PeeringSkuResponsePtr and PeeringSkuResponsePtrOutput values.
// You can construct a concrete instance of `PeeringSkuResponsePtrInput` via:
//
//          PeeringSkuResponseArgs{...}
//
//  or:
//
//          nil
type PeeringSkuResponsePtrInput interface {
	pulumi.Input

	ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput
	ToPeeringSkuResponsePtrOutputWithContext(context.Context) PeeringSkuResponsePtrOutput
}

type peeringSkuResponsePtrType PeeringSkuResponseArgs

func PeeringSkuResponsePtr(v *PeeringSkuResponseArgs) PeeringSkuResponsePtrInput {
	return (*peeringSkuResponsePtrType)(v)
}

func (*peeringSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringSkuResponse)(nil)).Elem()
}

func (i *peeringSkuResponsePtrType) ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput {
	return i.ToPeeringSkuResponsePtrOutputWithContext(context.Background())
}

func (i *peeringSkuResponsePtrType) ToPeeringSkuResponsePtrOutputWithContext(ctx context.Context) PeeringSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuResponsePtrOutput)
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuResponseOutput struct{ *pulumi.OutputState }

func (PeeringSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringSkuResponse)(nil)).Elem()
}

func (o PeeringSkuResponseOutput) ToPeeringSkuResponseOutput() PeeringSkuResponseOutput {
	return o
}

func (o PeeringSkuResponseOutput) ToPeeringSkuResponseOutputWithContext(ctx context.Context) PeeringSkuResponseOutput {
	return o
}

func (o PeeringSkuResponseOutput) ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput {
	return o.ToPeeringSkuResponsePtrOutputWithContext(context.Background())
}

func (o PeeringSkuResponseOutput) ToPeeringSkuResponsePtrOutputWithContext(ctx context.Context) PeeringSkuResponsePtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *PeeringSkuResponse {
		return &v
	}).(PeeringSkuResponsePtrOutput)
}

// The family of the peering SKU.
func (o PeeringSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the peering SKU.
func (o PeeringSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the peering SKU.
func (o PeeringSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the peering SKU.
func (o PeeringSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PeeringSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringSkuResponse)(nil)).Elem()
}

func (o PeeringSkuResponsePtrOutput) ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput {
	return o
}

func (o PeeringSkuResponsePtrOutput) ToPeeringSkuResponsePtrOutputWithContext(ctx context.Context) PeeringSkuResponsePtrOutput {
	return o
}

func (o PeeringSkuResponsePtrOutput) Elem() PeeringSkuResponseOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) PeeringSkuResponse { return *v }).(PeeringSkuResponseOutput)
}

// The family of the peering SKU.
func (o PeeringSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the peering SKU.
func (o PeeringSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the peering SKU.
func (o PeeringSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the peering SKU.
func (o PeeringSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The sub resource.
type SubResource struct {
	// The identifier of the referenced resource.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//          SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// The sub resource.
type SubResourceArgs struct {
	// The identifier of the referenced resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//          SubResourceArgs{...}
//
//  or:
//
//          nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// The sub resource.
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyT(func(v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// The identifier of the referenced resource.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource { return *v }).(SubResourceOutput)
}

// The identifier of the referenced resource.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The sub resource.
type SubResourceResponse struct {
	// The identifier of the referenced resource.
	Id *string `pulumi:"id"`
}

// SubResourceResponseInput is an input type that accepts SubResourceResponseArgs and SubResourceResponseOutput values.
// You can construct a concrete instance of `SubResourceResponseInput` via:
//
//          SubResourceResponseArgs{...}
type SubResourceResponseInput interface {
	pulumi.Input

	ToSubResourceResponseOutput() SubResourceResponseOutput
	ToSubResourceResponseOutputWithContext(context.Context) SubResourceResponseOutput
}

// The sub resource.
type SubResourceResponseArgs struct {
	// The identifier of the referenced resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return i.ToSubResourceResponseOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput)
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput).ToSubResourceResponsePtrOutputWithContext(ctx)
}

// SubResourceResponsePtrInput is an input type that accepts SubResourceResponseArgs, SubResourceResponsePtr and SubResourceResponsePtrOutput values.
// You can construct a concrete instance of `SubResourceResponsePtrInput` via:
//
//          SubResourceResponseArgs{...}
//
//  or:
//
//          nil
type SubResourceResponsePtrInput interface {
	pulumi.Input

	ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput
	ToSubResourceResponsePtrOutputWithContext(context.Context) SubResourceResponsePtrOutput
}

type subResourceResponsePtrType SubResourceResponseArgs

func SubResourceResponsePtr(v *SubResourceResponseArgs) SubResourceResponsePtrInput {
	return (*subResourceResponsePtrType)(v)
}

func (*subResourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponsePtrOutput)
}

// The sub resource.
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *SubResourceResponse {
		return &v
	}).(SubResourceResponsePtrOutput)
}

// The identifier of the referenced resource.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse { return *v }).(SubResourceResponseOutput)
}

// The identifier of the referenced resource.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BgpSessionOutput{})
	pulumi.RegisterOutputType(BgpSessionPtrOutput{})
	pulumi.RegisterOutputType(BgpSessionResponseOutput{})
	pulumi.RegisterOutputType(BgpSessionResponsePtrOutput{})
	pulumi.RegisterOutputType(ContactInfoOutput{})
	pulumi.RegisterOutputType(ContactInfoPtrOutput{})
	pulumi.RegisterOutputType(ContactInfoResponseOutput{})
	pulumi.RegisterOutputType(ContactInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(DirectConnectionOutput{})
	pulumi.RegisterOutputType(DirectConnectionArrayOutput{})
	pulumi.RegisterOutputType(DirectConnectionResponseOutput{})
	pulumi.RegisterOutputType(DirectConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(ExchangeConnectionOutput{})
	pulumi.RegisterOutputType(ExchangeConnectionArrayOutput{})
	pulumi.RegisterOutputType(ExchangeConnectionResponseOutput{})
	pulumi.RegisterOutputType(ExchangeConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesDirectOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesDirectPtrOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesDirectResponseOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesDirectResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesExchangeOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesExchangePtrOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesExchangeResponseOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesExchangeResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringSkuOutput{})
	pulumi.RegisterOutputType(PeeringSkuPtrOutput{})
	pulumi.RegisterOutputType(PeeringSkuResponseOutput{})
	pulumi.RegisterOutputType(PeeringSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
}
