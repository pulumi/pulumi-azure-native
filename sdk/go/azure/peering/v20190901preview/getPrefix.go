// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The peering service prefix class.
//
// Deprecated: Version 2019-09-01-preview will be removed in v2 of the provider.
func LookupPrefix(ctx *pulumi.Context, args *LookupPrefixArgs, opts ...pulumi.InvokeOption) (*LookupPrefixResult, error) {
	var rv LookupPrefixResult
	err := ctx.Invoke("azure-native:peering/v20190901preview:getPrefix", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPrefixArgs struct {
	// The properties to be expanded.
	Expand *string `pulumi:"expand"`
	// The name of the peering service.
	PeeringServiceName string `pulumi:"peeringServiceName"`
	// The name of the prefix.
	PrefixName string `pulumi:"prefixName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The peering service prefix class.
type LookupPrefixResult struct {
	// The error message for validation state
	ErrorMessage string `pulumi:"errorMessage"`
	// The list of events for peering service prefix
	Events []PeeringServicePrefixEventResponse `pulumi:"events"`
	// The ID of the resource.
	Id string `pulumi:"id"`
	// The prefix learned type
	LearnedType string `pulumi:"learnedType"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The prefix from which your traffic originates.
	Prefix *string `pulumi:"prefix"`
	// The prefix validation state
	PrefixValidationState string `pulumi:"prefixValidationState"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

func LookupPrefixOutput(ctx *pulumi.Context, args LookupPrefixOutputArgs, opts ...pulumi.InvokeOption) LookupPrefixResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPrefixResult, error) {
			args := v.(LookupPrefixArgs)
			r, err := LookupPrefix(ctx, &args, opts...)
			var s LookupPrefixResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPrefixResultOutput)
}

type LookupPrefixOutputArgs struct {
	// The properties to be expanded.
	Expand pulumi.StringPtrInput `pulumi:"expand"`
	// The name of the peering service.
	PeeringServiceName pulumi.StringInput `pulumi:"peeringServiceName"`
	// The name of the prefix.
	PrefixName pulumi.StringInput `pulumi:"prefixName"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPrefixOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrefixArgs)(nil)).Elem()
}

// The peering service prefix class.
type LookupPrefixResultOutput struct{ *pulumi.OutputState }

func (LookupPrefixResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrefixResult)(nil)).Elem()
}

func (o LookupPrefixResultOutput) ToLookupPrefixResultOutput() LookupPrefixResultOutput {
	return o
}

func (o LookupPrefixResultOutput) ToLookupPrefixResultOutputWithContext(ctx context.Context) LookupPrefixResultOutput {
	return o
}

// The error message for validation state
func (o LookupPrefixResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The list of events for peering service prefix
func (o LookupPrefixResultOutput) Events() PeeringServicePrefixEventResponseArrayOutput {
	return o.ApplyT(func(v LookupPrefixResult) []PeeringServicePrefixEventResponse { return v.Events }).(PeeringServicePrefixEventResponseArrayOutput)
}

// The ID of the resource.
func (o LookupPrefixResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixResult) string { return v.Id }).(pulumi.StringOutput)
}

// The prefix learned type
func (o LookupPrefixResultOutput) LearnedType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixResult) string { return v.LearnedType }).(pulumi.StringOutput)
}

// The name of the resource.
func (o LookupPrefixResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixResult) string { return v.Name }).(pulumi.StringOutput)
}

// The prefix from which your traffic originates.
func (o LookupPrefixResultOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrefixResult) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The prefix validation state
func (o LookupPrefixResultOutput) PrefixValidationState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixResult) string { return v.PrefixValidationState }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o LookupPrefixResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the resource.
func (o LookupPrefixResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPrefixResultOutput{})
}
