// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package peering

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PeeringService struct {
	pulumi.CustomResourceState

	Location                       pulumi.StringOutput                `pulumi:"location"`
	Name                           pulumi.StringOutput                `pulumi:"name"`
	PeeringServiceLocation         pulumi.StringPtrOutput             `pulumi:"peeringServiceLocation"`
	PeeringServiceProvider         pulumi.StringPtrOutput             `pulumi:"peeringServiceProvider"`
	ProviderBackupPeeringLocation  pulumi.StringPtrOutput             `pulumi:"providerBackupPeeringLocation"`
	ProviderPrimaryPeeringLocation pulumi.StringPtrOutput             `pulumi:"providerPrimaryPeeringLocation"`
	ProvisioningState              pulumi.StringOutput                `pulumi:"provisioningState"`
	Sku                            PeeringServiceSkuResponsePtrOutput `pulumi:"sku"`
	Tags                           pulumi.StringMapOutput             `pulumi:"tags"`
	Type                           pulumi.StringOutput                `pulumi:"type"`
}

// NewPeeringService registers a new resource with the given unique name, arguments, and options.
func NewPeeringService(ctx *pulumi.Context,
	name string, args *PeeringServiceArgs, opts ...pulumi.ResourceOption) (*PeeringService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:peering:PeeringService"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20190801preview:PeeringService"),
		},
		{
			Type: pulumi.String("azure-nextgen:peering/v20190801preview:PeeringService"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20190901preview:PeeringService"),
		},
		{
			Type: pulumi.String("azure-nextgen:peering/v20190901preview:PeeringService"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20200101preview:PeeringService"),
		},
		{
			Type: pulumi.String("azure-nextgen:peering/v20200101preview:PeeringService"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20200401:PeeringService"),
		},
		{
			Type: pulumi.String("azure-nextgen:peering/v20200401:PeeringService"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20201001:PeeringService"),
		},
		{
			Type: pulumi.String("azure-nextgen:peering/v20201001:PeeringService"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20210101:PeeringService"),
		},
		{
			Type: pulumi.String("azure-nextgen:peering/v20210101:PeeringService"),
		},
		{
			Type: pulumi.String("azure-native:peering/v20210601:PeeringService"),
		},
		{
			Type: pulumi.String("azure-nextgen:peering/v20210601:PeeringService"),
		},
	})
	opts = append(opts, aliases)
	var resource PeeringService
	err := ctx.RegisterResource("azure-native:peering:PeeringService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringService gets an existing PeeringService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringServiceState, opts ...pulumi.ResourceOption) (*PeeringService, error) {
	var resource PeeringService
	err := ctx.ReadResource("azure-native:peering:PeeringService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringService resources.
type peeringServiceState struct {
}

type PeeringServiceState struct {
}

func (PeeringServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringServiceState)(nil)).Elem()
}

type peeringServiceArgs struct {
	Location                       *string            `pulumi:"location"`
	PeeringServiceLocation         *string            `pulumi:"peeringServiceLocation"`
	PeeringServiceName             *string            `pulumi:"peeringServiceName"`
	PeeringServiceProvider         *string            `pulumi:"peeringServiceProvider"`
	ProviderBackupPeeringLocation  *string            `pulumi:"providerBackupPeeringLocation"`
	ProviderPrimaryPeeringLocation *string            `pulumi:"providerPrimaryPeeringLocation"`
	ResourceGroupName              string             `pulumi:"resourceGroupName"`
	Sku                            *PeeringServiceSku `pulumi:"sku"`
	Tags                           map[string]string  `pulumi:"tags"`
}

// The set of arguments for constructing a PeeringService resource.
type PeeringServiceArgs struct {
	Location                       pulumi.StringPtrInput
	PeeringServiceLocation         pulumi.StringPtrInput
	PeeringServiceName             pulumi.StringPtrInput
	PeeringServiceProvider         pulumi.StringPtrInput
	ProviderBackupPeeringLocation  pulumi.StringPtrInput
	ProviderPrimaryPeeringLocation pulumi.StringPtrInput
	ResourceGroupName              pulumi.StringInput
	Sku                            PeeringServiceSkuPtrInput
	Tags                           pulumi.StringMapInput
}

func (PeeringServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringServiceArgs)(nil)).Elem()
}

type PeeringServiceInput interface {
	pulumi.Input

	ToPeeringServiceOutput() PeeringServiceOutput
	ToPeeringServiceOutputWithContext(ctx context.Context) PeeringServiceOutput
}

func (*PeeringService) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringService)(nil))
}

func (i *PeeringService) ToPeeringServiceOutput() PeeringServiceOutput {
	return i.ToPeeringServiceOutputWithContext(context.Background())
}

func (i *PeeringService) ToPeeringServiceOutputWithContext(ctx context.Context) PeeringServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServiceOutput)
}

type PeeringServiceOutput struct{ *pulumi.OutputState }

func (PeeringServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringService)(nil))
}

func (o PeeringServiceOutput) ToPeeringServiceOutput() PeeringServiceOutput {
	return o
}

func (o PeeringServiceOutput) ToPeeringServiceOutputWithContext(ctx context.Context) PeeringServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PeeringServiceOutput{})
}
