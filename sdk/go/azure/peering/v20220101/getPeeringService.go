// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Peering Service
func LookupPeeringService(ctx *pulumi.Context, args *LookupPeeringServiceArgs, opts ...pulumi.InvokeOption) (*LookupPeeringServiceResult, error) {
	var rv LookupPeeringServiceResult
	err := ctx.Invoke("azure-native:peering/v20220101:getPeeringService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPeeringServiceArgs struct {
	// The name of the peering.
	PeeringServiceName string `pulumi:"peeringServiceName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Peering Service
type LookupPeeringServiceResult struct {
	// The ID of the resource.
	Id string `pulumi:"id"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The Log Analytics Workspace Properties
	LogAnalyticsWorkspaceProperties *LogAnalyticsWorkspacePropertiesResponse `pulumi:"logAnalyticsWorkspaceProperties"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The location (state/province) of the customer.
	PeeringServiceLocation *string `pulumi:"peeringServiceLocation"`
	// The name of the service provider.
	PeeringServiceProvider *string `pulumi:"peeringServiceProvider"`
	// The backup peering (Microsoft/service provider) location to be used for customer traffic.
	ProviderBackupPeeringLocation *string `pulumi:"providerBackupPeeringLocation"`
	// The primary peering (Microsoft/service provider) location to be used for customer traffic.
	ProviderPrimaryPeeringLocation *string `pulumi:"providerPrimaryPeeringLocation"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The SKU that defines the type of the peering service.
	Sku *PeeringServiceSkuResponse `pulumi:"sku"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

func LookupPeeringServiceOutput(ctx *pulumi.Context, args LookupPeeringServiceOutputArgs, opts ...pulumi.InvokeOption) LookupPeeringServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPeeringServiceResult, error) {
			args := v.(LookupPeeringServiceArgs)
			r, err := LookupPeeringService(ctx, &args, opts...)
			var s LookupPeeringServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPeeringServiceResultOutput)
}

type LookupPeeringServiceOutputArgs struct {
	// The name of the peering.
	PeeringServiceName pulumi.StringInput `pulumi:"peeringServiceName"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPeeringServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPeeringServiceArgs)(nil)).Elem()
}

// Peering Service
type LookupPeeringServiceResultOutput struct{ *pulumi.OutputState }

func (LookupPeeringServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPeeringServiceResult)(nil)).Elem()
}

func (o LookupPeeringServiceResultOutput) ToLookupPeeringServiceResultOutput() LookupPeeringServiceResultOutput {
	return o
}

func (o LookupPeeringServiceResultOutput) ToLookupPeeringServiceResultOutputWithContext(ctx context.Context) LookupPeeringServiceResultOutput {
	return o
}

// The ID of the resource.
func (o LookupPeeringServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The location of the resource.
func (o LookupPeeringServiceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) string { return v.Location }).(pulumi.StringOutput)
}

// The Log Analytics Workspace Properties
func (o LookupPeeringServiceResultOutput) LogAnalyticsWorkspaceProperties() LogAnalyticsWorkspacePropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) *LogAnalyticsWorkspacePropertiesResponse {
		return v.LogAnalyticsWorkspaceProperties
	}).(LogAnalyticsWorkspacePropertiesResponsePtrOutput)
}

// The name of the resource.
func (o LookupPeeringServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

// The location (state/province) of the customer.
func (o LookupPeeringServiceResultOutput) PeeringServiceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) *string { return v.PeeringServiceLocation }).(pulumi.StringPtrOutput)
}

// The name of the service provider.
func (o LookupPeeringServiceResultOutput) PeeringServiceProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) *string { return v.PeeringServiceProvider }).(pulumi.StringPtrOutput)
}

// The backup peering (Microsoft/service provider) location to be used for customer traffic.
func (o LookupPeeringServiceResultOutput) ProviderBackupPeeringLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) *string { return v.ProviderBackupPeeringLocation }).(pulumi.StringPtrOutput)
}

// The primary peering (Microsoft/service provider) location to be used for customer traffic.
func (o LookupPeeringServiceResultOutput) ProviderPrimaryPeeringLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) *string { return v.ProviderPrimaryPeeringLocation }).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o LookupPeeringServiceResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The SKU that defines the type of the peering service.
func (o LookupPeeringServiceResultOutput) Sku() PeeringServiceSkuResponsePtrOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) *PeeringServiceSkuResponse { return v.Sku }).(PeeringServiceSkuResponsePtrOutput)
}

// The resource tags.
func (o LookupPeeringServiceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource.
func (o LookupPeeringServiceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringServiceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPeeringServiceResultOutput{})
}
