// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200315preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Access Control List (ACL) for an iSCSI target lun
type Acl struct {
	// iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
	InitiatorIqn string `pulumi:"initiatorIqn"`
	// Array of lun names mapped to the ACL
	MappedLuns []string `pulumi:"mappedLuns"`
	// Password for Challenge Handshake Authentication Protocol (CHAP) authentication
	Password string `pulumi:"password"`
	// Username for Challenge Handshake Authentication Protocol (CHAP) authentication
	Username string `pulumi:"username"`
}

// AclInput is an input type that accepts AclArgs and AclOutput values.
// You can construct a concrete instance of `AclInput` via:
//
//          AclArgs{...}
type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(context.Context) AclOutput
}

// Access Control List (ACL) for an iSCSI target lun
type AclArgs struct {
	// iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
	InitiatorIqn pulumi.StringInput `pulumi:"initiatorIqn"`
	// Array of lun names mapped to the ACL
	MappedLuns pulumi.StringArrayInput `pulumi:"mappedLuns"`
	// Password for Challenge Handshake Authentication Protocol (CHAP) authentication
	Password pulumi.StringInput `pulumi:"password"`
	// Username for Challenge Handshake Authentication Protocol (CHAP) authentication
	Username pulumi.StringInput `pulumi:"username"`
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Acl)(nil)).Elem()
}

func (i AclArgs) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i AclArgs) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//          AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

// Access Control List (ACL) for an iSCSI target lun
type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

// iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
func (o AclOutput) InitiatorIqn() pulumi.StringOutput {
	return o.ApplyT(func(v Acl) string { return v.InitiatorIqn }).(pulumi.StringOutput)
}

// Array of lun names mapped to the ACL
func (o AclOutput) MappedLuns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Acl) []string { return v.MappedLuns }).(pulumi.StringArrayOutput)
}

// Password for Challenge Handshake Authentication Protocol (CHAP) authentication
func (o AclOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v Acl) string { return v.Password }).(pulumi.StringOutput)
}

// Username for Challenge Handshake Authentication Protocol (CHAP) authentication
func (o AclOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v Acl) string { return v.Username }).(pulumi.StringOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Acl {
		return vs[0].([]Acl)[vs[1].(int)]
	}).(AclOutput)
}

// Access Control List (ACL) for an iSCSI target lun
type AclResponse struct {
	// iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
	InitiatorIqn string `pulumi:"initiatorIqn"`
	// Array of lun names mapped to the ACL
	MappedLuns []string `pulumi:"mappedLuns"`
	// Password for Challenge Handshake Authentication Protocol (CHAP) authentication
	Password string `pulumi:"password"`
	// Username for Challenge Handshake Authentication Protocol (CHAP) authentication
	Username string `pulumi:"username"`
}

// AclResponseInput is an input type that accepts AclResponseArgs and AclResponseOutput values.
// You can construct a concrete instance of `AclResponseInput` via:
//
//          AclResponseArgs{...}
type AclResponseInput interface {
	pulumi.Input

	ToAclResponseOutput() AclResponseOutput
	ToAclResponseOutputWithContext(context.Context) AclResponseOutput
}

// Access Control List (ACL) for an iSCSI target lun
type AclResponseArgs struct {
	// iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
	InitiatorIqn pulumi.StringInput `pulumi:"initiatorIqn"`
	// Array of lun names mapped to the ACL
	MappedLuns pulumi.StringArrayInput `pulumi:"mappedLuns"`
	// Password for Challenge Handshake Authentication Protocol (CHAP) authentication
	Password pulumi.StringInput `pulumi:"password"`
	// Username for Challenge Handshake Authentication Protocol (CHAP) authentication
	Username pulumi.StringInput `pulumi:"username"`
}

func (AclResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclResponse)(nil)).Elem()
}

func (i AclResponseArgs) ToAclResponseOutput() AclResponseOutput {
	return i.ToAclResponseOutputWithContext(context.Background())
}

func (i AclResponseArgs) ToAclResponseOutputWithContext(ctx context.Context) AclResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclResponseOutput)
}

// AclResponseArrayInput is an input type that accepts AclResponseArray and AclResponseArrayOutput values.
// You can construct a concrete instance of `AclResponseArrayInput` via:
//
//          AclResponseArray{ AclResponseArgs{...} }
type AclResponseArrayInput interface {
	pulumi.Input

	ToAclResponseArrayOutput() AclResponseArrayOutput
	ToAclResponseArrayOutputWithContext(context.Context) AclResponseArrayOutput
}

type AclResponseArray []AclResponseInput

func (AclResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclResponse)(nil)).Elem()
}

func (i AclResponseArray) ToAclResponseArrayOutput() AclResponseArrayOutput {
	return i.ToAclResponseArrayOutputWithContext(context.Background())
}

func (i AclResponseArray) ToAclResponseArrayOutputWithContext(ctx context.Context) AclResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclResponseArrayOutput)
}

// Access Control List (ACL) for an iSCSI target lun
type AclResponseOutput struct{ *pulumi.OutputState }

func (AclResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclResponse)(nil)).Elem()
}

func (o AclResponseOutput) ToAclResponseOutput() AclResponseOutput {
	return o
}

func (o AclResponseOutput) ToAclResponseOutputWithContext(ctx context.Context) AclResponseOutput {
	return o
}

// iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
func (o AclResponseOutput) InitiatorIqn() pulumi.StringOutput {
	return o.ApplyT(func(v AclResponse) string { return v.InitiatorIqn }).(pulumi.StringOutput)
}

// Array of lun names mapped to the ACL
func (o AclResponseOutput) MappedLuns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclResponse) []string { return v.MappedLuns }).(pulumi.StringArrayOutput)
}

// Password for Challenge Handshake Authentication Protocol (CHAP) authentication
func (o AclResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v AclResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Username for Challenge Handshake Authentication Protocol (CHAP) authentication
func (o AclResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v AclResponse) string { return v.Username }).(pulumi.StringOutput)
}

type AclResponseArrayOutput struct{ *pulumi.OutputState }

func (AclResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclResponse)(nil)).Elem()
}

func (o AclResponseArrayOutput) ToAclResponseArrayOutput() AclResponseArrayOutput {
	return o
}

func (o AclResponseArrayOutput) ToAclResponseArrayOutputWithContext(ctx context.Context) AclResponseArrayOutput {
	return o
}

func (o AclResponseArrayOutput) Index(i pulumi.IntInput) AclResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclResponse {
		return vs[0].([]AclResponse)[vs[1].(int)]
	}).(AclResponseOutput)
}

// Attributes of an iSCSI target
type Attributes struct {
	// Indicates whether or not authentication is enabled on the ACL.
	Authentication bool `pulumi:"authentication"`
	// Indicates whether or not write protect is enabled on the luns.
	ProdModeWriteProtect bool `pulumi:"prodModeWriteProtect"`
}

// AttributesInput is an input type that accepts AttributesArgs and AttributesOutput values.
// You can construct a concrete instance of `AttributesInput` via:
//
//          AttributesArgs{...}
type AttributesInput interface {
	pulumi.Input

	ToAttributesOutput() AttributesOutput
	ToAttributesOutputWithContext(context.Context) AttributesOutput
}

// Attributes of an iSCSI target
type AttributesArgs struct {
	// Indicates whether or not authentication is enabled on the ACL.
	Authentication pulumi.BoolInput `pulumi:"authentication"`
	// Indicates whether or not write protect is enabled on the luns.
	ProdModeWriteProtect pulumi.BoolInput `pulumi:"prodModeWriteProtect"`
}

func (AttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Attributes)(nil)).Elem()
}

func (i AttributesArgs) ToAttributesOutput() AttributesOutput {
	return i.ToAttributesOutputWithContext(context.Background())
}

func (i AttributesArgs) ToAttributesOutputWithContext(ctx context.Context) AttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributesOutput)
}

// Attributes of an iSCSI target
type AttributesOutput struct{ *pulumi.OutputState }

func (AttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attributes)(nil)).Elem()
}

func (o AttributesOutput) ToAttributesOutput() AttributesOutput {
	return o
}

func (o AttributesOutput) ToAttributesOutputWithContext(ctx context.Context) AttributesOutput {
	return o
}

// Indicates whether or not authentication is enabled on the ACL.
func (o AttributesOutput) Authentication() pulumi.BoolOutput {
	return o.ApplyT(func(v Attributes) bool { return v.Authentication }).(pulumi.BoolOutput)
}

// Indicates whether or not write protect is enabled on the luns.
func (o AttributesOutput) ProdModeWriteProtect() pulumi.BoolOutput {
	return o.ApplyT(func(v Attributes) bool { return v.ProdModeWriteProtect }).(pulumi.BoolOutput)
}

// Attributes of an iSCSI target
type AttributesResponse struct {
	// Indicates whether or not authentication is enabled on the ACL.
	Authentication bool `pulumi:"authentication"`
	// Indicates whether or not write protect is enabled on the luns.
	ProdModeWriteProtect bool `pulumi:"prodModeWriteProtect"`
}

// AttributesResponseInput is an input type that accepts AttributesResponseArgs and AttributesResponseOutput values.
// You can construct a concrete instance of `AttributesResponseInput` via:
//
//          AttributesResponseArgs{...}
type AttributesResponseInput interface {
	pulumi.Input

	ToAttributesResponseOutput() AttributesResponseOutput
	ToAttributesResponseOutputWithContext(context.Context) AttributesResponseOutput
}

// Attributes of an iSCSI target
type AttributesResponseArgs struct {
	// Indicates whether or not authentication is enabled on the ACL.
	Authentication pulumi.BoolInput `pulumi:"authentication"`
	// Indicates whether or not write protect is enabled on the luns.
	ProdModeWriteProtect pulumi.BoolInput `pulumi:"prodModeWriteProtect"`
}

func (AttributesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttributesResponse)(nil)).Elem()
}

func (i AttributesResponseArgs) ToAttributesResponseOutput() AttributesResponseOutput {
	return i.ToAttributesResponseOutputWithContext(context.Background())
}

func (i AttributesResponseArgs) ToAttributesResponseOutputWithContext(ctx context.Context) AttributesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributesResponseOutput)
}

// Attributes of an iSCSI target
type AttributesResponseOutput struct{ *pulumi.OutputState }

func (AttributesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttributesResponse)(nil)).Elem()
}

func (o AttributesResponseOutput) ToAttributesResponseOutput() AttributesResponseOutput {
	return o
}

func (o AttributesResponseOutput) ToAttributesResponseOutputWithContext(ctx context.Context) AttributesResponseOutput {
	return o
}

// Indicates whether or not authentication is enabled on the ACL.
func (o AttributesResponseOutput) Authentication() pulumi.BoolOutput {
	return o.ApplyT(func(v AttributesResponse) bool { return v.Authentication }).(pulumi.BoolOutput)
}

// Indicates whether or not write protect is enabled on the luns.
func (o AttributesResponseOutput) ProdModeWriteProtect() pulumi.BoolOutput {
	return o.ApplyT(func(v AttributesResponse) bool { return v.ProdModeWriteProtect }).(pulumi.BoolOutput)
}

// Managed disk to attach to the DiskPool. Required.
type Disk struct {
	// Unique Azure resource id of the managed disk. Required.
	Id string `pulumi:"id"`
}

// DiskInput is an input type that accepts DiskArgs and DiskOutput values.
// You can construct a concrete instance of `DiskInput` via:
//
//          DiskArgs{...}
type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(context.Context) DiskOutput
}

// Managed disk to attach to the DiskPool. Required.
type DiskArgs struct {
	// Unique Azure resource id of the managed disk. Required.
	Id pulumi.StringInput `pulumi:"id"`
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (i DiskArgs) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//          DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

// Managed disk to attach to the DiskPool. Required.
type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

// Unique Azure resource id of the managed disk. Required.
func (o DiskOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Disk) string { return v.Id }).(pulumi.StringOutput)
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Disk {
		return vs[0].([]Disk)[vs[1].(int)]
	}).(DiskOutput)
}

// Managed disk to attach to the DiskPool. Required.
type DiskResponse struct {
	// Unique Azure resource id of the managed disk. Required.
	Id string `pulumi:"id"`
}

// DiskResponseInput is an input type that accepts DiskResponseArgs and DiskResponseOutput values.
// You can construct a concrete instance of `DiskResponseInput` via:
//
//          DiskResponseArgs{...}
type DiskResponseInput interface {
	pulumi.Input

	ToDiskResponseOutput() DiskResponseOutput
	ToDiskResponseOutputWithContext(context.Context) DiskResponseOutput
}

// Managed disk to attach to the DiskPool. Required.
type DiskResponseArgs struct {
	// Unique Azure resource id of the managed disk. Required.
	Id pulumi.StringInput `pulumi:"id"`
}

func (DiskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskResponse)(nil)).Elem()
}

func (i DiskResponseArgs) ToDiskResponseOutput() DiskResponseOutput {
	return i.ToDiskResponseOutputWithContext(context.Background())
}

func (i DiskResponseArgs) ToDiskResponseOutputWithContext(ctx context.Context) DiskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskResponseOutput)
}

// DiskResponseArrayInput is an input type that accepts DiskResponseArray and DiskResponseArrayOutput values.
// You can construct a concrete instance of `DiskResponseArrayInput` via:
//
//          DiskResponseArray{ DiskResponseArgs{...} }
type DiskResponseArrayInput interface {
	pulumi.Input

	ToDiskResponseArrayOutput() DiskResponseArrayOutput
	ToDiskResponseArrayOutputWithContext(context.Context) DiskResponseArrayOutput
}

type DiskResponseArray []DiskResponseInput

func (DiskResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskResponse)(nil)).Elem()
}

func (i DiskResponseArray) ToDiskResponseArrayOutput() DiskResponseArrayOutput {
	return i.ToDiskResponseArrayOutputWithContext(context.Background())
}

func (i DiskResponseArray) ToDiskResponseArrayOutputWithContext(ctx context.Context) DiskResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskResponseArrayOutput)
}

// Managed disk to attach to the DiskPool. Required.
type DiskResponseOutput struct{ *pulumi.OutputState }

func (DiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskResponse)(nil)).Elem()
}

func (o DiskResponseOutput) ToDiskResponseOutput() DiskResponseOutput {
	return o
}

func (o DiskResponseOutput) ToDiskResponseOutputWithContext(ctx context.Context) DiskResponseOutput {
	return o
}

// Unique Azure resource id of the managed disk. Required.
func (o DiskResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Id }).(pulumi.StringOutput)
}

type DiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskResponse)(nil)).Elem()
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutput() DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutputWithContext(ctx context.Context) DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) Index(i pulumi.IntInput) DiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskResponse {
		return vs[0].([]DiskResponse)[vs[1].(int)]
	}).(DiskResponseOutput)
}

// Lun to expose the ManagedDisk.
type IscsiLun struct {
	// Unique Azure resource id of the managed disk. Required.
	ManagedDiskAzureResourceId string `pulumi:"managedDiskAzureResourceId"`
	// Lun name.
	Name string `pulumi:"name"`
}

// IscsiLunInput is an input type that accepts IscsiLunArgs and IscsiLunOutput values.
// You can construct a concrete instance of `IscsiLunInput` via:
//
//          IscsiLunArgs{...}
type IscsiLunInput interface {
	pulumi.Input

	ToIscsiLunOutput() IscsiLunOutput
	ToIscsiLunOutputWithContext(context.Context) IscsiLunOutput
}

// Lun to expose the ManagedDisk.
type IscsiLunArgs struct {
	// Unique Azure resource id of the managed disk. Required.
	ManagedDiskAzureResourceId pulumi.StringInput `pulumi:"managedDiskAzureResourceId"`
	// Lun name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IscsiLunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IscsiLun)(nil)).Elem()
}

func (i IscsiLunArgs) ToIscsiLunOutput() IscsiLunOutput {
	return i.ToIscsiLunOutputWithContext(context.Background())
}

func (i IscsiLunArgs) ToIscsiLunOutputWithContext(ctx context.Context) IscsiLunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IscsiLunOutput)
}

// IscsiLunArrayInput is an input type that accepts IscsiLunArray and IscsiLunArrayOutput values.
// You can construct a concrete instance of `IscsiLunArrayInput` via:
//
//          IscsiLunArray{ IscsiLunArgs{...} }
type IscsiLunArrayInput interface {
	pulumi.Input

	ToIscsiLunArrayOutput() IscsiLunArrayOutput
	ToIscsiLunArrayOutputWithContext(context.Context) IscsiLunArrayOutput
}

type IscsiLunArray []IscsiLunInput

func (IscsiLunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IscsiLun)(nil)).Elem()
}

func (i IscsiLunArray) ToIscsiLunArrayOutput() IscsiLunArrayOutput {
	return i.ToIscsiLunArrayOutputWithContext(context.Background())
}

func (i IscsiLunArray) ToIscsiLunArrayOutputWithContext(ctx context.Context) IscsiLunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IscsiLunArrayOutput)
}

// Lun to expose the ManagedDisk.
type IscsiLunOutput struct{ *pulumi.OutputState }

func (IscsiLunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IscsiLun)(nil)).Elem()
}

func (o IscsiLunOutput) ToIscsiLunOutput() IscsiLunOutput {
	return o
}

func (o IscsiLunOutput) ToIscsiLunOutputWithContext(ctx context.Context) IscsiLunOutput {
	return o
}

// Unique Azure resource id of the managed disk. Required.
func (o IscsiLunOutput) ManagedDiskAzureResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IscsiLun) string { return v.ManagedDiskAzureResourceId }).(pulumi.StringOutput)
}

// Lun name.
func (o IscsiLunOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IscsiLun) string { return v.Name }).(pulumi.StringOutput)
}

type IscsiLunArrayOutput struct{ *pulumi.OutputState }

func (IscsiLunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IscsiLun)(nil)).Elem()
}

func (o IscsiLunArrayOutput) ToIscsiLunArrayOutput() IscsiLunArrayOutput {
	return o
}

func (o IscsiLunArrayOutput) ToIscsiLunArrayOutputWithContext(ctx context.Context) IscsiLunArrayOutput {
	return o
}

func (o IscsiLunArrayOutput) Index(i pulumi.IntInput) IscsiLunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IscsiLun {
		return vs[0].([]IscsiLun)[vs[1].(int)]
	}).(IscsiLunOutput)
}

// Lun to expose the ManagedDisk.
type IscsiLunResponse struct {
	// Unique Azure resource id of the managed disk. Required.
	ManagedDiskAzureResourceId string `pulumi:"managedDiskAzureResourceId"`
	// Lun name.
	Name string `pulumi:"name"`
}

// IscsiLunResponseInput is an input type that accepts IscsiLunResponseArgs and IscsiLunResponseOutput values.
// You can construct a concrete instance of `IscsiLunResponseInput` via:
//
//          IscsiLunResponseArgs{...}
type IscsiLunResponseInput interface {
	pulumi.Input

	ToIscsiLunResponseOutput() IscsiLunResponseOutput
	ToIscsiLunResponseOutputWithContext(context.Context) IscsiLunResponseOutput
}

// Lun to expose the ManagedDisk.
type IscsiLunResponseArgs struct {
	// Unique Azure resource id of the managed disk. Required.
	ManagedDiskAzureResourceId pulumi.StringInput `pulumi:"managedDiskAzureResourceId"`
	// Lun name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IscsiLunResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IscsiLunResponse)(nil)).Elem()
}

func (i IscsiLunResponseArgs) ToIscsiLunResponseOutput() IscsiLunResponseOutput {
	return i.ToIscsiLunResponseOutputWithContext(context.Background())
}

func (i IscsiLunResponseArgs) ToIscsiLunResponseOutputWithContext(ctx context.Context) IscsiLunResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IscsiLunResponseOutput)
}

// IscsiLunResponseArrayInput is an input type that accepts IscsiLunResponseArray and IscsiLunResponseArrayOutput values.
// You can construct a concrete instance of `IscsiLunResponseArrayInput` via:
//
//          IscsiLunResponseArray{ IscsiLunResponseArgs{...} }
type IscsiLunResponseArrayInput interface {
	pulumi.Input

	ToIscsiLunResponseArrayOutput() IscsiLunResponseArrayOutput
	ToIscsiLunResponseArrayOutputWithContext(context.Context) IscsiLunResponseArrayOutput
}

type IscsiLunResponseArray []IscsiLunResponseInput

func (IscsiLunResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IscsiLunResponse)(nil)).Elem()
}

func (i IscsiLunResponseArray) ToIscsiLunResponseArrayOutput() IscsiLunResponseArrayOutput {
	return i.ToIscsiLunResponseArrayOutputWithContext(context.Background())
}

func (i IscsiLunResponseArray) ToIscsiLunResponseArrayOutputWithContext(ctx context.Context) IscsiLunResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IscsiLunResponseArrayOutput)
}

// Lun to expose the ManagedDisk.
type IscsiLunResponseOutput struct{ *pulumi.OutputState }

func (IscsiLunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IscsiLunResponse)(nil)).Elem()
}

func (o IscsiLunResponseOutput) ToIscsiLunResponseOutput() IscsiLunResponseOutput {
	return o
}

func (o IscsiLunResponseOutput) ToIscsiLunResponseOutputWithContext(ctx context.Context) IscsiLunResponseOutput {
	return o
}

// Unique Azure resource id of the managed disk. Required.
func (o IscsiLunResponseOutput) ManagedDiskAzureResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IscsiLunResponse) string { return v.ManagedDiskAzureResourceId }).(pulumi.StringOutput)
}

// Lun name.
func (o IscsiLunResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IscsiLunResponse) string { return v.Name }).(pulumi.StringOutput)
}

type IscsiLunResponseArrayOutput struct{ *pulumi.OutputState }

func (IscsiLunResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IscsiLunResponse)(nil)).Elem()
}

func (o IscsiLunResponseArrayOutput) ToIscsiLunResponseArrayOutput() IscsiLunResponseArrayOutput {
	return o
}

func (o IscsiLunResponseArrayOutput) ToIscsiLunResponseArrayOutputWithContext(ctx context.Context) IscsiLunResponseArrayOutput {
	return o
}

func (o IscsiLunResponseArrayOutput) Index(i pulumi.IntInput) IscsiLunResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IscsiLunResponse {
		return vs[0].([]IscsiLunResponse)[vs[1].(int)]
	}).(IscsiLunResponseOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTier `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// The resource model definition representing SKU
type SkuResponseArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Resource metadata required by ARM RPC
type SystemMetadataResponse struct {
	// The timestamp of resource creation (UTC)
	CreatedAt *string `pulumi:"createdAt"`
	// A string identifier for the identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource: user, application, managedIdentity
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// A string identifier for the identity that last modified the resource
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource: user, application, managedIdentity
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// SystemMetadataResponseInput is an input type that accepts SystemMetadataResponseArgs and SystemMetadataResponseOutput values.
// You can construct a concrete instance of `SystemMetadataResponseInput` via:
//
//          SystemMetadataResponseArgs{...}
type SystemMetadataResponseInput interface {
	pulumi.Input

	ToSystemMetadataResponseOutput() SystemMetadataResponseOutput
	ToSystemMetadataResponseOutputWithContext(context.Context) SystemMetadataResponseOutput
}

// Resource metadata required by ARM RPC
type SystemMetadataResponseArgs struct {
	// The timestamp of resource creation (UTC)
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// A string identifier for the identity that created the resource.
	CreatedBy pulumi.StringPtrInput `pulumi:"createdBy"`
	// The type of identity that created the resource: user, application, managedIdentity
	CreatedByType pulumi.StringPtrInput `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt pulumi.StringPtrInput `pulumi:"lastModifiedAt"`
	// A string identifier for the identity that last modified the resource
	LastModifiedBy pulumi.StringPtrInput `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource: user, application, managedIdentity
	LastModifiedByType pulumi.StringPtrInput `pulumi:"lastModifiedByType"`
}

func (SystemMetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemMetadataResponse)(nil)).Elem()
}

func (i SystemMetadataResponseArgs) ToSystemMetadataResponseOutput() SystemMetadataResponseOutput {
	return i.ToSystemMetadataResponseOutputWithContext(context.Background())
}

func (i SystemMetadataResponseArgs) ToSystemMetadataResponseOutputWithContext(ctx context.Context) SystemMetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemMetadataResponseOutput)
}

func (i SystemMetadataResponseArgs) ToSystemMetadataResponsePtrOutput() SystemMetadataResponsePtrOutput {
	return i.ToSystemMetadataResponsePtrOutputWithContext(context.Background())
}

func (i SystemMetadataResponseArgs) ToSystemMetadataResponsePtrOutputWithContext(ctx context.Context) SystemMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemMetadataResponseOutput).ToSystemMetadataResponsePtrOutputWithContext(ctx)
}

// SystemMetadataResponsePtrInput is an input type that accepts SystemMetadataResponseArgs, SystemMetadataResponsePtr and SystemMetadataResponsePtrOutput values.
// You can construct a concrete instance of `SystemMetadataResponsePtrInput` via:
//
//          SystemMetadataResponseArgs{...}
//
//  or:
//
//          nil
type SystemMetadataResponsePtrInput interface {
	pulumi.Input

	ToSystemMetadataResponsePtrOutput() SystemMetadataResponsePtrOutput
	ToSystemMetadataResponsePtrOutputWithContext(context.Context) SystemMetadataResponsePtrOutput
}

type systemMetadataResponsePtrType SystemMetadataResponseArgs

func SystemMetadataResponsePtr(v *SystemMetadataResponseArgs) SystemMetadataResponsePtrInput {
	return (*systemMetadataResponsePtrType)(v)
}

func (*systemMetadataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemMetadataResponse)(nil)).Elem()
}

func (i *systemMetadataResponsePtrType) ToSystemMetadataResponsePtrOutput() SystemMetadataResponsePtrOutput {
	return i.ToSystemMetadataResponsePtrOutputWithContext(context.Background())
}

func (i *systemMetadataResponsePtrType) ToSystemMetadataResponsePtrOutputWithContext(ctx context.Context) SystemMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemMetadataResponsePtrOutput)
}

// Resource metadata required by ARM RPC
type SystemMetadataResponseOutput struct{ *pulumi.OutputState }

func (SystemMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemMetadataResponse)(nil)).Elem()
}

func (o SystemMetadataResponseOutput) ToSystemMetadataResponseOutput() SystemMetadataResponseOutput {
	return o
}

func (o SystemMetadataResponseOutput) ToSystemMetadataResponseOutputWithContext(ctx context.Context) SystemMetadataResponseOutput {
	return o
}

func (o SystemMetadataResponseOutput) ToSystemMetadataResponsePtrOutput() SystemMetadataResponsePtrOutput {
	return o.ToSystemMetadataResponsePtrOutputWithContext(context.Background())
}

func (o SystemMetadataResponseOutput) ToSystemMetadataResponsePtrOutputWithContext(ctx context.Context) SystemMetadataResponsePtrOutput {
	return o.ApplyT(func(v SystemMetadataResponse) *SystemMetadataResponse {
		return &v
	}).(SystemMetadataResponsePtrOutput)
}

// The timestamp of resource creation (UTC)
func (o SystemMetadataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemMetadataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// A string identifier for the identity that created the resource.
func (o SystemMetadataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemMetadataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource: user, application, managedIdentity
func (o SystemMetadataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemMetadataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemMetadataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemMetadataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// A string identifier for the identity that last modified the resource
func (o SystemMetadataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemMetadataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource: user, application, managedIdentity
func (o SystemMetadataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemMetadataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

type SystemMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemMetadataResponse)(nil)).Elem()
}

func (o SystemMetadataResponsePtrOutput) ToSystemMetadataResponsePtrOutput() SystemMetadataResponsePtrOutput {
	return o
}

func (o SystemMetadataResponsePtrOutput) ToSystemMetadataResponsePtrOutputWithContext(ctx context.Context) SystemMetadataResponsePtrOutput {
	return o
}

func (o SystemMetadataResponsePtrOutput) Elem() SystemMetadataResponseOutput {
	return o.ApplyT(func(v *SystemMetadataResponse) SystemMetadataResponse { return *v }).(SystemMetadataResponseOutput)
}

// The timestamp of resource creation (UTC)
func (o SystemMetadataResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// A string identifier for the identity that created the resource.
func (o SystemMetadataResponsePtrOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource: user, application, managedIdentity
func (o SystemMetadataResponsePtrOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedByType
	}).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemMetadataResponsePtrOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// A string identifier for the identity that last modified the resource
func (o SystemMetadataResponsePtrOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource: user, application, managedIdentity
func (o SystemMetadataResponsePtrOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedByType
	}).(pulumi.StringPtrOutput)
}

// iSCSI target portal group
type TargetPortalGroup struct {
	// Access Control List (ACL) for an iSCSI target lun
	Acls []Acl `pulumi:"acls"`
	// Attributes of an iSCSI target
	Attributes Attributes `pulumi:"attributes"`
	// Lun list to be exposed through the iSCSI target. Required
	Luns []IscsiLun `pulumi:"luns"`
}

// TargetPortalGroupInput is an input type that accepts TargetPortalGroupArgs and TargetPortalGroupOutput values.
// You can construct a concrete instance of `TargetPortalGroupInput` via:
//
//          TargetPortalGroupArgs{...}
type TargetPortalGroupInput interface {
	pulumi.Input

	ToTargetPortalGroupOutput() TargetPortalGroupOutput
	ToTargetPortalGroupOutputWithContext(context.Context) TargetPortalGroupOutput
}

// iSCSI target portal group
type TargetPortalGroupArgs struct {
	// Access Control List (ACL) for an iSCSI target lun
	Acls AclArrayInput `pulumi:"acls"`
	// Attributes of an iSCSI target
	Attributes AttributesInput `pulumi:"attributes"`
	// Lun list to be exposed through the iSCSI target. Required
	Luns IscsiLunArrayInput `pulumi:"luns"`
}

func (TargetPortalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetPortalGroup)(nil)).Elem()
}

func (i TargetPortalGroupArgs) ToTargetPortalGroupOutput() TargetPortalGroupOutput {
	return i.ToTargetPortalGroupOutputWithContext(context.Background())
}

func (i TargetPortalGroupArgs) ToTargetPortalGroupOutputWithContext(ctx context.Context) TargetPortalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetPortalGroupOutput)
}

// TargetPortalGroupArrayInput is an input type that accepts TargetPortalGroupArray and TargetPortalGroupArrayOutput values.
// You can construct a concrete instance of `TargetPortalGroupArrayInput` via:
//
//          TargetPortalGroupArray{ TargetPortalGroupArgs{...} }
type TargetPortalGroupArrayInput interface {
	pulumi.Input

	ToTargetPortalGroupArrayOutput() TargetPortalGroupArrayOutput
	ToTargetPortalGroupArrayOutputWithContext(context.Context) TargetPortalGroupArrayOutput
}

type TargetPortalGroupArray []TargetPortalGroupInput

func (TargetPortalGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetPortalGroup)(nil)).Elem()
}

func (i TargetPortalGroupArray) ToTargetPortalGroupArrayOutput() TargetPortalGroupArrayOutput {
	return i.ToTargetPortalGroupArrayOutputWithContext(context.Background())
}

func (i TargetPortalGroupArray) ToTargetPortalGroupArrayOutputWithContext(ctx context.Context) TargetPortalGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetPortalGroupArrayOutput)
}

// iSCSI target portal group
type TargetPortalGroupOutput struct{ *pulumi.OutputState }

func (TargetPortalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetPortalGroup)(nil)).Elem()
}

func (o TargetPortalGroupOutput) ToTargetPortalGroupOutput() TargetPortalGroupOutput {
	return o
}

func (o TargetPortalGroupOutput) ToTargetPortalGroupOutputWithContext(ctx context.Context) TargetPortalGroupOutput {
	return o
}

// Access Control List (ACL) for an iSCSI target lun
func (o TargetPortalGroupOutput) Acls() AclArrayOutput {
	return o.ApplyT(func(v TargetPortalGroup) []Acl { return v.Acls }).(AclArrayOutput)
}

// Attributes of an iSCSI target
func (o TargetPortalGroupOutput) Attributes() AttributesOutput {
	return o.ApplyT(func(v TargetPortalGroup) Attributes { return v.Attributes }).(AttributesOutput)
}

// Lun list to be exposed through the iSCSI target. Required
func (o TargetPortalGroupOutput) Luns() IscsiLunArrayOutput {
	return o.ApplyT(func(v TargetPortalGroup) []IscsiLun { return v.Luns }).(IscsiLunArrayOutput)
}

type TargetPortalGroupArrayOutput struct{ *pulumi.OutputState }

func (TargetPortalGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetPortalGroup)(nil)).Elem()
}

func (o TargetPortalGroupArrayOutput) ToTargetPortalGroupArrayOutput() TargetPortalGroupArrayOutput {
	return o
}

func (o TargetPortalGroupArrayOutput) ToTargetPortalGroupArrayOutputWithContext(ctx context.Context) TargetPortalGroupArrayOutput {
	return o
}

func (o TargetPortalGroupArrayOutput) Index(i pulumi.IntInput) TargetPortalGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetPortalGroup {
		return vs[0].([]TargetPortalGroup)[vs[1].(int)]
	}).(TargetPortalGroupOutput)
}

// iSCSI target portal group
type TargetPortalGroupResponse struct {
	// Access Control List (ACL) for an iSCSI target lun
	Acls []AclResponse `pulumi:"acls"`
	// Attributes of an iSCSI target
	Attributes AttributesResponse `pulumi:"attributes"`
	// list of public ip addresses to connect to the iSCSI target
	Endpoints []string `pulumi:"endpoints"`
	// Lun list to be exposed through the iSCSI target. Required
	Luns []IscsiLunResponse `pulumi:"luns"`
	// The port at which the iSCSI target is available
	Port int `pulumi:"port"`
	// The tag associated with the iSCSI target portal group
	Tag int `pulumi:"tag"`
}

// TargetPortalGroupResponseInput is an input type that accepts TargetPortalGroupResponseArgs and TargetPortalGroupResponseOutput values.
// You can construct a concrete instance of `TargetPortalGroupResponseInput` via:
//
//          TargetPortalGroupResponseArgs{...}
type TargetPortalGroupResponseInput interface {
	pulumi.Input

	ToTargetPortalGroupResponseOutput() TargetPortalGroupResponseOutput
	ToTargetPortalGroupResponseOutputWithContext(context.Context) TargetPortalGroupResponseOutput
}

// iSCSI target portal group
type TargetPortalGroupResponseArgs struct {
	// Access Control List (ACL) for an iSCSI target lun
	Acls AclResponseArrayInput `pulumi:"acls"`
	// Attributes of an iSCSI target
	Attributes AttributesResponseInput `pulumi:"attributes"`
	// list of public ip addresses to connect to the iSCSI target
	Endpoints pulumi.StringArrayInput `pulumi:"endpoints"`
	// Lun list to be exposed through the iSCSI target. Required
	Luns IscsiLunResponseArrayInput `pulumi:"luns"`
	// The port at which the iSCSI target is available
	Port pulumi.IntInput `pulumi:"port"`
	// The tag associated with the iSCSI target portal group
	Tag pulumi.IntInput `pulumi:"tag"`
}

func (TargetPortalGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetPortalGroupResponse)(nil)).Elem()
}

func (i TargetPortalGroupResponseArgs) ToTargetPortalGroupResponseOutput() TargetPortalGroupResponseOutput {
	return i.ToTargetPortalGroupResponseOutputWithContext(context.Background())
}

func (i TargetPortalGroupResponseArgs) ToTargetPortalGroupResponseOutputWithContext(ctx context.Context) TargetPortalGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetPortalGroupResponseOutput)
}

// TargetPortalGroupResponseArrayInput is an input type that accepts TargetPortalGroupResponseArray and TargetPortalGroupResponseArrayOutput values.
// You can construct a concrete instance of `TargetPortalGroupResponseArrayInput` via:
//
//          TargetPortalGroupResponseArray{ TargetPortalGroupResponseArgs{...} }
type TargetPortalGroupResponseArrayInput interface {
	pulumi.Input

	ToTargetPortalGroupResponseArrayOutput() TargetPortalGroupResponseArrayOutput
	ToTargetPortalGroupResponseArrayOutputWithContext(context.Context) TargetPortalGroupResponseArrayOutput
}

type TargetPortalGroupResponseArray []TargetPortalGroupResponseInput

func (TargetPortalGroupResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetPortalGroupResponse)(nil)).Elem()
}

func (i TargetPortalGroupResponseArray) ToTargetPortalGroupResponseArrayOutput() TargetPortalGroupResponseArrayOutput {
	return i.ToTargetPortalGroupResponseArrayOutputWithContext(context.Background())
}

func (i TargetPortalGroupResponseArray) ToTargetPortalGroupResponseArrayOutputWithContext(ctx context.Context) TargetPortalGroupResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetPortalGroupResponseArrayOutput)
}

// iSCSI target portal group
type TargetPortalGroupResponseOutput struct{ *pulumi.OutputState }

func (TargetPortalGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetPortalGroupResponse)(nil)).Elem()
}

func (o TargetPortalGroupResponseOutput) ToTargetPortalGroupResponseOutput() TargetPortalGroupResponseOutput {
	return o
}

func (o TargetPortalGroupResponseOutput) ToTargetPortalGroupResponseOutputWithContext(ctx context.Context) TargetPortalGroupResponseOutput {
	return o
}

// Access Control List (ACL) for an iSCSI target lun
func (o TargetPortalGroupResponseOutput) Acls() AclResponseArrayOutput {
	return o.ApplyT(func(v TargetPortalGroupResponse) []AclResponse { return v.Acls }).(AclResponseArrayOutput)
}

// Attributes of an iSCSI target
func (o TargetPortalGroupResponseOutput) Attributes() AttributesResponseOutput {
	return o.ApplyT(func(v TargetPortalGroupResponse) AttributesResponse { return v.Attributes }).(AttributesResponseOutput)
}

// list of public ip addresses to connect to the iSCSI target
func (o TargetPortalGroupResponseOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TargetPortalGroupResponse) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

// Lun list to be exposed through the iSCSI target. Required
func (o TargetPortalGroupResponseOutput) Luns() IscsiLunResponseArrayOutput {
	return o.ApplyT(func(v TargetPortalGroupResponse) []IscsiLunResponse { return v.Luns }).(IscsiLunResponseArrayOutput)
}

// The port at which the iSCSI target is available
func (o TargetPortalGroupResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TargetPortalGroupResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The tag associated with the iSCSI target portal group
func (o TargetPortalGroupResponseOutput) Tag() pulumi.IntOutput {
	return o.ApplyT(func(v TargetPortalGroupResponse) int { return v.Tag }).(pulumi.IntOutput)
}

type TargetPortalGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetPortalGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetPortalGroupResponse)(nil)).Elem()
}

func (o TargetPortalGroupResponseArrayOutput) ToTargetPortalGroupResponseArrayOutput() TargetPortalGroupResponseArrayOutput {
	return o
}

func (o TargetPortalGroupResponseArrayOutput) ToTargetPortalGroupResponseArrayOutputWithContext(ctx context.Context) TargetPortalGroupResponseArrayOutput {
	return o
}

func (o TargetPortalGroupResponseArrayOutput) Index(i pulumi.IntInput) TargetPortalGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetPortalGroupResponse {
		return vs[0].([]TargetPortalGroupResponse)[vs[1].(int)]
	}).(TargetPortalGroupResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclResponseOutput{})
	pulumi.RegisterOutputType(AclResponseArrayOutput{})
	pulumi.RegisterOutputType(AttributesOutput{})
	pulumi.RegisterOutputType(AttributesResponseOutput{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
	pulumi.RegisterOutputType(DiskResponseOutput{})
	pulumi.RegisterOutputType(DiskResponseArrayOutput{})
	pulumi.RegisterOutputType(IscsiLunOutput{})
	pulumi.RegisterOutputType(IscsiLunArrayOutput{})
	pulumi.RegisterOutputType(IscsiLunResponseOutput{})
	pulumi.RegisterOutputType(IscsiLunResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemMetadataResponseOutput{})
	pulumi.RegisterOutputType(SystemMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(TargetPortalGroupOutput{})
	pulumi.RegisterOutputType(TargetPortalGroupArrayOutput{})
	pulumi.RegisterOutputType(TargetPortalGroupResponseOutput{})
	pulumi.RegisterOutputType(TargetPortalGroupResponseArrayOutput{})
}
