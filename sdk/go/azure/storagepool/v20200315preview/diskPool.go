// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200315preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Request payload for Create or Update Disk Pool requests.
type DiskPool struct {
	pulumi.CustomResourceState

	// Logical zone for DiskPool resource.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// List of Azure managed disks to attach to a DiskPool
	Disks DiskResponseArrayOutput `pulumi:"disks"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// State of the operation on the resource
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Sku description.
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Operational status of the Disk pool
	Status pulumi.StringOutput `pulumi:"status"`
	// Azure resource id of the subnet for the DiskPool
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Resource metadata required by ARM RPC
	SystemData SystemMetadataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDiskPool registers a new resource with the given unique name, arguments, and options.
func NewDiskPool(ctx *pulumi.Context,
	name string, args *DiskPoolArgs, opts ...pulumi.ResourceOption) (*DiskPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZones == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZones'")
	}
	if args.DiskPoolName == nil {
		return nil, errors.New("invalid value for required argument 'DiskPoolName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	var resource DiskPool
	err := ctx.RegisterResource("azure-nextgen:storagepool/v20200315preview:DiskPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskPool gets an existing DiskPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskPoolState, opts ...pulumi.ResourceOption) (*DiskPool, error) {
	var resource DiskPool
	err := ctx.ReadResource("azure-nextgen:storagepool/v20200315preview:DiskPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskPool resources.
type diskPoolState struct {
	// Logical zone for DiskPool resource.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// List of Azure managed disks to attach to a DiskPool
	Disks []DiskResponse `pulumi:"disks"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// State of the operation on the resource
	ProvisioningState *string `pulumi:"provisioningState"`
	// Sku description.
	Sku *SkuResponse `pulumi:"sku"`
	// Operational status of the Disk pool
	Status *string `pulumi:"status"`
	// Azure resource id of the subnet for the DiskPool
	SubnetId *string `pulumi:"subnetId"`
	// Resource metadata required by ARM RPC
	SystemData *SystemMetadataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `pulumi:"type"`
}

type DiskPoolState struct {
	// Logical zone for DiskPool resource.
	AvailabilityZones pulumi.StringArrayInput
	// List of Azure managed disks to attach to a DiskPool
	Disks DiskResponseArrayInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// State of the operation on the resource
	ProvisioningState pulumi.StringPtrInput
	// Sku description.
	Sku SkuResponsePtrInput
	// Operational status of the Disk pool
	Status pulumi.StringPtrInput
	// Azure resource id of the subnet for the DiskPool
	SubnetId pulumi.StringPtrInput
	// Resource metadata required by ARM RPC
	SystemData SystemMetadataResponsePtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringPtrInput
}

func (DiskPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskPoolState)(nil)).Elem()
}

type diskPoolArgs struct {
	// Logical zone for DiskPool resource.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The name of the Disk Pool.
	DiskPoolName string `pulumi:"diskPoolName"`
	// List of Azure managed disks to attach to a DiskPool
	Disks []Disk `pulumi:"disks"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Sku description.
	Sku *Sku `pulumi:"sku"`
	// Azure resource id of the subnet for the DiskPool
	SubnetId string `pulumi:"subnetId"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DiskPool resource.
type DiskPoolArgs struct {
	// Logical zone for DiskPool resource.
	AvailabilityZones pulumi.StringArrayInput
	// The name of the Disk Pool.
	DiskPoolName pulumi.StringInput
	// List of Azure managed disks to attach to a DiskPool
	Disks DiskArrayInput
	// The geo-location where the resource lives
	Location pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Sku description.
	Sku SkuPtrInput
	// Azure resource id of the subnet for the DiskPool
	SubnetId pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (DiskPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskPoolArgs)(nil)).Elem()
}

type DiskPoolInput interface {
	pulumi.Input

	ToDiskPoolOutput() DiskPoolOutput
	ToDiskPoolOutputWithContext(ctx context.Context) DiskPoolOutput
}

func (*DiskPool) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPool)(nil))
}

func (i *DiskPool) ToDiskPoolOutput() DiskPoolOutput {
	return i.ToDiskPoolOutputWithContext(context.Background())
}

func (i *DiskPool) ToDiskPoolOutputWithContext(ctx context.Context) DiskPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolOutput)
}

type DiskPoolOutput struct {
	*pulumi.OutputState
}

func (DiskPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPool)(nil))
}

func (o DiskPoolOutput) ToDiskPoolOutput() DiskPoolOutput {
	return o
}

func (o DiskPoolOutput) ToDiskPoolOutputWithContext(ctx context.Context) DiskPoolOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DiskPoolOutput{})
}
