// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200512preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// FarmBeats ARM Resource.
type FarmBeatsModel struct {
	pulumi.CustomResourceState

	// Uri of the FarmBeats instance.
	InstanceUri pulumi.StringOutput `pulumi:"instanceUri"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// FarmBeats instance provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFarmBeatsModel registers a new resource with the given unique name, arguments, and options.
func NewFarmBeatsModel(ctx *pulumi.Context,
	name string, args *FarmBeatsModelArgs, opts ...pulumi.ResourceOption) (*FarmBeatsModel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:agfoodplatform/v20200512preview:FarmBeatsModel"),
		},
		{
			Type: pulumi.String("azure-native:agfoodplatform:FarmBeatsModel"),
		},
		{
			Type: pulumi.String("azure-nextgen:agfoodplatform:FarmBeatsModel"),
		},
	})
	opts = append(opts, aliases)
	var resource FarmBeatsModel
	err := ctx.RegisterResource("azure-native:agfoodplatform/v20200512preview:FarmBeatsModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFarmBeatsModel gets an existing FarmBeatsModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFarmBeatsModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FarmBeatsModelState, opts ...pulumi.ResourceOption) (*FarmBeatsModel, error) {
	var resource FarmBeatsModel
	err := ctx.ReadResource("azure-native:agfoodplatform/v20200512preview:FarmBeatsModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FarmBeatsModel resources.
type farmBeatsModelState struct {
}

type FarmBeatsModelState struct {
}

func (FarmBeatsModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*farmBeatsModelState)(nil)).Elem()
}

type farmBeatsModelArgs struct {
	// FarmBeats resource name.
	FarmBeatsResourceName *string `pulumi:"farmBeatsResourceName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a FarmBeatsModel resource.
type FarmBeatsModelArgs struct {
	// FarmBeats resource name.
	FarmBeatsResourceName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (FarmBeatsModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*farmBeatsModelArgs)(nil)).Elem()
}

type FarmBeatsModelInput interface {
	pulumi.Input

	ToFarmBeatsModelOutput() FarmBeatsModelOutput
	ToFarmBeatsModelOutputWithContext(ctx context.Context) FarmBeatsModelOutput
}

func (*FarmBeatsModel) ElementType() reflect.Type {
	return reflect.TypeOf((*FarmBeatsModel)(nil))
}

func (i *FarmBeatsModel) ToFarmBeatsModelOutput() FarmBeatsModelOutput {
	return i.ToFarmBeatsModelOutputWithContext(context.Background())
}

func (i *FarmBeatsModel) ToFarmBeatsModelOutputWithContext(ctx context.Context) FarmBeatsModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FarmBeatsModelOutput)
}

type FarmBeatsModelOutput struct {
	*pulumi.OutputState
}

func (FarmBeatsModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FarmBeatsModel)(nil))
}

func (o FarmBeatsModelOutput) ToFarmBeatsModelOutput() FarmBeatsModelOutput {
	return o
}

func (o FarmBeatsModelOutput) ToFarmBeatsModelOutputWithContext(ctx context.Context) FarmBeatsModelOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FarmBeatsModelOutput{})
}
