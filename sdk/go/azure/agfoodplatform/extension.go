// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package agfoodplatform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Extension resource.
// API Version: 2020-05-12-preview.
type Extension struct {
	pulumi.CustomResourceState

	// The ETag value to implement optimistic concurrency.
	ETag pulumi.StringOutput `pulumi:"eTag"`
	// Extension api docs link.
	ExtensionApiDocsLink pulumi.StringOutput `pulumi:"extensionApiDocsLink"`
	// Extension auth link.
	ExtensionAuthLink pulumi.StringOutput `pulumi:"extensionAuthLink"`
	// Extension category. e.g. weather/sensor/satellite.
	ExtensionCategory pulumi.StringOutput `pulumi:"extensionCategory"`
	// Extension Id.
	ExtensionId pulumi.StringOutput `pulumi:"extensionId"`
	// Installed extension version.
	InstalledExtensionVersion pulumi.StringOutput `pulumi:"installedExtensionVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewExtension registers a new resource with the given unique name, arguments, and options.
func NewExtension(ctx *pulumi.Context,
	name string, args *ExtensionArgs, opts ...pulumi.ResourceOption) (*Extension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FarmBeatsResourceName == nil {
		return nil, errors.New("invalid value for required argument 'FarmBeatsResourceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:agfoodplatform:Extension"),
		},
		{
			Type: pulumi.String("azure-native:agfoodplatform/v20200512preview:Extension"),
		},
		{
			Type: pulumi.String("azure-nextgen:agfoodplatform/v20200512preview:Extension"),
		},
	})
	opts = append(opts, aliases)
	var resource Extension
	err := ctx.RegisterResource("azure-native:agfoodplatform:Extension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtension gets an existing Extension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionState, opts ...pulumi.ResourceOption) (*Extension, error) {
	var resource Extension
	err := ctx.ReadResource("azure-native:agfoodplatform:Extension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Extension resources.
type extensionState struct {
}

type ExtensionState struct {
}

func (ExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionState)(nil)).Elem()
}

type extensionArgs struct {
	// Id of extension resource.
	ExtensionId *string `pulumi:"extensionId"`
	// FarmBeats resource name.
	FarmBeatsResourceName string `pulumi:"farmBeatsResourceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Extension resource.
type ExtensionArgs struct {
	// Id of extension resource.
	ExtensionId pulumi.StringPtrInput
	// FarmBeats resource name.
	FarmBeatsResourceName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (ExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionArgs)(nil)).Elem()
}

type ExtensionInput interface {
	pulumi.Input

	ToExtensionOutput() ExtensionOutput
	ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput
}

func (*Extension) ElementType() reflect.Type {
	return reflect.TypeOf((*Extension)(nil))
}

func (i *Extension) ToExtensionOutput() ExtensionOutput {
	return i.ToExtensionOutputWithContext(context.Background())
}

func (i *Extension) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionOutput)
}

type ExtensionOutput struct {
	*pulumi.OutputState
}

func (ExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Extension)(nil))
}

func (o ExtensionOutput) ToExtensionOutput() ExtensionOutput {
	return o
}

func (o ExtensionOutput) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ExtensionOutput{})
}
