// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Target DNS type (would be used for migration)
type DnsType string

const (
	DnsTypeAzureDns                  = DnsType("AzureDns")
	DnsTypeDefaultDomainRegistrarDns = DnsType("DefaultDomainRegistrarDns")
)

func (DnsType) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsType)(nil)).Elem()
}

func (e DnsType) ToDnsTypeOutput() DnsTypeOutput {
	return pulumi.ToOutput(e).(DnsTypeOutput)
}

func (e DnsType) ToDnsTypeOutputWithContext(ctx context.Context) DnsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DnsTypeOutput)
}

func (e DnsType) ToDnsTypePtrOutput() DnsTypePtrOutput {
	return e.ToDnsTypePtrOutputWithContext(context.Background())
}

func (e DnsType) ToDnsTypePtrOutputWithContext(ctx context.Context) DnsTypePtrOutput {
	return DnsType(e).ToDnsTypeOutputWithContext(ctx).ToDnsTypePtrOutputWithContext(ctx)
}

func (e DnsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DnsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DnsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DnsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DnsTypeOutput struct{ *pulumi.OutputState }

func (DnsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsType)(nil)).Elem()
}

func (o DnsTypeOutput) ToDnsTypeOutput() DnsTypeOutput {
	return o
}

func (o DnsTypeOutput) ToDnsTypeOutputWithContext(ctx context.Context) DnsTypeOutput {
	return o
}

func (o DnsTypeOutput) ToDnsTypePtrOutput() DnsTypePtrOutput {
	return o.ToDnsTypePtrOutputWithContext(context.Background())
}

func (o DnsTypeOutput) ToDnsTypePtrOutputWithContext(ctx context.Context) DnsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DnsType) *DnsType {
		return &v
	}).(DnsTypePtrOutput)
}

func (o DnsTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DnsTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DnsType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DnsTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DnsTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DnsType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DnsTypePtrOutput struct{ *pulumi.OutputState }

func (DnsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsType)(nil)).Elem()
}

func (o DnsTypePtrOutput) ToDnsTypePtrOutput() DnsTypePtrOutput {
	return o
}

func (o DnsTypePtrOutput) ToDnsTypePtrOutputWithContext(ctx context.Context) DnsTypePtrOutput {
	return o
}

func (o DnsTypePtrOutput) Elem() DnsTypeOutput {
	return o.ApplyT(func(v *DnsType) DnsType {
		if v != nil {
			return *v
		}
		var ret DnsType
		return ret
	}).(DnsTypeOutput)
}

func (o DnsTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DnsTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DnsType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DnsTypeInput is an input type that accepts DnsTypeArgs and DnsTypeOutput values.
// You can construct a concrete instance of `DnsTypeInput` via:
//
//	DnsTypeArgs{...}
type DnsTypeInput interface {
	pulumi.Input

	ToDnsTypeOutput() DnsTypeOutput
	ToDnsTypeOutputWithContext(context.Context) DnsTypeOutput
}

var dnsTypePtrType = reflect.TypeOf((**DnsType)(nil)).Elem()

type DnsTypePtrInput interface {
	pulumi.Input

	ToDnsTypePtrOutput() DnsTypePtrOutput
	ToDnsTypePtrOutputWithContext(context.Context) DnsTypePtrOutput
}

type dnsTypePtr string

func DnsTypePtr(v string) DnsTypePtrInput {
	return (*dnsTypePtr)(&v)
}

func (*dnsTypePtr) ElementType() reflect.Type {
	return dnsTypePtrType
}

func (in *dnsTypePtr) ToDnsTypePtrOutput() DnsTypePtrOutput {
	return pulumi.ToOutput(in).(DnsTypePtrOutput)
}

func (in *dnsTypePtr) ToDnsTypePtrOutputWithContext(ctx context.Context) DnsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DnsTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsTypeOutput{})
	pulumi.RegisterOutputType(DnsTypePtrOutput{})
}
