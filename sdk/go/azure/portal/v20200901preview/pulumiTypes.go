// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A dashboard lens.
type DashboardLens struct {
	// The dashboard len's metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The lens order.
	Order int `pulumi:"order"`
	// The dashboard parts.
	Parts []DashboardParts `pulumi:"parts"`
}

// DashboardLensInput is an input type that accepts DashboardLensArgs and DashboardLensOutput values.
// You can construct a concrete instance of `DashboardLensInput` via:
//
//          DashboardLensArgs{...}
type DashboardLensInput interface {
	pulumi.Input

	ToDashboardLensOutput() DashboardLensOutput
	ToDashboardLensOutputWithContext(context.Context) DashboardLensOutput
}

// A dashboard lens.
type DashboardLensArgs struct {
	// The dashboard len's metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The lens order.
	Order pulumi.IntInput `pulumi:"order"`
	// The dashboard parts.
	Parts DashboardPartsArrayInput `pulumi:"parts"`
}

func (DashboardLensArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardLens)(nil)).Elem()
}

func (i DashboardLensArgs) ToDashboardLensOutput() DashboardLensOutput {
	return i.ToDashboardLensOutputWithContext(context.Background())
}

func (i DashboardLensArgs) ToDashboardLensOutputWithContext(ctx context.Context) DashboardLensOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardLensOutput)
}

// DashboardLensArrayInput is an input type that accepts DashboardLensArray and DashboardLensArrayOutput values.
// You can construct a concrete instance of `DashboardLensArrayInput` via:
//
//          DashboardLensArray{ DashboardLensArgs{...} }
type DashboardLensArrayInput interface {
	pulumi.Input

	ToDashboardLensArrayOutput() DashboardLensArrayOutput
	ToDashboardLensArrayOutputWithContext(context.Context) DashboardLensArrayOutput
}

type DashboardLensArray []DashboardLensInput

func (DashboardLensArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardLens)(nil)).Elem()
}

func (i DashboardLensArray) ToDashboardLensArrayOutput() DashboardLensArrayOutput {
	return i.ToDashboardLensArrayOutputWithContext(context.Background())
}

func (i DashboardLensArray) ToDashboardLensArrayOutputWithContext(ctx context.Context) DashboardLensArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardLensArrayOutput)
}

// A dashboard lens.
type DashboardLensOutput struct{ *pulumi.OutputState }

func (DashboardLensOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardLens)(nil)).Elem()
}

func (o DashboardLensOutput) ToDashboardLensOutput() DashboardLensOutput {
	return o
}

func (o DashboardLensOutput) ToDashboardLensOutputWithContext(ctx context.Context) DashboardLensOutput {
	return o
}

// The dashboard len's metadata.
func (o DashboardLensOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v DashboardLens) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The lens order.
func (o DashboardLensOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardLens) int { return v.Order }).(pulumi.IntOutput)
}

// The dashboard parts.
func (o DashboardLensOutput) Parts() DashboardPartsArrayOutput {
	return o.ApplyT(func(v DashboardLens) []DashboardParts { return v.Parts }).(DashboardPartsArrayOutput)
}

type DashboardLensArrayOutput struct{ *pulumi.OutputState }

func (DashboardLensArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardLens)(nil)).Elem()
}

func (o DashboardLensArrayOutput) ToDashboardLensArrayOutput() DashboardLensArrayOutput {
	return o
}

func (o DashboardLensArrayOutput) ToDashboardLensArrayOutputWithContext(ctx context.Context) DashboardLensArrayOutput {
	return o
}

func (o DashboardLensArrayOutput) Index(i pulumi.IntInput) DashboardLensOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardLens {
		return vs[0].([]DashboardLens)[vs[1].(int)]
	}).(DashboardLensOutput)
}

// A dashboard lens.
type DashboardLensInvokeResponse struct {
	// The dashboard len's metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The lens order.
	Order int `pulumi:"order"`
	// The dashboard parts.
	Parts []DashboardPartsInvokeResponse `pulumi:"parts"`
}

// DashboardLensInvokeResponseInput is an input type that accepts DashboardLensInvokeResponseArgs and DashboardLensInvokeResponseOutput values.
// You can construct a concrete instance of `DashboardLensInvokeResponseInput` via:
//
//          DashboardLensInvokeResponseArgs{...}
type DashboardLensInvokeResponseInput interface {
	pulumi.Input

	ToDashboardLensInvokeResponseOutput() DashboardLensInvokeResponseOutput
	ToDashboardLensInvokeResponseOutputWithContext(context.Context) DashboardLensInvokeResponseOutput
}

// A dashboard lens.
type DashboardLensInvokeResponseArgs struct {
	// The dashboard len's metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The lens order.
	Order pulumi.IntInput `pulumi:"order"`
	// The dashboard parts.
	Parts DashboardPartsInvokeResponseArrayInput `pulumi:"parts"`
}

func (DashboardLensInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardLensInvokeResponse)(nil)).Elem()
}

func (i DashboardLensInvokeResponseArgs) ToDashboardLensInvokeResponseOutput() DashboardLensInvokeResponseOutput {
	return i.ToDashboardLensInvokeResponseOutputWithContext(context.Background())
}

func (i DashboardLensInvokeResponseArgs) ToDashboardLensInvokeResponseOutputWithContext(ctx context.Context) DashboardLensInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardLensInvokeResponseOutput)
}

// DashboardLensInvokeResponseArrayInput is an input type that accepts DashboardLensInvokeResponseArray and DashboardLensInvokeResponseArrayOutput values.
// You can construct a concrete instance of `DashboardLensInvokeResponseArrayInput` via:
//
//          DashboardLensInvokeResponseArray{ DashboardLensInvokeResponseArgs{...} }
type DashboardLensInvokeResponseArrayInput interface {
	pulumi.Input

	ToDashboardLensInvokeResponseArrayOutput() DashboardLensInvokeResponseArrayOutput
	ToDashboardLensInvokeResponseArrayOutputWithContext(context.Context) DashboardLensInvokeResponseArrayOutput
}

type DashboardLensInvokeResponseArray []DashboardLensInvokeResponseInput

func (DashboardLensInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardLensInvokeResponse)(nil)).Elem()
}

func (i DashboardLensInvokeResponseArray) ToDashboardLensInvokeResponseArrayOutput() DashboardLensInvokeResponseArrayOutput {
	return i.ToDashboardLensInvokeResponseArrayOutputWithContext(context.Background())
}

func (i DashboardLensInvokeResponseArray) ToDashboardLensInvokeResponseArrayOutputWithContext(ctx context.Context) DashboardLensInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardLensInvokeResponseArrayOutput)
}

// A dashboard lens.
type DashboardLensInvokeResponseOutput struct{ *pulumi.OutputState }

func (DashboardLensInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardLensInvokeResponse)(nil)).Elem()
}

func (o DashboardLensInvokeResponseOutput) ToDashboardLensInvokeResponseOutput() DashboardLensInvokeResponseOutput {
	return o
}

func (o DashboardLensInvokeResponseOutput) ToDashboardLensInvokeResponseOutputWithContext(ctx context.Context) DashboardLensInvokeResponseOutput {
	return o
}

// The dashboard len's metadata.
func (o DashboardLensInvokeResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v DashboardLensInvokeResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The lens order.
func (o DashboardLensInvokeResponseOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardLensInvokeResponse) int { return v.Order }).(pulumi.IntOutput)
}

// The dashboard parts.
func (o DashboardLensInvokeResponseOutput) Parts() DashboardPartsInvokeResponseArrayOutput {
	return o.ApplyT(func(v DashboardLensInvokeResponse) []DashboardPartsInvokeResponse { return v.Parts }).(DashboardPartsInvokeResponseArrayOutput)
}

type DashboardLensInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (DashboardLensInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardLensInvokeResponse)(nil)).Elem()
}

func (o DashboardLensInvokeResponseArrayOutput) ToDashboardLensInvokeResponseArrayOutput() DashboardLensInvokeResponseArrayOutput {
	return o
}

func (o DashboardLensInvokeResponseArrayOutput) ToDashboardLensInvokeResponseArrayOutputWithContext(ctx context.Context) DashboardLensInvokeResponseArrayOutput {
	return o
}

func (o DashboardLensInvokeResponseArrayOutput) Index(i pulumi.IntInput) DashboardLensInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardLensInvokeResponse {
		return vs[0].([]DashboardLensInvokeResponse)[vs[1].(int)]
	}).(DashboardLensInvokeResponseOutput)
}

// A dashboard lens.
type DashboardLensResponse struct {
	// The dashboard len's metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The lens order.
	Order int `pulumi:"order"`
	// The dashboard parts.
	Parts []DashboardPartsResponse `pulumi:"parts"`
}

// DashboardLensResponseInput is an input type that accepts DashboardLensResponseArgs and DashboardLensResponseOutput values.
// You can construct a concrete instance of `DashboardLensResponseInput` via:
//
//          DashboardLensResponseArgs{...}
type DashboardLensResponseInput interface {
	pulumi.Input

	ToDashboardLensResponseOutput() DashboardLensResponseOutput
	ToDashboardLensResponseOutputWithContext(context.Context) DashboardLensResponseOutput
}

// A dashboard lens.
type DashboardLensResponseArgs struct {
	// The dashboard len's metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The lens order.
	Order pulumi.IntInput `pulumi:"order"`
	// The dashboard parts.
	Parts DashboardPartsResponseArrayInput `pulumi:"parts"`
}

func (DashboardLensResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardLensResponse)(nil)).Elem()
}

func (i DashboardLensResponseArgs) ToDashboardLensResponseOutput() DashboardLensResponseOutput {
	return i.ToDashboardLensResponseOutputWithContext(context.Background())
}

func (i DashboardLensResponseArgs) ToDashboardLensResponseOutputWithContext(ctx context.Context) DashboardLensResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardLensResponseOutput)
}

// DashboardLensResponseArrayInput is an input type that accepts DashboardLensResponseArray and DashboardLensResponseArrayOutput values.
// You can construct a concrete instance of `DashboardLensResponseArrayInput` via:
//
//          DashboardLensResponseArray{ DashboardLensResponseArgs{...} }
type DashboardLensResponseArrayInput interface {
	pulumi.Input

	ToDashboardLensResponseArrayOutput() DashboardLensResponseArrayOutput
	ToDashboardLensResponseArrayOutputWithContext(context.Context) DashboardLensResponseArrayOutput
}

type DashboardLensResponseArray []DashboardLensResponseInput

func (DashboardLensResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardLensResponse)(nil)).Elem()
}

func (i DashboardLensResponseArray) ToDashboardLensResponseArrayOutput() DashboardLensResponseArrayOutput {
	return i.ToDashboardLensResponseArrayOutputWithContext(context.Background())
}

func (i DashboardLensResponseArray) ToDashboardLensResponseArrayOutputWithContext(ctx context.Context) DashboardLensResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardLensResponseArrayOutput)
}

// A dashboard lens.
type DashboardLensResponseOutput struct{ *pulumi.OutputState }

func (DashboardLensResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardLensResponse)(nil)).Elem()
}

func (o DashboardLensResponseOutput) ToDashboardLensResponseOutput() DashboardLensResponseOutput {
	return o
}

func (o DashboardLensResponseOutput) ToDashboardLensResponseOutputWithContext(ctx context.Context) DashboardLensResponseOutput {
	return o
}

// The dashboard len's metadata.
func (o DashboardLensResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v DashboardLensResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The lens order.
func (o DashboardLensResponseOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardLensResponse) int { return v.Order }).(pulumi.IntOutput)
}

// The dashboard parts.
func (o DashboardLensResponseOutput) Parts() DashboardPartsResponseArrayOutput {
	return o.ApplyT(func(v DashboardLensResponse) []DashboardPartsResponse { return v.Parts }).(DashboardPartsResponseArrayOutput)
}

type DashboardLensResponseArrayOutput struct{ *pulumi.OutputState }

func (DashboardLensResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardLensResponse)(nil)).Elem()
}

func (o DashboardLensResponseArrayOutput) ToDashboardLensResponseArrayOutput() DashboardLensResponseArrayOutput {
	return o
}

func (o DashboardLensResponseArrayOutput) ToDashboardLensResponseArrayOutputWithContext(ctx context.Context) DashboardLensResponseArrayOutput {
	return o
}

func (o DashboardLensResponseArrayOutput) Index(i pulumi.IntInput) DashboardLensResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardLensResponse {
		return vs[0].([]DashboardLensResponse)[vs[1].(int)]
	}).(DashboardLensResponseOutput)
}

// A dashboard part.
type DashboardParts struct {
	// The dashboard part's metadata.
	Metadata *MarkdownPartMetadata `pulumi:"metadata"`
	// The dashboard's part position.
	Position DashboardPartsPosition `pulumi:"position"`
}

// DashboardPartsInput is an input type that accepts DashboardPartsArgs and DashboardPartsOutput values.
// You can construct a concrete instance of `DashboardPartsInput` via:
//
//          DashboardPartsArgs{...}
type DashboardPartsInput interface {
	pulumi.Input

	ToDashboardPartsOutput() DashboardPartsOutput
	ToDashboardPartsOutputWithContext(context.Context) DashboardPartsOutput
}

// A dashboard part.
type DashboardPartsArgs struct {
	// The dashboard part's metadata.
	Metadata MarkdownPartMetadataPtrInput `pulumi:"metadata"`
	// The dashboard's part position.
	Position DashboardPartsPositionInput `pulumi:"position"`
}

func (DashboardPartsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParts)(nil)).Elem()
}

func (i DashboardPartsArgs) ToDashboardPartsOutput() DashboardPartsOutput {
	return i.ToDashboardPartsOutputWithContext(context.Background())
}

func (i DashboardPartsArgs) ToDashboardPartsOutputWithContext(ctx context.Context) DashboardPartsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsOutput)
}

// DashboardPartsArrayInput is an input type that accepts DashboardPartsArray and DashboardPartsArrayOutput values.
// You can construct a concrete instance of `DashboardPartsArrayInput` via:
//
//          DashboardPartsArray{ DashboardPartsArgs{...} }
type DashboardPartsArrayInput interface {
	pulumi.Input

	ToDashboardPartsArrayOutput() DashboardPartsArrayOutput
	ToDashboardPartsArrayOutputWithContext(context.Context) DashboardPartsArrayOutput
}

type DashboardPartsArray []DashboardPartsInput

func (DashboardPartsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParts)(nil)).Elem()
}

func (i DashboardPartsArray) ToDashboardPartsArrayOutput() DashboardPartsArrayOutput {
	return i.ToDashboardPartsArrayOutputWithContext(context.Background())
}

func (i DashboardPartsArray) ToDashboardPartsArrayOutputWithContext(ctx context.Context) DashboardPartsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsArrayOutput)
}

// A dashboard part.
type DashboardPartsOutput struct{ *pulumi.OutputState }

func (DashboardPartsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParts)(nil)).Elem()
}

func (o DashboardPartsOutput) ToDashboardPartsOutput() DashboardPartsOutput {
	return o
}

func (o DashboardPartsOutput) ToDashboardPartsOutputWithContext(ctx context.Context) DashboardPartsOutput {
	return o
}

// The dashboard part's metadata.
func (o DashboardPartsOutput) Metadata() MarkdownPartMetadataPtrOutput {
	return o.ApplyT(func(v DashboardParts) *MarkdownPartMetadata { return v.Metadata }).(MarkdownPartMetadataPtrOutput)
}

// The dashboard's part position.
func (o DashboardPartsOutput) Position() DashboardPartsPositionOutput {
	return o.ApplyT(func(v DashboardParts) DashboardPartsPosition { return v.Position }).(DashboardPartsPositionOutput)
}

type DashboardPartsArrayOutput struct{ *pulumi.OutputState }

func (DashboardPartsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParts)(nil)).Elem()
}

func (o DashboardPartsArrayOutput) ToDashboardPartsArrayOutput() DashboardPartsArrayOutput {
	return o
}

func (o DashboardPartsArrayOutput) ToDashboardPartsArrayOutputWithContext(ctx context.Context) DashboardPartsArrayOutput {
	return o
}

func (o DashboardPartsArrayOutput) Index(i pulumi.IntInput) DashboardPartsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardParts {
		return vs[0].([]DashboardParts)[vs[1].(int)]
	}).(DashboardPartsOutput)
}

// A dashboard part.
type DashboardPartsInvokeResponse struct {
	// The dashboard part's metadata.
	Metadata *MarkdownPartMetadataInvokeResponse `pulumi:"metadata"`
	// The dashboard's part position.
	Position DashboardPartsInvokeResponsePosition `pulumi:"position"`
}

// DashboardPartsInvokeResponseInput is an input type that accepts DashboardPartsInvokeResponseArgs and DashboardPartsInvokeResponseOutput values.
// You can construct a concrete instance of `DashboardPartsInvokeResponseInput` via:
//
//          DashboardPartsInvokeResponseArgs{...}
type DashboardPartsInvokeResponseInput interface {
	pulumi.Input

	ToDashboardPartsInvokeResponseOutput() DashboardPartsInvokeResponseOutput
	ToDashboardPartsInvokeResponseOutputWithContext(context.Context) DashboardPartsInvokeResponseOutput
}

// A dashboard part.
type DashboardPartsInvokeResponseArgs struct {
	// The dashboard part's metadata.
	Metadata MarkdownPartMetadataInvokeResponsePtrInput `pulumi:"metadata"`
	// The dashboard's part position.
	Position DashboardPartsInvokeResponsePositionInput `pulumi:"position"`
}

func (DashboardPartsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsInvokeResponse)(nil)).Elem()
}

func (i DashboardPartsInvokeResponseArgs) ToDashboardPartsInvokeResponseOutput() DashboardPartsInvokeResponseOutput {
	return i.ToDashboardPartsInvokeResponseOutputWithContext(context.Background())
}

func (i DashboardPartsInvokeResponseArgs) ToDashboardPartsInvokeResponseOutputWithContext(ctx context.Context) DashboardPartsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsInvokeResponseOutput)
}

// DashboardPartsInvokeResponseArrayInput is an input type that accepts DashboardPartsInvokeResponseArray and DashboardPartsInvokeResponseArrayOutput values.
// You can construct a concrete instance of `DashboardPartsInvokeResponseArrayInput` via:
//
//          DashboardPartsInvokeResponseArray{ DashboardPartsInvokeResponseArgs{...} }
type DashboardPartsInvokeResponseArrayInput interface {
	pulumi.Input

	ToDashboardPartsInvokeResponseArrayOutput() DashboardPartsInvokeResponseArrayOutput
	ToDashboardPartsInvokeResponseArrayOutputWithContext(context.Context) DashboardPartsInvokeResponseArrayOutput
}

type DashboardPartsInvokeResponseArray []DashboardPartsInvokeResponseInput

func (DashboardPartsInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPartsInvokeResponse)(nil)).Elem()
}

func (i DashboardPartsInvokeResponseArray) ToDashboardPartsInvokeResponseArrayOutput() DashboardPartsInvokeResponseArrayOutput {
	return i.ToDashboardPartsInvokeResponseArrayOutputWithContext(context.Background())
}

func (i DashboardPartsInvokeResponseArray) ToDashboardPartsInvokeResponseArrayOutputWithContext(ctx context.Context) DashboardPartsInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsInvokeResponseArrayOutput)
}

// A dashboard part.
type DashboardPartsInvokeResponseOutput struct{ *pulumi.OutputState }

func (DashboardPartsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsInvokeResponse)(nil)).Elem()
}

func (o DashboardPartsInvokeResponseOutput) ToDashboardPartsInvokeResponseOutput() DashboardPartsInvokeResponseOutput {
	return o
}

func (o DashboardPartsInvokeResponseOutput) ToDashboardPartsInvokeResponseOutputWithContext(ctx context.Context) DashboardPartsInvokeResponseOutput {
	return o
}

// The dashboard part's metadata.
func (o DashboardPartsInvokeResponseOutput) Metadata() MarkdownPartMetadataInvokeResponsePtrOutput {
	return o.ApplyT(func(v DashboardPartsInvokeResponse) *MarkdownPartMetadataInvokeResponse { return v.Metadata }).(MarkdownPartMetadataInvokeResponsePtrOutput)
}

// The dashboard's part position.
func (o DashboardPartsInvokeResponseOutput) Position() DashboardPartsInvokeResponsePositionOutput {
	return o.ApplyT(func(v DashboardPartsInvokeResponse) DashboardPartsInvokeResponsePosition { return v.Position }).(DashboardPartsInvokeResponsePositionOutput)
}

type DashboardPartsInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (DashboardPartsInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPartsInvokeResponse)(nil)).Elem()
}

func (o DashboardPartsInvokeResponseArrayOutput) ToDashboardPartsInvokeResponseArrayOutput() DashboardPartsInvokeResponseArrayOutput {
	return o
}

func (o DashboardPartsInvokeResponseArrayOutput) ToDashboardPartsInvokeResponseArrayOutputWithContext(ctx context.Context) DashboardPartsInvokeResponseArrayOutput {
	return o
}

func (o DashboardPartsInvokeResponseArrayOutput) Index(i pulumi.IntInput) DashboardPartsInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardPartsInvokeResponse {
		return vs[0].([]DashboardPartsInvokeResponse)[vs[1].(int)]
	}).(DashboardPartsInvokeResponseOutput)
}

// The dashboard's part position.
type DashboardPartsInvokeResponsePosition struct {
	// The dashboard's part column span.
	ColSpan int `pulumi:"colSpan"`
	// The dashboard part's metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The dashboard's part row span.
	RowSpan int `pulumi:"rowSpan"`
	// The dashboard's part x coordinate.
	X int `pulumi:"x"`
	// The dashboard's part y coordinate.
	Y int `pulumi:"y"`
}

// DashboardPartsInvokeResponsePositionInput is an input type that accepts DashboardPartsInvokeResponsePositionArgs and DashboardPartsInvokeResponsePositionOutput values.
// You can construct a concrete instance of `DashboardPartsInvokeResponsePositionInput` via:
//
//          DashboardPartsInvokeResponsePositionArgs{...}
type DashboardPartsInvokeResponsePositionInput interface {
	pulumi.Input

	ToDashboardPartsInvokeResponsePositionOutput() DashboardPartsInvokeResponsePositionOutput
	ToDashboardPartsInvokeResponsePositionOutputWithContext(context.Context) DashboardPartsInvokeResponsePositionOutput
}

// The dashboard's part position.
type DashboardPartsInvokeResponsePositionArgs struct {
	// The dashboard's part column span.
	ColSpan pulumi.IntInput `pulumi:"colSpan"`
	// The dashboard part's metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The dashboard's part row span.
	RowSpan pulumi.IntInput `pulumi:"rowSpan"`
	// The dashboard's part x coordinate.
	X pulumi.IntInput `pulumi:"x"`
	// The dashboard's part y coordinate.
	Y pulumi.IntInput `pulumi:"y"`
}

func (DashboardPartsInvokeResponsePositionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsInvokeResponsePosition)(nil)).Elem()
}

func (i DashboardPartsInvokeResponsePositionArgs) ToDashboardPartsInvokeResponsePositionOutput() DashboardPartsInvokeResponsePositionOutput {
	return i.ToDashboardPartsInvokeResponsePositionOutputWithContext(context.Background())
}

func (i DashboardPartsInvokeResponsePositionArgs) ToDashboardPartsInvokeResponsePositionOutputWithContext(ctx context.Context) DashboardPartsInvokeResponsePositionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsInvokeResponsePositionOutput)
}

// The dashboard's part position.
type DashboardPartsInvokeResponsePositionOutput struct{ *pulumi.OutputState }

func (DashboardPartsInvokeResponsePositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsInvokeResponsePosition)(nil)).Elem()
}

func (o DashboardPartsInvokeResponsePositionOutput) ToDashboardPartsInvokeResponsePositionOutput() DashboardPartsInvokeResponsePositionOutput {
	return o
}

func (o DashboardPartsInvokeResponsePositionOutput) ToDashboardPartsInvokeResponsePositionOutputWithContext(ctx context.Context) DashboardPartsInvokeResponsePositionOutput {
	return o
}

// The dashboard's part column span.
func (o DashboardPartsInvokeResponsePositionOutput) ColSpan() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsInvokeResponsePosition) int { return v.ColSpan }).(pulumi.IntOutput)
}

// The dashboard part's metadata.
func (o DashboardPartsInvokeResponsePositionOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v DashboardPartsInvokeResponsePosition) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The dashboard's part row span.
func (o DashboardPartsInvokeResponsePositionOutput) RowSpan() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsInvokeResponsePosition) int { return v.RowSpan }).(pulumi.IntOutput)
}

// The dashboard's part x coordinate.
func (o DashboardPartsInvokeResponsePositionOutput) X() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsInvokeResponsePosition) int { return v.X }).(pulumi.IntOutput)
}

// The dashboard's part y coordinate.
func (o DashboardPartsInvokeResponsePositionOutput) Y() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsInvokeResponsePosition) int { return v.Y }).(pulumi.IntOutput)
}

// The dashboard's part position.
type DashboardPartsPosition struct {
	// The dashboard's part column span.
	ColSpan int `pulumi:"colSpan"`
	// The dashboard part's metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The dashboard's part row span.
	RowSpan int `pulumi:"rowSpan"`
	// The dashboard's part x coordinate.
	X int `pulumi:"x"`
	// The dashboard's part y coordinate.
	Y int `pulumi:"y"`
}

// DashboardPartsPositionInput is an input type that accepts DashboardPartsPositionArgs and DashboardPartsPositionOutput values.
// You can construct a concrete instance of `DashboardPartsPositionInput` via:
//
//          DashboardPartsPositionArgs{...}
type DashboardPartsPositionInput interface {
	pulumi.Input

	ToDashboardPartsPositionOutput() DashboardPartsPositionOutput
	ToDashboardPartsPositionOutputWithContext(context.Context) DashboardPartsPositionOutput
}

// The dashboard's part position.
type DashboardPartsPositionArgs struct {
	// The dashboard's part column span.
	ColSpan pulumi.IntInput `pulumi:"colSpan"`
	// The dashboard part's metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The dashboard's part row span.
	RowSpan pulumi.IntInput `pulumi:"rowSpan"`
	// The dashboard's part x coordinate.
	X pulumi.IntInput `pulumi:"x"`
	// The dashboard's part y coordinate.
	Y pulumi.IntInput `pulumi:"y"`
}

func (DashboardPartsPositionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsPosition)(nil)).Elem()
}

func (i DashboardPartsPositionArgs) ToDashboardPartsPositionOutput() DashboardPartsPositionOutput {
	return i.ToDashboardPartsPositionOutputWithContext(context.Background())
}

func (i DashboardPartsPositionArgs) ToDashboardPartsPositionOutputWithContext(ctx context.Context) DashboardPartsPositionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsPositionOutput)
}

// The dashboard's part position.
type DashboardPartsPositionOutput struct{ *pulumi.OutputState }

func (DashboardPartsPositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsPosition)(nil)).Elem()
}

func (o DashboardPartsPositionOutput) ToDashboardPartsPositionOutput() DashboardPartsPositionOutput {
	return o
}

func (o DashboardPartsPositionOutput) ToDashboardPartsPositionOutputWithContext(ctx context.Context) DashboardPartsPositionOutput {
	return o
}

// The dashboard's part column span.
func (o DashboardPartsPositionOutput) ColSpan() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsPosition) int { return v.ColSpan }).(pulumi.IntOutput)
}

// The dashboard part's metadata.
func (o DashboardPartsPositionOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v DashboardPartsPosition) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The dashboard's part row span.
func (o DashboardPartsPositionOutput) RowSpan() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsPosition) int { return v.RowSpan }).(pulumi.IntOutput)
}

// The dashboard's part x coordinate.
func (o DashboardPartsPositionOutput) X() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsPosition) int { return v.X }).(pulumi.IntOutput)
}

// The dashboard's part y coordinate.
func (o DashboardPartsPositionOutput) Y() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsPosition) int { return v.Y }).(pulumi.IntOutput)
}

// A dashboard part.
type DashboardPartsResponse struct {
	// The dashboard part's metadata.
	Metadata *MarkdownPartMetadataResponse `pulumi:"metadata"`
	// The dashboard's part position.
	Position DashboardPartsResponsePosition `pulumi:"position"`
}

// DashboardPartsResponseInput is an input type that accepts DashboardPartsResponseArgs and DashboardPartsResponseOutput values.
// You can construct a concrete instance of `DashboardPartsResponseInput` via:
//
//          DashboardPartsResponseArgs{...}
type DashboardPartsResponseInput interface {
	pulumi.Input

	ToDashboardPartsResponseOutput() DashboardPartsResponseOutput
	ToDashboardPartsResponseOutputWithContext(context.Context) DashboardPartsResponseOutput
}

// A dashboard part.
type DashboardPartsResponseArgs struct {
	// The dashboard part's metadata.
	Metadata MarkdownPartMetadataResponsePtrInput `pulumi:"metadata"`
	// The dashboard's part position.
	Position DashboardPartsResponsePositionInput `pulumi:"position"`
}

func (DashboardPartsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsResponse)(nil)).Elem()
}

func (i DashboardPartsResponseArgs) ToDashboardPartsResponseOutput() DashboardPartsResponseOutput {
	return i.ToDashboardPartsResponseOutputWithContext(context.Background())
}

func (i DashboardPartsResponseArgs) ToDashboardPartsResponseOutputWithContext(ctx context.Context) DashboardPartsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsResponseOutput)
}

// DashboardPartsResponseArrayInput is an input type that accepts DashboardPartsResponseArray and DashboardPartsResponseArrayOutput values.
// You can construct a concrete instance of `DashboardPartsResponseArrayInput` via:
//
//          DashboardPartsResponseArray{ DashboardPartsResponseArgs{...} }
type DashboardPartsResponseArrayInput interface {
	pulumi.Input

	ToDashboardPartsResponseArrayOutput() DashboardPartsResponseArrayOutput
	ToDashboardPartsResponseArrayOutputWithContext(context.Context) DashboardPartsResponseArrayOutput
}

type DashboardPartsResponseArray []DashboardPartsResponseInput

func (DashboardPartsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPartsResponse)(nil)).Elem()
}

func (i DashboardPartsResponseArray) ToDashboardPartsResponseArrayOutput() DashboardPartsResponseArrayOutput {
	return i.ToDashboardPartsResponseArrayOutputWithContext(context.Background())
}

func (i DashboardPartsResponseArray) ToDashboardPartsResponseArrayOutputWithContext(ctx context.Context) DashboardPartsResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsResponseArrayOutput)
}

// A dashboard part.
type DashboardPartsResponseOutput struct{ *pulumi.OutputState }

func (DashboardPartsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsResponse)(nil)).Elem()
}

func (o DashboardPartsResponseOutput) ToDashboardPartsResponseOutput() DashboardPartsResponseOutput {
	return o
}

func (o DashboardPartsResponseOutput) ToDashboardPartsResponseOutputWithContext(ctx context.Context) DashboardPartsResponseOutput {
	return o
}

// The dashboard part's metadata.
func (o DashboardPartsResponseOutput) Metadata() MarkdownPartMetadataResponsePtrOutput {
	return o.ApplyT(func(v DashboardPartsResponse) *MarkdownPartMetadataResponse { return v.Metadata }).(MarkdownPartMetadataResponsePtrOutput)
}

// The dashboard's part position.
func (o DashboardPartsResponseOutput) Position() DashboardPartsResponsePositionOutput {
	return o.ApplyT(func(v DashboardPartsResponse) DashboardPartsResponsePosition { return v.Position }).(DashboardPartsResponsePositionOutput)
}

type DashboardPartsResponseArrayOutput struct{ *pulumi.OutputState }

func (DashboardPartsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPartsResponse)(nil)).Elem()
}

func (o DashboardPartsResponseArrayOutput) ToDashboardPartsResponseArrayOutput() DashboardPartsResponseArrayOutput {
	return o
}

func (o DashboardPartsResponseArrayOutput) ToDashboardPartsResponseArrayOutputWithContext(ctx context.Context) DashboardPartsResponseArrayOutput {
	return o
}

func (o DashboardPartsResponseArrayOutput) Index(i pulumi.IntInput) DashboardPartsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardPartsResponse {
		return vs[0].([]DashboardPartsResponse)[vs[1].(int)]
	}).(DashboardPartsResponseOutput)
}

// The dashboard's part position.
type DashboardPartsResponsePosition struct {
	// The dashboard's part column span.
	ColSpan int `pulumi:"colSpan"`
	// The dashboard part's metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The dashboard's part row span.
	RowSpan int `pulumi:"rowSpan"`
	// The dashboard's part x coordinate.
	X int `pulumi:"x"`
	// The dashboard's part y coordinate.
	Y int `pulumi:"y"`
}

// DashboardPartsResponsePositionInput is an input type that accepts DashboardPartsResponsePositionArgs and DashboardPartsResponsePositionOutput values.
// You can construct a concrete instance of `DashboardPartsResponsePositionInput` via:
//
//          DashboardPartsResponsePositionArgs{...}
type DashboardPartsResponsePositionInput interface {
	pulumi.Input

	ToDashboardPartsResponsePositionOutput() DashboardPartsResponsePositionOutput
	ToDashboardPartsResponsePositionOutputWithContext(context.Context) DashboardPartsResponsePositionOutput
}

// The dashboard's part position.
type DashboardPartsResponsePositionArgs struct {
	// The dashboard's part column span.
	ColSpan pulumi.IntInput `pulumi:"colSpan"`
	// The dashboard part's metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The dashboard's part row span.
	RowSpan pulumi.IntInput `pulumi:"rowSpan"`
	// The dashboard's part x coordinate.
	X pulumi.IntInput `pulumi:"x"`
	// The dashboard's part y coordinate.
	Y pulumi.IntInput `pulumi:"y"`
}

func (DashboardPartsResponsePositionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsResponsePosition)(nil)).Elem()
}

func (i DashboardPartsResponsePositionArgs) ToDashboardPartsResponsePositionOutput() DashboardPartsResponsePositionOutput {
	return i.ToDashboardPartsResponsePositionOutputWithContext(context.Background())
}

func (i DashboardPartsResponsePositionArgs) ToDashboardPartsResponsePositionOutputWithContext(ctx context.Context) DashboardPartsResponsePositionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPartsResponsePositionOutput)
}

// The dashboard's part position.
type DashboardPartsResponsePositionOutput struct{ *pulumi.OutputState }

func (DashboardPartsResponsePositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPartsResponsePosition)(nil)).Elem()
}

func (o DashboardPartsResponsePositionOutput) ToDashboardPartsResponsePositionOutput() DashboardPartsResponsePositionOutput {
	return o
}

func (o DashboardPartsResponsePositionOutput) ToDashboardPartsResponsePositionOutputWithContext(ctx context.Context) DashboardPartsResponsePositionOutput {
	return o
}

// The dashboard's part column span.
func (o DashboardPartsResponsePositionOutput) ColSpan() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsResponsePosition) int { return v.ColSpan }).(pulumi.IntOutput)
}

// The dashboard part's metadata.
func (o DashboardPartsResponsePositionOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v DashboardPartsResponsePosition) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The dashboard's part row span.
func (o DashboardPartsResponsePositionOutput) RowSpan() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsResponsePosition) int { return v.RowSpan }).(pulumi.IntOutput)
}

// The dashboard's part x coordinate.
func (o DashboardPartsResponsePositionOutput) X() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsResponsePosition) int { return v.X }).(pulumi.IntOutput)
}

// The dashboard's part y coordinate.
func (o DashboardPartsResponsePositionOutput) Y() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardPartsResponsePosition) int { return v.Y }).(pulumi.IntOutput)
}

// Markdown part metadata.
type MarkdownPartMetadata struct {
	// Input to dashboard part.
	Inputs []interface{} `pulumi:"inputs"`
	// Markdown part settings.
	Settings *MarkdownPartMetadataSettings `pulumi:"settings"`
	// The type of dashboard part.
	// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
	Type string `pulumi:"type"`
}

// MarkdownPartMetadataInput is an input type that accepts MarkdownPartMetadataArgs and MarkdownPartMetadataOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataInput` via:
//
//          MarkdownPartMetadataArgs{...}
type MarkdownPartMetadataInput interface {
	pulumi.Input

	ToMarkdownPartMetadataOutput() MarkdownPartMetadataOutput
	ToMarkdownPartMetadataOutputWithContext(context.Context) MarkdownPartMetadataOutput
}

// Markdown part metadata.
type MarkdownPartMetadataArgs struct {
	// Input to dashboard part.
	Inputs pulumi.ArrayInput `pulumi:"inputs"`
	// Markdown part settings.
	Settings MarkdownPartMetadataSettingsPtrInput `pulumi:"settings"`
	// The type of dashboard part.
	// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MarkdownPartMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadata)(nil)).Elem()
}

func (i MarkdownPartMetadataArgs) ToMarkdownPartMetadataOutput() MarkdownPartMetadataOutput {
	return i.ToMarkdownPartMetadataOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataArgs) ToMarkdownPartMetadataOutputWithContext(ctx context.Context) MarkdownPartMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataOutput)
}

func (i MarkdownPartMetadataArgs) ToMarkdownPartMetadataPtrOutput() MarkdownPartMetadataPtrOutput {
	return i.ToMarkdownPartMetadataPtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataArgs) ToMarkdownPartMetadataPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataOutput).ToMarkdownPartMetadataPtrOutputWithContext(ctx)
}

// MarkdownPartMetadataPtrInput is an input type that accepts MarkdownPartMetadataArgs, MarkdownPartMetadataPtr and MarkdownPartMetadataPtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataPtrInput` via:
//
//          MarkdownPartMetadataArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataPtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataPtrOutput() MarkdownPartMetadataPtrOutput
	ToMarkdownPartMetadataPtrOutputWithContext(context.Context) MarkdownPartMetadataPtrOutput
}

type markdownPartMetadataPtrType MarkdownPartMetadataArgs

func MarkdownPartMetadataPtr(v *MarkdownPartMetadataArgs) MarkdownPartMetadataPtrInput {
	return (*markdownPartMetadataPtrType)(v)
}

func (*markdownPartMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadata)(nil)).Elem()
}

func (i *markdownPartMetadataPtrType) ToMarkdownPartMetadataPtrOutput() MarkdownPartMetadataPtrOutput {
	return i.ToMarkdownPartMetadataPtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataPtrType) ToMarkdownPartMetadataPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataPtrOutput)
}

// Markdown part metadata.
type MarkdownPartMetadataOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadata)(nil)).Elem()
}

func (o MarkdownPartMetadataOutput) ToMarkdownPartMetadataOutput() MarkdownPartMetadataOutput {
	return o
}

func (o MarkdownPartMetadataOutput) ToMarkdownPartMetadataOutputWithContext(ctx context.Context) MarkdownPartMetadataOutput {
	return o
}

func (o MarkdownPartMetadataOutput) ToMarkdownPartMetadataPtrOutput() MarkdownPartMetadataPtrOutput {
	return o.ToMarkdownPartMetadataPtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataOutput) ToMarkdownPartMetadataPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadata) *MarkdownPartMetadata {
		return &v
	}).(MarkdownPartMetadataPtrOutput)
}

// Input to dashboard part.
func (o MarkdownPartMetadataOutput) Inputs() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarkdownPartMetadata) []interface{} { return v.Inputs }).(pulumi.ArrayOutput)
}

// Markdown part settings.
func (o MarkdownPartMetadataOutput) Settings() MarkdownPartMetadataSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadata) *MarkdownPartMetadataSettings { return v.Settings }).(MarkdownPartMetadataSettingsPtrOutput)
}

// The type of dashboard part.
// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
func (o MarkdownPartMetadataOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarkdownPartMetadata) string { return v.Type }).(pulumi.StringOutput)
}

type MarkdownPartMetadataPtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadata)(nil)).Elem()
}

func (o MarkdownPartMetadataPtrOutput) ToMarkdownPartMetadataPtrOutput() MarkdownPartMetadataPtrOutput {
	return o
}

func (o MarkdownPartMetadataPtrOutput) ToMarkdownPartMetadataPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataPtrOutput {
	return o
}

func (o MarkdownPartMetadataPtrOutput) Elem() MarkdownPartMetadataOutput {
	return o.ApplyT(func(v *MarkdownPartMetadata) MarkdownPartMetadata { return *v }).(MarkdownPartMetadataOutput)
}

// Input to dashboard part.
func (o MarkdownPartMetadataPtrOutput) Inputs() pulumi.ArrayOutput {
	return o.ApplyT(func(v *MarkdownPartMetadata) []interface{} {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(pulumi.ArrayOutput)
}

// Markdown part settings.
func (o MarkdownPartMetadataPtrOutput) Settings() MarkdownPartMetadataSettingsPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadata) *MarkdownPartMetadataSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(MarkdownPartMetadataSettingsPtrOutput)
}

// The type of dashboard part.
// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
func (o MarkdownPartMetadataPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadata) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The content of markdown part.
type MarkdownPartMetadataContent struct {
	// The setting of the content of markdown part.
	Settings *MarkdownPartMetadataSettings `pulumi:"settings"`
}

// MarkdownPartMetadataContentInput is an input type that accepts MarkdownPartMetadataContentArgs and MarkdownPartMetadataContentOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataContentInput` via:
//
//          MarkdownPartMetadataContentArgs{...}
type MarkdownPartMetadataContentInput interface {
	pulumi.Input

	ToMarkdownPartMetadataContentOutput() MarkdownPartMetadataContentOutput
	ToMarkdownPartMetadataContentOutputWithContext(context.Context) MarkdownPartMetadataContentOutput
}

// The content of markdown part.
type MarkdownPartMetadataContentArgs struct {
	// The setting of the content of markdown part.
	Settings MarkdownPartMetadataSettingsPtrInput `pulumi:"settings"`
}

func (MarkdownPartMetadataContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataContent)(nil)).Elem()
}

func (i MarkdownPartMetadataContentArgs) ToMarkdownPartMetadataContentOutput() MarkdownPartMetadataContentOutput {
	return i.ToMarkdownPartMetadataContentOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataContentArgs) ToMarkdownPartMetadataContentOutputWithContext(ctx context.Context) MarkdownPartMetadataContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataContentOutput)
}

func (i MarkdownPartMetadataContentArgs) ToMarkdownPartMetadataContentPtrOutput() MarkdownPartMetadataContentPtrOutput {
	return i.ToMarkdownPartMetadataContentPtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataContentArgs) ToMarkdownPartMetadataContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataContentOutput).ToMarkdownPartMetadataContentPtrOutputWithContext(ctx)
}

// MarkdownPartMetadataContentPtrInput is an input type that accepts MarkdownPartMetadataContentArgs, MarkdownPartMetadataContentPtr and MarkdownPartMetadataContentPtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataContentPtrInput` via:
//
//          MarkdownPartMetadataContentArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataContentPtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataContentPtrOutput() MarkdownPartMetadataContentPtrOutput
	ToMarkdownPartMetadataContentPtrOutputWithContext(context.Context) MarkdownPartMetadataContentPtrOutput
}

type markdownPartMetadataContentPtrType MarkdownPartMetadataContentArgs

func MarkdownPartMetadataContentPtr(v *MarkdownPartMetadataContentArgs) MarkdownPartMetadataContentPtrInput {
	return (*markdownPartMetadataContentPtrType)(v)
}

func (*markdownPartMetadataContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataContent)(nil)).Elem()
}

func (i *markdownPartMetadataContentPtrType) ToMarkdownPartMetadataContentPtrOutput() MarkdownPartMetadataContentPtrOutput {
	return i.ToMarkdownPartMetadataContentPtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataContentPtrType) ToMarkdownPartMetadataContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataContentPtrOutput)
}

// The content of markdown part.
type MarkdownPartMetadataContentOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataContent)(nil)).Elem()
}

func (o MarkdownPartMetadataContentOutput) ToMarkdownPartMetadataContentOutput() MarkdownPartMetadataContentOutput {
	return o
}

func (o MarkdownPartMetadataContentOutput) ToMarkdownPartMetadataContentOutputWithContext(ctx context.Context) MarkdownPartMetadataContentOutput {
	return o
}

func (o MarkdownPartMetadataContentOutput) ToMarkdownPartMetadataContentPtrOutput() MarkdownPartMetadataContentPtrOutput {
	return o.ToMarkdownPartMetadataContentPtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataContentOutput) ToMarkdownPartMetadataContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataContentPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataContent) *MarkdownPartMetadataContent {
		return &v
	}).(MarkdownPartMetadataContentPtrOutput)
}

// The setting of the content of markdown part.
func (o MarkdownPartMetadataContentOutput) Settings() MarkdownPartMetadataSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataContent) *MarkdownPartMetadataSettings { return v.Settings }).(MarkdownPartMetadataSettingsPtrOutput)
}

type MarkdownPartMetadataContentPtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataContent)(nil)).Elem()
}

func (o MarkdownPartMetadataContentPtrOutput) ToMarkdownPartMetadataContentPtrOutput() MarkdownPartMetadataContentPtrOutput {
	return o
}

func (o MarkdownPartMetadataContentPtrOutput) ToMarkdownPartMetadataContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataContentPtrOutput {
	return o
}

func (o MarkdownPartMetadataContentPtrOutput) Elem() MarkdownPartMetadataContentOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataContent) MarkdownPartMetadataContent { return *v }).(MarkdownPartMetadataContentOutput)
}

// The setting of the content of markdown part.
func (o MarkdownPartMetadataContentPtrOutput) Settings() MarkdownPartMetadataSettingsPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataContent) *MarkdownPartMetadataSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(MarkdownPartMetadataSettingsPtrOutput)
}

// Markdown part metadata.
type MarkdownPartMetadataInvokeResponse struct {
	// Input to dashboard part.
	Inputs []interface{} `pulumi:"inputs"`
	// Markdown part settings.
	Settings *MarkdownPartMetadataInvokeResponseSettings `pulumi:"settings"`
	// The type of dashboard part.
	// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
	Type string `pulumi:"type"`
}

// MarkdownPartMetadataInvokeResponseInput is an input type that accepts MarkdownPartMetadataInvokeResponseArgs and MarkdownPartMetadataInvokeResponseOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataInvokeResponseInput` via:
//
//          MarkdownPartMetadataInvokeResponseArgs{...}
type MarkdownPartMetadataInvokeResponseInput interface {
	pulumi.Input

	ToMarkdownPartMetadataInvokeResponseOutput() MarkdownPartMetadataInvokeResponseOutput
	ToMarkdownPartMetadataInvokeResponseOutputWithContext(context.Context) MarkdownPartMetadataInvokeResponseOutput
}

// Markdown part metadata.
type MarkdownPartMetadataInvokeResponseArgs struct {
	// Input to dashboard part.
	Inputs pulumi.ArrayInput `pulumi:"inputs"`
	// Markdown part settings.
	Settings MarkdownPartMetadataInvokeResponseSettingsPtrInput `pulumi:"settings"`
	// The type of dashboard part.
	// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MarkdownPartMetadataInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataInvokeResponse)(nil)).Elem()
}

func (i MarkdownPartMetadataInvokeResponseArgs) ToMarkdownPartMetadataInvokeResponseOutput() MarkdownPartMetadataInvokeResponseOutput {
	return i.ToMarkdownPartMetadataInvokeResponseOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataInvokeResponseArgs) ToMarkdownPartMetadataInvokeResponseOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponseOutput)
}

func (i MarkdownPartMetadataInvokeResponseArgs) ToMarkdownPartMetadataInvokeResponsePtrOutput() MarkdownPartMetadataInvokeResponsePtrOutput {
	return i.ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataInvokeResponseArgs) ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponseOutput).ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(ctx)
}

// MarkdownPartMetadataInvokeResponsePtrInput is an input type that accepts MarkdownPartMetadataInvokeResponseArgs, MarkdownPartMetadataInvokeResponsePtr and MarkdownPartMetadataInvokeResponsePtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataInvokeResponsePtrInput` via:
//
//          MarkdownPartMetadataInvokeResponseArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataInvokeResponsePtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataInvokeResponsePtrOutput() MarkdownPartMetadataInvokeResponsePtrOutput
	ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(context.Context) MarkdownPartMetadataInvokeResponsePtrOutput
}

type markdownPartMetadataInvokeResponsePtrType MarkdownPartMetadataInvokeResponseArgs

func MarkdownPartMetadataInvokeResponsePtr(v *MarkdownPartMetadataInvokeResponseArgs) MarkdownPartMetadataInvokeResponsePtrInput {
	return (*markdownPartMetadataInvokeResponsePtrType)(v)
}

func (*markdownPartMetadataInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataInvokeResponse)(nil)).Elem()
}

func (i *markdownPartMetadataInvokeResponsePtrType) ToMarkdownPartMetadataInvokeResponsePtrOutput() MarkdownPartMetadataInvokeResponsePtrOutput {
	return i.ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataInvokeResponsePtrType) ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponsePtrOutput)
}

// Markdown part metadata.
type MarkdownPartMetadataInvokeResponseOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataInvokeResponse)(nil)).Elem()
}

func (o MarkdownPartMetadataInvokeResponseOutput) ToMarkdownPartMetadataInvokeResponseOutput() MarkdownPartMetadataInvokeResponseOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseOutput) ToMarkdownPartMetadataInvokeResponseOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseOutput) ToMarkdownPartMetadataInvokeResponsePtrOutput() MarkdownPartMetadataInvokeResponsePtrOutput {
	return o.ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataInvokeResponseOutput) ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponsePtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataInvokeResponse) *MarkdownPartMetadataInvokeResponse {
		return &v
	}).(MarkdownPartMetadataInvokeResponsePtrOutput)
}

// Input to dashboard part.
func (o MarkdownPartMetadataInvokeResponseOutput) Inputs() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarkdownPartMetadataInvokeResponse) []interface{} { return v.Inputs }).(pulumi.ArrayOutput)
}

// Markdown part settings.
func (o MarkdownPartMetadataInvokeResponseOutput) Settings() MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataInvokeResponse) *MarkdownPartMetadataInvokeResponseSettings {
		return v.Settings
	}).(MarkdownPartMetadataInvokeResponseSettingsPtrOutput)
}

// The type of dashboard part.
// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
func (o MarkdownPartMetadataInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarkdownPartMetadataInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

type MarkdownPartMetadataInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataInvokeResponse)(nil)).Elem()
}

func (o MarkdownPartMetadataInvokeResponsePtrOutput) ToMarkdownPartMetadataInvokeResponsePtrOutput() MarkdownPartMetadataInvokeResponsePtrOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponsePtrOutput) ToMarkdownPartMetadataInvokeResponsePtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponsePtrOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponsePtrOutput) Elem() MarkdownPartMetadataInvokeResponseOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataInvokeResponse) MarkdownPartMetadataInvokeResponse { return *v }).(MarkdownPartMetadataInvokeResponseOutput)
}

// Input to dashboard part.
func (o MarkdownPartMetadataInvokeResponsePtrOutput) Inputs() pulumi.ArrayOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataInvokeResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(pulumi.ArrayOutput)
}

// Markdown part settings.
func (o MarkdownPartMetadataInvokeResponsePtrOutput) Settings() MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataInvokeResponse) *MarkdownPartMetadataInvokeResponseSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(MarkdownPartMetadataInvokeResponseSettingsPtrOutput)
}

// The type of dashboard part.
// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
func (o MarkdownPartMetadataInvokeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The content of markdown part.
type MarkdownPartMetadataInvokeResponseContent struct {
	// The setting of the content of markdown part.
	Settings *MarkdownPartMetadataInvokeResponseSettings `pulumi:"settings"`
}

// MarkdownPartMetadataInvokeResponseContentInput is an input type that accepts MarkdownPartMetadataInvokeResponseContentArgs and MarkdownPartMetadataInvokeResponseContentOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataInvokeResponseContentInput` via:
//
//          MarkdownPartMetadataInvokeResponseContentArgs{...}
type MarkdownPartMetadataInvokeResponseContentInput interface {
	pulumi.Input

	ToMarkdownPartMetadataInvokeResponseContentOutput() MarkdownPartMetadataInvokeResponseContentOutput
	ToMarkdownPartMetadataInvokeResponseContentOutputWithContext(context.Context) MarkdownPartMetadataInvokeResponseContentOutput
}

// The content of markdown part.
type MarkdownPartMetadataInvokeResponseContentArgs struct {
	// The setting of the content of markdown part.
	Settings MarkdownPartMetadataInvokeResponseSettingsPtrInput `pulumi:"settings"`
}

func (MarkdownPartMetadataInvokeResponseContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataInvokeResponseContent)(nil)).Elem()
}

func (i MarkdownPartMetadataInvokeResponseContentArgs) ToMarkdownPartMetadataInvokeResponseContentOutput() MarkdownPartMetadataInvokeResponseContentOutput {
	return i.ToMarkdownPartMetadataInvokeResponseContentOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataInvokeResponseContentArgs) ToMarkdownPartMetadataInvokeResponseContentOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponseContentOutput)
}

func (i MarkdownPartMetadataInvokeResponseContentArgs) ToMarkdownPartMetadataInvokeResponseContentPtrOutput() MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return i.ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataInvokeResponseContentArgs) ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponseContentOutput).ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(ctx)
}

// MarkdownPartMetadataInvokeResponseContentPtrInput is an input type that accepts MarkdownPartMetadataInvokeResponseContentArgs, MarkdownPartMetadataInvokeResponseContentPtr and MarkdownPartMetadataInvokeResponseContentPtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataInvokeResponseContentPtrInput` via:
//
//          MarkdownPartMetadataInvokeResponseContentArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataInvokeResponseContentPtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataInvokeResponseContentPtrOutput() MarkdownPartMetadataInvokeResponseContentPtrOutput
	ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(context.Context) MarkdownPartMetadataInvokeResponseContentPtrOutput
}

type markdownPartMetadataInvokeResponseContentPtrType MarkdownPartMetadataInvokeResponseContentArgs

func MarkdownPartMetadataInvokeResponseContentPtr(v *MarkdownPartMetadataInvokeResponseContentArgs) MarkdownPartMetadataInvokeResponseContentPtrInput {
	return (*markdownPartMetadataInvokeResponseContentPtrType)(v)
}

func (*markdownPartMetadataInvokeResponseContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataInvokeResponseContent)(nil)).Elem()
}

func (i *markdownPartMetadataInvokeResponseContentPtrType) ToMarkdownPartMetadataInvokeResponseContentPtrOutput() MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return i.ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataInvokeResponseContentPtrType) ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponseContentPtrOutput)
}

// The content of markdown part.
type MarkdownPartMetadataInvokeResponseContentOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataInvokeResponseContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataInvokeResponseContent)(nil)).Elem()
}

func (o MarkdownPartMetadataInvokeResponseContentOutput) ToMarkdownPartMetadataInvokeResponseContentOutput() MarkdownPartMetadataInvokeResponseContentOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseContentOutput) ToMarkdownPartMetadataInvokeResponseContentOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseContentOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseContentOutput) ToMarkdownPartMetadataInvokeResponseContentPtrOutput() MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return o.ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataInvokeResponseContentOutput) ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataInvokeResponseContent) *MarkdownPartMetadataInvokeResponseContent {
		return &v
	}).(MarkdownPartMetadataInvokeResponseContentPtrOutput)
}

// The setting of the content of markdown part.
func (o MarkdownPartMetadataInvokeResponseContentOutput) Settings() MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataInvokeResponseContent) *MarkdownPartMetadataInvokeResponseSettings {
		return v.Settings
	}).(MarkdownPartMetadataInvokeResponseSettingsPtrOutput)
}

type MarkdownPartMetadataInvokeResponseContentPtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataInvokeResponseContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataInvokeResponseContent)(nil)).Elem()
}

func (o MarkdownPartMetadataInvokeResponseContentPtrOutput) ToMarkdownPartMetadataInvokeResponseContentPtrOutput() MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseContentPtrOutput) ToMarkdownPartMetadataInvokeResponseContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseContentPtrOutput) Elem() MarkdownPartMetadataInvokeResponseContentOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataInvokeResponseContent) MarkdownPartMetadataInvokeResponseContent {
		return *v
	}).(MarkdownPartMetadataInvokeResponseContentOutput)
}

// The setting of the content of markdown part.
func (o MarkdownPartMetadataInvokeResponseContentPtrOutput) Settings() MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataInvokeResponseContent) *MarkdownPartMetadataInvokeResponseSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(MarkdownPartMetadataInvokeResponseSettingsPtrOutput)
}

// Markdown part settings.
type MarkdownPartMetadataInvokeResponseSettings struct {
	// The content of markdown part.
	Content *MarkdownPartMetadataInvokeResponseContent `pulumi:"content"`
}

// MarkdownPartMetadataInvokeResponseSettingsInput is an input type that accepts MarkdownPartMetadataInvokeResponseSettingsArgs and MarkdownPartMetadataInvokeResponseSettingsOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataInvokeResponseSettingsInput` via:
//
//          MarkdownPartMetadataInvokeResponseSettingsArgs{...}
type MarkdownPartMetadataInvokeResponseSettingsInput interface {
	pulumi.Input

	ToMarkdownPartMetadataInvokeResponseSettingsOutput() MarkdownPartMetadataInvokeResponseSettingsOutput
	ToMarkdownPartMetadataInvokeResponseSettingsOutputWithContext(context.Context) MarkdownPartMetadataInvokeResponseSettingsOutput
}

// Markdown part settings.
type MarkdownPartMetadataInvokeResponseSettingsArgs struct {
	// The content of markdown part.
	Content MarkdownPartMetadataInvokeResponseContentPtrInput `pulumi:"content"`
}

func (MarkdownPartMetadataInvokeResponseSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataInvokeResponseSettings)(nil)).Elem()
}

func (i MarkdownPartMetadataInvokeResponseSettingsArgs) ToMarkdownPartMetadataInvokeResponseSettingsOutput() MarkdownPartMetadataInvokeResponseSettingsOutput {
	return i.ToMarkdownPartMetadataInvokeResponseSettingsOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataInvokeResponseSettingsArgs) ToMarkdownPartMetadataInvokeResponseSettingsOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponseSettingsOutput)
}

func (i MarkdownPartMetadataInvokeResponseSettingsArgs) ToMarkdownPartMetadataInvokeResponseSettingsPtrOutput() MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return i.ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataInvokeResponseSettingsArgs) ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponseSettingsOutput).ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(ctx)
}

// MarkdownPartMetadataInvokeResponseSettingsPtrInput is an input type that accepts MarkdownPartMetadataInvokeResponseSettingsArgs, MarkdownPartMetadataInvokeResponseSettingsPtr and MarkdownPartMetadataInvokeResponseSettingsPtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataInvokeResponseSettingsPtrInput` via:
//
//          MarkdownPartMetadataInvokeResponseSettingsArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataInvokeResponseSettingsPtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataInvokeResponseSettingsPtrOutput() MarkdownPartMetadataInvokeResponseSettingsPtrOutput
	ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(context.Context) MarkdownPartMetadataInvokeResponseSettingsPtrOutput
}

type markdownPartMetadataInvokeResponseSettingsPtrType MarkdownPartMetadataInvokeResponseSettingsArgs

func MarkdownPartMetadataInvokeResponseSettingsPtr(v *MarkdownPartMetadataInvokeResponseSettingsArgs) MarkdownPartMetadataInvokeResponseSettingsPtrInput {
	return (*markdownPartMetadataInvokeResponseSettingsPtrType)(v)
}

func (*markdownPartMetadataInvokeResponseSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataInvokeResponseSettings)(nil)).Elem()
}

func (i *markdownPartMetadataInvokeResponseSettingsPtrType) ToMarkdownPartMetadataInvokeResponseSettingsPtrOutput() MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return i.ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataInvokeResponseSettingsPtrType) ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataInvokeResponseSettingsPtrOutput)
}

// Markdown part settings.
type MarkdownPartMetadataInvokeResponseSettingsOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataInvokeResponseSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataInvokeResponseSettings)(nil)).Elem()
}

func (o MarkdownPartMetadataInvokeResponseSettingsOutput) ToMarkdownPartMetadataInvokeResponseSettingsOutput() MarkdownPartMetadataInvokeResponseSettingsOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseSettingsOutput) ToMarkdownPartMetadataInvokeResponseSettingsOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseSettingsOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseSettingsOutput) ToMarkdownPartMetadataInvokeResponseSettingsPtrOutput() MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return o.ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataInvokeResponseSettingsOutput) ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataInvokeResponseSettings) *MarkdownPartMetadataInvokeResponseSettings {
		return &v
	}).(MarkdownPartMetadataInvokeResponseSettingsPtrOutput)
}

// The content of markdown part.
func (o MarkdownPartMetadataInvokeResponseSettingsOutput) Content() MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataInvokeResponseSettings) *MarkdownPartMetadataInvokeResponseContent {
		return v.Content
	}).(MarkdownPartMetadataInvokeResponseContentPtrOutput)
}

type MarkdownPartMetadataInvokeResponseSettingsPtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataInvokeResponseSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataInvokeResponseSettings)(nil)).Elem()
}

func (o MarkdownPartMetadataInvokeResponseSettingsPtrOutput) ToMarkdownPartMetadataInvokeResponseSettingsPtrOutput() MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseSettingsPtrOutput) ToMarkdownPartMetadataInvokeResponseSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataInvokeResponseSettingsPtrOutput {
	return o
}

func (o MarkdownPartMetadataInvokeResponseSettingsPtrOutput) Elem() MarkdownPartMetadataInvokeResponseSettingsOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataInvokeResponseSettings) MarkdownPartMetadataInvokeResponseSettings {
		return *v
	}).(MarkdownPartMetadataInvokeResponseSettingsOutput)
}

// The content of markdown part.
func (o MarkdownPartMetadataInvokeResponseSettingsPtrOutput) Content() MarkdownPartMetadataInvokeResponseContentPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataInvokeResponseSettings) *MarkdownPartMetadataInvokeResponseContent {
		if v == nil {
			return nil
		}
		return v.Content
	}).(MarkdownPartMetadataInvokeResponseContentPtrOutput)
}

// Markdown part metadata.
type MarkdownPartMetadataResponse struct {
	// Input to dashboard part.
	Inputs []interface{} `pulumi:"inputs"`
	// Markdown part settings.
	Settings *MarkdownPartMetadataResponseSettings `pulumi:"settings"`
	// The type of dashboard part.
	// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
	Type string `pulumi:"type"`
}

// MarkdownPartMetadataResponseInput is an input type that accepts MarkdownPartMetadataResponseArgs and MarkdownPartMetadataResponseOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataResponseInput` via:
//
//          MarkdownPartMetadataResponseArgs{...}
type MarkdownPartMetadataResponseInput interface {
	pulumi.Input

	ToMarkdownPartMetadataResponseOutput() MarkdownPartMetadataResponseOutput
	ToMarkdownPartMetadataResponseOutputWithContext(context.Context) MarkdownPartMetadataResponseOutput
}

// Markdown part metadata.
type MarkdownPartMetadataResponseArgs struct {
	// Input to dashboard part.
	Inputs pulumi.ArrayInput `pulumi:"inputs"`
	// Markdown part settings.
	Settings MarkdownPartMetadataResponseSettingsPtrInput `pulumi:"settings"`
	// The type of dashboard part.
	// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MarkdownPartMetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataResponse)(nil)).Elem()
}

func (i MarkdownPartMetadataResponseArgs) ToMarkdownPartMetadataResponseOutput() MarkdownPartMetadataResponseOutput {
	return i.ToMarkdownPartMetadataResponseOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataResponseArgs) ToMarkdownPartMetadataResponseOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponseOutput)
}

func (i MarkdownPartMetadataResponseArgs) ToMarkdownPartMetadataResponsePtrOutput() MarkdownPartMetadataResponsePtrOutput {
	return i.ToMarkdownPartMetadataResponsePtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataResponseArgs) ToMarkdownPartMetadataResponsePtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponseOutput).ToMarkdownPartMetadataResponsePtrOutputWithContext(ctx)
}

// MarkdownPartMetadataResponsePtrInput is an input type that accepts MarkdownPartMetadataResponseArgs, MarkdownPartMetadataResponsePtr and MarkdownPartMetadataResponsePtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataResponsePtrInput` via:
//
//          MarkdownPartMetadataResponseArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataResponsePtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataResponsePtrOutput() MarkdownPartMetadataResponsePtrOutput
	ToMarkdownPartMetadataResponsePtrOutputWithContext(context.Context) MarkdownPartMetadataResponsePtrOutput
}

type markdownPartMetadataResponsePtrType MarkdownPartMetadataResponseArgs

func MarkdownPartMetadataResponsePtr(v *MarkdownPartMetadataResponseArgs) MarkdownPartMetadataResponsePtrInput {
	return (*markdownPartMetadataResponsePtrType)(v)
}

func (*markdownPartMetadataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataResponse)(nil)).Elem()
}

func (i *markdownPartMetadataResponsePtrType) ToMarkdownPartMetadataResponsePtrOutput() MarkdownPartMetadataResponsePtrOutput {
	return i.ToMarkdownPartMetadataResponsePtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataResponsePtrType) ToMarkdownPartMetadataResponsePtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponsePtrOutput)
}

// Markdown part metadata.
type MarkdownPartMetadataResponseOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataResponse)(nil)).Elem()
}

func (o MarkdownPartMetadataResponseOutput) ToMarkdownPartMetadataResponseOutput() MarkdownPartMetadataResponseOutput {
	return o
}

func (o MarkdownPartMetadataResponseOutput) ToMarkdownPartMetadataResponseOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseOutput {
	return o
}

func (o MarkdownPartMetadataResponseOutput) ToMarkdownPartMetadataResponsePtrOutput() MarkdownPartMetadataResponsePtrOutput {
	return o.ToMarkdownPartMetadataResponsePtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataResponseOutput) ToMarkdownPartMetadataResponsePtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponsePtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataResponse) *MarkdownPartMetadataResponse {
		return &v
	}).(MarkdownPartMetadataResponsePtrOutput)
}

// Input to dashboard part.
func (o MarkdownPartMetadataResponseOutput) Inputs() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarkdownPartMetadataResponse) []interface{} { return v.Inputs }).(pulumi.ArrayOutput)
}

// Markdown part settings.
func (o MarkdownPartMetadataResponseOutput) Settings() MarkdownPartMetadataResponseSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataResponse) *MarkdownPartMetadataResponseSettings { return v.Settings }).(MarkdownPartMetadataResponseSettingsPtrOutput)
}

// The type of dashboard part.
// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
func (o MarkdownPartMetadataResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarkdownPartMetadataResponse) string { return v.Type }).(pulumi.StringOutput)
}

type MarkdownPartMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataResponse)(nil)).Elem()
}

func (o MarkdownPartMetadataResponsePtrOutput) ToMarkdownPartMetadataResponsePtrOutput() MarkdownPartMetadataResponsePtrOutput {
	return o
}

func (o MarkdownPartMetadataResponsePtrOutput) ToMarkdownPartMetadataResponsePtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponsePtrOutput {
	return o
}

func (o MarkdownPartMetadataResponsePtrOutput) Elem() MarkdownPartMetadataResponseOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataResponse) MarkdownPartMetadataResponse { return *v }).(MarkdownPartMetadataResponseOutput)
}

// Input to dashboard part.
func (o MarkdownPartMetadataResponsePtrOutput) Inputs() pulumi.ArrayOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(pulumi.ArrayOutput)
}

// Markdown part settings.
func (o MarkdownPartMetadataResponsePtrOutput) Settings() MarkdownPartMetadataResponseSettingsPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataResponse) *MarkdownPartMetadataResponseSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(MarkdownPartMetadataResponseSettingsPtrOutput)
}

// The type of dashboard part.
// Expected value is 'Extension/HubsExtension/PartType/MarkdownPart'.
func (o MarkdownPartMetadataResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The content of markdown part.
type MarkdownPartMetadataResponseContent struct {
	// The setting of the content of markdown part.
	Settings *MarkdownPartMetadataResponseSettings `pulumi:"settings"`
}

// MarkdownPartMetadataResponseContentInput is an input type that accepts MarkdownPartMetadataResponseContentArgs and MarkdownPartMetadataResponseContentOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataResponseContentInput` via:
//
//          MarkdownPartMetadataResponseContentArgs{...}
type MarkdownPartMetadataResponseContentInput interface {
	pulumi.Input

	ToMarkdownPartMetadataResponseContentOutput() MarkdownPartMetadataResponseContentOutput
	ToMarkdownPartMetadataResponseContentOutputWithContext(context.Context) MarkdownPartMetadataResponseContentOutput
}

// The content of markdown part.
type MarkdownPartMetadataResponseContentArgs struct {
	// The setting of the content of markdown part.
	Settings MarkdownPartMetadataResponseSettingsPtrInput `pulumi:"settings"`
}

func (MarkdownPartMetadataResponseContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataResponseContent)(nil)).Elem()
}

func (i MarkdownPartMetadataResponseContentArgs) ToMarkdownPartMetadataResponseContentOutput() MarkdownPartMetadataResponseContentOutput {
	return i.ToMarkdownPartMetadataResponseContentOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataResponseContentArgs) ToMarkdownPartMetadataResponseContentOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponseContentOutput)
}

func (i MarkdownPartMetadataResponseContentArgs) ToMarkdownPartMetadataResponseContentPtrOutput() MarkdownPartMetadataResponseContentPtrOutput {
	return i.ToMarkdownPartMetadataResponseContentPtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataResponseContentArgs) ToMarkdownPartMetadataResponseContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponseContentOutput).ToMarkdownPartMetadataResponseContentPtrOutputWithContext(ctx)
}

// MarkdownPartMetadataResponseContentPtrInput is an input type that accepts MarkdownPartMetadataResponseContentArgs, MarkdownPartMetadataResponseContentPtr and MarkdownPartMetadataResponseContentPtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataResponseContentPtrInput` via:
//
//          MarkdownPartMetadataResponseContentArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataResponseContentPtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataResponseContentPtrOutput() MarkdownPartMetadataResponseContentPtrOutput
	ToMarkdownPartMetadataResponseContentPtrOutputWithContext(context.Context) MarkdownPartMetadataResponseContentPtrOutput
}

type markdownPartMetadataResponseContentPtrType MarkdownPartMetadataResponseContentArgs

func MarkdownPartMetadataResponseContentPtr(v *MarkdownPartMetadataResponseContentArgs) MarkdownPartMetadataResponseContentPtrInput {
	return (*markdownPartMetadataResponseContentPtrType)(v)
}

func (*markdownPartMetadataResponseContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataResponseContent)(nil)).Elem()
}

func (i *markdownPartMetadataResponseContentPtrType) ToMarkdownPartMetadataResponseContentPtrOutput() MarkdownPartMetadataResponseContentPtrOutput {
	return i.ToMarkdownPartMetadataResponseContentPtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataResponseContentPtrType) ToMarkdownPartMetadataResponseContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponseContentPtrOutput)
}

// The content of markdown part.
type MarkdownPartMetadataResponseContentOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataResponseContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataResponseContent)(nil)).Elem()
}

func (o MarkdownPartMetadataResponseContentOutput) ToMarkdownPartMetadataResponseContentOutput() MarkdownPartMetadataResponseContentOutput {
	return o
}

func (o MarkdownPartMetadataResponseContentOutput) ToMarkdownPartMetadataResponseContentOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseContentOutput {
	return o
}

func (o MarkdownPartMetadataResponseContentOutput) ToMarkdownPartMetadataResponseContentPtrOutput() MarkdownPartMetadataResponseContentPtrOutput {
	return o.ToMarkdownPartMetadataResponseContentPtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataResponseContentOutput) ToMarkdownPartMetadataResponseContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseContentPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataResponseContent) *MarkdownPartMetadataResponseContent {
		return &v
	}).(MarkdownPartMetadataResponseContentPtrOutput)
}

// The setting of the content of markdown part.
func (o MarkdownPartMetadataResponseContentOutput) Settings() MarkdownPartMetadataResponseSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataResponseContent) *MarkdownPartMetadataResponseSettings { return v.Settings }).(MarkdownPartMetadataResponseSettingsPtrOutput)
}

type MarkdownPartMetadataResponseContentPtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataResponseContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataResponseContent)(nil)).Elem()
}

func (o MarkdownPartMetadataResponseContentPtrOutput) ToMarkdownPartMetadataResponseContentPtrOutput() MarkdownPartMetadataResponseContentPtrOutput {
	return o
}

func (o MarkdownPartMetadataResponseContentPtrOutput) ToMarkdownPartMetadataResponseContentPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseContentPtrOutput {
	return o
}

func (o MarkdownPartMetadataResponseContentPtrOutput) Elem() MarkdownPartMetadataResponseContentOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataResponseContent) MarkdownPartMetadataResponseContent { return *v }).(MarkdownPartMetadataResponseContentOutput)
}

// The setting of the content of markdown part.
func (o MarkdownPartMetadataResponseContentPtrOutput) Settings() MarkdownPartMetadataResponseSettingsPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataResponseContent) *MarkdownPartMetadataResponseSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(MarkdownPartMetadataResponseSettingsPtrOutput)
}

// Markdown part settings.
type MarkdownPartMetadataResponseSettings struct {
	// The content of markdown part.
	Content *MarkdownPartMetadataResponseContent `pulumi:"content"`
}

// MarkdownPartMetadataResponseSettingsInput is an input type that accepts MarkdownPartMetadataResponseSettingsArgs and MarkdownPartMetadataResponseSettingsOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataResponseSettingsInput` via:
//
//          MarkdownPartMetadataResponseSettingsArgs{...}
type MarkdownPartMetadataResponseSettingsInput interface {
	pulumi.Input

	ToMarkdownPartMetadataResponseSettingsOutput() MarkdownPartMetadataResponseSettingsOutput
	ToMarkdownPartMetadataResponseSettingsOutputWithContext(context.Context) MarkdownPartMetadataResponseSettingsOutput
}

// Markdown part settings.
type MarkdownPartMetadataResponseSettingsArgs struct {
	// The content of markdown part.
	Content MarkdownPartMetadataResponseContentPtrInput `pulumi:"content"`
}

func (MarkdownPartMetadataResponseSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataResponseSettings)(nil)).Elem()
}

func (i MarkdownPartMetadataResponseSettingsArgs) ToMarkdownPartMetadataResponseSettingsOutput() MarkdownPartMetadataResponseSettingsOutput {
	return i.ToMarkdownPartMetadataResponseSettingsOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataResponseSettingsArgs) ToMarkdownPartMetadataResponseSettingsOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponseSettingsOutput)
}

func (i MarkdownPartMetadataResponseSettingsArgs) ToMarkdownPartMetadataResponseSettingsPtrOutput() MarkdownPartMetadataResponseSettingsPtrOutput {
	return i.ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataResponseSettingsArgs) ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponseSettingsOutput).ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(ctx)
}

// MarkdownPartMetadataResponseSettingsPtrInput is an input type that accepts MarkdownPartMetadataResponseSettingsArgs, MarkdownPartMetadataResponseSettingsPtr and MarkdownPartMetadataResponseSettingsPtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataResponseSettingsPtrInput` via:
//
//          MarkdownPartMetadataResponseSettingsArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataResponseSettingsPtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataResponseSettingsPtrOutput() MarkdownPartMetadataResponseSettingsPtrOutput
	ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(context.Context) MarkdownPartMetadataResponseSettingsPtrOutput
}

type markdownPartMetadataResponseSettingsPtrType MarkdownPartMetadataResponseSettingsArgs

func MarkdownPartMetadataResponseSettingsPtr(v *MarkdownPartMetadataResponseSettingsArgs) MarkdownPartMetadataResponseSettingsPtrInput {
	return (*markdownPartMetadataResponseSettingsPtrType)(v)
}

func (*markdownPartMetadataResponseSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataResponseSettings)(nil)).Elem()
}

func (i *markdownPartMetadataResponseSettingsPtrType) ToMarkdownPartMetadataResponseSettingsPtrOutput() MarkdownPartMetadataResponseSettingsPtrOutput {
	return i.ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataResponseSettingsPtrType) ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataResponseSettingsPtrOutput)
}

// Markdown part settings.
type MarkdownPartMetadataResponseSettingsOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataResponseSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataResponseSettings)(nil)).Elem()
}

func (o MarkdownPartMetadataResponseSettingsOutput) ToMarkdownPartMetadataResponseSettingsOutput() MarkdownPartMetadataResponseSettingsOutput {
	return o
}

func (o MarkdownPartMetadataResponseSettingsOutput) ToMarkdownPartMetadataResponseSettingsOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseSettingsOutput {
	return o
}

func (o MarkdownPartMetadataResponseSettingsOutput) ToMarkdownPartMetadataResponseSettingsPtrOutput() MarkdownPartMetadataResponseSettingsPtrOutput {
	return o.ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataResponseSettingsOutput) ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataResponseSettings) *MarkdownPartMetadataResponseSettings {
		return &v
	}).(MarkdownPartMetadataResponseSettingsPtrOutput)
}

// The content of markdown part.
func (o MarkdownPartMetadataResponseSettingsOutput) Content() MarkdownPartMetadataResponseContentPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataResponseSettings) *MarkdownPartMetadataResponseContent { return v.Content }).(MarkdownPartMetadataResponseContentPtrOutput)
}

type MarkdownPartMetadataResponseSettingsPtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataResponseSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataResponseSettings)(nil)).Elem()
}

func (o MarkdownPartMetadataResponseSettingsPtrOutput) ToMarkdownPartMetadataResponseSettingsPtrOutput() MarkdownPartMetadataResponseSettingsPtrOutput {
	return o
}

func (o MarkdownPartMetadataResponseSettingsPtrOutput) ToMarkdownPartMetadataResponseSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataResponseSettingsPtrOutput {
	return o
}

func (o MarkdownPartMetadataResponseSettingsPtrOutput) Elem() MarkdownPartMetadataResponseSettingsOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataResponseSettings) MarkdownPartMetadataResponseSettings { return *v }).(MarkdownPartMetadataResponseSettingsOutput)
}

// The content of markdown part.
func (o MarkdownPartMetadataResponseSettingsPtrOutput) Content() MarkdownPartMetadataResponseContentPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataResponseSettings) *MarkdownPartMetadataResponseContent {
		if v == nil {
			return nil
		}
		return v.Content
	}).(MarkdownPartMetadataResponseContentPtrOutput)
}

// Markdown part settings.
type MarkdownPartMetadataSettings struct {
	// The content of markdown part.
	Content *MarkdownPartMetadataContent `pulumi:"content"`
}

// MarkdownPartMetadataSettingsInput is an input type that accepts MarkdownPartMetadataSettingsArgs and MarkdownPartMetadataSettingsOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataSettingsInput` via:
//
//          MarkdownPartMetadataSettingsArgs{...}
type MarkdownPartMetadataSettingsInput interface {
	pulumi.Input

	ToMarkdownPartMetadataSettingsOutput() MarkdownPartMetadataSettingsOutput
	ToMarkdownPartMetadataSettingsOutputWithContext(context.Context) MarkdownPartMetadataSettingsOutput
}

// Markdown part settings.
type MarkdownPartMetadataSettingsArgs struct {
	// The content of markdown part.
	Content MarkdownPartMetadataContentPtrInput `pulumi:"content"`
}

func (MarkdownPartMetadataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataSettings)(nil)).Elem()
}

func (i MarkdownPartMetadataSettingsArgs) ToMarkdownPartMetadataSettingsOutput() MarkdownPartMetadataSettingsOutput {
	return i.ToMarkdownPartMetadataSettingsOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataSettingsArgs) ToMarkdownPartMetadataSettingsOutputWithContext(ctx context.Context) MarkdownPartMetadataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataSettingsOutput)
}

func (i MarkdownPartMetadataSettingsArgs) ToMarkdownPartMetadataSettingsPtrOutput() MarkdownPartMetadataSettingsPtrOutput {
	return i.ToMarkdownPartMetadataSettingsPtrOutputWithContext(context.Background())
}

func (i MarkdownPartMetadataSettingsArgs) ToMarkdownPartMetadataSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataSettingsOutput).ToMarkdownPartMetadataSettingsPtrOutputWithContext(ctx)
}

// MarkdownPartMetadataSettingsPtrInput is an input type that accepts MarkdownPartMetadataSettingsArgs, MarkdownPartMetadataSettingsPtr and MarkdownPartMetadataSettingsPtrOutput values.
// You can construct a concrete instance of `MarkdownPartMetadataSettingsPtrInput` via:
//
//          MarkdownPartMetadataSettingsArgs{...}
//
//  or:
//
//          nil
type MarkdownPartMetadataSettingsPtrInput interface {
	pulumi.Input

	ToMarkdownPartMetadataSettingsPtrOutput() MarkdownPartMetadataSettingsPtrOutput
	ToMarkdownPartMetadataSettingsPtrOutputWithContext(context.Context) MarkdownPartMetadataSettingsPtrOutput
}

type markdownPartMetadataSettingsPtrType MarkdownPartMetadataSettingsArgs

func MarkdownPartMetadataSettingsPtr(v *MarkdownPartMetadataSettingsArgs) MarkdownPartMetadataSettingsPtrInput {
	return (*markdownPartMetadataSettingsPtrType)(v)
}

func (*markdownPartMetadataSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataSettings)(nil)).Elem()
}

func (i *markdownPartMetadataSettingsPtrType) ToMarkdownPartMetadataSettingsPtrOutput() MarkdownPartMetadataSettingsPtrOutput {
	return i.ToMarkdownPartMetadataSettingsPtrOutputWithContext(context.Background())
}

func (i *markdownPartMetadataSettingsPtrType) ToMarkdownPartMetadataSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkdownPartMetadataSettingsPtrOutput)
}

// Markdown part settings.
type MarkdownPartMetadataSettingsOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarkdownPartMetadataSettings)(nil)).Elem()
}

func (o MarkdownPartMetadataSettingsOutput) ToMarkdownPartMetadataSettingsOutput() MarkdownPartMetadataSettingsOutput {
	return o
}

func (o MarkdownPartMetadataSettingsOutput) ToMarkdownPartMetadataSettingsOutputWithContext(ctx context.Context) MarkdownPartMetadataSettingsOutput {
	return o
}

func (o MarkdownPartMetadataSettingsOutput) ToMarkdownPartMetadataSettingsPtrOutput() MarkdownPartMetadataSettingsPtrOutput {
	return o.ToMarkdownPartMetadataSettingsPtrOutputWithContext(context.Background())
}

func (o MarkdownPartMetadataSettingsOutput) ToMarkdownPartMetadataSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataSettingsPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataSettings) *MarkdownPartMetadataSettings {
		return &v
	}).(MarkdownPartMetadataSettingsPtrOutput)
}

// The content of markdown part.
func (o MarkdownPartMetadataSettingsOutput) Content() MarkdownPartMetadataContentPtrOutput {
	return o.ApplyT(func(v MarkdownPartMetadataSettings) *MarkdownPartMetadataContent { return v.Content }).(MarkdownPartMetadataContentPtrOutput)
}

type MarkdownPartMetadataSettingsPtrOutput struct{ *pulumi.OutputState }

func (MarkdownPartMetadataSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkdownPartMetadataSettings)(nil)).Elem()
}

func (o MarkdownPartMetadataSettingsPtrOutput) ToMarkdownPartMetadataSettingsPtrOutput() MarkdownPartMetadataSettingsPtrOutput {
	return o
}

func (o MarkdownPartMetadataSettingsPtrOutput) ToMarkdownPartMetadataSettingsPtrOutputWithContext(ctx context.Context) MarkdownPartMetadataSettingsPtrOutput {
	return o
}

func (o MarkdownPartMetadataSettingsPtrOutput) Elem() MarkdownPartMetadataSettingsOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataSettings) MarkdownPartMetadataSettings { return *v }).(MarkdownPartMetadataSettingsOutput)
}

// The content of markdown part.
func (o MarkdownPartMetadataSettingsPtrOutput) Content() MarkdownPartMetadataContentPtrOutput {
	return o.ApplyT(func(v *MarkdownPartMetadataSettings) *MarkdownPartMetadataContent {
		if v == nil {
			return nil
		}
		return v.Content
	}).(MarkdownPartMetadataContentPtrOutput)
}

// Violation information.
type ViolationInvokeResponse struct {
	// Error message.
	ErrorMessage string `pulumi:"errorMessage"`
	// Id of the item that violates tenant configuration.
	Id string `pulumi:"id"`
	// Id of the user who owns violated item.
	UserId string `pulumi:"userId"`
}

// ViolationInvokeResponseInput is an input type that accepts ViolationInvokeResponseArgs and ViolationInvokeResponseOutput values.
// You can construct a concrete instance of `ViolationInvokeResponseInput` via:
//
//          ViolationInvokeResponseArgs{...}
type ViolationInvokeResponseInput interface {
	pulumi.Input

	ToViolationInvokeResponseOutput() ViolationInvokeResponseOutput
	ToViolationInvokeResponseOutputWithContext(context.Context) ViolationInvokeResponseOutput
}

// Violation information.
type ViolationInvokeResponseArgs struct {
	// Error message.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// Id of the item that violates tenant configuration.
	Id pulumi.StringInput `pulumi:"id"`
	// Id of the user who owns violated item.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (ViolationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViolationInvokeResponse)(nil)).Elem()
}

func (i ViolationInvokeResponseArgs) ToViolationInvokeResponseOutput() ViolationInvokeResponseOutput {
	return i.ToViolationInvokeResponseOutputWithContext(context.Background())
}

func (i ViolationInvokeResponseArgs) ToViolationInvokeResponseOutputWithContext(ctx context.Context) ViolationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViolationInvokeResponseOutput)
}

// ViolationInvokeResponseArrayInput is an input type that accepts ViolationInvokeResponseArray and ViolationInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ViolationInvokeResponseArrayInput` via:
//
//          ViolationInvokeResponseArray{ ViolationInvokeResponseArgs{...} }
type ViolationInvokeResponseArrayInput interface {
	pulumi.Input

	ToViolationInvokeResponseArrayOutput() ViolationInvokeResponseArrayOutput
	ToViolationInvokeResponseArrayOutputWithContext(context.Context) ViolationInvokeResponseArrayOutput
}

type ViolationInvokeResponseArray []ViolationInvokeResponseInput

func (ViolationInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViolationInvokeResponse)(nil)).Elem()
}

func (i ViolationInvokeResponseArray) ToViolationInvokeResponseArrayOutput() ViolationInvokeResponseArrayOutput {
	return i.ToViolationInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ViolationInvokeResponseArray) ToViolationInvokeResponseArrayOutputWithContext(ctx context.Context) ViolationInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViolationInvokeResponseArrayOutput)
}

// Violation information.
type ViolationInvokeResponseOutput struct{ *pulumi.OutputState }

func (ViolationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViolationInvokeResponse)(nil)).Elem()
}

func (o ViolationInvokeResponseOutput) ToViolationInvokeResponseOutput() ViolationInvokeResponseOutput {
	return o
}

func (o ViolationInvokeResponseOutput) ToViolationInvokeResponseOutputWithContext(ctx context.Context) ViolationInvokeResponseOutput {
	return o
}

// Error message.
func (o ViolationInvokeResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ViolationInvokeResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Id of the item that violates tenant configuration.
func (o ViolationInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ViolationInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Id of the user who owns violated item.
func (o ViolationInvokeResponseOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v ViolationInvokeResponse) string { return v.UserId }).(pulumi.StringOutput)
}

type ViolationInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ViolationInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViolationInvokeResponse)(nil)).Elem()
}

func (o ViolationInvokeResponseArrayOutput) ToViolationInvokeResponseArrayOutput() ViolationInvokeResponseArrayOutput {
	return o
}

func (o ViolationInvokeResponseArrayOutput) ToViolationInvokeResponseArrayOutputWithContext(ctx context.Context) ViolationInvokeResponseArrayOutput {
	return o
}

func (o ViolationInvokeResponseArrayOutput) Index(i pulumi.IntInput) ViolationInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ViolationInvokeResponse {
		return vs[0].([]ViolationInvokeResponse)[vs[1].(int)]
	}).(ViolationInvokeResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(DashboardLensOutput{})
	pulumi.RegisterOutputType(DashboardLensArrayOutput{})
	pulumi.RegisterOutputType(DashboardLensInvokeResponseOutput{})
	pulumi.RegisterOutputType(DashboardLensInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(DashboardLensResponseOutput{})
	pulumi.RegisterOutputType(DashboardLensResponseArrayOutput{})
	pulumi.RegisterOutputType(DashboardPartsOutput{})
	pulumi.RegisterOutputType(DashboardPartsArrayOutput{})
	pulumi.RegisterOutputType(DashboardPartsInvokeResponseOutput{})
	pulumi.RegisterOutputType(DashboardPartsInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(DashboardPartsInvokeResponsePositionOutput{})
	pulumi.RegisterOutputType(DashboardPartsPositionOutput{})
	pulumi.RegisterOutputType(DashboardPartsResponseOutput{})
	pulumi.RegisterOutputType(DashboardPartsResponseArrayOutput{})
	pulumi.RegisterOutputType(DashboardPartsResponsePositionOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataPtrOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataContentOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataContentPtrOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataInvokeResponseOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataInvokeResponseContentOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataInvokeResponseContentPtrOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataInvokeResponseSettingsOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataInvokeResponseSettingsPtrOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataResponseOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataResponseContentOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataResponseContentPtrOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataResponseSettingsOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataResponseSettingsPtrOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataSettingsOutput{})
	pulumi.RegisterOutputType(MarkdownPartMetadataSettingsPtrOutput{})
	pulumi.RegisterOutputType(ViolationInvokeResponseOutput{})
	pulumi.RegisterOutputType(ViolationInvokeResponseArrayOutput{})
}
