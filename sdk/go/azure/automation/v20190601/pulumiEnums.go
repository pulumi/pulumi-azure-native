// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets or sets the content source type.
type ContentSourceType string

const (
	ContentSourceTypeEmbeddedContent = ContentSourceType("embeddedContent")
	ContentSourceTypeUri             = ContentSourceType("uri")
)

// Update classifications included in the software update configuration.
type LinuxUpdateClasses string

const (
	LinuxUpdateClassesUnclassified = LinuxUpdateClasses("Unclassified")
	LinuxUpdateClassesCritical     = LinuxUpdateClasses("Critical")
	LinuxUpdateClassesSecurity     = LinuxUpdateClasses("Security")
	LinuxUpdateClassesOther        = LinuxUpdateClasses("Other")
)

// operating system of target machines
type OperatingSystemType string

const (
	OperatingSystemTypeWindows = OperatingSystemType("Windows")
	OperatingSystemTypeLinux   = OperatingSystemType("Linux")
)

func (OperatingSystemType) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemType)(nil)).Elem()
}

func (e OperatingSystemType) ToOperatingSystemTypeOutput() OperatingSystemTypeOutput {
	return pulumi.ToOutput(e).(OperatingSystemTypeOutput)
}

func (e OperatingSystemType) ToOperatingSystemTypeOutputWithContext(ctx context.Context) OperatingSystemTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatingSystemTypeOutput)
}

func (e OperatingSystemType) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return e.ToOperatingSystemTypePtrOutputWithContext(context.Background())
}

func (e OperatingSystemType) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return OperatingSystemType(e).ToOperatingSystemTypeOutputWithContext(ctx).ToOperatingSystemTypePtrOutputWithContext(ctx)
}

func (e OperatingSystemType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatingSystemType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatingSystemTypeOutput struct{ *pulumi.OutputState }

func (OperatingSystemTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemType)(nil)).Elem()
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypeOutput() OperatingSystemTypeOutput {
	return o
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypeOutputWithContext(ctx context.Context) OperatingSystemTypeOutput {
	return o
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return o.ToOperatingSystemTypePtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatingSystemType) *OperatingSystemType {
		return &v
	}).(OperatingSystemTypePtrOutput)
}

func (o OperatingSystemTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatingSystemTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatingSystemTypePtrOutput struct{ *pulumi.OutputState }

func (OperatingSystemTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatingSystemType)(nil)).Elem()
}

func (o OperatingSystemTypePtrOutput) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return o
}

func (o OperatingSystemTypePtrOutput) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return o
}

func (o OperatingSystemTypePtrOutput) Elem() OperatingSystemTypeOutput {
	return o.ApplyT(func(v *OperatingSystemType) OperatingSystemType {
		if v != nil {
			return *v
		}
		var ret OperatingSystemType
		return ret
	}).(OperatingSystemTypeOutput)
}

func (o OperatingSystemTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatingSystemType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatingSystemTypeInput is an input type that accepts OperatingSystemTypeArgs and OperatingSystemTypeOutput values.
// You can construct a concrete instance of `OperatingSystemTypeInput` via:
//
//	OperatingSystemTypeArgs{...}
type OperatingSystemTypeInput interface {
	pulumi.Input

	ToOperatingSystemTypeOutput() OperatingSystemTypeOutput
	ToOperatingSystemTypeOutputWithContext(context.Context) OperatingSystemTypeOutput
}

var operatingSystemTypePtrType = reflect.TypeOf((**OperatingSystemType)(nil)).Elem()

type OperatingSystemTypePtrInput interface {
	pulumi.Input

	ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput
	ToOperatingSystemTypePtrOutputWithContext(context.Context) OperatingSystemTypePtrOutput
}

type operatingSystemTypePtr string

func OperatingSystemTypePtr(v string) OperatingSystemTypePtrInput {
	return (*operatingSystemTypePtr)(&v)
}

func (*operatingSystemTypePtr) ElementType() reflect.Type {
	return operatingSystemTypePtrType
}

func (in *operatingSystemTypePtr) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return pulumi.ToOutput(in).(OperatingSystemTypePtrOutput)
}

func (in *operatingSystemTypePtr) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatingSystemTypePtrOutput)
}

// Gets or sets the type of the runbook.
type RunbookTypeEnum string

const (
	RunbookTypeEnumScript                  = RunbookTypeEnum("Script")
	RunbookTypeEnumGraph                   = RunbookTypeEnum("Graph")
	RunbookTypeEnumPowerShellWorkflow      = RunbookTypeEnum("PowerShellWorkflow")
	RunbookTypeEnumPowerShell              = RunbookTypeEnum("PowerShell")
	RunbookTypeEnumGraphPowerShellWorkflow = RunbookTypeEnum("GraphPowerShellWorkflow")
	RunbookTypeEnumGraphPowerShell         = RunbookTypeEnum("GraphPowerShell")
	RunbookTypeEnumPython2                 = RunbookTypeEnum("Python2")
	RunbookTypeEnumPython3                 = RunbookTypeEnum("Python3")
)

// Day of the occurrence. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
type ScheduleDay string

const (
	ScheduleDayMonday    = ScheduleDay("Monday")
	ScheduleDayTuesday   = ScheduleDay("Tuesday")
	ScheduleDayWednesday = ScheduleDay("Wednesday")
	ScheduleDayThursday  = ScheduleDay("Thursday")
	ScheduleDayFriday    = ScheduleDay("Friday")
	ScheduleDaySaturday  = ScheduleDay("Saturday")
	ScheduleDaySunday    = ScheduleDay("Sunday")
)

// Gets or sets the frequency of the schedule.
type ScheduleFrequency string

const (
	ScheduleFrequencyOneTime = ScheduleFrequency("OneTime")
	ScheduleFrequencyDay     = ScheduleFrequency("Day")
	ScheduleFrequencyHour    = ScheduleFrequency("Hour")
	ScheduleFrequencyWeek    = ScheduleFrequency("Week")
	ScheduleFrequencyMonth   = ScheduleFrequency("Month")
	// The minimum allowed interval for Minute schedules is 15 minutes.
	ScheduleFrequencyMinute = ScheduleFrequency("Minute")
)

// Gets or sets the SKU name of the account.
type SkuNameEnum string

const (
	SkuNameEnumFree  = SkuNameEnum("Free")
	SkuNameEnumBasic = SkuNameEnum("Basic")
)

// The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
type SourceType string

const (
	SourceTypeVsoGit  = SourceType("VsoGit")
	SourceTypeVsoTfvc = SourceType("VsoTfvc")
	SourceTypeGitHub  = SourceType("GitHub")
)

// Filter VMs by Any or All specified tags.
type TagOperators string

const (
	TagOperatorsAll = TagOperators("All")
	TagOperatorsAny = TagOperators("Any")
)

func (TagOperators) ElementType() reflect.Type {
	return reflect.TypeOf((*TagOperators)(nil)).Elem()
}

func (e TagOperators) ToTagOperatorsOutput() TagOperatorsOutput {
	return pulumi.ToOutput(e).(TagOperatorsOutput)
}

func (e TagOperators) ToTagOperatorsOutputWithContext(ctx context.Context) TagOperatorsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TagOperatorsOutput)
}

func (e TagOperators) ToTagOperatorsPtrOutput() TagOperatorsPtrOutput {
	return e.ToTagOperatorsPtrOutputWithContext(context.Background())
}

func (e TagOperators) ToTagOperatorsPtrOutputWithContext(ctx context.Context) TagOperatorsPtrOutput {
	return TagOperators(e).ToTagOperatorsOutputWithContext(ctx).ToTagOperatorsPtrOutputWithContext(ctx)
}

func (e TagOperators) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TagOperators) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TagOperators) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TagOperators) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TagOperatorsOutput struct{ *pulumi.OutputState }

func (TagOperatorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagOperators)(nil)).Elem()
}

func (o TagOperatorsOutput) ToTagOperatorsOutput() TagOperatorsOutput {
	return o
}

func (o TagOperatorsOutput) ToTagOperatorsOutputWithContext(ctx context.Context) TagOperatorsOutput {
	return o
}

func (o TagOperatorsOutput) ToTagOperatorsPtrOutput() TagOperatorsPtrOutput {
	return o.ToTagOperatorsPtrOutputWithContext(context.Background())
}

func (o TagOperatorsOutput) ToTagOperatorsPtrOutputWithContext(ctx context.Context) TagOperatorsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagOperators) *TagOperators {
		return &v
	}).(TagOperatorsPtrOutput)
}

func (o TagOperatorsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TagOperatorsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TagOperators) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TagOperatorsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TagOperatorsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TagOperators) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TagOperatorsPtrOutput struct{ *pulumi.OutputState }

func (TagOperatorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagOperators)(nil)).Elem()
}

func (o TagOperatorsPtrOutput) ToTagOperatorsPtrOutput() TagOperatorsPtrOutput {
	return o
}

func (o TagOperatorsPtrOutput) ToTagOperatorsPtrOutputWithContext(ctx context.Context) TagOperatorsPtrOutput {
	return o
}

func (o TagOperatorsPtrOutput) Elem() TagOperatorsOutput {
	return o.ApplyT(func(v *TagOperators) TagOperators {
		if v != nil {
			return *v
		}
		var ret TagOperators
		return ret
	}).(TagOperatorsOutput)
}

func (o TagOperatorsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TagOperatorsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TagOperators) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TagOperatorsInput is an input type that accepts TagOperatorsArgs and TagOperatorsOutput values.
// You can construct a concrete instance of `TagOperatorsInput` via:
//
//	TagOperatorsArgs{...}
type TagOperatorsInput interface {
	pulumi.Input

	ToTagOperatorsOutput() TagOperatorsOutput
	ToTagOperatorsOutputWithContext(context.Context) TagOperatorsOutput
}

var tagOperatorsPtrType = reflect.TypeOf((**TagOperators)(nil)).Elem()

type TagOperatorsPtrInput interface {
	pulumi.Input

	ToTagOperatorsPtrOutput() TagOperatorsPtrOutput
	ToTagOperatorsPtrOutputWithContext(context.Context) TagOperatorsPtrOutput
}

type tagOperatorsPtr string

func TagOperatorsPtr(v string) TagOperatorsPtrInput {
	return (*tagOperatorsPtr)(&v)
}

func (*tagOperatorsPtr) ElementType() reflect.Type {
	return tagOperatorsPtrType
}

func (in *tagOperatorsPtr) ToTagOperatorsPtrOutput() TagOperatorsPtrOutput {
	return pulumi.ToOutput(in).(TagOperatorsPtrOutput)
}

func (in *tagOperatorsPtr) ToTagOperatorsPtrOutputWithContext(ctx context.Context) TagOperatorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TagOperatorsPtrOutput)
}

// The token type. Must be either PersonalAccessToken or Oauth.
type TokenType string

const (
	TokenTypePersonalAccessToken = TokenType("PersonalAccessToken")
	TokenTypeOauth               = TokenType("Oauth")
)

// Update classification included in the software update configuration. A comma separated string with required values
type WindowsUpdateClasses string

const (
	WindowsUpdateClassesUnclassified = WindowsUpdateClasses("Unclassified")
	WindowsUpdateClassesCritical     = WindowsUpdateClasses("Critical")
	WindowsUpdateClassesSecurity     = WindowsUpdateClasses("Security")
	WindowsUpdateClassesUpdateRollup = WindowsUpdateClasses("UpdateRollup")
	WindowsUpdateClassesFeaturePack  = WindowsUpdateClasses("FeaturePack")
	WindowsUpdateClassesServicePack  = WindowsUpdateClasses("ServicePack")
	WindowsUpdateClassesDefinition   = WindowsUpdateClasses("Definition")
	WindowsUpdateClassesTools        = WindowsUpdateClasses("Tools")
	WindowsUpdateClassesUpdates      = WindowsUpdateClasses("Updates")
)

func init() {
	pulumi.RegisterOutputType(OperatingSystemTypeOutput{})
	pulumi.RegisterOutputType(OperatingSystemTypePtrOutput{})
	pulumi.RegisterOutputType(TagOperatorsOutput{})
	pulumi.RegisterOutputType(TagOperatorsPtrOutput{})
}
