// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201005privatepreview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a server group for create.
type ServerGroup struct {
	pulumi.CustomResourceState

	// The administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
	AdministratorLogin pulumi.StringPtrOutput `pulumi:"administratorLogin"`
	// Availability Zone information of the server group.
	AvailabilityZone pulumi.StringPtrOutput `pulumi:"availabilityZone"`
	// The backup retention days for server group.
	BackupRetentionDays pulumi.IntPtrOutput `pulumi:"backupRetentionDays"`
	// The Citus version of server group.
	CitusVersion pulumi.StringPtrOutput `pulumi:"citusVersion"`
	// The delegated subnet arguments for a server group.
	DelegatedSubnetArguments ServerGroupPropertiesResponseDelegatedSubnetArgumentsPtrOutput `pulumi:"delegatedSubnetArguments"`
	// The earliest restore point time (ISO8601 format) for server group.
	EarliestRestoreTime pulumi.StringOutput `pulumi:"earliestRestoreTime"`
	// If Citus MX is enabled or not for the server group.
	EnableMx pulumi.BoolPtrOutput `pulumi:"enableMx"`
	// If shards on coordinator is enabled or not for the server group.
	EnableShardsOnCoordinator pulumi.BoolPtrOutput `pulumi:"enableShardsOnCoordinator"`
	// If ZFS compression is enabled or not for the server group.
	EnableZfs pulumi.BoolPtrOutput `pulumi:"enableZfs"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Maintenance window of a server group.
	MaintenanceWindow MaintenanceWindowResponsePtrOutput `pulumi:"maintenanceWindow"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The PostgreSQL version of server group.
	PostgresqlVersion pulumi.StringPtrOutput `pulumi:"postgresqlVersion"`
	// The private dns zone arguments for a server group.
	PrivateDnsZoneArguments ServerGroupPropertiesResponsePrivateDnsZoneArgumentsPtrOutput `pulumi:"privateDnsZoneArguments"`
	// The array of read replica server groups.
	ReadReplicas pulumi.StringArrayOutput `pulumi:"readReplicas"`
	// The resource provider type of server group.
	ResourceProviderType pulumi.StringOutput `pulumi:"resourceProviderType"`
	// The list of server role groups.
	ServerRoleGroups ServerRoleGroupResponseArrayOutput `pulumi:"serverRoleGroups"`
	// The source server group id for read replica server groups.
	SourceServerGroup pulumi.StringOutput `pulumi:"sourceServerGroup"`
	// Standby Availability Zone information of the server group.
	StandbyAvailabilityZone pulumi.StringPtrOutput `pulumi:"standbyAvailabilityZone"`
	// A state of a server group that is visible to user.
	State pulumi.StringOutput `pulumi:"state"`
	// The system metadata relating to this resource
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServerGroup registers a new resource with the given unique name, arguments, and options.
func NewServerGroup(ctx *pulumi.Context,
	name string, args *ServerGroupArgs, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource ServerGroup
	err := ctx.RegisterResource("azure-native:dbforpostgresql/v20201005privatepreview:ServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroup gets an existing ServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupState, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	var resource ServerGroup
	err := ctx.ReadResource("azure-native:dbforpostgresql/v20201005privatepreview:ServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroup resources.
type serverGroupState struct {
}

type ServerGroupState struct {
}

func (ServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupState)(nil)).Elem()
}

type serverGroupArgs struct {
	// The administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The password of the administrator login.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// Availability Zone information of the server group.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The backup retention days for server group.
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// The Citus version of server group.
	CitusVersion *string `pulumi:"citusVersion"`
	// The mode to create a new server group.
	CreateMode *string `pulumi:"createMode"`
	// The delegated subnet arguments for a server group.
	DelegatedSubnetArguments *ServerGroupPropertiesDelegatedSubnetArguments `pulumi:"delegatedSubnetArguments"`
	// If Citus MX is enabled or not for the server group.
	EnableMx *bool `pulumi:"enableMx"`
	// If shards on coordinator is enabled or not for the server group.
	EnableShardsOnCoordinator *bool `pulumi:"enableShardsOnCoordinator"`
	// If ZFS compression is enabled or not for the server group.
	EnableZfs *bool `pulumi:"enableZfs"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Maintenance window of a server group.
	MaintenanceWindow *MaintenanceWindow `pulumi:"maintenanceWindow"`
	// Restore point creation time (ISO8601 format), specifying the time to restore from. It's required when 'createMode' is 'PointInTimeRestore'
	PointInTimeUTC *string `pulumi:"pointInTimeUTC"`
	// The PostgreSQL version of server group.
	PostgresqlVersion *string `pulumi:"postgresqlVersion"`
	// The private dns zone arguments for a server group.
	PrivateDnsZoneArguments *ServerGroupPropertiesPrivateDnsZoneArguments `pulumi:"privateDnsZoneArguments"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server group.
	ServerGroupName *string `pulumi:"serverGroupName"`
	// The list of server role groups.
	ServerRoleGroups []ServerRoleGroup `pulumi:"serverRoleGroups"`
	// The source server group location to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceLocation *string `pulumi:"sourceLocation"`
	// The source resource group name to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceResourceGroupName *string `pulumi:"sourceResourceGroupName"`
	// The source server group name to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceServerGroupName *string `pulumi:"sourceServerGroupName"`
	// The source subscription id to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceSubscriptionId *string `pulumi:"sourceSubscriptionId"`
	// Standby Availability Zone information of the server group.
	StandbyAvailabilityZone *string `pulumi:"standbyAvailabilityZone"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ServerGroup resource.
type ServerGroupArgs struct {
	// The administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
	AdministratorLogin pulumi.StringPtrInput
	// The password of the administrator login.
	AdministratorLoginPassword pulumi.StringPtrInput
	// Availability Zone information of the server group.
	AvailabilityZone pulumi.StringPtrInput
	// The backup retention days for server group.
	BackupRetentionDays pulumi.IntPtrInput
	// The Citus version of server group.
	CitusVersion pulumi.StringPtrInput
	// The mode to create a new server group.
	CreateMode pulumi.StringPtrInput
	// The delegated subnet arguments for a server group.
	DelegatedSubnetArguments ServerGroupPropertiesDelegatedSubnetArgumentsPtrInput
	// If Citus MX is enabled or not for the server group.
	EnableMx pulumi.BoolPtrInput
	// If shards on coordinator is enabled or not for the server group.
	EnableShardsOnCoordinator pulumi.BoolPtrInput
	// If ZFS compression is enabled or not for the server group.
	EnableZfs pulumi.BoolPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Maintenance window of a server group.
	MaintenanceWindow MaintenanceWindowPtrInput
	// Restore point creation time (ISO8601 format), specifying the time to restore from. It's required when 'createMode' is 'PointInTimeRestore'
	PointInTimeUTC pulumi.StringPtrInput
	// The PostgreSQL version of server group.
	PostgresqlVersion pulumi.StringPtrInput
	// The private dns zone arguments for a server group.
	PrivateDnsZoneArguments ServerGroupPropertiesPrivateDnsZoneArgumentsPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the server group.
	ServerGroupName pulumi.StringPtrInput
	// The list of server role groups.
	ServerRoleGroups ServerRoleGroupArrayInput
	// The source server group location to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceLocation pulumi.StringPtrInput
	// The source resource group name to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceResourceGroupName pulumi.StringPtrInput
	// The source server group name to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceServerGroupName pulumi.StringPtrInput
	// The source subscription id to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceSubscriptionId pulumi.StringPtrInput
	// Standby Availability Zone information of the server group.
	StandbyAvailabilityZone pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupArgs)(nil)).Elem()
}

type ServerGroupInput interface {
	pulumi.Input

	ToServerGroupOutput() ServerGroupOutput
	ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput
}

func (*ServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (i *ServerGroup) ToServerGroupOutput() ServerGroupOutput {
	return i.ToServerGroupOutputWithContext(context.Background())
}

func (i *ServerGroup) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupOutput)
}

type ServerGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (o ServerGroupOutput) ToServerGroupOutput() ServerGroupOutput {
	return o
}

func (o ServerGroupOutput) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return o
}

// The administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
func (o ServerGroupOutput) AdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.AdministratorLogin }).(pulumi.StringPtrOutput)
}

// Availability Zone information of the server group.
func (o ServerGroupOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The backup retention days for server group.
func (o ServerGroupOutput) BackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.IntPtrOutput { return v.BackupRetentionDays }).(pulumi.IntPtrOutput)
}

// The Citus version of server group.
func (o ServerGroupOutput) CitusVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.CitusVersion }).(pulumi.StringPtrOutput)
}

// The delegated subnet arguments for a server group.
func (o ServerGroupOutput) DelegatedSubnetArguments() ServerGroupPropertiesResponseDelegatedSubnetArgumentsPtrOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupPropertiesResponseDelegatedSubnetArgumentsPtrOutput {
		return v.DelegatedSubnetArguments
	}).(ServerGroupPropertiesResponseDelegatedSubnetArgumentsPtrOutput)
}

// The earliest restore point time (ISO8601 format) for server group.
func (o ServerGroupOutput) EarliestRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.EarliestRestoreTime }).(pulumi.StringOutput)
}

// If Citus MX is enabled or not for the server group.
func (o ServerGroupOutput) EnableMx() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolPtrOutput { return v.EnableMx }).(pulumi.BoolPtrOutput)
}

// If shards on coordinator is enabled or not for the server group.
func (o ServerGroupOutput) EnableShardsOnCoordinator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolPtrOutput { return v.EnableShardsOnCoordinator }).(pulumi.BoolPtrOutput)
}

// If ZFS compression is enabled or not for the server group.
func (o ServerGroupOutput) EnableZfs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolPtrOutput { return v.EnableZfs }).(pulumi.BoolPtrOutput)
}

// The geo-location where the resource lives
func (o ServerGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maintenance window of a server group.
func (o ServerGroupOutput) MaintenanceWindow() MaintenanceWindowResponsePtrOutput {
	return o.ApplyT(func(v *ServerGroup) MaintenanceWindowResponsePtrOutput { return v.MaintenanceWindow }).(MaintenanceWindowResponsePtrOutput)
}

// The name of the resource
func (o ServerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The PostgreSQL version of server group.
func (o ServerGroupOutput) PostgresqlVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.PostgresqlVersion }).(pulumi.StringPtrOutput)
}

// The private dns zone arguments for a server group.
func (o ServerGroupOutput) PrivateDnsZoneArguments() ServerGroupPropertiesResponsePrivateDnsZoneArgumentsPtrOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupPropertiesResponsePrivateDnsZoneArgumentsPtrOutput {
		return v.PrivateDnsZoneArguments
	}).(ServerGroupPropertiesResponsePrivateDnsZoneArgumentsPtrOutput)
}

// The array of read replica server groups.
func (o ServerGroupOutput) ReadReplicas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringArrayOutput { return v.ReadReplicas }).(pulumi.StringArrayOutput)
}

// The resource provider type of server group.
func (o ServerGroupOutput) ResourceProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ResourceProviderType }).(pulumi.StringOutput)
}

// The list of server role groups.
func (o ServerGroupOutput) ServerRoleGroups() ServerRoleGroupResponseArrayOutput {
	return o.ApplyT(func(v *ServerGroup) ServerRoleGroupResponseArrayOutput { return v.ServerRoleGroups }).(ServerRoleGroupResponseArrayOutput)
}

// The source server group id for read replica server groups.
func (o ServerGroupOutput) SourceServerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.SourceServerGroup }).(pulumi.StringOutput)
}

// Standby Availability Zone information of the server group.
func (o ServerGroupOutput) StandbyAvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.StandbyAvailabilityZone }).(pulumi.StringPtrOutput)
}

// A state of a server group that is visible to user.
func (o ServerGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The system metadata relating to this resource
func (o ServerGroupOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ServerGroup) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o ServerGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ServerGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerGroupOutput{})
}
