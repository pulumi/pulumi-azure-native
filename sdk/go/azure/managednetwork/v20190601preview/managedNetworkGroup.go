// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Managed Network Group resource
type ManagedNetworkGroup struct {
	pulumi.CustomResourceState

	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Responsibility role under which this Managed Network Group will be created
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The geo-location where the resource lives
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The collection of management groups covered by the Managed Network
	ManagementGroups ResourceIdResponseArrayOutput `pulumi:"managementGroups"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the ManagedNetwork resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The collection of  subnets covered by the Managed Network
	Subnets ResourceIdResponseArrayOutput `pulumi:"subnets"`
	// The collection of subscriptions covered by the Managed Network
	Subscriptions ResourceIdResponseArrayOutput `pulumi:"subscriptions"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
	// The collection of virtual nets covered by the Managed Network
	VirtualNetworks ResourceIdResponseArrayOutput `pulumi:"virtualNetworks"`
}

// NewManagedNetworkGroup registers a new resource with the given unique name, arguments, and options.
func NewManagedNetworkGroup(ctx *pulumi.Context,
	name string, args *ManagedNetworkGroupArgs, opts ...pulumi.ResourceOption) (*ManagedNetworkGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedNetworkName == nil {
		return nil, errors.New("invalid value for required argument 'ManagedNetworkName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:managednetwork:ManagedNetworkGroup"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagedNetworkGroup
	err := ctx.RegisterResource("azure-native:managednetwork/v20190601preview:ManagedNetworkGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedNetworkGroup gets an existing ManagedNetworkGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedNetworkGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedNetworkGroupState, opts ...pulumi.ResourceOption) (*ManagedNetworkGroup, error) {
	var resource ManagedNetworkGroup
	err := ctx.ReadResource("azure-native:managednetwork/v20190601preview:ManagedNetworkGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedNetworkGroup resources.
type managedNetworkGroupState struct {
}

type ManagedNetworkGroupState struct {
}

func (ManagedNetworkGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedNetworkGroupState)(nil)).Elem()
}

type managedNetworkGroupArgs struct {
	// Responsibility role under which this Managed Network Group will be created
	Kind *string `pulumi:"kind"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the Managed Network Group.
	ManagedNetworkGroupName *string `pulumi:"managedNetworkGroupName"`
	// The name of the Managed Network.
	ManagedNetworkName string `pulumi:"managedNetworkName"`
	// The collection of management groups covered by the Managed Network
	ManagementGroups []ResourceId `pulumi:"managementGroups"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The collection of  subnets covered by the Managed Network
	Subnets []ResourceId `pulumi:"subnets"`
	// The collection of subscriptions covered by the Managed Network
	Subscriptions []ResourceId `pulumi:"subscriptions"`
	// The collection of virtual nets covered by the Managed Network
	VirtualNetworks []ResourceId `pulumi:"virtualNetworks"`
}

// The set of arguments for constructing a ManagedNetworkGroup resource.
type ManagedNetworkGroupArgs struct {
	// Responsibility role under which this Managed Network Group will be created
	Kind pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the Managed Network Group.
	ManagedNetworkGroupName pulumi.StringPtrInput
	// The name of the Managed Network.
	ManagedNetworkName pulumi.StringInput
	// The collection of management groups covered by the Managed Network
	ManagementGroups ResourceIdArrayInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The collection of  subnets covered by the Managed Network
	Subnets ResourceIdArrayInput
	// The collection of subscriptions covered by the Managed Network
	Subscriptions ResourceIdArrayInput
	// The collection of virtual nets covered by the Managed Network
	VirtualNetworks ResourceIdArrayInput
}

func (ManagedNetworkGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedNetworkGroupArgs)(nil)).Elem()
}

type ManagedNetworkGroupInput interface {
	pulumi.Input

	ToManagedNetworkGroupOutput() ManagedNetworkGroupOutput
	ToManagedNetworkGroupOutputWithContext(ctx context.Context) ManagedNetworkGroupOutput
}

func (*ManagedNetworkGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNetworkGroup)(nil)).Elem()
}

func (i *ManagedNetworkGroup) ToManagedNetworkGroupOutput() ManagedNetworkGroupOutput {
	return i.ToManagedNetworkGroupOutputWithContext(context.Background())
}

func (i *ManagedNetworkGroup) ToManagedNetworkGroupOutputWithContext(ctx context.Context) ManagedNetworkGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedNetworkGroupOutput)
}

type ManagedNetworkGroupOutput struct{ *pulumi.OutputState }

func (ManagedNetworkGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNetworkGroup)(nil)).Elem()
}

func (o ManagedNetworkGroupOutput) ToManagedNetworkGroupOutput() ManagedNetworkGroupOutput {
	return o
}

func (o ManagedNetworkGroupOutput) ToManagedNetworkGroupOutputWithContext(ctx context.Context) ManagedNetworkGroupOutput {
	return o
}

// A unique read-only string that changes whenever the resource is updated.
func (o ManagedNetworkGroupOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Responsibility role under which this Managed Network Group will be created
func (o ManagedNetworkGroupOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o ManagedNetworkGroupOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The collection of management groups covered by the Managed Network
func (o ManagedNetworkGroupOutput) ManagementGroups() ResourceIdResponseArrayOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) ResourceIdResponseArrayOutput { return v.ManagementGroups }).(ResourceIdResponseArrayOutput)
}

// The name of the resource
func (o ManagedNetworkGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the ManagedNetwork resource.
func (o ManagedNetworkGroupOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The collection of  subnets covered by the Managed Network
func (o ManagedNetworkGroupOutput) Subnets() ResourceIdResponseArrayOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) ResourceIdResponseArrayOutput { return v.Subnets }).(ResourceIdResponseArrayOutput)
}

// The collection of subscriptions covered by the Managed Network
func (o ManagedNetworkGroupOutput) Subscriptions() ResourceIdResponseArrayOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) ResourceIdResponseArrayOutput { return v.Subscriptions }).(ResourceIdResponseArrayOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o ManagedNetworkGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The collection of virtual nets covered by the Managed Network
func (o ManagedNetworkGroupOutput) VirtualNetworks() ResourceIdResponseArrayOutput {
	return o.ApplyT(func(v *ManagedNetworkGroup) ResourceIdResponseArrayOutput { return v.VirtualNetworks }).(ResourceIdResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedNetworkGroupOutput{})
}
