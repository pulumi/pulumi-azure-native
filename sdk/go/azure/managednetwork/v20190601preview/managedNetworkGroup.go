// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The Managed Network Group resource
type ManagedNetworkGroup struct {
	pulumi.CustomResourceState

	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Responsibility role under which this Managed Network Group will be created
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The geo-location where the resource lives
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The collection of management groups covered by the Managed Network
	ManagementGroups ResourceIdResponseArrayOutput `pulumi:"managementGroups"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the ManagedNetwork resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The collection of  subnets covered by the Managed Network
	Subnets ResourceIdResponseArrayOutput `pulumi:"subnets"`
	// The collection of subscriptions covered by the Managed Network
	Subscriptions ResourceIdResponseArrayOutput `pulumi:"subscriptions"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
	// The collection of virtual nets covered by the Managed Network
	VirtualNetworks ResourceIdResponseArrayOutput `pulumi:"virtualNetworks"`
}

// NewManagedNetworkGroup registers a new resource with the given unique name, arguments, and options.
func NewManagedNetworkGroup(ctx *pulumi.Context,
	name string, args *ManagedNetworkGroupArgs, opts ...pulumi.ResourceOption) (*ManagedNetworkGroup, error) {
	if args == nil || args.ManagedNetworkGroupName == nil {
		return nil, errors.New("missing required argument 'ManagedNetworkGroupName'")
	}
	if args == nil || args.ManagedNetworkName == nil {
		return nil, errors.New("missing required argument 'ManagedNetworkName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ManagedNetworkGroupArgs{}
	}
	var resource ManagedNetworkGroup
	err := ctx.RegisterResource("azure-nextgen:managednetwork/v20190601preview:ManagedNetworkGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedNetworkGroup gets an existing ManagedNetworkGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedNetworkGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedNetworkGroupState, opts ...pulumi.ResourceOption) (*ManagedNetworkGroup, error) {
	var resource ManagedNetworkGroup
	err := ctx.ReadResource("azure-nextgen:managednetwork/v20190601preview:ManagedNetworkGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedNetworkGroup resources.
type managedNetworkGroupState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// Responsibility role under which this Managed Network Group will be created
	Kind *string `pulumi:"kind"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The collection of management groups covered by the Managed Network
	ManagementGroups []ResourceIdResponse `pulumi:"managementGroups"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// Provisioning state of the ManagedNetwork resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The collection of  subnets covered by the Managed Network
	Subnets []ResourceIdResponse `pulumi:"subnets"`
	// The collection of subscriptions covered by the Managed Network
	Subscriptions []ResourceIdResponse `pulumi:"subscriptions"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `pulumi:"type"`
	// The collection of virtual nets covered by the Managed Network
	VirtualNetworks []ResourceIdResponse `pulumi:"virtualNetworks"`
}

type ManagedNetworkGroupState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// Responsibility role under which this Managed Network Group will be created
	Kind pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The collection of management groups covered by the Managed Network
	ManagementGroups ResourceIdResponseArrayInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// Provisioning state of the ManagedNetwork resource.
	ProvisioningState pulumi.StringPtrInput
	// The collection of  subnets covered by the Managed Network
	Subnets ResourceIdResponseArrayInput
	// The collection of subscriptions covered by the Managed Network
	Subscriptions ResourceIdResponseArrayInput
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringPtrInput
	// The collection of virtual nets covered by the Managed Network
	VirtualNetworks ResourceIdResponseArrayInput
}

func (ManagedNetworkGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedNetworkGroupState)(nil)).Elem()
}

type managedNetworkGroupArgs struct {
	// Responsibility role under which this Managed Network Group will be created
	Kind *string `pulumi:"kind"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the Managed Network Group.
	ManagedNetworkGroupName string `pulumi:"managedNetworkGroupName"`
	// The name of the Managed Network.
	ManagedNetworkName string `pulumi:"managedNetworkName"`
	// The collection of management groups covered by the Managed Network
	ManagementGroups []ResourceId `pulumi:"managementGroups"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The collection of  subnets covered by the Managed Network
	Subnets []ResourceId `pulumi:"subnets"`
	// The collection of subscriptions covered by the Managed Network
	Subscriptions []ResourceId `pulumi:"subscriptions"`
	// The collection of virtual nets covered by the Managed Network
	VirtualNetworks []ResourceId `pulumi:"virtualNetworks"`
}

// The set of arguments for constructing a ManagedNetworkGroup resource.
type ManagedNetworkGroupArgs struct {
	// Responsibility role under which this Managed Network Group will be created
	Kind pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the Managed Network Group.
	ManagedNetworkGroupName pulumi.StringInput
	// The name of the Managed Network.
	ManagedNetworkName pulumi.StringInput
	// The collection of management groups covered by the Managed Network
	ManagementGroups ResourceIdArrayInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The collection of  subnets covered by the Managed Network
	Subnets ResourceIdArrayInput
	// The collection of subscriptions covered by the Managed Network
	Subscriptions ResourceIdArrayInput
	// The collection of virtual nets covered by the Managed Network
	VirtualNetworks ResourceIdArrayInput
}

func (ManagedNetworkGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedNetworkGroupArgs)(nil)).Elem()
}
