// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The Managed Network resource
type ScopeAssignment struct {
	pulumi.CustomResourceState

	// The managed network ID with scope will be assigned to.
	AssignedManagedNetwork pulumi.StringPtrOutput `pulumi:"assignedManagedNetwork"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The geo-location where the resource lives
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the ManagedNetwork resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewScopeAssignment registers a new resource with the given unique name, arguments, and options.
func NewScopeAssignment(ctx *pulumi.Context,
	name string, args *ScopeAssignmentArgs, opts ...pulumi.ResourceOption) (*ScopeAssignment, error) {
	if args == nil || args.Scope == nil {
		return nil, errors.New("missing required argument 'Scope'")
	}
	if args == nil || args.ScopeAssignmentName == nil {
		return nil, errors.New("missing required argument 'ScopeAssignmentName'")
	}
	if args == nil {
		args = &ScopeAssignmentArgs{}
	}
	var resource ScopeAssignment
	err := ctx.RegisterResource("azure-nextgen:managednetwork/v20190601preview:ScopeAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopeAssignment gets an existing ScopeAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopeAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeAssignmentState, opts ...pulumi.ResourceOption) (*ScopeAssignment, error) {
	var resource ScopeAssignment
	err := ctx.ReadResource("azure-nextgen:managednetwork/v20190601preview:ScopeAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopeAssignment resources.
type scopeAssignmentState struct {
	// The managed network ID with scope will be assigned to.
	AssignedManagedNetwork *string `pulumi:"assignedManagedNetwork"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// Provisioning state of the ManagedNetwork resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `pulumi:"type"`
}

type ScopeAssignmentState struct {
	// The managed network ID with scope will be assigned to.
	AssignedManagedNetwork pulumi.StringPtrInput
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// Provisioning state of the ManagedNetwork resource.
	ProvisioningState pulumi.StringPtrInput
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringPtrInput
}

func (ScopeAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeAssignmentState)(nil)).Elem()
}

type scopeAssignmentArgs struct {
	// The managed network ID with scope will be assigned to.
	AssignedManagedNetwork *string `pulumi:"assignedManagedNetwork"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The base resource of the scope assignment to create. The scope can be any REST resource instance. For example, use 'subscriptions/{subscription-id}' for a subscription, 'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and 'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
	Scope string `pulumi:"scope"`
	// The name of the scope assignment to create.
	ScopeAssignmentName string `pulumi:"scopeAssignmentName"`
}

// The set of arguments for constructing a ScopeAssignment resource.
type ScopeAssignmentArgs struct {
	// The managed network ID with scope will be assigned to.
	AssignedManagedNetwork pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The base resource of the scope assignment to create. The scope can be any REST resource instance. For example, use 'subscriptions/{subscription-id}' for a subscription, 'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and 'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
	Scope pulumi.StringInput
	// The name of the scope assignment to create.
	ScopeAssignmentName pulumi.StringInput
}

func (ScopeAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeAssignmentArgs)(nil)).Elem()
}
