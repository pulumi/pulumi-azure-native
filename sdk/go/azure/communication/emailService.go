// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package communication

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A class representing an EmailService resource.
// API Version: 2021-10-01-preview.
type EmailService struct {
	pulumi.CustomResourceState

	// The location where the email service stores its data at rest.
	DataLocation pulumi.StringOutput `pulumi:"dataLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEmailService registers a new resource with the given unique name, arguments, and options.
func NewEmailService(ctx *pulumi.Context,
	name string, args *EmailServiceArgs, opts ...pulumi.ResourceOption) (*EmailService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataLocation == nil {
		return nil, errors.New("invalid value for required argument 'DataLocation'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:communication/v20211001preview:EmailService"),
		},
		{
			Type: pulumi.String("azure-native:communication/v20220701preview:EmailService"),
		},
	})
	opts = append(opts, aliases)
	var resource EmailService
	err := ctx.RegisterResource("azure-native:communication:EmailService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailService gets an existing EmailService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailServiceState, opts ...pulumi.ResourceOption) (*EmailService, error) {
	var resource EmailService
	err := ctx.ReadResource("azure-native:communication:EmailService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailService resources.
type emailServiceState struct {
}

type EmailServiceState struct {
}

func (EmailServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailServiceState)(nil)).Elem()
}

type emailServiceArgs struct {
	// The location where the email service stores its data at rest.
	DataLocation string `pulumi:"dataLocation"`
	// The name of the EmailService resource.
	EmailServiceName *string `pulumi:"emailServiceName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EmailService resource.
type EmailServiceArgs struct {
	// The location where the email service stores its data at rest.
	DataLocation pulumi.StringInput
	// The name of the EmailService resource.
	EmailServiceName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (EmailServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailServiceArgs)(nil)).Elem()
}

type EmailServiceInput interface {
	pulumi.Input

	ToEmailServiceOutput() EmailServiceOutput
	ToEmailServiceOutputWithContext(ctx context.Context) EmailServiceOutput
}

func (*EmailService) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailService)(nil)).Elem()
}

func (i *EmailService) ToEmailServiceOutput() EmailServiceOutput {
	return i.ToEmailServiceOutputWithContext(context.Background())
}

func (i *EmailService) ToEmailServiceOutputWithContext(ctx context.Context) EmailServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailServiceOutput)
}

type EmailServiceOutput struct{ *pulumi.OutputState }

func (EmailServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailService)(nil)).Elem()
}

func (o EmailServiceOutput) ToEmailServiceOutput() EmailServiceOutput {
	return o
}

func (o EmailServiceOutput) ToEmailServiceOutputWithContext(ctx context.Context) EmailServiceOutput {
	return o
}

// The location where the email service stores its data at rest.
func (o EmailServiceOutput) DataLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailService) pulumi.StringOutput { return v.DataLocation }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o EmailServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o EmailServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o EmailServiceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailService) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EmailServiceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *EmailService) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o EmailServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EmailService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EmailServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailService) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EmailServiceOutput{})
}
