// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190701

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Application struct {
	pulumi.CustomResourceState

	ApplicationDefinitionId pulumi.StringPtrOutput                            `pulumi:"applicationDefinitionId"`
	Artifacts               ApplicationArtifactResponseArrayOutput            `pulumi:"artifacts"`
	Authorizations          ApplicationAuthorizationResponseArrayOutput       `pulumi:"authorizations"`
	BillingDetails          ApplicationBillingDetailsDefinitionResponseOutput `pulumi:"billingDetails"`
	CreatedBy               ApplicationClientDetailsResponseOutput            `pulumi:"createdBy"`
	CustomerSupport         ApplicationPackageContactResponseOutput           `pulumi:"customerSupport"`
	Identity                IdentityResponsePtrOutput                         `pulumi:"identity"`
	JitAccessPolicy         ApplicationJitAccessPolicyResponsePtrOutput       `pulumi:"jitAccessPolicy"`
	Kind                    pulumi.StringOutput                               `pulumi:"kind"`
	Location                pulumi.StringPtrOutput                            `pulumi:"location"`
	ManagedBy               pulumi.StringPtrOutput                            `pulumi:"managedBy"`
	ManagedResourceGroupId  pulumi.StringPtrOutput                            `pulumi:"managedResourceGroupId"`
	ManagementMode          pulumi.StringOutput                               `pulumi:"managementMode"`
	Name                    pulumi.StringOutput                               `pulumi:"name"`
	Outputs                 pulumi.AnyOutput                                  `pulumi:"outputs"`
	Parameters              pulumi.AnyOutput                                  `pulumi:"parameters"`
	Plan                    PlanResponsePtrOutput                             `pulumi:"plan"`
	ProvisioningState       pulumi.StringOutput                               `pulumi:"provisioningState"`
	PublisherTenantId       pulumi.StringOutput                               `pulumi:"publisherTenantId"`
	Sku                     SkuResponsePtrOutput                              `pulumi:"sku"`
	SupportUrls             ApplicationPackageSupportUrlsResponseOutput       `pulumi:"supportUrls"`
	Tags                    pulumi.StringMapOutput                            `pulumi:"tags"`
	Type                    pulumi.StringOutput                               `pulumi:"type"`
	UpdatedBy               ApplicationClientDetailsResponseOutput            `pulumi:"updatedBy"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:solutions/v20190701:Application"),
		},
		{
			Type: pulumi.String("azure-native:solutions:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:solutions:Application"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20160901preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:solutions/v20160901preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20170901:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:solutions/v20170901:Application"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20180601:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:solutions/v20180601:Application"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20200821preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:solutions/v20200821preview:Application"),
		},
	})
	opts = append(opts, aliases)
	var resource Application
	err := ctx.RegisterResource("azure-native:solutions/v20190701:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("azure-native:solutions/v20190701:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	ApplicationDefinitionId *string                     `pulumi:"applicationDefinitionId"`
	ApplicationName         *string                     `pulumi:"applicationName"`
	Identity                *Identity                   `pulumi:"identity"`
	JitAccessPolicy         *ApplicationJitAccessPolicy `pulumi:"jitAccessPolicy"`
	Kind                    string                      `pulumi:"kind"`
	Location                *string                     `pulumi:"location"`
	ManagedBy               *string                     `pulumi:"managedBy"`
	ManagedResourceGroupId  *string                     `pulumi:"managedResourceGroupId"`
	Parameters              interface{}                 `pulumi:"parameters"`
	Plan                    *Plan                       `pulumi:"plan"`
	ResourceGroupName       string                      `pulumi:"resourceGroupName"`
	Sku                     *Sku                        `pulumi:"sku"`
	Tags                    map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	ApplicationDefinitionId pulumi.StringPtrInput
	ApplicationName         pulumi.StringPtrInput
	Identity                IdentityPtrInput
	JitAccessPolicy         ApplicationJitAccessPolicyPtrInput
	Kind                    pulumi.StringInput
	Location                pulumi.StringPtrInput
	ManagedBy               pulumi.StringPtrInput
	ManagedResourceGroupId  pulumi.StringPtrInput
	Parameters              pulumi.Input
	Plan                    PlanPtrInput
	ResourceGroupName       pulumi.StringInput
	Sku                     SkuPtrInput
	Tags                    pulumi.StringMapInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApplicationOutput{})
}
