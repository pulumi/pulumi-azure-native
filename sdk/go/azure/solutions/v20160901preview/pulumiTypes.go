// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20160901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Appliance artifact.
type ApplianceArtifact struct {
	// The appliance artifact name.
	Name *string `pulumi:"name"`
	// The appliance artifact type.
	Type *ApplianceArtifactType `pulumi:"type"`
	// The appliance artifact blob uri.
	Uri *string `pulumi:"uri"`
}

// ApplianceArtifactInput is an input type that accepts ApplianceArtifactArgs and ApplianceArtifactOutput values.
// You can construct a concrete instance of `ApplianceArtifactInput` via:
//
//	ApplianceArtifactArgs{...}
type ApplianceArtifactInput interface {
	pulumi.Input

	ToApplianceArtifactOutput() ApplianceArtifactOutput
	ToApplianceArtifactOutputWithContext(context.Context) ApplianceArtifactOutput
}

// Appliance artifact.
type ApplianceArtifactArgs struct {
	// The appliance artifact name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The appliance artifact type.
	Type ApplianceArtifactTypePtrInput `pulumi:"type"`
	// The appliance artifact blob uri.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ApplianceArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceArtifact)(nil)).Elem()
}

func (i ApplianceArtifactArgs) ToApplianceArtifactOutput() ApplianceArtifactOutput {
	return i.ToApplianceArtifactOutputWithContext(context.Background())
}

func (i ApplianceArtifactArgs) ToApplianceArtifactOutputWithContext(ctx context.Context) ApplianceArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceArtifactOutput)
}

// ApplianceArtifactArrayInput is an input type that accepts ApplianceArtifactArray and ApplianceArtifactArrayOutput values.
// You can construct a concrete instance of `ApplianceArtifactArrayInput` via:
//
//	ApplianceArtifactArray{ ApplianceArtifactArgs{...} }
type ApplianceArtifactArrayInput interface {
	pulumi.Input

	ToApplianceArtifactArrayOutput() ApplianceArtifactArrayOutput
	ToApplianceArtifactArrayOutputWithContext(context.Context) ApplianceArtifactArrayOutput
}

type ApplianceArtifactArray []ApplianceArtifactInput

func (ApplianceArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplianceArtifact)(nil)).Elem()
}

func (i ApplianceArtifactArray) ToApplianceArtifactArrayOutput() ApplianceArtifactArrayOutput {
	return i.ToApplianceArtifactArrayOutputWithContext(context.Background())
}

func (i ApplianceArtifactArray) ToApplianceArtifactArrayOutputWithContext(ctx context.Context) ApplianceArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceArtifactArrayOutput)
}

// Appliance artifact.
type ApplianceArtifactOutput struct{ *pulumi.OutputState }

func (ApplianceArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceArtifact)(nil)).Elem()
}

func (o ApplianceArtifactOutput) ToApplianceArtifactOutput() ApplianceArtifactOutput {
	return o
}

func (o ApplianceArtifactOutput) ToApplianceArtifactOutputWithContext(ctx context.Context) ApplianceArtifactOutput {
	return o
}

// The appliance artifact name.
func (o ApplianceArtifactOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplianceArtifact) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The appliance artifact type.
func (o ApplianceArtifactOutput) Type() ApplianceArtifactTypePtrOutput {
	return o.ApplyT(func(v ApplianceArtifact) *ApplianceArtifactType { return v.Type }).(ApplianceArtifactTypePtrOutput)
}

// The appliance artifact blob uri.
func (o ApplianceArtifactOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplianceArtifact) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ApplianceArtifactArrayOutput struct{ *pulumi.OutputState }

func (ApplianceArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplianceArtifact)(nil)).Elem()
}

func (o ApplianceArtifactArrayOutput) ToApplianceArtifactArrayOutput() ApplianceArtifactArrayOutput {
	return o
}

func (o ApplianceArtifactArrayOutput) ToApplianceArtifactArrayOutputWithContext(ctx context.Context) ApplianceArtifactArrayOutput {
	return o
}

func (o ApplianceArtifactArrayOutput) Index(i pulumi.IntInput) ApplianceArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplianceArtifact {
		return vs[0].([]ApplianceArtifact)[vs[1].(int)]
	}).(ApplianceArtifactOutput)
}

// Appliance artifact.
type ApplianceArtifactResponse struct {
	// The appliance artifact name.
	Name *string `pulumi:"name"`
	// The appliance artifact type.
	Type *string `pulumi:"type"`
	// The appliance artifact blob uri.
	Uri *string `pulumi:"uri"`
}

// Appliance artifact.
type ApplianceArtifactResponseOutput struct{ *pulumi.OutputState }

func (ApplianceArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceArtifactResponse)(nil)).Elem()
}

func (o ApplianceArtifactResponseOutput) ToApplianceArtifactResponseOutput() ApplianceArtifactResponseOutput {
	return o
}

func (o ApplianceArtifactResponseOutput) ToApplianceArtifactResponseOutputWithContext(ctx context.Context) ApplianceArtifactResponseOutput {
	return o
}

// The appliance artifact name.
func (o ApplianceArtifactResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplianceArtifactResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The appliance artifact type.
func (o ApplianceArtifactResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplianceArtifactResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The appliance artifact blob uri.
func (o ApplianceArtifactResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplianceArtifactResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ApplianceArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplianceArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplianceArtifactResponse)(nil)).Elem()
}

func (o ApplianceArtifactResponseArrayOutput) ToApplianceArtifactResponseArrayOutput() ApplianceArtifactResponseArrayOutput {
	return o
}

func (o ApplianceArtifactResponseArrayOutput) ToApplianceArtifactResponseArrayOutputWithContext(ctx context.Context) ApplianceArtifactResponseArrayOutput {
	return o
}

func (o ApplianceArtifactResponseArrayOutput) Index(i pulumi.IntInput) ApplianceArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplianceArtifactResponse {
		return vs[0].([]ApplianceArtifactResponse)[vs[1].(int)]
	}).(ApplianceArtifactResponseOutput)
}

// The appliance provider authorization.
type ApplianceProviderAuthorization struct {
	// The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the appliance resources.
	PrincipalId string `pulumi:"principalId"`
	// The provider's role definition identifier. This role will define all the permissions that the provider must have on the appliance's container resource group. This role definition cannot have permission to delete the resource group.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// ApplianceProviderAuthorizationInput is an input type that accepts ApplianceProviderAuthorizationArgs and ApplianceProviderAuthorizationOutput values.
// You can construct a concrete instance of `ApplianceProviderAuthorizationInput` via:
//
//	ApplianceProviderAuthorizationArgs{...}
type ApplianceProviderAuthorizationInput interface {
	pulumi.Input

	ToApplianceProviderAuthorizationOutput() ApplianceProviderAuthorizationOutput
	ToApplianceProviderAuthorizationOutputWithContext(context.Context) ApplianceProviderAuthorizationOutput
}

// The appliance provider authorization.
type ApplianceProviderAuthorizationArgs struct {
	// The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the appliance resources.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The provider's role definition identifier. This role will define all the permissions that the provider must have on the appliance's container resource group. This role definition cannot have permission to delete the resource group.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
}

func (ApplianceProviderAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceProviderAuthorization)(nil)).Elem()
}

func (i ApplianceProviderAuthorizationArgs) ToApplianceProviderAuthorizationOutput() ApplianceProviderAuthorizationOutput {
	return i.ToApplianceProviderAuthorizationOutputWithContext(context.Background())
}

func (i ApplianceProviderAuthorizationArgs) ToApplianceProviderAuthorizationOutputWithContext(ctx context.Context) ApplianceProviderAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceProviderAuthorizationOutput)
}

// ApplianceProviderAuthorizationArrayInput is an input type that accepts ApplianceProviderAuthorizationArray and ApplianceProviderAuthorizationArrayOutput values.
// You can construct a concrete instance of `ApplianceProviderAuthorizationArrayInput` via:
//
//	ApplianceProviderAuthorizationArray{ ApplianceProviderAuthorizationArgs{...} }
type ApplianceProviderAuthorizationArrayInput interface {
	pulumi.Input

	ToApplianceProviderAuthorizationArrayOutput() ApplianceProviderAuthorizationArrayOutput
	ToApplianceProviderAuthorizationArrayOutputWithContext(context.Context) ApplianceProviderAuthorizationArrayOutput
}

type ApplianceProviderAuthorizationArray []ApplianceProviderAuthorizationInput

func (ApplianceProviderAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplianceProviderAuthorization)(nil)).Elem()
}

func (i ApplianceProviderAuthorizationArray) ToApplianceProviderAuthorizationArrayOutput() ApplianceProviderAuthorizationArrayOutput {
	return i.ToApplianceProviderAuthorizationArrayOutputWithContext(context.Background())
}

func (i ApplianceProviderAuthorizationArray) ToApplianceProviderAuthorizationArrayOutputWithContext(ctx context.Context) ApplianceProviderAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceProviderAuthorizationArrayOutput)
}

// The appliance provider authorization.
type ApplianceProviderAuthorizationOutput struct{ *pulumi.OutputState }

func (ApplianceProviderAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceProviderAuthorization)(nil)).Elem()
}

func (o ApplianceProviderAuthorizationOutput) ToApplianceProviderAuthorizationOutput() ApplianceProviderAuthorizationOutput {
	return o
}

func (o ApplianceProviderAuthorizationOutput) ToApplianceProviderAuthorizationOutputWithContext(ctx context.Context) ApplianceProviderAuthorizationOutput {
	return o
}

// The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the appliance resources.
func (o ApplianceProviderAuthorizationOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceProviderAuthorization) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The provider's role definition identifier. This role will define all the permissions that the provider must have on the appliance's container resource group. This role definition cannot have permission to delete the resource group.
func (o ApplianceProviderAuthorizationOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceProviderAuthorization) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

type ApplianceProviderAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (ApplianceProviderAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplianceProviderAuthorization)(nil)).Elem()
}

func (o ApplianceProviderAuthorizationArrayOutput) ToApplianceProviderAuthorizationArrayOutput() ApplianceProviderAuthorizationArrayOutput {
	return o
}

func (o ApplianceProviderAuthorizationArrayOutput) ToApplianceProviderAuthorizationArrayOutputWithContext(ctx context.Context) ApplianceProviderAuthorizationArrayOutput {
	return o
}

func (o ApplianceProviderAuthorizationArrayOutput) Index(i pulumi.IntInput) ApplianceProviderAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplianceProviderAuthorization {
		return vs[0].([]ApplianceProviderAuthorization)[vs[1].(int)]
	}).(ApplianceProviderAuthorizationOutput)
}

// The appliance provider authorization.
type ApplianceProviderAuthorizationResponse struct {
	// The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the appliance resources.
	PrincipalId string `pulumi:"principalId"`
	// The provider's role definition identifier. This role will define all the permissions that the provider must have on the appliance's container resource group. This role definition cannot have permission to delete the resource group.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// The appliance provider authorization.
type ApplianceProviderAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (ApplianceProviderAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceProviderAuthorizationResponse)(nil)).Elem()
}

func (o ApplianceProviderAuthorizationResponseOutput) ToApplianceProviderAuthorizationResponseOutput() ApplianceProviderAuthorizationResponseOutput {
	return o
}

func (o ApplianceProviderAuthorizationResponseOutput) ToApplianceProviderAuthorizationResponseOutputWithContext(ctx context.Context) ApplianceProviderAuthorizationResponseOutput {
	return o
}

// The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the appliance resources.
func (o ApplianceProviderAuthorizationResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceProviderAuthorizationResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The provider's role definition identifier. This role will define all the permissions that the provider must have on the appliance's container resource group. This role definition cannot have permission to delete the resource group.
func (o ApplianceProviderAuthorizationResponseOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceProviderAuthorizationResponse) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

type ApplianceProviderAuthorizationResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplianceProviderAuthorizationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplianceProviderAuthorizationResponse)(nil)).Elem()
}

func (o ApplianceProviderAuthorizationResponseArrayOutput) ToApplianceProviderAuthorizationResponseArrayOutput() ApplianceProviderAuthorizationResponseArrayOutput {
	return o
}

func (o ApplianceProviderAuthorizationResponseArrayOutput) ToApplianceProviderAuthorizationResponseArrayOutputWithContext(ctx context.Context) ApplianceProviderAuthorizationResponseArrayOutput {
	return o
}

func (o ApplianceProviderAuthorizationResponseArrayOutput) Index(i pulumi.IntInput) ApplianceProviderAuthorizationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplianceProviderAuthorizationResponse {
		return vs[0].([]ApplianceProviderAuthorizationResponse)[vs[1].(int)]
	}).(ApplianceProviderAuthorizationResponseOutput)
}

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type *ResourceIdentityType `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type.
func (o IdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v Identity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The identity type.
func (o IdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *Identity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The principal ID of resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Plan for the appliance.
type Plan struct {
	// The plan name.
	Name string `pulumi:"name"`
	// The product code.
	Product string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher string `pulumi:"publisher"`
	// The plan's version.
	Version string `pulumi:"version"`
}

// PlanInput is an input type that accepts PlanArgs and PlanOutput values.
// You can construct a concrete instance of `PlanInput` via:
//
//	PlanArgs{...}
type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(context.Context) PlanOutput
}

// Plan for the appliance.
type PlanArgs struct {
	// The plan name.
	Name pulumi.StringInput `pulumi:"name"`
	// The product code.
	Product pulumi.StringInput `pulumi:"product"`
	// The promotion code.
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The plan's version.
	Version pulumi.StringInput `pulumi:"version"`
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (i PlanArgs) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

func (i PlanArgs) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput).ToPlanPtrOutputWithContext(ctx)
}

// PlanPtrInput is an input type that accepts PlanArgs, PlanPtr and PlanPtrOutput values.
// You can construct a concrete instance of `PlanPtrInput` via:
//
//	        PlanArgs{...}
//
//	or:
//
//	        nil
type PlanPtrInput interface {
	pulumi.Input

	ToPlanPtrOutput() PlanPtrOutput
	ToPlanPtrOutputWithContext(context.Context) PlanPtrOutput
}

type planPtrType PlanArgs

func PlanPtr(v *PlanArgs) PlanPtrInput {
	return (*planPtrType)(v)
}

func (*planPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *planPtrType) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i *planPtrType) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanPtrOutput)
}

// Plan for the appliance.
type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o.ToPlanPtrOutputWithContext(context.Background())
}

func (o PlanOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Plan) *Plan {
		return &v
	}).(PlanPtrOutput)
}

// The plan name.
func (o PlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Name }).(pulumi.StringOutput)
}

// The product code.
func (o PlanOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Product }).(pulumi.StringOutput)
}

// The promotion code.
func (o PlanOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Publisher }).(pulumi.StringOutput)
}

// The plan's version.
func (o PlanOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Version }).(pulumi.StringOutput)
}

type PlanPtrOutput struct{ *pulumi.OutputState }

func (PlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (o PlanPtrOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) Elem() PlanOutput {
	return o.ApplyT(func(v *Plan) Plan {
		if v != nil {
			return *v
		}
		var ret Plan
		return ret
	}).(PlanOutput)
}

// The plan name.
func (o PlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The product code.
func (o PlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanPtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The plan's version.
func (o PlanPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Plan for the appliance.
type PlanResponse struct {
	// The plan name.
	Name string `pulumi:"name"`
	// The product code.
	Product string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher string `pulumi:"publisher"`
	// The plan's version.
	Version string `pulumi:"version"`
}

// Plan for the appliance.
type PlanResponseOutput struct{ *pulumi.OutputState }

func (PlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanResponse)(nil)).Elem()
}

func (o PlanResponseOutput) ToPlanResponseOutput() PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToPlanResponseOutputWithContext(ctx context.Context) PlanResponseOutput {
	return o
}

// The plan name.
func (o PlanResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The product code.
func (o PlanResponseOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Product }).(pulumi.StringOutput)
}

// The promotion code.
func (o PlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// The plan's version.
func (o PlanResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Version }).(pulumi.StringOutput)
}

type PlanResponsePtrOutput struct{ *pulumi.OutputState }

func (PlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanResponse)(nil)).Elem()
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutput() PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutputWithContext(ctx context.Context) PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) Elem() PlanResponseOutput {
	return o.ApplyT(func(v *PlanResponse) PlanResponse {
		if v != nil {
			return *v
		}
		var ret PlanResponse
		return ret
	}).(PlanResponseOutput)
}

// The plan name.
func (o PlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The product code.
func (o PlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The plan's version.
func (o PlanResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// SKU for the resource.
type Sku struct {
	// The SKU capacity.
	Capacity *int `pulumi:"capacity"`
	// The SKU family.
	Family *string `pulumi:"family"`
	// The SKU model.
	Model *string `pulumi:"model"`
	// The SKU name.
	Name string `pulumi:"name"`
	// The SKU size.
	Size *string `pulumi:"size"`
	// The SKU tier.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// SKU for the resource.
type SkuArgs struct {
	// The SKU capacity.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The SKU model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The SKU name.
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The SKU tier.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// SKU for the resource.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The SKU capacity.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The SKU model.
func (o SkuOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The SKU name.
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The SKU tier.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// The SKU capacity.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The SKU model.
func (o SkuPtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

// The SKU name.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The SKU tier.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// SKU for the resource.
type SkuResponse struct {
	// The SKU capacity.
	Capacity *int `pulumi:"capacity"`
	// The SKU family.
	Family *string `pulumi:"family"`
	// The SKU model.
	Model *string `pulumi:"model"`
	// The SKU name.
	Name string `pulumi:"name"`
	// The SKU size.
	Size *string `pulumi:"size"`
	// The SKU tier.
	Tier *string `pulumi:"tier"`
}

// SKU for the resource.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// The SKU capacity.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The SKU model.
func (o SkuResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The SKU name.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The SKU tier.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// The SKU capacity.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The SKU model.
func (o SkuResponsePtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

// The SKU name.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The SKU tier.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplianceArtifactOutput{})
	pulumi.RegisterOutputType(ApplianceArtifactArrayOutput{})
	pulumi.RegisterOutputType(ApplianceArtifactResponseOutput{})
	pulumi.RegisterOutputType(ApplianceArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(ApplianceProviderAuthorizationOutput{})
	pulumi.RegisterOutputType(ApplianceProviderAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(ApplianceProviderAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(ApplianceProviderAuthorizationResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(PlanOutput{})
	pulumi.RegisterOutputType(PlanPtrOutput{})
	pulumi.RegisterOutputType(PlanResponseOutput{})
	pulumi.RegisterOutputType(PlanResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
