// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20160901preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about appliance definition.
//
// Deprecated: Version 2016-09-01-preview will be removed in v2 of the provider.
type ApplianceDefinition struct {
	pulumi.CustomResourceState

	// The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
	Artifacts ApplianceArtifactResponseArrayOutput `pulumi:"artifacts"`
	// The appliance provider authorizations.
	Authorizations ApplianceProviderAuthorizationResponseArrayOutput `pulumi:"authorizations"`
	// The appliance definition description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The appliance definition display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The identity of the resource.
	Identity IdentityResponsePtrOutput `pulumi:"identity"`
	// Resource location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The appliance lock level.
	LockLevel pulumi.StringOutput `pulumi:"lockLevel"`
	// ID of the resource that manages this resource.
	ManagedBy pulumi.StringPtrOutput `pulumi:"managedBy"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// The appliance definition package file Uri.
	PackageFileUri pulumi.StringOutput `pulumi:"packageFileUri"`
	// The SKU of the resource.
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApplianceDefinition registers a new resource with the given unique name, arguments, and options.
func NewApplianceDefinition(ctx *pulumi.Context,
	name string, args *ApplianceDefinitionArgs, opts ...pulumi.ResourceOption) (*ApplianceDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authorizations == nil {
		return nil, errors.New("invalid value for required argument 'Authorizations'")
	}
	if args.LockLevel == nil {
		return nil, errors.New("invalid value for required argument 'LockLevel'")
	}
	if args.PackageFileUri == nil {
		return nil, errors.New("invalid value for required argument 'PackageFileUri'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:solutions:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20170901:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20171201:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20180201:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20180301:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20180601:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20180901preview:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20190701:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20200821preview:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20210201preview:ApplianceDefinition"),
		},
		{
			Type: pulumi.String("azure-native:solutions/v20210701:ApplianceDefinition"),
		},
	})
	opts = append(opts, aliases)
	var resource ApplianceDefinition
	err := ctx.RegisterResource("azure-native:solutions/v20160901preview:ApplianceDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceDefinition gets an existing ApplianceDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceDefinitionState, opts ...pulumi.ResourceOption) (*ApplianceDefinition, error) {
	var resource ApplianceDefinition
	err := ctx.ReadResource("azure-native:solutions/v20160901preview:ApplianceDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceDefinition resources.
type applianceDefinitionState struct {
}

type ApplianceDefinitionState struct {
}

func (ApplianceDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceDefinitionState)(nil)).Elem()
}

type applianceDefinitionArgs struct {
	// The name of the appliance definition.
	ApplianceDefinitionName *string `pulumi:"applianceDefinitionName"`
	// The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
	Artifacts []ApplianceArtifact `pulumi:"artifacts"`
	// The appliance provider authorizations.
	Authorizations []ApplianceProviderAuthorization `pulumi:"authorizations"`
	// The appliance definition description.
	Description *string `pulumi:"description"`
	// The appliance definition display name.
	DisplayName *string `pulumi:"displayName"`
	// The identity of the resource.
	Identity *Identity `pulumi:"identity"`
	// Resource location
	Location *string `pulumi:"location"`
	// The appliance lock level.
	LockLevel ApplianceLockLevel `pulumi:"lockLevel"`
	// ID of the resource that manages this resource.
	ManagedBy *string `pulumi:"managedBy"`
	// The appliance definition package file Uri.
	PackageFileUri string `pulumi:"packageFileUri"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU of the resource.
	Sku *Sku `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ApplianceDefinition resource.
type ApplianceDefinitionArgs struct {
	// The name of the appliance definition.
	ApplianceDefinitionName pulumi.StringPtrInput
	// The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
	Artifacts ApplianceArtifactArrayInput
	// The appliance provider authorizations.
	Authorizations ApplianceProviderAuthorizationArrayInput
	// The appliance definition description.
	Description pulumi.StringPtrInput
	// The appliance definition display name.
	DisplayName pulumi.StringPtrInput
	// The identity of the resource.
	Identity IdentityPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// The appliance lock level.
	LockLevel ApplianceLockLevelInput
	// ID of the resource that manages this resource.
	ManagedBy pulumi.StringPtrInput
	// The appliance definition package file Uri.
	PackageFileUri pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The SKU of the resource.
	Sku SkuPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (ApplianceDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceDefinitionArgs)(nil)).Elem()
}

type ApplianceDefinitionInput interface {
	pulumi.Input

	ToApplianceDefinitionOutput() ApplianceDefinitionOutput
	ToApplianceDefinitionOutputWithContext(ctx context.Context) ApplianceDefinitionOutput
}

func (*ApplianceDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceDefinition)(nil)).Elem()
}

func (i *ApplianceDefinition) ToApplianceDefinitionOutput() ApplianceDefinitionOutput {
	return i.ToApplianceDefinitionOutputWithContext(context.Background())
}

func (i *ApplianceDefinition) ToApplianceDefinitionOutputWithContext(ctx context.Context) ApplianceDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceDefinitionOutput)
}

type ApplianceDefinitionOutput struct{ *pulumi.OutputState }

func (ApplianceDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceDefinition)(nil)).Elem()
}

func (o ApplianceDefinitionOutput) ToApplianceDefinitionOutput() ApplianceDefinitionOutput {
	return o
}

func (o ApplianceDefinitionOutput) ToApplianceDefinitionOutputWithContext(ctx context.Context) ApplianceDefinitionOutput {
	return o
}

// The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
func (o ApplianceDefinitionOutput) Artifacts() ApplianceArtifactResponseArrayOutput {
	return o.ApplyT(func(v *ApplianceDefinition) ApplianceArtifactResponseArrayOutput { return v.Artifacts }).(ApplianceArtifactResponseArrayOutput)
}

// The appliance provider authorizations.
func (o ApplianceDefinitionOutput) Authorizations() ApplianceProviderAuthorizationResponseArrayOutput {
	return o.ApplyT(func(v *ApplianceDefinition) ApplianceProviderAuthorizationResponseArrayOutput {
		return v.Authorizations
	}).(ApplianceProviderAuthorizationResponseArrayOutput)
}

// The appliance definition description.
func (o ApplianceDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The appliance definition display name.
func (o ApplianceDefinitionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The identity of the resource.
func (o ApplianceDefinitionOutput) Identity() IdentityResponsePtrOutput {
	return o.ApplyT(func(v *ApplianceDefinition) IdentityResponsePtrOutput { return v.Identity }).(IdentityResponsePtrOutput)
}

// Resource location
func (o ApplianceDefinitionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The appliance lock level.
func (o ApplianceDefinitionOutput) LockLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringOutput { return v.LockLevel }).(pulumi.StringOutput)
}

// ID of the resource that manages this resource.
func (o ApplianceDefinitionOutput) ManagedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringPtrOutput { return v.ManagedBy }).(pulumi.StringPtrOutput)
}

// Resource name
func (o ApplianceDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The appliance definition package file Uri.
func (o ApplianceDefinitionOutput) PackageFileUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringOutput { return v.PackageFileUri }).(pulumi.StringOutput)
}

// The SKU of the resource.
func (o ApplianceDefinitionOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v *ApplianceDefinition) SkuResponsePtrOutput { return v.Sku }).(SkuResponsePtrOutput)
}

// Resource tags
func (o ApplianceDefinitionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o ApplianceDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplianceDefinitionOutput{})
}
