// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160901preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Information about appliance.
type Appliance struct {
	pulumi.CustomResourceState

	// The fully qualified path of appliance definition Id.
	ApplianceDefinitionId pulumi.StringPtrOutput `pulumi:"applianceDefinitionId"`
	// The identity of the resource.
	Identity IdentityResponsePtrOutput `pulumi:"identity"`
	// The kind of the appliance. Allowed values are MarketPlace and ServiceCatalog.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// ID of the resource that manages this resource.
	ManagedBy pulumi.StringPtrOutput `pulumi:"managedBy"`
	// The managed resource group Id.
	ManagedResourceGroupId pulumi.StringOutput `pulumi:"managedResourceGroupId"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Name and value pairs that define the appliance outputs.
	Outputs pulumi.AnyOutput `pulumi:"outputs"`
	// Name and value pairs that define the appliance parameters. It can be a JObject or a well formed JSON string.
	Parameters pulumi.AnyOutput `pulumi:"parameters"`
	// The plan information.
	Plan PlanResponsePtrOutput `pulumi:"plan"`
	// The appliance provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The SKU of the resource.
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// The blob URI where the UI definition file is located.
	UiDefinitionUri pulumi.StringPtrOutput `pulumi:"uiDefinitionUri"`
}

// NewAppliance registers a new resource with the given unique name, arguments, and options.
func NewAppliance(ctx *pulumi.Context,
	name string, args *ApplianceArgs, opts ...pulumi.ResourceOption) (*Appliance, error) {
	if args == nil || args.ApplianceName == nil {
		return nil, errors.New("missing required argument 'ApplianceName'")
	}
	if args == nil || args.ManagedResourceGroupId == nil {
		return nil, errors.New("missing required argument 'ManagedResourceGroupId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ApplianceArgs{}
	}
	var resource Appliance
	err := ctx.RegisterResource("azure-nextgen:solutions/v20160901preview:Appliance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppliance gets an existing Appliance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppliance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceState, opts ...pulumi.ResourceOption) (*Appliance, error) {
	var resource Appliance
	err := ctx.ReadResource("azure-nextgen:solutions/v20160901preview:Appliance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Appliance resources.
type applianceState struct {
	// The fully qualified path of appliance definition Id.
	ApplianceDefinitionId *string `pulumi:"applianceDefinitionId"`
	// The identity of the resource.
	Identity *IdentityResponse `pulumi:"identity"`
	// The kind of the appliance. Allowed values are MarketPlace and ServiceCatalog.
	Kind *string `pulumi:"kind"`
	// Resource location
	Location *string `pulumi:"location"`
	// ID of the resource that manages this resource.
	ManagedBy *string `pulumi:"managedBy"`
	// The managed resource group Id.
	ManagedResourceGroupId *string `pulumi:"managedResourceGroupId"`
	// Resource name
	Name *string `pulumi:"name"`
	// Name and value pairs that define the appliance outputs.
	Outputs interface{} `pulumi:"outputs"`
	// Name and value pairs that define the appliance parameters. It can be a JObject or a well formed JSON string.
	Parameters interface{} `pulumi:"parameters"`
	// The plan information.
	Plan *PlanResponse `pulumi:"plan"`
	// The appliance provisioning state.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The SKU of the resource.
	Sku *SkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// The blob URI where the UI definition file is located.
	UiDefinitionUri *string `pulumi:"uiDefinitionUri"`
}

type ApplianceState struct {
	// The fully qualified path of appliance definition Id.
	ApplianceDefinitionId pulumi.StringPtrInput
	// The identity of the resource.
	Identity IdentityResponsePtrInput
	// The kind of the appliance. Allowed values are MarketPlace and ServiceCatalog.
	Kind pulumi.StringPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// ID of the resource that manages this resource.
	ManagedBy pulumi.StringPtrInput
	// The managed resource group Id.
	ManagedResourceGroupId pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Name and value pairs that define the appliance outputs.
	Outputs pulumi.Input
	// Name and value pairs that define the appliance parameters. It can be a JObject or a well formed JSON string.
	Parameters pulumi.Input
	// The plan information.
	Plan PlanResponsePtrInput
	// The appliance provisioning state.
	ProvisioningState pulumi.StringPtrInput
	// The SKU of the resource.
	Sku SkuResponsePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
	// The blob URI where the UI definition file is located.
	UiDefinitionUri pulumi.StringPtrInput
}

func (ApplianceState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceState)(nil)).Elem()
}

type applianceArgs struct {
	// The fully qualified path of appliance definition Id.
	ApplianceDefinitionId *string `pulumi:"applianceDefinitionId"`
	// The name of the appliance.
	ApplianceName string `pulumi:"applianceName"`
	// The identity of the resource.
	Identity *Identity `pulumi:"identity"`
	// The kind of the appliance. Allowed values are MarketPlace and ServiceCatalog.
	Kind *string `pulumi:"kind"`
	// Resource location
	Location *string `pulumi:"location"`
	// ID of the resource that manages this resource.
	ManagedBy *string `pulumi:"managedBy"`
	// The managed resource group Id.
	ManagedResourceGroupId string `pulumi:"managedResourceGroupId"`
	// Name and value pairs that define the appliance parameters. It can be a JObject or a well formed JSON string.
	Parameters interface{} `pulumi:"parameters"`
	// The plan information.
	Plan *Plan `pulumi:"plan"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU of the resource.
	Sku *Sku `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// The blob URI where the UI definition file is located.
	UiDefinitionUri *string `pulumi:"uiDefinitionUri"`
}

// The set of arguments for constructing a Appliance resource.
type ApplianceArgs struct {
	// The fully qualified path of appliance definition Id.
	ApplianceDefinitionId pulumi.StringPtrInput
	// The name of the appliance.
	ApplianceName pulumi.StringInput
	// The identity of the resource.
	Identity IdentityPtrInput
	// The kind of the appliance. Allowed values are MarketPlace and ServiceCatalog.
	Kind pulumi.StringPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// ID of the resource that manages this resource.
	ManagedBy pulumi.StringPtrInput
	// The managed resource group Id.
	ManagedResourceGroupId pulumi.StringInput
	// Name and value pairs that define the appliance parameters. It can be a JObject or a well formed JSON string.
	Parameters pulumi.Input
	// The plan information.
	Plan PlanPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The SKU of the resource.
	Sku SkuPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// The blob URI where the UI definition file is located.
	UiDefinitionUri pulumi.StringPtrInput
}

func (ApplianceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceArgs)(nil)).Elem()
}
