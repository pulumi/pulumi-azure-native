// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170901

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Information about managed application definition.
type ApplicationDefinition struct {
	pulumi.CustomResourceState

	// The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
	Artifacts ApplicationArtifactResponseArrayOutput `pulumi:"artifacts"`
	// The managed application provider authorizations.
	Authorizations ApplicationProviderAuthorizationResponseArrayOutput `pulumi:"authorizations"`
	// The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
	CreateUiDefinition pulumi.AnyOutput `pulumi:"createUiDefinition"`
	// The managed application definition description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The managed application definition display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The identity of the resource.
	Identity IdentityResponsePtrOutput `pulumi:"identity"`
	// A value indicating whether the package is enabled or not.
	IsEnabled pulumi.StringPtrOutput `pulumi:"isEnabled"`
	// Resource location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The managed application lock level.
	LockLevel pulumi.StringOutput `pulumi:"lockLevel"`
	// The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
	MainTemplate pulumi.AnyOutput `pulumi:"mainTemplate"`
	// ID of the resource that manages this resource.
	ManagedBy pulumi.StringPtrOutput `pulumi:"managedBy"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// The managed application definition package file Uri. Use this element
	PackageFileUri pulumi.StringPtrOutput `pulumi:"packageFileUri"`
	// The SKU of the resource.
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApplicationDefinition registers a new resource with the given unique name, arguments, and options.
func NewApplicationDefinition(ctx *pulumi.Context,
	name string, args *ApplicationDefinitionArgs, opts ...pulumi.ResourceOption) (*ApplicationDefinition, error) {
	if args == nil || args.ApplicationDefinitionName == nil {
		return nil, errors.New("missing required argument 'ApplicationDefinitionName'")
	}
	if args == nil || args.Authorizations == nil {
		return nil, errors.New("missing required argument 'Authorizations'")
	}
	if args == nil || args.LockLevel == nil {
		return nil, errors.New("missing required argument 'LockLevel'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ApplicationDefinitionArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:solutions/latest:ApplicationDefinition"),
		},
		{
			Type: pulumi.String("azure-nextgen:solutions/v20180601:ApplicationDefinition"),
		},
		{
			Type: pulumi.String("azure-nextgen:solutions/v20190701:ApplicationDefinition"),
		},
		{
			Type: pulumi.String("azure-nextgen:solutions/v20200821preview:ApplicationDefinition"),
		},
	})
	opts = append(opts, aliases)
	var resource ApplicationDefinition
	err := ctx.RegisterResource("azure-nextgen:solutions/v20170901:ApplicationDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationDefinition gets an existing ApplicationDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationDefinitionState, opts ...pulumi.ResourceOption) (*ApplicationDefinition, error) {
	var resource ApplicationDefinition
	err := ctx.ReadResource("azure-nextgen:solutions/v20170901:ApplicationDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationDefinition resources.
type applicationDefinitionState struct {
	// The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
	Artifacts []ApplicationArtifactResponse `pulumi:"artifacts"`
	// The managed application provider authorizations.
	Authorizations []ApplicationProviderAuthorizationResponse `pulumi:"authorizations"`
	// The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
	CreateUiDefinition interface{} `pulumi:"createUiDefinition"`
	// The managed application definition description.
	Description *string `pulumi:"description"`
	// The managed application definition display name.
	DisplayName *string `pulumi:"displayName"`
	// The identity of the resource.
	Identity *IdentityResponse `pulumi:"identity"`
	// A value indicating whether the package is enabled or not.
	IsEnabled *string `pulumi:"isEnabled"`
	// Resource location
	Location *string `pulumi:"location"`
	// The managed application lock level.
	LockLevel *string `pulumi:"lockLevel"`
	// The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
	MainTemplate interface{} `pulumi:"mainTemplate"`
	// ID of the resource that manages this resource.
	ManagedBy *string `pulumi:"managedBy"`
	// Resource name
	Name *string `pulumi:"name"`
	// The managed application definition package file Uri. Use this element
	PackageFileUri *string `pulumi:"packageFileUri"`
	// The SKU of the resource.
	Sku *SkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

type ApplicationDefinitionState struct {
	// The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
	Artifacts ApplicationArtifactResponseArrayInput
	// The managed application provider authorizations.
	Authorizations ApplicationProviderAuthorizationResponseArrayInput
	// The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
	CreateUiDefinition pulumi.Input
	// The managed application definition description.
	Description pulumi.StringPtrInput
	// The managed application definition display name.
	DisplayName pulumi.StringPtrInput
	// The identity of the resource.
	Identity IdentityResponsePtrInput
	// A value indicating whether the package is enabled or not.
	IsEnabled pulumi.StringPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// The managed application lock level.
	LockLevel pulumi.StringPtrInput
	// The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
	MainTemplate pulumi.Input
	// ID of the resource that manages this resource.
	ManagedBy pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// The managed application definition package file Uri. Use this element
	PackageFileUri pulumi.StringPtrInput
	// The SKU of the resource.
	Sku SkuResponsePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (ApplicationDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationDefinitionState)(nil)).Elem()
}

type applicationDefinitionArgs struct {
	// The name of the managed application definition.
	ApplicationDefinitionName string `pulumi:"applicationDefinitionName"`
	// The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
	Artifacts []ApplicationArtifact `pulumi:"artifacts"`
	// The managed application provider authorizations.
	Authorizations []ApplicationProviderAuthorization `pulumi:"authorizations"`
	// The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
	CreateUiDefinition interface{} `pulumi:"createUiDefinition"`
	// The managed application definition description.
	Description *string `pulumi:"description"`
	// The managed application definition display name.
	DisplayName *string `pulumi:"displayName"`
	// The identity of the resource.
	Identity *Identity `pulumi:"identity"`
	// A value indicating whether the package is enabled or not.
	IsEnabled *string `pulumi:"isEnabled"`
	// Resource location
	Location *string `pulumi:"location"`
	// The managed application lock level.
	LockLevel string `pulumi:"lockLevel"`
	// The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
	MainTemplate interface{} `pulumi:"mainTemplate"`
	// ID of the resource that manages this resource.
	ManagedBy *string `pulumi:"managedBy"`
	// The managed application definition package file Uri. Use this element
	PackageFileUri *string `pulumi:"packageFileUri"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU of the resource.
	Sku *Sku `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ApplicationDefinition resource.
type ApplicationDefinitionArgs struct {
	// The name of the managed application definition.
	ApplicationDefinitionName pulumi.StringInput
	// The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
	Artifacts ApplicationArtifactArrayInput
	// The managed application provider authorizations.
	Authorizations ApplicationProviderAuthorizationArrayInput
	// The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
	CreateUiDefinition pulumi.Input
	// The managed application definition description.
	Description pulumi.StringPtrInput
	// The managed application definition display name.
	DisplayName pulumi.StringPtrInput
	// The identity of the resource.
	Identity IdentityPtrInput
	// A value indicating whether the package is enabled or not.
	IsEnabled pulumi.StringPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// The managed application lock level.
	LockLevel pulumi.StringInput
	// The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
	MainTemplate pulumi.Input
	// ID of the resource that manages this resource.
	ManagedBy pulumi.StringPtrInput
	// The managed application definition package file Uri. Use this element
	PackageFileUri pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The SKU of the resource.
	Sku SkuPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (ApplicationDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationDefinitionArgs)(nil)).Elem()
}
