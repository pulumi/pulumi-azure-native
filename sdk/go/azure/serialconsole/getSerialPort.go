// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serialconsole

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents the serial port of the parent resource.
// API Version: 2018-05-01.
func LookupSerialPort(ctx *pulumi.Context, args *LookupSerialPortArgs, opts ...pulumi.InvokeOption) (*LookupSerialPortResult, error) {
	var rv LookupSerialPortResult
	err := ctx.Invoke("azure-native:serialconsole:getSerialPort", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSerialPortArgs struct {
	// The resource name, or subordinate path, for the parent of the serial port. For example: the name of the virtual machine.
	ParentResource string `pulumi:"parentResource"`
	// The resource type of the parent resource.  For example: 'virtualMachines' or 'virtualMachineScaleSets'
	ParentResourceType string `pulumi:"parentResourceType"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The namespace of the resource provider.
	ResourceProviderNamespace string `pulumi:"resourceProviderNamespace"`
	// The name of the serial port to connect to.
	SerialPort string `pulumi:"serialPort"`
}

// Represents the serial port of the parent resource.
type LookupSerialPortResult struct {
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name string `pulumi:"name"`
	// Specifies whether the port is enabled for a serial console connection.
	State *string `pulumi:"state"`
	// Resource type
	Type string `pulumi:"type"`
}

func LookupSerialPortOutput(ctx *pulumi.Context, args LookupSerialPortOutputArgs, opts ...pulumi.InvokeOption) LookupSerialPortResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSerialPortResult, error) {
			args := v.(LookupSerialPortArgs)
			r, err := LookupSerialPort(ctx, &args, opts...)
			var s LookupSerialPortResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSerialPortResultOutput)
}

type LookupSerialPortOutputArgs struct {
	// The resource name, or subordinate path, for the parent of the serial port. For example: the name of the virtual machine.
	ParentResource pulumi.StringInput `pulumi:"parentResource"`
	// The resource type of the parent resource.  For example: 'virtualMachines' or 'virtualMachineScaleSets'
	ParentResourceType pulumi.StringInput `pulumi:"parentResourceType"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The namespace of the resource provider.
	ResourceProviderNamespace pulumi.StringInput `pulumi:"resourceProviderNamespace"`
	// The name of the serial port to connect to.
	SerialPort pulumi.StringInput `pulumi:"serialPort"`
}

func (LookupSerialPortOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSerialPortArgs)(nil)).Elem()
}

// Represents the serial port of the parent resource.
type LookupSerialPortResultOutput struct{ *pulumi.OutputState }

func (LookupSerialPortResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSerialPortResult)(nil)).Elem()
}

func (o LookupSerialPortResultOutput) ToLookupSerialPortResultOutput() LookupSerialPortResultOutput {
	return o
}

func (o LookupSerialPortResultOutput) ToLookupSerialPortResultOutputWithContext(ctx context.Context) LookupSerialPortResultOutput {
	return o
}

// Resource Id
func (o LookupSerialPortResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSerialPortResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o LookupSerialPortResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSerialPortResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the port is enabled for a serial console connection.
func (o LookupSerialPortResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSerialPortResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Resource type
func (o LookupSerialPortResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSerialPortResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSerialPortResultOutput{})
}
