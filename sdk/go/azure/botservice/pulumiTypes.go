// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package botservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Alexa channel definition
type AlexaChannel struct {
	// The channel name
	// Expected value is 'AlexaChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Alexa channel resource
	Properties *AlexaChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for AlexaChannel
func (val *AlexaChannel) Defaults() *AlexaChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Alexa channel.
type AlexaChannelProperties struct {
	// The Alexa skill Id
	AlexaSkillId string `pulumi:"alexaSkillId"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
}

// The parameters to provide for the Alexa channel.
type AlexaChannelPropertiesResponse struct {
	// The Alexa skill Id
	AlexaSkillId string `pulumi:"alexaSkillId"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Full Uri used to configured the skill in Alexa
	ServiceEndpointUri string `pulumi:"serviceEndpointUri"`
	// Url fragment used in part of the Uri configured in Alexa
	UrlFragment string `pulumi:"urlFragment"`
}

// Alexa channel definition
type AlexaChannelResponse struct {
	// The channel name
	// Expected value is 'AlexaChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Alexa channel resource
	Properties *AlexaChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for AlexaChannelResponse
func (val *AlexaChannelResponse) Defaults() *AlexaChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Bot.
type BotProperties struct {
	// Contains resource all settings defined as key/value pairs.
	AllSettings map[string]string `pulumi:"allSettings"`
	// The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
	AppPasswordHint *string `pulumi:"appPasswordHint"`
	// The CMK Url
	CmekKeyVaultUrl *string `pulumi:"cmekKeyVaultUrl"`
	// The description of the bot
	Description *string `pulumi:"description"`
	// The Application Insights key
	DeveloperAppInsightKey *string `pulumi:"developerAppInsightKey"`
	// The Application Insights Api Key
	DeveloperAppInsightsApiKey *string `pulumi:"developerAppInsightsApiKey"`
	// The Application Insights App Id
	DeveloperAppInsightsApplicationId *string `pulumi:"developerAppInsightsApplicationId"`
	// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// The Name of the bot
	DisplayName string `pulumi:"displayName"`
	// The bot's endpoint
	Endpoint string `pulumi:"endpoint"`
	// The Icon Url of the bot
	IconUrl *string `pulumi:"iconUrl"`
	// Whether Cmek is enabled
	IsCmekEnabled *bool `pulumi:"isCmekEnabled"`
	// Whether the bot is streaming supported
	IsStreamingSupported *bool `pulumi:"isStreamingSupported"`
	// Collection of LUIS App Ids
	LuisAppIds []string `pulumi:"luisAppIds"`
	// The LUIS Key
	LuisKey *string `pulumi:"luisKey"`
	// The bot's manifest url
	ManifestUrl *string `pulumi:"manifestUrl"`
	// Microsoft App Id for the bot
	MsaAppId string `pulumi:"msaAppId"`
	// Microsoft App Managed Identity Resource Id for the bot
	MsaAppMSIResourceId *string `pulumi:"msaAppMSIResourceId"`
	// Microsoft App Tenant Id for the bot
	MsaAppTenantId *string `pulumi:"msaAppTenantId"`
	// Microsoft App Type for the bot
	MsaAppType *string `pulumi:"msaAppType"`
	// The hint to browser (e.g. protocol handler) on how to open the bot for authoring
	OpenWithHint *string `pulumi:"openWithHint"`
	// Contains resource parameters defined as key/value pairs.
	Parameters map[string]string `pulumi:"parameters"`
	// Whether the bot is in an isolated network
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Publishing credentials of the resource
	PublishingCredentials *string `pulumi:"publishingCredentials"`
	// The channel schema transformation version for the bot
	SchemaTransformationVersion *string `pulumi:"schemaTransformationVersion"`
	// The storage resourceId for the bot
	StorageResourceId *string `pulumi:"storageResourceId"`
}

// Defaults sets the appropriate defaults for BotProperties
func (val *BotProperties) Defaults() *BotProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsStreamingSupported) {
		isStreamingSupported_ := false
		tmp.IsStreamingSupported = &isStreamingSupported_
	}
	if isZero(tmp.PublicNetworkAccess) {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// BotPropertiesInput is an input type that accepts BotPropertiesArgs and BotPropertiesOutput values.
// You can construct a concrete instance of `BotPropertiesInput` via:
//
//	BotPropertiesArgs{...}
type BotPropertiesInput interface {
	pulumi.Input

	ToBotPropertiesOutput() BotPropertiesOutput
	ToBotPropertiesOutputWithContext(context.Context) BotPropertiesOutput
}

// The parameters to provide for the Bot.
type BotPropertiesArgs struct {
	// Contains resource all settings defined as key/value pairs.
	AllSettings pulumi.StringMapInput `pulumi:"allSettings"`
	// The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
	AppPasswordHint pulumi.StringPtrInput `pulumi:"appPasswordHint"`
	// The CMK Url
	CmekKeyVaultUrl pulumi.StringPtrInput `pulumi:"cmekKeyVaultUrl"`
	// The description of the bot
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The Application Insights key
	DeveloperAppInsightKey pulumi.StringPtrInput `pulumi:"developerAppInsightKey"`
	// The Application Insights Api Key
	DeveloperAppInsightsApiKey pulumi.StringPtrInput `pulumi:"developerAppInsightsApiKey"`
	// The Application Insights App Id
	DeveloperAppInsightsApplicationId pulumi.StringPtrInput `pulumi:"developerAppInsightsApplicationId"`
	// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// The Name of the bot
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The bot's endpoint
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The Icon Url of the bot
	IconUrl pulumi.StringPtrInput `pulumi:"iconUrl"`
	// Whether Cmek is enabled
	IsCmekEnabled pulumi.BoolPtrInput `pulumi:"isCmekEnabled"`
	// Whether the bot is streaming supported
	IsStreamingSupported pulumi.BoolPtrInput `pulumi:"isStreamingSupported"`
	// Collection of LUIS App Ids
	LuisAppIds pulumi.StringArrayInput `pulumi:"luisAppIds"`
	// The LUIS Key
	LuisKey pulumi.StringPtrInput `pulumi:"luisKey"`
	// The bot's manifest url
	ManifestUrl pulumi.StringPtrInput `pulumi:"manifestUrl"`
	// Microsoft App Id for the bot
	MsaAppId pulumi.StringInput `pulumi:"msaAppId"`
	// Microsoft App Managed Identity Resource Id for the bot
	MsaAppMSIResourceId pulumi.StringPtrInput `pulumi:"msaAppMSIResourceId"`
	// Microsoft App Tenant Id for the bot
	MsaAppTenantId pulumi.StringPtrInput `pulumi:"msaAppTenantId"`
	// Microsoft App Type for the bot
	MsaAppType pulumi.StringPtrInput `pulumi:"msaAppType"`
	// The hint to browser (e.g. protocol handler) on how to open the bot for authoring
	OpenWithHint pulumi.StringPtrInput `pulumi:"openWithHint"`
	// Contains resource parameters defined as key/value pairs.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Whether the bot is in an isolated network
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
	// Publishing credentials of the resource
	PublishingCredentials pulumi.StringPtrInput `pulumi:"publishingCredentials"`
	// The channel schema transformation version for the bot
	SchemaTransformationVersion pulumi.StringPtrInput `pulumi:"schemaTransformationVersion"`
	// The storage resourceId for the bot
	StorageResourceId pulumi.StringPtrInput `pulumi:"storageResourceId"`
}

// Defaults sets the appropriate defaults for BotPropertiesArgs
func (val *BotPropertiesArgs) Defaults() *BotPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsStreamingSupported) {
		tmp.IsStreamingSupported = pulumi.BoolPtr(false)
	}
	if isZero(tmp.PublicNetworkAccess) {
		tmp.PublicNetworkAccess = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (BotPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BotProperties)(nil)).Elem()
}

func (i BotPropertiesArgs) ToBotPropertiesOutput() BotPropertiesOutput {
	return i.ToBotPropertiesOutputWithContext(context.Background())
}

func (i BotPropertiesArgs) ToBotPropertiesOutputWithContext(ctx context.Context) BotPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotPropertiesOutput)
}

func (i BotPropertiesArgs) ToBotPropertiesPtrOutput() BotPropertiesPtrOutput {
	return i.ToBotPropertiesPtrOutputWithContext(context.Background())
}

func (i BotPropertiesArgs) ToBotPropertiesPtrOutputWithContext(ctx context.Context) BotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotPropertiesOutput).ToBotPropertiesPtrOutputWithContext(ctx)
}

// BotPropertiesPtrInput is an input type that accepts BotPropertiesArgs, BotPropertiesPtr and BotPropertiesPtrOutput values.
// You can construct a concrete instance of `BotPropertiesPtrInput` via:
//
//	        BotPropertiesArgs{...}
//
//	or:
//
//	        nil
type BotPropertiesPtrInput interface {
	pulumi.Input

	ToBotPropertiesPtrOutput() BotPropertiesPtrOutput
	ToBotPropertiesPtrOutputWithContext(context.Context) BotPropertiesPtrOutput
}

type botPropertiesPtrType BotPropertiesArgs

func BotPropertiesPtr(v *BotPropertiesArgs) BotPropertiesPtrInput {
	return (*botPropertiesPtrType)(v)
}

func (*botPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BotProperties)(nil)).Elem()
}

func (i *botPropertiesPtrType) ToBotPropertiesPtrOutput() BotPropertiesPtrOutput {
	return i.ToBotPropertiesPtrOutputWithContext(context.Background())
}

func (i *botPropertiesPtrType) ToBotPropertiesPtrOutputWithContext(ctx context.Context) BotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotPropertiesPtrOutput)
}

// The parameters to provide for the Bot.
type BotPropertiesOutput struct{ *pulumi.OutputState }

func (BotPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BotProperties)(nil)).Elem()
}

func (o BotPropertiesOutput) ToBotPropertiesOutput() BotPropertiesOutput {
	return o
}

func (o BotPropertiesOutput) ToBotPropertiesOutputWithContext(ctx context.Context) BotPropertiesOutput {
	return o
}

func (o BotPropertiesOutput) ToBotPropertiesPtrOutput() BotPropertiesPtrOutput {
	return o.ToBotPropertiesPtrOutputWithContext(context.Background())
}

func (o BotPropertiesOutput) ToBotPropertiesPtrOutputWithContext(ctx context.Context) BotPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BotProperties) *BotProperties {
		return &v
	}).(BotPropertiesPtrOutput)
}

// Contains resource all settings defined as key/value pairs.
func (o BotPropertiesOutput) AllSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v BotProperties) map[string]string { return v.AllSettings }).(pulumi.StringMapOutput)
}

// The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
func (o BotPropertiesOutput) AppPasswordHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.AppPasswordHint }).(pulumi.StringPtrOutput)
}

// The CMK Url
func (o BotPropertiesOutput) CmekKeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.CmekKeyVaultUrl }).(pulumi.StringPtrOutput)
}

// The description of the bot
func (o BotPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The Application Insights key
func (o BotPropertiesOutput) DeveloperAppInsightKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.DeveloperAppInsightKey }).(pulumi.StringPtrOutput)
}

// The Application Insights Api Key
func (o BotPropertiesOutput) DeveloperAppInsightsApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.DeveloperAppInsightsApiKey }).(pulumi.StringPtrOutput)
}

// The Application Insights App Id
func (o BotPropertiesOutput) DeveloperAppInsightsApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.DeveloperAppInsightsApplicationId }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
func (o BotPropertiesOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BotProperties) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// The Name of the bot
func (o BotPropertiesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v BotProperties) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The bot's endpoint
func (o BotPropertiesOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v BotProperties) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The Icon Url of the bot
func (o BotPropertiesOutput) IconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.IconUrl }).(pulumi.StringPtrOutput)
}

// Whether Cmek is enabled
func (o BotPropertiesOutput) IsCmekEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BotProperties) *bool { return v.IsCmekEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the bot is streaming supported
func (o BotPropertiesOutput) IsStreamingSupported() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BotProperties) *bool { return v.IsStreamingSupported }).(pulumi.BoolPtrOutput)
}

// Collection of LUIS App Ids
func (o BotPropertiesOutput) LuisAppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BotProperties) []string { return v.LuisAppIds }).(pulumi.StringArrayOutput)
}

// The LUIS Key
func (o BotPropertiesOutput) LuisKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.LuisKey }).(pulumi.StringPtrOutput)
}

// The bot's manifest url
func (o BotPropertiesOutput) ManifestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.ManifestUrl }).(pulumi.StringPtrOutput)
}

// Microsoft App Id for the bot
func (o BotPropertiesOutput) MsaAppId() pulumi.StringOutput {
	return o.ApplyT(func(v BotProperties) string { return v.MsaAppId }).(pulumi.StringOutput)
}

// Microsoft App Managed Identity Resource Id for the bot
func (o BotPropertiesOutput) MsaAppMSIResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.MsaAppMSIResourceId }).(pulumi.StringPtrOutput)
}

// Microsoft App Tenant Id for the bot
func (o BotPropertiesOutput) MsaAppTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.MsaAppTenantId }).(pulumi.StringPtrOutput)
}

// Microsoft App Type for the bot
func (o BotPropertiesOutput) MsaAppType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.MsaAppType }).(pulumi.StringPtrOutput)
}

// The hint to browser (e.g. protocol handler) on how to open the bot for authoring
func (o BotPropertiesOutput) OpenWithHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.OpenWithHint }).(pulumi.StringPtrOutput)
}

// Contains resource parameters defined as key/value pairs.
func (o BotPropertiesOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v BotProperties) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Whether the bot is in an isolated network
func (o BotPropertiesOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Publishing credentials of the resource
func (o BotPropertiesOutput) PublishingCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.PublishingCredentials }).(pulumi.StringPtrOutput)
}

// The channel schema transformation version for the bot
func (o BotPropertiesOutput) SchemaTransformationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.SchemaTransformationVersion }).(pulumi.StringPtrOutput)
}

// The storage resourceId for the bot
func (o BotPropertiesOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotProperties) *string { return v.StorageResourceId }).(pulumi.StringPtrOutput)
}

type BotPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BotPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotProperties)(nil)).Elem()
}

func (o BotPropertiesPtrOutput) ToBotPropertiesPtrOutput() BotPropertiesPtrOutput {
	return o
}

func (o BotPropertiesPtrOutput) ToBotPropertiesPtrOutputWithContext(ctx context.Context) BotPropertiesPtrOutput {
	return o
}

func (o BotPropertiesPtrOutput) Elem() BotPropertiesOutput {
	return o.ApplyT(func(v *BotProperties) BotProperties {
		if v != nil {
			return *v
		}
		var ret BotProperties
		return ret
	}).(BotPropertiesOutput)
}

// Contains resource all settings defined as key/value pairs.
func (o BotPropertiesPtrOutput) AllSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BotProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.AllSettings
	}).(pulumi.StringMapOutput)
}

// The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
func (o BotPropertiesPtrOutput) AppPasswordHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.AppPasswordHint
	}).(pulumi.StringPtrOutput)
}

// The CMK Url
func (o BotPropertiesPtrOutput) CmekKeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.CmekKeyVaultUrl
	}).(pulumi.StringPtrOutput)
}

// The description of the bot
func (o BotPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The Application Insights key
func (o BotPropertiesPtrOutput) DeveloperAppInsightKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.DeveloperAppInsightKey
	}).(pulumi.StringPtrOutput)
}

// The Application Insights Api Key
func (o BotPropertiesPtrOutput) DeveloperAppInsightsApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.DeveloperAppInsightsApiKey
	}).(pulumi.StringPtrOutput)
}

// The Application Insights App Id
func (o BotPropertiesPtrOutput) DeveloperAppInsightsApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.DeveloperAppInsightsApplicationId
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
func (o BotPropertiesPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BotProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// The Name of the bot
func (o BotPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The bot's endpoint
func (o BotPropertiesPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The Icon Url of the bot
func (o BotPropertiesPtrOutput) IconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.IconUrl
	}).(pulumi.StringPtrOutput)
}

// Whether Cmek is enabled
func (o BotPropertiesPtrOutput) IsCmekEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BotProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsCmekEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether the bot is streaming supported
func (o BotPropertiesPtrOutput) IsStreamingSupported() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BotProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsStreamingSupported
	}).(pulumi.BoolPtrOutput)
}

// Collection of LUIS App Ids
func (o BotPropertiesPtrOutput) LuisAppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BotProperties) []string {
		if v == nil {
			return nil
		}
		return v.LuisAppIds
	}).(pulumi.StringArrayOutput)
}

// The LUIS Key
func (o BotPropertiesPtrOutput) LuisKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.LuisKey
	}).(pulumi.StringPtrOutput)
}

// The bot's manifest url
func (o BotPropertiesPtrOutput) ManifestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.ManifestUrl
	}).(pulumi.StringPtrOutput)
}

// Microsoft App Id for the bot
func (o BotPropertiesPtrOutput) MsaAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MsaAppId
	}).(pulumi.StringPtrOutput)
}

// Microsoft App Managed Identity Resource Id for the bot
func (o BotPropertiesPtrOutput) MsaAppMSIResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.MsaAppMSIResourceId
	}).(pulumi.StringPtrOutput)
}

// Microsoft App Tenant Id for the bot
func (o BotPropertiesPtrOutput) MsaAppTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.MsaAppTenantId
	}).(pulumi.StringPtrOutput)
}

// Microsoft App Type for the bot
func (o BotPropertiesPtrOutput) MsaAppType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.MsaAppType
	}).(pulumi.StringPtrOutput)
}

// The hint to browser (e.g. protocol handler) on how to open the bot for authoring
func (o BotPropertiesPtrOutput) OpenWithHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.OpenWithHint
	}).(pulumi.StringPtrOutput)
}

// Contains resource parameters defined as key/value pairs.
func (o BotPropertiesPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BotProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// Whether the bot is in an isolated network
func (o BotPropertiesPtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Publishing credentials of the resource
func (o BotPropertiesPtrOutput) PublishingCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.PublishingCredentials
	}).(pulumi.StringPtrOutput)
}

// The channel schema transformation version for the bot
func (o BotPropertiesPtrOutput) SchemaTransformationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.SchemaTransformationVersion
	}).(pulumi.StringPtrOutput)
}

// The storage resourceId for the bot
func (o BotPropertiesPtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotProperties) *string {
		if v == nil {
			return nil
		}
		return v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// The parameters to provide for the Bot.
type BotPropertiesResponse struct {
	// Contains resource all settings defined as key/value pairs.
	AllSettings map[string]string `pulumi:"allSettings"`
	// The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
	AppPasswordHint *string `pulumi:"appPasswordHint"`
	// The CMK encryption status
	CmekEncryptionStatus string `pulumi:"cmekEncryptionStatus"`
	// The CMK Url
	CmekKeyVaultUrl *string `pulumi:"cmekKeyVaultUrl"`
	// Collection of channels for which the bot is configured
	ConfiguredChannels []string `pulumi:"configuredChannels"`
	// The description of the bot
	Description *string `pulumi:"description"`
	// The Application Insights key
	DeveloperAppInsightKey *string `pulumi:"developerAppInsightKey"`
	// The Application Insights Api Key
	DeveloperAppInsightsApiKey *string `pulumi:"developerAppInsightsApiKey"`
	// The Application Insights App Id
	DeveloperAppInsightsApplicationId *string `pulumi:"developerAppInsightsApplicationId"`
	// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// The Name of the bot
	DisplayName string `pulumi:"displayName"`
	// Collection of channels for which the bot is enabled
	EnabledChannels []string `pulumi:"enabledChannels"`
	// The bot's endpoint
	Endpoint string `pulumi:"endpoint"`
	// The bot's endpoint version
	EndpointVersion string `pulumi:"endpointVersion"`
	// The Icon Url of the bot
	IconUrl *string `pulumi:"iconUrl"`
	// Whether Cmek is enabled
	IsCmekEnabled *bool `pulumi:"isCmekEnabled"`
	// Whether the bot is developerAppInsightsApiKey set
	IsDeveloperAppInsightsApiKeySet bool `pulumi:"isDeveloperAppInsightsApiKeySet"`
	// Whether the bot is streaming supported
	IsStreamingSupported *bool `pulumi:"isStreamingSupported"`
	// Collection of LUIS App Ids
	LuisAppIds []string `pulumi:"luisAppIds"`
	// The LUIS Key
	LuisKey *string `pulumi:"luisKey"`
	// The bot's manifest url
	ManifestUrl *string `pulumi:"manifestUrl"`
	// Token used to migrate non Azure bot to azure subscription
	MigrationToken string `pulumi:"migrationToken"`
	// Microsoft App Id for the bot
	MsaAppId string `pulumi:"msaAppId"`
	// Microsoft App Managed Identity Resource Id for the bot
	MsaAppMSIResourceId *string `pulumi:"msaAppMSIResourceId"`
	// Microsoft App Tenant Id for the bot
	MsaAppTenantId *string `pulumi:"msaAppTenantId"`
	// Microsoft App Type for the bot
	MsaAppType *string `pulumi:"msaAppType"`
	// The hint to browser (e.g. protocol handler) on how to open the bot for authoring
	OpenWithHint *string `pulumi:"openWithHint"`
	// Contains resource parameters defined as key/value pairs.
	Parameters map[string]string `pulumi:"parameters"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
	// Whether the bot is in an isolated network
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Publishing credentials of the resource
	PublishingCredentials *string `pulumi:"publishingCredentials"`
	// The channel schema transformation version for the bot
	SchemaTransformationVersion *string `pulumi:"schemaTransformationVersion"`
	// The storage resourceId for the bot
	StorageResourceId *string `pulumi:"storageResourceId"`
}

// Defaults sets the appropriate defaults for BotPropertiesResponse
func (val *BotPropertiesResponse) Defaults() *BotPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsStreamingSupported) {
		isStreamingSupported_ := false
		tmp.IsStreamingSupported = &isStreamingSupported_
	}
	if isZero(tmp.PublicNetworkAccess) {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// The parameters to provide for the Bot.
type BotPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BotPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BotPropertiesResponse)(nil)).Elem()
}

func (o BotPropertiesResponseOutput) ToBotPropertiesResponseOutput() BotPropertiesResponseOutput {
	return o
}

func (o BotPropertiesResponseOutput) ToBotPropertiesResponseOutputWithContext(ctx context.Context) BotPropertiesResponseOutput {
	return o
}

// Contains resource all settings defined as key/value pairs.
func (o BotPropertiesResponseOutput) AllSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v BotPropertiesResponse) map[string]string { return v.AllSettings }).(pulumi.StringMapOutput)
}

// The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
func (o BotPropertiesResponseOutput) AppPasswordHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.AppPasswordHint }).(pulumi.StringPtrOutput)
}

// The CMK encryption status
func (o BotPropertiesResponseOutput) CmekEncryptionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v BotPropertiesResponse) string { return v.CmekEncryptionStatus }).(pulumi.StringOutput)
}

// The CMK Url
func (o BotPropertiesResponseOutput) CmekKeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.CmekKeyVaultUrl }).(pulumi.StringPtrOutput)
}

// Collection of channels for which the bot is configured
func (o BotPropertiesResponseOutput) ConfiguredChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BotPropertiesResponse) []string { return v.ConfiguredChannels }).(pulumi.StringArrayOutput)
}

// The description of the bot
func (o BotPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The Application Insights key
func (o BotPropertiesResponseOutput) DeveloperAppInsightKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.DeveloperAppInsightKey }).(pulumi.StringPtrOutput)
}

// The Application Insights Api Key
func (o BotPropertiesResponseOutput) DeveloperAppInsightsApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.DeveloperAppInsightsApiKey }).(pulumi.StringPtrOutput)
}

// The Application Insights App Id
func (o BotPropertiesResponseOutput) DeveloperAppInsightsApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.DeveloperAppInsightsApplicationId }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
func (o BotPropertiesResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// The Name of the bot
func (o BotPropertiesResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v BotPropertiesResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Collection of channels for which the bot is enabled
func (o BotPropertiesResponseOutput) EnabledChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BotPropertiesResponse) []string { return v.EnabledChannels }).(pulumi.StringArrayOutput)
}

// The bot's endpoint
func (o BotPropertiesResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v BotPropertiesResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The bot's endpoint version
func (o BotPropertiesResponseOutput) EndpointVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BotPropertiesResponse) string { return v.EndpointVersion }).(pulumi.StringOutput)
}

// The Icon Url of the bot
func (o BotPropertiesResponseOutput) IconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.IconUrl }).(pulumi.StringPtrOutput)
}

// Whether Cmek is enabled
func (o BotPropertiesResponseOutput) IsCmekEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *bool { return v.IsCmekEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the bot is developerAppInsightsApiKey set
func (o BotPropertiesResponseOutput) IsDeveloperAppInsightsApiKeySet() pulumi.BoolOutput {
	return o.ApplyT(func(v BotPropertiesResponse) bool { return v.IsDeveloperAppInsightsApiKeySet }).(pulumi.BoolOutput)
}

// Whether the bot is streaming supported
func (o BotPropertiesResponseOutput) IsStreamingSupported() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *bool { return v.IsStreamingSupported }).(pulumi.BoolPtrOutput)
}

// Collection of LUIS App Ids
func (o BotPropertiesResponseOutput) LuisAppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BotPropertiesResponse) []string { return v.LuisAppIds }).(pulumi.StringArrayOutput)
}

// The LUIS Key
func (o BotPropertiesResponseOutput) LuisKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.LuisKey }).(pulumi.StringPtrOutput)
}

// The bot's manifest url
func (o BotPropertiesResponseOutput) ManifestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.ManifestUrl }).(pulumi.StringPtrOutput)
}

// Token used to migrate non Azure bot to azure subscription
func (o BotPropertiesResponseOutput) MigrationToken() pulumi.StringOutput {
	return o.ApplyT(func(v BotPropertiesResponse) string { return v.MigrationToken }).(pulumi.StringOutput)
}

// Microsoft App Id for the bot
func (o BotPropertiesResponseOutput) MsaAppId() pulumi.StringOutput {
	return o.ApplyT(func(v BotPropertiesResponse) string { return v.MsaAppId }).(pulumi.StringOutput)
}

// Microsoft App Managed Identity Resource Id for the bot
func (o BotPropertiesResponseOutput) MsaAppMSIResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.MsaAppMSIResourceId }).(pulumi.StringPtrOutput)
}

// Microsoft App Tenant Id for the bot
func (o BotPropertiesResponseOutput) MsaAppTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.MsaAppTenantId }).(pulumi.StringPtrOutput)
}

// Microsoft App Type for the bot
func (o BotPropertiesResponseOutput) MsaAppType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.MsaAppType }).(pulumi.StringPtrOutput)
}

// The hint to browser (e.g. protocol handler) on how to open the bot for authoring
func (o BotPropertiesResponseOutput) OpenWithHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.OpenWithHint }).(pulumi.StringPtrOutput)
}

// Contains resource parameters defined as key/value pairs.
func (o BotPropertiesResponseOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v BotPropertiesResponse) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Provisioning state of the resource
func (o BotPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BotPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Whether the bot is in an isolated network
func (o BotPropertiesResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Publishing credentials of the resource
func (o BotPropertiesResponseOutput) PublishingCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.PublishingCredentials }).(pulumi.StringPtrOutput)
}

// The channel schema transformation version for the bot
func (o BotPropertiesResponseOutput) SchemaTransformationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.SchemaTransformationVersion }).(pulumi.StringPtrOutput)
}

// The storage resourceId for the bot
func (o BotPropertiesResponseOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BotPropertiesResponse) *string { return v.StorageResourceId }).(pulumi.StringPtrOutput)
}

// Channel settings definition
type ChannelSettingsResponse struct {
	// The bot icon url
	BotIconUrl *string `pulumi:"botIconUrl"`
	// The bot id
	BotId *string `pulumi:"botId"`
	// The channel display name
	ChannelDisplayName *string `pulumi:"channelDisplayName"`
	// The channel id
	ChannelId *string `pulumi:"channelId"`
	// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// The extensionKey1
	ExtensionKey1 *string `pulumi:"extensionKey1"`
	// The extensionKey2
	ExtensionKey2 *string `pulumi:"extensionKey2"`
	// Whether this channel is enabled for the bot
	IsEnabled *bool `pulumi:"isEnabled"`
	// The list of sites
	Sites []SiteResponse `pulumi:"sites"`
}

// Channel settings definition
type ChannelSettingsResponseOutput struct{ *pulumi.OutputState }

func (ChannelSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelSettingsResponse)(nil)).Elem()
}

func (o ChannelSettingsResponseOutput) ToChannelSettingsResponseOutput() ChannelSettingsResponseOutput {
	return o
}

func (o ChannelSettingsResponseOutput) ToChannelSettingsResponseOutputWithContext(ctx context.Context) ChannelSettingsResponseOutput {
	return o
}

// The bot icon url
func (o ChannelSettingsResponseOutput) BotIconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.BotIconUrl }).(pulumi.StringPtrOutput)
}

// The bot id
func (o ChannelSettingsResponseOutput) BotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.BotId }).(pulumi.StringPtrOutput)
}

// The channel display name
func (o ChannelSettingsResponseOutput) ChannelDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.ChannelDisplayName }).(pulumi.StringPtrOutput)
}

// The channel id
func (o ChannelSettingsResponseOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
func (o ChannelSettingsResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// The extensionKey1
func (o ChannelSettingsResponseOutput) ExtensionKey1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.ExtensionKey1 }).(pulumi.StringPtrOutput)
}

// The extensionKey2
func (o ChannelSettingsResponseOutput) ExtensionKey2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.ExtensionKey2 }).(pulumi.StringPtrOutput)
}

// Whether this channel is enabled for the bot
func (o ChannelSettingsResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The list of sites
func (o ChannelSettingsResponseOutput) Sites() SiteResponseArrayOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) []SiteResponse { return v.Sites }).(SiteResponseArrayOutput)
}

type ChannelSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ChannelSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSettingsResponse)(nil)).Elem()
}

func (o ChannelSettingsResponsePtrOutput) ToChannelSettingsResponsePtrOutput() ChannelSettingsResponsePtrOutput {
	return o
}

func (o ChannelSettingsResponsePtrOutput) ToChannelSettingsResponsePtrOutputWithContext(ctx context.Context) ChannelSettingsResponsePtrOutput {
	return o
}

func (o ChannelSettingsResponsePtrOutput) Elem() ChannelSettingsResponseOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) ChannelSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ChannelSettingsResponse
		return ret
	}).(ChannelSettingsResponseOutput)
}

// The bot icon url
func (o ChannelSettingsResponsePtrOutput) BotIconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.BotIconUrl
	}).(pulumi.StringPtrOutput)
}

// The bot id
func (o ChannelSettingsResponsePtrOutput) BotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.BotId
	}).(pulumi.StringPtrOutput)
}

// The channel display name
func (o ChannelSettingsResponsePtrOutput) ChannelDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ChannelDisplayName
	}).(pulumi.StringPtrOutput)
}

// The channel id
func (o ChannelSettingsResponsePtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
func (o ChannelSettingsResponsePtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// The extensionKey1
func (o ChannelSettingsResponsePtrOutput) ExtensionKey1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionKey1
	}).(pulumi.StringPtrOutput)
}

// The extensionKey2
func (o ChannelSettingsResponsePtrOutput) ExtensionKey2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionKey2
	}).(pulumi.StringPtrOutput)
}

// Whether this channel is enabled for the bot
func (o ChannelSettingsResponsePtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The list of sites
func (o ChannelSettingsResponsePtrOutput) Sites() SiteResponseArrayOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) []SiteResponse {
		if v == nil {
			return nil
		}
		return v.Sites
	}).(SiteResponseArrayOutput)
}

// Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
type ConnectionSettingParameter struct {
	// Key for the Connection Setting Parameter.
	Key *string `pulumi:"key"`
	// Value associated with the Connection Setting Parameter.
	Value *string `pulumi:"value"`
}

// ConnectionSettingParameterInput is an input type that accepts ConnectionSettingParameterArgs and ConnectionSettingParameterOutput values.
// You can construct a concrete instance of `ConnectionSettingParameterInput` via:
//
//	ConnectionSettingParameterArgs{...}
type ConnectionSettingParameterInput interface {
	pulumi.Input

	ToConnectionSettingParameterOutput() ConnectionSettingParameterOutput
	ToConnectionSettingParameterOutputWithContext(context.Context) ConnectionSettingParameterOutput
}

// Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
type ConnectionSettingParameterArgs struct {
	// Key for the Connection Setting Parameter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value associated with the Connection Setting Parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConnectionSettingParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionSettingParameter)(nil)).Elem()
}

func (i ConnectionSettingParameterArgs) ToConnectionSettingParameterOutput() ConnectionSettingParameterOutput {
	return i.ToConnectionSettingParameterOutputWithContext(context.Background())
}

func (i ConnectionSettingParameterArgs) ToConnectionSettingParameterOutputWithContext(ctx context.Context) ConnectionSettingParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionSettingParameterOutput)
}

// ConnectionSettingParameterArrayInput is an input type that accepts ConnectionSettingParameterArray and ConnectionSettingParameterArrayOutput values.
// You can construct a concrete instance of `ConnectionSettingParameterArrayInput` via:
//
//	ConnectionSettingParameterArray{ ConnectionSettingParameterArgs{...} }
type ConnectionSettingParameterArrayInput interface {
	pulumi.Input

	ToConnectionSettingParameterArrayOutput() ConnectionSettingParameterArrayOutput
	ToConnectionSettingParameterArrayOutputWithContext(context.Context) ConnectionSettingParameterArrayOutput
}

type ConnectionSettingParameterArray []ConnectionSettingParameterInput

func (ConnectionSettingParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionSettingParameter)(nil)).Elem()
}

func (i ConnectionSettingParameterArray) ToConnectionSettingParameterArrayOutput() ConnectionSettingParameterArrayOutput {
	return i.ToConnectionSettingParameterArrayOutputWithContext(context.Background())
}

func (i ConnectionSettingParameterArray) ToConnectionSettingParameterArrayOutputWithContext(ctx context.Context) ConnectionSettingParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionSettingParameterArrayOutput)
}

// Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
type ConnectionSettingParameterOutput struct{ *pulumi.OutputState }

func (ConnectionSettingParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionSettingParameter)(nil)).Elem()
}

func (o ConnectionSettingParameterOutput) ToConnectionSettingParameterOutput() ConnectionSettingParameterOutput {
	return o
}

func (o ConnectionSettingParameterOutput) ToConnectionSettingParameterOutputWithContext(ctx context.Context) ConnectionSettingParameterOutput {
	return o
}

// Key for the Connection Setting Parameter.
func (o ConnectionSettingParameterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingParameter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value associated with the Connection Setting Parameter.
func (o ConnectionSettingParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConnectionSettingParameterArrayOutput struct{ *pulumi.OutputState }

func (ConnectionSettingParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionSettingParameter)(nil)).Elem()
}

func (o ConnectionSettingParameterArrayOutput) ToConnectionSettingParameterArrayOutput() ConnectionSettingParameterArrayOutput {
	return o
}

func (o ConnectionSettingParameterArrayOutput) ToConnectionSettingParameterArrayOutputWithContext(ctx context.Context) ConnectionSettingParameterArrayOutput {
	return o
}

func (o ConnectionSettingParameterArrayOutput) Index(i pulumi.IntInput) ConnectionSettingParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionSettingParameter {
		return vs[0].([]ConnectionSettingParameter)[vs[1].(int)]
	}).(ConnectionSettingParameterOutput)
}

// Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
type ConnectionSettingParameterResponse struct {
	// Key for the Connection Setting Parameter.
	Key *string `pulumi:"key"`
	// Value associated with the Connection Setting Parameter.
	Value *string `pulumi:"value"`
}

// Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
type ConnectionSettingParameterResponseOutput struct{ *pulumi.OutputState }

func (ConnectionSettingParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionSettingParameterResponse)(nil)).Elem()
}

func (o ConnectionSettingParameterResponseOutput) ToConnectionSettingParameterResponseOutput() ConnectionSettingParameterResponseOutput {
	return o
}

func (o ConnectionSettingParameterResponseOutput) ToConnectionSettingParameterResponseOutputWithContext(ctx context.Context) ConnectionSettingParameterResponseOutput {
	return o
}

// Key for the Connection Setting Parameter.
func (o ConnectionSettingParameterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingParameterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value associated with the Connection Setting Parameter.
func (o ConnectionSettingParameterResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingParameterResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConnectionSettingParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectionSettingParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionSettingParameterResponse)(nil)).Elem()
}

func (o ConnectionSettingParameterResponseArrayOutput) ToConnectionSettingParameterResponseArrayOutput() ConnectionSettingParameterResponseArrayOutput {
	return o
}

func (o ConnectionSettingParameterResponseArrayOutput) ToConnectionSettingParameterResponseArrayOutputWithContext(ctx context.Context) ConnectionSettingParameterResponseArrayOutput {
	return o
}

func (o ConnectionSettingParameterResponseArrayOutput) Index(i pulumi.IntInput) ConnectionSettingParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionSettingParameterResponse {
		return vs[0].([]ConnectionSettingParameterResponse)[vs[1].(int)]
	}).(ConnectionSettingParameterResponseOutput)
}

// Properties for a Connection Setting Item
type ConnectionSettingProperties struct {
	// Client Id associated with the Connection Setting.
	ClientId *string `pulumi:"clientId"`
	// Client Secret associated with the Connection Setting
	ClientSecret *string `pulumi:"clientSecret"`
	// Id associated with the Connection Setting.
	Id *string `pulumi:"id"`
	// Name associated with the Connection Setting.
	Name *string `pulumi:"name"`
	// Service Provider Parameters associated with the Connection Setting
	Parameters []ConnectionSettingParameter `pulumi:"parameters"`
	// Provisioning state of the resource
	ProvisioningState *string `pulumi:"provisioningState"`
	// Scopes associated with the Connection Setting
	Scopes *string `pulumi:"scopes"`
	// Service Provider Display Name associated with the Connection Setting
	ServiceProviderDisplayName *string `pulumi:"serviceProviderDisplayName"`
	// Service Provider Id associated with the Connection Setting
	ServiceProviderId *string `pulumi:"serviceProviderId"`
}

// ConnectionSettingPropertiesInput is an input type that accepts ConnectionSettingPropertiesArgs and ConnectionSettingPropertiesOutput values.
// You can construct a concrete instance of `ConnectionSettingPropertiesInput` via:
//
//	ConnectionSettingPropertiesArgs{...}
type ConnectionSettingPropertiesInput interface {
	pulumi.Input

	ToConnectionSettingPropertiesOutput() ConnectionSettingPropertiesOutput
	ToConnectionSettingPropertiesOutputWithContext(context.Context) ConnectionSettingPropertiesOutput
}

// Properties for a Connection Setting Item
type ConnectionSettingPropertiesArgs struct {
	// Client Id associated with the Connection Setting.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Client Secret associated with the Connection Setting
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Id associated with the Connection Setting.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name associated with the Connection Setting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Service Provider Parameters associated with the Connection Setting
	Parameters ConnectionSettingParameterArrayInput `pulumi:"parameters"`
	// Provisioning state of the resource
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
	// Scopes associated with the Connection Setting
	Scopes pulumi.StringPtrInput `pulumi:"scopes"`
	// Service Provider Display Name associated with the Connection Setting
	ServiceProviderDisplayName pulumi.StringPtrInput `pulumi:"serviceProviderDisplayName"`
	// Service Provider Id associated with the Connection Setting
	ServiceProviderId pulumi.StringPtrInput `pulumi:"serviceProviderId"`
}

func (ConnectionSettingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionSettingProperties)(nil)).Elem()
}

func (i ConnectionSettingPropertiesArgs) ToConnectionSettingPropertiesOutput() ConnectionSettingPropertiesOutput {
	return i.ToConnectionSettingPropertiesOutputWithContext(context.Background())
}

func (i ConnectionSettingPropertiesArgs) ToConnectionSettingPropertiesOutputWithContext(ctx context.Context) ConnectionSettingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionSettingPropertiesOutput)
}

func (i ConnectionSettingPropertiesArgs) ToConnectionSettingPropertiesPtrOutput() ConnectionSettingPropertiesPtrOutput {
	return i.ToConnectionSettingPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectionSettingPropertiesArgs) ToConnectionSettingPropertiesPtrOutputWithContext(ctx context.Context) ConnectionSettingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionSettingPropertiesOutput).ToConnectionSettingPropertiesPtrOutputWithContext(ctx)
}

// ConnectionSettingPropertiesPtrInput is an input type that accepts ConnectionSettingPropertiesArgs, ConnectionSettingPropertiesPtr and ConnectionSettingPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectionSettingPropertiesPtrInput` via:
//
//	        ConnectionSettingPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectionSettingPropertiesPtrInput interface {
	pulumi.Input

	ToConnectionSettingPropertiesPtrOutput() ConnectionSettingPropertiesPtrOutput
	ToConnectionSettingPropertiesPtrOutputWithContext(context.Context) ConnectionSettingPropertiesPtrOutput
}

type connectionSettingPropertiesPtrType ConnectionSettingPropertiesArgs

func ConnectionSettingPropertiesPtr(v *ConnectionSettingPropertiesArgs) ConnectionSettingPropertiesPtrInput {
	return (*connectionSettingPropertiesPtrType)(v)
}

func (*connectionSettingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionSettingProperties)(nil)).Elem()
}

func (i *connectionSettingPropertiesPtrType) ToConnectionSettingPropertiesPtrOutput() ConnectionSettingPropertiesPtrOutput {
	return i.ToConnectionSettingPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectionSettingPropertiesPtrType) ToConnectionSettingPropertiesPtrOutputWithContext(ctx context.Context) ConnectionSettingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionSettingPropertiesPtrOutput)
}

// Properties for a Connection Setting Item
type ConnectionSettingPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectionSettingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionSettingProperties)(nil)).Elem()
}

func (o ConnectionSettingPropertiesOutput) ToConnectionSettingPropertiesOutput() ConnectionSettingPropertiesOutput {
	return o
}

func (o ConnectionSettingPropertiesOutput) ToConnectionSettingPropertiesOutputWithContext(ctx context.Context) ConnectionSettingPropertiesOutput {
	return o
}

func (o ConnectionSettingPropertiesOutput) ToConnectionSettingPropertiesPtrOutput() ConnectionSettingPropertiesPtrOutput {
	return o.ToConnectionSettingPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectionSettingPropertiesOutput) ToConnectionSettingPropertiesPtrOutputWithContext(ctx context.Context) ConnectionSettingPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionSettingProperties) *ConnectionSettingProperties {
		return &v
	}).(ConnectionSettingPropertiesPtrOutput)
}

// Client Id associated with the Connection Setting.
func (o ConnectionSettingPropertiesOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Client Secret associated with the Connection Setting
func (o ConnectionSettingPropertiesOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Id associated with the Connection Setting.
func (o ConnectionSettingPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name associated with the Connection Setting.
func (o ConnectionSettingPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Service Provider Parameters associated with the Connection Setting
func (o ConnectionSettingPropertiesOutput) Parameters() ConnectionSettingParameterArrayOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) []ConnectionSettingParameter { return v.Parameters }).(ConnectionSettingParameterArrayOutput)
}

// Provisioning state of the resource
func (o ConnectionSettingPropertiesOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Scopes associated with the Connection Setting
func (o ConnectionSettingPropertiesOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

// Service Provider Display Name associated with the Connection Setting
func (o ConnectionSettingPropertiesOutput) ServiceProviderDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) *string { return v.ServiceProviderDisplayName }).(pulumi.StringPtrOutput)
}

// Service Provider Id associated with the Connection Setting
func (o ConnectionSettingPropertiesOutput) ServiceProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingProperties) *string { return v.ServiceProviderId }).(pulumi.StringPtrOutput)
}

type ConnectionSettingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectionSettingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionSettingProperties)(nil)).Elem()
}

func (o ConnectionSettingPropertiesPtrOutput) ToConnectionSettingPropertiesPtrOutput() ConnectionSettingPropertiesPtrOutput {
	return o
}

func (o ConnectionSettingPropertiesPtrOutput) ToConnectionSettingPropertiesPtrOutputWithContext(ctx context.Context) ConnectionSettingPropertiesPtrOutput {
	return o
}

func (o ConnectionSettingPropertiesPtrOutput) Elem() ConnectionSettingPropertiesOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) ConnectionSettingProperties {
		if v != nil {
			return *v
		}
		var ret ConnectionSettingProperties
		return ret
	}).(ConnectionSettingPropertiesOutput)
}

// Client Id associated with the Connection Setting.
func (o ConnectionSettingPropertiesPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Client Secret associated with the Connection Setting
func (o ConnectionSettingPropertiesPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Id associated with the Connection Setting.
func (o ConnectionSettingPropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Name associated with the Connection Setting.
func (o ConnectionSettingPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Service Provider Parameters associated with the Connection Setting
func (o ConnectionSettingPropertiesPtrOutput) Parameters() ConnectionSettingParameterArrayOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) []ConnectionSettingParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ConnectionSettingParameterArrayOutput)
}

// Provisioning state of the resource
func (o ConnectionSettingPropertiesPtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Scopes associated with the Connection Setting
func (o ConnectionSettingPropertiesPtrOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringPtrOutput)
}

// Service Provider Display Name associated with the Connection Setting
func (o ConnectionSettingPropertiesPtrOutput) ServiceProviderDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceProviderDisplayName
	}).(pulumi.StringPtrOutput)
}

// Service Provider Id associated with the Connection Setting
func (o ConnectionSettingPropertiesPtrOutput) ServiceProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceProviderId
	}).(pulumi.StringPtrOutput)
}

// Properties for a Connection Setting Item
type ConnectionSettingPropertiesResponse struct {
	// Client Id associated with the Connection Setting.
	ClientId *string `pulumi:"clientId"`
	// Client Secret associated with the Connection Setting
	ClientSecret *string `pulumi:"clientSecret"`
	// Id associated with the Connection Setting.
	Id *string `pulumi:"id"`
	// Name associated with the Connection Setting.
	Name *string `pulumi:"name"`
	// Service Provider Parameters associated with the Connection Setting
	Parameters []ConnectionSettingParameterResponse `pulumi:"parameters"`
	// Provisioning state of the resource
	ProvisioningState *string `pulumi:"provisioningState"`
	// Scopes associated with the Connection Setting
	Scopes *string `pulumi:"scopes"`
	// Service Provider Display Name associated with the Connection Setting
	ServiceProviderDisplayName *string `pulumi:"serviceProviderDisplayName"`
	// Service Provider Id associated with the Connection Setting
	ServiceProviderId *string `pulumi:"serviceProviderId"`
	// Setting Id set by the service for the Connection Setting.
	SettingId string `pulumi:"settingId"`
}

// Properties for a Connection Setting Item
type ConnectionSettingPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectionSettingPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionSettingPropertiesResponse)(nil)).Elem()
}

func (o ConnectionSettingPropertiesResponseOutput) ToConnectionSettingPropertiesResponseOutput() ConnectionSettingPropertiesResponseOutput {
	return o
}

func (o ConnectionSettingPropertiesResponseOutput) ToConnectionSettingPropertiesResponseOutputWithContext(ctx context.Context) ConnectionSettingPropertiesResponseOutput {
	return o
}

// Client Id associated with the Connection Setting.
func (o ConnectionSettingPropertiesResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Client Secret associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Id associated with the Connection Setting.
func (o ConnectionSettingPropertiesResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name associated with the Connection Setting.
func (o ConnectionSettingPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Service Provider Parameters associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) Parameters() ConnectionSettingParameterResponseArrayOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) []ConnectionSettingParameterResponse { return v.Parameters }).(ConnectionSettingParameterResponseArrayOutput)
}

// Provisioning state of the resource
func (o ConnectionSettingPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Scopes associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

// Service Provider Display Name associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) ServiceProviderDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ServiceProviderDisplayName }).(pulumi.StringPtrOutput)
}

// Service Provider Id associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) ServiceProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ServiceProviderId }).(pulumi.StringPtrOutput)
}

// Setting Id set by the service for the Connection Setting.
func (o ConnectionSettingPropertiesResponseOutput) SettingId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) string { return v.SettingId }).(pulumi.StringOutput)
}

// Direct Line channel definition
type DirectLineChannel struct {
	// The channel name
	// Expected value is 'DirectLineChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Direct Line channel resource
	Properties *DirectLineChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DirectLineChannel
func (val *DirectLineChannel) Defaults() *DirectLineChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Direct Line channel.
type DirectLineChannelProperties struct {
	// Direct Line embed code of the resource
	DirectLineEmbedCode *string `pulumi:"directLineEmbedCode"`
	// The list of Direct Line sites
	Sites []DirectLineSite `pulumi:"sites"`
}

// The parameters to provide for the Direct Line channel.
type DirectLineChannelPropertiesResponse struct {
	// Direct Line embed code of the resource
	DirectLineEmbedCode *string `pulumi:"directLineEmbedCode"`
	// The list of Direct Line sites
	Sites []DirectLineSiteResponse `pulumi:"sites"`
}

// Direct Line channel definition
type DirectLineChannelResponse struct {
	// The channel name
	// Expected value is 'DirectLineChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Direct Line channel resource
	Properties *DirectLineChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for DirectLineChannelResponse
func (val *DirectLineChannelResponse) Defaults() *DirectLineChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// A site for the Direct Line channel
type DirectLineSite struct {
	// Whether this site is enabled for block user upload.
	IsBlockUserUploadEnabled *bool `pulumi:"isBlockUserUploadEnabled"`
	// Whether this site is enabled for DirectLine channel.
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this site is enabled for authentication with Bot Framework.
	IsSecureSiteEnabled *bool `pulumi:"isSecureSiteEnabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV1Enabled bool `pulumi:"isV1Enabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV3Enabled bool `pulumi:"isV3Enabled"`
	// Site name
	SiteName string `pulumi:"siteName"`
	// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
	TrustedOrigins []string `pulumi:"trustedOrigins"`
}

// A site for the Direct Line channel
type DirectLineSiteResponse struct {
	// Whether this site is enabled for block user upload.
	IsBlockUserUploadEnabled *bool `pulumi:"isBlockUserUploadEnabled"`
	// Whether this site is enabled for DirectLine channel.
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this site is enabled for authentication with Bot Framework.
	IsSecureSiteEnabled *bool `pulumi:"isSecureSiteEnabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV1Enabled bool `pulumi:"isV1Enabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV3Enabled bool `pulumi:"isV3Enabled"`
	// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key string `pulumi:"key"`
	// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key2 string `pulumi:"key2"`
	// Site Id
	SiteId string `pulumi:"siteId"`
	// Site name
	SiteName string `pulumi:"siteName"`
	// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
	TrustedOrigins []string `pulumi:"trustedOrigins"`
}

// DirectLine Speech channel definition
type DirectLineSpeechChannel struct {
	// The channel name
	// Expected value is 'DirectLineSpeechChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to DirectLine Speech channel resource
	Properties *DirectLineSpeechChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DirectLineSpeechChannel
func (val *DirectLineSpeechChannel) Defaults() *DirectLineSpeechChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the DirectLine Speech channel.
type DirectLineSpeechChannelProperties struct {
	// The cognitive service region with this channel registration.
	CognitiveServiceRegion string `pulumi:"cognitiveServiceRegion"`
	// The cognitive service subscription key to use with this channel registration.
	CognitiveServiceSubscriptionKey string `pulumi:"cognitiveServiceSubscriptionKey"`
	// Custom voice deployment id (optional).
	CustomSpeechModelId *string `pulumi:"customSpeechModelId"`
	// Custom speech model id (optional).
	CustomVoiceDeploymentId *string `pulumi:"customVoiceDeploymentId"`
	// Make this a default bot for chosen cognitive service account.
	IsDefaultBotForCogSvcAccount *bool `pulumi:"isDefaultBotForCogSvcAccount"`
	// Whether this channel is enabled or not.
	IsEnabled *bool `pulumi:"isEnabled"`
}

// The parameters to provide for the DirectLine Speech channel.
type DirectLineSpeechChannelPropertiesResponse struct {
	// The cognitive service region with this channel registration.
	CognitiveServiceRegion string `pulumi:"cognitiveServiceRegion"`
	// The cognitive service subscription key to use with this channel registration.
	CognitiveServiceSubscriptionKey string `pulumi:"cognitiveServiceSubscriptionKey"`
	// Custom voice deployment id (optional).
	CustomSpeechModelId *string `pulumi:"customSpeechModelId"`
	// Custom speech model id (optional).
	CustomVoiceDeploymentId *string `pulumi:"customVoiceDeploymentId"`
	// Make this a default bot for chosen cognitive service account.
	IsDefaultBotForCogSvcAccount *bool `pulumi:"isDefaultBotForCogSvcAccount"`
	// Whether this channel is enabled or not.
	IsEnabled *bool `pulumi:"isEnabled"`
}

// DirectLine Speech channel definition
type DirectLineSpeechChannelResponse struct {
	// The channel name
	// Expected value is 'DirectLineSpeechChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to DirectLine Speech channel resource
	Properties *DirectLineSpeechChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for DirectLineSpeechChannelResponse
func (val *DirectLineSpeechChannelResponse) Defaults() *DirectLineSpeechChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Email channel definition
type EmailChannel struct {
	// The channel name
	// Expected value is 'EmailChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to email channel resource
	Properties *EmailChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for EmailChannel
func (val *EmailChannel) Defaults() *EmailChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Email channel.
type EmailChannelProperties struct {
	// The email address
	EmailAddress string `pulumi:"emailAddress"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.
	Password *string `pulumi:"password"`
}

// The parameters to provide for the Email channel.
type EmailChannelPropertiesResponse struct {
	// The email address
	EmailAddress string `pulumi:"emailAddress"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.
	Password *string `pulumi:"password"`
}

// Email channel definition
type EmailChannelResponse struct {
	// The channel name
	// Expected value is 'EmailChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to email channel resource
	Properties *EmailChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for EmailChannelResponse
func (val *EmailChannelResponse) Defaults() *EmailChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The properties specific to an Enterprise Channel Node.
type EnterpriseChannelNode struct {
	// The location of the Enterprise Channel Node.
	AzureLocation string `pulumi:"azureLocation"`
	// The sku of the Enterprise Channel Node.
	AzureSku string `pulumi:"azureSku"`
	// The name of the Enterprise Channel Node.
	Name string `pulumi:"name"`
	// The current state of the Enterprise Channel Node.
	State *string `pulumi:"state"`
}

// EnterpriseChannelNodeInput is an input type that accepts EnterpriseChannelNodeArgs and EnterpriseChannelNodeOutput values.
// You can construct a concrete instance of `EnterpriseChannelNodeInput` via:
//
//	EnterpriseChannelNodeArgs{...}
type EnterpriseChannelNodeInput interface {
	pulumi.Input

	ToEnterpriseChannelNodeOutput() EnterpriseChannelNodeOutput
	ToEnterpriseChannelNodeOutputWithContext(context.Context) EnterpriseChannelNodeOutput
}

// The properties specific to an Enterprise Channel Node.
type EnterpriseChannelNodeArgs struct {
	// The location of the Enterprise Channel Node.
	AzureLocation pulumi.StringInput `pulumi:"azureLocation"`
	// The sku of the Enterprise Channel Node.
	AzureSku pulumi.StringInput `pulumi:"azureSku"`
	// The name of the Enterprise Channel Node.
	Name pulumi.StringInput `pulumi:"name"`
	// The current state of the Enterprise Channel Node.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (EnterpriseChannelNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseChannelNode)(nil)).Elem()
}

func (i EnterpriseChannelNodeArgs) ToEnterpriseChannelNodeOutput() EnterpriseChannelNodeOutput {
	return i.ToEnterpriseChannelNodeOutputWithContext(context.Background())
}

func (i EnterpriseChannelNodeArgs) ToEnterpriseChannelNodeOutputWithContext(ctx context.Context) EnterpriseChannelNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseChannelNodeOutput)
}

// EnterpriseChannelNodeArrayInput is an input type that accepts EnterpriseChannelNodeArray and EnterpriseChannelNodeArrayOutput values.
// You can construct a concrete instance of `EnterpriseChannelNodeArrayInput` via:
//
//	EnterpriseChannelNodeArray{ EnterpriseChannelNodeArgs{...} }
type EnterpriseChannelNodeArrayInput interface {
	pulumi.Input

	ToEnterpriseChannelNodeArrayOutput() EnterpriseChannelNodeArrayOutput
	ToEnterpriseChannelNodeArrayOutputWithContext(context.Context) EnterpriseChannelNodeArrayOutput
}

type EnterpriseChannelNodeArray []EnterpriseChannelNodeInput

func (EnterpriseChannelNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseChannelNode)(nil)).Elem()
}

func (i EnterpriseChannelNodeArray) ToEnterpriseChannelNodeArrayOutput() EnterpriseChannelNodeArrayOutput {
	return i.ToEnterpriseChannelNodeArrayOutputWithContext(context.Background())
}

func (i EnterpriseChannelNodeArray) ToEnterpriseChannelNodeArrayOutputWithContext(ctx context.Context) EnterpriseChannelNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseChannelNodeArrayOutput)
}

// The properties specific to an Enterprise Channel Node.
type EnterpriseChannelNodeOutput struct{ *pulumi.OutputState }

func (EnterpriseChannelNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseChannelNode)(nil)).Elem()
}

func (o EnterpriseChannelNodeOutput) ToEnterpriseChannelNodeOutput() EnterpriseChannelNodeOutput {
	return o
}

func (o EnterpriseChannelNodeOutput) ToEnterpriseChannelNodeOutputWithContext(ctx context.Context) EnterpriseChannelNodeOutput {
	return o
}

// The location of the Enterprise Channel Node.
func (o EnterpriseChannelNodeOutput) AzureLocation() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseChannelNode) string { return v.AzureLocation }).(pulumi.StringOutput)
}

// The sku of the Enterprise Channel Node.
func (o EnterpriseChannelNodeOutput) AzureSku() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseChannelNode) string { return v.AzureSku }).(pulumi.StringOutput)
}

// The name of the Enterprise Channel Node.
func (o EnterpriseChannelNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseChannelNode) string { return v.Name }).(pulumi.StringOutput)
}

// The current state of the Enterprise Channel Node.
func (o EnterpriseChannelNodeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseChannelNode) *string { return v.State }).(pulumi.StringPtrOutput)
}

type EnterpriseChannelNodeArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseChannelNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseChannelNode)(nil)).Elem()
}

func (o EnterpriseChannelNodeArrayOutput) ToEnterpriseChannelNodeArrayOutput() EnterpriseChannelNodeArrayOutput {
	return o
}

func (o EnterpriseChannelNodeArrayOutput) ToEnterpriseChannelNodeArrayOutputWithContext(ctx context.Context) EnterpriseChannelNodeArrayOutput {
	return o
}

func (o EnterpriseChannelNodeArrayOutput) Index(i pulumi.IntInput) EnterpriseChannelNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseChannelNode {
		return vs[0].([]EnterpriseChannelNode)[vs[1].(int)]
	}).(EnterpriseChannelNodeOutput)
}

// The properties specific to an Enterprise Channel Node.
type EnterpriseChannelNodeResponse struct {
	// The location of the Enterprise Channel Node.
	AzureLocation string `pulumi:"azureLocation"`
	// The sku of the Enterprise Channel Node.
	AzureSku string `pulumi:"azureSku"`
	// Id of Enterprise Channel Node. This is generated by the Bot Framework.
	Id string `pulumi:"id"`
	// The name of the Enterprise Channel Node.
	Name string `pulumi:"name"`
	// The current state of the Enterprise Channel Node.
	State *string `pulumi:"state"`
}

// The properties specific to an Enterprise Channel Node.
type EnterpriseChannelNodeResponseOutput struct{ *pulumi.OutputState }

func (EnterpriseChannelNodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseChannelNodeResponse)(nil)).Elem()
}

func (o EnterpriseChannelNodeResponseOutput) ToEnterpriseChannelNodeResponseOutput() EnterpriseChannelNodeResponseOutput {
	return o
}

func (o EnterpriseChannelNodeResponseOutput) ToEnterpriseChannelNodeResponseOutputWithContext(ctx context.Context) EnterpriseChannelNodeResponseOutput {
	return o
}

// The location of the Enterprise Channel Node.
func (o EnterpriseChannelNodeResponseOutput) AzureLocation() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseChannelNodeResponse) string { return v.AzureLocation }).(pulumi.StringOutput)
}

// The sku of the Enterprise Channel Node.
func (o EnterpriseChannelNodeResponseOutput) AzureSku() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseChannelNodeResponse) string { return v.AzureSku }).(pulumi.StringOutput)
}

// Id of Enterprise Channel Node. This is generated by the Bot Framework.
func (o EnterpriseChannelNodeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseChannelNodeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Enterprise Channel Node.
func (o EnterpriseChannelNodeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseChannelNodeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The current state of the Enterprise Channel Node.
func (o EnterpriseChannelNodeResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseChannelNodeResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type EnterpriseChannelNodeResponseArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseChannelNodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseChannelNodeResponse)(nil)).Elem()
}

func (o EnterpriseChannelNodeResponseArrayOutput) ToEnterpriseChannelNodeResponseArrayOutput() EnterpriseChannelNodeResponseArrayOutput {
	return o
}

func (o EnterpriseChannelNodeResponseArrayOutput) ToEnterpriseChannelNodeResponseArrayOutputWithContext(ctx context.Context) EnterpriseChannelNodeResponseArrayOutput {
	return o
}

func (o EnterpriseChannelNodeResponseArrayOutput) Index(i pulumi.IntInput) EnterpriseChannelNodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseChannelNodeResponse {
		return vs[0].([]EnterpriseChannelNodeResponse)[vs[1].(int)]
	}).(EnterpriseChannelNodeResponseOutput)
}

// The parameters to provide for the Enterprise Channel.
type EnterpriseChannelProperties struct {
	// The nodes associated with the Enterprise Channel.
	Nodes []EnterpriseChannelNode `pulumi:"nodes"`
	// The current state of the Enterprise Channel.
	State *string `pulumi:"state"`
}

// EnterpriseChannelPropertiesInput is an input type that accepts EnterpriseChannelPropertiesArgs and EnterpriseChannelPropertiesOutput values.
// You can construct a concrete instance of `EnterpriseChannelPropertiesInput` via:
//
//	EnterpriseChannelPropertiesArgs{...}
type EnterpriseChannelPropertiesInput interface {
	pulumi.Input

	ToEnterpriseChannelPropertiesOutput() EnterpriseChannelPropertiesOutput
	ToEnterpriseChannelPropertiesOutputWithContext(context.Context) EnterpriseChannelPropertiesOutput
}

// The parameters to provide for the Enterprise Channel.
type EnterpriseChannelPropertiesArgs struct {
	// The nodes associated with the Enterprise Channel.
	Nodes EnterpriseChannelNodeArrayInput `pulumi:"nodes"`
	// The current state of the Enterprise Channel.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (EnterpriseChannelPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseChannelProperties)(nil)).Elem()
}

func (i EnterpriseChannelPropertiesArgs) ToEnterpriseChannelPropertiesOutput() EnterpriseChannelPropertiesOutput {
	return i.ToEnterpriseChannelPropertiesOutputWithContext(context.Background())
}

func (i EnterpriseChannelPropertiesArgs) ToEnterpriseChannelPropertiesOutputWithContext(ctx context.Context) EnterpriseChannelPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseChannelPropertiesOutput)
}

func (i EnterpriseChannelPropertiesArgs) ToEnterpriseChannelPropertiesPtrOutput() EnterpriseChannelPropertiesPtrOutput {
	return i.ToEnterpriseChannelPropertiesPtrOutputWithContext(context.Background())
}

func (i EnterpriseChannelPropertiesArgs) ToEnterpriseChannelPropertiesPtrOutputWithContext(ctx context.Context) EnterpriseChannelPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseChannelPropertiesOutput).ToEnterpriseChannelPropertiesPtrOutputWithContext(ctx)
}

// EnterpriseChannelPropertiesPtrInput is an input type that accepts EnterpriseChannelPropertiesArgs, EnterpriseChannelPropertiesPtr and EnterpriseChannelPropertiesPtrOutput values.
// You can construct a concrete instance of `EnterpriseChannelPropertiesPtrInput` via:
//
//	        EnterpriseChannelPropertiesArgs{...}
//
//	or:
//
//	        nil
type EnterpriseChannelPropertiesPtrInput interface {
	pulumi.Input

	ToEnterpriseChannelPropertiesPtrOutput() EnterpriseChannelPropertiesPtrOutput
	ToEnterpriseChannelPropertiesPtrOutputWithContext(context.Context) EnterpriseChannelPropertiesPtrOutput
}

type enterpriseChannelPropertiesPtrType EnterpriseChannelPropertiesArgs

func EnterpriseChannelPropertiesPtr(v *EnterpriseChannelPropertiesArgs) EnterpriseChannelPropertiesPtrInput {
	return (*enterpriseChannelPropertiesPtrType)(v)
}

func (*enterpriseChannelPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseChannelProperties)(nil)).Elem()
}

func (i *enterpriseChannelPropertiesPtrType) ToEnterpriseChannelPropertiesPtrOutput() EnterpriseChannelPropertiesPtrOutput {
	return i.ToEnterpriseChannelPropertiesPtrOutputWithContext(context.Background())
}

func (i *enterpriseChannelPropertiesPtrType) ToEnterpriseChannelPropertiesPtrOutputWithContext(ctx context.Context) EnterpriseChannelPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseChannelPropertiesPtrOutput)
}

// The parameters to provide for the Enterprise Channel.
type EnterpriseChannelPropertiesOutput struct{ *pulumi.OutputState }

func (EnterpriseChannelPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseChannelProperties)(nil)).Elem()
}

func (o EnterpriseChannelPropertiesOutput) ToEnterpriseChannelPropertiesOutput() EnterpriseChannelPropertiesOutput {
	return o
}

func (o EnterpriseChannelPropertiesOutput) ToEnterpriseChannelPropertiesOutputWithContext(ctx context.Context) EnterpriseChannelPropertiesOutput {
	return o
}

func (o EnterpriseChannelPropertiesOutput) ToEnterpriseChannelPropertiesPtrOutput() EnterpriseChannelPropertiesPtrOutput {
	return o.ToEnterpriseChannelPropertiesPtrOutputWithContext(context.Background())
}

func (o EnterpriseChannelPropertiesOutput) ToEnterpriseChannelPropertiesPtrOutputWithContext(ctx context.Context) EnterpriseChannelPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseChannelProperties) *EnterpriseChannelProperties {
		return &v
	}).(EnterpriseChannelPropertiesPtrOutput)
}

// The nodes associated with the Enterprise Channel.
func (o EnterpriseChannelPropertiesOutput) Nodes() EnterpriseChannelNodeArrayOutput {
	return o.ApplyT(func(v EnterpriseChannelProperties) []EnterpriseChannelNode { return v.Nodes }).(EnterpriseChannelNodeArrayOutput)
}

// The current state of the Enterprise Channel.
func (o EnterpriseChannelPropertiesOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseChannelProperties) *string { return v.State }).(pulumi.StringPtrOutput)
}

type EnterpriseChannelPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseChannelPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseChannelProperties)(nil)).Elem()
}

func (o EnterpriseChannelPropertiesPtrOutput) ToEnterpriseChannelPropertiesPtrOutput() EnterpriseChannelPropertiesPtrOutput {
	return o
}

func (o EnterpriseChannelPropertiesPtrOutput) ToEnterpriseChannelPropertiesPtrOutputWithContext(ctx context.Context) EnterpriseChannelPropertiesPtrOutput {
	return o
}

func (o EnterpriseChannelPropertiesPtrOutput) Elem() EnterpriseChannelPropertiesOutput {
	return o.ApplyT(func(v *EnterpriseChannelProperties) EnterpriseChannelProperties {
		if v != nil {
			return *v
		}
		var ret EnterpriseChannelProperties
		return ret
	}).(EnterpriseChannelPropertiesOutput)
}

// The nodes associated with the Enterprise Channel.
func (o EnterpriseChannelPropertiesPtrOutput) Nodes() EnterpriseChannelNodeArrayOutput {
	return o.ApplyT(func(v *EnterpriseChannelProperties) []EnterpriseChannelNode {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(EnterpriseChannelNodeArrayOutput)
}

// The current state of the Enterprise Channel.
func (o EnterpriseChannelPropertiesPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseChannelProperties) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The parameters to provide for the Enterprise Channel.
type EnterpriseChannelPropertiesResponse struct {
	// The nodes associated with the Enterprise Channel.
	Nodes []EnterpriseChannelNodeResponse `pulumi:"nodes"`
	// The current state of the Enterprise Channel.
	State *string `pulumi:"state"`
}

// The parameters to provide for the Enterprise Channel.
type EnterpriseChannelPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EnterpriseChannelPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseChannelPropertiesResponse)(nil)).Elem()
}

func (o EnterpriseChannelPropertiesResponseOutput) ToEnterpriseChannelPropertiesResponseOutput() EnterpriseChannelPropertiesResponseOutput {
	return o
}

func (o EnterpriseChannelPropertiesResponseOutput) ToEnterpriseChannelPropertiesResponseOutputWithContext(ctx context.Context) EnterpriseChannelPropertiesResponseOutput {
	return o
}

// The nodes associated with the Enterprise Channel.
func (o EnterpriseChannelPropertiesResponseOutput) Nodes() EnterpriseChannelNodeResponseArrayOutput {
	return o.ApplyT(func(v EnterpriseChannelPropertiesResponse) []EnterpriseChannelNodeResponse { return v.Nodes }).(EnterpriseChannelNodeResponseArrayOutput)
}

// The current state of the Enterprise Channel.
func (o EnterpriseChannelPropertiesResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseChannelPropertiesResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Facebook channel definition
type FacebookChannel struct {
	// The channel name
	// Expected value is 'FacebookChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to bot facebook channel
	Properties *FacebookChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for FacebookChannel
func (val *FacebookChannel) Defaults() *FacebookChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Facebook channel.
type FacebookChannelProperties struct {
	// Facebook application id
	AppId string `pulumi:"appId"`
	// Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
	AppSecret *string `pulumi:"appSecret"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// The list of Facebook pages
	Pages []FacebookPage `pulumi:"pages"`
}

// The parameters to provide for the Facebook channel.
type FacebookChannelPropertiesResponse struct {
	// Facebook application id
	AppId string `pulumi:"appId"`
	// Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
	AppSecret *string `pulumi:"appSecret"`
	// Callback Url
	CallbackUrl string `pulumi:"callbackUrl"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// The list of Facebook pages
	Pages []FacebookPageResponse `pulumi:"pages"`
	// Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
	VerifyToken string `pulumi:"verifyToken"`
}

// Facebook channel definition
type FacebookChannelResponse struct {
	// The channel name
	// Expected value is 'FacebookChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to bot facebook channel
	Properties *FacebookChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for FacebookChannelResponse
func (val *FacebookChannelResponse) Defaults() *FacebookChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// A Facebook page for Facebook channel registration
type FacebookPage struct {
	// Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.
	AccessToken *string `pulumi:"accessToken"`
	// Page id
	Id string `pulumi:"id"`
}

// A Facebook page for Facebook channel registration
type FacebookPageResponse struct {
	// Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.
	AccessToken *string `pulumi:"accessToken"`
	// Page id
	Id string `pulumi:"id"`
}

// Kik channel definition
type KikChannel struct {
	// The channel name
	// Expected value is 'KikChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Kik channel resource
	Properties *KikChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for KikChannel
func (val *KikChannel) Defaults() *KikChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Kik channel.
type KikChannelProperties struct {
	// Kik API key. Value only returned through POST to the action Channel List API, otherwise empty.
	ApiKey *string `pulumi:"apiKey"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
	// The Kik user name
	UserName string `pulumi:"userName"`
}

// The parameters to provide for the Kik channel.
type KikChannelPropertiesResponse struct {
	// Kik API key. Value only returned through POST to the action Channel List API, otherwise empty.
	ApiKey *string `pulumi:"apiKey"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
	// The Kik user name
	UserName string `pulumi:"userName"`
}

// Kik channel definition
type KikChannelResponse struct {
	// The channel name
	// Expected value is 'KikChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Kik channel resource
	Properties *KikChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for KikChannelResponse
func (val *KikChannelResponse) Defaults() *KikChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Line channel definition
type LineChannel struct {
	// The channel name
	// Expected value is 'LineChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to line channel resource
	Properties *LineChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for LineChannel
func (val *LineChannel) Defaults() *LineChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Line channel.
type LineChannelProperties struct {
	// The list of line channel registrations
	LineRegistrations []LineRegistration `pulumi:"lineRegistrations"`
}

// The parameters to provide for the Line channel.
type LineChannelPropertiesResponse struct {
	// Callback Url to enter in line registration.
	CallbackUrl string `pulumi:"callbackUrl"`
	// Whether this channel is validated for the bot
	IsValidated bool `pulumi:"isValidated"`
	// The list of line channel registrations
	LineRegistrations []LineRegistrationResponse `pulumi:"lineRegistrations"`
}

// Line channel definition
type LineChannelResponse struct {
	// The channel name
	// Expected value is 'LineChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to line channel resource
	Properties *LineChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for LineChannelResponse
func (val *LineChannelResponse) Defaults() *LineChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The properties corresponding to a line channel registration
type LineRegistration struct {
	// Access token for the line channel registration
	ChannelAccessToken *string `pulumi:"channelAccessToken"`
	// Secret for the line channel registration
	ChannelSecret *string `pulumi:"channelSecret"`
}

// The properties corresponding to a line channel registration
type LineRegistrationResponse struct {
	// Access token for the line channel registration
	ChannelAccessToken *string `pulumi:"channelAccessToken"`
	// Secret for the line channel registration
	ChannelSecret *string `pulumi:"channelSecret"`
	// Id generated for the line channel registration
	GeneratedId string `pulumi:"generatedId"`
}

// Microsoft Teams channel definition
type MsTeamsChannel struct {
	// The channel name
	// Expected value is 'MsTeamsChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Microsoft Teams channel resource
	Properties *MsTeamsChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for MsTeamsChannel
func (val *MsTeamsChannel) Defaults() *MsTeamsChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// The parameters to provide for the Microsoft Teams channel.
type MsTeamsChannelProperties struct {
	// Whether this channel accepted terms
	AcceptedTerms *bool `pulumi:"acceptedTerms"`
	// Webhook for Microsoft Teams channel calls
	CallingWebHook *string `pulumi:"callingWebHook"`
	// Deployment environment for Microsoft Teams channel calls
	DeploymentEnvironment *string `pulumi:"deploymentEnvironment"`
	// Enable calling for Microsoft Teams channel
	EnableCalling *bool `pulumi:"enableCalling"`
	// Webhook for Microsoft Teams channel calls
	IncomingCallRoute *string `pulumi:"incomingCallRoute"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
}

// Defaults sets the appropriate defaults for MsTeamsChannelProperties
func (val *MsTeamsChannelProperties) Defaults() *MsTeamsChannelProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AcceptedTerms) {
		acceptedTerms_ := true
		tmp.AcceptedTerms = &acceptedTerms_
	}
	return &tmp
}

// The parameters to provide for the Microsoft Teams channel.
type MsTeamsChannelPropertiesResponse struct {
	// Whether this channel accepted terms
	AcceptedTerms *bool `pulumi:"acceptedTerms"`
	// Webhook for Microsoft Teams channel calls
	CallingWebHook *string `pulumi:"callingWebHook"`
	// Deployment environment for Microsoft Teams channel calls
	DeploymentEnvironment *string `pulumi:"deploymentEnvironment"`
	// Enable calling for Microsoft Teams channel
	EnableCalling *bool `pulumi:"enableCalling"`
	// Webhook for Microsoft Teams channel calls
	IncomingCallRoute *string `pulumi:"incomingCallRoute"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
}

// Defaults sets the appropriate defaults for MsTeamsChannelPropertiesResponse
func (val *MsTeamsChannelPropertiesResponse) Defaults() *MsTeamsChannelPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AcceptedTerms) {
		acceptedTerms_ := true
		tmp.AcceptedTerms = &acceptedTerms_
	}
	return &tmp
}

// Microsoft Teams channel definition
type MsTeamsChannelResponse struct {
	// The channel name
	// Expected value is 'MsTeamsChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Microsoft Teams channel resource
	Properties *MsTeamsChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for MsTeamsChannelResponse
func (val *MsTeamsChannelResponse) Defaults() *MsTeamsChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Extra Parameters specific to each Service Provider
type ServiceProviderParameterResponse struct {
	// Default Name for the Service Provider
	Default string `pulumi:"default"`
	// Description of the Service Provider
	Description string `pulumi:"description"`
	// Display Name of the Service Provider
	DisplayName string `pulumi:"displayName"`
	// Help Url for the  Service Provider
	HelpUrl string `pulumi:"helpUrl"`
	// Meta data for the Service Provider
	Metadata ServiceProviderParameterResponseMetadata `pulumi:"metadata"`
	// Name of the Service Provider
	Name string `pulumi:"name"`
	// Type of the Service Provider
	Type string `pulumi:"type"`
}

// the constraints of the bot meta data.
type ServiceProviderParameterResponseConstraints struct {
	// Whether required the constraints of the bot meta data.
	Required *bool `pulumi:"required"`
}

// Meta data for the Service Provider
type ServiceProviderParameterResponseMetadata struct {
	// the constraints of the bot meta data.
	Constraints *ServiceProviderParameterResponseConstraints `pulumi:"constraints"`
}

// The Object used to describe a Service Provider supported by Bot Service
type ServiceProviderPropertiesResponse struct {
	// Display Name of the Service Provider
	DevPortalUrl string `pulumi:"devPortalUrl"`
	// Display Name of the Service Provider
	DisplayName string `pulumi:"displayName"`
	// Display Name of the Service Provider
	IconUrl string `pulumi:"iconUrl"`
	// Id for Service Provider
	Id string `pulumi:"id"`
	// The list of parameters for the Service Provider
	Parameters []ServiceProviderParameterResponse `pulumi:"parameters"`
	// Display Name of the Service Provider
	ServiceProviderName string `pulumi:"serviceProviderName"`
}

// Service Provider Definition
type ServiceProviderResponse struct {
	// The Properties of a Service Provider Object
	Properties *ServiceProviderPropertiesResponse `pulumi:"properties"`
}

// A site for the channel
type SiteResponse struct {
	// Entity Tag
	ETag *string `pulumi:"eTag"`
	// Whether this site is enabled for block user upload.
	IsBlockUserUploadEnabled *bool `pulumi:"isBlockUserUploadEnabled"`
	// Whether this site is enabled for DirectLine channel.
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this site is enabled for authentication with Bot Framework.
	IsSecureSiteEnabled *bool `pulumi:"isSecureSiteEnabled"`
	// Whether this site is token enabled for channel
	IsTokenEnabled *bool `pulumi:"isTokenEnabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV1Enabled bool `pulumi:"isV1Enabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV3Enabled bool `pulumi:"isV3Enabled"`
	// Whether this site is enabled for preview versions of Webchat
	IsWebchatPreviewEnabled bool `pulumi:"isWebchatPreviewEnabled"`
	// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key string `pulumi:"key"`
	// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key2 string `pulumi:"key2"`
	// Site Id
	SiteId string `pulumi:"siteId"`
	// Site name
	SiteName string `pulumi:"siteName"`
	// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
	TrustedOrigins []string `pulumi:"trustedOrigins"`
}

// Defaults sets the appropriate defaults for SiteResponse
func (val *SiteResponse) Defaults() *SiteResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsWebchatPreviewEnabled) {
		tmp.IsWebchatPreviewEnabled = false
	}
	return &tmp
}

// A site for the channel
type SiteResponseOutput struct{ *pulumi.OutputState }

func (SiteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteResponse)(nil)).Elem()
}

func (o SiteResponseOutput) ToSiteResponseOutput() SiteResponseOutput {
	return o
}

func (o SiteResponseOutput) ToSiteResponseOutputWithContext(ctx context.Context) SiteResponseOutput {
	return o
}

// Entity Tag
func (o SiteResponseOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteResponse) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// Whether this site is enabled for block user upload.
func (o SiteResponseOutput) IsBlockUserUploadEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsBlockUserUploadEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is enabled for DirectLine channel.
func (o SiteResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SiteResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Whether this site is enabled for authentication with Bot Framework.
func (o SiteResponseOutput) IsSecureSiteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsSecureSiteEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is token enabled for channel
func (o SiteResponseOutput) IsTokenEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsTokenEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is enabled for Bot Framework V1 protocol.
func (o SiteResponseOutput) IsV1Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SiteResponse) bool { return v.IsV1Enabled }).(pulumi.BoolOutput)
}

// Whether this site is enabled for Bot Framework V1 protocol.
func (o SiteResponseOutput) IsV3Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SiteResponse) bool { return v.IsV3Enabled }).(pulumi.BoolOutput)
}

// Whether this site is enabled for preview versions of Webchat
func (o SiteResponseOutput) IsWebchatPreviewEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SiteResponse) bool { return v.IsWebchatPreviewEnabled }).(pulumi.BoolOutput)
}

// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
func (o SiteResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SiteResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
func (o SiteResponseOutput) Key2() pulumi.StringOutput {
	return o.ApplyT(func(v SiteResponse) string { return v.Key2 }).(pulumi.StringOutput)
}

// Site Id
func (o SiteResponseOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v SiteResponse) string { return v.SiteId }).(pulumi.StringOutput)
}

// Site name
func (o SiteResponseOutput) SiteName() pulumi.StringOutput {
	return o.ApplyT(func(v SiteResponse) string { return v.SiteName }).(pulumi.StringOutput)
}

// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
func (o SiteResponseOutput) TrustedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SiteResponse) []string { return v.TrustedOrigins }).(pulumi.StringArrayOutput)
}

type SiteResponseArrayOutput struct{ *pulumi.OutputState }

func (SiteResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SiteResponse)(nil)).Elem()
}

func (o SiteResponseArrayOutput) ToSiteResponseArrayOutput() SiteResponseArrayOutput {
	return o
}

func (o SiteResponseArrayOutput) ToSiteResponseArrayOutputWithContext(ctx context.Context) SiteResponseArrayOutput {
	return o
}

func (o SiteResponseArrayOutput) Index(i pulumi.IntInput) SiteResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SiteResponse {
		return vs[0].([]SiteResponse)[vs[1].(int)]
	}).(SiteResponseOutput)
}

// The SKU of the cognitive services account.
type Sku struct {
	// The sku name
	Name string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The SKU of the cognitive services account.
type SkuArgs struct {
	// The sku name
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The SKU of the cognitive services account.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The sku name
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// The sku name
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU of the cognitive services account.
type SkuResponse struct {
	// The sku name
	Name string `pulumi:"name"`
	// Gets the sku tier. This is based on the SKU name.
	Tier string `pulumi:"tier"`
}

// The SKU of the cognitive services account.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// The sku name
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Gets the sku tier. This is based on the SKU name.
func (o SkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// The sku name
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Gets the sku tier. This is based on the SKU name.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Skype channel definition
type SkypeChannel struct {
	// The channel name
	// Expected value is 'SkypeChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Skype channel resource
	Properties *SkypeChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for SkypeChannel
func (val *SkypeChannel) Defaults() *SkypeChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Microsoft Teams channel.
type SkypeChannelProperties struct {
	// Calling web hook for Skype channel
	CallingWebHook *string `pulumi:"callingWebHook"`
	// Enable calling for Skype channel
	EnableCalling *bool `pulumi:"enableCalling"`
	// Enable groups for Skype channel
	EnableGroups *bool `pulumi:"enableGroups"`
	// Enable media cards for Skype channel
	EnableMediaCards *bool `pulumi:"enableMediaCards"`
	// Enable messaging for Skype channel
	EnableMessaging *bool `pulumi:"enableMessaging"`
	// Enable screen sharing for Skype channel
	EnableScreenSharing *bool `pulumi:"enableScreenSharing"`
	// Enable video for Skype channel
	EnableVideo *bool `pulumi:"enableVideo"`
	// Group mode for Skype channel
	GroupsMode *string `pulumi:"groupsMode"`
	// Incoming call route for Skype channel
	IncomingCallRoute *string `pulumi:"incomingCallRoute"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
}

// The parameters to provide for the Microsoft Teams channel.
type SkypeChannelPropertiesResponse struct {
	// Calling web hook for Skype channel
	CallingWebHook *string `pulumi:"callingWebHook"`
	// Enable calling for Skype channel
	EnableCalling *bool `pulumi:"enableCalling"`
	// Enable groups for Skype channel
	EnableGroups *bool `pulumi:"enableGroups"`
	// Enable media cards for Skype channel
	EnableMediaCards *bool `pulumi:"enableMediaCards"`
	// Enable messaging for Skype channel
	EnableMessaging *bool `pulumi:"enableMessaging"`
	// Enable screen sharing for Skype channel
	EnableScreenSharing *bool `pulumi:"enableScreenSharing"`
	// Enable video for Skype channel
	EnableVideo *bool `pulumi:"enableVideo"`
	// Group mode for Skype channel
	GroupsMode *string `pulumi:"groupsMode"`
	// Incoming call route for Skype channel
	IncomingCallRoute *string `pulumi:"incomingCallRoute"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
}

// Skype channel definition
type SkypeChannelResponse struct {
	// The channel name
	// Expected value is 'SkypeChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Skype channel resource
	Properties *SkypeChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for SkypeChannelResponse
func (val *SkypeChannelResponse) Defaults() *SkypeChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Slack channel definition
type SlackChannel struct {
	// The channel name
	// Expected value is 'SlackChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Slack channel resource
	Properties *SlackChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for SlackChannel
func (val *SlackChannel) Defaults() *SlackChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Slack channel.
type SlackChannelProperties struct {
	// The Slack client id
	ClientId *string `pulumi:"clientId"`
	// The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
	ClientSecret *string `pulumi:"clientSecret"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// The Slack landing page Url
	LandingPageUrl *string `pulumi:"landingPageUrl"`
	// The Slack signing secret.
	SigningSecret *string `pulumi:"signingSecret"`
	// The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
	VerificationToken *string `pulumi:"verificationToken"`
}

// The parameters to provide for the Slack channel.
type SlackChannelPropertiesResponse struct {
	// The Slack client id
	ClientId *string `pulumi:"clientId"`
	// The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
	ClientSecret *string `pulumi:"clientSecret"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated bool `pulumi:"isValidated"`
	// The Slack landing page Url
	LandingPageUrl *string `pulumi:"landingPageUrl"`
	// The Sms auth token
	LastSubmissionId string `pulumi:"lastSubmissionId"`
	// The Slack redirect action
	RedirectAction string `pulumi:"redirectAction"`
	// Whether to register the settings before OAuth validation is performed. Recommended to True.
	RegisterBeforeOAuthFlow bool `pulumi:"registerBeforeOAuthFlow"`
	// The Slack signing secret.
	SigningSecret *string `pulumi:"signingSecret"`
	// The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
	VerificationToken *string `pulumi:"verificationToken"`
}

// Slack channel definition
type SlackChannelResponse struct {
	// The channel name
	// Expected value is 'SlackChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Slack channel resource
	Properties *SlackChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for SlackChannelResponse
func (val *SlackChannelResponse) Defaults() *SlackChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Sms channel definition
type SmsChannel struct {
	// The channel name
	// Expected value is 'SmsChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Sms channel resource
	Properties *SmsChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for SmsChannel
func (val *SmsChannel) Defaults() *SmsChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Sms channel.
type SmsChannelProperties struct {
	// The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
	AccountSID string `pulumi:"accountSID"`
	// The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
	AuthToken *string `pulumi:"authToken"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
	// The Sms phone
	Phone string `pulumi:"phone"`
}

// The parameters to provide for the Sms channel.
type SmsChannelPropertiesResponse struct {
	// The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
	AccountSID string `pulumi:"accountSID"`
	// The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
	AuthToken *string `pulumi:"authToken"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
	// The Sms phone
	Phone string `pulumi:"phone"`
}

// Sms channel definition
type SmsChannelResponse struct {
	// The channel name
	// Expected value is 'SmsChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Sms channel resource
	Properties *SmsChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for SmsChannelResponse
func (val *SmsChannelResponse) Defaults() *SmsChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Telegram channel definition
type TelegramChannel struct {
	// The channel name
	// Expected value is 'TelegramChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Telegram channel resource
	Properties *TelegramChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for TelegramChannel
func (val *TelegramChannel) Defaults() *TelegramChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Telegram channel.
type TelegramChannelProperties struct {
	// The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
	AccessToken *string `pulumi:"accessToken"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
}

// The parameters to provide for the Telegram channel.
type TelegramChannelPropertiesResponse struct {
	// The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
	AccessToken *string `pulumi:"accessToken"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
}

// Telegram channel definition
type TelegramChannelResponse struct {
	// The channel name
	// Expected value is 'TelegramChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Telegram channel resource
	Properties *TelegramChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for TelegramChannelResponse
func (val *TelegramChannelResponse) Defaults() *TelegramChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Web Chat channel definition
type WebChatChannel struct {
	// The channel name
	// Expected value is 'WebChatChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Web Chat channel resource
	Properties *WebChatChannelProperties `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for WebChatChannel
func (val *WebChatChannel) Defaults() *WebChatChannel {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Web Chat channel.
type WebChatChannelProperties struct {
	// The list of Web Chat sites
	Sites []WebChatSite `pulumi:"sites"`
}

// The parameters to provide for the Web Chat channel.
type WebChatChannelPropertiesResponse struct {
	// The list of Web Chat sites
	Sites []WebChatSiteResponse `pulumi:"sites"`
	// Web chat control embed code
	WebChatEmbedCode string `pulumi:"webChatEmbedCode"`
}

// Web Chat channel definition
type WebChatChannelResponse struct {
	// The channel name
	// Expected value is 'WebChatChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Web Chat channel resource
	Properties *WebChatChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for WebChatChannelResponse
func (val *WebChatChannelResponse) Defaults() *WebChatChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Location) {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// A site for the Webchat channel
type WebChatSite struct {
	// Whether this site is enabled for DirectLine channel
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this site is enabled for preview versions of Webchat
	IsWebchatPreviewEnabled bool `pulumi:"isWebchatPreviewEnabled"`
	// Site name
	SiteName string `pulumi:"siteName"`
}

// Defaults sets the appropriate defaults for WebChatSite
func (val *WebChatSite) Defaults() *WebChatSite {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsWebchatPreviewEnabled) {
		tmp.IsWebchatPreviewEnabled = false
	}
	return &tmp
}

// A site for the Webchat channel
type WebChatSiteResponse struct {
	// Whether this site is enabled for DirectLine channel
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this site is enabled for preview versions of Webchat
	IsWebchatPreviewEnabled bool `pulumi:"isWebchatPreviewEnabled"`
	// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key string `pulumi:"key"`
	// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key2 string `pulumi:"key2"`
	// Site Id
	SiteId string `pulumi:"siteId"`
	// Site name
	SiteName string `pulumi:"siteName"`
}

// Defaults sets the appropriate defaults for WebChatSiteResponse
func (val *WebChatSiteResponse) Defaults() *WebChatSiteResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IsWebchatPreviewEnabled) {
		tmp.IsWebchatPreviewEnabled = false
	}
	return &tmp
}
func init() {
	pulumi.RegisterOutputType(BotPropertiesOutput{})
	pulumi.RegisterOutputType(BotPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BotPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ChannelSettingsResponseOutput{})
	pulumi.RegisterOutputType(ChannelSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectionSettingParameterOutput{})
	pulumi.RegisterOutputType(ConnectionSettingParameterArrayOutput{})
	pulumi.RegisterOutputType(ConnectionSettingParameterResponseOutput{})
	pulumi.RegisterOutputType(ConnectionSettingParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectionSettingPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectionSettingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectionSettingPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EnterpriseChannelNodeOutput{})
	pulumi.RegisterOutputType(EnterpriseChannelNodeArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseChannelNodeResponseOutput{})
	pulumi.RegisterOutputType(EnterpriseChannelNodeResponseArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseChannelPropertiesOutput{})
	pulumi.RegisterOutputType(EnterpriseChannelPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseChannelPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(SiteResponseOutput{})
	pulumi.RegisterOutputType(SiteResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
