// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Kusto
{
    public static class GetAttachedDatabaseConfiguration
    {
        /// <summary>
        /// Returns an attached database configuration.
        /// Azure REST API version: 2022-12-29.
        /// 
        /// Other available API versions: 2023-05-02, 2023-08-15, 2024-04-13.
        /// </summary>
        public static Task<GetAttachedDatabaseConfigurationResult> InvokeAsync(GetAttachedDatabaseConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAttachedDatabaseConfigurationResult>("azure-native:kusto:getAttachedDatabaseConfiguration", args ?? new GetAttachedDatabaseConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Returns an attached database configuration.
        /// Azure REST API version: 2022-12-29.
        /// 
        /// Other available API versions: 2023-05-02, 2023-08-15, 2024-04-13.
        /// </summary>
        public static Output<GetAttachedDatabaseConfigurationResult> Invoke(GetAttachedDatabaseConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAttachedDatabaseConfigurationResult>("azure-native:kusto:getAttachedDatabaseConfiguration", args ?? new GetAttachedDatabaseConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAttachedDatabaseConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the attached database configuration.
        /// </summary>
        [Input("attachedDatabaseConfigurationName", required: true)]
        public string AttachedDatabaseConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the Kusto cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group containing the Kusto cluster.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAttachedDatabaseConfigurationArgs()
        {
        }
        public static new GetAttachedDatabaseConfigurationArgs Empty => new GetAttachedDatabaseConfigurationArgs();
    }

    public sealed class GetAttachedDatabaseConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the attached database configuration.
        /// </summary>
        [Input("attachedDatabaseConfigurationName", required: true)]
        public Input<string> AttachedDatabaseConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the Kusto cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group containing the Kusto cluster.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAttachedDatabaseConfigurationInvokeArgs()
        {
        }
        public static new GetAttachedDatabaseConfigurationInvokeArgs Empty => new GetAttachedDatabaseConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetAttachedDatabaseConfigurationResult
    {
        /// <summary>
        /// The list of databases from the clusterResourceId which are currently attached to the cluster.
        /// </summary>
        public readonly ImmutableArray<string> AttachedDatabaseNames;
        /// <summary>
        /// The resource id of the cluster where the databases you would like to attach reside.
        /// </summary>
        public readonly string ClusterResourceId;
        /// <summary>
        /// The name of the database which you would like to attach, use * if you want to follow all current and future databases.
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// Overrides the original database name. Relevant only when attaching to a specific database.
        /// </summary>
        public readonly string? DatabaseNameOverride;
        /// <summary>
        /// Adds a prefix to the attached databases name. When following an entire cluster, that prefix would be added to all of the databases original names from leader cluster.
        /// </summary>
        public readonly string? DatabaseNamePrefix;
        /// <summary>
        /// The default principals modification kind
        /// </summary>
        public readonly string DefaultPrincipalsModificationKind;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioned state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Table level sharing specifications
        /// </summary>
        public readonly Outputs.TableLevelSharingPropertiesResponse? TableLevelSharingProperties;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAttachedDatabaseConfigurationResult(
            ImmutableArray<string> attachedDatabaseNames,

            string clusterResourceId,

            string databaseName,

            string? databaseNameOverride,

            string? databaseNamePrefix,

            string defaultPrincipalsModificationKind,

            string id,

            string? location,

            string name,

            string provisioningState,

            Outputs.TableLevelSharingPropertiesResponse? tableLevelSharingProperties,

            string type)
        {
            AttachedDatabaseNames = attachedDatabaseNames;
            ClusterResourceId = clusterResourceId;
            DatabaseName = databaseName;
            DatabaseNameOverride = databaseNameOverride;
            DatabaseNamePrefix = databaseNamePrefix;
            DefaultPrincipalsModificationKind = defaultPrincipalsModificationKind;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            TableLevelSharingProperties = tableLevelSharingProperties;
            Type = type;
        }
    }
}
