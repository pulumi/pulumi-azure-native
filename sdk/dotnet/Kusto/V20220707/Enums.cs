// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Kusto.V20220707
{
    /// <summary>
    /// SKU name.
    /// </summary>
    [EnumType]
    public readonly struct AzureSkuName : IEquatable<AzureSkuName>
    {
        private readonly string _value;

        private AzureSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSkuName Dev_No_SLA_Standard_D11_v2 { get; } = new AzureSkuName("Dev(No SLA)_Standard_D11_v2");
        public static AzureSkuName Dev_No_SLA_Standard_E2a_v4 { get; } = new AzureSkuName("Dev(No SLA)_Standard_E2a_v4");
        public static AzureSkuName Standard_D11_v2 { get; } = new AzureSkuName("Standard_D11_v2");
        public static AzureSkuName Standard_D12_v2 { get; } = new AzureSkuName("Standard_D12_v2");
        public static AzureSkuName Standard_D13_v2 { get; } = new AzureSkuName("Standard_D13_v2");
        public static AzureSkuName Standard_D14_v2 { get; } = new AzureSkuName("Standard_D14_v2");
        public static AzureSkuName Standard_D32d_v4 { get; } = new AzureSkuName("Standard_D32d_v4");
        public static AzureSkuName Standard_D16d_v5 { get; } = new AzureSkuName("Standard_D16d_v5");
        public static AzureSkuName Standard_D32d_v5 { get; } = new AzureSkuName("Standard_D32d_v5");
        public static AzureSkuName Standard_DS13_v2_1TB_PS { get; } = new AzureSkuName("Standard_DS13_v2+1TB_PS");
        public static AzureSkuName Standard_DS13_v2_2TB_PS { get; } = new AzureSkuName("Standard_DS13_v2+2TB_PS");
        public static AzureSkuName Standard_DS14_v2_3TB_PS { get; } = new AzureSkuName("Standard_DS14_v2+3TB_PS");
        public static AzureSkuName Standard_DS14_v2_4TB_PS { get; } = new AzureSkuName("Standard_DS14_v2+4TB_PS");
        public static AzureSkuName Standard_L4s { get; } = new AzureSkuName("Standard_L4s");
        public static AzureSkuName Standard_L8s { get; } = new AzureSkuName("Standard_L8s");
        public static AzureSkuName Standard_L16s { get; } = new AzureSkuName("Standard_L16s");
        public static AzureSkuName Standard_L8s_v2 { get; } = new AzureSkuName("Standard_L8s_v2");
        public static AzureSkuName Standard_L16s_v2 { get; } = new AzureSkuName("Standard_L16s_v2");
        public static AzureSkuName Standard_L8s_v3 { get; } = new AzureSkuName("Standard_L8s_v3");
        public static AzureSkuName Standard_L16s_v3 { get; } = new AzureSkuName("Standard_L16s_v3");
        public static AzureSkuName Standard_L8as_v3 { get; } = new AzureSkuName("Standard_L8as_v3");
        public static AzureSkuName Standard_L16as_v3 { get; } = new AzureSkuName("Standard_L16as_v3");
        public static AzureSkuName Standard_E64i_v3 { get; } = new AzureSkuName("Standard_E64i_v3");
        public static AzureSkuName Standard_E80ids_v4 { get; } = new AzureSkuName("Standard_E80ids_v4");
        public static AzureSkuName Standard_E2a_v4 { get; } = new AzureSkuName("Standard_E2a_v4");
        public static AzureSkuName Standard_E4a_v4 { get; } = new AzureSkuName("Standard_E4a_v4");
        public static AzureSkuName Standard_E8a_v4 { get; } = new AzureSkuName("Standard_E8a_v4");
        public static AzureSkuName Standard_E16a_v4 { get; } = new AzureSkuName("Standard_E16a_v4");
        public static AzureSkuName Standard_E8as_v4_1TB_PS { get; } = new AzureSkuName("Standard_E8as_v4+1TB_PS");
        public static AzureSkuName Standard_E8as_v4_2TB_PS { get; } = new AzureSkuName("Standard_E8as_v4+2TB_PS");
        public static AzureSkuName Standard_E16as_v4_3TB_PS { get; } = new AzureSkuName("Standard_E16as_v4+3TB_PS");
        public static AzureSkuName Standard_E16as_v4_4TB_PS { get; } = new AzureSkuName("Standard_E16as_v4+4TB_PS");
        public static AzureSkuName Standard_E8as_v5_1TB_PS { get; } = new AzureSkuName("Standard_E8as_v5+1TB_PS");
        public static AzureSkuName Standard_E8as_v5_2TB_PS { get; } = new AzureSkuName("Standard_E8as_v5+2TB_PS");
        public static AzureSkuName Standard_E16as_v5_3TB_PS { get; } = new AzureSkuName("Standard_E16as_v5+3TB_PS");
        public static AzureSkuName Standard_E16as_v5_4TB_PS { get; } = new AzureSkuName("Standard_E16as_v5+4TB_PS");
        public static AzureSkuName Standard_E2ads_v5 { get; } = new AzureSkuName("Standard_E2ads_v5");
        public static AzureSkuName Standard_E4ads_v5 { get; } = new AzureSkuName("Standard_E4ads_v5");
        public static AzureSkuName Standard_E8ads_v5 { get; } = new AzureSkuName("Standard_E8ads_v5");
        public static AzureSkuName Standard_E16ads_v5 { get; } = new AzureSkuName("Standard_E16ads_v5");
        public static AzureSkuName Standard_EC8as_v5_1TB_PS { get; } = new AzureSkuName("Standard_EC8as_v5+1TB_PS");
        public static AzureSkuName Standard_EC8as_v5_2TB_PS { get; } = new AzureSkuName("Standard_EC8as_v5+2TB_PS");
        public static AzureSkuName Standard_EC16as_v5_3TB_PS { get; } = new AzureSkuName("Standard_EC16as_v5+3TB_PS");
        public static AzureSkuName Standard_EC16as_v5_4TB_PS { get; } = new AzureSkuName("Standard_EC16as_v5+4TB_PS");
        public static AzureSkuName Standard_EC8ads_v5 { get; } = new AzureSkuName("Standard_EC8ads_v5");
        public static AzureSkuName Standard_EC16ads_v5 { get; } = new AzureSkuName("Standard_EC16ads_v5");
        public static AzureSkuName Standard_E8s_v4_1TB_PS { get; } = new AzureSkuName("Standard_E8s_v4+1TB_PS");
        public static AzureSkuName Standard_E8s_v4_2TB_PS { get; } = new AzureSkuName("Standard_E8s_v4+2TB_PS");
        public static AzureSkuName Standard_E16s_v4_3TB_PS { get; } = new AzureSkuName("Standard_E16s_v4+3TB_PS");
        public static AzureSkuName Standard_E16s_v4_4TB_PS { get; } = new AzureSkuName("Standard_E16s_v4+4TB_PS");
        public static AzureSkuName Standard_E8s_v5_1TB_PS { get; } = new AzureSkuName("Standard_E8s_v5+1TB_PS");
        public static AzureSkuName Standard_E8s_v5_2TB_PS { get; } = new AzureSkuName("Standard_E8s_v5+2TB_PS");
        public static AzureSkuName Standard_E16s_v5_3TB_PS { get; } = new AzureSkuName("Standard_E16s_v5+3TB_PS");
        public static AzureSkuName Standard_E16s_v5_4TB_PS { get; } = new AzureSkuName("Standard_E16s_v5+4TB_PS");
        public static AzureSkuName Standard_E2d_v4 { get; } = new AzureSkuName("Standard_E2d_v4");
        public static AzureSkuName Standard_E4d_v4 { get; } = new AzureSkuName("Standard_E4d_v4");
        public static AzureSkuName Standard_E8d_v4 { get; } = new AzureSkuName("Standard_E8d_v4");
        public static AzureSkuName Standard_E16d_v4 { get; } = new AzureSkuName("Standard_E16d_v4");
        public static AzureSkuName Standard_E2d_v5 { get; } = new AzureSkuName("Standard_E2d_v5");
        public static AzureSkuName Standard_E4d_v5 { get; } = new AzureSkuName("Standard_E4d_v5");
        public static AzureSkuName Standard_E8d_v5 { get; } = new AzureSkuName("Standard_E8d_v5");
        public static AzureSkuName Standard_E16d_v5 { get; } = new AzureSkuName("Standard_E16d_v5");

        public static bool operator ==(AzureSkuName left, AzureSkuName right) => left.Equals(right);
        public static bool operator !=(AzureSkuName left, AzureSkuName right) => !left.Equals(right);

        public static explicit operator string(AzureSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSkuName other && Equals(other);
        public bool Equals(AzureSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU tier.
    /// </summary>
    [EnumType]
    public readonly struct AzureSkuTier : IEquatable<AzureSkuTier>
    {
        private readonly string _value;

        private AzureSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSkuTier Basic { get; } = new AzureSkuTier("Basic");
        public static AzureSkuTier Standard { get; } = new AzureSkuTier("Standard");

        public static bool operator ==(AzureSkuTier left, AzureSkuTier right) => left.Equals(right);
        public static bool operator !=(AzureSkuTier left, AzureSkuTier right) => !left.Equals(right);

        public static explicit operator string(AzureSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSkuTier other && Equals(other);
        public bool Equals(AzureSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not to restrict outbound network access.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct ClusterNetworkAccessFlag : IEquatable<ClusterNetworkAccessFlag>
    {
        private readonly string _value;

        private ClusterNetworkAccessFlag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusterNetworkAccessFlag Enabled { get; } = new ClusterNetworkAccessFlag("Enabled");
        public static ClusterNetworkAccessFlag Disabled { get; } = new ClusterNetworkAccessFlag("Disabled");

        public static bool operator ==(ClusterNetworkAccessFlag left, ClusterNetworkAccessFlag right) => left.Equals(right);
        public static bool operator !=(ClusterNetworkAccessFlag left, ClusterNetworkAccessFlag right) => !left.Equals(right);

        public static explicit operator string(ClusterNetworkAccessFlag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterNetworkAccessFlag other && Equals(other);
        public bool Equals(ClusterNetworkAccessFlag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The engine type
    /// </summary>
    [EnumType]
    public readonly struct EngineType : IEquatable<EngineType>
    {
        private readonly string _value;

        private EngineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EngineType V2 { get; } = new EngineType("V2");
        public static EngineType V3 { get; } = new EngineType("V3");

        public static bool operator ==(EngineType left, EngineType right) => left.Equals(right);
        public static bool operator !=(EngineType left, EngineType right) => !left.Equals(right);

        public static explicit operator string(EngineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EngineType other && Equals(other);
        public bool Equals(EngineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove all identities.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType None { get; } = new IdentityType("None");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType SystemAssigned_UserAssigned { get; } = new IdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates what public IP type to create - IPv4 (default), or DualStack (both IPv4 and IPv6)
    /// </summary>
    [EnumType]
    public readonly struct PublicIPType : IEquatable<PublicIPType>
    {
        private readonly string _value;

        private PublicIPType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicIPType IPv4 { get; } = new PublicIPType("IPv4");
        public static PublicIPType DualStack { get; } = new PublicIPType("DualStack");

        public static bool operator ==(PublicIPType left, PublicIPType right) => left.Equals(right);
        public static bool operator !=(PublicIPType left, PublicIPType right) => !left.Equals(right);

        public static explicit operator string(PublicIPType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicIPType other && Equals(other);
        public bool Equals(PublicIPType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Public network access to the cluster is enabled by default. When disabled, only private endpoint connection to the cluster is allowed
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
