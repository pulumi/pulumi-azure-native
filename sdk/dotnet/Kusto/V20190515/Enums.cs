// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Kusto.V20190515
{
    /// <summary>
    /// SKU name.
    /// </summary>
    [EnumType]
    public readonly struct AzureSkuName : IEquatable<AzureSkuName>
    {
        private readonly string _value;

        private AzureSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSkuName Standard_DS13_v2_1TB_PS { get; } = new AzureSkuName("Standard_DS13_v2+1TB_PS");
        public static AzureSkuName Standard_DS13_v2_2TB_PS { get; } = new AzureSkuName("Standard_DS13_v2+2TB_PS");
        public static AzureSkuName Standard_DS14_v2_3TB_PS { get; } = new AzureSkuName("Standard_DS14_v2+3TB_PS");
        public static AzureSkuName Standard_DS14_v2_4TB_PS { get; } = new AzureSkuName("Standard_DS14_v2+4TB_PS");
        public static AzureSkuName Standard_D13_v2 { get; } = new AzureSkuName("Standard_D13_v2");
        public static AzureSkuName Standard_D14_v2 { get; } = new AzureSkuName("Standard_D14_v2");
        public static AzureSkuName Standard_L8s { get; } = new AzureSkuName("Standard_L8s");
        public static AzureSkuName Standard_L16s { get; } = new AzureSkuName("Standard_L16s");
        public static AzureSkuName Standard_D11_v2 { get; } = new AzureSkuName("Standard_D11_v2");
        public static AzureSkuName Standard_D12_v2 { get; } = new AzureSkuName("Standard_D12_v2");
        public static AzureSkuName Standard_L4s { get; } = new AzureSkuName("Standard_L4s");
        public static AzureSkuName Dev_No_SLA_Standard_D11_v2 { get; } = new AzureSkuName("Dev(No SLA)_Standard_D11_v2");

        public static bool operator ==(AzureSkuName left, AzureSkuName right) => left.Equals(right);
        public static bool operator !=(AzureSkuName left, AzureSkuName right) => !left.Equals(right);

        public static explicit operator string(AzureSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSkuName other && Equals(other);
        public bool Equals(AzureSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU tier.
    /// </summary>
    [EnumType]
    public readonly struct AzureSkuTier : IEquatable<AzureSkuTier>
    {
        private readonly string _value;

        private AzureSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSkuTier Basic { get; } = new AzureSkuTier("Basic");
        public static AzureSkuTier Standard { get; } = new AzureSkuTier("Standard");

        public static bool operator ==(AzureSkuTier left, AzureSkuTier right) => left.Equals(right);
        public static bool operator !=(AzureSkuTier left, AzureSkuTier right) => !left.Equals(right);

        public static explicit operator string(AzureSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSkuTier other && Equals(other);
        public bool Equals(AzureSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data format of the message. Optionally the data format can be added to each message.
    /// </summary>
    [EnumType]
    public readonly struct DataFormat : IEquatable<DataFormat>
    {
        private readonly string _value;

        private DataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataFormat MULTIJSON { get; } = new DataFormat("MULTIJSON");
        public static DataFormat JSON { get; } = new DataFormat("JSON");
        public static DataFormat CSV { get; } = new DataFormat("CSV");
        public static DataFormat TSV { get; } = new DataFormat("TSV");
        public static DataFormat SCSV { get; } = new DataFormat("SCSV");
        public static DataFormat SOHSV { get; } = new DataFormat("SOHSV");
        public static DataFormat PSV { get; } = new DataFormat("PSV");
        public static DataFormat TXT { get; } = new DataFormat("TXT");
        public static DataFormat RAW { get; } = new DataFormat("RAW");
        public static DataFormat SINGLEJSON { get; } = new DataFormat("SINGLEJSON");
        public static DataFormat AVRO { get; } = new DataFormat("AVRO");
        public static DataFormat TSVE { get; } = new DataFormat("TSVE");

        public static bool operator ==(DataFormat left, DataFormat right) => left.Equals(right);
        public static bool operator !=(DataFormat left, DataFormat right) => !left.Equals(right);

        public static explicit operator string(DataFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataFormat other && Equals(other);
        public bool Equals(DataFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kind of the endpoint for the data connection
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind EventHub { get; } = new Kind("EventHub");
        public static Kind EventGrid { get; } = new Kind("EventGrid");
        public static Kind IotHub { get; } = new Kind("IotHub");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
