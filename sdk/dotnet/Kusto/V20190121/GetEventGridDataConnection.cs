// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Kusto.V20190121
{
    public static class GetEventGridDataConnection
    {
        /// <summary>
        /// Returns a data connection.
        /// </summary>
        public static Task<GetEventGridDataConnectionResult> InvokeAsync(GetEventGridDataConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventGridDataConnectionResult>("azure-native:kusto/v20190121:getEventGridDataConnection", args ?? new GetEventGridDataConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a data connection.
        /// </summary>
        public static Output<GetEventGridDataConnectionResult> Invoke(GetEventGridDataConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventGridDataConnectionResult>("azure-native:kusto/v20190121:getEventGridDataConnection", args ?? new GetEventGridDataConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventGridDataConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kusto cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the data connection.
        /// </summary>
        [Input("dataConnectionName", required: true)]
        public string DataConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the database in the Kusto cluster.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group containing the Kusto cluster.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEventGridDataConnectionArgs()
        {
        }
        public static new GetEventGridDataConnectionArgs Empty => new GetEventGridDataConnectionArgs();
    }

    public sealed class GetEventGridDataConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kusto cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the data connection.
        /// </summary>
        [Input("dataConnectionName", required: true)]
        public Input<string> DataConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the database in the Kusto cluster.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group containing the Kusto cluster.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetEventGridDataConnectionInvokeArgs()
        {
        }
        public static new GetEventGridDataConnectionInvokeArgs Empty => new GetEventGridDataConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventGridDataConnectionResult
    {
        /// <summary>
        /// The event hub consumer group.
        /// </summary>
        public readonly string ConsumerGroup;
        /// <summary>
        /// The data format of the message. Optionally the data format can be added to each message.
        /// </summary>
        public readonly string DataFormat;
        /// <summary>
        /// The resource ID where the event grid is configured to send events.
        /// </summary>
        public readonly string EventHubResourceId;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kind of the endpoint for the data connection
        /// Expected value is 'EventGrid'.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// </summary>
        public readonly string? MappingRuleName;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource ID of the storage account where the data resides.
        /// </summary>
        public readonly string StorageAccountResourceId;
        /// <summary>
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// </summary>
        public readonly string TableName;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEventGridDataConnectionResult(
            string consumerGroup,

            string dataFormat,

            string eventHubResourceId,

            string id,

            string kind,

            string? location,

            string? mappingRuleName,

            string name,

            string storageAccountResourceId,

            string tableName,

            string type)
        {
            ConsumerGroup = consumerGroup;
            DataFormat = dataFormat;
            EventHubResourceId = eventHubResourceId;
            Id = id;
            Kind = kind;
            Location = location;
            MappingRuleName = mappingRuleName;
            Name = name;
            StorageAccountResourceId = storageAccountResourceId;
            TableName = tableName;
            Type = type;
        }
    }
}
