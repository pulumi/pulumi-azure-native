// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Kusto.V20200215
{
    /// <summary>
    /// The data format of the message. Optionally the data format can be added to each message.
    /// </summary>
    [EnumType]
    public readonly struct EventGridDataFormat : IEquatable<EventGridDataFormat>
    {
        private readonly string _value;

        private EventGridDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventGridDataFormat MULTIJSON { get; } = new EventGridDataFormat("MULTIJSON");
        public static EventGridDataFormat JSON { get; } = new EventGridDataFormat("JSON");
        public static EventGridDataFormat CSV { get; } = new EventGridDataFormat("CSV");
        public static EventGridDataFormat TSV { get; } = new EventGridDataFormat("TSV");
        public static EventGridDataFormat SCSV { get; } = new EventGridDataFormat("SCSV");
        public static EventGridDataFormat SOHSV { get; } = new EventGridDataFormat("SOHSV");
        public static EventGridDataFormat PSV { get; } = new EventGridDataFormat("PSV");
        public static EventGridDataFormat TXT { get; } = new EventGridDataFormat("TXT");
        public static EventGridDataFormat RAW { get; } = new EventGridDataFormat("RAW");
        public static EventGridDataFormat SINGLEJSON { get; } = new EventGridDataFormat("SINGLEJSON");
        public static EventGridDataFormat AVRO { get; } = new EventGridDataFormat("AVRO");
        public static EventGridDataFormat TSVE { get; } = new EventGridDataFormat("TSVE");
        public static EventGridDataFormat PARQUET { get; } = new EventGridDataFormat("PARQUET");
        public static EventGridDataFormat ORC { get; } = new EventGridDataFormat("ORC");

        public static bool operator ==(EventGridDataFormat left, EventGridDataFormat right) => left.Equals(right);
        public static bool operator !=(EventGridDataFormat left, EventGridDataFormat right) => !left.Equals(right);

        public static explicit operator string(EventGridDataFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventGridDataFormat other && Equals(other);
        public bool Equals(EventGridDataFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kind of the endpoint for the data connection
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind EventHub { get; } = new Kind("EventHub");
        public static Kind EventGrid { get; } = new Kind("EventGrid");
        public static Kind IotHub { get; } = new Kind("IotHub");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
