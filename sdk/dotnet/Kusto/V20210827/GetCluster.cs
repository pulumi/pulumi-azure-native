// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Kusto.V20210827
{
    public static class GetCluster
    {
        /// <summary>
        /// Class representing a Kusto cluster.
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("azure-native:kusto/v20210827:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Class representing a Kusto cluster.
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetClusterResult>("azure-native:kusto/v20210827:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kusto cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group containing the Kusto cluster.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetClusterArgs()
        {
        }
    }

    public sealed class GetClusterInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kusto cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group containing the Kusto cluster.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// The cluster's accepted audiences.
        /// </summary>
        public readonly ImmutableArray<Outputs.AcceptedAudiencesResponse> AcceptedAudiences;
        /// <summary>
        /// List of allowed FQDNs(Fully Qualified Domain Name) for egress from Cluster.
        /// </summary>
        public readonly ImmutableArray<string> AllowedFqdnList;
        /// <summary>
        /// The list of ips in the format of CIDR allowed to connect to the cluster.
        /// </summary>
        public readonly ImmutableArray<string> AllowedIpRangeList;
        /// <summary>
        /// The cluster data ingestion URI.
        /// </summary>
        public readonly string DataIngestionUri;
        /// <summary>
        /// A boolean value that indicates if the cluster could be automatically stopped (due to lack of data or no activity for many days).
        /// </summary>
        public readonly bool? EnableAutoStop;
        /// <summary>
        /// A boolean value that indicates if the cluster's disks are encrypted.
        /// </summary>
        public readonly bool? EnableDiskEncryption;
        /// <summary>
        /// A boolean value that indicates if double encryption is enabled.
        /// </summary>
        public readonly bool? EnableDoubleEncryption;
        /// <summary>
        /// A boolean value that indicates if the purge operations are enabled.
        /// </summary>
        public readonly bool? EnablePurge;
        /// <summary>
        /// A boolean value that indicates if the streaming ingest is enabled.
        /// </summary>
        public readonly bool? EnableStreamingIngest;
        /// <summary>
        /// The engine type
        /// </summary>
        public readonly string? EngineType;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the cluster, if configured.
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// KeyVault properties for the cluster encryption.
        /// </summary>
        public readonly Outputs.KeyVaultPropertiesResponse? KeyVaultProperties;
        /// <summary>
        /// List of the cluster's language extensions.
        /// </summary>
        public readonly Outputs.LanguageExtensionsListResponse LanguageExtensions;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optimized auto scale definition.
        /// </summary>
        public readonly Outputs.OptimizedAutoscaleResponse? OptimizedAutoscale;
        /// <summary>
        /// The provisioned state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Public network access to the cluster is enabled by default. When disabled, only private endpoint connection to the cluster is allowed
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// Whether or not to restrict outbound network access.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        /// </summary>
        public readonly string? RestrictOutboundNetworkAccess;
        /// <summary>
        /// The SKU of the cluster.
        /// </summary>
        public readonly Outputs.AzureSkuResponse Sku;
        /// <summary>
        /// The state of the resource.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The reason for the cluster's current state.
        /// </summary>
        public readonly string StateReason;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The cluster's external tenants.
        /// </summary>
        public readonly ImmutableArray<Outputs.TrustedExternalTenantResponse> TrustedExternalTenants;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The cluster URI.
        /// </summary>
        public readonly string Uri;
        /// <summary>
        /// Virtual network definition.
        /// </summary>
        public readonly Outputs.VirtualNetworkConfigurationResponse? VirtualNetworkConfiguration;
        /// <summary>
        /// The availability zones of the cluster.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetClusterResult(
            ImmutableArray<Outputs.AcceptedAudiencesResponse> acceptedAudiences,

            ImmutableArray<string> allowedFqdnList,

            ImmutableArray<string> allowedIpRangeList,

            string dataIngestionUri,

            bool? enableAutoStop,

            bool? enableDiskEncryption,

            bool? enableDoubleEncryption,

            bool? enablePurge,

            bool? enableStreamingIngest,

            string? engineType,

            string etag,

            string id,

            Outputs.IdentityResponse? identity,

            Outputs.KeyVaultPropertiesResponse? keyVaultProperties,

            Outputs.LanguageExtensionsListResponse languageExtensions,

            string location,

            string name,

            Outputs.OptimizedAutoscaleResponse? optimizedAutoscale,

            string provisioningState,

            string? publicNetworkAccess,

            string? restrictOutboundNetworkAccess,

            Outputs.AzureSkuResponse sku,

            string state,

            string stateReason,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.TrustedExternalTenantResponse> trustedExternalTenants,

            string type,

            string uri,

            Outputs.VirtualNetworkConfigurationResponse? virtualNetworkConfiguration,

            ImmutableArray<string> zones)
        {
            AcceptedAudiences = acceptedAudiences;
            AllowedFqdnList = allowedFqdnList;
            AllowedIpRangeList = allowedIpRangeList;
            DataIngestionUri = dataIngestionUri;
            EnableAutoStop = enableAutoStop;
            EnableDiskEncryption = enableDiskEncryption;
            EnableDoubleEncryption = enableDoubleEncryption;
            EnablePurge = enablePurge;
            EnableStreamingIngest = enableStreamingIngest;
            EngineType = engineType;
            Etag = etag;
            Id = id;
            Identity = identity;
            KeyVaultProperties = keyVaultProperties;
            LanguageExtensions = languageExtensions;
            Location = location;
            Name = name;
            OptimizedAutoscale = optimizedAutoscale;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            RestrictOutboundNetworkAccess = restrictOutboundNetworkAccess;
            Sku = sku;
            State = state;
            StateReason = stateReason;
            SystemData = systemData;
            Tags = tags;
            TrustedExternalTenants = trustedExternalTenants;
            Type = type;
            Uri = uri;
            VirtualNetworkConfiguration = virtualNetworkConfiguration;
            Zones = zones;
        }
    }
}
