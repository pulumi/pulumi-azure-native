// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Kusto.V20200918
{
    /// <summary>
    /// Class representing an event hub data connection.
    /// </summary>
    [AzureNativeResourceType("azure-native:kusto/v20200918:EventHubDataConnection")]
    public partial class EventHubDataConnection : Pulumi.CustomResource
    {
        /// <summary>
        /// The event hub messages compression type
        /// </summary>
        [Output("compression")]
        public Output<string?> Compression { get; private set; } = null!;

        /// <summary>
        /// The event hub consumer group.
        /// </summary>
        [Output("consumerGroup")]
        public Output<string> ConsumerGroup { get; private set; } = null!;

        /// <summary>
        /// The data format of the message. Optionally the data format can be added to each message.
        /// </summary>
        [Output("dataFormat")]
        public Output<string?> DataFormat { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the event hub to be used to create a data connection.
        /// </summary>
        [Output("eventHubResourceId")]
        public Output<string> EventHubResourceId { get; private set; } = null!;

        /// <summary>
        /// System properties of the event hub
        /// </summary>
        [Output("eventSystemProperties")]
        public Output<ImmutableArray<string>> EventSystemProperties { get; private set; } = null!;

        /// <summary>
        /// Kind of the endpoint for the data connection
        /// Expected value is 'EventHub'.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// </summary>
        [Output("mappingRuleName")]
        public Output<string?> MappingRuleName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioned state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// </summary>
        [Output("tableName")]
        public Output<string?> TableName { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a EventHubDataConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventHubDataConnection(string name, EventHubDataConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:kusto/v20200918:EventHubDataConnection", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }

        private EventHubDataConnection(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:kusto/v20200918:EventHubDataConnection", name, null, MakeResourceOptions(options, id))
        {
        }

        private static EventHubDataConnectionArgs MakeArgs(EventHubDataConnectionArgs args)
        {
            args ??= new EventHubDataConnectionArgs();
            args.Kind = "EventHub";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-native:kusto:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20190121:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20190515:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20190907:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20191109:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20200215:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20200614:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20210101:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20210827:EventHubDataConnection"},
                    new Pulumi.Alias { Type = "azure-native:kusto/v20220201:EventHubDataConnection"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventHubDataConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventHubDataConnection Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new EventHubDataConnection(name, id, options);
        }
    }

    public sealed class EventHubDataConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Kusto cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The event hub messages compression type
        /// </summary>
        [Input("compression")]
        public InputUnion<string, Pulumi.AzureNative.Kusto.V20200918.Compression>? Compression { get; set; }

        /// <summary>
        /// The event hub consumer group.
        /// </summary>
        [Input("consumerGroup", required: true)]
        public Input<string> ConsumerGroup { get; set; } = null!;

        /// <summary>
        /// The name of the data connection.
        /// </summary>
        [Input("dataConnectionName")]
        public Input<string>? DataConnectionName { get; set; }

        /// <summary>
        /// The data format of the message. Optionally the data format can be added to each message.
        /// </summary>
        [Input("dataFormat")]
        public InputUnion<string, Pulumi.AzureNative.Kusto.V20200918.EventHubDataFormat>? DataFormat { get; set; }

        /// <summary>
        /// The name of the database in the Kusto cluster.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The resource ID of the event hub to be used to create a data connection.
        /// </summary>
        [Input("eventHubResourceId", required: true)]
        public Input<string> EventHubResourceId { get; set; } = null!;

        [Input("eventSystemProperties")]
        private InputList<string>? _eventSystemProperties;

        /// <summary>
        /// System properties of the event hub
        /// </summary>
        public InputList<string> EventSystemProperties
        {
            get => _eventSystemProperties ?? (_eventSystemProperties = new InputList<string>());
            set => _eventSystemProperties = value;
        }

        /// <summary>
        /// Kind of the endpoint for the data connection
        /// Expected value is 'EventHub'.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// Resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// </summary>
        [Input("mappingRuleName")]
        public Input<string>? MappingRuleName { get; set; }

        /// <summary>
        /// The name of the resource group containing the Kusto cluster.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        public EventHubDataConnectionArgs()
        {
        }
    }
}
