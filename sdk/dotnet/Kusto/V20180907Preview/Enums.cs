// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Kusto.V20180907Preview
{
    /// <summary>
    /// SKU name.
    /// </summary>
    [EnumType]
    public readonly struct AzureSkuName : IEquatable<AzureSkuName>
    {
        private readonly string _value;

        private AzureSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSkuName KC8 { get; } = new AzureSkuName("KC8");
        public static AzureSkuName KC16 { get; } = new AzureSkuName("KC16");
        public static AzureSkuName KS8 { get; } = new AzureSkuName("KS8");
        public static AzureSkuName KS16 { get; } = new AzureSkuName("KS16");
        public static AzureSkuName D13_v2 { get; } = new AzureSkuName("D13_v2");
        public static AzureSkuName D14_v2 { get; } = new AzureSkuName("D14_v2");
        public static AzureSkuName L8 { get; } = new AzureSkuName("L8");
        public static AzureSkuName L16 { get; } = new AzureSkuName("L16");

        public static bool operator ==(AzureSkuName left, AzureSkuName right) => left.Equals(right);
        public static bool operator !=(AzureSkuName left, AzureSkuName right) => !left.Equals(right);

        public static explicit operator string(AzureSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSkuName other && Equals(other);
        public bool Equals(AzureSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU tier.
    /// </summary>
    [EnumType]
    public readonly struct AzureSkuTier : IEquatable<AzureSkuTier>
    {
        private readonly string _value;

        private AzureSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSkuTier Standard { get; } = new AzureSkuTier("Standard");

        public static bool operator ==(AzureSkuTier left, AzureSkuTier right) => left.Equals(right);
        public static bool operator !=(AzureSkuTier left, AzureSkuTier right) => !left.Equals(right);

        public static explicit operator string(AzureSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSkuTier other && Equals(other);
        public bool Equals(AzureSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data format of the message. Optionally the data format can be added to each message.
    /// </summary>
    [EnumType]
    public readonly struct DataFormat : IEquatable<DataFormat>
    {
        private readonly string _value;

        private DataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataFormat MULTIJSON { get; } = new DataFormat("MULTIJSON");
        public static DataFormat JSON { get; } = new DataFormat("JSON");
        public static DataFormat CSV { get; } = new DataFormat("CSV");

        public static bool operator ==(DataFormat left, DataFormat right) => left.Equals(right);
        public static bool operator !=(DataFormat left, DataFormat right) => !left.Equals(right);

        public static explicit operator string(DataFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataFormat other && Equals(other);
        public bool Equals(DataFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
