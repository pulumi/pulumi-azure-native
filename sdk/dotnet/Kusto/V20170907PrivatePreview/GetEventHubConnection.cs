// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Kusto.V20170907PrivatePreview
{
    public static class GetEventHubConnection
    {
        public static Task<GetEventHubConnectionResult> InvokeAsync(GetEventHubConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEventHubConnectionResult>("azure-nextgen:kusto/v20170907privatepreview:getEventHubConnection", args ?? new GetEventHubConnectionArgs(), options.WithVersion());
    }


    public sealed class GetEventHubConnectionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kusto cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the database in the Kusto cluster.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the event hub connection.
        /// </summary>
        [Input("eventHubConnectionName", required: true)]
        public string EventHubConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group containing the Kusto cluster.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEventHubConnectionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEventHubConnectionResult
    {
        /// <summary>
        /// The event hub consumer group.
        /// </summary>
        public readonly string ConsumerGroup;
        /// <summary>
        /// The data format of the message. Optionally the data format can be added to each message.
        /// </summary>
        public readonly string? DataFormat;
        /// <summary>
        /// The resource ID of the event hub to be used to create a data connection.
        /// </summary>
        public readonly string EventHubResourceId;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// </summary>
        public readonly string? MappingRuleName;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// </summary>
        public readonly string? TableName;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEventHubConnectionResult(
            string consumerGroup,

            string? dataFormat,

            string eventHubResourceId,

            string? location,

            string? mappingRuleName,

            string name,

            string? tableName,

            string type)
        {
            ConsumerGroup = consumerGroup;
            DataFormat = dataFormat;
            EventHubResourceId = eventHubResourceId;
            Location = location;
            MappingRuleName = mappingRuleName;
            Name = name;
            TableName = tableName;
            Type = type;
        }
    }
}
