// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.AzureNative.Notebooks.V20191011Preview
{
    public static class GetNotebookProxy
    {
        /// <summary>
        /// A NotebookProxy resource.
        /// </summary>
        public static Task<GetNotebookProxyResult> InvokeAsync(GetNotebookProxyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNotebookProxyResult>("azure-native:notebooks/v20191011preview:getNotebookProxy", args ?? new GetNotebookProxyArgs(), options.WithVersion());

        /// <summary>
        /// A NotebookProxy resource.
        /// </summary>
        public static Output<GetNotebookProxyResult> Invoke(GetNotebookProxyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNotebookProxyResult>("azure-native:notebooks/v20191011preview:getNotebookProxy", args ?? new GetNotebookProxyInvokeArgs(), options.WithVersion());
    }


    public sealed class GetNotebookProxyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        public GetNotebookProxyArgs()
        {
        }
    }

    public sealed class GetNotebookProxyInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        public GetNotebookProxyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNotebookProxyResult
    {
        /// <summary>
        /// The friendly string identifier of the creator of the NotebookProxy resource.
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The public DNS name
        /// </summary>
        public readonly string? PublicDns;
        /// <summary>
        /// Allow public network access on a V-Net locked notebook resource
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The region of the NotebookProxy resource.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The unique identifier (a GUID) generated for every resource.
        /// </summary>
        public readonly string ResourceId;
        /// <summary>
        /// The alternate application ID used for auth token request in the data plane
        /// </summary>
        public readonly string? SecondaryAppId;
        /// <summary>
        /// System data for notebook resource
        /// </summary>
        public readonly Outputs.NotebookResourceSystemDataResponse? SystemData;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Storage/storageAccounts or Microsoft.Notebooks/notebookProxies.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNotebookProxyResult(
            string? hostname,

            string id,

            string name,

            string? publicDns,

            string? publicNetworkAccess,

            string? region,

            string resourceId,

            string? secondaryAppId,

            Outputs.NotebookResourceSystemDataResponse? systemData,

            string type)
        {
            Hostname = hostname;
            Id = id;
            Name = name;
            PublicDns = publicDns;
            PublicNetworkAccess = publicNetworkAccess;
            Region = region;
            ResourceId = resourceId;
            SecondaryAppId = secondaryAppId;
            SystemData = systemData;
            Type = type;
        }
    }
}
