// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ConnectedCache
{
    /// <summary>
    /// Auto Update Ring Type which is slow or fast etc.
    /// </summary>
    [EnumType]
    public readonly struct AutoUpdateRingType : IEquatable<AutoUpdateRingType>
    {
        private readonly string _value;

        private AutoUpdateRingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// customer selection of preview update install mcc on their physical vm
        /// </summary>
        public static AutoUpdateRingType Preview { get; } = new AutoUpdateRingType("Preview");
        /// <summary>
        /// customer selection of slow update to install mcc on their physical vm
        /// </summary>
        public static AutoUpdateRingType Slow { get; } = new AutoUpdateRingType("Slow");
        /// <summary>
        /// customer selection of fast / auto update to install mcc on their physical vm
        /// </summary>
        public static AutoUpdateRingType Fast { get; } = new AutoUpdateRingType("Fast");

        public static bool operator ==(AutoUpdateRingType left, AutoUpdateRingType right) => left.Equals(right);
        public static bool operator !=(AutoUpdateRingType left, AutoUpdateRingType right) => !left.Equals(right);

        public static explicit operator string(AutoUpdateRingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoUpdateRingType other && Equals(other);
        public bool Equals(AutoUpdateRingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Customer resource transit state.
    /// </summary>
    [EnumType]
    public readonly struct CustomerTransitState : IEquatable<CustomerTransitState>
    {
        private readonly string _value;

        private CustomerTransitState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// do not have transit
        /// </summary>
        public static CustomerTransitState NoTransit { get; } = new CustomerTransitState("NoTransit");
        /// <summary>
        /// transit provider and have own subscribers
        /// </summary>
        public static CustomerTransitState CombinedTransit { get; } = new CustomerTransitState("CombinedTransit");
        /// <summary>
        /// pure transit provider or network service provider
        /// </summary>
        public static CustomerTransitState TransitOnly { get; } = new CustomerTransitState("TransitOnly");

        public static bool operator ==(CustomerTransitState left, CustomerTransitState right) => left.Equals(right);
        public static bool operator !=(CustomerTransitState left, CustomerTransitState right) => !left.Equals(right);

        public static explicit operator string(CustomerTransitState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomerTransitState other && Equals(other);
        public bool Equals(CustomerTransitState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Update Cycle Type
    /// </summary>
    [EnumType]
    public readonly struct CycleType : IEquatable<CycleType>
    {
        private readonly string _value;

        private CycleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// customer selection of preview update install mcc on their physical vm
        /// </summary>
        public static CycleType Preview { get; } = new CycleType("Preview");
        /// <summary>
        /// customer selection of slow update to install mcc on their physical vm
        /// </summary>
        public static CycleType Slow { get; } = new CycleType("Slow");
        /// <summary>
        /// customer selection of fast / auto update to install mcc on their physical vm
        /// </summary>
        public static CycleType Fast { get; } = new CycleType("Fast");

        public static bool operator ==(CycleType left, CycleType right) => left.Equals(right);
        public static bool operator !=(CycleType left, CycleType right) => !left.Equals(right);

        public static explicit operator string(CycleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CycleType other && Equals(other);
        public bool Equals(CycleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operating system of the cache node
    /// </summary>
    [EnumType]
    public readonly struct OsType : IEquatable<OsType>
    {
        private readonly string _value;

        private OsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// cache node installs on windows operating system
        /// </summary>
        public static OsType Windows { get; } = new OsType("Windows");
        /// <summary>
        /// cache node installs on Linux Operating system
        /// </summary>
        public static OsType Linux { get; } = new OsType("Linux");
        /// <summary>
        /// cache node installs on Azure Eflow
        /// </summary>
        public static OsType Eflow { get; } = new OsType("Eflow");

        public static bool operator ==(OsType left, OsType right) => left.Equals(right);
        public static bool operator !=(OsType left, OsType right) => !left.Equals(right);

        public static explicit operator string(OsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OsType other && Equals(other);
        public bool Equals(OsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Cache node resource requires a proxy
    /// </summary>
    [EnumType]
    public readonly struct ProxyRequired : IEquatable<ProxyRequired>
    {
        private readonly string _value;

        private ProxyRequired(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Proxy is not required in setup
        /// </summary>
        public static ProxyRequired None { get; } = new ProxyRequired("None");
        /// <summary>
        /// proxy is required in setup
        /// </summary>
        public static ProxyRequired Required { get; } = new ProxyRequired("Required");

        public static bool operator ==(ProxyRequired left, ProxyRequired right) => left.Equals(right);
        public static bool operator !=(ProxyRequired left, ProxyRequired right) => !left.Equals(right);

        public static explicit operator string(ProxyRequired value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProxyRequired other && Equals(other);
        public bool Equals(ProxyRequired other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
