// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ConnectedCache.V20230501Preview.Inputs
{

    /// <summary>
    /// Model representing Cache Node for ConnectedCache resource
    /// </summary>
    public sealed class CacheNodeEntityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Customer requested day of week for mcc install of auto update cycle
        /// </summary>
        [Input("autoUpdateRequestedDay")]
        public Input<int>? AutoUpdateRequestedDay { get; set; }

        /// <summary>
        /// Customer requested time of the day for mcc install of auto update cycle, should be hh:mm
        /// </summary>
        [Input("autoUpdateRequestedTime")]
        public Input<string>? AutoUpdateRequestedTime { get; set; }

        /// <summary>
        /// Customer requested week of month for mcc install of auto update cycle
        /// </summary>
        [Input("autoUpdateRequestedWeek")]
        public Input<int>? AutoUpdateRequestedWeek { get; set; }

        /// <summary>
        /// Auto Update Ring Type which is slow or fast etc.
        /// </summary>
        [Input("autoUpdateRingType")]
        public InputUnion<string, Pulumi.AzureNative.ConnectedCache.V20230501Preview.AutoUpdateRingType>? AutoUpdateRingType { get; set; }

        /// <summary>
        /// Cache node resource identifier of the cache node
        /// </summary>
        [Input("cacheNodeId")]
        public Input<string>? CacheNodeId { get; set; }

        /// <summary>
        /// Cache node resource name.
        /// </summary>
        [Input("cacheNodeName")]
        public Input<string>? CacheNodeName { get; set; }

        [Input("cidrCsv")]
        private InputList<string>? _cidrCsv;

        /// <summary>
        /// Cache node resource comma separated values of Cidrs.
        /// </summary>
        public InputList<string> CidrCsv
        {
            get => _cidrCsv ?? (_cidrCsv = new InputList<string>());
            set => _cidrCsv = value;
        }

        /// <summary>
        /// Cache node resource current Cidr range precedence selection type.
        /// </summary>
        [Input("cidrSelectionType")]
        public Input<int>? CidrSelectionType { get; set; }

        /// <summary>
        /// Cache node resource customer resource Asn (autonomous system number)
        /// </summary>
        [Input("customerAsn")]
        public Input<int>? CustomerAsn { get; set; }

        /// <summary>
        /// Cache node resource customer index as string.
        /// </summary>
        [Input("customerIndex")]
        public Input<string>? CustomerIndex { get; set; }

        /// <summary>
        /// Cache node resource customer resource name.
        /// </summary>
        [Input("customerName")]
        public Input<string>? CustomerName { get; set; }

        /// <summary>
        /// FQDN(fully qualified domain name) value of the mcc cache node
        /// </summary>
        [Input("fullyQualifiedDomainName")]
        public Input<string>? FullyQualifiedDomainName { get; set; }

        /// <summary>
        /// Cache node resource Azure fully qualified resource Id.
        /// </summary>
        [Input("fullyQualifiedResourceId")]
        public Input<string>? FullyQualifiedResourceId { get; set; }

        /// <summary>
        /// Cache node resource Ip address.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Cache node resource flag for indicating if cache node is enabled.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Cache node resource flag for determining if managed by enterprise as boolean.
        /// </summary>
        [Input("isEnterpriseManaged")]
        public Input<bool>? IsEnterpriseManaged { get; set; }

        /// <summary>
        /// Cache node resource maximum allowed egress in Mbps.
        /// </summary>
        [Input("maxAllowableEgressInMbps")]
        public Input<int>? MaxAllowableEgressInMbps { get; set; }

        /// <summary>
        /// Cache node resource flag for determining if customer will be migrated.
        /// </summary>
        [Input("shouldMigrate")]
        public Input<bool>? ShouldMigrate { get; set; }

        public CacheNodeEntityArgs()
        {
        }
        public static new CacheNodeEntityArgs Empty => new CacheNodeEntityArgs();
    }
}
