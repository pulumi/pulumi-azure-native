// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Devices.V20200615.Outputs
{

    [OutputType]
    public sealed class IotHubPropertiesInvokeResponseResult
    {
        /// <summary>
        /// The shared access policies you can use to secure a connection to the IoT hub.
        /// </summary>
        public readonly ImmutableArray<Outputs.SharedAccessSignatureAuthorizationRuleInvokeResponseResult> AuthorizationPolicies;
        /// <summary>
        /// The IoT hub cloud-to-device messaging properties.
        /// </summary>
        public readonly Outputs.CloudToDevicePropertiesInvokeResponseResult? CloudToDevice;
        /// <summary>
        /// IoT hub comments.
        /// </summary>
        public readonly string? Comments;
        /// <summary>
        /// If True, file upload notifications are enabled.
        /// </summary>
        public readonly bool? EnableFileUploadNotifications;
        /// <summary>
        /// The Event Hub-compatible endpoint properties. The only possible keys to this dictionary is events. This key has to be present in the dictionary while making create or update calls for the IoT hub.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.EventHubPropertiesInvokeResponseResult>? EventHubEndpoints;
        /// <summary>
        /// The capabilities and features enabled for the IoT hub.
        /// </summary>
        public readonly string? Features;
        /// <summary>
        /// The name of the host.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The IP filter rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.IpFilterRuleInvokeResponseResult> IpFilterRules;
        /// <summary>
        /// Primary and secondary location for iot hub
        /// </summary>
        public readonly ImmutableArray<Outputs.IotHubLocationDescriptionInvokeResponseResult> Locations;
        /// <summary>
        /// The messaging endpoint properties for the file upload notification queue.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.MessagingEndpointPropertiesInvokeResponseResult>? MessagingEndpoints;
        /// <summary>
        /// Specifies the minimum TLS version to support for this hub. Can be set to "1.2" to have clients that use a TLS version below 1.2 to be rejected.
        /// </summary>
        public readonly string? MinTlsVersion;
        /// <summary>
        /// Private endpoint connections created on this IotHub
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionInvokeResponseResult> PrivateEndpointConnections;
        /// <summary>
        /// The provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Whether requests from Public Network are allowed
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The routing related properties of the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
        /// </summary>
        public readonly Outputs.RoutingPropertiesInvokeResponseResult? Routing;
        /// <summary>
        /// The hub state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.StorageEndpointPropertiesInvokeResponseResult>? StorageEndpoints;

        [OutputConstructor]
        private IotHubPropertiesInvokeResponseResult(
            ImmutableArray<Outputs.SharedAccessSignatureAuthorizationRuleInvokeResponseResult> authorizationPolicies,

            Outputs.CloudToDevicePropertiesInvokeResponseResult? cloudToDevice,

            string? comments,

            bool? enableFileUploadNotifications,

            ImmutableDictionary<string, Outputs.EventHubPropertiesInvokeResponseResult>? eventHubEndpoints,

            string? features,

            string hostName,

            ImmutableArray<Outputs.IpFilterRuleInvokeResponseResult> ipFilterRules,

            ImmutableArray<Outputs.IotHubLocationDescriptionInvokeResponseResult> locations,

            ImmutableDictionary<string, Outputs.MessagingEndpointPropertiesInvokeResponseResult>? messagingEndpoints,

            string? minTlsVersion,

            ImmutableArray<Outputs.PrivateEndpointConnectionInvokeResponseResult> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            Outputs.RoutingPropertiesInvokeResponseResult? routing,

            string state,

            ImmutableDictionary<string, Outputs.StorageEndpointPropertiesInvokeResponseResult>? storageEndpoints)
        {
            AuthorizationPolicies = authorizationPolicies;
            CloudToDevice = cloudToDevice;
            Comments = comments;
            EnableFileUploadNotifications = enableFileUploadNotifications;
            EventHubEndpoints = eventHubEndpoints;
            Features = features;
            HostName = hostName;
            IpFilterRules = ipFilterRules;
            Locations = locations;
            MessagingEndpoints = messagingEndpoints;
            MinTlsVersion = minTlsVersion;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            Routing = routing;
            State = state;
            StorageEndpoints = storageEndpoints;
        }
    }
}
