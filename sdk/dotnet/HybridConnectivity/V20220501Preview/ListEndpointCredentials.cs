// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridConnectivity.V20220501Preview
{
    public static class ListEndpointCredentials
    {
        /// <summary>
        /// The endpoint access for the target resource.
        /// </summary>
        public static Task<ListEndpointCredentialsResult> InvokeAsync(ListEndpointCredentialsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ListEndpointCredentialsResult>("azure-native:hybridconnectivity/v20220501preview:listEndpointCredentials", args ?? new ListEndpointCredentialsArgs(), options.WithDefaults());

        /// <summary>
        /// The endpoint access for the target resource.
        /// </summary>
        public static Output<ListEndpointCredentialsResult> Invoke(ListEndpointCredentialsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<ListEndpointCredentialsResult>("azure-native:hybridconnectivity/v20220501preview:listEndpointCredentials", args ?? new ListEndpointCredentialsInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListEndpointCredentialsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The endpoint name.
        /// </summary>
        [Input("endpointName", required: true)]
        public string EndpointName { get; set; } = null!;

        /// <summary>
        /// The is how long the endpoint access token is valid (in seconds).
        /// </summary>
        [Input("expiresin")]
        public int? Expiresin { get; set; }

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource to be connected.
        /// </summary>
        [Input("resourceUri", required: true)]
        public string ResourceUri { get; set; } = null!;

        public ListEndpointCredentialsArgs()
        {
        }
        public static new ListEndpointCredentialsArgs Empty => new ListEndpointCredentialsArgs();
    }

    public sealed class ListEndpointCredentialsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The endpoint name.
        /// </summary>
        [Input("endpointName", required: true)]
        public Input<string> EndpointName { get; set; } = null!;

        /// <summary>
        /// The is how long the endpoint access token is valid (in seconds).
        /// </summary>
        [Input("expiresin")]
        public Input<int>? Expiresin { get; set; }

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource to be connected.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        public ListEndpointCredentialsInvokeArgs()
        {
        }
        public static new ListEndpointCredentialsInvokeArgs Empty => new ListEndpointCredentialsInvokeArgs();
    }


    [OutputType]
    public sealed class ListEndpointCredentialsResult
    {
        /// <summary>
        /// Access key for hybrid connection.
        /// </summary>
        public readonly string AccessKey;
        /// <summary>
        /// The expiration of access key in unix time.
        /// </summary>
        public readonly double? ExpiresOn;
        /// <summary>
        /// Azure Relay hybrid connection name for the resource.
        /// </summary>
        public readonly string HybridConnectionName;
        /// <summary>
        /// The namespace name.
        /// </summary>
        public readonly string NamespaceName;
        /// <summary>
        /// The suffix domain name of relay namespace.
        /// </summary>
        public readonly string NamespaceNameSuffix;

        [OutputConstructor]
        private ListEndpointCredentialsResult(
            string accessKey,

            double? expiresOn,

            string hybridConnectionName,

            string namespaceName,

            string namespaceNameSuffix)
        {
            AccessKey = accessKey;
            ExpiresOn = expiresOn;
            HybridConnectionName = hybridConnectionName;
            NamespaceName = namespaceName;
            NamespaceNameSuffix = namespaceNameSuffix;
        }
    }
}
