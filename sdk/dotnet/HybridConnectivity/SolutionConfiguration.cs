// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridConnectivity
{
    /// <summary>
    /// Solution Configuration
    /// 
    /// Uses Azure REST API version 2024-12-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:hybridconnectivity:SolutionConfiguration")]
    public partial class SolutionConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The last time resources were inventoried
        /// </summary>
        [Output("lastSyncTime")]
        public Output<string> LastSyncTime { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The resource provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Solution settings
        /// </summary>
        [Output("solutionSettings")]
        public Output<ImmutableDictionary<string, string>?> SolutionSettings { get; private set; } = null!;

        /// <summary>
        /// The type of the solution
        /// </summary>
        [Output("solutionType")]
        public Output<string> SolutionType { get; private set; } = null!;

        /// <summary>
        /// The status of solution configurations
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The detailed message of status details
        /// </summary>
        [Output("statusDetails")]
        public Output<string> StatusDetails { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SolutionConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SolutionConfiguration(string name, SolutionConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:hybridconnectivity:SolutionConfiguration", name, args ?? new SolutionConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SolutionConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:hybridconnectivity:SolutionConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:hybridconnectivity/v20241201:SolutionConfiguration" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SolutionConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SolutionConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SolutionConfiguration(name, id, options);
        }
    }

    public sealed class SolutionConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        /// <summary>
        /// Represent Solution Configuration Resource.
        /// </summary>
        [Input("solutionConfiguration")]
        public Input<string>? SolutionConfiguration { get; set; }

        [Input("solutionSettings")]
        private InputMap<string>? _solutionSettings;

        /// <summary>
        /// Solution settings
        /// </summary>
        public InputMap<string> SolutionSettings
        {
            get => _solutionSettings ?? (_solutionSettings = new InputMap<string>());
            set => _solutionSettings = value;
        }

        /// <summary>
        /// The type of the solution
        /// </summary>
        [Input("solutionType", required: true)]
        public Input<string> SolutionType { get; set; } = null!;

        public SolutionConfigurationArgs()
        {
        }
        public static new SolutionConfigurationArgs Empty => new SolutionConfigurationArgs();
    }
}
