// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CostManagement.V20221005Preview
{
    /// <summary>
    /// Markup rule
    /// </summary>
    [AzureNativeResourceType("azure-native:costmanagement/v20221005preview:MarkupRule")]
    public partial class MarkupRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Customer information for the markup rule.
        /// </summary>
        [Output("customerDetails")]
        public Output<Outputs.CustomerMetadataResponse> CustomerDetails { get; private set; } = null!;

        /// <summary>
        /// The description of the markup rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
        /// </summary>
        [Output("eTag")]
        public Output<string?> ETag { get; private set; } = null!;

        /// <summary>
        /// Ending date of the markup rule.
        /// </summary>
        [Output("endDate")]
        public Output<string?> EndDate { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The markup percentage of the rule.
        /// </summary>
        [Output("percentage")]
        public Output<double> Percentage { get; private set; } = null!;

        /// <summary>
        /// Starting date of the markup rule.
        /// </summary>
        [Output("startDate")]
        public Output<string> StartDate { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MarkupRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MarkupRule(string name, MarkupRuleArgs args, CustomResourceOptions? options = null)
            : base("azure-native:costmanagement/v20221005preview:MarkupRule", name, args ?? new MarkupRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MarkupRule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:costmanagement/v20221005preview:MarkupRule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MarkupRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MarkupRule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MarkupRule(name, id, options);
        }
    }

    public sealed class MarkupRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// BillingAccount ID
        /// </summary>
        [Input("billingAccountId", required: true)]
        public Input<string> BillingAccountId { get; set; } = null!;

        /// <summary>
        /// BillingProfile ID
        /// </summary>
        [Input("billingProfileId", required: true)]
        public Input<string> BillingProfileId { get; set; } = null!;

        /// <summary>
        /// Customer information for the markup rule.
        /// </summary>
        [Input("customerDetails", required: true)]
        public Input<Inputs.CustomerMetadataArgs> CustomerDetails { get; set; } = null!;

        /// <summary>
        /// The description of the markup rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
        /// </summary>
        [Input("eTag")]
        public Input<string>? ETag { get; set; }

        /// <summary>
        /// Ending date of the markup rule.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// Markup rule name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The markup percentage of the rule.
        /// </summary>
        [Input("percentage", required: true)]
        public Input<double> Percentage { get; set; } = null!;

        /// <summary>
        /// Starting date of the markup rule.
        /// </summary>
        [Input("startDate", required: true)]
        public Input<string> StartDate { get; set; } = null!;

        public MarkupRuleArgs()
        {
        }
        public static new MarkupRuleArgs Empty => new MarkupRuleArgs();
    }
}
