// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CostManagement.V20230701Preview
{
    public static class GetExport
    {
        /// <summary>
        /// The operation to get the export for the defined scope by export name.
        /// </summary>
        public static Task<GetExportResult> InvokeAsync(GetExportArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExportResult>("azure-native:costmanagement/v20230701preview:getExport", args ?? new GetExportArgs(), options.WithDefaults());

        /// <summary>
        /// The operation to get the export for the defined scope by export name.
        /// </summary>
        public static Output<GetExportResult> Invoke(GetExportInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExportResult>("azure-native:costmanagement/v20230701preview:getExport", args ?? new GetExportInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExportArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// May be used to expand the properties within an export. Currently only 'runHistory' is supported and will return information for the last 10 runs of the export.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// Export Name.
        /// </summary>
        [Input("exportName", required: true)]
        public string ExportName { get; set; } = null!;

        /// <summary>
        /// The scope associated with export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetExportArgs()
        {
        }
        public static new GetExportArgs Empty => new GetExportArgs();
    }

    public sealed class GetExportInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// May be used to expand the properties within an export. Currently only 'runHistory' is supported and will return information for the last 10 runs of the export.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// Export Name.
        /// </summary>
        [Input("exportName", required: true)]
        public Input<string> ExportName { get; set; } = null!;

        /// <summary>
        /// The scope associated with export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetExportInvokeArgs()
        {
        }
        public static new GetExportInvokeArgs Empty => new GetExportInvokeArgs();
    }


    [OutputType]
    public sealed class GetExportResult
    {
        /// <summary>
        /// Allow customers to select compress data(gzip) for exports. This setting will enable destination file compression scheme at runtime. By default set to None.
        /// </summary>
        public readonly string? CompressionMode;
        /// <summary>
        /// Allow customers to select overwrite data(OverwritePreviousReport) for exports. This setting will enable overwrite data for the same month in customer storage account. By default set to CreateNewReport.
        /// </summary>
        public readonly string? DataOverwriteBehavior;
        /// <summary>
        /// Has the definition for the export.
        /// </summary>
        public readonly Outputs.ExportDefinitionResponse Definition;
        /// <summary>
        /// Has delivery information for the export.
        /// </summary>
        public readonly Outputs.ExportDeliveryInfoResponse DeliveryInfo;
        /// <summary>
        /// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
        /// </summary>
        public readonly string? ETag;
        /// <summary>
        /// The export description set by customer at time of export creation/update.
        /// </summary>
        public readonly string? ExportDescription;
        /// <summary>
        /// The format of the export being delivered. Currently only 'Csv' is supported.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// Resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The managed identity associated with Export
        /// </summary>
        public readonly Outputs.SystemAssignedServiceIdentityResponse? Identity;
        /// <summary>
        /// The location of the Export's managed identity. Only required when utilizing managed identity.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// If the export has an active schedule, provides an estimate of the next run time.
        /// </summary>
        public readonly string NextRunTimeEstimate;
        /// <summary>
        /// If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file. Note: this option is currently available only for Microsoft Customer Agreement commerce scopes.
        /// </summary>
        public readonly bool? PartitionData;
        /// <summary>
        /// If requested, has the most recent run history for the export.
        /// </summary>
        public readonly Outputs.ExportExecutionListResultResponse? RunHistory;
        /// <summary>
        /// Has schedule information for the export.
        /// </summary>
        public readonly Outputs.ExportScheduleResponse? Schedule;
        /// <summary>
        /// The export suspension reason if export is in SystemSuspended state.
        /// </summary>
        public readonly Outputs.ExportSuspensionContextResponse SystemSuspensionContext;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetExportResult(
            string? compressionMode,

            string? dataOverwriteBehavior,

            Outputs.ExportDefinitionResponse definition,

            Outputs.ExportDeliveryInfoResponse deliveryInfo,

            string? eTag,

            string? exportDescription,

            string? format,

            string id,

            Outputs.SystemAssignedServiceIdentityResponse? identity,

            string? location,

            string name,

            string nextRunTimeEstimate,

            bool? partitionData,

            Outputs.ExportExecutionListResultResponse? runHistory,

            Outputs.ExportScheduleResponse? schedule,

            Outputs.ExportSuspensionContextResponse systemSuspensionContext,

            string type)
        {
            CompressionMode = compressionMode;
            DataOverwriteBehavior = dataOverwriteBehavior;
            Definition = definition;
            DeliveryInfo = deliveryInfo;
            ETag = eTag;
            ExportDescription = exportDescription;
            Format = format;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            NextRunTimeEstimate = nextRunTimeEstimate;
            PartitionData = partitionData;
            RunHistory = runHistory;
            Schedule = schedule;
            SystemSuspensionContext = systemSuspensionContext;
            Type = type;
        }
    }
}
