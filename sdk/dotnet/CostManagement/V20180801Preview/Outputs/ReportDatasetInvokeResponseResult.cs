// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.CostManagement.V20180801Preview.Outputs
{

    [OutputType]
    public sealed class ReportDatasetInvokeResponseResult
    {
        /// <summary>
        /// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ReportAggregationInvokeResponseResult>? Aggregation;
        /// <summary>
        /// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
        /// </summary>
        public readonly Outputs.ReportDatasetConfigurationInvokeResponseResult? Configuration;
        /// <summary>
        /// Has filter expression to use in the report.
        /// </summary>
        public readonly Outputs.ReportFilterInvokeResponseResult? Filter;
        /// <summary>
        /// The granularity of rows in the report.
        /// </summary>
        public readonly string? Granularity;
        /// <summary>
        /// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
        /// </summary>
        public readonly ImmutableArray<Outputs.ReportGroupingInvokeResponseResult> Grouping;

        [OutputConstructor]
        private ReportDatasetInvokeResponseResult(
            ImmutableDictionary<string, Outputs.ReportAggregationInvokeResponseResult>? aggregation,

            Outputs.ReportDatasetConfigurationInvokeResponseResult? configuration,

            Outputs.ReportFilterInvokeResponseResult? filter,

            string? granularity,

            ImmutableArray<Outputs.ReportGroupingInvokeResponseResult> grouping)
        {
            Aggregation = aggregation;
            Configuration = configuration;
            Filter = filter;
            Granularity = granularity;
            Grouping = grouping;
        }
    }
}
