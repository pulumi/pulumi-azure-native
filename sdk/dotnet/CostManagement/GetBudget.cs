// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CostManagement
{
    public static class GetBudget
    {
        /// <summary>
        /// Gets the budget for the scope by budget name.
        /// Azure REST API version: 2023-04-01-preview.
        /// 
        /// Other available API versions: 2019-04-01-preview, 2023-08-01, 2023-09-01, 2023-11-01.
        /// </summary>
        public static Task<GetBudgetResult> InvokeAsync(GetBudgetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBudgetResult>("azure-native:costmanagement:getBudget", args ?? new GetBudgetArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the budget for the scope by budget name.
        /// Azure REST API version: 2023-04-01-preview.
        /// 
        /// Other available API versions: 2019-04-01-preview, 2023-08-01, 2023-09-01, 2023-11-01.
        /// </summary>
        public static Output<GetBudgetResult> Invoke(GetBudgetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBudgetResult>("azure-native:costmanagement:getBudget", args ?? new GetBudgetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBudgetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Budget Name.
        /// </summary>
        [Input("budgetName", required: true)]
        public string BudgetName { get; set; } = null!;

        /// <summary>
        /// The scope associated with budget operations.
        /// 
        ///  Supported scopes for **CategoryType: Cost**
        /// 
        ///  Azure RBAC Scopes:
        /// - '/subscriptions/{subscriptionId}/' for subscription scope
        /// - '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope
        /// - '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope
        /// 
        ///  EA (Enterprise Agreement) Scopes:
        /// 
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
        /// 
        ///  MCA (Modern Customer Agreement) Scopes:
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' for customer scope (CSP only)
        /// 
        ///  Supported scopes for **CategoryType: ReservationUtilization**
        /// 
        ///  EA (Enterprise Agreement) Scopes:
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account Scope
        /// 
        /// MCA (Modern Customer Agreement) Scopes:
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope (non-CSP only)
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' for customer scope (CSP only)
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetBudgetArgs()
        {
        }
        public static new GetBudgetArgs Empty => new GetBudgetArgs();
    }

    public sealed class GetBudgetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Budget Name.
        /// </summary>
        [Input("budgetName", required: true)]
        public Input<string> BudgetName { get; set; } = null!;

        /// <summary>
        /// The scope associated with budget operations.
        /// 
        ///  Supported scopes for **CategoryType: Cost**
        /// 
        ///  Azure RBAC Scopes:
        /// - '/subscriptions/{subscriptionId}/' for subscription scope
        /// - '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope
        /// - '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope
        /// 
        ///  EA (Enterprise Agreement) Scopes:
        /// 
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
        /// 
        ///  MCA (Modern Customer Agreement) Scopes:
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' for customer scope (CSP only)
        /// 
        ///  Supported scopes for **CategoryType: ReservationUtilization**
        /// 
        ///  EA (Enterprise Agreement) Scopes:
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account Scope
        /// 
        /// MCA (Modern Customer Agreement) Scopes:
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope (non-CSP only)
        /// - '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' for customer scope (CSP only)
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetBudgetInvokeArgs()
        {
        }
        public static new GetBudgetInvokeArgs Empty => new GetBudgetInvokeArgs();
    }


    [OutputType]
    public sealed class GetBudgetResult
    {
        /// <summary>
        /// The total amount of cost to track with the budget.
        /// 
        ///  Supported for CategoryType(s): Cost.
        /// 
        ///  Required for CategoryType(s): Cost.
        /// </summary>
        public readonly double? Amount;
        /// <summary>
        /// The category of the budget.
        /// - 'Cost' defines a Budget.
        /// - 'ReservationUtilization' defines a Reservation Utilization Alert Rule.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// The current amount of cost which is being tracked for a budget.
        /// 
        ///  Supported for CategoryType(s): Cost.
        /// </summary>
        public readonly Outputs.CurrentSpendResponse CurrentSpend;
        /// <summary>
        /// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
        /// </summary>
        public readonly string? ETag;
        /// <summary>
        /// May be used to filter budgets by user-specified dimensions and/or tags.
        /// 
        ///  Supported for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        public readonly Outputs.BudgetFilterResponse? Filter;
        /// <summary>
        /// The forecasted cost which is being tracked for a budget.
        /// 
        ///  Supported for CategoryType(s): Cost.
        /// </summary>
        public readonly Outputs.ForecastSpendResponse ForecastSpend;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Dictionary of notifications associated with the budget.
        /// 
        ///  Supported for CategoryType(s): Cost, ReservationUtilization.
        /// 
        /// - Constraints for **CategoryType: Cost** - Budget can have up to 5 notifications with thresholdType: Actual and 5 notifications with thresholdType: Forecasted.
        /// - Constraints for **CategoryType: ReservationUtilization** - Only one notification allowed. thresholdType is not applicable.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.NotificationResponse>? Notifications;
        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
        /// 
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        /// 
        ///  Supported timeGrainTypes for **CategoryType: Cost**
        /// 
        /// - Monthly
        /// - Quarterly
        /// - Annually
        /// - BillingMonth*
        /// - BillingQuarter*
        /// - BillingAnnual*
        /// 
        ///   *only supported for Web Direct customers.
        /// 
        ///  Supported timeGrainTypes for **CategoryType: ReservationUtilization**
        /// - Last7Days
        /// - Last30Days
        /// 
        ///  Required for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        public readonly string TimeGrain;
        /// <summary>
        /// The time period that defines the active period of the budget. The budget will evaluate data on or after the startDate and will expire on the endDate.
        /// 
        ///  Supported for CategoryType(s): Cost, ReservationUtilization.
        /// 
        ///  Required for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        public readonly Outputs.BudgetTimePeriodResponse TimePeriod;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetBudgetResult(
            double? amount,

            string category,

            Outputs.CurrentSpendResponse currentSpend,

            string? eTag,

            Outputs.BudgetFilterResponse? filter,

            Outputs.ForecastSpendResponse forecastSpend,

            string id,

            string name,

            ImmutableDictionary<string, Outputs.NotificationResponse>? notifications,

            string timeGrain,

            Outputs.BudgetTimePeriodResponse timePeriod,

            string type)
        {
            Amount = amount;
            Category = category;
            CurrentSpend = currentSpend;
            ETag = eTag;
            Filter = filter;
            ForecastSpend = forecastSpend;
            Id = id;
            Name = name;
            Notifications = notifications;
            TimeGrain = timeGrain;
            TimePeriod = timePeriod;
            Type = type;
        }
    }
}
