// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.CostManagement.V20220601Preview
{
    /// <summary>
    /// Days of Week.
    /// </summary>
    [EnumType]
    public readonly struct DaysOfWeek : IEquatable<DaysOfWeek>
    {
        private readonly string _value;

        private DaysOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DaysOfWeek Monday { get; } = new DaysOfWeek("Monday");
        public static DaysOfWeek Tuesday { get; } = new DaysOfWeek("Tuesday");
        public static DaysOfWeek Wednesday { get; } = new DaysOfWeek("Wednesday");
        public static DaysOfWeek Thursday { get; } = new DaysOfWeek("Thursday");
        public static DaysOfWeek Friday { get; } = new DaysOfWeek("Friday");
        public static DaysOfWeek Saturday { get; } = new DaysOfWeek("Saturday");
        public static DaysOfWeek Sunday { get; } = new DaysOfWeek("Sunday");

        public static bool operator ==(DaysOfWeek left, DaysOfWeek right) => left.Equals(right);
        public static bool operator !=(DaysOfWeek left, DaysOfWeek right) => !left.Equals(right);

        public static explicit operator string(DaysOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DaysOfWeek other && Equals(other);
        public bool Equals(DaysOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Destination of the view data. Currently only csv format is supported.
    /// </summary>
    [EnumType]
    public readonly struct FileFormat : IEquatable<FileFormat>
    {
        private readonly string _value;

        private FileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FileFormat Csv { get; } = new FileFormat("Csv");

        public static bool operator ==(FileFormat left, FileFormat right) => left.Equals(right);
        public static bool operator !=(FileFormat left, FileFormat right) => !left.Equals(right);

        public static explicit operator string(FileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileFormat other && Equals(other);
        public bool Equals(FileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Frequency of the schedule.
    /// </summary>
    [EnumType]
    public readonly struct ScheduleFrequency : IEquatable<ScheduleFrequency>
    {
        private readonly string _value;

        private ScheduleFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cost analysis data will be emailed every day.
        /// </summary>
        public static ScheduleFrequency Daily { get; } = new ScheduleFrequency("Daily");
        /// <summary>
        /// Cost analysis data will be emailed every week.
        /// </summary>
        public static ScheduleFrequency Weekly { get; } = new ScheduleFrequency("Weekly");
        /// <summary>
        /// Cost analysis data will be emailed every month.
        /// </summary>
        public static ScheduleFrequency Monthly { get; } = new ScheduleFrequency("Monthly");

        public static bool operator ==(ScheduleFrequency left, ScheduleFrequency right) => left.Equals(right);
        public static bool operator !=(ScheduleFrequency left, ScheduleFrequency right) => !left.Equals(right);

        public static explicit operator string(ScheduleFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduleFrequency other && Equals(other);
        public bool Equals(ScheduleFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kind of the scheduled action.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledActionKind : IEquatable<ScheduledActionKind>
    {
        private readonly string _value;

        private ScheduledActionKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cost analysis data will be emailed.
        /// </summary>
        public static ScheduledActionKind Email { get; } = new ScheduledActionKind("Email");
        /// <summary>
        /// Cost anomaly information will be emailed. Available only on subscription scope at daily frequency. If no anomaly is detected on the resource, an email won't be sent.
        /// </summary>
        public static ScheduledActionKind InsightAlert { get; } = new ScheduledActionKind("InsightAlert");

        public static bool operator ==(ScheduledActionKind left, ScheduledActionKind right) => left.Equals(right);
        public static bool operator !=(ScheduledActionKind left, ScheduledActionKind right) => !left.Equals(right);

        public static explicit operator string(ScheduledActionKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledActionKind other && Equals(other);
        public bool Equals(ScheduledActionKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the scheduled action.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledActionStatus : IEquatable<ScheduledActionStatus>
    {
        private readonly string _value;

        private ScheduledActionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Scheduled action is saved but will not be executed.
        /// </summary>
        public static ScheduledActionStatus Disabled { get; } = new ScheduledActionStatus("Disabled");
        /// <summary>
        /// Scheduled action is saved and will be executed.
        /// </summary>
        public static ScheduledActionStatus Enabled { get; } = new ScheduledActionStatus("Enabled");

        public static bool operator ==(ScheduledActionStatus left, ScheduledActionStatus right) => left.Equals(right);
        public static bool operator !=(ScheduledActionStatus left, ScheduledActionStatus right) => !left.Equals(right);

        public static explicit operator string(ScheduledActionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledActionStatus other && Equals(other);
        public bool Equals(ScheduledActionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Weeks of month.
    /// </summary>
    [EnumType]
    public readonly struct WeeksOfMonth : IEquatable<WeeksOfMonth>
    {
        private readonly string _value;

        private WeeksOfMonth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WeeksOfMonth First { get; } = new WeeksOfMonth("First");
        public static WeeksOfMonth Second { get; } = new WeeksOfMonth("Second");
        public static WeeksOfMonth Third { get; } = new WeeksOfMonth("Third");
        public static WeeksOfMonth Fourth { get; } = new WeeksOfMonth("Fourth");
        public static WeeksOfMonth Last { get; } = new WeeksOfMonth("Last");

        public static bool operator ==(WeeksOfMonth left, WeeksOfMonth right) => left.Equals(right);
        public static bool operator !=(WeeksOfMonth left, WeeksOfMonth right) => !left.Equals(right);

        public static explicit operator string(WeeksOfMonth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeeksOfMonth other && Equals(other);
        public bool Equals(WeeksOfMonth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
