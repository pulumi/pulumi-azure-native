// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.CostManagement.V20200301Preview
{
    /// <summary>
    /// Method of cost allocation for the rule
    /// </summary>
    [EnumType]
    public readonly struct CostAllocationPolicyType : IEquatable<CostAllocationPolicyType>
    {
        private readonly string _value;

        private CostAllocationPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CostAllocationPolicyType FixedProportion { get; } = new CostAllocationPolicyType("FixedProportion");

        public static bool operator ==(CostAllocationPolicyType left, CostAllocationPolicyType right) => left.Equals(right);
        public static bool operator !=(CostAllocationPolicyType left, CostAllocationPolicyType right) => !left.Equals(right);

        public static explicit operator string(CostAllocationPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CostAllocationPolicyType other && Equals(other);
        public bool Equals(CostAllocationPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of resources contained in this cost allocation rule
    /// </summary>
    [EnumType]
    public readonly struct CostAllocationResourceType : IEquatable<CostAllocationResourceType>
    {
        private readonly string _value;

        private CostAllocationResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates an Azure dimension such as a subscription id or resource group name is being used for allocation.
        /// </summary>
        public static CostAllocationResourceType Dimension { get; } = new CostAllocationResourceType("Dimension");
        /// <summary>
        /// Allocates cost based on Azure Tag key value pairs.
        /// </summary>
        public static CostAllocationResourceType Tag { get; } = new CostAllocationResourceType("Tag");

        public static bool operator ==(CostAllocationResourceType left, CostAllocationResourceType right) => left.Equals(right);
        public static bool operator !=(CostAllocationResourceType left, CostAllocationResourceType right) => !left.Equals(right);

        public static explicit operator string(CostAllocationResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CostAllocationResourceType other && Equals(other);
        public bool Equals(CostAllocationResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the rule
    /// </summary>
    [EnumType]
    public readonly struct RuleStatus : IEquatable<RuleStatus>
    {
        private readonly string _value;

        private RuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Rule is saved but not used to allocate costs.
        /// </summary>
        public static RuleStatus NotActive { get; } = new RuleStatus("NotActive");
        /// <summary>
        /// Rule is saved and impacting cost allocation.
        /// </summary>
        public static RuleStatus Active { get; } = new RuleStatus("Active");
        /// <summary>
        /// Rule is saved and cost allocation is being updated. Readonly value that cannot be submitted in a put request.
        /// </summary>
        public static RuleStatus Processing { get; } = new RuleStatus("Processing");

        public static bool operator ==(RuleStatus left, RuleStatus right) => left.Equals(right);
        public static bool operator !=(RuleStatus left, RuleStatus right) => !left.Equals(right);

        public static explicit operator string(RuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleStatus other && Equals(other);
        public bool Equals(RuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
