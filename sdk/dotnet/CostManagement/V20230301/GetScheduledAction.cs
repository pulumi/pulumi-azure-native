// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CostManagement.V20230301
{
    public static class GetScheduledAction
    {
        /// <summary>
        /// Get the private scheduled action by name.
        /// </summary>
        public static Task<GetScheduledActionResult> InvokeAsync(GetScheduledActionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScheduledActionResult>("azure-native:costmanagement/v20230301:getScheduledAction", args ?? new GetScheduledActionArgs(), options.WithDefaults());

        /// <summary>
        /// Get the private scheduled action by name.
        /// </summary>
        public static Output<GetScheduledActionResult> Invoke(GetScheduledActionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScheduledActionResult>("azure-native:costmanagement/v20230301:getScheduledAction", args ?? new GetScheduledActionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScheduledActionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Scheduled action name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetScheduledActionArgs()
        {
        }
        public static new GetScheduledActionArgs Empty => new GetScheduledActionArgs();
    }

    public sealed class GetScheduledActionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Scheduled action name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetScheduledActionInvokeArgs()
        {
        }
        public static new GetScheduledActionInvokeArgs Empty => new GetScheduledActionInvokeArgs();
    }


    [OutputType]
    public sealed class GetScheduledActionResult
    {
        /// <summary>
        /// Scheduled action name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Resource Etag. For update calls, eTag is optional and can be specified to achieve optimistic concurrency. Fetch the resource's eTag by doing a 'GET' call first and then including the latest eTag as part of the request body or 'If-Match' header while performing the update. For create calls, eTag is not required.
        /// </summary>
        public readonly string ETag;
        /// <summary>
        /// Destination format of the view data. This is optional.
        /// </summary>
        public readonly Outputs.FileDestinationResponse? FileDestination;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kind of the scheduled action.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Notification properties based on scheduled action kind.
        /// </summary>
        public readonly Outputs.NotificationPropertiesResponse Notification;
        /// <summary>
        /// Email address of the point of contact that should get the unsubscribe requests and notification emails.
        /// </summary>
        public readonly string? NotificationEmail;
        /// <summary>
        /// Schedule of the scheduled action.
        /// </summary>
        public readonly Outputs.SchedulePropertiesResponse Schedule;
        /// <summary>
        /// Cost Management scope like 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// Status of the scheduled action.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Kind of the scheduled action.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Cost analysis viewId used for scheduled action. For example, '/providers/Microsoft.CostManagement/views/swaggerExample'
        /// </summary>
        public readonly string ViewId;

        [OutputConstructor]
        private GetScheduledActionResult(
            string displayName,

            string eTag,

            Outputs.FileDestinationResponse? fileDestination,

            string id,

            string? kind,

            string name,

            Outputs.NotificationPropertiesResponse notification,

            string? notificationEmail,

            Outputs.SchedulePropertiesResponse schedule,

            string? scope,

            string status,

            Outputs.SystemDataResponse systemData,

            string type,

            string viewId)
        {
            DisplayName = displayName;
            ETag = eTag;
            FileDestination = fileDestination;
            Id = id;
            Kind = kind;
            Name = name;
            Notification = notification;
            NotificationEmail = notificationEmail;
            Schedule = schedule;
            Scope = scope;
            Status = status;
            SystemData = systemData;
            Type = type;
            ViewId = viewId;
        }
    }
}
