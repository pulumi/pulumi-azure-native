// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CostManagement.V20230401Preview.Outputs
{

    /// <summary>
    /// The notification associated with a budget.
    /// 
    ///  Supported for CategoryType(s): Cost, ReservationUtilization.
    /// </summary>
    [OutputType]
    public sealed class NotificationResponse
    {
        /// <summary>
        /// Email addresses to send the notification to when the threshold is breached. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
        /// 
        ///  Supported for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        public readonly ImmutableArray<string> ContactEmails;
        /// <summary>
        /// Subscription or Resource Group scopes only. Action groups to send the notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id.
        /// 
        ///  Supported for CategoryType(s): Cost.
        /// </summary>
        public readonly ImmutableArray<string> ContactGroups;
        /// <summary>
        /// Subscription or Resource Group scopes only. Contact roles to send the notification to when the threshold is breached.
        /// 
        ///  Supported for CategoryType(s): Cost.
        /// </summary>
        public readonly ImmutableArray<string> ContactRoles;
        /// <summary>
        /// The notification is enabled or not.
        /// 
        ///  Supported for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Frequency of a notification. Represents how long the notification will be silent after triggering an alert for a threshold breach. If not specified, the frequency will be set by default based on the timeGrain (Weekly when timeGrain: Last7Days, Monthly when timeGrain: Last30Days).
        /// 
        ///  Supported for CategoryType(s): ReservationUtilization.
        /// </summary>
        public readonly string? Frequency;
        /// <summary>
        /// Language in which the recipient will receive the notification, 
        /// 
        ///  Supported for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        public readonly string? Locale;
        /// <summary>
        /// The comparison operator.
        /// 
        ///  Supported for CategoryType(s): Cost, ReservationUtilization.
        /// 
        ///  Supported operators for **CategoryType: Cost**
        /// - GreaterThan
        /// - GreaterThanOrEqualTo
        /// 
        ///  Supported operators for **CategoryType: ReservationUtilization**
        /// - LessThan
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// Threshold value associated with a notification. It is always percent with a maximum of 2 decimal places.
        /// 
        ///  Supported for CategoryType(s): Cost, ReservationUtilization.
        /// 
        ///  **CategoryType: Cost** - Must be between 0 and 1000. Notification is sent when the cost exceeded the threshold.
        /// 
        ///  **CategoryType: ReservationUtilization** - Must be between 0 and 100. Notification is sent when a reservation has a utilization percentage below the threshold.
        /// </summary>
        public readonly double Threshold;
        /// <summary>
        /// The type of threshold.
        /// 
        ///  Supported for CategoryType(s): Cost.
        /// </summary>
        public readonly string? ThresholdType;

        [OutputConstructor]
        private NotificationResponse(
            ImmutableArray<string> contactEmails,

            ImmutableArray<string> contactGroups,

            ImmutableArray<string> contactRoles,

            bool enabled,

            string? frequency,

            string? locale,

            string @operator,

            double threshold,

            string? thresholdType)
        {
            ContactEmails = contactEmails;
            ContactGroups = contactGroups;
            ContactRoles = contactRoles;
            Enabled = enabled;
            Frequency = frequency;
            Locale = locale;
            Operator = @operator;
            Threshold = threshold;
            ThresholdType = thresholdType;
        }
    }
}
