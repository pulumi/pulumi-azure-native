// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Monitor
{
    public static class GetRelationship
    {
        /// <summary>
        /// Get a Relationship
        /// 
        /// Uses Azure REST API version 2025-05-03-preview.
        /// </summary>
        public static Task<GetRelationshipResult> InvokeAsync(GetRelationshipArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRelationshipResult>("azure-native:monitor:getRelationship", args ?? new GetRelationshipArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Relationship
        /// 
        /// Uses Azure REST API version 2025-05-03-preview.
        /// </summary>
        public static Output<GetRelationshipResult> Invoke(GetRelationshipInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRelationshipResult>("azure-native:monitor:getRelationship", args ?? new GetRelationshipInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Relationship
        /// 
        /// Uses Azure REST API version 2025-05-03-preview.
        /// </summary>
        public static Output<GetRelationshipResult> Invoke(GetRelationshipInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRelationshipResult>("azure-native:monitor:getRelationship", args ?? new GetRelationshipInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRelationshipArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Azure Monitor Workspace. The name is case insensitive
        /// </summary>
        [Input("azureMonitorWorkspaceName", required: true)]
        public string AzureMonitorWorkspaceName { get; set; } = null!;

        /// <summary>
        /// Name of health model resource
        /// </summary>
        [Input("healthModelName", required: true)]
        public string HealthModelName { get; set; } = null!;

        /// <summary>
        /// Name of the relationship. Must be unique within a health model. For example, a concatenation of parentEntityName and childEntityName can be used as the name.
        /// </summary>
        [Input("relationshipName", required: true)]
        public string RelationshipName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetRelationshipArgs()
        {
        }
        public static new GetRelationshipArgs Empty => new GetRelationshipArgs();
    }

    public sealed class GetRelationshipInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Azure Monitor Workspace. The name is case insensitive
        /// </summary>
        [Input("azureMonitorWorkspaceName", required: true)]
        public Input<string> AzureMonitorWorkspaceName { get; set; } = null!;

        /// <summary>
        /// Name of health model resource
        /// </summary>
        [Input("healthModelName", required: true)]
        public Input<string> HealthModelName { get; set; } = null!;

        /// <summary>
        /// Name of the relationship. Must be unique within a health model. For example, a concatenation of parentEntityName and childEntityName can be used as the name.
        /// </summary>
        [Input("relationshipName", required: true)]
        public Input<string> RelationshipName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetRelationshipInvokeArgs()
        {
        }
        public static new GetRelationshipInvokeArgs Empty => new GetRelationshipInvokeArgs();
    }


    [OutputType]
    public sealed class GetRelationshipResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource-specific properties for this resource.
        /// </summary>
        public readonly Outputs.RelationshipPropertiesResponse Properties;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRelationshipResult(
            string azureApiVersion,

            string id,

            string name,

            Outputs.RelationshipPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AzureApiVersion = azureApiVersion;
            Id = id;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Type = type;
        }
    }
}
