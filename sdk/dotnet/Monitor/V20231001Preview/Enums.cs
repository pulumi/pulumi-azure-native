// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Monitor.V20231001Preview
{
    /// <summary>
    /// The type of exporter.
    /// </summary>
    [EnumType]
    public readonly struct ExporterType : IEquatable<ExporterType>
    {
        private readonly string _value;

        private ExporterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Export logs to Azure Monitor Workspace.
        /// </summary>
        public static ExporterType AzureMonitorWorkspaceLogs { get; } = new ExporterType("AzureMonitorWorkspaceLogs");
        /// <summary>
        /// Export data to another pipeline group instance.
        /// </summary>
        public static ExporterType PipelineGroup { get; } = new ExporterType("PipelineGroup");

        public static bool operator ==(ExporterType left, ExporterType right) => left.Equals(right);
        public static bool operator !=(ExporterType left, ExporterType right) => !left.Equals(right);

        public static explicit operator string(ExporterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExporterType other && Equals(other);
        public bool Equals(ExporterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationType : IEquatable<ExtendedLocationType>
    {
        private readonly string _value;

        private ExtendedLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Edge Zones location type
        /// </summary>
        public static ExtendedLocationType EdgeZone { get; } = new ExtendedLocationType("EdgeZone");
        /// <summary>
        /// Azure Custom Locations type
        /// </summary>
        public static ExtendedLocationType CustomLocation { get; } = new ExtendedLocationType("CustomLocation");

        public static bool operator ==(ExtendedLocationType left, ExtendedLocationType right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationType left, ExtendedLocationType right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationType other && Equals(other);
        public bool Equals(ExtendedLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// External networking mode.
    /// </summary>
    [EnumType]
    public readonly struct ExternalNetworkingMode : IEquatable<ExternalNetworkingMode>
    {
        private readonly string _value;

        private ExternalNetworkingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Load balancer only.
        /// </summary>
        public static ExternalNetworkingMode LoadBalancerOnly { get; } = new ExternalNetworkingMode("LoadBalancerOnly");

        public static bool operator ==(ExternalNetworkingMode left, ExternalNetworkingMode right) => left.Equals(right);
        public static bool operator !=(ExternalNetworkingMode left, ExternalNetworkingMode right) => !left.Equals(right);

        public static explicit operator string(ExternalNetworkingMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExternalNetworkingMode other && Equals(other);
        public bool Equals(ExternalNetworkingMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of pipeline
    /// </summary>
    [EnumType]
    public readonly struct PipelineType : IEquatable<PipelineType>
    {
        private readonly string _value;

        private PipelineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Pipeline for logs telemetry.
        /// </summary>
        public static PipelineType Logs { get; } = new PipelineType("logs");

        public static bool operator ==(PipelineType left, PipelineType right) => left.Equals(right);
        public static bool operator !=(PipelineType left, PipelineType right) => !left.Equals(right);

        public static explicit operator string(PipelineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineType other && Equals(other);
        public bool Equals(PipelineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of processor.
    /// </summary>
    [EnumType]
    public readonly struct ProcessorType : IEquatable<ProcessorType>
    {
        private readonly string _value;

        private ProcessorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Batch processor.
        /// </summary>
        public static ProcessorType Batch { get; } = new ProcessorType("Batch");

        public static bool operator ==(ProcessorType left, ProcessorType right) => left.Equals(right);
        public static bool operator !=(ProcessorType left, ProcessorType right) => !left.Equals(right);

        public static explicit operator string(ProcessorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProcessorType other && Equals(other);
        public bool Equals(ProcessorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of receiver.
    /// </summary>
    [EnumType]
    public readonly struct ReceiverType : IEquatable<ReceiverType>
    {
        private readonly string _value;

        private ReceiverType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Linux syslog.
        /// </summary>
        public static ReceiverType Syslog { get; } = new ReceiverType("Syslog");
        /// <summary>
        /// Receives data from azure monitor agent receiver.
        /// </summary>
        public static ReceiverType Ama { get; } = new ReceiverType("Ama");
        /// <summary>
        /// Receives data from another pipeline group.
        /// </summary>
        public static ReceiverType PipelineGroup { get; } = new ReceiverType("PipelineGroup");
        /// <summary>
        /// Receives data from a OTLP collector.
        /// </summary>
        public static ReceiverType OTLP { get; } = new ReceiverType("OTLP");
        /// <summary>
        /// Receives data from an UDP collector.
        /// </summary>
        public static ReceiverType UDP { get; } = new ReceiverType("UDP");

        public static bool operator ==(ReceiverType left, ReceiverType right) => left.Equals(right);
        public static bool operator !=(ReceiverType left, ReceiverType right) => !left.Equals(right);

        public static explicit operator string(ReceiverType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReceiverType other && Equals(other);
        public bool Equals(ReceiverType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The encoding of the stream being received.
    /// </summary>
    [EnumType]
    public readonly struct StreamEncodingType : IEquatable<StreamEncodingType>
    {
        private readonly string _value;

        private StreamEncodingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No encoding validation. Treats the file as a stream of raw bytes.
        /// </summary>
        public static StreamEncodingType Nop { get; } = new StreamEncodingType("nop");
        /// <summary>
        /// UTF-8 encoding.
        /// </summary>
        public static StreamEncodingType Utf_8 { get; } = new StreamEncodingType("utf-8");
        /// <summary>
        /// UTF-16 encoding with little-endian byte order.
        /// </summary>
        public static StreamEncodingType Utf_16le { get; } = new StreamEncodingType("utf-16le");
        /// <summary>
        /// UTF-16 encoding with little-endian byte order.
        /// </summary>
        public static StreamEncodingType Utf_16be { get; } = new StreamEncodingType("utf-16be");
        /// <summary>
        /// ASCII encoding.
        /// </summary>
        public static StreamEncodingType Ascii { get; } = new StreamEncodingType("ascii");
        /// <summary>
        /// The Big5 Chinese character encoding.
        /// </summary>
        public static StreamEncodingType Big5 { get; } = new StreamEncodingType("big5");

        public static bool operator ==(StreamEncodingType left, StreamEncodingType right) => left.Equals(right);
        public static bool operator !=(StreamEncodingType left, StreamEncodingType right) => !left.Equals(right);

        public static explicit operator string(StreamEncodingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamEncodingType other && Equals(other);
        public bool Equals(StreamEncodingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol to parse syslog messages. Default rfc3164
    /// </summary>
    [EnumType]
    public readonly struct SyslogProtocol : IEquatable<SyslogProtocol>
    {
        private readonly string _value;

        private SyslogProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// rfc3164 protocol.
        /// </summary>
        public static SyslogProtocol Rfc3164 { get; } = new SyslogProtocol("rfc3164");
        /// <summary>
        /// rfc5424 protocol.
        /// </summary>
        public static SyslogProtocol Rfc5424 { get; } = new SyslogProtocol("rfc5424");

        public static bool operator ==(SyslogProtocol left, SyslogProtocol right) => left.Equals(right);
        public static bool operator !=(SyslogProtocol left, SyslogProtocol right) => !left.Equals(right);

        public static explicit operator string(SyslogProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SyslogProtocol other && Equals(other);
        public bool Equals(SyslogProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
