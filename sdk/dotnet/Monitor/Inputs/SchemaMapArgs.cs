// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Monitor.Inputs
{

    /// <summary>
    /// Schema map for azure monitor for logs.
    /// </summary>
    public sealed class SchemaMapArgs : global::Pulumi.ResourceArgs
    {
        [Input("recordMap", required: true)]
        private InputList<Inputs.RecordMapArgs>? _recordMap;

        /// <summary>
        /// Record Map.
        /// </summary>
        public InputList<Inputs.RecordMapArgs> RecordMap
        {
            get => _recordMap ?? (_recordMap = new InputList<Inputs.RecordMapArgs>());
            set => _recordMap = value;
        }

        [Input("resourceMap")]
        private InputList<Inputs.ResourceMapArgs>? _resourceMap;

        /// <summary>
        /// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
        /// </summary>
        public InputList<Inputs.ResourceMapArgs> ResourceMap
        {
            get => _resourceMap ?? (_resourceMap = new InputList<Inputs.ResourceMapArgs>());
            set => _resourceMap = value;
        }

        [Input("scopeMap")]
        private InputList<Inputs.ScopeMapArgs>? _scopeMap;

        /// <summary>
        /// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
        /// </summary>
        public InputList<Inputs.ScopeMapArgs> ScopeMap
        {
            get => _scopeMap ?? (_scopeMap = new InputList<Inputs.ScopeMapArgs>());
            set => _scopeMap = value;
        }

        public SchemaMapArgs()
        {
        }
        public static new SchemaMapArgs Empty => new SchemaMapArgs();
    }
}
