// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    public static class GetRecordSet
    {
        /// <summary>
        /// Gets a record set.
        /// Azure REST API version: 2018-05-01.
        /// 
        /// Other available API versions: 2015-05-04-preview, 2016-04-01, 2023-07-01-preview.
        /// </summary>
        public static Task<GetRecordSetResult> InvokeAsync(GetRecordSetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordSetResult>("azure-native:network:getRecordSet", args ?? new GetRecordSetArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a record set.
        /// Azure REST API version: 2018-05-01.
        /// 
        /// Other available API versions: 2015-05-04-preview, 2016-04-01, 2023-07-01-preview.
        /// </summary>
        public static Output<GetRecordSetResult> Invoke(GetRecordSetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordSetResult>("azure-native:network:getRecordSet", args ?? new GetRecordSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordSetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of DNS record in this record set.
        /// </summary>
        [Input("recordType", required: true)]
        public string RecordType { get; set; } = null!;

        /// <summary>
        /// The name of the record set, relative to the name of the zone.
        /// </summary>
        [Input("relativeRecordSetName", required: true)]
        public string RelativeRecordSetName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the DNS zone (without a terminating dot).
        /// </summary>
        [Input("zoneName", required: true)]
        public string ZoneName { get; set; } = null!;

        public GetRecordSetArgs()
        {
        }
        public static new GetRecordSetArgs Empty => new GetRecordSetArgs();
    }

    public sealed class GetRecordSetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of DNS record in this record set.
        /// </summary>
        [Input("recordType", required: true)]
        public Input<string> RecordType { get; set; } = null!;

        /// <summary>
        /// The name of the record set, relative to the name of the zone.
        /// </summary>
        [Input("relativeRecordSetName", required: true)]
        public Input<string> RelativeRecordSetName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the DNS zone (without a terminating dot).
        /// </summary>
        [Input("zoneName", required: true)]
        public Input<string> ZoneName { get; set; } = null!;

        public GetRecordSetInvokeArgs()
        {
        }
        public static new GetRecordSetInvokeArgs Empty => new GetRecordSetInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordSetResult
    {
        /// <summary>
        /// The list of A records in the record set.
        /// </summary>
        public readonly ImmutableArray<Outputs.ARecordResponse> ARecords;
        /// <summary>
        /// The list of AAAA records in the record set.
        /// </summary>
        public readonly ImmutableArray<Outputs.AaaaRecordResponse> AaaaRecords;
        /// <summary>
        /// The list of CAA records in the record set.
        /// </summary>
        public readonly ImmutableArray<Outputs.CaaRecordResponse> CaaRecords;
        /// <summary>
        /// The CNAME record in the  record set.
        /// </summary>
        public readonly Outputs.CnameRecordResponse? CnameRecord;
        /// <summary>
        /// The etag of the record set.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Fully qualified domain name of the record set.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The ID of the record set.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The metadata attached to the record set.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Metadata;
        /// <summary>
        /// The list of MX records in the record set.
        /// </summary>
        public readonly ImmutableArray<Outputs.MxRecordResponse> MxRecords;
        /// <summary>
        /// The name of the record set.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of NS records in the record set.
        /// </summary>
        public readonly ImmutableArray<Outputs.NsRecordResponse> NsRecords;
        /// <summary>
        /// provisioning State of the record set.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The list of PTR records in the record set.
        /// </summary>
        public readonly ImmutableArray<Outputs.PtrRecordResponse> PtrRecords;
        /// <summary>
        /// The SOA record in the record set.
        /// </summary>
        public readonly Outputs.SoaRecordResponse? SoaRecord;
        /// <summary>
        /// The list of SRV records in the record set.
        /// </summary>
        public readonly ImmutableArray<Outputs.SrvRecordResponse> SrvRecords;
        /// <summary>
        /// A reference to an azure resource from where the dns resource value is taken.
        /// </summary>
        public readonly Outputs.SubResourceResponse? TargetResource;
        /// <summary>
        /// The TTL (time-to-live) of the records in the record set.
        /// </summary>
        public readonly double? Ttl;
        /// <summary>
        /// The list of TXT records in the record set.
        /// </summary>
        public readonly ImmutableArray<Outputs.TxtRecordResponse> TxtRecords;
        /// <summary>
        /// The type of the record set.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRecordSetResult(
            ImmutableArray<Outputs.ARecordResponse> aRecords,

            ImmutableArray<Outputs.AaaaRecordResponse> aaaaRecords,

            ImmutableArray<Outputs.CaaRecordResponse> caaRecords,

            Outputs.CnameRecordResponse? cnameRecord,

            string? etag,

            string fqdn,

            string id,

            ImmutableDictionary<string, string>? metadata,

            ImmutableArray<Outputs.MxRecordResponse> mxRecords,

            string name,

            ImmutableArray<Outputs.NsRecordResponse> nsRecords,

            string provisioningState,

            ImmutableArray<Outputs.PtrRecordResponse> ptrRecords,

            Outputs.SoaRecordResponse? soaRecord,

            ImmutableArray<Outputs.SrvRecordResponse> srvRecords,

            Outputs.SubResourceResponse? targetResource,

            double? ttl,

            ImmutableArray<Outputs.TxtRecordResponse> txtRecords,

            string type)
        {
            ARecords = aRecords;
            AaaaRecords = aaaaRecords;
            CaaRecords = caaRecords;
            CnameRecord = cnameRecord;
            Etag = etag;
            Fqdn = fqdn;
            Id = id;
            Metadata = metadata;
            MxRecords = mxRecords;
            Name = name;
            NsRecords = nsRecords;
            ProvisioningState = provisioningState;
            PtrRecords = ptrRecords;
            SoaRecord = soaRecord;
            SrvRecords = srvRecords;
            TargetResource = targetResource;
            Ttl = ttl;
            TxtRecords = txtRecords;
            Type = type;
        }
    }
}
