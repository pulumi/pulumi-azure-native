// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.V20190801
{
    public static class GetVirtualRouterPeering
    {
        public static Task<GetVirtualRouterPeeringResult> InvokeAsync(GetVirtualRouterPeeringArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualRouterPeeringResult>("azurerm:network/v20190801:getVirtualRouterPeering", args ?? new GetVirtualRouterPeeringArgs(), options.WithVersion());
    }


    public sealed class GetVirtualRouterPeeringArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Virtual Router Peering.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Virtual Router.
        /// </summary>
        [Input("virtualRouterName", required: true)]
        public string VirtualRouterName { get; set; } = null!;

        public GetVirtualRouterPeeringArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVirtualRouterPeeringResult
    {
        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Gets name of the peering unique to VirtualRouter. This name can be used to access the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The properties of the Virtual Router Peering.
        /// </summary>
        public readonly Outputs.VirtualRouterPeeringPropertiesResponseResult Properties;
        /// <summary>
        /// Peering type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetVirtualRouterPeeringResult(
            string etag,

            string? name,

            Outputs.VirtualRouterPeeringPropertiesResponseResult properties,

            string type)
        {
            Etag = etag;
            Name = name;
            Properties = properties;
            Type = type;
        }
    }
}
