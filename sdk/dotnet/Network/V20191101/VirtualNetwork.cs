// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20191101
{
    /// <summary>
    /// Virtual Network resource.
    /// </summary>
    public partial class VirtualNetwork : Pulumi.CustomResource
    {
        /// <summary>
        /// The AddressSpace that contains an array of IP address ranges that can be used by subnets.
        /// </summary>
        [Output("addressSpace")]
        public Output<Outputs.AddressSpaceResponse?> AddressSpace { get; private set; } = null!;

        /// <summary>
        /// Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
        /// </summary>
        [Output("bgpCommunities")]
        public Output<Outputs.VirtualNetworkBgpCommunitiesResponse?> BgpCommunities { get; private set; } = null!;

        /// <summary>
        /// The DDoS protection plan associated with the virtual network.
        /// </summary>
        [Output("ddosProtectionPlan")]
        public Output<Outputs.SubResourceResponse?> DdosProtectionPlan { get; private set; } = null!;

        /// <summary>
        /// The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
        /// </summary>
        [Output("dhcpOptions")]
        public Output<Outputs.DhcpOptionsResponse?> DhcpOptions { get; private set; } = null!;

        /// <summary>
        /// Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
        /// </summary>
        [Output("enableDdosProtection")]
        public Output<bool?> EnableDdosProtection { get; private set; } = null!;

        /// <summary>
        /// Indicates if VM protection is enabled for all the subnets in the virtual network.
        /// </summary>
        [Output("enableVmProtection")]
        public Output<bool?> EnableVmProtection { get; private set; } = null!;

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the virtual network resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The resourceGuid property of the Virtual Network resource.
        /// </summary>
        [Output("resourceGuid")]
        public Output<string> ResourceGuid { get; private set; } = null!;

        /// <summary>
        /// A list of subnets in a Virtual Network.
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<Outputs.SubnetResponse>> Subnets { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// A list of peerings in a Virtual Network.
        /// </summary>
        [Output("virtualNetworkPeerings")]
        public Output<ImmutableArray<Outputs.VirtualNetworkPeeringResponse>> VirtualNetworkPeerings { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualNetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualNetwork(string name, VirtualNetworkArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:network/v20191101:VirtualNetwork", name, args ?? new VirtualNetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualNetwork(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:network/v20191101:VirtualNetwork", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:network/latest:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20150501preview:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20150615:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20160330:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20160601:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20160901:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20161201:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20170301:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20170601:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20170801:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20170901:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20171001:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20171101:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20180101:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20180201:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20180401:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20180601:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20180701:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20180801:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20181001:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20181101:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20181201:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20190201:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20190401:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20190601:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20190701:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20190801:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20190901:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20191201:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20200301:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20200401:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20200501:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20200601:VirtualNetwork"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20200701:VirtualNetwork"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualNetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualNetwork Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualNetwork(name, id, options);
        }
    }

    public sealed class VirtualNetworkArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AddressSpace that contains an array of IP address ranges that can be used by subnets.
        /// </summary>
        [Input("addressSpace")]
        public Input<Inputs.AddressSpaceArgs>? AddressSpace { get; set; }

        /// <summary>
        /// Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
        /// </summary>
        [Input("bgpCommunities")]
        public Input<Inputs.VirtualNetworkBgpCommunitiesArgs>? BgpCommunities { get; set; }

        /// <summary>
        /// The DDoS protection plan associated with the virtual network.
        /// </summary>
        [Input("ddosProtectionPlan")]
        public Input<Inputs.SubResourceArgs>? DdosProtectionPlan { get; set; }

        /// <summary>
        /// The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
        /// </summary>
        [Input("dhcpOptions")]
        public Input<Inputs.DhcpOptionsArgs>? DhcpOptions { get; set; }

        /// <summary>
        /// Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
        /// </summary>
        [Input("enableDdosProtection")]
        public Input<bool>? EnableDdosProtection { get; set; }

        /// <summary>
        /// Indicates if VM protection is enabled for all the subnets in the virtual network.
        /// </summary>
        [Input("enableVmProtection")]
        public Input<bool>? EnableVmProtection { get; set; }

        /// <summary>
        /// Resource ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("subnets")]
        private InputList<Inputs.SubnetArgs>? _subnets;

        /// <summary>
        /// A list of subnets in a Virtual Network.
        /// </summary>
        public InputList<Inputs.SubnetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.SubnetArgs>());
            set => _subnets = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the virtual network.
        /// </summary>
        [Input("virtualNetworkName", required: true)]
        public Input<string> VirtualNetworkName { get; set; } = null!;

        [Input("virtualNetworkPeerings")]
        private InputList<Inputs.VirtualNetworkPeeringArgs>? _virtualNetworkPeerings;

        /// <summary>
        /// A list of peerings in a Virtual Network.
        /// </summary>
        public InputList<Inputs.VirtualNetworkPeeringArgs> VirtualNetworkPeerings
        {
            get => _virtualNetworkPeerings ?? (_virtualNetworkPeerings = new InputList<Inputs.VirtualNetworkPeeringArgs>());
            set => _virtualNetworkPeerings = value;
        }

        public VirtualNetworkArgs()
        {
        }
    }
}
