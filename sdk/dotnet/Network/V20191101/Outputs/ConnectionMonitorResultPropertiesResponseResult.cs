// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.V20191101.Outputs
{

    [OutputType]
    public sealed class ConnectionMonitorResultPropertiesResponseResult
    {
        /// <summary>
        /// Determines if the connection monitor will start automatically once created.
        /// </summary>
        public readonly bool? AutoStart;
        /// <summary>
        /// Type of connection monitor.
        /// </summary>
        public readonly string ConnectionMonitorType;
        /// <summary>
        /// Describes the destination of connection monitor.
        /// </summary>
        public readonly Outputs.ConnectionMonitorDestinationResponseResult? Destination;
        /// <summary>
        /// List of connection monitor endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectionMonitorEndpointResponseResult> Endpoints;
        /// <summary>
        /// Monitoring interval in seconds.
        /// </summary>
        public readonly int? MonitoringIntervalInSeconds;
        /// <summary>
        /// The monitoring status of the connection monitor.
        /// </summary>
        public readonly string MonitoringStatus;
        /// <summary>
        /// Optional notes to be associated with the connection monitor.
        /// </summary>
        public readonly string? Notes;
        /// <summary>
        /// List of connection monitor outputs.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectionMonitorOutputResponseResult> Outputs;
        /// <summary>
        /// The provisioning state of the connection monitor.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Describes the source of connection monitor.
        /// </summary>
        public readonly Outputs.ConnectionMonitorSourceResponseResult? Source;
        /// <summary>
        /// The date and time when the connection monitor was started.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// List of connection monitor test configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectionMonitorTestConfigurationResponseResult> TestConfigurations;
        /// <summary>
        /// List of connection monitor test groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectionMonitorTestGroupResponseResult> TestGroups;

        [OutputConstructor]
        private ConnectionMonitorResultPropertiesResponseResult(
            bool? autoStart,

            string connectionMonitorType,

            Outputs.ConnectionMonitorDestinationResponseResult? destination,

            ImmutableArray<Outputs.ConnectionMonitorEndpointResponseResult> endpoints,

            int? monitoringIntervalInSeconds,

            string monitoringStatus,

            string? notes,

            ImmutableArray<Outputs.ConnectionMonitorOutputResponseResult> outputs,

            string provisioningState,

            Outputs.ConnectionMonitorSourceResponseResult? source,

            string startTime,

            ImmutableArray<Outputs.ConnectionMonitorTestConfigurationResponseResult> testConfigurations,

            ImmutableArray<Outputs.ConnectionMonitorTestGroupResponseResult> testGroups)
        {
            AutoStart = autoStart;
            ConnectionMonitorType = connectionMonitorType;
            Destination = destination;
            Endpoints = endpoints;
            MonitoringIntervalInSeconds = monitoringIntervalInSeconds;
            MonitoringStatus = monitoringStatus;
            Notes = notes;
            Outputs = outputs;
            ProvisioningState = provisioningState;
            Source = source;
            StartTime = startTime;
            TestConfigurations = testConfigurations;
            TestGroups = testGroups;
        }
    }
}
