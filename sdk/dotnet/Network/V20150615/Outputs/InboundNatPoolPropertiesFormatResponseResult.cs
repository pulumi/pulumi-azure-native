// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.V20150615.Outputs
{

    [OutputType]
    public sealed class InboundNatPoolPropertiesFormatResponseResult
    {
        /// <summary>
        /// The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
        /// </summary>
        public readonly int BackendPort;
        /// <summary>
        /// A reference to frontend IP addresses.
        /// </summary>
        public readonly Outputs.SubResourceResponseResult? FrontendIPConfiguration;
        /// <summary>
        /// The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
        /// </summary>
        public readonly int FrontendPortRangeEnd;
        /// <summary>
        /// The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
        /// </summary>
        public readonly int FrontendPortRangeStart;
        /// <summary>
        /// The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        /// </summary>
        public readonly string? ProvisioningState;

        [OutputConstructor]
        private InboundNatPoolPropertiesFormatResponseResult(
            int backendPort,

            Outputs.SubResourceResponseResult? frontendIPConfiguration,

            int frontendPortRangeEnd,

            int frontendPortRangeStart,

            string protocol,

            string? provisioningState)
        {
            BackendPort = backendPort;
            FrontendIPConfiguration = frontendIPConfiguration;
            FrontendPortRangeEnd = frontendPortRangeEnd;
            FrontendPortRangeStart = frontendPortRangeStart;
            Protocol = protocol;
            ProvisioningState = provisioningState;
        }
    }
}
