// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.V20150615.Outputs
{

    [OutputType]
    public sealed class NetworkInterfaceIPConfigurationPropertiesFormatResponseResult
    {
        /// <summary>
        /// The reference of LoadBalancerBackendAddressPool resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.BackendAddressPoolResponseResult> LoadBalancerBackendAddressPools;
        /// <summary>
        /// A list of references of LoadBalancerInboundNatRules.
        /// </summary>
        public readonly ImmutableArray<Outputs.InboundNatRuleResponseResult> LoadBalancerInboundNatRules;
        /// <summary>
        /// Gets whether this is a primary customer address on the network interface.
        /// </summary>
        public readonly bool? Primary;
        public readonly string? PrivateIPAddress;
        /// <summary>
        /// Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.
        /// </summary>
        public readonly string? PrivateIPAllocationMethod;
        public readonly string? ProvisioningState;
        /// <summary>
        /// Public IP address resource.
        /// </summary>
        public readonly Outputs.PublicIPAddressResponseResult? PublicIPAddress;
        /// <summary>
        /// Subnet in a virtual network resource.
        /// </summary>
        public readonly Outputs.SubnetResponseResult? Subnet;

        [OutputConstructor]
        private NetworkInterfaceIPConfigurationPropertiesFormatResponseResult(
            ImmutableArray<Outputs.BackendAddressPoolResponseResult> loadBalancerBackendAddressPools,

            ImmutableArray<Outputs.InboundNatRuleResponseResult> loadBalancerInboundNatRules,

            bool? primary,

            string? privateIPAddress,

            string? privateIPAllocationMethod,

            string? provisioningState,

            Outputs.PublicIPAddressResponseResult? publicIPAddress,

            Outputs.SubnetResponseResult? subnet)
        {
            LoadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
            LoadBalancerInboundNatRules = loadBalancerInboundNatRules;
            Primary = primary;
            PrivateIPAddress = privateIPAddress;
            PrivateIPAllocationMethod = privateIPAllocationMethod;
            ProvisioningState = provisioningState;
            PublicIPAddress = publicIPAddress;
            Subnet = subnet;
        }
    }
}
