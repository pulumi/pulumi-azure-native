// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.V20181101.Inputs
{

    /// <summary>
    /// Properties of the application gateway.
    /// </summary>
    public sealed class ApplicationGatewayPropertiesFormatArgs : Pulumi.ResourceArgs
    {
        [Input("authenticationCertificates")]
        private InputList<Inputs.ApplicationGatewayAuthenticationCertificateArgs>? _authenticationCertificates;

        /// <summary>
        /// Authentication certificates of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayAuthenticationCertificateArgs> AuthenticationCertificates
        {
            get => _authenticationCertificates ?? (_authenticationCertificates = new InputList<Inputs.ApplicationGatewayAuthenticationCertificateArgs>());
            set => _authenticationCertificates = value;
        }

        /// <summary>
        /// Autoscale Configuration.
        /// </summary>
        [Input("autoscaleConfiguration")]
        public Input<Inputs.ApplicationGatewayAutoscaleConfigurationArgs>? AutoscaleConfiguration { get; set; }

        [Input("backendAddressPools")]
        private InputList<Inputs.ApplicationGatewayBackendAddressPoolArgs>? _backendAddressPools;

        /// <summary>
        /// Backend address pool of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayBackendAddressPoolArgs> BackendAddressPools
        {
            get => _backendAddressPools ?? (_backendAddressPools = new InputList<Inputs.ApplicationGatewayBackendAddressPoolArgs>());
            set => _backendAddressPools = value;
        }

        [Input("backendHttpSettingsCollection")]
        private InputList<Inputs.ApplicationGatewayBackendHttpSettingsArgs>? _backendHttpSettingsCollection;

        /// <summary>
        /// Backend http settings of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayBackendHttpSettingsArgs> BackendHttpSettingsCollection
        {
            get => _backendHttpSettingsCollection ?? (_backendHttpSettingsCollection = new InputList<Inputs.ApplicationGatewayBackendHttpSettingsArgs>());
            set => _backendHttpSettingsCollection = value;
        }

        [Input("customErrorConfigurations")]
        private InputList<Inputs.ApplicationGatewayCustomErrorArgs>? _customErrorConfigurations;

        /// <summary>
        /// Custom error configurations of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayCustomErrorArgs> CustomErrorConfigurations
        {
            get => _customErrorConfigurations ?? (_customErrorConfigurations = new InputList<Inputs.ApplicationGatewayCustomErrorArgs>());
            set => _customErrorConfigurations = value;
        }

        /// <summary>
        /// Whether FIPS is enabled on the application gateway resource.
        /// </summary>
        [Input("enableFips")]
        public Input<bool>? EnableFips { get; set; }

        /// <summary>
        /// Whether HTTP2 is enabled on the application gateway resource.
        /// </summary>
        [Input("enableHttp2")]
        public Input<bool>? EnableHttp2 { get; set; }

        [Input("frontendIPConfigurations")]
        private InputList<Inputs.ApplicationGatewayFrontendIPConfigurationArgs>? _frontendIPConfigurations;

        /// <summary>
        /// Frontend IP addresses of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayFrontendIPConfigurationArgs> FrontendIPConfigurations
        {
            get => _frontendIPConfigurations ?? (_frontendIPConfigurations = new InputList<Inputs.ApplicationGatewayFrontendIPConfigurationArgs>());
            set => _frontendIPConfigurations = value;
        }

        [Input("frontendPorts")]
        private InputList<Inputs.ApplicationGatewayFrontendPortArgs>? _frontendPorts;

        /// <summary>
        /// Frontend ports of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayFrontendPortArgs> FrontendPorts
        {
            get => _frontendPorts ?? (_frontendPorts = new InputList<Inputs.ApplicationGatewayFrontendPortArgs>());
            set => _frontendPorts = value;
        }

        [Input("gatewayIPConfigurations")]
        private InputList<Inputs.ApplicationGatewayIPConfigurationArgs>? _gatewayIPConfigurations;

        /// <summary>
        /// Subnets of application the gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayIPConfigurationArgs> GatewayIPConfigurations
        {
            get => _gatewayIPConfigurations ?? (_gatewayIPConfigurations = new InputList<Inputs.ApplicationGatewayIPConfigurationArgs>());
            set => _gatewayIPConfigurations = value;
        }

        [Input("httpListeners")]
        private InputList<Inputs.ApplicationGatewayHttpListenerArgs>? _httpListeners;

        /// <summary>
        /// Http listeners of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayHttpListenerArgs> HttpListeners
        {
            get => _httpListeners ?? (_httpListeners = new InputList<Inputs.ApplicationGatewayHttpListenerArgs>());
            set => _httpListeners = value;
        }

        [Input("probes")]
        private InputList<Inputs.ApplicationGatewayProbeArgs>? _probes;

        /// <summary>
        /// Probes of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayProbeArgs> Probes
        {
            get => _probes ?? (_probes = new InputList<Inputs.ApplicationGatewayProbeArgs>());
            set => _probes = value;
        }

        /// <summary>
        /// Provisioning state of the application gateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        /// </summary>
        [Input("provisioningState")]
        public Input<string>? ProvisioningState { get; set; }

        [Input("redirectConfigurations")]
        private InputList<Inputs.ApplicationGatewayRedirectConfigurationArgs>? _redirectConfigurations;

        /// <summary>
        /// Redirect configurations of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayRedirectConfigurationArgs> RedirectConfigurations
        {
            get => _redirectConfigurations ?? (_redirectConfigurations = new InputList<Inputs.ApplicationGatewayRedirectConfigurationArgs>());
            set => _redirectConfigurations = value;
        }

        [Input("requestRoutingRules")]
        private InputList<Inputs.ApplicationGatewayRequestRoutingRuleArgs>? _requestRoutingRules;

        /// <summary>
        /// Request routing rules of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayRequestRoutingRuleArgs> RequestRoutingRules
        {
            get => _requestRoutingRules ?? (_requestRoutingRules = new InputList<Inputs.ApplicationGatewayRequestRoutingRuleArgs>());
            set => _requestRoutingRules = value;
        }

        /// <summary>
        /// Resource GUID property of the application gateway resource.
        /// </summary>
        [Input("resourceGuid")]
        public Input<string>? ResourceGuid { get; set; }

        [Input("rewriteRuleSets")]
        private InputList<Inputs.ApplicationGatewayRewriteRuleSetArgs>? _rewriteRuleSets;

        /// <summary>
        /// Rewrite rules for the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayRewriteRuleSetArgs> RewriteRuleSets
        {
            get => _rewriteRuleSets ?? (_rewriteRuleSets = new InputList<Inputs.ApplicationGatewayRewriteRuleSetArgs>());
            set => _rewriteRuleSets = value;
        }

        /// <summary>
        /// SKU of the application gateway resource.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.ApplicationGatewaySkuArgs>? Sku { get; set; }

        [Input("sslCertificates")]
        private InputList<Inputs.ApplicationGatewaySslCertificateArgs>? _sslCertificates;

        /// <summary>
        /// SSL certificates of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewaySslCertificateArgs> SslCertificates
        {
            get => _sslCertificates ?? (_sslCertificates = new InputList<Inputs.ApplicationGatewaySslCertificateArgs>());
            set => _sslCertificates = value;
        }

        /// <summary>
        /// SSL policy of the application gateway resource.
        /// </summary>
        [Input("sslPolicy")]
        public Input<Inputs.ApplicationGatewaySslPolicyArgs>? SslPolicy { get; set; }

        [Input("trustedRootCertificates")]
        private InputList<Inputs.ApplicationGatewayTrustedRootCertificateArgs>? _trustedRootCertificates;

        /// <summary>
        /// Trusted Root certificates of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayTrustedRootCertificateArgs> TrustedRootCertificates
        {
            get => _trustedRootCertificates ?? (_trustedRootCertificates = new InputList<Inputs.ApplicationGatewayTrustedRootCertificateArgs>());
            set => _trustedRootCertificates = value;
        }

        [Input("urlPathMaps")]
        private InputList<Inputs.ApplicationGatewayUrlPathMapArgs>? _urlPathMaps;

        /// <summary>
        /// URL path map of the application gateway resource.
        /// </summary>
        public InputList<Inputs.ApplicationGatewayUrlPathMapArgs> UrlPathMaps
        {
            get => _urlPathMaps ?? (_urlPathMaps = new InputList<Inputs.ApplicationGatewayUrlPathMapArgs>());
            set => _urlPathMaps = value;
        }

        /// <summary>
        /// Web application firewall configuration.
        /// </summary>
        [Input("webApplicationFirewallConfiguration")]
        public Input<Inputs.ApplicationGatewayWebApplicationFirewallConfigurationArgs>? WebApplicationFirewallConfiguration { get; set; }

        public ApplicationGatewayPropertiesFormatArgs()
        {
        }
    }
}
