// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20181101
{
    public static class GetExpressRouteConnection
    {
        /// <summary>
        /// ExpressRouteConnection resource.
        /// </summary>
        public static Task<GetExpressRouteConnectionResult> InvokeAsync(GetExpressRouteConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetExpressRouteConnectionResult>("azure-native:network/v20181101:getExpressRouteConnection", args ?? new GetExpressRouteConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// ExpressRouteConnection resource.
        /// </summary>
        public static Output<GetExpressRouteConnectionResult> Invoke(GetExpressRouteConnectionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetExpressRouteConnectionResult>("azure-native:network/v20181101:getExpressRouteConnection", args ?? new GetExpressRouteConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExpressRouteConnectionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ExpressRoute connection.
        /// </summary>
        [Input("connectionName", required: true)]
        public string ConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the ExpressRoute gateway.
        /// </summary>
        [Input("expressRouteGatewayName", required: true)]
        public string ExpressRouteGatewayName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetExpressRouteConnectionArgs()
        {
        }
    }

    public sealed class GetExpressRouteConnectionInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ExpressRoute connection.
        /// </summary>
        [Input("connectionName", required: true)]
        public Input<string> ConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the ExpressRoute gateway.
        /// </summary>
        [Input("expressRouteGatewayName", required: true)]
        public Input<string> ExpressRouteGatewayName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetExpressRouteConnectionInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetExpressRouteConnectionResult
    {
        /// <summary>
        /// Authorization key to establish the connection.
        /// </summary>
        public readonly string? AuthorizationKey;
        /// <summary>
        /// The ExpressRoute circuit peering.
        /// </summary>
        public readonly Outputs.ExpressRouteCircuitPeeringIdResponse ExpressRouteCircuitPeering;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The routing weight associated to the connection.
        /// </summary>
        public readonly int? RoutingWeight;

        [OutputConstructor]
        private GetExpressRouteConnectionResult(
            string? authorizationKey,

            Outputs.ExpressRouteCircuitPeeringIdResponse expressRouteCircuitPeering,

            string? id,

            string name,

            string provisioningState,

            int? routingWeight)
        {
            AuthorizationKey = authorizationKey;
            ExpressRouteCircuitPeering = expressRouteCircuitPeering;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            RoutingWeight = routingWeight;
        }
    }
}
