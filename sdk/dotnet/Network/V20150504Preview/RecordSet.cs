// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20150504Preview
{
    /// <summary>
    /// Describes a DNS record set (a collection of DNS records with the same name and type).
    /// </summary>
    [AzureNextGenResourceType("azure-nextgen:network/v20150504preview:RecordSet")]
    public partial class RecordSet : Pulumi.CustomResource
    {
        /// <summary>
        /// Gets or sets the list of AAAA records in the RecordSet.
        /// </summary>
        [Output("aAAARecords")]
        public Output<ImmutableArray<Outputs.AaaaRecordResponse>> AAAARecords { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the list of A records in the RecordSet.
        /// </summary>
        [Output("aRecords")]
        public Output<ImmutableArray<Outputs.ARecordResponse>> ARecords { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the CNAME record in the RecordSet.
        /// </summary>
        [Output("cNAMERecord")]
        public Output<Outputs.CnameRecordResponse?> CNAMERecord { get; private set; } = null!;

        /// <summary>
        /// The etag of the record set.
        /// </summary>
        [Output("etag")]
        public Output<string?> Etag { get; private set; } = null!;

        /// <summary>
        /// Fully qualified domain name of the record set.
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the list of MX records in the RecordSet.
        /// </summary>
        [Output("mXRecords")]
        public Output<ImmutableArray<Outputs.MxRecordResponse>> MXRecords { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the list of NS records in the RecordSet.
        /// </summary>
        [Output("nSRecords")]
        public Output<ImmutableArray<Outputs.NsRecordResponse>> NSRecords { get; private set; } = null!;

        /// <summary>
        /// The name of the record set.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the list of PTR records in the RecordSet.
        /// </summary>
        [Output("pTRRecords")]
        public Output<ImmutableArray<Outputs.PtrRecordResponse>> PTRRecords { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the SOA record in the RecordSet.
        /// </summary>
        [Output("sOARecord")]
        public Output<Outputs.SoaRecordResponse?> SOARecord { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the list of SRV records in the RecordSet.
        /// </summary>
        [Output("sRVRecords")]
        public Output<ImmutableArray<Outputs.SrvRecordResponse>> SRVRecords { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the list of TXT records in the RecordSet.
        /// </summary>
        [Output("tXTRecords")]
        public Output<ImmutableArray<Outputs.TxtRecordResponse>> TXTRecords { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the TTL of the records in the RecordSet.
        /// </summary>
        [Output("ttl")]
        public Output<double?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The type of the record set.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RecordSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RecordSet(string name, RecordSetArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:network/v20150504preview:RecordSet", name, args ?? new RecordSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RecordSet(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:network/v20150504preview:RecordSet", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20160401:RecordSet"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20170901:RecordSet"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20171001:RecordSet"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20180301preview:RecordSet"},
                    new Pulumi.Alias { Type = "azure-nextgen:network/v20180501:RecordSet"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RecordSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RecordSet Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RecordSet(name, id, options);
        }
    }

    public sealed class RecordSetArgs : Pulumi.ResourceArgs
    {
        [Input("aAAARecords")]
        private InputList<Inputs.AaaaRecordArgs>? _aAAARecords;

        /// <summary>
        /// Gets or sets the list of AAAA records in the RecordSet.
        /// </summary>
        public InputList<Inputs.AaaaRecordArgs> AAAARecords
        {
            get => _aAAARecords ?? (_aAAARecords = new InputList<Inputs.AaaaRecordArgs>());
            set => _aAAARecords = value;
        }

        [Input("aRecords")]
        private InputList<Inputs.ARecordArgs>? _aRecords;

        /// <summary>
        /// Gets or sets the list of A records in the RecordSet.
        /// </summary>
        public InputList<Inputs.ARecordArgs> ARecords
        {
            get => _aRecords ?? (_aRecords = new InputList<Inputs.ARecordArgs>());
            set => _aRecords = value;
        }

        /// <summary>
        /// Gets or sets the CNAME record in the RecordSet.
        /// </summary>
        [Input("cNAMERecord")]
        public Input<Inputs.CnameRecordArgs>? CNAMERecord { get; set; }

        /// <summary>
        /// The etag of the record set.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("mXRecords")]
        private InputList<Inputs.MxRecordArgs>? _mXRecords;

        /// <summary>
        /// Gets or sets the list of MX records in the RecordSet.
        /// </summary>
        public InputList<Inputs.MxRecordArgs> MXRecords
        {
            get => _mXRecords ?? (_mXRecords = new InputList<Inputs.MxRecordArgs>());
            set => _mXRecords = value;
        }

        [Input("nSRecords")]
        private InputList<Inputs.NsRecordArgs>? _nSRecords;

        /// <summary>
        /// Gets or sets the list of NS records in the RecordSet.
        /// </summary>
        public InputList<Inputs.NsRecordArgs> NSRecords
        {
            get => _nSRecords ?? (_nSRecords = new InputList<Inputs.NsRecordArgs>());
            set => _nSRecords = value;
        }

        [Input("pTRRecords")]
        private InputList<Inputs.PtrRecordArgs>? _pTRRecords;

        /// <summary>
        /// Gets or sets the list of PTR records in the RecordSet.
        /// </summary>
        public InputList<Inputs.PtrRecordArgs> PTRRecords
        {
            get => _pTRRecords ?? (_pTRRecords = new InputList<Inputs.PtrRecordArgs>());
            set => _pTRRecords = value;
        }

        /// <summary>
        /// The type of DNS record.
        /// </summary>
        [Input("recordType", required: true)]
        public Input<string> RecordType { get; set; } = null!;

        /// <summary>
        /// The name of the RecordSet, relative to the name of the zone.
        /// </summary>
        [Input("relativeRecordSetName")]
        public Input<string>? RelativeRecordSetName { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Gets or sets the SOA record in the RecordSet.
        /// </summary>
        [Input("sOARecord")]
        public Input<Inputs.SoaRecordArgs>? SOARecord { get; set; }

        [Input("sRVRecords")]
        private InputList<Inputs.SrvRecordArgs>? _sRVRecords;

        /// <summary>
        /// Gets or sets the list of SRV records in the RecordSet.
        /// </summary>
        public InputList<Inputs.SrvRecordArgs> SRVRecords
        {
            get => _sRVRecords ?? (_sRVRecords = new InputList<Inputs.SrvRecordArgs>());
            set => _sRVRecords = value;
        }

        [Input("tXTRecords")]
        private InputList<Inputs.TxtRecordArgs>? _tXTRecords;

        /// <summary>
        /// Gets or sets the list of TXT records in the RecordSet.
        /// </summary>
        public InputList<Inputs.TxtRecordArgs> TXTRecords
        {
            get => _tXTRecords ?? (_tXTRecords = new InputList<Inputs.TxtRecordArgs>());
            set => _tXTRecords = value;
        }

        /// <summary>
        /// Gets or sets the TTL of the records in the RecordSet.
        /// </summary>
        [Input("ttl")]
        public Input<double>? Ttl { get; set; }

        /// <summary>
        /// The name of the zone without a terminating dot.
        /// </summary>
        [Input("zoneName", required: true)]
        public Input<string> ZoneName { get; set; } = null!;

        public RecordSetArgs()
        {
        }
    }
}
