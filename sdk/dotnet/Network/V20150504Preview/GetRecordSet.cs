// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20150504Preview
{
    public static class GetRecordSet
    {
        public static Task<GetRecordSetResult> InvokeAsync(GetRecordSetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRecordSetResult>("azure-nextgen:network/v20150504preview:getRecordSet", args ?? new GetRecordSetArgs(), options.WithVersion());
    }


    public sealed class GetRecordSetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of DNS record.
        /// </summary>
        [Input("recordType", required: true)]
        public string RecordType { get; set; } = null!;

        /// <summary>
        /// The name of the RecordSet, relative to the name of the zone.
        /// </summary>
        [Input("relativeRecordSetName", required: true)]
        public string RelativeRecordSetName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the zone without a terminating dot.
        /// </summary>
        [Input("zoneName", required: true)]
        public string ZoneName { get; set; } = null!;

        public GetRecordSetArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRecordSetResult
    {
        /// <summary>
        /// Gets or sets the list of AAAA records in the RecordSet.
        /// </summary>
        public readonly ImmutableArray<Outputs.AaaaRecordResponse> AAAARecords;
        /// <summary>
        /// Gets or sets the list of A records in the RecordSet.
        /// </summary>
        public readonly ImmutableArray<Outputs.ARecordResponse> ARecords;
        /// <summary>
        /// Gets or sets the CNAME record in the RecordSet.
        /// </summary>
        public readonly Outputs.CnameRecordResponse? CNAMERecord;
        /// <summary>
        /// The etag of the record set.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Fully qualified domain name of the record set.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The ID of the record set.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Gets or sets the list of MX records in the RecordSet.
        /// </summary>
        public readonly ImmutableArray<Outputs.MxRecordResponse> MXRecords;
        /// <summary>
        /// Gets or sets the list of NS records in the RecordSet.
        /// </summary>
        public readonly ImmutableArray<Outputs.NsRecordResponse> NSRecords;
        /// <summary>
        /// The name of the record set.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets or sets the list of PTR records in the RecordSet.
        /// </summary>
        public readonly ImmutableArray<Outputs.PtrRecordResponse> PTRRecords;
        /// <summary>
        /// Gets or sets the SOA record in the RecordSet.
        /// </summary>
        public readonly Outputs.SoaRecordResponse? SOARecord;
        /// <summary>
        /// Gets or sets the list of SRV records in the RecordSet.
        /// </summary>
        public readonly ImmutableArray<Outputs.SrvRecordResponse> SRVRecords;
        /// <summary>
        /// Gets or sets the list of TXT records in the RecordSet.
        /// </summary>
        public readonly ImmutableArray<Outputs.TxtRecordResponse> TXTRecords;
        /// <summary>
        /// Gets or sets the TTL of the records in the RecordSet.
        /// </summary>
        public readonly double? Ttl;
        /// <summary>
        /// The type of the record set.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRecordSetResult(
            ImmutableArray<Outputs.AaaaRecordResponse> aAAARecords,

            ImmutableArray<Outputs.ARecordResponse> aRecords,

            Outputs.CnameRecordResponse? cNAMERecord,

            string? etag,

            string fqdn,

            string id,

            ImmutableArray<Outputs.MxRecordResponse> mXRecords,

            ImmutableArray<Outputs.NsRecordResponse> nSRecords,

            string name,

            ImmutableArray<Outputs.PtrRecordResponse> pTRRecords,

            Outputs.SoaRecordResponse? sOARecord,

            ImmutableArray<Outputs.SrvRecordResponse> sRVRecords,

            ImmutableArray<Outputs.TxtRecordResponse> tXTRecords,

            double? ttl,

            string type)
        {
            AAAARecords = aAAARecords;
            ARecords = aRecords;
            CNAMERecord = cNAMERecord;
            Etag = etag;
            Fqdn = fqdn;
            Id = id;
            MXRecords = mXRecords;
            NSRecords = nSRecords;
            Name = name;
            PTRRecords = pTRRecords;
            SOARecord = sOARecord;
            SRVRecords = sRVRecords;
            TXTRecords = tXTRecords;
            Ttl = ttl;
            Type = type;
        }
    }
}
