// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20170901
{
    [Obsolete(@"Version 2017-09-01 will be removed in v2 of the provider.")]
    public static class GetPacketCapture
    {
        /// <summary>
        /// Information about packet capture session.
        /// </summary>
        public static Task<GetPacketCaptureResult> InvokeAsync(GetPacketCaptureArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPacketCaptureResult>("azure-native:network/v20170901:getPacketCapture", args ?? new GetPacketCaptureArgs(), options.WithDefaults());

        /// <summary>
        /// Information about packet capture session.
        /// </summary>
        public static Output<GetPacketCaptureResult> Invoke(GetPacketCaptureInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPacketCaptureResult>("azure-native:network/v20170901:getPacketCapture", args ?? new GetPacketCaptureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPacketCaptureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network watcher.
        /// </summary>
        [Input("networkWatcherName", required: true)]
        public string NetworkWatcherName { get; set; } = null!;

        /// <summary>
        /// The name of the packet capture session.
        /// </summary>
        [Input("packetCaptureName", required: true)]
        public string PacketCaptureName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPacketCaptureArgs()
        {
        }
        public static new GetPacketCaptureArgs Empty => new GetPacketCaptureArgs();
    }

    public sealed class GetPacketCaptureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network watcher.
        /// </summary>
        [Input("networkWatcherName", required: true)]
        public Input<string> NetworkWatcherName { get; set; } = null!;

        /// <summary>
        /// The name of the packet capture session.
        /// </summary>
        [Input("packetCaptureName", required: true)]
        public Input<string> PacketCaptureName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPacketCaptureInvokeArgs()
        {
        }
        public static new GetPacketCaptureInvokeArgs Empty => new GetPacketCaptureInvokeArgs();
    }


    [OutputType]
    public sealed class GetPacketCaptureResult
    {
        /// <summary>
        /// Number of bytes captured per packet, the remaining bytes are truncated.
        /// </summary>
        public readonly int? BytesToCapturePerPacket;
        public readonly string? Etag;
        public readonly ImmutableArray<Outputs.PacketCaptureFilterResponse> Filters;
        /// <summary>
        /// ID of the packet capture operation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the packet capture session.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the packet capture session.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Describes the storage location for a packet capture session.
        /// </summary>
        public readonly Outputs.PacketCaptureStorageLocationResponse StorageLocation;
        /// <summary>
        /// The ID of the targeted resource, only VM is currently supported.
        /// </summary>
        public readonly string Target;
        /// <summary>
        /// Maximum duration of the capture session in seconds.
        /// </summary>
        public readonly int? TimeLimitInSeconds;
        /// <summary>
        /// Maximum size of the capture output.
        /// </summary>
        public readonly int? TotalBytesPerSession;

        [OutputConstructor]
        private GetPacketCaptureResult(
            int? bytesToCapturePerPacket,

            string? etag,

            ImmutableArray<Outputs.PacketCaptureFilterResponse> filters,

            string id,

            string name,

            string? provisioningState,

            Outputs.PacketCaptureStorageLocationResponse storageLocation,

            string target,

            int? timeLimitInSeconds,

            int? totalBytesPerSession)
        {
            BytesToCapturePerPacket = bytesToCapturePerPacket;
            Etag = etag;
            Filters = filters;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            StorageLocation = storageLocation;
            Target = target;
            TimeLimitInSeconds = timeLimitInSeconds;
            TotalBytesPerSession = totalBytesPerSession;
        }
    }
}
