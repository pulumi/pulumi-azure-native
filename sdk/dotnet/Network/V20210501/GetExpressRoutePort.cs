// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20210501
{
    public static class GetExpressRoutePort
    {
        /// <summary>
        /// Retrieves the requested ExpressRoutePort resource.
        /// </summary>
        public static Task<GetExpressRoutePortResult> InvokeAsync(GetExpressRoutePortArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExpressRoutePortResult>("azure-native:network/v20210501:getExpressRoutePort", args ?? new GetExpressRoutePortArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the requested ExpressRoutePort resource.
        /// </summary>
        public static Output<GetExpressRoutePortResult> Invoke(GetExpressRoutePortInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExpressRoutePortResult>("azure-native:network/v20210501:getExpressRoutePort", args ?? new GetExpressRoutePortInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExpressRoutePortArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of ExpressRoutePort.
        /// </summary>
        [Input("expressRoutePortName", required: true)]
        public string ExpressRoutePortName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetExpressRoutePortArgs()
        {
        }
        public static new GetExpressRoutePortArgs Empty => new GetExpressRoutePortArgs();
    }

    public sealed class GetExpressRoutePortInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of ExpressRoutePort.
        /// </summary>
        [Input("expressRoutePortName", required: true)]
        public Input<string> ExpressRoutePortName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetExpressRoutePortInvokeArgs()
        {
        }
        public static new GetExpressRoutePortInvokeArgs Empty => new GetExpressRoutePortInvokeArgs();
    }


    [OutputType]
    public sealed class GetExpressRoutePortResult
    {
        /// <summary>
        /// Date of the physical port allocation to be used in Letter of Authorization.
        /// </summary>
        public readonly string AllocationDate;
        /// <summary>
        /// Bandwidth of procured ports in Gbps.
        /// </summary>
        public readonly int? BandwidthInGbps;
        /// <summary>
        /// Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> Circuits;
        /// <summary>
        /// Encapsulation method on physical ports.
        /// </summary>
        public readonly string? Encapsulation;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Ether type of the physical port.
        /// </summary>
        public readonly string EtherType;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The identity of ExpressRoutePort, if configured.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// The set of physical links of the ExpressRoutePort resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ExpressRouteLinkResponse> Links;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Maximum transmission unit of the physical port pair(s).
        /// </summary>
        public readonly string Mtu;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The name of the peering location that the ExpressRoutePort is mapped to physically.
        /// </summary>
        public readonly string? PeeringLocation;
        /// <summary>
        /// Aggregate Gbps of associated circuit bandwidths.
        /// </summary>
        public readonly double ProvisionedBandwidthInGbps;
        /// <summary>
        /// The provisioning state of the express route port resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The resource GUID property of the express route port resource.
        /// </summary>
        public readonly string ResourceGuid;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetExpressRoutePortResult(
            string allocationDate,

            int? bandwidthInGbps,

            ImmutableArray<Outputs.SubResourceResponse> circuits,

            string? encapsulation,

            string etag,

            string etherType,

            string? id,

            Outputs.ManagedServiceIdentityResponse? identity,

            ImmutableArray<Outputs.ExpressRouteLinkResponse> links,

            string? location,

            string mtu,

            string name,

            string? peeringLocation,

            double provisionedBandwidthInGbps,

            string provisioningState,

            string resourceGuid,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AllocationDate = allocationDate;
            BandwidthInGbps = bandwidthInGbps;
            Circuits = circuits;
            Encapsulation = encapsulation;
            Etag = etag;
            EtherType = etherType;
            Id = id;
            Identity = identity;
            Links = links;
            Location = location;
            Mtu = mtu;
            Name = name;
            PeeringLocation = peeringLocation;
            ProvisionedBandwidthInGbps = provisionedBandwidthInGbps;
            ProvisioningState = provisioningState;
            ResourceGuid = resourceGuid;
            Tags = tags;
            Type = type;
        }
    }
}
