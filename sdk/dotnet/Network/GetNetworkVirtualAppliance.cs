// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    public static class GetNetworkVirtualAppliance
    {
        /// <summary>
        /// Gets the specified Network Virtual Appliance.
        /// 
        /// Uses Azure REST API version 2024-05-01.
        /// 
        /// Other available API versions: 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01, 2024-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetNetworkVirtualApplianceResult> InvokeAsync(GetNetworkVirtualApplianceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkVirtualApplianceResult>("azure-native:network:getNetworkVirtualAppliance", args ?? new GetNetworkVirtualApplianceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified Network Virtual Appliance.
        /// 
        /// Uses Azure REST API version 2024-05-01.
        /// 
        /// Other available API versions: 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01, 2024-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetNetworkVirtualApplianceResult> Invoke(GetNetworkVirtualApplianceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkVirtualApplianceResult>("azure-native:network:getNetworkVirtualAppliance", args ?? new GetNetworkVirtualApplianceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified Network Virtual Appliance.
        /// 
        /// Uses Azure REST API version 2024-05-01.
        /// 
        /// Other available API versions: 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01, 2024-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetNetworkVirtualApplianceResult> Invoke(GetNetworkVirtualApplianceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkVirtualApplianceResult>("azure-native:network:getNetworkVirtualAppliance", args ?? new GetNetworkVirtualApplianceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkVirtualApplianceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Expands referenced resources.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of Network Virtual Appliance.
        /// </summary>
        [Input("networkVirtualApplianceName", required: true)]
        public string NetworkVirtualApplianceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkVirtualApplianceArgs()
        {
        }
        public static new GetNetworkVirtualApplianceArgs Empty => new GetNetworkVirtualApplianceArgs();
    }

    public sealed class GetNetworkVirtualApplianceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Expands referenced resources.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The name of Network Virtual Appliance.
        /// </summary>
        [Input("networkVirtualApplianceName", required: true)]
        public Input<string> NetworkVirtualApplianceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkVirtualApplianceInvokeArgs()
        {
        }
        public static new GetNetworkVirtualApplianceInvokeArgs Empty => new GetNetworkVirtualApplianceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkVirtualApplianceResult
    {
        /// <summary>
        /// Details required for Additional Network Interface.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualApplianceAdditionalNicPropertiesResponse> AdditionalNics;
        /// <summary>
        /// Address Prefix.
        /// </summary>
        public readonly string AddressPrefix;
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// BootStrapConfigurationBlobs storage URLs.
        /// </summary>
        public readonly ImmutableArray<string> BootStrapConfigurationBlobs;
        /// <summary>
        /// CloudInitConfiguration string in plain text.
        /// </summary>
        public readonly string? CloudInitConfiguration;
        /// <summary>
        /// CloudInitConfigurationBlob storage URLs.
        /// </summary>
        public readonly ImmutableArray<string> CloudInitConfigurationBlobs;
        /// <summary>
        /// The delegation for the Virtual Appliance
        /// </summary>
        public readonly Outputs.DelegationPropertiesResponse? Delegation;
        /// <summary>
        /// The deployment type. PartnerManaged for the SaaS NVA
        /// </summary>
        public readonly string DeploymentType;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The service principal that has read access to cloud-init and config blob.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// List of references to InboundSecurityRules.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> InboundSecurityRules;
        /// <summary>
        /// List of Resource Uri of Public IPs for Internet Ingress Scenario.
        /// </summary>
        public readonly ImmutableArray<Outputs.InternetIngressPublicIpsPropertiesResponse> InternetIngressPublicIps;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network Profile containing configurations for Public and Private NIC.
        /// </summary>
        public readonly Outputs.NetworkVirtualAppliancePropertiesFormatResponseNetworkProfile? NetworkProfile;
        /// <summary>
        /// Network Virtual Appliance SKU.
        /// </summary>
        public readonly Outputs.VirtualApplianceSkuPropertiesResponse? NvaSku;
        /// <summary>
        /// The delegation for the Virtual Appliance
        /// </summary>
        public readonly Outputs.PartnerManagedResourcePropertiesResponse? PartnerManagedResource;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Public key for SSH login.
        /// </summary>
        public readonly string? SshPublicKey;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// VirtualAppliance ASN. Microsoft private, public and IANA reserved ASN are not supported.
        /// </summary>
        public readonly double? VirtualApplianceAsn;
        /// <summary>
        /// List of references to VirtualApplianceConnections.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> VirtualApplianceConnections;
        /// <summary>
        /// List of Virtual Appliance Network Interfaces.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualApplianceNicPropertiesResponse> VirtualApplianceNics;
        /// <summary>
        /// List of references to VirtualApplianceSite.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> VirtualApplianceSites;
        /// <summary>
        /// The Virtual Hub where Network Virtual Appliance is being deployed.
        /// </summary>
        public readonly Outputs.SubResourceResponse? VirtualHub;

        [OutputConstructor]
        private GetNetworkVirtualApplianceResult(
            ImmutableArray<Outputs.VirtualApplianceAdditionalNicPropertiesResponse> additionalNics,

            string addressPrefix,

            string azureApiVersion,

            ImmutableArray<string> bootStrapConfigurationBlobs,

            string? cloudInitConfiguration,

            ImmutableArray<string> cloudInitConfigurationBlobs,

            Outputs.DelegationPropertiesResponse? delegation,

            string deploymentType,

            string etag,

            string? id,

            Outputs.ManagedServiceIdentityResponse? identity,

            ImmutableArray<Outputs.SubResourceResponse> inboundSecurityRules,

            ImmutableArray<Outputs.InternetIngressPublicIpsPropertiesResponse> internetIngressPublicIps,

            string? location,

            string name,

            Outputs.NetworkVirtualAppliancePropertiesFormatResponseNetworkProfile? networkProfile,

            Outputs.VirtualApplianceSkuPropertiesResponse? nvaSku,

            Outputs.PartnerManagedResourcePropertiesResponse? partnerManagedResource,

            string provisioningState,

            string? sshPublicKey,

            ImmutableDictionary<string, string>? tags,

            string type,

            double? virtualApplianceAsn,

            ImmutableArray<Outputs.SubResourceResponse> virtualApplianceConnections,

            ImmutableArray<Outputs.VirtualApplianceNicPropertiesResponse> virtualApplianceNics,

            ImmutableArray<Outputs.SubResourceResponse> virtualApplianceSites,

            Outputs.SubResourceResponse? virtualHub)
        {
            AdditionalNics = additionalNics;
            AddressPrefix = addressPrefix;
            AzureApiVersion = azureApiVersion;
            BootStrapConfigurationBlobs = bootStrapConfigurationBlobs;
            CloudInitConfiguration = cloudInitConfiguration;
            CloudInitConfigurationBlobs = cloudInitConfigurationBlobs;
            Delegation = delegation;
            DeploymentType = deploymentType;
            Etag = etag;
            Id = id;
            Identity = identity;
            InboundSecurityRules = inboundSecurityRules;
            InternetIngressPublicIps = internetIngressPublicIps;
            Location = location;
            Name = name;
            NetworkProfile = networkProfile;
            NvaSku = nvaSku;
            PartnerManagedResource = partnerManagedResource;
            ProvisioningState = provisioningState;
            SshPublicKey = sshPublicKey;
            Tags = tags;
            Type = type;
            VirtualApplianceAsn = virtualApplianceAsn;
            VirtualApplianceConnections = virtualApplianceConnections;
            VirtualApplianceNics = virtualApplianceNics;
            VirtualApplianceSites = virtualApplianceSites;
            VirtualHub = virtualHub;
        }
    }
}
