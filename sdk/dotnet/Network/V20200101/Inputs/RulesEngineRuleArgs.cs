// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20200101.Inputs
{

    /// <summary>
    /// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
    /// </summary>
    public sealed class RulesEngineRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Actions to perform on the request and response if all of the match conditions are met.
        /// </summary>
        [Input("action", required: true)]
        public Input<Inputs.RulesEngineActionArgs> Action { get; set; } = null!;

        [Input("matchConditions")]
        private InputList<Inputs.RulesEngineMatchConditionArgs>? _matchConditions;

        /// <summary>
        /// A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
        /// </summary>
        public InputList<Inputs.RulesEngineMatchConditionArgs> MatchConditions
        {
            get => _matchConditions ?? (_matchConditions = new InputList<Inputs.RulesEngineMatchConditionArgs>());
            set => _matchConditions = value;
        }

        /// <summary>
        /// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
        /// </summary>
        [Input("matchProcessingBehavior")]
        public Input<string>? MatchProcessingBehavior { get; set; }

        /// <summary>
        /// A name to refer to this specific rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// A priority assigned to this rule. 
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        public RulesEngineRuleArgs()
        {
        }
    }
}
