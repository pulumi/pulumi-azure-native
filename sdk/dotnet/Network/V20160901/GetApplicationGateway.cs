// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20160901
{
    public static class GetApplicationGateway
    {
        public static Task<GetApplicationGatewayResult> InvokeAsync(GetApplicationGatewayArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationGatewayResult>("azure-nextgen:network/v20160901:getApplicationGateway", args ?? new GetApplicationGatewayArgs(), options.WithVersion());
    }


    public sealed class GetApplicationGatewayArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the application gateway.
        /// </summary>
        [Input("applicationGatewayName", required: true)]
        public string ApplicationGatewayName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetApplicationGatewayArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApplicationGatewayResult
    {
        /// <summary>
        /// Authentication certificates of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayAuthenticationCertificateInvokeResponseResult> AuthenticationCertificates;
        /// <summary>
        /// Backend address pool of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayBackendAddressPoolInvokeResponseResult> BackendAddressPools;
        /// <summary>
        /// Backend http settings of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayBackendHttpSettingsInvokeResponseResult> BackendHttpSettingsCollection;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Frontend IP addresses of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayFrontendIPConfigurationInvokeResponseResult> FrontendIPConfigurations;
        /// <summary>
        /// Frontend ports of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayFrontendPortInvokeResponseResult> FrontendPorts;
        /// <summary>
        /// Subnets of application the gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayIPConfigurationInvokeResponseResult> GatewayIPConfigurations;
        /// <summary>
        /// Http listeners of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayHttpListenerInvokeResponseResult> HttpListeners;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Operational state of the application gateway resource. Possible values are: 'Stopped', 'Started', 'Running', and 'Stopping'.
        /// </summary>
        public readonly string OperationalState;
        /// <summary>
        /// Probes of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayProbeInvokeResponseResult> Probes;
        /// <summary>
        /// Provisioning state of the application gateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Request routing rules of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayRequestRoutingRuleInvokeResponseResult> RequestRoutingRules;
        /// <summary>
        /// Resource GUID property of the application gateway resource.
        /// </summary>
        public readonly string? ResourceGuid;
        /// <summary>
        /// SKU of the application gateway resource.
        /// </summary>
        public readonly Outputs.ApplicationGatewaySkuInvokeResponseResult? Sku;
        /// <summary>
        /// SSL certificates of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewaySslCertificateInvokeResponseResult> SslCertificates;
        /// <summary>
        /// SSL policy of the application gateway resource.
        /// </summary>
        public readonly Outputs.ApplicationGatewaySslPolicyInvokeResponseResult? SslPolicy;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// URL path map of the application gateway resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayUrlPathMapInvokeResponseResult> UrlPathMaps;
        /// <summary>
        /// Web application firewall configuration.
        /// </summary>
        public readonly Outputs.ApplicationGatewayWebApplicationFirewallConfigurationInvokeResponseResult? WebApplicationFirewallConfiguration;

        [OutputConstructor]
        private GetApplicationGatewayResult(
            ImmutableArray<Outputs.ApplicationGatewayAuthenticationCertificateInvokeResponseResult> authenticationCertificates,

            ImmutableArray<Outputs.ApplicationGatewayBackendAddressPoolInvokeResponseResult> backendAddressPools,

            ImmutableArray<Outputs.ApplicationGatewayBackendHttpSettingsInvokeResponseResult> backendHttpSettingsCollection,

            string? etag,

            ImmutableArray<Outputs.ApplicationGatewayFrontendIPConfigurationInvokeResponseResult> frontendIPConfigurations,

            ImmutableArray<Outputs.ApplicationGatewayFrontendPortInvokeResponseResult> frontendPorts,

            ImmutableArray<Outputs.ApplicationGatewayIPConfigurationInvokeResponseResult> gatewayIPConfigurations,

            ImmutableArray<Outputs.ApplicationGatewayHttpListenerInvokeResponseResult> httpListeners,

            string? id,

            string? location,

            string name,

            string operationalState,

            ImmutableArray<Outputs.ApplicationGatewayProbeInvokeResponseResult> probes,

            string? provisioningState,

            ImmutableArray<Outputs.ApplicationGatewayRequestRoutingRuleInvokeResponseResult> requestRoutingRules,

            string? resourceGuid,

            Outputs.ApplicationGatewaySkuInvokeResponseResult? sku,

            ImmutableArray<Outputs.ApplicationGatewaySslCertificateInvokeResponseResult> sslCertificates,

            Outputs.ApplicationGatewaySslPolicyInvokeResponseResult? sslPolicy,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<Outputs.ApplicationGatewayUrlPathMapInvokeResponseResult> urlPathMaps,

            Outputs.ApplicationGatewayWebApplicationFirewallConfigurationInvokeResponseResult? webApplicationFirewallConfiguration)
        {
            AuthenticationCertificates = authenticationCertificates;
            BackendAddressPools = backendAddressPools;
            BackendHttpSettingsCollection = backendHttpSettingsCollection;
            Etag = etag;
            FrontendIPConfigurations = frontendIPConfigurations;
            FrontendPorts = frontendPorts;
            GatewayIPConfigurations = gatewayIPConfigurations;
            HttpListeners = httpListeners;
            Id = id;
            Location = location;
            Name = name;
            OperationalState = operationalState;
            Probes = probes;
            ProvisioningState = provisioningState;
            RequestRoutingRules = requestRoutingRules;
            ResourceGuid = resourceGuid;
            Sku = sku;
            SslCertificates = sslCertificates;
            SslPolicy = sslPolicy;
            Tags = tags;
            Type = type;
            UrlPathMaps = urlPathMaps;
            WebApplicationFirewallConfiguration = webApplicationFirewallConfiguration;
        }
    }
}
