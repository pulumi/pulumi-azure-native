// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20220101
{
    public static class GetLoadBalancer
    {
        /// <summary>
        /// Gets the specified load balancer.
        /// </summary>
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("azure-native:network/v20220101:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified load balancer.
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("azure-native:network/v20220101:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Expands referenced resources.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Input("loadBalancerName", required: true)]
        public string LoadBalancerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLoadBalancerArgs()
        {
        }
        public static new GetLoadBalancerArgs Empty => new GetLoadBalancerArgs();
    }

    public sealed class GetLoadBalancerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Expands referenced resources.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Input("loadBalancerName", required: true)]
        public Input<string> LoadBalancerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLoadBalancerInvokeArgs()
        {
        }
        public static new GetLoadBalancerInvokeArgs Empty => new GetLoadBalancerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        /// <summary>
        /// Collection of backend address pools used by a load balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.BackendAddressPoolResponse> BackendAddressPools;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The extended location of the load balancer.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Object representing the frontend IPs to be used for the load balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.FrontendIPConfigurationResponse> FrontendIPConfigurations;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Defines an port range to be used by inbound NAT Pools. Inbound NAT pools are used to define a range of NAT ports to be used by a VMSS cluster. After the creation of an inbound NAT pool, individual inbound NAT rules are automatically created for every VM in a VMSS cluster.  Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are associated with VMSS, while inbound NAT rules are associated with individual VMs.
        /// </summary>
        public readonly ImmutableArray<Outputs.InboundNatPoolResponse> InboundNatPools;
        /// <summary>
        /// collection of inbound NAT Rules used by a load balancer. An inbound NAT rule is used to forward traffic from a load balancer frontend to one or more instances in the backend pool. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are associated with VMSS, while inbound NAT rules are associated with individual VMs.
        /// </summary>
        public readonly ImmutableArray<Outputs.InboundNatRuleResponse> InboundNatRules;
        /// <summary>
        /// Object collection representing the load balancing rules Gets the provisioning.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadBalancingRuleResponse> LoadBalancingRules;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The outbound rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.OutboundRuleResponse> OutboundRules;
        /// <summary>
        /// Collection of probe objects used in the load balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.ProbeResponse> Probes;
        /// <summary>
        /// The provisioning state of the load balancer resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The resource GUID property of the load balancer resource.
        /// </summary>
        public readonly string ResourceGuid;
        /// <summary>
        /// The load balancer SKU.
        /// </summary>
        public readonly Outputs.LoadBalancerSkuResponse? Sku;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLoadBalancerResult(
            ImmutableArray<Outputs.BackendAddressPoolResponse> backendAddressPools,

            string etag,

            Outputs.ExtendedLocationResponse? extendedLocation,

            ImmutableArray<Outputs.FrontendIPConfigurationResponse> frontendIPConfigurations,

            string? id,

            ImmutableArray<Outputs.InboundNatPoolResponse> inboundNatPools,

            ImmutableArray<Outputs.InboundNatRuleResponse> inboundNatRules,

            ImmutableArray<Outputs.LoadBalancingRuleResponse> loadBalancingRules,

            string? location,

            string name,

            ImmutableArray<Outputs.OutboundRuleResponse> outboundRules,

            ImmutableArray<Outputs.ProbeResponse> probes,

            string provisioningState,

            string resourceGuid,

            Outputs.LoadBalancerSkuResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            BackendAddressPools = backendAddressPools;
            Etag = etag;
            ExtendedLocation = extendedLocation;
            FrontendIPConfigurations = frontendIPConfigurations;
            Id = id;
            InboundNatPools = inboundNatPools;
            InboundNatRules = inboundNatRules;
            LoadBalancingRules = loadBalancingRules;
            Location = location;
            Name = name;
            OutboundRules = outboundRules;
            Probes = probes;
            ProvisioningState = provisioningState;
            ResourceGuid = resourceGuid;
            Sku = sku;
            Tags = tags;
            Type = type;
        }
    }
}
