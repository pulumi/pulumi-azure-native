// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    public static class GetSecurityConfiguration
    {
        /// <summary>
        /// Defines the security Configuration
        /// API Version: 2021-02-01-preview.
        /// </summary>
        public static Task<GetSecurityConfigurationResult> InvokeAsync(GetSecurityConfigurationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecurityConfigurationResult>("azure-native:network:getSecurityConfiguration", args ?? new GetSecurityConfigurationArgs(), options.WithVersion());
    }


    public sealed class GetSecurityConfigurationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network manager security Configuration.
        /// </summary>
        [Input("configurationName", required: true)]
        public string ConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public string NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetSecurityConfigurationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSecurityConfigurationResult
    {
        /// <summary>
        /// Groups for configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkManagerSecurityGroupItemResponse> AppliesToGroups;
        /// <summary>
        /// Flag if need to delete existing network security groups.
        /// </summary>
        public readonly bool? DeleteExistingNSGs;
        /// <summary>
        /// A description of the security Configuration.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A display name of the security Configuration.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the scope assignment resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Security Type.
        /// </summary>
        public readonly string? SecurityType;
        /// <summary>
        /// The system metadata related to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSecurityConfigurationResult(
            ImmutableArray<Outputs.NetworkManagerSecurityGroupItemResponse> appliesToGroups,

            bool? deleteExistingNSGs,

            string? description,

            string? displayName,

            string etag,

            string id,

            string name,

            string provisioningState,

            string? securityType,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AppliesToGroups = appliesToGroups;
            DeleteExistingNSGs = deleteExistingNSGs;
            Description = description;
            DisplayName = displayName;
            Etag = etag;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            SecurityType = securityType;
            SystemData = systemData;
            Type = type;
        }
    }
}
