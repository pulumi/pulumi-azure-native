// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.V20181001.Inputs
{

    /// <summary>
    /// Properties of the subnet.
    /// </summary>
    public sealed class SubnetPropertiesFormatResponseArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The address prefix for the subnet.
        /// </summary>
        [Input("addressPrefix")]
        public string? AddressPrefix { get; set; }

        [Input("addressPrefixes")]
        private List<string>? _addressPrefixes;

        /// <summary>
        /// List of  address prefixes for the subnet.
        /// </summary>
        public List<string> AddressPrefixes
        {
            get => _addressPrefixes ?? (_addressPrefixes = new List<string>());
            set => _addressPrefixes = value;
        }

        [Input("delegations")]
        private List<Inputs.DelegationResponseArgs>? _delegations;

        /// <summary>
        /// Gets an array of references to the delegations on the subnet.
        /// </summary>
        public List<Inputs.DelegationResponseArgs> Delegations
        {
            get => _delegations ?? (_delegations = new List<Inputs.DelegationResponseArgs>());
            set => _delegations = value;
        }

        [Input("interfaceEndpoints", required: true)]
        private List<Inputs.InterfaceEndpointResponseArgs>? _interfaceEndpoints;

        /// <summary>
        /// An array of references to interface endpoints 
        /// </summary>
        public List<Inputs.InterfaceEndpointResponseArgs> InterfaceEndpoints
        {
            get => _interfaceEndpoints ?? (_interfaceEndpoints = new List<Inputs.InterfaceEndpointResponseArgs>());
            set => _interfaceEndpoints = value;
        }

        [Input("ipConfigurationProfiles", required: true)]
        private List<Inputs.IPConfigurationProfileResponseArgs>? _ipConfigurationProfiles;

        /// <summary>
        /// Array of IP configuration profiles which reference this subnet.
        /// </summary>
        public List<Inputs.IPConfigurationProfileResponseArgs> IpConfigurationProfiles
        {
            get => _ipConfigurationProfiles ?? (_ipConfigurationProfiles = new List<Inputs.IPConfigurationProfileResponseArgs>());
            set => _ipConfigurationProfiles = value;
        }

        [Input("ipConfigurations", required: true)]
        private List<Inputs.IPConfigurationResponseArgs>? _ipConfigurations;

        /// <summary>
        /// Gets an array of references to the network interface IP configurations using subnet.
        /// </summary>
        public List<Inputs.IPConfigurationResponseArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new List<Inputs.IPConfigurationResponseArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The reference of the NetworkSecurityGroup resource.
        /// </summary>
        [Input("networkSecurityGroup")]
        public Inputs.NetworkSecurityGroupResponseArgs? NetworkSecurityGroup { get; set; }

        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        [Input("provisioningState")]
        public string? ProvisioningState { get; set; }

        /// <summary>
        /// A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
        /// </summary>
        [Input("purpose", required: true)]
        public string Purpose { get; set; } = null!;

        [Input("resourceNavigationLinks")]
        private List<Inputs.ResourceNavigationLinkResponseArgs>? _resourceNavigationLinks;

        /// <summary>
        /// Gets an array of references to the external resources using subnet.
        /// </summary>
        public List<Inputs.ResourceNavigationLinkResponseArgs> ResourceNavigationLinks
        {
            get => _resourceNavigationLinks ?? (_resourceNavigationLinks = new List<Inputs.ResourceNavigationLinkResponseArgs>());
            set => _resourceNavigationLinks = value;
        }

        /// <summary>
        /// The reference of the RouteTable resource.
        /// </summary>
        [Input("routeTable")]
        public Inputs.RouteTableResponseArgs? RouteTable { get; set; }

        [Input("serviceAssociationLinks")]
        private List<Inputs.ServiceAssociationLinkResponseArgs>? _serviceAssociationLinks;

        /// <summary>
        /// Gets an array of references to services injecting into this subnet.
        /// </summary>
        public List<Inputs.ServiceAssociationLinkResponseArgs> ServiceAssociationLinks
        {
            get => _serviceAssociationLinks ?? (_serviceAssociationLinks = new List<Inputs.ServiceAssociationLinkResponseArgs>());
            set => _serviceAssociationLinks = value;
        }

        [Input("serviceEndpointPolicies")]
        private List<Inputs.ServiceEndpointPolicyResponseArgs>? _serviceEndpointPolicies;

        /// <summary>
        /// An array of service endpoint policies.
        /// </summary>
        public List<Inputs.ServiceEndpointPolicyResponseArgs> ServiceEndpointPolicies
        {
            get => _serviceEndpointPolicies ?? (_serviceEndpointPolicies = new List<Inputs.ServiceEndpointPolicyResponseArgs>());
            set => _serviceEndpointPolicies = value;
        }

        [Input("serviceEndpoints")]
        private List<Inputs.ServiceEndpointPropertiesFormatResponseArgs>? _serviceEndpoints;

        /// <summary>
        /// An array of service endpoints.
        /// </summary>
        public List<Inputs.ServiceEndpointPropertiesFormatResponseArgs> ServiceEndpoints
        {
            get => _serviceEndpoints ?? (_serviceEndpoints = new List<Inputs.ServiceEndpointPropertiesFormatResponseArgs>());
            set => _serviceEndpoints = value;
        }

        public SubnetPropertiesFormatResponseArgs()
        {
        }
    }
}
