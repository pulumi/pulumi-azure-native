// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20210301
{
    public static class GetVirtualNetworkPeering
    {
        /// <summary>
        /// Peerings in a virtual network resource.
        /// </summary>
        public static Task<GetVirtualNetworkPeeringResult> InvokeAsync(GetVirtualNetworkPeeringArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualNetworkPeeringResult>("azure-native:network/v20210301:getVirtualNetworkPeering", args ?? new GetVirtualNetworkPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// Peerings in a virtual network resource.
        /// </summary>
        public static Output<GetVirtualNetworkPeeringResult> Invoke(GetVirtualNetworkPeeringInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualNetworkPeeringResult>("azure-native:network/v20210301:getVirtualNetworkPeering", args ?? new GetVirtualNetworkPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualNetworkPeeringArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network.
        /// </summary>
        [Input("virtualNetworkName", required: true)]
        public string VirtualNetworkName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network peering.
        /// </summary>
        [Input("virtualNetworkPeeringName", required: true)]
        public string VirtualNetworkPeeringName { get; set; } = null!;

        public GetVirtualNetworkPeeringArgs()
        {
        }
        public static new GetVirtualNetworkPeeringArgs Empty => new GetVirtualNetworkPeeringArgs();
    }

    public sealed class GetVirtualNetworkPeeringInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network.
        /// </summary>
        [Input("virtualNetworkName", required: true)]
        public Input<string> VirtualNetworkName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network peering.
        /// </summary>
        [Input("virtualNetworkPeeringName", required: true)]
        public Input<string> VirtualNetworkPeeringName { get; set; } = null!;

        public GetVirtualNetworkPeeringInvokeArgs()
        {
        }
        public static new GetVirtualNetworkPeeringInvokeArgs Empty => new GetVirtualNetworkPeeringInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualNetworkPeeringResult
    {
        /// <summary>
        /// Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
        /// </summary>
        public readonly bool? AllowForwardedTraffic;
        /// <summary>
        /// If gateway links can be used in remote virtual networking to link to this virtual network.
        /// </summary>
        public readonly bool? AllowGatewayTransit;
        /// <summary>
        /// Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
        /// </summary>
        public readonly bool? AllowVirtualNetworkAccess;
        /// <summary>
        /// If we need to verify the provisioning state of the remote gateway.
        /// </summary>
        public readonly bool? DoNotVerifyRemoteGateways;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The status of the virtual network peering.
        /// </summary>
        public readonly string? PeeringState;
        /// <summary>
        /// The peering sync status of the virtual network peering.
        /// </summary>
        public readonly string? PeeringSyncLevel;
        /// <summary>
        /// The provisioning state of the virtual network peering resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The reference to the address space peered with the remote virtual network.
        /// </summary>
        public readonly Outputs.AddressSpaceResponse? RemoteAddressSpace;
        /// <summary>
        /// The reference to the remote virtual network's Bgp Communities.
        /// </summary>
        public readonly Outputs.VirtualNetworkBgpCommunitiesResponse? RemoteBgpCommunities;
        /// <summary>
        /// The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
        /// </summary>
        public readonly Outputs.SubResourceResponse? RemoteVirtualNetwork;
        /// <summary>
        /// The reference to the current address space of the remote virtual network.
        /// </summary>
        public readonly Outputs.AddressSpaceResponse? RemoteVirtualNetworkAddressSpace;
        /// <summary>
        /// The resourceGuid property of the Virtual Network peering resource.
        /// </summary>
        public readonly string ResourceGuid;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
        /// </summary>
        public readonly bool? UseRemoteGateways;

        [OutputConstructor]
        private GetVirtualNetworkPeeringResult(
            bool? allowForwardedTraffic,

            bool? allowGatewayTransit,

            bool? allowVirtualNetworkAccess,

            bool? doNotVerifyRemoteGateways,

            string etag,

            string? id,

            string? name,

            string? peeringState,

            string? peeringSyncLevel,

            string provisioningState,

            Outputs.AddressSpaceResponse? remoteAddressSpace,

            Outputs.VirtualNetworkBgpCommunitiesResponse? remoteBgpCommunities,

            Outputs.SubResourceResponse? remoteVirtualNetwork,

            Outputs.AddressSpaceResponse? remoteVirtualNetworkAddressSpace,

            string resourceGuid,

            string? type,

            bool? useRemoteGateways)
        {
            AllowForwardedTraffic = allowForwardedTraffic;
            AllowGatewayTransit = allowGatewayTransit;
            AllowVirtualNetworkAccess = allowVirtualNetworkAccess;
            DoNotVerifyRemoteGateways = doNotVerifyRemoteGateways;
            Etag = etag;
            Id = id;
            Name = name;
            PeeringState = peeringState;
            PeeringSyncLevel = peeringSyncLevel;
            ProvisioningState = provisioningState;
            RemoteAddressSpace = remoteAddressSpace;
            RemoteBgpCommunities = remoteBgpCommunities;
            RemoteVirtualNetwork = remoteVirtualNetwork;
            RemoteVirtualNetworkAddressSpace = remoteVirtualNetworkAddressSpace;
            ResourceGuid = resourceGuid;
            Type = type;
            UseRemoteGateways = useRemoteGateways;
        }
    }
}
