// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20210301
{
    /// <summary>
    /// The commissioned state of the Custom IP Prefix.
    /// </summary>
    [EnumType]
    public readonly struct CommissionedState : IEquatable<CommissionedState>
    {
        private readonly string _value;

        private CommissionedState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CommissionedState Provisioning { get; } = new CommissionedState("Provisioning");
        public static CommissionedState Provisioned { get; } = new CommissionedState("Provisioned");
        public static CommissionedState Commissioning { get; } = new CommissionedState("Commissioning");
        public static CommissionedState Commissioned { get; } = new CommissionedState("Commissioned");
        public static CommissionedState Decommissioning { get; } = new CommissionedState("Decommissioning");
        public static CommissionedState Deprovisioning { get; } = new CommissionedState("Deprovisioning");

        public static bool operator ==(CommissionedState left, CommissionedState right) => left.Equals(right);
        public static bool operator !=(CommissionedState left, CommissionedState right) => !left.Equals(right);

        public static explicit operator string(CommissionedState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CommissionedState other && Equals(other);
        public bool Equals(CommissionedState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationTypes EdgeZone { get; } = new ExtendedLocationTypes("EdgeZone");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Source NAT direction of a VPN NAT.
    /// </summary>
    [EnumType]
    public readonly struct VpnNatRuleMode : IEquatable<VpnNatRuleMode>
    {
        private readonly string _value;

        private VpnNatRuleMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpnNatRuleMode EgressSnat { get; } = new VpnNatRuleMode("EgressSnat");
        public static VpnNatRuleMode IngressSnat { get; } = new VpnNatRuleMode("IngressSnat");

        public static bool operator ==(VpnNatRuleMode left, VpnNatRuleMode right) => left.Equals(right);
        public static bool operator !=(VpnNatRuleMode left, VpnNatRuleMode right) => !left.Equals(right);

        public static explicit operator string(VpnNatRuleMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpnNatRuleMode other && Equals(other);
        public bool Equals(VpnNatRuleMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of NAT rule for VPN NAT.
    /// </summary>
    [EnumType]
    public readonly struct VpnNatRuleType : IEquatable<VpnNatRuleType>
    {
        private readonly string _value;

        private VpnNatRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpnNatRuleType Static { get; } = new VpnNatRuleType("Static");
        public static VpnNatRuleType Dynamic { get; } = new VpnNatRuleType("Dynamic");

        public static bool operator ==(VpnNatRuleType left, VpnNatRuleType right) => left.Equals(right);
        public static bool operator !=(VpnNatRuleType left, VpnNatRuleType right) => !left.Equals(right);

        public static explicit operator string(VpnNatRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpnNatRuleType other && Equals(other);
        public bool Equals(VpnNatRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
