// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20230201
{
    public static class GetVirtualNetworkGateway
    {
        /// <summary>
        /// Gets the specified virtual network gateway by resource group.
        /// </summary>
        public static Task<GetVirtualNetworkGatewayResult> InvokeAsync(GetVirtualNetworkGatewayArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualNetworkGatewayResult>("azure-native:network/v20230201:getVirtualNetworkGateway", args ?? new GetVirtualNetworkGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified virtual network gateway by resource group.
        /// </summary>
        public static Output<GetVirtualNetworkGatewayResult> Invoke(GetVirtualNetworkGatewayInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualNetworkGatewayResult>("azure-native:network/v20230201:getVirtualNetworkGateway", args ?? new GetVirtualNetworkGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualNetworkGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network gateway.
        /// </summary>
        [Input("virtualNetworkGatewayName", required: true)]
        public string VirtualNetworkGatewayName { get; set; } = null!;

        public GetVirtualNetworkGatewayArgs()
        {
        }
        public static new GetVirtualNetworkGatewayArgs Empty => new GetVirtualNetworkGatewayArgs();
    }

    public sealed class GetVirtualNetworkGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network gateway.
        /// </summary>
        [Input("virtualNetworkGatewayName", required: true)]
        public Input<string> VirtualNetworkGatewayName { get; set; } = null!;

        public GetVirtualNetworkGatewayInvokeArgs()
        {
        }
        public static new GetVirtualNetworkGatewayInvokeArgs Empty => new GetVirtualNetworkGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualNetworkGatewayResult
    {
        /// <summary>
        /// ActiveActive flag.
        /// </summary>
        public readonly bool? ActiveActive;
        /// <summary>
        /// Property to indicate if the Express Route Gateway serves traffic when there are multiple Express Route Gateways in the vnet
        /// </summary>
        public readonly string? AdminState;
        /// <summary>
        /// Configure this gateway to accept traffic from other Azure Virtual Networks. This configuration does not support connectivity to Azure Virtual WAN.
        /// </summary>
        public readonly bool? AllowRemoteVnetTraffic;
        /// <summary>
        /// Configures this gateway to accept traffic from remote Virtual WAN networks.
        /// </summary>
        public readonly bool? AllowVirtualWanTraffic;
        /// <summary>
        /// Virtual network gateway's BGP speaker settings.
        /// </summary>
        public readonly Outputs.BgpSettingsResponse? BgpSettings;
        /// <summary>
        /// The reference to the address space resource which represents the custom routes address space specified by the customer for virtual network gateway and VpnClient.
        /// </summary>
        public readonly Outputs.AddressSpaceResponse? CustomRoutes;
        /// <summary>
        /// disableIPSecReplayProtection flag.
        /// </summary>
        public readonly bool? DisableIPSecReplayProtection;
        /// <summary>
        /// Whether BGP is enabled for this virtual network gateway or not.
        /// </summary>
        public readonly bool? EnableBgp;
        /// <summary>
        /// EnableBgpRouteTranslationForNat flag.
        /// </summary>
        public readonly bool? EnableBgpRouteTranslationForNat;
        /// <summary>
        /// Whether dns forwarding is enabled or not.
        /// </summary>
        public readonly bool? EnableDnsForwarding;
        /// <summary>
        /// Whether private IP needs to be enabled on this gateway for connections or not.
        /// </summary>
        public readonly bool? EnablePrivateIpAddress;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The extended location of type local virtual network gateway.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// The reference to the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting.
        /// </summary>
        public readonly Outputs.SubResourceResponse? GatewayDefaultSite;
        /// <summary>
        /// The type of this virtual network gateway.
        /// </summary>
        public readonly string? GatewayType;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The IP address allocated by the gateway to which dns requests can be sent.
        /// </summary>
        public readonly string InboundDnsForwardingEndpoint;
        /// <summary>
        /// IP configurations for virtual network gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualNetworkGatewayIPConfigurationResponse> IpConfigurations;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NatRules for virtual network gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualNetworkGatewayNatRuleResponse> NatRules;
        /// <summary>
        /// The provisioning state of the virtual network gateway resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The resource GUID property of the virtual network gateway resource.
        /// </summary>
        public readonly string ResourceGuid;
        /// <summary>
        /// The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
        /// </summary>
        public readonly Outputs.VirtualNetworkGatewaySkuResponse? Sku;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Customer vnet resource id. VirtualNetworkGateway of type local gateway is associated with the customer vnet.
        /// </summary>
        public readonly string? VNetExtendedLocationResourceId;
        /// <summary>
        /// The reference to the VirtualNetworkGatewayPolicyGroup resource which represents the available VirtualNetworkGatewayPolicyGroup for the gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualNetworkGatewayPolicyGroupResponse> VirtualNetworkGatewayPolicyGroups;
        /// <summary>
        /// The reference to the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
        /// </summary>
        public readonly Outputs.VpnClientConfigurationResponse? VpnClientConfiguration;
        /// <summary>
        /// The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
        /// </summary>
        public readonly string? VpnGatewayGeneration;
        /// <summary>
        /// The type of this virtual network gateway.
        /// </summary>
        public readonly string? VpnType;

        [OutputConstructor]
        private GetVirtualNetworkGatewayResult(
            bool? activeActive,

            string? adminState,

            bool? allowRemoteVnetTraffic,

            bool? allowVirtualWanTraffic,

            Outputs.BgpSettingsResponse? bgpSettings,

            Outputs.AddressSpaceResponse? customRoutes,

            bool? disableIPSecReplayProtection,

            bool? enableBgp,

            bool? enableBgpRouteTranslationForNat,

            bool? enableDnsForwarding,

            bool? enablePrivateIpAddress,

            string etag,

            Outputs.ExtendedLocationResponse? extendedLocation,

            Outputs.SubResourceResponse? gatewayDefaultSite,

            string? gatewayType,

            string? id,

            string inboundDnsForwardingEndpoint,

            ImmutableArray<Outputs.VirtualNetworkGatewayIPConfigurationResponse> ipConfigurations,

            string? location,

            string name,

            ImmutableArray<Outputs.VirtualNetworkGatewayNatRuleResponse> natRules,

            string provisioningState,

            string resourceGuid,

            Outputs.VirtualNetworkGatewaySkuResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? vNetExtendedLocationResourceId,

            ImmutableArray<Outputs.VirtualNetworkGatewayPolicyGroupResponse> virtualNetworkGatewayPolicyGroups,

            Outputs.VpnClientConfigurationResponse? vpnClientConfiguration,

            string? vpnGatewayGeneration,

            string? vpnType)
        {
            ActiveActive = activeActive;
            AdminState = adminState;
            AllowRemoteVnetTraffic = allowRemoteVnetTraffic;
            AllowVirtualWanTraffic = allowVirtualWanTraffic;
            BgpSettings = bgpSettings;
            CustomRoutes = customRoutes;
            DisableIPSecReplayProtection = disableIPSecReplayProtection;
            EnableBgp = enableBgp;
            EnableBgpRouteTranslationForNat = enableBgpRouteTranslationForNat;
            EnableDnsForwarding = enableDnsForwarding;
            EnablePrivateIpAddress = enablePrivateIpAddress;
            Etag = etag;
            ExtendedLocation = extendedLocation;
            GatewayDefaultSite = gatewayDefaultSite;
            GatewayType = gatewayType;
            Id = id;
            InboundDnsForwardingEndpoint = inboundDnsForwardingEndpoint;
            IpConfigurations = ipConfigurations;
            Location = location;
            Name = name;
            NatRules = natRules;
            ProvisioningState = provisioningState;
            ResourceGuid = resourceGuid;
            Sku = sku;
            Tags = tags;
            Type = type;
            VNetExtendedLocationResourceId = vNetExtendedLocationResourceId;
            VirtualNetworkGatewayPolicyGroups = virtualNetworkGatewayPolicyGroups;
            VpnClientConfiguration = vpnClientConfiguration;
            VpnGatewayGeneration = vpnGatewayGeneration;
            VpnType = vpnType;
        }
    }
}
