// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20200401
{
    /// <summary>
    /// Protocol type.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallApplicationRuleProtocolType : IEquatable<AzureFirewallApplicationRuleProtocolType>
    {
        private readonly string _value;

        private AzureFirewallApplicationRuleProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallApplicationRuleProtocolType Http { get; } = new AzureFirewallApplicationRuleProtocolType("Http");
        public static AzureFirewallApplicationRuleProtocolType Https { get; } = new AzureFirewallApplicationRuleProtocolType("Https");
        public static AzureFirewallApplicationRuleProtocolType Mssql { get; } = new AzureFirewallApplicationRuleProtocolType("Mssql");

        public static bool operator ==(AzureFirewallApplicationRuleProtocolType left, AzureFirewallApplicationRuleProtocolType right) => left.Equals(right);
        public static bool operator !=(AzureFirewallApplicationRuleProtocolType left, AzureFirewallApplicationRuleProtocolType right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallApplicationRuleProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallApplicationRuleProtocolType other && Equals(other);
        public bool Equals(AzureFirewallApplicationRuleProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallNatRCActionType : IEquatable<AzureFirewallNatRCActionType>
    {
        private readonly string _value;

        private AzureFirewallNatRCActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallNatRCActionType Snat { get; } = new AzureFirewallNatRCActionType("Snat");
        public static AzureFirewallNatRCActionType Dnat { get; } = new AzureFirewallNatRCActionType("Dnat");

        public static bool operator ==(AzureFirewallNatRCActionType left, AzureFirewallNatRCActionType right) => left.Equals(right);
        public static bool operator !=(AzureFirewallNatRCActionType left, AzureFirewallNatRCActionType right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallNatRCActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallNatRCActionType other && Equals(other);
        public bool Equals(AzureFirewallNatRCActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol of a Network Rule resource.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallNetworkRuleProtocol : IEquatable<AzureFirewallNetworkRuleProtocol>
    {
        private readonly string _value;

        private AzureFirewallNetworkRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallNetworkRuleProtocol TCP { get; } = new AzureFirewallNetworkRuleProtocol("TCP");
        public static AzureFirewallNetworkRuleProtocol UDP { get; } = new AzureFirewallNetworkRuleProtocol("UDP");
        public static AzureFirewallNetworkRuleProtocol Any { get; } = new AzureFirewallNetworkRuleProtocol("Any");
        public static AzureFirewallNetworkRuleProtocol ICMP { get; } = new AzureFirewallNetworkRuleProtocol("ICMP");

        public static bool operator ==(AzureFirewallNetworkRuleProtocol left, AzureFirewallNetworkRuleProtocol right) => left.Equals(right);
        public static bool operator !=(AzureFirewallNetworkRuleProtocol left, AzureFirewallNetworkRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallNetworkRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallNetworkRuleProtocol other && Equals(other);
        public bool Equals(AzureFirewallNetworkRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallRCActionType : IEquatable<AzureFirewallRCActionType>
    {
        private readonly string _value;

        private AzureFirewallRCActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallRCActionType Allow { get; } = new AzureFirewallRCActionType("Allow");
        public static AzureFirewallRCActionType Deny { get; } = new AzureFirewallRCActionType("Deny");

        public static bool operator ==(AzureFirewallRCActionType left, AzureFirewallRCActionType right) => left.Equals(right);
        public static bool operator !=(AzureFirewallRCActionType left, AzureFirewallRCActionType right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallRCActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallRCActionType other && Equals(other);
        public bool Equals(AzureFirewallRCActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of an Azure Firewall SKU.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallSkuName : IEquatable<AzureFirewallSkuName>
    {
        private readonly string _value;

        private AzureFirewallSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallSkuName AZFW_VNet { get; } = new AzureFirewallSkuName("AZFW_VNet");
        public static AzureFirewallSkuName AZFW_Hub { get; } = new AzureFirewallSkuName("AZFW_Hub");

        public static bool operator ==(AzureFirewallSkuName left, AzureFirewallSkuName right) => left.Equals(right);
        public static bool operator !=(AzureFirewallSkuName left, AzureFirewallSkuName right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallSkuName other && Equals(other);
        public bool Equals(AzureFirewallSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of an Azure Firewall.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallSkuTier : IEquatable<AzureFirewallSkuTier>
    {
        private readonly string _value;

        private AzureFirewallSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallSkuTier Standard { get; } = new AzureFirewallSkuTier("Standard");
        public static AzureFirewallSkuTier Premium { get; } = new AzureFirewallSkuTier("Premium");

        public static bool operator ==(AzureFirewallSkuTier left, AzureFirewallSkuTier right) => left.Equals(right);
        public static bool operator !=(AzureFirewallSkuTier left, AzureFirewallSkuTier right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallSkuTier other && Equals(other);
        public bool Equals(AzureFirewallSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation mode for Threat Intelligence.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallThreatIntelMode : IEquatable<AzureFirewallThreatIntelMode>
    {
        private readonly string _value;

        private AzureFirewallThreatIntelMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallThreatIntelMode Alert { get; } = new AzureFirewallThreatIntelMode("Alert");
        public static AzureFirewallThreatIntelMode Deny { get; } = new AzureFirewallThreatIntelMode("Deny");
        public static AzureFirewallThreatIntelMode Off { get; } = new AzureFirewallThreatIntelMode("Off");

        public static bool operator ==(AzureFirewallThreatIntelMode left, AzureFirewallThreatIntelMode right) => left.Equals(right);
        public static bool operator !=(AzureFirewallThreatIntelMode left, AzureFirewallThreatIntelMode right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallThreatIntelMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallThreatIntelMode other && Equals(other);
        public bool Equals(AzureFirewallThreatIntelMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyFilterRuleActionType : IEquatable<FirewallPolicyFilterRuleActionType>
    {
        private readonly string _value;

        private FirewallPolicyFilterRuleActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyFilterRuleActionType Allow { get; } = new FirewallPolicyFilterRuleActionType("Allow");
        public static FirewallPolicyFilterRuleActionType Deny { get; } = new FirewallPolicyFilterRuleActionType("Deny");

        public static bool operator ==(FirewallPolicyFilterRuleActionType left, FirewallPolicyFilterRuleActionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyFilterRuleActionType left, FirewallPolicyFilterRuleActionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyFilterRuleActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyFilterRuleActionType other && Equals(other);
        public bool Equals(FirewallPolicyFilterRuleActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyNatRuleActionType : IEquatable<FirewallPolicyNatRuleActionType>
    {
        private readonly string _value;

        private FirewallPolicyNatRuleActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyNatRuleActionType DNAT { get; } = new FirewallPolicyNatRuleActionType("DNAT");

        public static bool operator ==(FirewallPolicyNatRuleActionType left, FirewallPolicyNatRuleActionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyNatRuleActionType left, FirewallPolicyNatRuleActionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyNatRuleActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyNatRuleActionType other && Equals(other);
        public bool Equals(FirewallPolicyNatRuleActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol type.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleConditionApplicationProtocolType : IEquatable<FirewallPolicyRuleConditionApplicationProtocolType>
    {
        private readonly string _value;

        private FirewallPolicyRuleConditionApplicationProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleConditionApplicationProtocolType Http { get; } = new FirewallPolicyRuleConditionApplicationProtocolType("Http");
        public static FirewallPolicyRuleConditionApplicationProtocolType Https { get; } = new FirewallPolicyRuleConditionApplicationProtocolType("Https");

        public static bool operator ==(FirewallPolicyRuleConditionApplicationProtocolType left, FirewallPolicyRuleConditionApplicationProtocolType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleConditionApplicationProtocolType left, FirewallPolicyRuleConditionApplicationProtocolType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleConditionApplicationProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleConditionApplicationProtocolType other && Equals(other);
        public bool Equals(FirewallPolicyRuleConditionApplicationProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Network protocol of a Rule condition.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleConditionNetworkProtocol : IEquatable<FirewallPolicyRuleConditionNetworkProtocol>
    {
        private readonly string _value;

        private FirewallPolicyRuleConditionNetworkProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleConditionNetworkProtocol TCP { get; } = new FirewallPolicyRuleConditionNetworkProtocol("TCP");
        public static FirewallPolicyRuleConditionNetworkProtocol UDP { get; } = new FirewallPolicyRuleConditionNetworkProtocol("UDP");
        public static FirewallPolicyRuleConditionNetworkProtocol Any { get; } = new FirewallPolicyRuleConditionNetworkProtocol("Any");
        public static FirewallPolicyRuleConditionNetworkProtocol ICMP { get; } = new FirewallPolicyRuleConditionNetworkProtocol("ICMP");

        public static bool operator ==(FirewallPolicyRuleConditionNetworkProtocol left, FirewallPolicyRuleConditionNetworkProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleConditionNetworkProtocol left, FirewallPolicyRuleConditionNetworkProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleConditionNetworkProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleConditionNetworkProtocol other && Equals(other);
        public bool Equals(FirewallPolicyRuleConditionNetworkProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rule Condition Type.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleConditionType : IEquatable<FirewallPolicyRuleConditionType>
    {
        private readonly string _value;

        private FirewallPolicyRuleConditionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleConditionType ApplicationRuleCondition { get; } = new FirewallPolicyRuleConditionType("ApplicationRuleCondition");
        public static FirewallPolicyRuleConditionType NetworkRuleCondition { get; } = new FirewallPolicyRuleConditionType("NetworkRuleCondition");
        public static FirewallPolicyRuleConditionType NatRuleCondition { get; } = new FirewallPolicyRuleConditionType("NatRuleCondition");

        public static bool operator ==(FirewallPolicyRuleConditionType left, FirewallPolicyRuleConditionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleConditionType left, FirewallPolicyRuleConditionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleConditionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleConditionType other && Equals(other);
        public bool Equals(FirewallPolicyRuleConditionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the rule.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleType : IEquatable<FirewallPolicyRuleType>
    {
        private readonly string _value;

        private FirewallPolicyRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleType FirewallPolicyNatRule { get; } = new FirewallPolicyRuleType("FirewallPolicyNatRule");
        public static FirewallPolicyRuleType FirewallPolicyFilterRule { get; } = new FirewallPolicyRuleType("FirewallPolicyFilterRule");

        public static bool operator ==(FirewallPolicyRuleType left, FirewallPolicyRuleType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleType left, FirewallPolicyRuleType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleType other && Equals(other);
        public bool Equals(FirewallPolicyRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned, UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
