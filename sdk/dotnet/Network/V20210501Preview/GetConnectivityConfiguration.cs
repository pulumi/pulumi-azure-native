// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20210501Preview
{
    public static class GetConnectivityConfiguration
    {
        /// <summary>
        /// The network manager connectivity configuration resource
        /// </summary>
        public static Task<GetConnectivityConfigurationResult> InvokeAsync(GetConnectivityConfigurationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectivityConfigurationResult>("azure-native:network/v20210501preview:getConnectivityConfiguration", args ?? new GetConnectivityConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// The network manager connectivity configuration resource
        /// </summary>
        public static Output<GetConnectivityConfigurationResult> Invoke(GetConnectivityConfigurationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConnectivityConfigurationResult>("azure-native:network/v20210501preview:getConnectivityConfiguration", args ?? new GetConnectivityConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectivityConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network manager connectivity configuration.
        /// </summary>
        [Input("configurationName", required: true)]
        public string ConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public string NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConnectivityConfigurationArgs()
        {
        }
        public static new GetConnectivityConfigurationArgs Empty => new GetConnectivityConfigurationArgs();
    }

    public sealed class GetConnectivityConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network manager connectivity configuration.
        /// </summary>
        [Input("configurationName", required: true)]
        public Input<string> ConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public Input<string> NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetConnectivityConfigurationInvokeArgs()
        {
        }
        public static new GetConnectivityConfigurationInvokeArgs Empty => new GetConnectivityConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectivityConfigurationResult
    {
        /// <summary>
        /// Groups for configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectivityGroupItemResponse> AppliesToGroups;
        /// <summary>
        /// Connectivity topology type.
        /// </summary>
        public readonly string ConnectivityTopology;
        /// <summary>
        /// Flag if need to remove current existing peerings.
        /// </summary>
        public readonly string? DeleteExistingPeering;
        /// <summary>
        /// A description of the connectivity configuration.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A friendly name for the resource.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// List of hubItems
        /// </summary>
        public readonly ImmutableArray<Outputs.HubResponse> Hubs;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Flag if global mesh is supported.
        /// </summary>
        public readonly string? IsGlobal;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the connectivity configuration resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The system metadata related to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetConnectivityConfigurationResult(
            ImmutableArray<Outputs.ConnectivityGroupItemResponse> appliesToGroups,

            string connectivityTopology,

            string? deleteExistingPeering,

            string? description,

            string? displayName,

            string etag,

            ImmutableArray<Outputs.HubResponse> hubs,

            string id,

            string? isGlobal,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AppliesToGroups = appliesToGroups;
            ConnectivityTopology = connectivityTopology;
            DeleteExistingPeering = deleteExistingPeering;
            Description = description;
            DisplayName = displayName;
            Etag = etag;
            Hubs = hubs;
            Id = id;
            IsGlobal = isGlobal;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
