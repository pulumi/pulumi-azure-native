// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20230701Preview
{
    public static class GetDnssecConfig
    {
        /// <summary>
        /// Gets the DNSSEC configuration.
        /// </summary>
        public static Task<GetDnssecConfigResult> InvokeAsync(GetDnssecConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnssecConfigResult>("azure-native:network/v20230701preview:getDnssecConfig", args ?? new GetDnssecConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the DNSSEC configuration.
        /// </summary>
        public static Output<GetDnssecConfigResult> Invoke(GetDnssecConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnssecConfigResult>("azure-native:network/v20230701preview:getDnssecConfig", args ?? new GetDnssecConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnssecConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the DNS zone (without a terminating dot).
        /// </summary>
        [Input("zoneName", required: true)]
        public string ZoneName { get; set; } = null!;

        public GetDnssecConfigArgs()
        {
        }
        public static new GetDnssecConfigArgs Empty => new GetDnssecConfigArgs();
    }

    public sealed class GetDnssecConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the DNS zone (without a terminating dot).
        /// </summary>
        [Input("zoneName", required: true)]
        public Input<string> ZoneName { get; set; } = null!;

        public GetDnssecConfigInvokeArgs()
        {
        }
        public static new GetDnssecConfigInvokeArgs Empty => new GetDnssecConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnssecConfigResult
    {
        /// <summary>
        /// The etag of the DNSSEC configuration.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// The ID of the DNSSEC configuration.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the DNSSEC configuration.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning State of the DNSSEC configuration.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The list of signing keys.
        /// </summary>
        public readonly ImmutableArray<Outputs.SigningKeyResponse> SigningKeys;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the DNSSEC configuration.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDnssecConfigResult(
            string? etag,

            string id,

            string name,

            string provisioningState,

            ImmutableArray<Outputs.SigningKeyResponse> signingKeys,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Etag = etag;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            SigningKeys = signingKeys;
            SystemData = systemData;
            Type = type;
        }
    }
}
