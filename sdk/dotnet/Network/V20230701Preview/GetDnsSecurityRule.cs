// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20230701Preview
{
    public static class GetDnsSecurityRule
    {
        /// <summary>
        /// Gets properties of a DNS security rule for a DNS resolver policy.
        /// </summary>
        public static Task<GetDnsSecurityRuleResult> InvokeAsync(GetDnsSecurityRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsSecurityRuleResult>("azure-native:network/v20230701preview:getDnsSecurityRule", args ?? new GetDnsSecurityRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Gets properties of a DNS security rule for a DNS resolver policy.
        /// </summary>
        public static Output<GetDnsSecurityRuleResult> Invoke(GetDnsSecurityRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsSecurityRuleResult>("azure-native:network/v20230701preview:getDnsSecurityRule", args ?? new GetDnsSecurityRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsSecurityRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DNS resolver policy.
        /// </summary>
        [Input("dnsResolverPolicyName", required: true)]
        public string DnsResolverPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the DNS security rule.
        /// </summary>
        [Input("dnsSecurityRuleName", required: true)]
        public string DnsSecurityRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDnsSecurityRuleArgs()
        {
        }
        public static new GetDnsSecurityRuleArgs Empty => new GetDnsSecurityRuleArgs();
    }

    public sealed class GetDnsSecurityRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DNS resolver policy.
        /// </summary>
        [Input("dnsResolverPolicyName", required: true)]
        public Input<string> DnsResolverPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the DNS security rule.
        /// </summary>
        [Input("dnsSecurityRuleName", required: true)]
        public Input<string> DnsSecurityRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDnsSecurityRuleInvokeArgs()
        {
        }
        public static new GetDnsSecurityRuleInvokeArgs Empty => new GetDnsSecurityRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsSecurityRuleResult
    {
        /// <summary>
        /// The action to take on DNS requests that match the DNS security rule.
        /// </summary>
        public readonly Outputs.DnsSecurityRuleActionResponse Action;
        /// <summary>
        /// DNS resolver policy domains lists that the DNS security rule applies to.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> DnsResolverDomainLists;
        /// <summary>
        /// The state of DNS security rule.
        /// </summary>
        public readonly string? DnsSecurityRuleState;
        /// <summary>
        /// ETag of the DNS security rule.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The priority of the DNS security rule.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// The current provisioning state of the DNS security rule. This is a read-only property and any attempt to set this value will be ignored.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDnsSecurityRuleResult(
            Outputs.DnsSecurityRuleActionResponse action,

            ImmutableArray<Outputs.SubResourceResponse> dnsResolverDomainLists,

            string? dnsSecurityRuleState,

            string etag,

            string id,

            string location,

            string name,

            int priority,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Action = action;
            DnsResolverDomainLists = dnsResolverDomainLists;
            DnsSecurityRuleState = dnsSecurityRuleState;
            Etag = etag;
            Id = id;
            Location = location;
            Name = name;
            Priority = priority;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
