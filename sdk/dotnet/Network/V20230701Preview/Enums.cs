// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20230701Preview
{
    /// <summary>
    /// Direction that specifies whether the access rules is inbound/outbound.
    /// </summary>
    [EnumType]
    public readonly struct AccessRuleDirection : IEquatable<AccessRuleDirection>
    {
        private readonly string _value;

        private AccessRuleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessRuleDirection Inbound { get; } = new AccessRuleDirection("Inbound");
        public static AccessRuleDirection Outbound { get; } = new AccessRuleDirection("Outbound");

        public static bool operator ==(AccessRuleDirection left, AccessRuleDirection right) => left.Equals(right);
        public static bool operator !=(AccessRuleDirection left, AccessRuleDirection right) => !left.Equals(right);

        public static explicit operator string(AccessRuleDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessRuleDirection other && Equals(other);
        public bool Equals(AccessRuleDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to take.
    /// </summary>
    [EnumType]
    public readonly struct ActionType : IEquatable<ActionType>
    {
        private readonly string _value;

        private ActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionType Allow { get; } = new ActionType("Allow");
        public static ActionType Alert { get; } = new ActionType("Alert");
        public static ActionType Block { get; } = new ActionType("Block");

        public static bool operator ==(ActionType left, ActionType right) => left.Equals(right);
        public static bool operator !=(ActionType left, ActionType right) => !left.Equals(right);

        public static explicit operator string(ActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionType other && Equals(other);
        public bool Equals(ActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Access mode on the association.
    /// </summary>
    [EnumType]
    public readonly struct AssociationAccessMode : IEquatable<AssociationAccessMode>
    {
        private readonly string _value;

        private AssociationAccessMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssociationAccessMode Learning { get; } = new AssociationAccessMode("Learning");
        public static AssociationAccessMode Enforced { get; } = new AssociationAccessMode("Enforced");
        public static AssociationAccessMode Audit { get; } = new AssociationAccessMode("Audit");

        public static bool operator ==(AssociationAccessMode left, AssociationAccessMode right) => left.Equals(right);
        public static bool operator !=(AssociationAccessMode left, AssociationAccessMode right) => !left.Equals(right);

        public static explicit operator string(AssociationAccessMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssociationAccessMode other && Equals(other);
        public bool Equals(AssociationAccessMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The response code for block actions.
    /// </summary>
    [EnumType]
    public readonly struct BlockResponseCode : IEquatable<BlockResponseCode>
    {
        private readonly string _value;

        private BlockResponseCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BlockResponseCode SERVFAIL { get; } = new BlockResponseCode("SERVFAIL");

        public static bool operator ==(BlockResponseCode left, BlockResponseCode right) => left.Equals(right);
        public static bool operator !=(BlockResponseCode left, BlockResponseCode right) => !left.Equals(right);

        public static explicit operator string(BlockResponseCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BlockResponseCode other && Equals(other);
        public bool Equals(BlockResponseCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of DNS security rule.
    /// </summary>
    [EnumType]
    public readonly struct DnsSecurityRuleState : IEquatable<DnsSecurityRuleState>
    {
        private readonly string _value;

        private DnsSecurityRuleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DnsSecurityRuleState Enabled { get; } = new DnsSecurityRuleState("Enabled");
        public static DnsSecurityRuleState Disabled { get; } = new DnsSecurityRuleState("Disabled");

        public static bool operator ==(DnsSecurityRuleState left, DnsSecurityRuleState right) => left.Equals(right);
        public static bool operator !=(DnsSecurityRuleState left, DnsSecurityRuleState right) => !left.Equals(right);

        public static explicit operator string(DnsSecurityRuleState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DnsSecurityRuleState other && Equals(other);
        public bool Equals(DnsSecurityRuleState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of forwarding rule.
    /// </summary>
    [EnumType]
    public readonly struct ForwardingRuleState : IEquatable<ForwardingRuleState>
    {
        private readonly string _value;

        private ForwardingRuleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ForwardingRuleState Enabled { get; } = new ForwardingRuleState("Enabled");
        public static ForwardingRuleState Disabled { get; } = new ForwardingRuleState("Disabled");

        public static bool operator ==(ForwardingRuleState left, ForwardingRuleState right) => left.Equals(right);
        public static bool operator !=(ForwardingRuleState left, ForwardingRuleState right) => !left.Equals(right);

        public static explicit operator string(ForwardingRuleState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ForwardingRuleState other && Equals(other);
        public bool Equals(ForwardingRuleState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Private IP address allocation method.
    /// </summary>
    [EnumType]
    public readonly struct IpAllocationMethod : IEquatable<IpAllocationMethod>
    {
        private readonly string _value;

        private IpAllocationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpAllocationMethod Static { get; } = new IpAllocationMethod("Static");
        public static IpAllocationMethod Dynamic { get; } = new IpAllocationMethod("Dynamic");

        public static bool operator ==(IpAllocationMethod left, IpAllocationMethod right) => left.Equals(right);
        public static bool operator !=(IpAllocationMethod left, IpAllocationMethod right) => !left.Equals(right);

        public static explicit operator string(IpAllocationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpAllocationMethod other && Equals(other);
        public bool Equals(IpAllocationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this DNS zone (Public or Private).
    /// </summary>
    [EnumType]
    public readonly struct ZoneType : IEquatable<ZoneType>
    {
        private readonly string _value;

        private ZoneType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ZoneType Public { get; } = new ZoneType("Public");
        public static ZoneType Private { get; } = new ZoneType("Private");

        public static bool operator ==(ZoneType left, ZoneType right) => left.Equals(right);
        public static bool operator !=(ZoneType left, ZoneType right) => !left.Equals(right);

        public static explicit operator string(ZoneType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ZoneType other && Equals(other);
        public bool Equals(ZoneType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
