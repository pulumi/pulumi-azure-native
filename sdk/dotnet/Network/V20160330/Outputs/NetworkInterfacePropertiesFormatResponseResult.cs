// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.V20160330.Outputs
{

    [OutputType]
    public sealed class NetworkInterfacePropertiesFormatResponseResult
    {
        /// <summary>
        /// Gets or sets DNS Settings in  NetworkInterface
        /// </summary>
        public readonly Outputs.NetworkInterfaceDnsSettingsResponseResult? DnsSettings;
        /// <summary>
        /// Gets or sets whether IPForwarding is enabled on the NIC
        /// </summary>
        public readonly bool? EnableIPForwarding;
        /// <summary>
        /// Gets or sets list of IPConfigurations of the NetworkInterface
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkInterfaceIPConfigurationResponseResult> IpConfigurations;
        /// <summary>
        /// Gets the MAC Address of the network interface
        /// </summary>
        public readonly string? MacAddress;
        /// <summary>
        /// Gets or sets the reference of the NetworkSecurityGroup resource
        /// </summary>
        public readonly Outputs.NetworkSecurityGroupResponseResult? NetworkSecurityGroup;
        /// <summary>
        /// Gets whether this is a primary NIC on a virtual machine
        /// </summary>
        public readonly bool? Primary;
        /// <summary>
        /// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Gets or sets resource GUID property of the network interface resource
        /// </summary>
        public readonly string? ResourceGuid;
        /// <summary>
        /// Gets or sets the reference of a VirtualMachine
        /// </summary>
        public readonly Outputs.SubResourceResponseResult? VirtualMachine;

        [OutputConstructor]
        private NetworkInterfacePropertiesFormatResponseResult(
            Outputs.NetworkInterfaceDnsSettingsResponseResult? dnsSettings,

            bool? enableIPForwarding,

            ImmutableArray<Outputs.NetworkInterfaceIPConfigurationResponseResult> ipConfigurations,

            string? macAddress,

            Outputs.NetworkSecurityGroupResponseResult? networkSecurityGroup,

            bool? primary,

            string? provisioningState,

            string? resourceGuid,

            Outputs.SubResourceResponseResult? virtualMachine)
        {
            DnsSettings = dnsSettings;
            EnableIPForwarding = enableIPForwarding;
            IpConfigurations = ipConfigurations;
            MacAddress = macAddress;
            NetworkSecurityGroup = networkSecurityGroup;
            Primary = primary;
            ProvisioningState = provisioningState;
            ResourceGuid = resourceGuid;
            VirtualMachine = virtualMachine;
        }
    }
}
