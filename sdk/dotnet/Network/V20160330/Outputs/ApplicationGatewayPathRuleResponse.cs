// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20160330.Outputs
{

    /// <summary>
    /// Path rule of URL path map of application gateway
    /// </summary>
    [OutputType]
    public sealed class ApplicationGatewayPathRuleResponse
    {
        /// <summary>
        /// Gets or sets backend address pool resource of URL path map 
        /// </summary>
        public readonly Outputs.SubResourceResponse? BackendAddressPool;
        /// <summary>
        /// Gets or sets backend http settings resource of URL path map 
        /// </summary>
        public readonly Outputs.SubResourceResponse? BackendHttpSettings;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Gets name of the resource that is unique within a resource group. This name can be used to access the resource
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Gets or sets the path rules of URL path map
        /// </summary>
        public readonly ImmutableArray<string> Paths;
        /// <summary>
        /// Gets or sets path rule of URL path map resource Updating/Deleting/Failed
        /// </summary>
        public readonly string? ProvisioningState;

        [OutputConstructor]
        private ApplicationGatewayPathRuleResponse(
            Outputs.SubResourceResponse? backendAddressPool,

            Outputs.SubResourceResponse? backendHttpSettings,

            string? etag,

            string? id,

            string? name,

            ImmutableArray<string> paths,

            string? provisioningState)
        {
            BackendAddressPool = backendAddressPool;
            BackendHttpSettings = backendHttpSettings;
            Etag = etag;
            Id = id;
            Name = name;
            Paths = paths;
            ProvisioningState = provisioningState;
        }
    }
}
