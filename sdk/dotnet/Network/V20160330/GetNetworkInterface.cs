// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20160330
{
    public static class GetNetworkInterface
    {
        public static Task<GetNetworkInterfaceResult> InvokeAsync(GetNetworkInterfaceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkInterfaceResult>("azure-nextgen:network/v20160330:getNetworkInterface", args ?? new GetNetworkInterfaceArgs(), options.WithVersion());
    }


    public sealed class GetNetworkInterfaceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// expand references resources.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the network interface.
        /// </summary>
        [Input("networkInterfaceName", required: true)]
        public string NetworkInterfaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkInterfaceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkInterfaceResult
    {
        /// <summary>
        /// Gets or sets DNS Settings in  NetworkInterface
        /// </summary>
        public readonly Outputs.NetworkInterfaceDnsSettingsResponse? DnsSettings;
        /// <summary>
        /// Gets or sets whether IPForwarding is enabled on the NIC
        /// </summary>
        public readonly bool? EnableIPForwarding;
        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is updated
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Gets or sets list of IPConfigurations of the NetworkInterface
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkInterfaceIPConfigurationResponse> IpConfigurations;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Gets the MAC Address of the network interface
        /// </summary>
        public readonly string? MacAddress;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets or sets the reference of the NetworkSecurityGroup resource
        /// </summary>
        public readonly Outputs.NetworkSecurityGroupResponse? NetworkSecurityGroup;
        /// <summary>
        /// Gets whether this is a primary NIC on a virtual machine
        /// </summary>
        public readonly bool? Primary;
        /// <summary>
        /// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Gets or sets resource GUID property of the network interface resource
        /// </summary>
        public readonly string? ResourceGuid;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Gets or sets the reference of a VirtualMachine
        /// </summary>
        public readonly Outputs.SubResourceResponse? VirtualMachine;

        [OutputConstructor]
        private GetNetworkInterfaceResult(
            Outputs.NetworkInterfaceDnsSettingsResponse? dnsSettings,

            bool? enableIPForwarding,

            string? etag,

            ImmutableArray<Outputs.NetworkInterfaceIPConfigurationResponse> ipConfigurations,

            string? location,

            string? macAddress,

            string name,

            Outputs.NetworkSecurityGroupResponse? networkSecurityGroup,

            bool? primary,

            string? provisioningState,

            string? resourceGuid,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.SubResourceResponse? virtualMachine)
        {
            DnsSettings = dnsSettings;
            EnableIPForwarding = enableIPForwarding;
            Etag = etag;
            IpConfigurations = ipConfigurations;
            Location = location;
            MacAddress = macAddress;
            Name = name;
            NetworkSecurityGroup = networkSecurityGroup;
            Primary = primary;
            ProvisioningState = provisioningState;
            ResourceGuid = resourceGuid;
            Tags = tags;
            Type = type;
            VirtualMachine = virtualMachine;
        }
    }
}
