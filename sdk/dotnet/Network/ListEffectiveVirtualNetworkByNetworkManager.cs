// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    public static class ListEffectiveVirtualNetworkByNetworkManager
    {
        /// <summary>
        /// List effective virtual networks in a network manager.
        /// Azure REST API version: 2022-04-01-preview.
        /// 
        /// Other available API versions: 2021-02-01-preview, 2021-05-01-preview.
        /// </summary>
        public static Task<ListEffectiveVirtualNetworkByNetworkManagerResult> InvokeAsync(ListEffectiveVirtualNetworkByNetworkManagerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListEffectiveVirtualNetworkByNetworkManagerResult>("azure-native:network:listEffectiveVirtualNetworkByNetworkManager", args ?? new ListEffectiveVirtualNetworkByNetworkManagerArgs(), options.WithDefaults());

        /// <summary>
        /// List effective virtual networks in a network manager.
        /// Azure REST API version: 2022-04-01-preview.
        /// 
        /// Other available API versions: 2021-02-01-preview, 2021-05-01-preview.
        /// </summary>
        public static Output<ListEffectiveVirtualNetworkByNetworkManagerResult> Invoke(ListEffectiveVirtualNetworkByNetworkManagerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListEffectiveVirtualNetworkByNetworkManagerResult>("azure-native:network:listEffectiveVirtualNetworkByNetworkManager", args ?? new ListEffectiveVirtualNetworkByNetworkManagerInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListEffectiveVirtualNetworkByNetworkManagerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Conditional Members.
        /// </summary>
        [Input("conditionalMembers")]
        public string? ConditionalMembers { get; set; }

        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public string NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
        /// </summary>
        [Input("skipToken")]
        public string? SkipToken { get; set; }

        /// <summary>
        /// An optional query parameter which specifies the maximum number of records to be returned by the server.
        /// </summary>
        [Input("top")]
        public int? Top { get; set; }

        public ListEffectiveVirtualNetworkByNetworkManagerArgs()
        {
        }
        public static new ListEffectiveVirtualNetworkByNetworkManagerArgs Empty => new ListEffectiveVirtualNetworkByNetworkManagerArgs();
    }

    public sealed class ListEffectiveVirtualNetworkByNetworkManagerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Conditional Members.
        /// </summary>
        [Input("conditionalMembers")]
        public Input<string>? ConditionalMembers { get; set; }

        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public Input<string> NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
        /// </summary>
        [Input("skipToken")]
        public Input<string>? SkipToken { get; set; }

        /// <summary>
        /// An optional query parameter which specifies the maximum number of records to be returned by the server.
        /// </summary>
        [Input("top")]
        public Input<int>? Top { get; set; }

        public ListEffectiveVirtualNetworkByNetworkManagerInvokeArgs()
        {
        }
        public static new ListEffectiveVirtualNetworkByNetworkManagerInvokeArgs Empty => new ListEffectiveVirtualNetworkByNetworkManagerInvokeArgs();
    }


    [OutputType]
    public sealed class ListEffectiveVirtualNetworkByNetworkManagerResult
    {
        /// <summary>
        /// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current request) to retrieve the next page of data.
        /// </summary>
        public readonly string? SkipToken;
        /// <summary>
        /// Gets a page of EffectiveVirtualNetwork
        /// </summary>
        public readonly ImmutableArray<Outputs.EffectiveVirtualNetworkResponse> Value;

        [OutputConstructor]
        private ListEffectiveVirtualNetworkByNetworkManagerResult(
            string? skipToken,

            ImmutableArray<Outputs.EffectiveVirtualNetworkResponse> value)
        {
            SkipToken = skipToken;
            Value = value;
        }
    }
}
