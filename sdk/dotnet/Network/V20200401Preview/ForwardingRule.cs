// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20200401Preview
{
    /// <summary>
    /// Describes a forwarding rule within a DNS forwarding ruleset.
    /// </summary>
    [AzureNativeResourceType("azure-native:network/v20200401preview:ForwardingRule")]
    public partial class ForwardingRule : Pulumi.CustomResource
    {
        /// <summary>
        /// The domain name for the forwarding rule.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// ETag of the forwarding rule.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The state of forwarding rule.
        /// </summary>
        [Output("forwardingRuleState")]
        public Output<string?> ForwardingRuleState { get; private set; } = null!;

        /// <summary>
        /// Metadata attached to the forwarding rule.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The current provisioning state of the forwarding rule. This is a read-only property and any attempt to set this value will be ignored.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// DNS servers to forward the DNS query to.
        /// </summary>
        [Output("targetDnsServers")]
        public Output<ImmutableArray<Outputs.TargetDnsServerResponse>> TargetDnsServers { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ForwardingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ForwardingRule(string name, ForwardingRuleArgs args, CustomResourceOptions? options = null)
            : base("azure-native:network/v20200401preview:ForwardingRule", name, args ?? new ForwardingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ForwardingRule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:network/v20200401preview:ForwardingRule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-native:network:ForwardingRule"},
                    new Pulumi.Alias { Type = "azure-native:network/v20220701:ForwardingRule"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ForwardingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ForwardingRule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ForwardingRule(name, id, options);
        }
    }

    public sealed class ForwardingRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the DNS forwarding ruleset.
        /// </summary>
        [Input("dnsForwardingRulesetName", required: true)]
        public Input<string> DnsForwardingRulesetName { get; set; } = null!;

        /// <summary>
        /// The domain name for the forwarding rule.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// The name of the forwarding rule.
        /// </summary>
        [Input("forwardingRuleName")]
        public Input<string>? ForwardingRuleName { get; set; }

        /// <summary>
        /// The state of forwarding rule.
        /// </summary>
        [Input("forwardingRuleState")]
        public InputUnion<string, Pulumi.AzureNative.Network.V20200401Preview.ForwardingRuleState>? ForwardingRuleState { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata attached to the forwarding rule.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("targetDnsServers", required: true)]
        private InputList<Inputs.TargetDnsServerArgs>? _targetDnsServers;

        /// <summary>
        /// DNS servers to forward the DNS query to.
        /// </summary>
        public InputList<Inputs.TargetDnsServerArgs> TargetDnsServers
        {
            get => _targetDnsServers ?? (_targetDnsServers = new InputList<Inputs.TargetDnsServerArgs>());
            set => _targetDnsServers = value;
        }

        public ForwardingRuleArgs()
        {
        }
    }
}
