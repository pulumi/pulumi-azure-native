// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20240101
{
    public static class GetScopeConnection
    {
        /// <summary>
        /// Get specified scope connection created by this Network Manager.
        /// </summary>
        public static Task<GetScopeConnectionResult> InvokeAsync(GetScopeConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScopeConnectionResult>("azure-native:network/v20240101:getScopeConnection", args ?? new GetScopeConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Get specified scope connection created by this Network Manager.
        /// </summary>
        public static Output<GetScopeConnectionResult> Invoke(GetScopeConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScopeConnectionResult>("azure-native:network/v20240101:getScopeConnection", args ?? new GetScopeConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScopeConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public string NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name for the cross-tenant connection.
        /// </summary>
        [Input("scopeConnectionName", required: true)]
        public string ScopeConnectionName { get; set; } = null!;

        public GetScopeConnectionArgs()
        {
        }
        public static new GetScopeConnectionArgs Empty => new GetScopeConnectionArgs();
    }

    public sealed class GetScopeConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public Input<string> NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name for the cross-tenant connection.
        /// </summary>
        [Input("scopeConnectionName", required: true)]
        public Input<string> ScopeConnectionName { get; set; } = null!;

        public GetScopeConnectionInvokeArgs()
        {
        }
        public static new GetScopeConnectionInvokeArgs Empty => new GetScopeConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetScopeConnectionResult
    {
        /// <summary>
        /// A description of the scope connection.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// The system metadata related to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tenant ID.
        /// </summary>
        public readonly string? TenantId;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScopeConnectionResult(
            string? description,

            string etag,

            string id,

            string name,

            string? resourceId,

            Outputs.SystemDataResponse systemData,

            string? tenantId,

            string type)
        {
            Description = description;
            Etag = etag;
            Id = id;
            Name = name;
            ResourceId = resourceId;
            SystemData = systemData;
            TenantId = tenantId;
            Type = type;
        }
    }
}
