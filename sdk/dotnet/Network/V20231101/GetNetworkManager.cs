// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20231101
{
    public static class GetNetworkManager
    {
        /// <summary>
        /// Gets the specified Network Manager.
        /// </summary>
        public static Task<GetNetworkManagerResult> InvokeAsync(GetNetworkManagerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkManagerResult>("azure-native:network/v20231101:getNetworkManager", args ?? new GetNetworkManagerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified Network Manager.
        /// </summary>
        public static Output<GetNetworkManagerResult> Invoke(GetNetworkManagerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkManagerResult>("azure-native:network/v20231101:getNetworkManager", args ?? new GetNetworkManagerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkManagerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public string NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkManagerArgs()
        {
        }
        public static new GetNetworkManagerArgs Empty => new GetNetworkManagerArgs();
    }

    public sealed class GetNetworkManagerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network manager.
        /// </summary>
        [Input("networkManagerName", required: true)]
        public Input<string> NetworkManagerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkManagerInvokeArgs()
        {
        }
        public static new GetNetworkManagerInvokeArgs Empty => new GetNetworkManagerInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkManagerResult
    {
        /// <summary>
        /// A description of the network manager.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Scope Access.
        /// </summary>
        public readonly ImmutableArray<string> NetworkManagerScopeAccesses;
        /// <summary>
        /// Scope of Network Manager.
        /// </summary>
        public readonly Outputs.NetworkManagerPropertiesResponseNetworkManagerScopes NetworkManagerScopes;
        /// <summary>
        /// The provisioning state of the network manager resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Unique identifier for this resource.
        /// </summary>
        public readonly string ResourceGuid;
        /// <summary>
        /// The system metadata related to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkManagerResult(
            string? description,

            string etag,

            string? id,

            string? location,

            string name,

            ImmutableArray<string> networkManagerScopeAccesses,

            Outputs.NetworkManagerPropertiesResponseNetworkManagerScopes networkManagerScopes,

            string provisioningState,

            string resourceGuid,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Description = description;
            Etag = etag;
            Id = id;
            Location = location;
            Name = name;
            NetworkManagerScopeAccesses = networkManagerScopeAccesses;
            NetworkManagerScopes = networkManagerScopes;
            ProvisioningState = provisioningState;
            ResourceGuid = resourceGuid;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
