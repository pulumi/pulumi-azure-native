// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20231101
{
    /// <summary>
    /// The operation mode for automatically learning private ranges to not be SNAT
    /// </summary>
    [EnumType]
    public readonly struct AutoLearnPrivateRangesMode : IEquatable<AutoLearnPrivateRangesMode>
    {
        private readonly string _value;

        private AutoLearnPrivateRangesMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoLearnPrivateRangesMode Enabled { get; } = new AutoLearnPrivateRangesMode("Enabled");
        public static AutoLearnPrivateRangesMode Disabled { get; } = new AutoLearnPrivateRangesMode("Disabled");

        public static bool operator ==(AutoLearnPrivateRangesMode left, AutoLearnPrivateRangesMode right) => left.Equals(right);
        public static bool operator !=(AutoLearnPrivateRangesMode left, AutoLearnPrivateRangesMode right) => !left.Equals(right);

        public static explicit operator string(AutoLearnPrivateRangesMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoLearnPrivateRangesMode other && Equals(other);
        public bool Equals(AutoLearnPrivateRangesMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation mode for Threat Intelligence.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallThreatIntelMode : IEquatable<AzureFirewallThreatIntelMode>
    {
        private readonly string _value;

        private AzureFirewallThreatIntelMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallThreatIntelMode Alert { get; } = new AzureFirewallThreatIntelMode("Alert");
        public static AzureFirewallThreatIntelMode Deny { get; } = new AzureFirewallThreatIntelMode("Deny");
        public static AzureFirewallThreatIntelMode Off { get; } = new AzureFirewallThreatIntelMode("Off");

        public static bool operator ==(AzureFirewallThreatIntelMode left, AzureFirewallThreatIntelMode right) => left.Equals(right);
        public static bool operator !=(AzureFirewallThreatIntelMode left, AzureFirewallThreatIntelMode right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallThreatIntelMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallThreatIntelMode other && Equals(other);
        public bool Equals(AzureFirewallThreatIntelMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyFilterRuleCollectionActionType : IEquatable<FirewallPolicyFilterRuleCollectionActionType>
    {
        private readonly string _value;

        private FirewallPolicyFilterRuleCollectionActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyFilterRuleCollectionActionType Allow { get; } = new FirewallPolicyFilterRuleCollectionActionType("Allow");
        public static FirewallPolicyFilterRuleCollectionActionType Deny { get; } = new FirewallPolicyFilterRuleCollectionActionType("Deny");

        public static bool operator ==(FirewallPolicyFilterRuleCollectionActionType left, FirewallPolicyFilterRuleCollectionActionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyFilterRuleCollectionActionType left, FirewallPolicyFilterRuleCollectionActionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyFilterRuleCollectionActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyFilterRuleCollectionActionType other && Equals(other);
        public bool Equals(FirewallPolicyFilterRuleCollectionActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IDPS profile name. When attached to a parent policy, the firewall's effective profile is the profile name of the parent policy.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyIntrusionDetectionProfileType : IEquatable<FirewallPolicyIntrusionDetectionProfileType>
    {
        private readonly string _value;

        private FirewallPolicyIntrusionDetectionProfileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyIntrusionDetectionProfileType Basic { get; } = new FirewallPolicyIntrusionDetectionProfileType("Basic");
        public static FirewallPolicyIntrusionDetectionProfileType Standard { get; } = new FirewallPolicyIntrusionDetectionProfileType("Standard");
        public static FirewallPolicyIntrusionDetectionProfileType Advanced { get; } = new FirewallPolicyIntrusionDetectionProfileType("Advanced");
        public static FirewallPolicyIntrusionDetectionProfileType Extended { get; } = new FirewallPolicyIntrusionDetectionProfileType("Extended");

        public static bool operator ==(FirewallPolicyIntrusionDetectionProfileType left, FirewallPolicyIntrusionDetectionProfileType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyIntrusionDetectionProfileType left, FirewallPolicyIntrusionDetectionProfileType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyIntrusionDetectionProfileType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyIntrusionDetectionProfileType other && Equals(other);
        public bool Equals(FirewallPolicyIntrusionDetectionProfileType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rule bypass protocol.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyIntrusionDetectionProtocol : IEquatable<FirewallPolicyIntrusionDetectionProtocol>
    {
        private readonly string _value;

        private FirewallPolicyIntrusionDetectionProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyIntrusionDetectionProtocol TCP { get; } = new FirewallPolicyIntrusionDetectionProtocol("TCP");
        public static FirewallPolicyIntrusionDetectionProtocol UDP { get; } = new FirewallPolicyIntrusionDetectionProtocol("UDP");
        public static FirewallPolicyIntrusionDetectionProtocol ICMP { get; } = new FirewallPolicyIntrusionDetectionProtocol("ICMP");
        public static FirewallPolicyIntrusionDetectionProtocol ANY { get; } = new FirewallPolicyIntrusionDetectionProtocol("ANY");

        public static bool operator ==(FirewallPolicyIntrusionDetectionProtocol left, FirewallPolicyIntrusionDetectionProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyIntrusionDetectionProtocol left, FirewallPolicyIntrusionDetectionProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyIntrusionDetectionProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyIntrusionDetectionProtocol other && Equals(other);
        public bool Equals(FirewallPolicyIntrusionDetectionProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Intrusion detection general state. When attached to a parent policy, the firewall's effective IDPS mode is the stricter mode of the two.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyIntrusionDetectionStateType : IEquatable<FirewallPolicyIntrusionDetectionStateType>
    {
        private readonly string _value;

        private FirewallPolicyIntrusionDetectionStateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyIntrusionDetectionStateType Off { get; } = new FirewallPolicyIntrusionDetectionStateType("Off");
        public static FirewallPolicyIntrusionDetectionStateType Alert { get; } = new FirewallPolicyIntrusionDetectionStateType("Alert");
        public static FirewallPolicyIntrusionDetectionStateType Deny { get; } = new FirewallPolicyIntrusionDetectionStateType("Deny");

        public static bool operator ==(FirewallPolicyIntrusionDetectionStateType left, FirewallPolicyIntrusionDetectionStateType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyIntrusionDetectionStateType left, FirewallPolicyIntrusionDetectionStateType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyIntrusionDetectionStateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyIntrusionDetectionStateType other && Equals(other);
        public bool Equals(FirewallPolicyIntrusionDetectionStateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyNatRuleCollectionActionType : IEquatable<FirewallPolicyNatRuleCollectionActionType>
    {
        private readonly string _value;

        private FirewallPolicyNatRuleCollectionActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyNatRuleCollectionActionType DNAT { get; } = new FirewallPolicyNatRuleCollectionActionType("DNAT");

        public static bool operator ==(FirewallPolicyNatRuleCollectionActionType left, FirewallPolicyNatRuleCollectionActionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyNatRuleCollectionActionType left, FirewallPolicyNatRuleCollectionActionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyNatRuleCollectionActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyNatRuleCollectionActionType other && Equals(other);
        public bool Equals(FirewallPolicyNatRuleCollectionActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol type.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleApplicationProtocolType : IEquatable<FirewallPolicyRuleApplicationProtocolType>
    {
        private readonly string _value;

        private FirewallPolicyRuleApplicationProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleApplicationProtocolType Http { get; } = new FirewallPolicyRuleApplicationProtocolType("Http");
        public static FirewallPolicyRuleApplicationProtocolType Https { get; } = new FirewallPolicyRuleApplicationProtocolType("Https");

        public static bool operator ==(FirewallPolicyRuleApplicationProtocolType left, FirewallPolicyRuleApplicationProtocolType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleApplicationProtocolType left, FirewallPolicyRuleApplicationProtocolType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleApplicationProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleApplicationProtocolType other && Equals(other);
        public bool Equals(FirewallPolicyRuleApplicationProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the rule collection.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleCollectionType : IEquatable<FirewallPolicyRuleCollectionType>
    {
        private readonly string _value;

        private FirewallPolicyRuleCollectionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleCollectionType FirewallPolicyNatRuleCollection { get; } = new FirewallPolicyRuleCollectionType("FirewallPolicyNatRuleCollection");
        public static FirewallPolicyRuleCollectionType FirewallPolicyFilterRuleCollection { get; } = new FirewallPolicyRuleCollectionType("FirewallPolicyFilterRuleCollection");

        public static bool operator ==(FirewallPolicyRuleCollectionType left, FirewallPolicyRuleCollectionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleCollectionType left, FirewallPolicyRuleCollectionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleCollectionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleCollectionType other && Equals(other);
        public bool Equals(FirewallPolicyRuleCollectionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Network protocol of a Rule.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleNetworkProtocol : IEquatable<FirewallPolicyRuleNetworkProtocol>
    {
        private readonly string _value;

        private FirewallPolicyRuleNetworkProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleNetworkProtocol TCP { get; } = new FirewallPolicyRuleNetworkProtocol("TCP");
        public static FirewallPolicyRuleNetworkProtocol UDP { get; } = new FirewallPolicyRuleNetworkProtocol("UDP");
        public static FirewallPolicyRuleNetworkProtocol Any { get; } = new FirewallPolicyRuleNetworkProtocol("Any");
        public static FirewallPolicyRuleNetworkProtocol ICMP { get; } = new FirewallPolicyRuleNetworkProtocol("ICMP");

        public static bool operator ==(FirewallPolicyRuleNetworkProtocol left, FirewallPolicyRuleNetworkProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleNetworkProtocol left, FirewallPolicyRuleNetworkProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleNetworkProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleNetworkProtocol other && Equals(other);
        public bool Equals(FirewallPolicyRuleNetworkProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rule Type.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleType : IEquatable<FirewallPolicyRuleType>
    {
        private readonly string _value;

        private FirewallPolicyRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleType ApplicationRule { get; } = new FirewallPolicyRuleType("ApplicationRule");
        public static FirewallPolicyRuleType NetworkRule { get; } = new FirewallPolicyRuleType("NetworkRule");
        public static FirewallPolicyRuleType NatRule { get; } = new FirewallPolicyRuleType("NatRule");

        public static bool operator ==(FirewallPolicyRuleType left, FirewallPolicyRuleType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleType left, FirewallPolicyRuleType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleType other && Equals(other);
        public bool Equals(FirewallPolicyRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
