// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20231101
{
    public static class GetLoadBalancerBackendAddressPool
    {
        /// <summary>
        /// Gets load balancer backend address pool.
        /// </summary>
        public static Task<GetLoadBalancerBackendAddressPoolResult> InvokeAsync(GetLoadBalancerBackendAddressPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerBackendAddressPoolResult>("azure-native:network/v20231101:getLoadBalancerBackendAddressPool", args ?? new GetLoadBalancerBackendAddressPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Gets load balancer backend address pool.
        /// </summary>
        public static Output<GetLoadBalancerBackendAddressPoolResult> Invoke(GetLoadBalancerBackendAddressPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerBackendAddressPoolResult>("azure-native:network/v20231101:getLoadBalancerBackendAddressPool", args ?? new GetLoadBalancerBackendAddressPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerBackendAddressPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the backend address pool.
        /// </summary>
        [Input("backendAddressPoolName", required: true)]
        public string BackendAddressPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Input("loadBalancerName", required: true)]
        public string LoadBalancerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLoadBalancerBackendAddressPoolArgs()
        {
        }
        public static new GetLoadBalancerBackendAddressPoolArgs Empty => new GetLoadBalancerBackendAddressPoolArgs();
    }

    public sealed class GetLoadBalancerBackendAddressPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the backend address pool.
        /// </summary>
        [Input("backendAddressPoolName", required: true)]
        public Input<string> BackendAddressPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Input("loadBalancerName", required: true)]
        public Input<string> LoadBalancerName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLoadBalancerBackendAddressPoolInvokeArgs()
        {
        }
        public static new GetLoadBalancerBackendAddressPoolInvokeArgs Empty => new GetLoadBalancerBackendAddressPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadBalancerBackendAddressPoolResult
    {
        /// <summary>
        /// An array of references to IP addresses defined in network interfaces.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkInterfaceIPConfigurationResponse> BackendIPConfigurations;
        /// <summary>
        /// Amount of seconds Load Balancer waits for before sending RESET to client and backend address.
        /// </summary>
        public readonly int? DrainPeriodInSeconds;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// An array of references to inbound NAT rules that use this backend address pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> InboundNatRules;
        /// <summary>
        /// An array of backend addresses.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadBalancerBackendAddressResponse> LoadBalancerBackendAddresses;
        /// <summary>
        /// An array of references to load balancing rules that use this backend address pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> LoadBalancingRules;
        /// <summary>
        /// The location of the backend address pool.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// A reference to an outbound rule that uses this backend address pool.
        /// </summary>
        public readonly Outputs.SubResourceResponse OutboundRule;
        /// <summary>
        /// An array of references to outbound rules that use this backend address pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> OutboundRules;
        /// <summary>
        /// The provisioning state of the backend address pool resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Backend address synchronous mode for the backend pool
        /// </summary>
        public readonly string? SyncMode;
        /// <summary>
        /// An array of gateway load balancer tunnel interfaces.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewayLoadBalancerTunnelInterfaceResponse> TunnelInterfaces;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A reference to a virtual network.
        /// </summary>
        public readonly Outputs.SubResourceResponse? VirtualNetwork;

        [OutputConstructor]
        private GetLoadBalancerBackendAddressPoolResult(
            ImmutableArray<Outputs.NetworkInterfaceIPConfigurationResponse> backendIPConfigurations,

            int? drainPeriodInSeconds,

            string etag,

            string? id,

            ImmutableArray<Outputs.SubResourceResponse> inboundNatRules,

            ImmutableArray<Outputs.LoadBalancerBackendAddressResponse> loadBalancerBackendAddresses,

            ImmutableArray<Outputs.SubResourceResponse> loadBalancingRules,

            string? location,

            string? name,

            Outputs.SubResourceResponse outboundRule,

            ImmutableArray<Outputs.SubResourceResponse> outboundRules,

            string provisioningState,

            string? syncMode,

            ImmutableArray<Outputs.GatewayLoadBalancerTunnelInterfaceResponse> tunnelInterfaces,

            string type,

            Outputs.SubResourceResponse? virtualNetwork)
        {
            BackendIPConfigurations = backendIPConfigurations;
            DrainPeriodInSeconds = drainPeriodInSeconds;
            Etag = etag;
            Id = id;
            InboundNatRules = inboundNatRules;
            LoadBalancerBackendAddresses = loadBalancerBackendAddresses;
            LoadBalancingRules = loadBalancingRules;
            Location = location;
            Name = name;
            OutboundRule = outboundRule;
            OutboundRules = outboundRules;
            ProvisioningState = provisioningState;
            SyncMode = syncMode;
            TunnelInterfaces = tunnelInterfaces;
            Type = type;
            VirtualNetwork = virtualNetwork;
        }
    }
}
