// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20180401
{
    [Obsolete(@"Version 2018-04-01 will be removed in v2 of the provider.")]
    public static class GetVirtualWAN
    {
        /// <summary>
        /// VirtualWAN Resource.
        /// </summary>
        public static Task<GetVirtualWANResult> InvokeAsync(GetVirtualWANArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualWANResult>("azure-native:network/v20180401:getVirtualWAN", args ?? new GetVirtualWANArgs(), options.WithDefaults());

        /// <summary>
        /// VirtualWAN Resource.
        /// </summary>
        public static Output<GetVirtualWANResult> Invoke(GetVirtualWANInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualWANResult>("azure-native:network/v20180401:getVirtualWAN", args ?? new GetVirtualWANInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualWANArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource group name of the VirtualWan.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VirtualWAN being retrieved.
        /// </summary>
        [Input("virtualWANName", required: true)]
        public string VirtualWANName { get; set; } = null!;

        public GetVirtualWANArgs()
        {
        }
        public static new GetVirtualWANArgs Empty => new GetVirtualWANArgs();
    }

    public sealed class GetVirtualWANInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource group name of the VirtualWan.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VirtualWAN being retrieved.
        /// </summary>
        [Input("virtualWANName", required: true)]
        public Input<string> VirtualWANName { get; set; } = null!;

        public GetVirtualWANInvokeArgs()
        {
        }
        public static new GetVirtualWANInvokeArgs Empty => new GetVirtualWANInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualWANResult
    {
        /// <summary>
        /// Vpn encryption to be disabled or not.
        /// </summary>
        public readonly bool? DisableVpnEncryption;
        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// List of VirtualHubs in the VirtualWAN.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> VirtualHubs;
        public readonly ImmutableArray<Outputs.SubResourceResponse> VpnSites;

        [OutputConstructor]
        private GetVirtualWANResult(
            bool? disableVpnEncryption,

            string etag,

            string? id,

            string location,

            string name,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<Outputs.SubResourceResponse> virtualHubs,

            ImmutableArray<Outputs.SubResourceResponse> vpnSites)
        {
            DisableVpnEncryption = disableVpnEncryption;
            Etag = etag;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Tags = tags;
            Type = type;
            VirtualHubs = virtualHubs;
            VpnSites = vpnSites;
        }
    }
}
