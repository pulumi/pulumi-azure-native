// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Preview
{
    public static class GetExpressRouteCircuit
    {
        public static Task<GetExpressRouteCircuitResult> InvokeAsync(GetExpressRouteCircuitArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetExpressRouteCircuitResult>("azurerm:network/preview:getExpressRouteCircuit", args ?? new GetExpressRouteCircuitArgs(), options.WithVersion());
    }


    public sealed class GetExpressRouteCircuitArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of express route circuit.
        /// </summary>
        [Input("circuitName", required: true)]
        public string CircuitName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetExpressRouteCircuitArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetExpressRouteCircuitResult
    {
        /// <summary>
        /// Allow classic operations.
        /// </summary>
        public readonly bool? AllowClassicOperations;
        /// <summary>
        /// The list of authorizations.
        /// </summary>
        public readonly ImmutableArray<Outputs.ExpressRouteCircuitAuthorizationResponseResult> Authorizations;
        /// <summary>
        /// The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
        /// </summary>
        public readonly double? BandwidthInGbps;
        /// <summary>
        /// The CircuitProvisioningState state of the resource.
        /// </summary>
        public readonly string? CircuitProvisioningState;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
        /// </summary>
        public readonly Outputs.SubResourceResponseResult? ExpressRoutePort;
        /// <summary>
        /// The GatewayManager Etag.
        /// </summary>
        public readonly string? GatewayManagerEtag;
        /// <summary>
        /// Flag denoting global reach status.
        /// </summary>
        public readonly bool? GlobalReachEnabled;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of peerings.
        /// </summary>
        public readonly ImmutableArray<Outputs.ExpressRouteCircuitPeeringResponseResult> Peerings;
        /// <summary>
        /// The provisioning state of the express route circuit resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The ServiceKey.
        /// </summary>
        public readonly string? ServiceKey;
        /// <summary>
        /// The ServiceProviderNotes.
        /// </summary>
        public readonly string? ServiceProviderNotes;
        /// <summary>
        /// The ServiceProviderProperties.
        /// </summary>
        public readonly Outputs.ExpressRouteCircuitServiceProviderPropertiesResponseResult? ServiceProviderProperties;
        /// <summary>
        /// The ServiceProviderProvisioningState state of the resource.
        /// </summary>
        public readonly string? ServiceProviderProvisioningState;
        /// <summary>
        /// The SKU.
        /// </summary>
        public readonly Outputs.ExpressRouteCircuitSkuResponseResult? Sku;
        /// <summary>
        /// The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
        /// </summary>
        public readonly int Stag;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetExpressRouteCircuitResult(
            bool? allowClassicOperations,

            ImmutableArray<Outputs.ExpressRouteCircuitAuthorizationResponseResult> authorizations,

            double? bandwidthInGbps,

            string? circuitProvisioningState,

            string etag,

            Outputs.SubResourceResponseResult? expressRoutePort,

            string? gatewayManagerEtag,

            bool? globalReachEnabled,

            string? location,

            string name,

            ImmutableArray<Outputs.ExpressRouteCircuitPeeringResponseResult> peerings,

            string provisioningState,

            string? serviceKey,

            string? serviceProviderNotes,

            Outputs.ExpressRouteCircuitServiceProviderPropertiesResponseResult? serviceProviderProperties,

            string? serviceProviderProvisioningState,

            Outputs.ExpressRouteCircuitSkuResponseResult? sku,

            int stag,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AllowClassicOperations = allowClassicOperations;
            Authorizations = authorizations;
            BandwidthInGbps = bandwidthInGbps;
            CircuitProvisioningState = circuitProvisioningState;
            Etag = etag;
            ExpressRoutePort = expressRoutePort;
            GatewayManagerEtag = gatewayManagerEtag;
            GlobalReachEnabled = globalReachEnabled;
            Location = location;
            Name = name;
            Peerings = peerings;
            ProvisioningState = provisioningState;
            ServiceKey = serviceKey;
            ServiceProviderNotes = serviceProviderNotes;
            ServiceProviderProperties = serviceProviderProperties;
            ServiceProviderProvisioningState = serviceProviderProvisioningState;
            Sku = sku;
            Stag = stag;
            Tags = tags;
            Type = type;
        }
    }
}
