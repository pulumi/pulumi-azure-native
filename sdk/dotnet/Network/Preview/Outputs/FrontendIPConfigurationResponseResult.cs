// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Preview.Outputs
{

    [OutputType]
    public sealed class FrontendIPConfigurationResponseResult
    {
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// An array of references to inbound pools that use this frontend IP.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponseResult> InboundNatPools;
        /// <summary>
        /// An array of references to inbound rules that use this frontend IP.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponseResult> InboundNatRules;
        /// <summary>
        /// An array of references to load balancing rules that use this frontend IP.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponseResult> LoadBalancingRules;
        /// <summary>
        /// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// An array of references to outbound rules that use this frontend IP.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponseResult> OutboundRules;
        /// <summary>
        /// The private IP address of the IP configuration.
        /// </summary>
        public readonly string? PrivateIPAddress;
        /// <summary>
        /// Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
        /// </summary>
        public readonly string? PrivateIPAddressVersion;
        /// <summary>
        /// The Private IP allocation method.
        /// </summary>
        public readonly string? PrivateIPAllocationMethod;
        /// <summary>
        /// The provisioning state of the frontend IP configuration resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The reference to the Public IP resource.
        /// </summary>
        public readonly Outputs.PublicIPAddressResponseResult? PublicIPAddress;
        /// <summary>
        /// The reference to the Public IP Prefix resource.
        /// </summary>
        public readonly Outputs.SubResourceResponseResult? PublicIPPrefix;
        /// <summary>
        /// The reference to the subnet resource.
        /// </summary>
        public readonly Outputs.SubnetResponseResult? Subnet;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A list of availability zones denoting the IP allocated for the resource needs to come from.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private FrontendIPConfigurationResponseResult(
            string etag,

            string? id,

            ImmutableArray<Outputs.SubResourceResponseResult> inboundNatPools,

            ImmutableArray<Outputs.SubResourceResponseResult> inboundNatRules,

            ImmutableArray<Outputs.SubResourceResponseResult> loadBalancingRules,

            string? name,

            ImmutableArray<Outputs.SubResourceResponseResult> outboundRules,

            string? privateIPAddress,

            string? privateIPAddressVersion,

            string? privateIPAllocationMethod,

            string provisioningState,

            Outputs.PublicIPAddressResponseResult? publicIPAddress,

            Outputs.SubResourceResponseResult? publicIPPrefix,

            Outputs.SubnetResponseResult? subnet,

            string type,

            ImmutableArray<string> zones)
        {
            Etag = etag;
            Id = id;
            InboundNatPools = inboundNatPools;
            InboundNatRules = inboundNatRules;
            LoadBalancingRules = loadBalancingRules;
            Name = name;
            OutboundRules = outboundRules;
            PrivateIPAddress = privateIPAddress;
            PrivateIPAddressVersion = privateIPAddressVersion;
            PrivateIPAllocationMethod = privateIPAllocationMethod;
            ProvisioningState = provisioningState;
            PublicIPAddress = publicIPAddress;
            PublicIPPrefix = publicIPPrefix;
            Subnet = subnet;
            Type = type;
            Zones = zones;
        }
    }
}
