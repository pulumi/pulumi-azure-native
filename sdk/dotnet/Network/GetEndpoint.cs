// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    public static class GetEndpoint
    {
        /// <summary>
        /// Gets a Traffic Manager endpoint.
        /// Azure REST API version: 2022-04-01.
        /// </summary>
        public static Task<GetEndpointResult> InvokeAsync(GetEndpointArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEndpointResult>("azure-native:network:getEndpoint", args ?? new GetEndpointArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Traffic Manager endpoint.
        /// Azure REST API version: 2022-04-01.
        /// </summary>
        public static Output<GetEndpointResult> Invoke(GetEndpointInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEndpointResult>("azure-native:network:getEndpoint", args ?? new GetEndpointInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEndpointArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Traffic Manager endpoint.
        /// </summary>
        [Input("endpointName", required: true)]
        public string EndpointName { get; set; } = null!;

        /// <summary>
        /// The type of the Traffic Manager endpoint.
        /// </summary>
        [Input("endpointType", required: true)]
        public string EndpointType { get; set; } = null!;

        /// <summary>
        /// The name of the Traffic Manager profile.
        /// </summary>
        [Input("profileName", required: true)]
        public string ProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEndpointArgs()
        {
        }
        public static new GetEndpointArgs Empty => new GetEndpointArgs();
    }

    public sealed class GetEndpointInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Traffic Manager endpoint.
        /// </summary>
        [Input("endpointName", required: true)]
        public Input<string> EndpointName { get; set; } = null!;

        /// <summary>
        /// The type of the Traffic Manager endpoint.
        /// </summary>
        [Input("endpointType", required: true)]
        public Input<string> EndpointType { get; set; } = null!;

        /// <summary>
        /// The name of the Traffic Manager profile.
        /// </summary>
        [Input("profileName", required: true)]
        public Input<string> ProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetEndpointInvokeArgs()
        {
        }
        public static new GetEndpointInvokeArgs Empty => new GetEndpointInvokeArgs();
    }


    [OutputType]
    public sealed class GetEndpointResult
    {
        /// <summary>
        /// If Always Serve is enabled, probing for endpoint health will be disabled and endpoints will be included in the traffic routing method.
        /// </summary>
        public readonly string? AlwaysServe;
        /// <summary>
        /// List of custom headers.
        /// </summary>
        public readonly ImmutableArray<Outputs.EndpointPropertiesResponseCustomHeaders> CustomHeaders;
        /// <summary>
        /// Specifies the location of the external or nested endpoints when using the 'Performance' traffic routing method.
        /// </summary>
        public readonly string? EndpointLocation;
        /// <summary>
        /// The monitoring status of the endpoint.
        /// </summary>
        public readonly string? EndpointMonitorStatus;
        /// <summary>
        /// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
        /// </summary>
        public readonly string? EndpointStatus;
        /// <summary>
        /// The list of countries/regions mapped to this endpoint when using the 'Geographic' traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
        /// </summary>
        public readonly ImmutableArray<string> GeoMapping;
        /// <summary>
        /// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
        /// </summary>
        public readonly double? MinChildEndpoints;
        /// <summary>
        /// The minimum number of IPv4 (DNS record type A) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
        /// </summary>
        public readonly double? MinChildEndpointsIPv4;
        /// <summary>
        /// The minimum number of IPv6 (DNS record type AAAA) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
        /// </summary>
        public readonly double? MinChildEndpointsIPv6;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The priority of this endpoint when using the 'Priority' traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
        /// </summary>
        public readonly double? Priority;
        /// <summary>
        /// The list of subnets, IP addresses, and/or address ranges mapped to this endpoint when using the 'Subnet' traffic routing method. An empty list will match all ranges not covered by other endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.EndpointPropertiesResponseSubnets> Subnets;
        /// <summary>
        /// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
        /// </summary>
        public readonly string? Target;
        /// <summary>
        /// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
        /// </summary>
        public readonly string? TargetResourceId;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
        /// </summary>
        public readonly double? Weight;

        [OutputConstructor]
        private GetEndpointResult(
            string? alwaysServe,

            ImmutableArray<Outputs.EndpointPropertiesResponseCustomHeaders> customHeaders,

            string? endpointLocation,

            string? endpointMonitorStatus,

            string? endpointStatus,

            ImmutableArray<string> geoMapping,

            string? id,

            double? minChildEndpoints,

            double? minChildEndpointsIPv4,

            double? minChildEndpointsIPv6,

            string? name,

            double? priority,

            ImmutableArray<Outputs.EndpointPropertiesResponseSubnets> subnets,

            string? target,

            string? targetResourceId,

            string? type,

            double? weight)
        {
            AlwaysServe = alwaysServe;
            CustomHeaders = customHeaders;
            EndpointLocation = endpointLocation;
            EndpointMonitorStatus = endpointMonitorStatus;
            EndpointStatus = endpointStatus;
            GeoMapping = geoMapping;
            Id = id;
            MinChildEndpoints = minChildEndpoints;
            MinChildEndpointsIPv4 = minChildEndpointsIPv4;
            MinChildEndpointsIPv6 = minChildEndpointsIPv6;
            Name = name;
            Priority = priority;
            Subnets = subnets;
            Target = target;
            TargetResourceId = targetResourceId;
            Type = type;
            Weight = weight;
        }
    }
}
