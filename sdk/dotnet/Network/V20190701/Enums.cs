// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20190701
{
    /// <summary>
    /// The DH Group used in IKE Phase 1 for initial SA.
    /// </summary>
    [EnumType]
    public readonly struct DhGroup : IEquatable<DhGroup>
    {
        private readonly string _value;

        private DhGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DhGroup None { get; } = new DhGroup("None");
        public static DhGroup DHGroup1 { get; } = new DhGroup("DHGroup1");
        public static DhGroup DHGroup2 { get; } = new DhGroup("DHGroup2");
        public static DhGroup DHGroup14 { get; } = new DhGroup("DHGroup14");
        public static DhGroup DHGroup2048 { get; } = new DhGroup("DHGroup2048");
        public static DhGroup ECP256 { get; } = new DhGroup("ECP256");
        public static DhGroup ECP384 { get; } = new DhGroup("ECP384");
        public static DhGroup DHGroup24 { get; } = new DhGroup("DHGroup24");

        public static bool operator ==(DhGroup left, DhGroup right) => left.Equals(right);
        public static bool operator !=(DhGroup left, DhGroup right) => !left.Equals(right);

        public static explicit operator string(DhGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DhGroup other && Equals(other);
        public bool Equals(DhGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IKE encryption algorithm (IKE phase 2).
    /// </summary>
    [EnumType]
    public readonly struct IkeEncryption : IEquatable<IkeEncryption>
    {
        private readonly string _value;

        private IkeEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IkeEncryption DES { get; } = new IkeEncryption("DES");
        public static IkeEncryption DES3 { get; } = new IkeEncryption("DES3");
        public static IkeEncryption AES128 { get; } = new IkeEncryption("AES128");
        public static IkeEncryption AES192 { get; } = new IkeEncryption("AES192");
        public static IkeEncryption AES256 { get; } = new IkeEncryption("AES256");
        public static IkeEncryption GCMAES256 { get; } = new IkeEncryption("GCMAES256");
        public static IkeEncryption GCMAES128 { get; } = new IkeEncryption("GCMAES128");

        public static bool operator ==(IkeEncryption left, IkeEncryption right) => left.Equals(right);
        public static bool operator !=(IkeEncryption left, IkeEncryption right) => !left.Equals(right);

        public static explicit operator string(IkeEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IkeEncryption other && Equals(other);
        public bool Equals(IkeEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IKE integrity algorithm (IKE phase 2).
    /// </summary>
    [EnumType]
    public readonly struct IkeIntegrity : IEquatable<IkeIntegrity>
    {
        private readonly string _value;

        private IkeIntegrity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IkeIntegrity MD5 { get; } = new IkeIntegrity("MD5");
        public static IkeIntegrity SHA1 { get; } = new IkeIntegrity("SHA1");
        public static IkeIntegrity SHA256 { get; } = new IkeIntegrity("SHA256");
        public static IkeIntegrity SHA384 { get; } = new IkeIntegrity("SHA384");
        public static IkeIntegrity GCMAES256 { get; } = new IkeIntegrity("GCMAES256");
        public static IkeIntegrity GCMAES128 { get; } = new IkeIntegrity("GCMAES128");

        public static bool operator ==(IkeIntegrity left, IkeIntegrity right) => left.Equals(right);
        public static bool operator !=(IkeIntegrity left, IkeIntegrity right) => !left.Equals(right);

        public static explicit operator string(IkeIntegrity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IkeIntegrity other && Equals(other);
        public bool Equals(IkeIntegrity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IPSec encryption algorithm (IKE phase 1).
    /// </summary>
    [EnumType]
    public readonly struct IpsecEncryption : IEquatable<IpsecEncryption>
    {
        private readonly string _value;

        private IpsecEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpsecEncryption None { get; } = new IpsecEncryption("None");
        public static IpsecEncryption DES { get; } = new IpsecEncryption("DES");
        public static IpsecEncryption DES3 { get; } = new IpsecEncryption("DES3");
        public static IpsecEncryption AES128 { get; } = new IpsecEncryption("AES128");
        public static IpsecEncryption AES192 { get; } = new IpsecEncryption("AES192");
        public static IpsecEncryption AES256 { get; } = new IpsecEncryption("AES256");
        public static IpsecEncryption GCMAES128 { get; } = new IpsecEncryption("GCMAES128");
        public static IpsecEncryption GCMAES192 { get; } = new IpsecEncryption("GCMAES192");
        public static IpsecEncryption GCMAES256 { get; } = new IpsecEncryption("GCMAES256");

        public static bool operator ==(IpsecEncryption left, IpsecEncryption right) => left.Equals(right);
        public static bool operator !=(IpsecEncryption left, IpsecEncryption right) => !left.Equals(right);

        public static explicit operator string(IpsecEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpsecEncryption other && Equals(other);
        public bool Equals(IpsecEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IPSec integrity algorithm (IKE phase 1).
    /// </summary>
    [EnumType]
    public readonly struct IpsecIntegrity : IEquatable<IpsecIntegrity>
    {
        private readonly string _value;

        private IpsecIntegrity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpsecIntegrity MD5 { get; } = new IpsecIntegrity("MD5");
        public static IpsecIntegrity SHA1 { get; } = new IpsecIntegrity("SHA1");
        public static IpsecIntegrity SHA256 { get; } = new IpsecIntegrity("SHA256");
        public static IpsecIntegrity GCMAES128 { get; } = new IpsecIntegrity("GCMAES128");
        public static IpsecIntegrity GCMAES192 { get; } = new IpsecIntegrity("GCMAES192");
        public static IpsecIntegrity GCMAES256 { get; } = new IpsecIntegrity("GCMAES256");

        public static bool operator ==(IpsecIntegrity left, IpsecIntegrity right) => left.Equals(right);
        public static bool operator !=(IpsecIntegrity left, IpsecIntegrity right) => !left.Equals(right);

        public static explicit operator string(IpsecIntegrity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpsecIntegrity other && Equals(other);
        public bool Equals(IpsecIntegrity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Pfs Group used in IKE Phase 2 for new child SA.
    /// </summary>
    [EnumType]
    public readonly struct PfsGroup : IEquatable<PfsGroup>
    {
        private readonly string _value;

        private PfsGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PfsGroup None { get; } = new PfsGroup("None");
        public static PfsGroup PFS1 { get; } = new PfsGroup("PFS1");
        public static PfsGroup PFS2 { get; } = new PfsGroup("PFS2");
        public static PfsGroup PFS2048 { get; } = new PfsGroup("PFS2048");
        public static PfsGroup ECP256 { get; } = new PfsGroup("ECP256");
        public static PfsGroup ECP384 { get; } = new PfsGroup("ECP384");
        public static PfsGroup PFS24 { get; } = new PfsGroup("PFS24");
        public static PfsGroup PFS14 { get; } = new PfsGroup("PFS14");
        public static PfsGroup PFSMM { get; } = new PfsGroup("PFSMM");

        public static bool operator ==(PfsGroup left, PfsGroup right) => left.Equals(right);
        public static bool operator !=(PfsGroup left, PfsGroup right) => !left.Equals(right);

        public static explicit operator string(PfsGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PfsGroup other && Equals(other);
        public bool Equals(PfsGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// VPN protocol enabled for the P2SVpnServerConfiguration.
    /// </summary>
    [EnumType]
    public readonly struct VpnGatewayTunnelingProtocol : IEquatable<VpnGatewayTunnelingProtocol>
    {
        private readonly string _value;

        private VpnGatewayTunnelingProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpnGatewayTunnelingProtocol IkeV2 { get; } = new VpnGatewayTunnelingProtocol("IkeV2");
        public static VpnGatewayTunnelingProtocol OpenVPN { get; } = new VpnGatewayTunnelingProtocol("OpenVPN");

        public static bool operator ==(VpnGatewayTunnelingProtocol left, VpnGatewayTunnelingProtocol right) => left.Equals(right);
        public static bool operator !=(VpnGatewayTunnelingProtocol left, VpnGatewayTunnelingProtocol right) => !left.Equals(right);

        public static explicit operator string(VpnGatewayTunnelingProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpnGatewayTunnelingProtocol other && Equals(other);
        public bool Equals(VpnGatewayTunnelingProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Actions.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallAction : IEquatable<WebApplicationFirewallAction>
    {
        private readonly string _value;

        private WebApplicationFirewallAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallAction Allow { get; } = new WebApplicationFirewallAction("Allow");
        public static WebApplicationFirewallAction Block { get; } = new WebApplicationFirewallAction("Block");
        public static WebApplicationFirewallAction Log { get; } = new WebApplicationFirewallAction("Log");

        public static bool operator ==(WebApplicationFirewallAction left, WebApplicationFirewallAction right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallAction left, WebApplicationFirewallAction right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallAction other && Equals(other);
        public bool Equals(WebApplicationFirewallAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if the policy is in enabled state or disabled state.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallEnabledState : IEquatable<WebApplicationFirewallEnabledState>
    {
        private readonly string _value;

        private WebApplicationFirewallEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallEnabledState Disabled { get; } = new WebApplicationFirewallEnabledState("Disabled");
        public static WebApplicationFirewallEnabledState Enabled { get; } = new WebApplicationFirewallEnabledState("Enabled");

        public static bool operator ==(WebApplicationFirewallEnabledState left, WebApplicationFirewallEnabledState right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallEnabledState left, WebApplicationFirewallEnabledState right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallEnabledState other && Equals(other);
        public bool Equals(WebApplicationFirewallEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Match Variable.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallMatchVariable : IEquatable<WebApplicationFirewallMatchVariable>
    {
        private readonly string _value;

        private WebApplicationFirewallMatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallMatchVariable RemoteAddr { get; } = new WebApplicationFirewallMatchVariable("RemoteAddr");
        public static WebApplicationFirewallMatchVariable RequestMethod { get; } = new WebApplicationFirewallMatchVariable("RequestMethod");
        public static WebApplicationFirewallMatchVariable QueryString { get; } = new WebApplicationFirewallMatchVariable("QueryString");
        public static WebApplicationFirewallMatchVariable PostArgs { get; } = new WebApplicationFirewallMatchVariable("PostArgs");
        public static WebApplicationFirewallMatchVariable RequestUri { get; } = new WebApplicationFirewallMatchVariable("RequestUri");
        public static WebApplicationFirewallMatchVariable RequestHeaders { get; } = new WebApplicationFirewallMatchVariable("RequestHeaders");
        public static WebApplicationFirewallMatchVariable RequestBody { get; } = new WebApplicationFirewallMatchVariable("RequestBody");
        public static WebApplicationFirewallMatchVariable RequestCookies { get; } = new WebApplicationFirewallMatchVariable("RequestCookies");

        public static bool operator ==(WebApplicationFirewallMatchVariable left, WebApplicationFirewallMatchVariable right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallMatchVariable left, WebApplicationFirewallMatchVariable right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallMatchVariable value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallMatchVariable other && Equals(other);
        public bool Equals(WebApplicationFirewallMatchVariable other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if it is in detection mode or prevention mode at policy level.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallMode : IEquatable<WebApplicationFirewallMode>
    {
        private readonly string _value;

        private WebApplicationFirewallMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallMode Prevention { get; } = new WebApplicationFirewallMode("Prevention");
        public static WebApplicationFirewallMode Detection { get; } = new WebApplicationFirewallMode("Detection");

        public static bool operator ==(WebApplicationFirewallMode left, WebApplicationFirewallMode right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallMode left, WebApplicationFirewallMode right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallMode other && Equals(other);
        public bool Equals(WebApplicationFirewallMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallOperator : IEquatable<WebApplicationFirewallOperator>
    {
        private readonly string _value;

        private WebApplicationFirewallOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallOperator IPMatch { get; } = new WebApplicationFirewallOperator("IPMatch");
        public static WebApplicationFirewallOperator Equal { get; } = new WebApplicationFirewallOperator("Equal");
        public static WebApplicationFirewallOperator Contains { get; } = new WebApplicationFirewallOperator("Contains");
        public static WebApplicationFirewallOperator LessThan { get; } = new WebApplicationFirewallOperator("LessThan");
        public static WebApplicationFirewallOperator GreaterThan { get; } = new WebApplicationFirewallOperator("GreaterThan");
        public static WebApplicationFirewallOperator LessThanOrEqual { get; } = new WebApplicationFirewallOperator("LessThanOrEqual");
        public static WebApplicationFirewallOperator GreaterThanOrEqual { get; } = new WebApplicationFirewallOperator("GreaterThanOrEqual");
        public static WebApplicationFirewallOperator BeginsWith { get; } = new WebApplicationFirewallOperator("BeginsWith");
        public static WebApplicationFirewallOperator EndsWith { get; } = new WebApplicationFirewallOperator("EndsWith");
        public static WebApplicationFirewallOperator Regex { get; } = new WebApplicationFirewallOperator("Regex");

        public static bool operator ==(WebApplicationFirewallOperator left, WebApplicationFirewallOperator right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallOperator left, WebApplicationFirewallOperator right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallOperator other && Equals(other);
        public bool Equals(WebApplicationFirewallOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes type of rule.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallRuleType : IEquatable<WebApplicationFirewallRuleType>
    {
        private readonly string _value;

        private WebApplicationFirewallRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallRuleType MatchRule { get; } = new WebApplicationFirewallRuleType("MatchRule");
        public static WebApplicationFirewallRuleType Invalid { get; } = new WebApplicationFirewallRuleType("Invalid");

        public static bool operator ==(WebApplicationFirewallRuleType left, WebApplicationFirewallRuleType right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallRuleType left, WebApplicationFirewallRuleType right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallRuleType other && Equals(other);
        public bool Equals(WebApplicationFirewallRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes what transforms applied before matching.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallTransform : IEquatable<WebApplicationFirewallTransform>
    {
        private readonly string _value;

        private WebApplicationFirewallTransform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallTransform Lowercase { get; } = new WebApplicationFirewallTransform("Lowercase");
        public static WebApplicationFirewallTransform Trim { get; } = new WebApplicationFirewallTransform("Trim");
        public static WebApplicationFirewallTransform UrlDecode { get; } = new WebApplicationFirewallTransform("UrlDecode");
        public static WebApplicationFirewallTransform UrlEncode { get; } = new WebApplicationFirewallTransform("UrlEncode");
        public static WebApplicationFirewallTransform RemoveNulls { get; } = new WebApplicationFirewallTransform("RemoveNulls");
        public static WebApplicationFirewallTransform HtmlEntityDecode { get; } = new WebApplicationFirewallTransform("HtmlEntityDecode");

        public static bool operator ==(WebApplicationFirewallTransform left, WebApplicationFirewallTransform right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallTransform left, WebApplicationFirewallTransform right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallTransform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallTransform other && Equals(other);
        public bool Equals(WebApplicationFirewallTransform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
