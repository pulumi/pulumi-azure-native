// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20190701.Outputs
{

    [OutputType]
    public sealed class SubnetInvokeResponseResult
    {
        /// <summary>
        /// The address prefix for the subnet.
        /// </summary>
        public readonly string? AddressPrefix;
        /// <summary>
        /// List of address prefixes for the subnet.
        /// </summary>
        public readonly ImmutableArray<string> AddressPrefixes;
        /// <summary>
        /// An array of references to the delegations on the subnet.
        /// </summary>
        public readonly ImmutableArray<Outputs.DelegationInvokeResponseResult> Delegations;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Array of IP configuration profiles which reference this subnet.
        /// </summary>
        public readonly ImmutableArray<Outputs.IPConfigurationProfileInvokeResponseResult> IpConfigurationProfiles;
        /// <summary>
        /// An array of references to the network interface IP configurations using subnet.
        /// </summary>
        public readonly ImmutableArray<Outputs.IPConfigurationInvokeResponseResult> IpConfigurations;
        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Nat gateway associated with this subnet.
        /// </summary>
        public readonly Outputs.SubResourceInvokeResponseResult? NatGateway;
        /// <summary>
        /// The reference of the NetworkSecurityGroup resource.
        /// </summary>
        public readonly Outputs.NetworkSecurityGroupInvokeResponseResult? NetworkSecurityGroup;
        /// <summary>
        /// Enable or Disable apply network policies on private end point in the subnet.
        /// </summary>
        public readonly string? PrivateEndpointNetworkPolicies;
        /// <summary>
        /// An array of references to private endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointInvokeResponseResult> PrivateEndpoints;
        /// <summary>
        /// Enable or Disable apply network policies on private link service in the subnet.
        /// </summary>
        public readonly string? PrivateLinkServiceNetworkPolicies;
        /// <summary>
        /// The provisioning state of the subnet resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
        /// </summary>
        public readonly string Purpose;
        /// <summary>
        /// An array of references to the external resources using subnet.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceNavigationLinkInvokeResponseResult> ResourceNavigationLinks;
        /// <summary>
        /// The reference of the RouteTable resource.
        /// </summary>
        public readonly Outputs.RouteTableInvokeResponseResult? RouteTable;
        /// <summary>
        /// An array of references to services injecting into this subnet.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceAssociationLinkInvokeResponseResult> ServiceAssociationLinks;
        /// <summary>
        /// An array of service endpoint policies.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceEndpointPolicyInvokeResponseResult> ServiceEndpointPolicies;
        /// <summary>
        /// An array of service endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceEndpointPropertiesFormatInvokeResponseResult> ServiceEndpoints;

        [OutputConstructor]
        private SubnetInvokeResponseResult(
            string? addressPrefix,

            ImmutableArray<string> addressPrefixes,

            ImmutableArray<Outputs.DelegationInvokeResponseResult> delegations,

            string? etag,

            string? id,

            ImmutableArray<Outputs.IPConfigurationProfileInvokeResponseResult> ipConfigurationProfiles,

            ImmutableArray<Outputs.IPConfigurationInvokeResponseResult> ipConfigurations,

            string? name,

            Outputs.SubResourceInvokeResponseResult? natGateway,

            Outputs.NetworkSecurityGroupInvokeResponseResult? networkSecurityGroup,

            string? privateEndpointNetworkPolicies,

            ImmutableArray<Outputs.PrivateEndpointInvokeResponseResult> privateEndpoints,

            string? privateLinkServiceNetworkPolicies,

            string provisioningState,

            string purpose,

            ImmutableArray<Outputs.ResourceNavigationLinkInvokeResponseResult> resourceNavigationLinks,

            Outputs.RouteTableInvokeResponseResult? routeTable,

            ImmutableArray<Outputs.ServiceAssociationLinkInvokeResponseResult> serviceAssociationLinks,

            ImmutableArray<Outputs.ServiceEndpointPolicyInvokeResponseResult> serviceEndpointPolicies,

            ImmutableArray<Outputs.ServiceEndpointPropertiesFormatInvokeResponseResult> serviceEndpoints)
        {
            AddressPrefix = addressPrefix;
            AddressPrefixes = addressPrefixes;
            Delegations = delegations;
            Etag = etag;
            Id = id;
            IpConfigurationProfiles = ipConfigurationProfiles;
            IpConfigurations = ipConfigurations;
            Name = name;
            NatGateway = natGateway;
            NetworkSecurityGroup = networkSecurityGroup;
            PrivateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
            PrivateEndpoints = privateEndpoints;
            PrivateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies;
            ProvisioningState = provisioningState;
            Purpose = purpose;
            ResourceNavigationLinks = resourceNavigationLinks;
            RouteTable = routeTable;
            ServiceAssociationLinks = serviceAssociationLinks;
            ServiceEndpointPolicies = serviceEndpointPolicies;
            ServiceEndpoints = serviceEndpoints;
        }
    }
}
