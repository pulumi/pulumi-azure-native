// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    public static class GetVirtualHub
    {
        /// <summary>
        /// Retrieves the details of a VirtualHub.
        /// 
        /// Uses Azure REST API version 2024-05-01.
        /// 
        /// Other available API versions: 2018-06-01, 2018-07-01, 2018-08-01, 2018-10-01, 2018-11-01, 2018-12-01, 2019-02-01, 2019-04-01, 2019-06-01, 2019-07-01, 2019-08-01, 2019-09-01, 2019-11-01, 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01, 2024-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetVirtualHubResult> InvokeAsync(GetVirtualHubArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualHubResult>("azure-native:network:getVirtualHub", args ?? new GetVirtualHubArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the details of a VirtualHub.
        /// 
        /// Uses Azure REST API version 2024-05-01.
        /// 
        /// Other available API versions: 2018-06-01, 2018-07-01, 2018-08-01, 2018-10-01, 2018-11-01, 2018-12-01, 2019-02-01, 2019-04-01, 2019-06-01, 2019-07-01, 2019-08-01, 2019-09-01, 2019-11-01, 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01, 2024-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetVirtualHubResult> Invoke(GetVirtualHubInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualHubResult>("azure-native:network:getVirtualHub", args ?? new GetVirtualHubInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the details of a VirtualHub.
        /// 
        /// Uses Azure REST API version 2024-05-01.
        /// 
        /// Other available API versions: 2018-06-01, 2018-07-01, 2018-08-01, 2018-10-01, 2018-11-01, 2018-12-01, 2019-02-01, 2019-04-01, 2019-06-01, 2019-07-01, 2019-08-01, 2019-09-01, 2019-11-01, 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01, 2024-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetVirtualHubResult> Invoke(GetVirtualHubInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualHubResult>("azure-native:network:getVirtualHub", args ?? new GetVirtualHubInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualHubArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource group name of the VirtualHub.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VirtualHub.
        /// </summary>
        [Input("virtualHubName", required: true)]
        public string VirtualHubName { get; set; } = null!;

        public GetVirtualHubArgs()
        {
        }
        public static new GetVirtualHubArgs Empty => new GetVirtualHubArgs();
    }

    public sealed class GetVirtualHubInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource group name of the VirtualHub.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VirtualHub.
        /// </summary>
        [Input("virtualHubName", required: true)]
        public Input<string> VirtualHubName { get; set; } = null!;

        public GetVirtualHubInvokeArgs()
        {
        }
        public static new GetVirtualHubInvokeArgs Empty => new GetVirtualHubInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualHubResult
    {
        /// <summary>
        /// Address-prefix for this VirtualHub.
        /// </summary>
        public readonly string? AddressPrefix;
        /// <summary>
        /// Flag to control transit for VirtualRouter hub.
        /// </summary>
        public readonly bool? AllowBranchToBranchTraffic;
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// The azureFirewall associated with this VirtualHub.
        /// </summary>
        public readonly Outputs.SubResourceResponse? AzureFirewall;
        /// <summary>
        /// List of references to Bgp Connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> BgpConnections;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The expressRouteGateway associated with this VirtualHub.
        /// </summary>
        public readonly Outputs.SubResourceResponse? ExpressRouteGateway;
        /// <summary>
        /// The hubRoutingPreference of this VirtualHub.
        /// </summary>
        public readonly string? HubRoutingPreference;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// List of references to IpConfigurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> IpConfigurations;
        /// <summary>
        /// Kind of service virtual hub. This is metadata used for the Azure portal experience for Route Server.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The P2SVpnGateway associated with this VirtualHub.
        /// </summary>
        public readonly Outputs.SubResourceResponse? P2SVpnGateway;
        /// <summary>
        /// The preferred gateway to route on-prem traffic
        /// </summary>
        public readonly string? PreferredRoutingGateway;
        /// <summary>
        /// The provisioning state of the virtual hub resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// List of references to RouteMaps.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> RouteMaps;
        /// <summary>
        /// The routeTable associated with this virtual hub.
        /// </summary>
        public readonly Outputs.VirtualHubRouteTableResponse? RouteTable;
        /// <summary>
        /// The routing state.
        /// </summary>
        public readonly string RoutingState;
        /// <summary>
        /// The securityPartnerProvider associated with this VirtualHub.
        /// </summary>
        public readonly Outputs.SubResourceResponse? SecurityPartnerProvider;
        /// <summary>
        /// The Security Provider name.
        /// </summary>
        public readonly string? SecurityProviderName;
        /// <summary>
        /// The sku of this VirtualHub.
        /// </summary>
        public readonly string? Sku;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// List of all virtual hub route table v2s associated with this VirtualHub.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualHubRouteTableV2Response> VirtualHubRouteTableV2s;
        /// <summary>
        /// VirtualRouter ASN.
        /// </summary>
        public readonly double? VirtualRouterAsn;
        /// <summary>
        /// The VirtualHub Router autoscale configuration.
        /// </summary>
        public readonly Outputs.VirtualRouterAutoScaleConfigurationResponse? VirtualRouterAutoScaleConfiguration;
        /// <summary>
        /// VirtualRouter IPs.
        /// </summary>
        public readonly ImmutableArray<string> VirtualRouterIps;
        /// <summary>
        /// The VirtualWAN to which the VirtualHub belongs.
        /// </summary>
        public readonly Outputs.SubResourceResponse? VirtualWan;
        /// <summary>
        /// The VpnGateway associated with this VirtualHub.
        /// </summary>
        public readonly Outputs.SubResourceResponse? VpnGateway;

        [OutputConstructor]
        private GetVirtualHubResult(
            string? addressPrefix,

            bool? allowBranchToBranchTraffic,

            string azureApiVersion,

            Outputs.SubResourceResponse? azureFirewall,

            ImmutableArray<Outputs.SubResourceResponse> bgpConnections,

            string etag,

            Outputs.SubResourceResponse? expressRouteGateway,

            string? hubRoutingPreference,

            string? id,

            ImmutableArray<Outputs.SubResourceResponse> ipConfigurations,

            string kind,

            string location,

            string name,

            Outputs.SubResourceResponse? p2SVpnGateway,

            string? preferredRoutingGateway,

            string provisioningState,

            ImmutableArray<Outputs.SubResourceResponse> routeMaps,

            Outputs.VirtualHubRouteTableResponse? routeTable,

            string routingState,

            Outputs.SubResourceResponse? securityPartnerProvider,

            string? securityProviderName,

            string? sku,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<Outputs.VirtualHubRouteTableV2Response> virtualHubRouteTableV2s,

            double? virtualRouterAsn,

            Outputs.VirtualRouterAutoScaleConfigurationResponse? virtualRouterAutoScaleConfiguration,

            ImmutableArray<string> virtualRouterIps,

            Outputs.SubResourceResponse? virtualWan,

            Outputs.SubResourceResponse? vpnGateway)
        {
            AddressPrefix = addressPrefix;
            AllowBranchToBranchTraffic = allowBranchToBranchTraffic;
            AzureApiVersion = azureApiVersion;
            AzureFirewall = azureFirewall;
            BgpConnections = bgpConnections;
            Etag = etag;
            ExpressRouteGateway = expressRouteGateway;
            HubRoutingPreference = hubRoutingPreference;
            Id = id;
            IpConfigurations = ipConfigurations;
            Kind = kind;
            Location = location;
            Name = name;
            P2SVpnGateway = p2SVpnGateway;
            PreferredRoutingGateway = preferredRoutingGateway;
            ProvisioningState = provisioningState;
            RouteMaps = routeMaps;
            RouteTable = routeTable;
            RoutingState = routingState;
            SecurityPartnerProvider = securityPartnerProvider;
            SecurityProviderName = securityProviderName;
            Sku = sku;
            Tags = tags;
            Type = type;
            VirtualHubRouteTableV2s = virtualHubRouteTableV2s;
            VirtualRouterAsn = virtualRouterAsn;
            VirtualRouterAutoScaleConfiguration = virtualRouterAutoScaleConfiguration;
            VirtualRouterIps = virtualRouterIps;
            VirtualWan = virtualWan;
            VpnGateway = vpnGateway;
        }
    }
}
