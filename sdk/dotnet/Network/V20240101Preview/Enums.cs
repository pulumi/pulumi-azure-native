// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20240101Preview
{
    /// <summary>
    /// Address prefix type.
    /// </summary>
    [EnumType]
    public readonly struct AddressPrefixType : IEquatable<AddressPrefixType>
    {
        private readonly string _value;

        private AddressPrefixType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AddressPrefixType IPPrefix { get; } = new AddressPrefixType("IPPrefix");
        public static AddressPrefixType ServiceTag { get; } = new AddressPrefixType("ServiceTag");
        public static AddressPrefixType NetworkGroup { get; } = new AddressPrefixType("NetworkGroup");

        public static bool operator ==(AddressPrefixType left, AddressPrefixType right) => left.Equals(right);
        public static bool operator !=(AddressPrefixType left, AddressPrefixType right) => !left.Equals(right);

        public static explicit operator string(AddressPrefixType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressPrefixType other && Equals(other);
        public bool Equals(AddressPrefixType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determine update behavior for changes to network groups referenced within the rules in this configuration.
    /// </summary>
    [EnumType]
    public readonly struct AddressSpaceAggregationOption : IEquatable<AddressSpaceAggregationOption>
    {
        private readonly string _value;

        private AddressSpaceAggregationOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AddressSpaceAggregationOption None { get; } = new AddressSpaceAggregationOption("None");
        public static AddressSpaceAggregationOption Manual { get; } = new AddressSpaceAggregationOption("Manual");

        public static bool operator ==(AddressSpaceAggregationOption left, AddressSpaceAggregationOption right) => left.Equals(right);
        public static bool operator !=(AddressSpaceAggregationOption left, AddressSpaceAggregationOption right) => !left.Equals(right);

        public static explicit operator string(AddressSpaceAggregationOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressSpaceAggregationOption other && Equals(other);
        public bool Equals(AddressSpaceAggregationOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the rule is custom or default.
    /// </summary>
    [EnumType]
    public readonly struct AdminRuleKind : IEquatable<AdminRuleKind>
    {
        private readonly string _value;

        private AdminRuleKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdminRuleKind Custom { get; } = new AdminRuleKind("Custom");
        public static AdminRuleKind Default { get; } = new AdminRuleKind("Default");

        public static bool operator ==(AdminRuleKind left, AdminRuleKind right) => left.Equals(right);
        public static bool operator !=(AdminRuleKind left, AdminRuleKind right) => !left.Equals(right);

        public static explicit operator string(AdminRuleKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdminRuleKind other && Equals(other);
        public bool Equals(AdminRuleKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration Deployment Type.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType SecurityAdmin { get; } = new ConfigurationType("SecurityAdmin");
        public static ConfigurationType Connectivity { get; } = new ConfigurationType("Connectivity");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network intent policy based services.
    /// </summary>
    [EnumType]
    public readonly struct NetworkIntentPolicyBasedService : IEquatable<NetworkIntentPolicyBasedService>
    {
        private readonly string _value;

        private NetworkIntentPolicyBasedService(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkIntentPolicyBasedService None { get; } = new NetworkIntentPolicyBasedService("None");
        public static NetworkIntentPolicyBasedService All { get; } = new NetworkIntentPolicyBasedService("All");
        public static NetworkIntentPolicyBasedService AllowRulesOnly { get; } = new NetworkIntentPolicyBasedService("AllowRulesOnly");

        public static bool operator ==(NetworkIntentPolicyBasedService left, NetworkIntentPolicyBasedService right) => left.Equals(right);
        public static bool operator !=(NetworkIntentPolicyBasedService left, NetworkIntentPolicyBasedService right) => !left.Equals(right);

        public static explicit operator string(NetworkIntentPolicyBasedService value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkIntentPolicyBasedService other && Equals(other);
        public bool Equals(NetworkIntentPolicyBasedService other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network protocol this resource applies to.
    /// </summary>
    [EnumType]
    public readonly struct NetworkProtocol : IEquatable<NetworkProtocol>
    {
        private readonly string _value;

        private NetworkProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkProtocol Any { get; } = new NetworkProtocol("Any");
        public static NetworkProtocol TCP { get; } = new NetworkProtocol("TCP");
        public static NetworkProtocol UDP { get; } = new NetworkProtocol("UDP");
        public static NetworkProtocol ICMP { get; } = new NetworkProtocol("ICMP");

        public static bool operator ==(NetworkProtocol left, NetworkProtocol right) => left.Equals(right);
        public static bool operator !=(NetworkProtocol left, NetworkProtocol right) => !left.Equals(right);

        public static explicit operator string(NetworkProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkProtocol other && Equals(other);
        public bool Equals(NetworkProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the access allowed for this particular rule
    /// </summary>
    [EnumType]
    public readonly struct SecurityConfigurationRuleAccess : IEquatable<SecurityConfigurationRuleAccess>
    {
        private readonly string _value;

        private SecurityConfigurationRuleAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityConfigurationRuleAccess Allow { get; } = new SecurityConfigurationRuleAccess("Allow");
        public static SecurityConfigurationRuleAccess Deny { get; } = new SecurityConfigurationRuleAccess("Deny");
        public static SecurityConfigurationRuleAccess AlwaysAllow { get; } = new SecurityConfigurationRuleAccess("AlwaysAllow");

        public static bool operator ==(SecurityConfigurationRuleAccess left, SecurityConfigurationRuleAccess right) => left.Equals(right);
        public static bool operator !=(SecurityConfigurationRuleAccess left, SecurityConfigurationRuleAccess right) => !left.Equals(right);

        public static explicit operator string(SecurityConfigurationRuleAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityConfigurationRuleAccess other && Equals(other);
        public bool Equals(SecurityConfigurationRuleAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if the traffic matched against the rule in inbound or outbound.
    /// </summary>
    [EnumType]
    public readonly struct SecurityConfigurationRuleDirection : IEquatable<SecurityConfigurationRuleDirection>
    {
        private readonly string _value;

        private SecurityConfigurationRuleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityConfigurationRuleDirection Inbound { get; } = new SecurityConfigurationRuleDirection("Inbound");
        public static SecurityConfigurationRuleDirection Outbound { get; } = new SecurityConfigurationRuleDirection("Outbound");

        public static bool operator ==(SecurityConfigurationRuleDirection left, SecurityConfigurationRuleDirection right) => left.Equals(right);
        public static bool operator !=(SecurityConfigurationRuleDirection left, SecurityConfigurationRuleDirection right) => !left.Equals(right);

        public static explicit operator string(SecurityConfigurationRuleDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityConfigurationRuleDirection other && Equals(other);
        public bool Equals(SecurityConfigurationRuleDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network protocol this rule applies to.
    /// </summary>
    [EnumType]
    public readonly struct SecurityConfigurationRuleProtocol : IEquatable<SecurityConfigurationRuleProtocol>
    {
        private readonly string _value;

        private SecurityConfigurationRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityConfigurationRuleProtocol Tcp { get; } = new SecurityConfigurationRuleProtocol("Tcp");
        public static SecurityConfigurationRuleProtocol Udp { get; } = new SecurityConfigurationRuleProtocol("Udp");
        public static SecurityConfigurationRuleProtocol Icmp { get; } = new SecurityConfigurationRuleProtocol("Icmp");
        public static SecurityConfigurationRuleProtocol Esp { get; } = new SecurityConfigurationRuleProtocol("Esp");
        public static SecurityConfigurationRuleProtocol Any { get; } = new SecurityConfigurationRuleProtocol("Any");
        public static SecurityConfigurationRuleProtocol Ah { get; } = new SecurityConfigurationRuleProtocol("Ah");

        public static bool operator ==(SecurityConfigurationRuleProtocol left, SecurityConfigurationRuleProtocol right) => left.Equals(right);
        public static bool operator !=(SecurityConfigurationRuleProtocol left, SecurityConfigurationRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(SecurityConfigurationRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityConfigurationRuleProtocol other && Equals(other);
        public bool Equals(SecurityConfigurationRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
