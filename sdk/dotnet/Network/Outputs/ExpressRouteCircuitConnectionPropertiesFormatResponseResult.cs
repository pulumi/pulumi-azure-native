// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Outputs
{

    [OutputType]
    public sealed class ExpressRouteCircuitConnectionPropertiesFormatResponseResult
    {
        /// <summary>
        /// /29 IP address space to carve out Customer addresses for tunnels.
        /// </summary>
        public readonly string? AddressPrefix;
        /// <summary>
        /// The authorization key.
        /// </summary>
        public readonly string? AuthorizationKey;
        /// <summary>
        /// Express Route Circuit connection state.
        /// </summary>
        public readonly string? CircuitConnectionStatus;
        /// <summary>
        /// Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
        /// </summary>
        public readonly Outputs.SubResourceResponseResult? ExpressRouteCircuitPeering;
        /// <summary>
        /// IPv6 Address PrefixProperties of the express route circuit connection.
        /// </summary>
        public readonly Outputs.Ipv6CircuitConnectionConfigResponseResult? Ipv6CircuitConnectionConfig;
        /// <summary>
        /// Reference to Express Route Circuit Private Peering Resource of the peered circuit.
        /// </summary>
        public readonly Outputs.SubResourceResponseResult? PeerExpressRouteCircuitPeering;
        /// <summary>
        /// The provisioning state of the express route circuit connection resource.
        /// </summary>
        public readonly string ProvisioningState;

        [OutputConstructor]
        private ExpressRouteCircuitConnectionPropertiesFormatResponseResult(
            string? addressPrefix,

            string? authorizationKey,

            string? circuitConnectionStatus,

            Outputs.SubResourceResponseResult? expressRouteCircuitPeering,

            Outputs.Ipv6CircuitConnectionConfigResponseResult? ipv6CircuitConnectionConfig,

            Outputs.SubResourceResponseResult? peerExpressRouteCircuitPeering,

            string provisioningState)
        {
            AddressPrefix = addressPrefix;
            AuthorizationKey = authorizationKey;
            CircuitConnectionStatus = circuitConnectionStatus;
            ExpressRouteCircuitPeering = expressRouteCircuitPeering;
            Ipv6CircuitConnectionConfig = ipv6CircuitConnectionConfig;
            PeerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
            ProvisioningState = provisioningState;
        }
    }
}
