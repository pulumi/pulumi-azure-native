// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Outputs
{

    [OutputType]
    public sealed class FrontDoorPropertiesResponseResult
    {
        /// <summary>
        /// Backend pools available to routing rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.BackendPoolResponseResult> BackendPools;
        /// <summary>
        /// Settings for all backendPools
        /// </summary>
        public readonly Outputs.BackendPoolsSettingsResponseResult? BackendPoolsSettings;
        /// <summary>
        /// The host that each frontendEndpoint must CNAME to.
        /// </summary>
        public readonly string Cname;
        /// <summary>
        /// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
        /// </summary>
        public readonly string? EnabledState;
        /// <summary>
        /// A friendly name for the frontDoor
        /// </summary>
        public readonly string? FriendlyName;
        /// <summary>
        /// The Id of the frontdoor.
        /// </summary>
        public readonly string FrontdoorId;
        /// <summary>
        /// Frontend endpoints available to routing rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.FrontendEndpointResponseResult> FrontendEndpoints;
        /// <summary>
        /// Health probe settings associated with this Front Door instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.HealthProbeSettingsModelResponseResult> HealthProbeSettings;
        /// <summary>
        /// Load balancing settings associated with this Front Door instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadBalancingSettingsModelResponseResult> LoadBalancingSettings;
        /// <summary>
        /// Provisioning state of the Front Door.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource status of the Front Door.
        /// </summary>
        public readonly string? ResourceState;
        /// <summary>
        /// Routing rules associated with this Front Door.
        /// </summary>
        public readonly ImmutableArray<Outputs.RoutingRuleResponseResult> RoutingRules;
        /// <summary>
        /// Rules Engine Configurations available to routing rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesEngineResponseResult> RulesEngines;

        [OutputConstructor]
        private FrontDoorPropertiesResponseResult(
            ImmutableArray<Outputs.BackendPoolResponseResult> backendPools,

            Outputs.BackendPoolsSettingsResponseResult? backendPoolsSettings,

            string cname,

            string? enabledState,

            string? friendlyName,

            string frontdoorId,

            ImmutableArray<Outputs.FrontendEndpointResponseResult> frontendEndpoints,

            ImmutableArray<Outputs.HealthProbeSettingsModelResponseResult> healthProbeSettings,

            ImmutableArray<Outputs.LoadBalancingSettingsModelResponseResult> loadBalancingSettings,

            string provisioningState,

            string? resourceState,

            ImmutableArray<Outputs.RoutingRuleResponseResult> routingRules,

            ImmutableArray<Outputs.RulesEngineResponseResult> rulesEngines)
        {
            BackendPools = backendPools;
            BackendPoolsSettings = backendPoolsSettings;
            Cname = cname;
            EnabledState = enabledState;
            FriendlyName = friendlyName;
            FrontdoorId = frontdoorId;
            FrontendEndpoints = frontendEndpoints;
            HealthProbeSettings = healthProbeSettings;
            LoadBalancingSettings = loadBalancingSettings;
            ProvisioningState = provisioningState;
            ResourceState = resourceState;
            RoutingRules = routingRules;
            RulesEngines = rulesEngines;
        }
    }
}
