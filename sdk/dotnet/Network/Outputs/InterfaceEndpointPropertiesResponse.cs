// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Outputs
{

    [OutputType]
    public sealed class InterfaceEndpointPropertiesResponse
    {
        /// <summary>
        /// A reference to the service being brought into the virtual network.
        /// </summary>
        public readonly Outputs.EndpointServiceResponse? EndpointService;
        /// <summary>
        /// A first-party service's FQDN that is mapped to the private IP allocated via this interface endpoint.
        /// </summary>
        public readonly string? Fqdn;
        /// <summary>
        /// Gets an array of references to the network interfaces created for this interface endpoint.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkInterfaceResponse> NetworkInterfaces;
        /// <summary>
        /// A read-only property that identifies who created this interface endpoint.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// The provisioning state of the interface endpoint. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The ID of the subnet from which the private IP will be allocated.
        /// </summary>
        public readonly Outputs.SubnetResponse? Subnet;

        [OutputConstructor]
        private InterfaceEndpointPropertiesResponse(
            Outputs.EndpointServiceResponse? endpointService,

            string? fqdn,

            ImmutableArray<Outputs.NetworkInterfaceResponse> networkInterfaces,

            string owner,

            string provisioningState,

            Outputs.SubnetResponse? subnet)
        {
            EndpointService = endpointService;
            Fqdn = fqdn;
            NetworkInterfaces = networkInterfaces;
            Owner = owner;
            ProvisioningState = provisioningState;
            Subnet = subnet;
        }
    }
}
