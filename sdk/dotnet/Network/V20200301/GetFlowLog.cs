// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20200301
{
    public static class GetFlowLog
    {
        public static Task<GetFlowLogResult> InvokeAsync(GetFlowLogArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFlowLogResult>("azure-nextgen:network/v20200301:getFlowLog", args ?? new GetFlowLogArgs(), options.WithVersion());
    }


    public sealed class GetFlowLogArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the flow log resource.
        /// </summary>
        [Input("flowLogName", required: true)]
        public string FlowLogName { get; set; } = null!;

        /// <summary>
        /// The name of the network watcher.
        /// </summary>
        [Input("networkWatcherName", required: true)]
        public string NetworkWatcherName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetFlowLogArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFlowLogResult
    {
        /// <summary>
        /// Flag to enable/disable flow logging.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Parameters that define the configuration of traffic analytics.
        /// </summary>
        public readonly Outputs.TrafficAnalyticsPropertiesResponse? FlowAnalyticsConfiguration;
        /// <summary>
        /// Parameters that define the flow log format.
        /// </summary>
        public readonly Outputs.FlowLogFormatParametersResponse? Format;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the flow log.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Parameters that define the retention policy for flow log.
        /// </summary>
        public readonly Outputs.RetentionPolicyParametersResponse? RetentionPolicy;
        /// <summary>
        /// ID of the storage account which is used to store the flow log.
        /// </summary>
        public readonly string StorageId;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Guid of network security group to which flow log will be applied.
        /// </summary>
        public readonly string TargetResourceGuid;
        /// <summary>
        /// ID of network security group to which flow log will be applied.
        /// </summary>
        public readonly string TargetResourceId;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetFlowLogResult(
            bool? enabled,

            string etag,

            Outputs.TrafficAnalyticsPropertiesResponse? flowAnalyticsConfiguration,

            Outputs.FlowLogFormatParametersResponse? format,

            string? location,

            string name,

            string provisioningState,

            Outputs.RetentionPolicyParametersResponse? retentionPolicy,

            string storageId,

            ImmutableDictionary<string, string>? tags,

            string targetResourceGuid,

            string targetResourceId,

            string type)
        {
            Enabled = enabled;
            Etag = etag;
            FlowAnalyticsConfiguration = flowAnalyticsConfiguration;
            Format = format;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            RetentionPolicy = retentionPolicy;
            StorageId = storageId;
            Tags = tags;
            TargetResourceGuid = targetResourceGuid;
            TargetResourceId = targetResourceId;
            Type = type;
        }
    }
}
