// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20180801
{
    public static class GetFrontDoor
    {
        public static Task<GetFrontDoorResult> InvokeAsync(GetFrontDoorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFrontDoorResult>("azure-nextgen:network/v20180801:getFrontDoor", args ?? new GetFrontDoorArgs(), options.WithVersion());
    }


    public sealed class GetFrontDoorArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Front Door which is globally unique.
        /// </summary>
        [Input("frontDoorName", required: true)]
        public string FrontDoorName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetFrontDoorArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFrontDoorResult
    {
        /// <summary>
        /// Backend pools available to routing rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.BackendPoolResponse> BackendPools;
        /// <summary>
        /// The host that each frontendEndpoint must CNAME to.
        /// </summary>
        public readonly string Cname;
        /// <summary>
        /// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
        /// </summary>
        public readonly string? EnabledState;
        /// <summary>
        /// A friendly name for the frontDoor
        /// </summary>
        public readonly string? FriendlyName;
        /// <summary>
        /// Frontend endpoints available to routing rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.FrontendEndpointResponse> FrontendEndpoints;
        /// <summary>
        /// Health probe settings associated with this Front Door instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.HealthProbeSettingsModelResponse> HealthProbeSettings;
        /// <summary>
        /// Load balancing settings associated with this Front Door instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadBalancingSettingsModelResponse> LoadBalancingSettings;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the Front Door.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource status of the Front Door.
        /// </summary>
        public readonly string ResourceState;
        /// <summary>
        /// Routing rules associated with this Front Door.
        /// </summary>
        public readonly ImmutableArray<Outputs.RoutingRuleResponse> RoutingRules;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetFrontDoorResult(
            ImmutableArray<Outputs.BackendPoolResponse> backendPools,

            string cname,

            string? enabledState,

            string? friendlyName,

            ImmutableArray<Outputs.FrontendEndpointResponse> frontendEndpoints,

            ImmutableArray<Outputs.HealthProbeSettingsModelResponse> healthProbeSettings,

            ImmutableArray<Outputs.LoadBalancingSettingsModelResponse> loadBalancingSettings,

            string? location,

            string name,

            string provisioningState,

            string resourceState,

            ImmutableArray<Outputs.RoutingRuleResponse> routingRules,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            BackendPools = backendPools;
            Cname = cname;
            EnabledState = enabledState;
            FriendlyName = friendlyName;
            FrontendEndpoints = frontendEndpoints;
            HealthProbeSettings = healthProbeSettings;
            LoadBalancingSettings = loadBalancingSettings;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            ResourceState = resourceState;
            RoutingRules = routingRules;
            Tags = tags;
            Type = type;
        }
    }
}
