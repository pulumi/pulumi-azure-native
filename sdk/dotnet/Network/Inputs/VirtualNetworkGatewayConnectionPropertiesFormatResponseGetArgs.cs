// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Inputs
{

    /// <summary>
    /// VirtualNetworkGatewayConnection properties.
    /// </summary>
    public sealed class VirtualNetworkGatewayConnectionPropertiesFormatResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authorizationKey.
        /// </summary>
        [Input("authorizationKey")]
        public Input<string>? AuthorizationKey { get; set; }

        /// <summary>
        /// Connection protocol used for this connection.
        /// </summary>
        [Input("connectionProtocol")]
        public Input<string>? ConnectionProtocol { get; set; }

        /// <summary>
        /// Virtual Network Gateway connection status.
        /// </summary>
        [Input("connectionStatus", required: true)]
        public Input<string> ConnectionStatus { get; set; } = null!;

        /// <summary>
        /// Gateway connection type.
        /// </summary>
        [Input("connectionType", required: true)]
        public Input<string> ConnectionType { get; set; } = null!;

        /// <summary>
        /// The dead peer detection timeout of this connection in seconds.
        /// </summary>
        [Input("dpdTimeoutSeconds")]
        public Input<int>? DpdTimeoutSeconds { get; set; }

        /// <summary>
        /// The egress bytes transferred in this connection.
        /// </summary>
        [Input("egressBytesTransferred", required: true)]
        public Input<int> EgressBytesTransferred { get; set; } = null!;

        /// <summary>
        /// EnableBgp flag.
        /// </summary>
        [Input("enableBgp")]
        public Input<bool>? EnableBgp { get; set; }

        /// <summary>
        /// Bypass ExpressRoute Gateway for data forwarding.
        /// </summary>
        [Input("expressRouteGatewayBypass")]
        public Input<bool>? ExpressRouteGatewayBypass { get; set; }

        /// <summary>
        /// The ingress bytes transferred in this connection.
        /// </summary>
        [Input("ingressBytesTransferred", required: true)]
        public Input<int> IngressBytesTransferred { get; set; } = null!;

        [Input("ipsecPolicies")]
        private InputList<Inputs.IpsecPolicyResponseGetArgs>? _ipsecPolicies;

        /// <summary>
        /// The IPSec Policies to be considered by this connection.
        /// </summary>
        public InputList<Inputs.IpsecPolicyResponseGetArgs> IpsecPolicies
        {
            get => _ipsecPolicies ?? (_ipsecPolicies = new InputList<Inputs.IpsecPolicyResponseGetArgs>());
            set => _ipsecPolicies = value;
        }

        /// <summary>
        /// The reference to local network gateway resource.
        /// </summary>
        [Input("localNetworkGateway2")]
        public Input<Inputs.LocalNetworkGatewayResponseGetArgs>? LocalNetworkGateway2 { get; set; }

        /// <summary>
        /// The reference to peerings resource.
        /// </summary>
        [Input("peer")]
        public Input<Inputs.SubResourceResponseGetArgs>? Peer { get; set; }

        /// <summary>
        /// The provisioning state of the virtual network gateway connection resource.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The resource GUID property of the virtual network gateway connection resource.
        /// </summary>
        [Input("resourceGuid", required: true)]
        public Input<string> ResourceGuid { get; set; } = null!;

        /// <summary>
        /// The routing weight.
        /// </summary>
        [Input("routingWeight")]
        public Input<int>? RoutingWeight { get; set; }

        /// <summary>
        /// The IPSec shared key.
        /// </summary>
        [Input("sharedKey")]
        public Input<string>? SharedKey { get; set; }

        [Input("trafficSelectorPolicies")]
        private InputList<Inputs.TrafficSelectorPolicyResponseGetArgs>? _trafficSelectorPolicies;

        /// <summary>
        /// The Traffic Selector Policies to be considered by this connection.
        /// </summary>
        public InputList<Inputs.TrafficSelectorPolicyResponseGetArgs> TrafficSelectorPolicies
        {
            get => _trafficSelectorPolicies ?? (_trafficSelectorPolicies = new InputList<Inputs.TrafficSelectorPolicyResponseGetArgs>());
            set => _trafficSelectorPolicies = value;
        }

        [Input("tunnelConnectionStatus", required: true)]
        private InputList<Inputs.TunnelConnectionHealthResponseGetArgs>? _tunnelConnectionStatus;

        /// <summary>
        /// Collection of all tunnels' connection health status.
        /// </summary>
        public InputList<Inputs.TunnelConnectionHealthResponseGetArgs> TunnelConnectionStatus
        {
            get => _tunnelConnectionStatus ?? (_tunnelConnectionStatus = new InputList<Inputs.TunnelConnectionHealthResponseGetArgs>());
            set => _tunnelConnectionStatus = value;
        }

        /// <summary>
        /// Use private local Azure IP for the connection.
        /// </summary>
        [Input("useLocalAzureIpAddress")]
        public Input<bool>? UseLocalAzureIpAddress { get; set; }

        /// <summary>
        /// Enable policy-based traffic selectors.
        /// </summary>
        [Input("usePolicyBasedTrafficSelectors")]
        public Input<bool>? UsePolicyBasedTrafficSelectors { get; set; }

        /// <summary>
        /// The reference to virtual network gateway resource.
        /// </summary>
        [Input("virtualNetworkGateway1", required: true)]
        public Input<Inputs.VirtualNetworkGatewayResponseGetArgs> VirtualNetworkGateway1 { get; set; } = null!;

        /// <summary>
        /// The reference to virtual network gateway resource.
        /// </summary>
        [Input("virtualNetworkGateway2")]
        public Input<Inputs.VirtualNetworkGatewayResponseGetArgs>? VirtualNetworkGateway2 { get; set; }

        public VirtualNetworkGatewayConnectionPropertiesFormatResponseGetArgs()
        {
        }
    }
}
