// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Inputs
{

    /// <summary>
    /// Properties of the virtual network.
    /// </summary>
    public sealed class VirtualNetworkPropertiesFormatResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AddressSpace that contains an array of IP address ranges that can be used by subnets.
        /// </summary>
        [Input("addressSpace")]
        public Input<Inputs.AddressSpaceResponseGetArgs>? AddressSpace { get; set; }

        /// <summary>
        /// Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
        /// </summary>
        [Input("bgpCommunities")]
        public Input<Inputs.VirtualNetworkBgpCommunitiesResponseGetArgs>? BgpCommunities { get; set; }

        /// <summary>
        /// The DDoS protection plan associated with the virtual network.
        /// </summary>
        [Input("ddosProtectionPlan")]
        public Input<Inputs.SubResourceResponseGetArgs>? DdosProtectionPlan { get; set; }

        /// <summary>
        /// The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
        /// </summary>
        [Input("dhcpOptions")]
        public Input<Inputs.DhcpOptionsResponseGetArgs>? DhcpOptions { get; set; }

        /// <summary>
        /// Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
        /// </summary>
        [Input("enableDdosProtection")]
        public Input<bool>? EnableDdosProtection { get; set; }

        /// <summary>
        /// Indicates if VM protection is enabled for all the subnets in the virtual network.
        /// </summary>
        [Input("enableVmProtection")]
        public Input<bool>? EnableVmProtection { get; set; }

        [Input("ipAllocations")]
        private InputList<Inputs.SubResourceResponseGetArgs>? _ipAllocations;

        /// <summary>
        /// Array of IpAllocation which reference this VNET.
        /// </summary>
        public InputList<Inputs.SubResourceResponseGetArgs> IpAllocations
        {
            get => _ipAllocations ?? (_ipAllocations = new InputList<Inputs.SubResourceResponseGetArgs>());
            set => _ipAllocations = value;
        }

        /// <summary>
        /// The provisioning state of the virtual network resource.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The resourceGuid property of the Virtual Network resource.
        /// </summary>
        [Input("resourceGuid", required: true)]
        public Input<string> ResourceGuid { get; set; } = null!;

        [Input("subnets")]
        private InputList<Inputs.SubnetResponseGetArgs>? _subnets;

        /// <summary>
        /// A list of subnets in a Virtual Network.
        /// </summary>
        public InputList<Inputs.SubnetResponseGetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.SubnetResponseGetArgs>());
            set => _subnets = value;
        }

        [Input("virtualNetworkPeerings")]
        private InputList<Inputs.VirtualNetworkPeeringResponseGetArgs>? _virtualNetworkPeerings;

        /// <summary>
        /// A list of peerings in a Virtual Network.
        /// </summary>
        public InputList<Inputs.VirtualNetworkPeeringResponseGetArgs> VirtualNetworkPeerings
        {
            get => _virtualNetworkPeerings ?? (_virtualNetworkPeerings = new InputList<Inputs.VirtualNetworkPeeringResponseGetArgs>());
            set => _virtualNetworkPeerings = value;
        }

        public VirtualNetworkPropertiesFormatResponseGetArgs()
        {
        }
    }
}
