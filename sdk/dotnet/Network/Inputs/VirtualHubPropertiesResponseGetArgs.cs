// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Inputs
{

    /// <summary>
    /// Parameters for VirtualHub.
    /// </summary>
    public sealed class VirtualHubPropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address-prefix for this VirtualHub.
        /// </summary>
        [Input("addressPrefix")]
        public Input<string>? AddressPrefix { get; set; }

        /// <summary>
        /// The azureFirewall associated with this VirtualHub.
        /// </summary>
        [Input("azureFirewall")]
        public Input<Inputs.SubResourceResponseGetArgs>? AzureFirewall { get; set; }

        [Input("bgpConnections", required: true)]
        private InputList<Inputs.SubResourceResponseGetArgs>? _bgpConnections;

        /// <summary>
        /// List of references to Bgp Connections.
        /// </summary>
        public InputList<Inputs.SubResourceResponseGetArgs> BgpConnections
        {
            get => _bgpConnections ?? (_bgpConnections = new InputList<Inputs.SubResourceResponseGetArgs>());
            set => _bgpConnections = value;
        }

        /// <summary>
        /// The expressRouteGateway associated with this VirtualHub.
        /// </summary>
        [Input("expressRouteGateway")]
        public Input<Inputs.SubResourceResponseGetArgs>? ExpressRouteGateway { get; set; }

        [Input("ipConfigurations", required: true)]
        private InputList<Inputs.SubResourceResponseGetArgs>? _ipConfigurations;

        /// <summary>
        /// List of references to IpConfigurations.
        /// </summary>
        public InputList<Inputs.SubResourceResponseGetArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<Inputs.SubResourceResponseGetArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The P2SVpnGateway associated with this VirtualHub.
        /// </summary>
        [Input("p2SVpnGateway")]
        public Input<Inputs.SubResourceResponseGetArgs>? P2SVpnGateway { get; set; }

        /// <summary>
        /// The provisioning state of the virtual hub resource.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The routeTable associated with this virtual hub.
        /// </summary>
        [Input("routeTable")]
        public Input<Inputs.VirtualHubRouteTableResponseGetArgs>? RouteTable { get; set; }

        /// <summary>
        /// The routing state.
        /// </summary>
        [Input("routingState")]
        public Input<string>? RoutingState { get; set; }

        /// <summary>
        /// The securityPartnerProvider associated with this VirtualHub.
        /// </summary>
        [Input("securityPartnerProvider")]
        public Input<Inputs.SubResourceResponseGetArgs>? SecurityPartnerProvider { get; set; }

        /// <summary>
        /// The Security Provider name.
        /// </summary>
        [Input("securityProviderName")]
        public Input<string>? SecurityProviderName { get; set; }

        /// <summary>
        /// The sku of this VirtualHub.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("virtualHubRouteTableV2s")]
        private InputList<Inputs.VirtualHubRouteTableV2ResponseGetArgs>? _virtualHubRouteTableV2s;

        /// <summary>
        /// List of all virtual hub route table v2s associated with this VirtualHub.
        /// </summary>
        public InputList<Inputs.VirtualHubRouteTableV2ResponseGetArgs> VirtualHubRouteTableV2s
        {
            get => _virtualHubRouteTableV2s ?? (_virtualHubRouteTableV2s = new InputList<Inputs.VirtualHubRouteTableV2ResponseGetArgs>());
            set => _virtualHubRouteTableV2s = value;
        }

        /// <summary>
        /// VirtualRouter ASN.
        /// </summary>
        [Input("virtualRouterAsn")]
        public Input<int>? VirtualRouterAsn { get; set; }

        [Input("virtualRouterIps")]
        private InputList<string>? _virtualRouterIps;

        /// <summary>
        /// VirtualRouter IPs.
        /// </summary>
        public InputList<string> VirtualRouterIps
        {
            get => _virtualRouterIps ?? (_virtualRouterIps = new InputList<string>());
            set => _virtualRouterIps = value;
        }

        /// <summary>
        /// The VirtualWAN to which the VirtualHub belongs.
        /// </summary>
        [Input("virtualWan")]
        public Input<Inputs.SubResourceResponseGetArgs>? VirtualWan { get; set; }

        /// <summary>
        /// The VpnGateway associated with this VirtualHub.
        /// </summary>
        [Input("vpnGateway")]
        public Input<Inputs.SubResourceResponseGetArgs>? VpnGateway { get; set; }

        public VirtualHubPropertiesResponseGetArgs()
        {
        }
    }
}
