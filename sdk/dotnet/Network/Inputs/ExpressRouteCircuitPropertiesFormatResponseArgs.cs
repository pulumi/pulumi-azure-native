// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Inputs
{

    /// <summary>
    /// Properties of ExpressRouteCircuit.
    /// </summary>
    public sealed class ExpressRouteCircuitPropertiesFormatResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow classic operations.
        /// </summary>
        [Input("allowClassicOperations")]
        public Input<bool>? AllowClassicOperations { get; set; }

        [Input("authorizations")]
        private InputList<Inputs.ExpressRouteCircuitAuthorizationResponseArgs>? _authorizations;

        /// <summary>
        /// The list of authorizations.
        /// </summary>
        public InputList<Inputs.ExpressRouteCircuitAuthorizationResponseArgs> Authorizations
        {
            get => _authorizations ?? (_authorizations = new InputList<Inputs.ExpressRouteCircuitAuthorizationResponseArgs>());
            set => _authorizations = value;
        }

        /// <summary>
        /// The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
        /// </summary>
        [Input("bandwidthInGbps")]
        public Input<double>? BandwidthInGbps { get; set; }

        /// <summary>
        /// The CircuitProvisioningState state of the resource.
        /// </summary>
        [Input("circuitProvisioningState")]
        public Input<string>? CircuitProvisioningState { get; set; }

        /// <summary>
        /// The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
        /// </summary>
        [Input("expressRoutePort")]
        public Input<Inputs.SubResourceResponseArgs>? ExpressRoutePort { get; set; }

        /// <summary>
        /// The GatewayManager Etag.
        /// </summary>
        [Input("gatewayManagerEtag")]
        public Input<string>? GatewayManagerEtag { get; set; }

        /// <summary>
        /// Flag denoting global reach status.
        /// </summary>
        [Input("globalReachEnabled")]
        public Input<bool>? GlobalReachEnabled { get; set; }

        [Input("peerings")]
        private InputList<Inputs.ExpressRouteCircuitPeeringResponseArgs>? _peerings;

        /// <summary>
        /// The list of peerings.
        /// </summary>
        public InputList<Inputs.ExpressRouteCircuitPeeringResponseArgs> Peerings
        {
            get => _peerings ?? (_peerings = new InputList<Inputs.ExpressRouteCircuitPeeringResponseArgs>());
            set => _peerings = value;
        }

        /// <summary>
        /// The provisioning state of the express route circuit resource.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The ServiceKey.
        /// </summary>
        [Input("serviceKey")]
        public Input<string>? ServiceKey { get; set; }

        /// <summary>
        /// The ServiceProviderNotes.
        /// </summary>
        [Input("serviceProviderNotes")]
        public Input<string>? ServiceProviderNotes { get; set; }

        /// <summary>
        /// The ServiceProviderProperties.
        /// </summary>
        [Input("serviceProviderProperties")]
        public Input<Inputs.ExpressRouteCircuitServiceProviderPropertiesResponseArgs>? ServiceProviderProperties { get; set; }

        /// <summary>
        /// The ServiceProviderProvisioningState state of the resource.
        /// </summary>
        [Input("serviceProviderProvisioningState")]
        public Input<string>? ServiceProviderProvisioningState { get; set; }

        /// <summary>
        /// The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
        /// </summary>
        [Input("stag", required: true)]
        public Input<int> Stag { get; set; } = null!;

        public ExpressRouteCircuitPropertiesFormatResponseArgs()
        {
        }
    }
}
