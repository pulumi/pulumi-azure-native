// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Inputs
{

    /// <summary>
    /// Properties of the interface endpoint.
    /// </summary>
    public sealed class InterfaceEndpointPropertiesResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A reference to the service being brought into the virtual network.
        /// </summary>
        [Input("endpointService")]
        public Input<Inputs.EndpointServiceResponseArgs>? EndpointService { get; set; }

        /// <summary>
        /// A first-party service's FQDN that is mapped to the private IP allocated via this interface endpoint.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("networkInterfaces", required: true)]
        private InputList<Inputs.NetworkInterfaceResponseArgs>? _networkInterfaces;

        /// <summary>
        /// Gets an array of references to the network interfaces created for this interface endpoint.
        /// </summary>
        public InputList<Inputs.NetworkInterfaceResponseArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.NetworkInterfaceResponseArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// A read-only property that identifies who created this interface endpoint.
        /// </summary>
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        /// <summary>
        /// The provisioning state of the interface endpoint. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The ID of the subnet from which the private IP will be allocated.
        /// </summary>
        [Input("subnet")]
        public Input<Inputs.SubnetResponseArgs>? Subnet { get; set; }

        public InterfaceEndpointPropertiesResponseArgs()
        {
        }
    }
}
