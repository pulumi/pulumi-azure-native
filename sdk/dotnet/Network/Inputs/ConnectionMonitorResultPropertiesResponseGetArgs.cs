// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Network.Inputs
{

    /// <summary>
    /// Describes the properties of a connection monitor.
    /// </summary>
    public sealed class ConnectionMonitorResultPropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines if the connection monitor will start automatically once created.
        /// </summary>
        [Input("autoStart")]
        public Input<bool>? AutoStart { get; set; }

        /// <summary>
        /// Type of connection monitor.
        /// </summary>
        [Input("connectionMonitorType", required: true)]
        public Input<string> ConnectionMonitorType { get; set; } = null!;

        /// <summary>
        /// Describes the destination of connection monitor.
        /// </summary>
        [Input("destination")]
        public Input<Inputs.ConnectionMonitorDestinationResponseGetArgs>? Destination { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.ConnectionMonitorEndpointResponseGetArgs>? _endpoints;

        /// <summary>
        /// List of connection monitor endpoints.
        /// </summary>
        public InputList<Inputs.ConnectionMonitorEndpointResponseGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.ConnectionMonitorEndpointResponseGetArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// Monitoring interval in seconds.
        /// </summary>
        [Input("monitoringIntervalInSeconds")]
        public Input<int>? MonitoringIntervalInSeconds { get; set; }

        /// <summary>
        /// The monitoring status of the connection monitor.
        /// </summary>
        [Input("monitoringStatus", required: true)]
        public Input<string> MonitoringStatus { get; set; } = null!;

        /// <summary>
        /// Optional notes to be associated with the connection monitor.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("outputs")]
        private InputList<Inputs.ConnectionMonitorOutputResponseGetArgs>? _outputs;

        /// <summary>
        /// List of connection monitor outputs.
        /// </summary>
        public InputList<Inputs.ConnectionMonitorOutputResponseGetArgs> Outputs
        {
            get => _outputs ?? (_outputs = new InputList<Inputs.ConnectionMonitorOutputResponseGetArgs>());
            set => _outputs = value;
        }

        /// <summary>
        /// The provisioning state of the connection monitor.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// Describes the source of connection monitor.
        /// </summary>
        [Input("source")]
        public Input<Inputs.ConnectionMonitorSourceResponseGetArgs>? Source { get; set; }

        /// <summary>
        /// The date and time when the connection monitor was started.
        /// </summary>
        [Input("startTime", required: true)]
        public Input<string> StartTime { get; set; } = null!;

        [Input("testConfigurations")]
        private InputList<Inputs.ConnectionMonitorTestConfigurationResponseGetArgs>? _testConfigurations;

        /// <summary>
        /// List of connection monitor test configurations.
        /// </summary>
        public InputList<Inputs.ConnectionMonitorTestConfigurationResponseGetArgs> TestConfigurations
        {
            get => _testConfigurations ?? (_testConfigurations = new InputList<Inputs.ConnectionMonitorTestConfigurationResponseGetArgs>());
            set => _testConfigurations = value;
        }

        [Input("testGroups")]
        private InputList<Inputs.ConnectionMonitorTestGroupResponseGetArgs>? _testGroups;

        /// <summary>
        /// List of connection monitor test groups.
        /// </summary>
        public InputList<Inputs.ConnectionMonitorTestGroupResponseGetArgs> TestGroups
        {
            get => _testGroups ?? (_testGroups = new InputList<Inputs.ConnectionMonitorTestGroupResponseGetArgs>());
            set => _testGroups = value;
        }

        public ConnectionMonitorResultPropertiesResponseGetArgs()
        {
        }
    }
}
