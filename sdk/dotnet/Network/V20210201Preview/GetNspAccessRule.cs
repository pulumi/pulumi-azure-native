// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20210201Preview
{
    public static class GetNspAccessRule
    {
        /// <summary>
        /// Gets the specified NSP access rule by name.
        /// </summary>
        public static Task<GetNspAccessRuleResult> InvokeAsync(GetNspAccessRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNspAccessRuleResult>("azure-native:network/v20210201preview:getNspAccessRule", args ?? new GetNspAccessRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified NSP access rule by name.
        /// </summary>
        public static Output<GetNspAccessRuleResult> Invoke(GetNspAccessRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNspAccessRuleResult>("azure-native:network/v20210201preview:getNspAccessRule", args ?? new GetNspAccessRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNspAccessRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NSP access rule.
        /// </summary>
        [Input("accessRuleName", required: true)]
        public string AccessRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the network security perimeter.
        /// </summary>
        [Input("networkSecurityPerimeterName", required: true)]
        public string NetworkSecurityPerimeterName { get; set; } = null!;

        /// <summary>
        /// The name of the NSP profile.
        /// </summary>
        [Input("profileName", required: true)]
        public string ProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNspAccessRuleArgs()
        {
        }
        public static new GetNspAccessRuleArgs Empty => new GetNspAccessRuleArgs();
    }

    public sealed class GetNspAccessRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NSP access rule.
        /// </summary>
        [Input("accessRuleName", required: true)]
        public Input<string> AccessRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the network security perimeter.
        /// </summary>
        [Input("networkSecurityPerimeterName", required: true)]
        public Input<string> NetworkSecurityPerimeterName { get; set; } = null!;

        /// <summary>
        /// The name of the NSP profile.
        /// </summary>
        [Input("profileName", required: true)]
        public Input<string> ProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNspAccessRuleInvokeArgs()
        {
        }
        public static new GetNspAccessRuleInvokeArgs Empty => new GetNspAccessRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetNspAccessRuleResult
    {
        /// <summary>
        /// Inbound address prefixes (IPv4/IPv6)
        /// </summary>
        public readonly ImmutableArray<string> AddressPrefixes;
        /// <summary>
        /// Direction that specifies whether the access rules is inbound/outbound.
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// Outbound rules email address format.
        /// </summary>
        public readonly ImmutableArray<string> EmailAddresses;
        /// <summary>
        /// Outbound rules fully qualified domain name format.
        /// </summary>
        public readonly ImmutableArray<string> FullyQualifiedDomainNames;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Inbound rule specified by the perimeter id.
        /// </summary>
        public readonly ImmutableArray<Outputs.PerimeterBasedAccessRuleResponse> NetworkSecurityPerimeters;
        /// <summary>
        /// Outbound rules phone number format.
        /// </summary>
        public readonly ImmutableArray<string> PhoneNumbers;
        /// <summary>
        /// The provisioning state of the scope assignment resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// List of subscription ids
        /// </summary>
        public readonly ImmutableArray<Outputs.SubscriptionIdResponse> Subscriptions;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNspAccessRuleResult(
            ImmutableArray<string> addressPrefixes,

            string? direction,

            ImmutableArray<string> emailAddresses,

            ImmutableArray<string> fullyQualifiedDomainNames,

            string id,

            string? location,

            string name,

            ImmutableArray<Outputs.PerimeterBasedAccessRuleResponse> networkSecurityPerimeters,

            ImmutableArray<string> phoneNumbers,

            string provisioningState,

            ImmutableArray<Outputs.SubscriptionIdResponse> subscriptions,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AddressPrefixes = addressPrefixes;
            Direction = direction;
            EmailAddresses = emailAddresses;
            FullyQualifiedDomainNames = fullyQualifiedDomainNames;
            Id = id;
            Location = location;
            Name = name;
            NetworkSecurityPerimeters = networkSecurityPerimeters;
            PhoneNumbers = phoneNumbers;
            ProvisioningState = provisioningState;
            Subscriptions = subscriptions;
            Tags = tags;
            Type = type;
        }
    }
}
