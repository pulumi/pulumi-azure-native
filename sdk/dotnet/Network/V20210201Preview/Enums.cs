// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20210201Preview
{
    /// <summary>
    /// Whether the rule is custom or default.
    /// </summary>
    [EnumType]
    public readonly struct AdminRuleKind : IEquatable<AdminRuleKind>
    {
        private readonly string _value;

        private AdminRuleKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdminRuleKind Custom { get; } = new AdminRuleKind("Custom");
        public static AdminRuleKind Default { get; } = new AdminRuleKind("Default");

        public static bool operator ==(AdminRuleKind left, AdminRuleKind right) => left.Equals(right);
        public static bool operator !=(AdminRuleKind left, AdminRuleKind right) => !left.Equals(right);

        public static explicit operator string(AdminRuleKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdminRuleKind other && Equals(other);
        public bool Equals(AdminRuleKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration Deployment Type.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType AdminSecurity { get; } = new ConfigurationType("AdminSecurity");
        public static ConfigurationType UserSecurity { get; } = new ConfigurationType("UserSecurity");
        public static ConfigurationType Connectivity { get; } = new ConfigurationType("Connectivity");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Connectivity topology type.
    /// </summary>
    [EnumType]
    public readonly struct ConnectivityTopology : IEquatable<ConnectivityTopology>
    {
        private readonly string _value;

        private ConnectivityTopology(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectivityTopology HubAndSpoke { get; } = new ConnectivityTopology("HubAndSpoke");
        public static ConnectivityTopology Mesh { get; } = new ConnectivityTopology("Mesh");

        public static bool operator ==(ConnectivityTopology left, ConnectivityTopology right) => left.Equals(right);
        public static bool operator !=(ConnectivityTopology left, ConnectivityTopology right) => !left.Equals(right);

        public static explicit operator string(ConnectivityTopology value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectivityTopology other && Equals(other);
        public bool Equals(ConnectivityTopology other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag if need to delete existing network security groups.
    /// </summary>
    [EnumType]
    public readonly struct DeleteExistingNSGs : IEquatable<DeleteExistingNSGs>
    {
        private readonly string _value;

        private DeleteExistingNSGs(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeleteExistingNSGs False { get; } = new DeleteExistingNSGs("False");
        public static DeleteExistingNSGs True { get; } = new DeleteExistingNSGs("True");

        public static bool operator ==(DeleteExistingNSGs left, DeleteExistingNSGs right) => left.Equals(right);
        public static bool operator !=(DeleteExistingNSGs left, DeleteExistingNSGs right) => !left.Equals(right);

        public static explicit operator string(DeleteExistingNSGs value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeleteExistingNSGs other && Equals(other);
        public bool Equals(DeleteExistingNSGs other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag if need to remove current existing peerings.
    /// </summary>
    [EnumType]
    public readonly struct DeleteExistingPeering : IEquatable<DeleteExistingPeering>
    {
        private readonly string _value;

        private DeleteExistingPeering(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeleteExistingPeering False { get; } = new DeleteExistingPeering("False");
        public static DeleteExistingPeering True { get; } = new DeleteExistingPeering("True");

        public static bool operator ==(DeleteExistingPeering left, DeleteExistingPeering right) => left.Equals(right);
        public static bool operator !=(DeleteExistingPeering left, DeleteExistingPeering right) => !left.Equals(right);

        public static explicit operator string(DeleteExistingPeering value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeleteExistingPeering other && Equals(other);
        public bool Equals(DeleteExistingPeering other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Group connectivity type.
    /// </summary>
    [EnumType]
    public readonly struct GroupConnectivity : IEquatable<GroupConnectivity>
    {
        private readonly string _value;

        private GroupConnectivity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GroupConnectivity None { get; } = new GroupConnectivity("None");
        public static GroupConnectivity DirectlyConnected { get; } = new GroupConnectivity("DirectlyConnected");

        public static bool operator ==(GroupConnectivity left, GroupConnectivity right) => left.Equals(right);
        public static bool operator !=(GroupConnectivity left, GroupConnectivity right) => !left.Equals(right);

        public static explicit operator string(GroupConnectivity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GroupConnectivity other && Equals(other);
        public bool Equals(GroupConnectivity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag if global mesh is supported.
    /// </summary>
    [EnumType]
    public readonly struct IsGlobal : IEquatable<IsGlobal>
    {
        private readonly string _value;

        private IsGlobal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IsGlobal False { get; } = new IsGlobal("False");
        public static IsGlobal True { get; } = new IsGlobal("True");

        public static bool operator ==(IsGlobal left, IsGlobal right) => left.Equals(right);
        public static bool operator !=(IsGlobal left, IsGlobal right) => !left.Equals(right);

        public static explicit operator string(IsGlobal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IsGlobal other && Equals(other);
        public bool Equals(IsGlobal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Group member type.
    /// </summary>
    [EnumType]
    public readonly struct MemberType : IEquatable<MemberType>
    {
        private readonly string _value;

        private MemberType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MemberType VirtualNetwork { get; } = new MemberType("VirtualNetwork");
        public static MemberType Subnet { get; } = new MemberType("Subnet");

        public static bool operator ==(MemberType left, MemberType right) => left.Equals(right);
        public static bool operator !=(MemberType left, MemberType right) => !left.Equals(right);

        public static explicit operator string(MemberType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MemberType other && Equals(other);
        public bool Equals(MemberType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Security Type.
    /// </summary>
    [EnumType]
    public readonly struct SecurityType : IEquatable<SecurityType>
    {
        private readonly string _value;

        private SecurityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityType AdminPolicy { get; } = new SecurityType("AdminPolicy");
        public static SecurityType UserPolicy { get; } = new SecurityType("UserPolicy");

        public static bool operator ==(SecurityType left, SecurityType right) => left.Equals(right);
        public static bool operator !=(SecurityType left, SecurityType right) => !left.Equals(right);

        public static explicit operator string(SecurityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityType other && Equals(other);
        public bool Equals(SecurityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag if need to use hub gateway.
    /// </summary>
    [EnumType]
    public readonly struct UseHubGateway : IEquatable<UseHubGateway>
    {
        private readonly string _value;

        private UseHubGateway(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UseHubGateway False { get; } = new UseHubGateway("False");
        public static UseHubGateway True { get; } = new UseHubGateway("True");

        public static bool operator ==(UseHubGateway left, UseHubGateway right) => left.Equals(right);
        public static bool operator !=(UseHubGateway left, UseHubGateway right) => !left.Equals(right);

        public static explicit operator string(UseHubGateway value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UseHubGateway other && Equals(other);
        public bool Equals(UseHubGateway other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the rule is custom or default.
    /// </summary>
    [EnumType]
    public readonly struct UserRuleKind : IEquatable<UserRuleKind>
    {
        private readonly string _value;

        private UserRuleKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserRuleKind Custom { get; } = new UserRuleKind("Custom");
        public static UserRuleKind Default { get; } = new UserRuleKind("Default");

        public static bool operator ==(UserRuleKind left, UserRuleKind right) => left.Equals(right);
        public static bool operator !=(UserRuleKind left, UserRuleKind right) => !left.Equals(right);

        public static explicit operator string(UserRuleKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserRuleKind other && Equals(other);
        public bool Equals(UserRuleKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
