// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20220401Preview
{
    /// <summary>
    /// Address prefix type.
    /// </summary>
    [EnumType]
    public readonly struct AddressPrefixType : IEquatable<AddressPrefixType>
    {
        private readonly string _value;

        private AddressPrefixType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AddressPrefixType IPPrefix { get; } = new AddressPrefixType("IPPrefix");
        public static AddressPrefixType ServiceTag { get; } = new AddressPrefixType("ServiceTag");

        public static bool operator ==(AddressPrefixType left, AddressPrefixType right) => left.Equals(right);
        public static bool operator !=(AddressPrefixType left, AddressPrefixType right) => !left.Equals(right);

        public static explicit operator string(AddressPrefixType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressPrefixType other && Equals(other);
        public bool Equals(AddressPrefixType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The allowed type DNS record types for this profile.
    /// </summary>
    [EnumType]
    public readonly struct AllowedEndpointRecordType : IEquatable<AllowedEndpointRecordType>
    {
        private readonly string _value;

        private AllowedEndpointRecordType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllowedEndpointRecordType DomainName { get; } = new AllowedEndpointRecordType("DomainName");
        public static AllowedEndpointRecordType IPv4Address { get; } = new AllowedEndpointRecordType("IPv4Address");
        public static AllowedEndpointRecordType IPv6Address { get; } = new AllowedEndpointRecordType("IPv6Address");
        public static AllowedEndpointRecordType Any { get; } = new AllowedEndpointRecordType("Any");

        public static bool operator ==(AllowedEndpointRecordType left, AllowedEndpointRecordType right) => left.Equals(right);
        public static bool operator !=(AllowedEndpointRecordType left, AllowedEndpointRecordType right) => !left.Equals(right);

        public static explicit operator string(AllowedEndpointRecordType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowedEndpointRecordType other && Equals(other);
        public bool Equals(AllowedEndpointRecordType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If Always Serve is enabled, probing for endpoint health will be disabled and endpoints will be included in the traffic routing method.
    /// </summary>
    [EnumType]
    public readonly struct AlwaysServe : IEquatable<AlwaysServe>
    {
        private readonly string _value;

        private AlwaysServe(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlwaysServe Enabled { get; } = new AlwaysServe("Enabled");
        public static AlwaysServe Disabled { get; } = new AlwaysServe("Disabled");

        public static bool operator ==(AlwaysServe left, AlwaysServe right) => left.Equals(right);
        public static bool operator !=(AlwaysServe left, AlwaysServe right) => !left.Equals(right);

        public static explicit operator string(AlwaysServe value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlwaysServe other && Equals(other);
        public bool Equals(AlwaysServe other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag if need to delete existing network security groups.
    /// </summary>
    [EnumType]
    public readonly struct DeleteExistingNSGs : IEquatable<DeleteExistingNSGs>
    {
        private readonly string _value;

        private DeleteExistingNSGs(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeleteExistingNSGs False { get; } = new DeleteExistingNSGs("False");
        public static DeleteExistingNSGs True { get; } = new DeleteExistingNSGs("True");

        public static bool operator ==(DeleteExistingNSGs left, DeleteExistingNSGs right) => left.Equals(right);
        public static bool operator !=(DeleteExistingNSGs left, DeleteExistingNSGs right) => !left.Equals(right);

        public static explicit operator string(DeleteExistingNSGs value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeleteExistingNSGs other && Equals(other);
        public bool Equals(DeleteExistingNSGs other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The monitoring status of the endpoint.
    /// </summary>
    [EnumType]
    public readonly struct EndpointMonitorStatus : IEquatable<EndpointMonitorStatus>
    {
        private readonly string _value;

        private EndpointMonitorStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EndpointMonitorStatus CheckingEndpoint { get; } = new EndpointMonitorStatus("CheckingEndpoint");
        public static EndpointMonitorStatus Online { get; } = new EndpointMonitorStatus("Online");
        public static EndpointMonitorStatus Degraded { get; } = new EndpointMonitorStatus("Degraded");
        public static EndpointMonitorStatus Disabled { get; } = new EndpointMonitorStatus("Disabled");
        public static EndpointMonitorStatus Inactive { get; } = new EndpointMonitorStatus("Inactive");
        public static EndpointMonitorStatus Stopped { get; } = new EndpointMonitorStatus("Stopped");

        public static bool operator ==(EndpointMonitorStatus left, EndpointMonitorStatus right) => left.Equals(right);
        public static bool operator !=(EndpointMonitorStatus left, EndpointMonitorStatus right) => !left.Equals(right);

        public static explicit operator string(EndpointMonitorStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointMonitorStatus other && Equals(other);
        public bool Equals(EndpointMonitorStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
    /// </summary>
    [EnumType]
    public readonly struct EndpointStatus : IEquatable<EndpointStatus>
    {
        private readonly string _value;

        private EndpointStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EndpointStatus Enabled { get; } = new EndpointStatus("Enabled");
        public static EndpointStatus Disabled { get; } = new EndpointStatus("Disabled");

        public static bool operator ==(EndpointStatus left, EndpointStatus right) => left.Equals(right);
        public static bool operator !=(EndpointStatus left, EndpointStatus right) => !left.Equals(right);

        public static explicit operator string(EndpointStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointStatus other && Equals(other);
        public bool Equals(EndpointStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
    /// </summary>
    [EnumType]
    public readonly struct MonitorProtocol : IEquatable<MonitorProtocol>
    {
        private readonly string _value;

        private MonitorProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitorProtocol HTTP { get; } = new MonitorProtocol("HTTP");
        public static MonitorProtocol HTTPS { get; } = new MonitorProtocol("HTTPS");
        public static MonitorProtocol TCP { get; } = new MonitorProtocol("TCP");

        public static bool operator ==(MonitorProtocol left, MonitorProtocol right) => left.Equals(right);
        public static bool operator !=(MonitorProtocol left, MonitorProtocol right) => !left.Equals(right);

        public static explicit operator string(MonitorProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitorProtocol other && Equals(other);
        public bool Equals(MonitorProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The profile-level monitoring status of the Traffic Manager profile.
    /// </summary>
    [EnumType]
    public readonly struct ProfileMonitorStatus : IEquatable<ProfileMonitorStatus>
    {
        private readonly string _value;

        private ProfileMonitorStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProfileMonitorStatus CheckingEndpoints { get; } = new ProfileMonitorStatus("CheckingEndpoints");
        public static ProfileMonitorStatus Online { get; } = new ProfileMonitorStatus("Online");
        public static ProfileMonitorStatus Degraded { get; } = new ProfileMonitorStatus("Degraded");
        public static ProfileMonitorStatus Disabled { get; } = new ProfileMonitorStatus("Disabled");
        public static ProfileMonitorStatus Inactive { get; } = new ProfileMonitorStatus("Inactive");

        public static bool operator ==(ProfileMonitorStatus left, ProfileMonitorStatus right) => left.Equals(right);
        public static bool operator !=(ProfileMonitorStatus left, ProfileMonitorStatus right) => !left.Equals(right);

        public static explicit operator string(ProfileMonitorStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProfileMonitorStatus other && Equals(other);
        public bool Equals(ProfileMonitorStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the Traffic Manager profile.
    /// </summary>
    [EnumType]
    public readonly struct ProfileStatus : IEquatable<ProfileStatus>
    {
        private readonly string _value;

        private ProfileStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProfileStatus Enabled { get; } = new ProfileStatus("Enabled");
        public static ProfileStatus Disabled { get; } = new ProfileStatus("Disabled");

        public static bool operator ==(ProfileStatus left, ProfileStatus right) => left.Equals(right);
        public static bool operator !=(ProfileStatus left, ProfileStatus right) => !left.Equals(right);

        public static explicit operator string(ProfileStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProfileStatus other && Equals(other);
        public bool Equals(ProfileStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if the traffic matched against the rule in inbound or outbound.
    /// </summary>
    [EnumType]
    public readonly struct SecurityConfigurationRuleDirection : IEquatable<SecurityConfigurationRuleDirection>
    {
        private readonly string _value;

        private SecurityConfigurationRuleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityConfigurationRuleDirection Inbound { get; } = new SecurityConfigurationRuleDirection("Inbound");
        public static SecurityConfigurationRuleDirection Outbound { get; } = new SecurityConfigurationRuleDirection("Outbound");

        public static bool operator ==(SecurityConfigurationRuleDirection left, SecurityConfigurationRuleDirection right) => left.Equals(right);
        public static bool operator !=(SecurityConfigurationRuleDirection left, SecurityConfigurationRuleDirection right) => !left.Equals(right);

        public static explicit operator string(SecurityConfigurationRuleDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityConfigurationRuleDirection other && Equals(other);
        public bool Equals(SecurityConfigurationRuleDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network protocol this rule applies to.
    /// </summary>
    [EnumType]
    public readonly struct SecurityConfigurationRuleProtocol : IEquatable<SecurityConfigurationRuleProtocol>
    {
        private readonly string _value;

        private SecurityConfigurationRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityConfigurationRuleProtocol Tcp { get; } = new SecurityConfigurationRuleProtocol("Tcp");
        public static SecurityConfigurationRuleProtocol Udp { get; } = new SecurityConfigurationRuleProtocol("Udp");
        public static SecurityConfigurationRuleProtocol Icmp { get; } = new SecurityConfigurationRuleProtocol("Icmp");
        public static SecurityConfigurationRuleProtocol Esp { get; } = new SecurityConfigurationRuleProtocol("Esp");
        public static SecurityConfigurationRuleProtocol Any { get; } = new SecurityConfigurationRuleProtocol("Any");
        public static SecurityConfigurationRuleProtocol Ah { get; } = new SecurityConfigurationRuleProtocol("Ah");

        public static bool operator ==(SecurityConfigurationRuleProtocol left, SecurityConfigurationRuleProtocol right) => left.Equals(right);
        public static bool operator !=(SecurityConfigurationRuleProtocol left, SecurityConfigurationRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(SecurityConfigurationRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityConfigurationRuleProtocol other && Equals(other);
        public bool Equals(SecurityConfigurationRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The traffic routing method of the Traffic Manager profile.
    /// </summary>
    [EnumType]
    public readonly struct TrafficRoutingMethod : IEquatable<TrafficRoutingMethod>
    {
        private readonly string _value;

        private TrafficRoutingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TrafficRoutingMethod Performance { get; } = new TrafficRoutingMethod("Performance");
        public static TrafficRoutingMethod Priority { get; } = new TrafficRoutingMethod("Priority");
        public static TrafficRoutingMethod Weighted { get; } = new TrafficRoutingMethod("Weighted");
        public static TrafficRoutingMethod Geographic { get; } = new TrafficRoutingMethod("Geographic");
        public static TrafficRoutingMethod MultiValue { get; } = new TrafficRoutingMethod("MultiValue");
        public static TrafficRoutingMethod Subnet { get; } = new TrafficRoutingMethod("Subnet");

        public static bool operator ==(TrafficRoutingMethod left, TrafficRoutingMethod right) => left.Equals(right);
        public static bool operator !=(TrafficRoutingMethod left, TrafficRoutingMethod right) => !left.Equals(right);

        public static explicit operator string(TrafficRoutingMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrafficRoutingMethod other && Equals(other);
        public bool Equals(TrafficRoutingMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
    /// </summary>
    [EnumType]
    public readonly struct TrafficViewEnrollmentStatus : IEquatable<TrafficViewEnrollmentStatus>
    {
        private readonly string _value;

        private TrafficViewEnrollmentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TrafficViewEnrollmentStatus Enabled { get; } = new TrafficViewEnrollmentStatus("Enabled");
        public static TrafficViewEnrollmentStatus Disabled { get; } = new TrafficViewEnrollmentStatus("Disabled");

        public static bool operator ==(TrafficViewEnrollmentStatus left, TrafficViewEnrollmentStatus right) => left.Equals(right);
        public static bool operator !=(TrafficViewEnrollmentStatus left, TrafficViewEnrollmentStatus right) => !left.Equals(right);

        public static explicit operator string(TrafficViewEnrollmentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrafficViewEnrollmentStatus other && Equals(other);
        public bool Equals(TrafficViewEnrollmentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the rule is custom or default.
    /// </summary>
    [EnumType]
    public readonly struct UserRuleKind : IEquatable<UserRuleKind>
    {
        private readonly string _value;

        private UserRuleKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserRuleKind Custom { get; } = new UserRuleKind("Custom");
        public static UserRuleKind Default { get; } = new UserRuleKind("Default");

        public static bool operator ==(UserRuleKind left, UserRuleKind right) => left.Equals(right);
        public static bool operator !=(UserRuleKind left, UserRuleKind right) => !left.Equals(right);

        public static explicit operator string(UserRuleKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserRuleKind other && Equals(other);
        public bool Equals(UserRuleKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
