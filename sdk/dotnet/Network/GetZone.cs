// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    public static class GetZone
    {
        /// <summary>
        /// Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.
        /// Azure REST API version: 2023-07-01-preview.
        /// </summary>
        public static Task<GetZoneResult> InvokeAsync(GetZoneArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneResult>("azure-native:network:getZone", args ?? new GetZoneArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.
        /// Azure REST API version: 2023-07-01-preview.
        /// </summary>
        public static Output<GetZoneResult> Invoke(GetZoneInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneResult>("azure-native:network:getZone", args ?? new GetZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the DNS zone (without a terminating dot).
        /// </summary>
        [Input("zoneName", required: true)]
        public string ZoneName { get; set; } = null!;

        public GetZoneArgs()
        {
        }
        public static new GetZoneArgs Empty => new GetZoneArgs();
    }

    public sealed class GetZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the DNS zone (without a terminating dot).
        /// </summary>
        [Input("zoneName", required: true)]
        public Input<string> ZoneName { get; set; } = null!;

        public GetZoneInvokeArgs()
        {
        }
        public static new GetZoneInvokeArgs Empty => new GetZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneResult
    {
        /// <summary>
        /// The etag of the zone.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
        /// </summary>
        public readonly double MaxNumberOfRecordSets;
        /// <summary>
        /// The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
        /// </summary>
        public readonly double MaxNumberOfRecordsPerRecordSet;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
        /// </summary>
        public readonly ImmutableArray<string> NameServers;
        /// <summary>
        /// The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
        /// </summary>
        public readonly double NumberOfRecordSets;
        /// <summary>
        /// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> RegistrationVirtualNetworks;
        /// <summary>
        /// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> ResolutionVirtualNetworks;
        /// <summary>
        /// The list of signing keys.
        /// </summary>
        public readonly ImmutableArray<Outputs.SigningKeyResponse> SigningKeys;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The type of this DNS zone (Public or Private).
        /// </summary>
        public readonly string? ZoneType;

        [OutputConstructor]
        private GetZoneResult(
            string? etag,

            string id,

            string location,

            double maxNumberOfRecordSets,

            double maxNumberOfRecordsPerRecordSet,

            string name,

            ImmutableArray<string> nameServers,

            double numberOfRecordSets,

            ImmutableArray<Outputs.SubResourceResponse> registrationVirtualNetworks,

            ImmutableArray<Outputs.SubResourceResponse> resolutionVirtualNetworks,

            ImmutableArray<Outputs.SigningKeyResponse> signingKeys,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? zoneType)
        {
            Etag = etag;
            Id = id;
            Location = location;
            MaxNumberOfRecordSets = maxNumberOfRecordSets;
            MaxNumberOfRecordsPerRecordSet = maxNumberOfRecordsPerRecordSet;
            Name = name;
            NameServers = nameServers;
            NumberOfRecordSets = numberOfRecordSets;
            RegistrationVirtualNetworks = registrationVirtualNetworks;
            ResolutionVirtualNetworks = resolutionVirtualNetworks;
            SigningKeys = signingKeys;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            ZoneType = zoneType;
        }
    }
}
