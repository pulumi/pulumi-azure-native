// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20210801.Inputs
{

    /// <summary>
    /// VirtualNetworkGatewayConnection properties.
    /// </summary>
    public sealed class VirtualNetworkGatewayConnectionPropertiesFormatArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authorizationKey.
        /// </summary>
        [Input("authorizationKey")]
        public Input<string>? AuthorizationKey { get; set; }

        /// <summary>
        /// The connection mode for this connection.
        /// </summary>
        [Input("connectionMode")]
        public InputUnion<string, Pulumi.AzureNative.Network.V20210801.VirtualNetworkGatewayConnectionMode>? ConnectionMode { get; set; }

        /// <summary>
        /// Connection protocol used for this connection.
        /// </summary>
        [Input("connectionProtocol")]
        public InputUnion<string, Pulumi.AzureNative.Network.V20210801.VirtualNetworkGatewayConnectionProtocol>? ConnectionProtocol { get; set; }

        /// <summary>
        /// Gateway connection type.
        /// </summary>
        [Input("connectionType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Network.V20210801.VirtualNetworkGatewayConnectionType> ConnectionType { get; set; } = null!;

        /// <summary>
        /// The dead peer detection timeout of this connection in seconds.
        /// </summary>
        [Input("dpdTimeoutSeconds")]
        public Input<int>? DpdTimeoutSeconds { get; set; }

        [Input("egressNatRules")]
        private InputList<Inputs.SubResourceArgs>? _egressNatRules;

        /// <summary>
        /// List of egress NatRules.
        /// </summary>
        public InputList<Inputs.SubResourceArgs> EgressNatRules
        {
            get => _egressNatRules ?? (_egressNatRules = new InputList<Inputs.SubResourceArgs>());
            set => _egressNatRules = value;
        }

        /// <summary>
        /// EnableBgp flag.
        /// </summary>
        [Input("enableBgp")]
        public Input<bool>? EnableBgp { get; set; }

        /// <summary>
        /// Bypass ExpressRoute Gateway for data forwarding.
        /// </summary>
        [Input("expressRouteGatewayBypass")]
        public Input<bool>? ExpressRouteGatewayBypass { get; set; }

        [Input("gatewayCustomBgpIpAddresses")]
        private InputList<Inputs.GatewayCustomBgpIpAddressIpConfigurationArgs>? _gatewayCustomBgpIpAddresses;

        /// <summary>
        /// GatewayCustomBgpIpAddresses to be used for virtual network gateway Connection.
        /// </summary>
        public InputList<Inputs.GatewayCustomBgpIpAddressIpConfigurationArgs> GatewayCustomBgpIpAddresses
        {
            get => _gatewayCustomBgpIpAddresses ?? (_gatewayCustomBgpIpAddresses = new InputList<Inputs.GatewayCustomBgpIpAddressIpConfigurationArgs>());
            set => _gatewayCustomBgpIpAddresses = value;
        }

        [Input("ingressNatRules")]
        private InputList<Inputs.SubResourceArgs>? _ingressNatRules;

        /// <summary>
        /// List of ingress NatRules.
        /// </summary>
        public InputList<Inputs.SubResourceArgs> IngressNatRules
        {
            get => _ingressNatRules ?? (_ingressNatRules = new InputList<Inputs.SubResourceArgs>());
            set => _ingressNatRules = value;
        }

        [Input("ipsecPolicies")]
        private InputList<Inputs.IpsecPolicyArgs>? _ipsecPolicies;

        /// <summary>
        /// The IPSec Policies to be considered by this connection.
        /// </summary>
        public InputList<Inputs.IpsecPolicyArgs> IpsecPolicies
        {
            get => _ipsecPolicies ?? (_ipsecPolicies = new InputList<Inputs.IpsecPolicyArgs>());
            set => _ipsecPolicies = value;
        }

        /// <summary>
        /// The reference to local network gateway resource.
        /// </summary>
        [Input("localNetworkGateway2")]
        public Input<Inputs.LocalNetworkGatewayArgs>? LocalNetworkGateway2 { get; set; }

        /// <summary>
        /// The reference to peerings resource.
        /// </summary>
        [Input("peer")]
        public Input<Inputs.SubResourceArgs>? Peer { get; set; }

        /// <summary>
        /// The routing weight.
        /// </summary>
        [Input("routingWeight")]
        public Input<int>? RoutingWeight { get; set; }

        /// <summary>
        /// The IPSec shared key.
        /// </summary>
        [Input("sharedKey")]
        public Input<string>? SharedKey { get; set; }

        [Input("trafficSelectorPolicies")]
        private InputList<Inputs.TrafficSelectorPolicyArgs>? _trafficSelectorPolicies;

        /// <summary>
        /// The Traffic Selector Policies to be considered by this connection.
        /// </summary>
        public InputList<Inputs.TrafficSelectorPolicyArgs> TrafficSelectorPolicies
        {
            get => _trafficSelectorPolicies ?? (_trafficSelectorPolicies = new InputList<Inputs.TrafficSelectorPolicyArgs>());
            set => _trafficSelectorPolicies = value;
        }

        /// <summary>
        /// Use private local Azure IP for the connection.
        /// </summary>
        [Input("useLocalAzureIpAddress")]
        public Input<bool>? UseLocalAzureIpAddress { get; set; }

        /// <summary>
        /// Enable policy-based traffic selectors.
        /// </summary>
        [Input("usePolicyBasedTrafficSelectors")]
        public Input<bool>? UsePolicyBasedTrafficSelectors { get; set; }

        /// <summary>
        /// The reference to virtual network gateway resource.
        /// </summary>
        [Input("virtualNetworkGateway1", required: true)]
        public Input<Inputs.VirtualNetworkGatewayArgs> VirtualNetworkGateway1 { get; set; } = null!;

        /// <summary>
        /// The reference to virtual network gateway resource.
        /// </summary>
        [Input("virtualNetworkGateway2")]
        public Input<Inputs.VirtualNetworkGatewayArgs>? VirtualNetworkGateway2 { get; set; }

        public VirtualNetworkGatewayConnectionPropertiesFormatArgs()
        {
        }
        public static new VirtualNetworkGatewayConnectionPropertiesFormatArgs Empty => new VirtualNetworkGatewayConnectionPropertiesFormatArgs();
    }
}
