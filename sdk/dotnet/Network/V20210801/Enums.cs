// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20210801
{
    /// <summary>
    /// The operation mode for Threat Intelligence.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallThreatIntelMode : IEquatable<AzureFirewallThreatIntelMode>
    {
        private readonly string _value;

        private AzureFirewallThreatIntelMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallThreatIntelMode Alert { get; } = new AzureFirewallThreatIntelMode("Alert");
        public static AzureFirewallThreatIntelMode Deny { get; } = new AzureFirewallThreatIntelMode("Deny");
        public static AzureFirewallThreatIntelMode Off { get; } = new AzureFirewallThreatIntelMode("Off");

        public static bool operator ==(AzureFirewallThreatIntelMode left, AzureFirewallThreatIntelMode right) => left.Equals(right);
        public static bool operator !=(AzureFirewallThreatIntelMode left, AzureFirewallThreatIntelMode right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallThreatIntelMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallThreatIntelMode other && Equals(other);
        public bool Equals(AzureFirewallThreatIntelMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if results should be in ascending/descending order
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyIDPSQuerySortOrder : IEquatable<FirewallPolicyIDPSQuerySortOrder>
    {
        private readonly string _value;

        private FirewallPolicyIDPSQuerySortOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyIDPSQuerySortOrder Ascending { get; } = new FirewallPolicyIDPSQuerySortOrder("Ascending");
        public static FirewallPolicyIDPSQuerySortOrder Descending { get; } = new FirewallPolicyIDPSQuerySortOrder("Descending");

        public static bool operator ==(FirewallPolicyIDPSQuerySortOrder left, FirewallPolicyIDPSQuerySortOrder right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyIDPSQuerySortOrder left, FirewallPolicyIDPSQuerySortOrder right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyIDPSQuerySortOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyIDPSQuerySortOrder other && Equals(other);
        public bool Equals(FirewallPolicyIDPSQuerySortOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rule bypass protocol.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyIntrusionDetectionProtocol : IEquatable<FirewallPolicyIntrusionDetectionProtocol>
    {
        private readonly string _value;

        private FirewallPolicyIntrusionDetectionProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyIntrusionDetectionProtocol TCP { get; } = new FirewallPolicyIntrusionDetectionProtocol("TCP");
        public static FirewallPolicyIntrusionDetectionProtocol UDP { get; } = new FirewallPolicyIntrusionDetectionProtocol("UDP");
        public static FirewallPolicyIntrusionDetectionProtocol ICMP { get; } = new FirewallPolicyIntrusionDetectionProtocol("ICMP");
        public static FirewallPolicyIntrusionDetectionProtocol ANY { get; } = new FirewallPolicyIntrusionDetectionProtocol("ANY");

        public static bool operator ==(FirewallPolicyIntrusionDetectionProtocol left, FirewallPolicyIntrusionDetectionProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyIntrusionDetectionProtocol left, FirewallPolicyIntrusionDetectionProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyIntrusionDetectionProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyIntrusionDetectionProtocol other && Equals(other);
        public bool Equals(FirewallPolicyIntrusionDetectionProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Intrusion detection general state.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyIntrusionDetectionStateType : IEquatable<FirewallPolicyIntrusionDetectionStateType>
    {
        private readonly string _value;

        private FirewallPolicyIntrusionDetectionStateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyIntrusionDetectionStateType Off { get; } = new FirewallPolicyIntrusionDetectionStateType("Off");
        public static FirewallPolicyIntrusionDetectionStateType Alert { get; } = new FirewallPolicyIntrusionDetectionStateType("Alert");
        public static FirewallPolicyIntrusionDetectionStateType Deny { get; } = new FirewallPolicyIntrusionDetectionStateType("Deny");

        public static bool operator ==(FirewallPolicyIntrusionDetectionStateType left, FirewallPolicyIntrusionDetectionStateType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyIntrusionDetectionStateType left, FirewallPolicyIntrusionDetectionStateType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyIntrusionDetectionStateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyIntrusionDetectionStateType other && Equals(other);
        public bool Equals(FirewallPolicyIntrusionDetectionStateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of Firewall Policy.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicySkuTier : IEquatable<FirewallPolicySkuTier>
    {
        private readonly string _value;

        private FirewallPolicySkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicySkuTier Standard { get; } = new FirewallPolicySkuTier("Standard");
        public static FirewallPolicySkuTier Premium { get; } = new FirewallPolicySkuTier("Premium");
        public static FirewallPolicySkuTier Basic { get; } = new FirewallPolicySkuTier("Basic");

        public static bool operator ==(FirewallPolicySkuTier left, FirewallPolicySkuTier right) => left.Equals(right);
        public static bool operator !=(FirewallPolicySkuTier left, FirewallPolicySkuTier right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicySkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicySkuTier other && Equals(other);
        public bool Equals(FirewallPolicySkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned, UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
