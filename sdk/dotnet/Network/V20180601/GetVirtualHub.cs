// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20180601
{
    public static class GetVirtualHub
    {
        /// <summary>
        /// Retrieves the details of a VirtualHub.
        /// </summary>
        public static Task<GetVirtualHubResult> InvokeAsync(GetVirtualHubArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualHubResult>("azure-native:network/v20180601:getVirtualHub", args ?? new GetVirtualHubArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the details of a VirtualHub.
        /// </summary>
        public static Output<GetVirtualHubResult> Invoke(GetVirtualHubInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualHubResult>("azure-native:network/v20180601:getVirtualHub", args ?? new GetVirtualHubInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualHubArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource group name of the VirtualHub.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VirtualHub.
        /// </summary>
        [Input("virtualHubName", required: true)]
        public string VirtualHubName { get; set; } = null!;

        public GetVirtualHubArgs()
        {
        }
        public static new GetVirtualHubArgs Empty => new GetVirtualHubArgs();
    }

    public sealed class GetVirtualHubInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource group name of the VirtualHub.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VirtualHub.
        /// </summary>
        [Input("virtualHubName", required: true)]
        public Input<string> VirtualHubName { get; set; } = null!;

        public GetVirtualHubInvokeArgs()
        {
        }
        public static new GetVirtualHubInvokeArgs Empty => new GetVirtualHubInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualHubResult
    {
        /// <summary>
        /// Address-prefix for this VirtualHub.
        /// </summary>
        public readonly string? AddressPrefix;
        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// list of all vnet connections with this VirtualHub.
        /// </summary>
        public readonly ImmutableArray<Outputs.HubVirtualNetworkConnectionResponse> HubVirtualNetworkConnections;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The VirtualWAN to which the VirtualHub belongs
        /// </summary>
        public readonly Outputs.SubResourceResponse? VirtualWan;

        [OutputConstructor]
        private GetVirtualHubResult(
            string? addressPrefix,

            string etag,

            ImmutableArray<Outputs.HubVirtualNetworkConnectionResponse> hubVirtualNetworkConnections,

            string? id,

            string location,

            string name,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.SubResourceResponse? virtualWan)
        {
            AddressPrefix = addressPrefix;
            Etag = etag;
            HubVirtualNetworkConnections = hubVirtualNetworkConnections;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Tags = tags;
            Type = type;
            VirtualWan = virtualWan;
        }
    }
}
