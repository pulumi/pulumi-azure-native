// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20230901.Outputs
{

    /// <summary>
    /// Properties of the NetworkVirtualApplianceConnection subresource.
    /// </summary>
    [OutputType]
    public sealed class NetworkVirtualApplianceConnectionPropertiesResponse
    {
        /// <summary>
        /// Network Virtual Appliance ASN.
        /// </summary>
        public readonly double? Asn;
        /// <summary>
        /// List of bgpPeerAddresses for the NVA instances
        /// </summary>
        public readonly ImmutableArray<string> BgpPeerAddress;
        /// <summary>
        /// Enable internet security.
        /// </summary>
        public readonly bool? EnableInternetSecurity;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The provisioning state of the NetworkVirtualApplianceConnection resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The Routing Configuration indicating the associated and propagated route tables on this connection.
        /// </summary>
        public readonly Outputs.RoutingConfigurationResponse? RoutingConfiguration;
        /// <summary>
        /// Unique identifier for the connection.
        /// </summary>
        public readonly double? TunnelIdentifier;

        [OutputConstructor]
        private NetworkVirtualApplianceConnectionPropertiesResponse(
            double? asn,

            ImmutableArray<string> bgpPeerAddress,

            bool? enableInternetSecurity,

            string? name,

            string provisioningState,

            Outputs.RoutingConfigurationResponse? routingConfiguration,

            double? tunnelIdentifier)
        {
            Asn = asn;
            BgpPeerAddress = bgpPeerAddress;
            EnableInternetSecurity = enableInternetSecurity;
            Name = name;
            ProvisioningState = provisioningState;
            RoutingConfiguration = routingConfiguration;
            TunnelIdentifier = tunnelIdentifier;
        }
    }
}
