// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20190201.Outputs
{

    [OutputType]
    public sealed class ApplicationGatewayBackendHttpSettingsResponse
    {
        /// <summary>
        /// Cookie name to use for the affinity cookie.
        /// </summary>
        public readonly string? AffinityCookieName;
        /// <summary>
        /// Array of references to application gateway authentication certificates.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> AuthenticationCertificates;
        /// <summary>
        /// Connection draining of the backend http settings resource.
        /// </summary>
        public readonly Outputs.ApplicationGatewayConnectionDrainingResponse? ConnectionDraining;
        /// <summary>
        /// Cookie based affinity.
        /// </summary>
        public readonly string? CookieBasedAffinity;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Host header to be sent to the backend servers.
        /// </summary>
        public readonly string? HostName;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Name of the backend http settings that is unique within an Application Gateway.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Whether to pick host header should be picked from the host name of the backend server. Default value is false.
        /// </summary>
        public readonly bool? PickHostNameFromBackendAddress;
        /// <summary>
        /// The destination port on the backend.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Probe resource of an application gateway.
        /// </summary>
        public readonly Outputs.SubResourceResponse? Probe;
        /// <summary>
        /// Whether the probe is enabled. Default value is false.
        /// </summary>
        public readonly bool? ProbeEnabled;
        /// <summary>
        /// The protocol used to communicate with the backend.
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
        /// </summary>
        public readonly int? RequestTimeout;
        /// <summary>
        /// Array of references to application gateway trusted root certificates.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubResourceResponse> TrustedRootCertificates;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private ApplicationGatewayBackendHttpSettingsResponse(
            string? affinityCookieName,

            ImmutableArray<Outputs.SubResourceResponse> authenticationCertificates,

            Outputs.ApplicationGatewayConnectionDrainingResponse? connectionDraining,

            string? cookieBasedAffinity,

            string? etag,

            string? hostName,

            string? id,

            string? name,

            string? path,

            bool? pickHostNameFromBackendAddress,

            int? port,

            Outputs.SubResourceResponse? probe,

            bool? probeEnabled,

            string? protocol,

            string? provisioningState,

            int? requestTimeout,

            ImmutableArray<Outputs.SubResourceResponse> trustedRootCertificates,

            string? type)
        {
            AffinityCookieName = affinityCookieName;
            AuthenticationCertificates = authenticationCertificates;
            ConnectionDraining = connectionDraining;
            CookieBasedAffinity = cookieBasedAffinity;
            Etag = etag;
            HostName = hostName;
            Id = id;
            Name = name;
            Path = path;
            PickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            Port = port;
            Probe = probe;
            ProbeEnabled = probeEnabled;
            Protocol = protocol;
            ProvisioningState = provisioningState;
            RequestTimeout = requestTimeout;
            TrustedRootCertificates = trustedRootCertificates;
            Type = type;
        }
    }
}
