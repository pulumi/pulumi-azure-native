// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20180701
{
    /// <summary>
    /// The DH Groups used in IKE Phase 1 for initial SA.
    /// </summary>
    [EnumType]
    public readonly struct DhGroup : IEquatable<DhGroup>
    {
        private readonly string _value;

        private DhGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DhGroup None { get; } = new DhGroup("None");
        public static DhGroup DHGroup1 { get; } = new DhGroup("DHGroup1");
        public static DhGroup DHGroup2 { get; } = new DhGroup("DHGroup2");
        public static DhGroup DHGroup14 { get; } = new DhGroup("DHGroup14");
        public static DhGroup DHGroup2048 { get; } = new DhGroup("DHGroup2048");
        public static DhGroup ECP256 { get; } = new DhGroup("ECP256");
        public static DhGroup ECP384 { get; } = new DhGroup("ECP384");
        public static DhGroup DHGroup24 { get; } = new DhGroup("DHGroup24");

        public static bool operator ==(DhGroup left, DhGroup right) => left.Equals(right);
        public static bool operator !=(DhGroup left, DhGroup right) => !left.Equals(right);

        public static explicit operator string(DhGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DhGroup other && Equals(other);
        public bool Equals(DhGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The public IP allocation method. Possible values are: 'Static' and 'Dynamic'.
    /// </summary>
    [EnumType]
    public readonly struct IPAllocationMethod : IEquatable<IPAllocationMethod>
    {
        private readonly string _value;

        private IPAllocationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPAllocationMethod Static { get; } = new IPAllocationMethod("Static");
        public static IPAllocationMethod Dynamic { get; } = new IPAllocationMethod("Dynamic");

        public static bool operator ==(IPAllocationMethod left, IPAllocationMethod right) => left.Equals(right);
        public static bool operator !=(IPAllocationMethod left, IPAllocationMethod right) => !left.Equals(right);

        public static explicit operator string(IPAllocationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPAllocationMethod other && Equals(other);
        public bool Equals(IPAllocationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The public IP address version. Possible values are: 'IPv4' and 'IPv6'.
    /// </summary>
    [EnumType]
    public readonly struct IPVersion : IEquatable<IPVersion>
    {
        private readonly string _value;

        private IPVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPVersion IPv4 { get; } = new IPVersion("IPv4");
        public static IPVersion IPv6 { get; } = new IPVersion("IPv6");

        public static bool operator ==(IPVersion left, IPVersion right) => left.Equals(right);
        public static bool operator !=(IPVersion left, IPVersion right) => !left.Equals(right);

        public static explicit operator string(IPVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPVersion other && Equals(other);
        public bool Equals(IPVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IKE encryption algorithm (IKE phase 2).
    /// </summary>
    [EnumType]
    public readonly struct IkeEncryption : IEquatable<IkeEncryption>
    {
        private readonly string _value;

        private IkeEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IkeEncryption DES { get; } = new IkeEncryption("DES");
        public static IkeEncryption DES3 { get; } = new IkeEncryption("DES3");
        public static IkeEncryption AES128 { get; } = new IkeEncryption("AES128");
        public static IkeEncryption AES192 { get; } = new IkeEncryption("AES192");
        public static IkeEncryption AES256 { get; } = new IkeEncryption("AES256");
        public static IkeEncryption GCMAES256 { get; } = new IkeEncryption("GCMAES256");
        public static IkeEncryption GCMAES128 { get; } = new IkeEncryption("GCMAES128");

        public static bool operator ==(IkeEncryption left, IkeEncryption right) => left.Equals(right);
        public static bool operator !=(IkeEncryption left, IkeEncryption right) => !left.Equals(right);

        public static explicit operator string(IkeEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IkeEncryption other && Equals(other);
        public bool Equals(IkeEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IKE integrity algorithm (IKE phase 2).
    /// </summary>
    [EnumType]
    public readonly struct IkeIntegrity : IEquatable<IkeIntegrity>
    {
        private readonly string _value;

        private IkeIntegrity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IkeIntegrity MD5 { get; } = new IkeIntegrity("MD5");
        public static IkeIntegrity SHA1 { get; } = new IkeIntegrity("SHA1");
        public static IkeIntegrity SHA256 { get; } = new IkeIntegrity("SHA256");
        public static IkeIntegrity SHA384 { get; } = new IkeIntegrity("SHA384");
        public static IkeIntegrity GCMAES256 { get; } = new IkeIntegrity("GCMAES256");
        public static IkeIntegrity GCMAES128 { get; } = new IkeIntegrity("GCMAES128");

        public static bool operator ==(IkeIntegrity left, IkeIntegrity right) => left.Equals(right);
        public static bool operator !=(IkeIntegrity left, IkeIntegrity right) => !left.Equals(right);

        public static explicit operator string(IkeIntegrity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IkeIntegrity other && Equals(other);
        public bool Equals(IkeIntegrity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IPSec encryption algorithm (IKE phase 1).
    /// </summary>
    [EnumType]
    public readonly struct IpsecEncryption : IEquatable<IpsecEncryption>
    {
        private readonly string _value;

        private IpsecEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpsecEncryption None { get; } = new IpsecEncryption("None");
        public static IpsecEncryption DES { get; } = new IpsecEncryption("DES");
        public static IpsecEncryption DES3 { get; } = new IpsecEncryption("DES3");
        public static IpsecEncryption AES128 { get; } = new IpsecEncryption("AES128");
        public static IpsecEncryption AES192 { get; } = new IpsecEncryption("AES192");
        public static IpsecEncryption AES256 { get; } = new IpsecEncryption("AES256");
        public static IpsecEncryption GCMAES128 { get; } = new IpsecEncryption("GCMAES128");
        public static IpsecEncryption GCMAES192 { get; } = new IpsecEncryption("GCMAES192");
        public static IpsecEncryption GCMAES256 { get; } = new IpsecEncryption("GCMAES256");

        public static bool operator ==(IpsecEncryption left, IpsecEncryption right) => left.Equals(right);
        public static bool operator !=(IpsecEncryption left, IpsecEncryption right) => !left.Equals(right);

        public static explicit operator string(IpsecEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpsecEncryption other && Equals(other);
        public bool Equals(IpsecEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IPSec integrity algorithm (IKE phase 1).
    /// </summary>
    [EnumType]
    public readonly struct IpsecIntegrity : IEquatable<IpsecIntegrity>
    {
        private readonly string _value;

        private IpsecIntegrity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpsecIntegrity MD5 { get; } = new IpsecIntegrity("MD5");
        public static IpsecIntegrity SHA1 { get; } = new IpsecIntegrity("SHA1");
        public static IpsecIntegrity SHA256 { get; } = new IpsecIntegrity("SHA256");
        public static IpsecIntegrity GCMAES128 { get; } = new IpsecIntegrity("GCMAES128");
        public static IpsecIntegrity GCMAES192 { get; } = new IpsecIntegrity("GCMAES192");
        public static IpsecIntegrity GCMAES256 { get; } = new IpsecIntegrity("GCMAES256");

        public static bool operator ==(IpsecIntegrity left, IpsecIntegrity right) => left.Equals(right);
        public static bool operator !=(IpsecIntegrity left, IpsecIntegrity right) => !left.Equals(right);

        public static explicit operator string(IpsecIntegrity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpsecIntegrity other && Equals(other);
        public bool Equals(IpsecIntegrity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Pfs Groups used in IKE Phase 2 for new child SA.
    /// </summary>
    [EnumType]
    public readonly struct PfsGroup : IEquatable<PfsGroup>
    {
        private readonly string _value;

        private PfsGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PfsGroup None { get; } = new PfsGroup("None");
        public static PfsGroup PFS1 { get; } = new PfsGroup("PFS1");
        public static PfsGroup PFS2 { get; } = new PfsGroup("PFS2");
        public static PfsGroup PFS2048 { get; } = new PfsGroup("PFS2048");
        public static PfsGroup ECP256 { get; } = new PfsGroup("ECP256");
        public static PfsGroup ECP384 { get; } = new PfsGroup("ECP384");
        public static PfsGroup PFS24 { get; } = new PfsGroup("PFS24");
        public static PfsGroup PFS14 { get; } = new PfsGroup("PFS14");
        public static PfsGroup PFSMM { get; } = new PfsGroup("PFSMM");

        public static bool operator ==(PfsGroup left, PfsGroup right) => left.Equals(right);
        public static bool operator !=(PfsGroup left, PfsGroup right) => !left.Equals(right);

        public static explicit operator string(PfsGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PfsGroup other && Equals(other);
        public bool Equals(PfsGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of a public IP address SKU.
    /// </summary>
    [EnumType]
    public readonly struct PublicIPAddressSkuName : IEquatable<PublicIPAddressSkuName>
    {
        private readonly string _value;

        private PublicIPAddressSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicIPAddressSkuName Basic { get; } = new PublicIPAddressSkuName("Basic");
        public static PublicIPAddressSkuName Standard { get; } = new PublicIPAddressSkuName("Standard");

        public static bool operator ==(PublicIPAddressSkuName left, PublicIPAddressSkuName right) => left.Equals(right);
        public static bool operator !=(PublicIPAddressSkuName left, PublicIPAddressSkuName right) => !left.Equals(right);

        public static explicit operator string(PublicIPAddressSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicIPAddressSkuName other && Equals(other);
        public bool Equals(PublicIPAddressSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'
    /// </summary>
    [EnumType]
    public readonly struct RouteNextHopType : IEquatable<RouteNextHopType>
    {
        private readonly string _value;

        private RouteNextHopType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RouteNextHopType VirtualNetworkGateway { get; } = new RouteNextHopType("VirtualNetworkGateway");
        public static RouteNextHopType VnetLocal { get; } = new RouteNextHopType("VnetLocal");
        public static RouteNextHopType Internet { get; } = new RouteNextHopType("Internet");
        public static RouteNextHopType VirtualAppliance { get; } = new RouteNextHopType("VirtualAppliance");
        public static RouteNextHopType None { get; } = new RouteNextHopType("None");

        public static bool operator ==(RouteNextHopType left, RouteNextHopType right) => left.Equals(right);
        public static bool operator !=(RouteNextHopType left, RouteNextHopType right) => !left.Equals(right);

        public static explicit operator string(RouteNextHopType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RouteNextHopType other && Equals(other);
        public bool Equals(RouteNextHopType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleAccess : IEquatable<SecurityRuleAccess>
    {
        private readonly string _value;

        private SecurityRuleAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityRuleAccess Allow { get; } = new SecurityRuleAccess("Allow");
        public static SecurityRuleAccess Deny { get; } = new SecurityRuleAccess("Deny");

        public static bool operator ==(SecurityRuleAccess left, SecurityRuleAccess right) => left.Equals(right);
        public static bool operator !=(SecurityRuleAccess left, SecurityRuleAccess right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleAccess other && Equals(other);
        public bool Equals(SecurityRuleAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleDirection : IEquatable<SecurityRuleDirection>
    {
        private readonly string _value;

        private SecurityRuleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityRuleDirection Inbound { get; } = new SecurityRuleDirection("Inbound");
        public static SecurityRuleDirection Outbound { get; } = new SecurityRuleDirection("Outbound");

        public static bool operator ==(SecurityRuleDirection left, SecurityRuleDirection right) => left.Equals(right);
        public static bool operator !=(SecurityRuleDirection left, SecurityRuleDirection right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleDirection other && Equals(other);
        public bool Equals(SecurityRuleDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleProtocol : IEquatable<SecurityRuleProtocol>
    {
        private readonly string _value;

        private SecurityRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityRuleProtocol Tcp { get; } = new SecurityRuleProtocol("Tcp");
        public static SecurityRuleProtocol Udp { get; } = new SecurityRuleProtocol("Udp");
        public static SecurityRuleProtocol Asterisk { get; } = new SecurityRuleProtocol("*");

        public static bool operator ==(SecurityRuleProtocol left, SecurityRuleProtocol right) => left.Equals(right);
        public static bool operator !=(SecurityRuleProtocol left, SecurityRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleProtocol other && Equals(other);
        public bool Equals(SecurityRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or 'All'.
    /// </summary>
    [EnumType]
    public readonly struct TransportProtocol : IEquatable<TransportProtocol>
    {
        private readonly string _value;

        private TransportProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransportProtocol Udp { get; } = new TransportProtocol("Udp");
        public static TransportProtocol Tcp { get; } = new TransportProtocol("Tcp");
        public static TransportProtocol All { get; } = new TransportProtocol("All");

        public static bool operator ==(TransportProtocol left, TransportProtocol right) => left.Equals(right);
        public static bool operator !=(TransportProtocol left, TransportProtocol right) => !left.Equals(right);

        public static explicit operator string(TransportProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransportProtocol other && Equals(other);
        public bool Equals(TransportProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
