// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20240301
{
    /// <summary>
    /// Address prefix type.
    /// </summary>
    [EnumType]
    public readonly struct AddressPrefixType : IEquatable<AddressPrefixType>
    {
        private readonly string _value;

        private AddressPrefixType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AddressPrefixType IPPrefix { get; } = new AddressPrefixType("IPPrefix");
        public static AddressPrefixType ServiceTag { get; } = new AddressPrefixType("ServiceTag");

        public static bool operator ==(AddressPrefixType left, AddressPrefixType right) => left.Equals(right);
        public static bool operator !=(AddressPrefixType left, AddressPrefixType right) => !left.Equals(right);

        public static explicit operator string(AddressPrefixType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressPrefixType other && Equals(other);
        public bool Equals(AddressPrefixType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration Deployment Type.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType SecurityAdmin { get; } = new ConfigurationType("SecurityAdmin");
        public static ConfigurationType Connectivity { get; } = new ConfigurationType("Connectivity");
        public static ConfigurationType SecurityUser { get; } = new ConfigurationType("SecurityUser");
        public static ConfigurationType Routing { get; } = new ConfigurationType("Routing");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines whether BGP route propagation is enabled. Defaults to true.
    /// </summary>
    [EnumType]
    public readonly struct DisableBgpRoutePropagation : IEquatable<DisableBgpRoutePropagation>
    {
        private readonly string _value;

        private DisableBgpRoutePropagation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DisableBgpRoutePropagation False { get; } = new DisableBgpRoutePropagation("False");
        public static DisableBgpRoutePropagation True { get; } = new DisableBgpRoutePropagation("True");

        public static bool operator ==(DisableBgpRoutePropagation left, DisableBgpRoutePropagation right) => left.Equals(right);
        public static bool operator !=(DisableBgpRoutePropagation left, DisableBgpRoutePropagation right) => !left.Equals(right);

        public static explicit operator string(DisableBgpRoutePropagation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DisableBgpRoutePropagation other && Equals(other);
        public bool Equals(DisableBgpRoutePropagation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Destination type.
    /// </summary>
    [EnumType]
    public readonly struct RoutingRuleDestinationType : IEquatable<RoutingRuleDestinationType>
    {
        private readonly string _value;

        private RoutingRuleDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingRuleDestinationType AddressPrefix { get; } = new RoutingRuleDestinationType("AddressPrefix");
        public static RoutingRuleDestinationType ServiceTag { get; } = new RoutingRuleDestinationType("ServiceTag");

        public static bool operator ==(RoutingRuleDestinationType left, RoutingRuleDestinationType right) => left.Equals(right);
        public static bool operator !=(RoutingRuleDestinationType left, RoutingRuleDestinationType right) => !left.Equals(right);

        public static explicit operator string(RoutingRuleDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingRuleDestinationType other && Equals(other);
        public bool Equals(RoutingRuleDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Next hop type.
    /// </summary>
    [EnumType]
    public readonly struct RoutingRuleNextHopType : IEquatable<RoutingRuleNextHopType>
    {
        private readonly string _value;

        private RoutingRuleNextHopType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingRuleNextHopType Internet { get; } = new RoutingRuleNextHopType("Internet");
        public static RoutingRuleNextHopType NoNextHop { get; } = new RoutingRuleNextHopType("NoNextHop");
        public static RoutingRuleNextHopType VirtualAppliance { get; } = new RoutingRuleNextHopType("VirtualAppliance");
        public static RoutingRuleNextHopType VirtualNetworkGateway { get; } = new RoutingRuleNextHopType("VirtualNetworkGateway");
        public static RoutingRuleNextHopType VnetLocal { get; } = new RoutingRuleNextHopType("VnetLocal");

        public static bool operator ==(RoutingRuleNextHopType left, RoutingRuleNextHopType right) => left.Equals(right);
        public static bool operator !=(RoutingRuleNextHopType left, RoutingRuleNextHopType right) => !left.Equals(right);

        public static explicit operator string(RoutingRuleNextHopType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingRuleNextHopType other && Equals(other);
        public bool Equals(RoutingRuleNextHopType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if the traffic matched against the rule in inbound or outbound.
    /// </summary>
    [EnumType]
    public readonly struct SecurityConfigurationRuleDirection : IEquatable<SecurityConfigurationRuleDirection>
    {
        private readonly string _value;

        private SecurityConfigurationRuleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityConfigurationRuleDirection Inbound { get; } = new SecurityConfigurationRuleDirection("Inbound");
        public static SecurityConfigurationRuleDirection Outbound { get; } = new SecurityConfigurationRuleDirection("Outbound");

        public static bool operator ==(SecurityConfigurationRuleDirection left, SecurityConfigurationRuleDirection right) => left.Equals(right);
        public static bool operator !=(SecurityConfigurationRuleDirection left, SecurityConfigurationRuleDirection right) => !left.Equals(right);

        public static explicit operator string(SecurityConfigurationRuleDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityConfigurationRuleDirection other && Equals(other);
        public bool Equals(SecurityConfigurationRuleDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network protocol this rule applies to.
    /// </summary>
    [EnumType]
    public readonly struct SecurityConfigurationRuleProtocol : IEquatable<SecurityConfigurationRuleProtocol>
    {
        private readonly string _value;

        private SecurityConfigurationRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityConfigurationRuleProtocol Tcp { get; } = new SecurityConfigurationRuleProtocol("Tcp");
        public static SecurityConfigurationRuleProtocol Udp { get; } = new SecurityConfigurationRuleProtocol("Udp");
        public static SecurityConfigurationRuleProtocol Icmp { get; } = new SecurityConfigurationRuleProtocol("Icmp");
        public static SecurityConfigurationRuleProtocol Esp { get; } = new SecurityConfigurationRuleProtocol("Esp");
        public static SecurityConfigurationRuleProtocol Any { get; } = new SecurityConfigurationRuleProtocol("Any");
        public static SecurityConfigurationRuleProtocol Ah { get; } = new SecurityConfigurationRuleProtocol("Ah");

        public static bool operator ==(SecurityConfigurationRuleProtocol left, SecurityConfigurationRuleProtocol right) => left.Equals(right);
        public static bool operator !=(SecurityConfigurationRuleProtocol left, SecurityConfigurationRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(SecurityConfigurationRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityConfigurationRuleProtocol other && Equals(other);
        public bool Equals(SecurityConfigurationRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
