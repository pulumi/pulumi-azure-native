// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20240301
{
    public static class GetFirewallPolicyDraft
    {
        /// <summary>
        /// Get a draft Firewall Policy.
        /// </summary>
        public static Task<GetFirewallPolicyDraftResult> InvokeAsync(GetFirewallPolicyDraftArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallPolicyDraftResult>("azure-native:network/v20240301:getFirewallPolicyDraft", args ?? new GetFirewallPolicyDraftArgs(), options.WithDefaults());

        /// <summary>
        /// Get a draft Firewall Policy.
        /// </summary>
        public static Output<GetFirewallPolicyDraftResult> Invoke(GetFirewallPolicyDraftInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallPolicyDraftResult>("azure-native:network/v20240301:getFirewallPolicyDraft", args ?? new GetFirewallPolicyDraftInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallPolicyDraftArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Firewall Policy.
        /// </summary>
        [Input("firewallPolicyName", required: true)]
        public string FirewallPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetFirewallPolicyDraftArgs()
        {
        }
        public static new GetFirewallPolicyDraftArgs Empty => new GetFirewallPolicyDraftArgs();
    }

    public sealed class GetFirewallPolicyDraftInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Firewall Policy.
        /// </summary>
        [Input("firewallPolicyName", required: true)]
        public Input<string> FirewallPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetFirewallPolicyDraftInvokeArgs()
        {
        }
        public static new GetFirewallPolicyDraftInvokeArgs Empty => new GetFirewallPolicyDraftInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallPolicyDraftResult
    {
        /// <summary>
        /// The parent firewall policy from which rules are inherited.
        /// </summary>
        public readonly Outputs.SubResourceResponse? BasePolicy;
        /// <summary>
        /// DNS Proxy Settings definition.
        /// </summary>
        public readonly Outputs.DnsSettingsResponse? DnsSettings;
        /// <summary>
        /// Explicit Proxy Settings definition.
        /// </summary>
        public readonly Outputs.ExplicitProxyResponse? ExplicitProxy;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Insights on Firewall Policy.
        /// </summary>
        public readonly Outputs.FirewallPolicyInsightsResponse? Insights;
        /// <summary>
        /// The configuration for Intrusion detection.
        /// </summary>
        public readonly Outputs.FirewallPolicyIntrusionDetectionResponse? IntrusionDetection;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The private IP addresses/IP ranges to which traffic will not be SNAT.
        /// </summary>
        public readonly Outputs.FirewallPolicySNATResponse? Snat;
        /// <summary>
        /// SQL Settings definition.
        /// </summary>
        public readonly Outputs.FirewallPolicySQLResponse? Sql;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The operation mode for Threat Intelligence.
        /// </summary>
        public readonly string? ThreatIntelMode;
        /// <summary>
        /// ThreatIntel Whitelist for Firewall Policy.
        /// </summary>
        public readonly Outputs.FirewallPolicyThreatIntelWhitelistResponse? ThreatIntelWhitelist;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetFirewallPolicyDraftResult(
            Outputs.SubResourceResponse? basePolicy,

            Outputs.DnsSettingsResponse? dnsSettings,

            Outputs.ExplicitProxyResponse? explicitProxy,

            string? id,

            Outputs.FirewallPolicyInsightsResponse? insights,

            Outputs.FirewallPolicyIntrusionDetectionResponse? intrusionDetection,

            string? location,

            string name,

            Outputs.FirewallPolicySNATResponse? snat,

            Outputs.FirewallPolicySQLResponse? sql,

            ImmutableDictionary<string, string>? tags,

            string? threatIntelMode,

            Outputs.FirewallPolicyThreatIntelWhitelistResponse? threatIntelWhitelist,

            string type)
        {
            BasePolicy = basePolicy;
            DnsSettings = dnsSettings;
            ExplicitProxy = explicitProxy;
            Id = id;
            Insights = insights;
            IntrusionDetection = intrusionDetection;
            Location = location;
            Name = name;
            Snat = snat;
            Sql = sql;
            Tags = tags;
            ThreatIntelMode = threatIntelMode;
            ThreatIntelWhitelist = threatIntelWhitelist;
            Type = type;
        }
    }
}
