// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    public static class GetForwardingRule
    {
        /// <summary>
        /// Gets properties of a forwarding rule in a DNS forwarding ruleset.
        /// Azure REST API version: 2022-07-01.
        /// 
        /// Other available API versions: 2023-07-01-preview.
        /// </summary>
        public static Task<GetForwardingRuleResult> InvokeAsync(GetForwardingRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetForwardingRuleResult>("azure-native:network:getForwardingRule", args ?? new GetForwardingRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Gets properties of a forwarding rule in a DNS forwarding ruleset.
        /// Azure REST API version: 2022-07-01.
        /// 
        /// Other available API versions: 2023-07-01-preview.
        /// </summary>
        public static Output<GetForwardingRuleResult> Invoke(GetForwardingRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetForwardingRuleResult>("azure-native:network:getForwardingRule", args ?? new GetForwardingRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetForwardingRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DNS forwarding ruleset.
        /// </summary>
        [Input("dnsForwardingRulesetName", required: true)]
        public string DnsForwardingRulesetName { get; set; } = null!;

        /// <summary>
        /// The name of the forwarding rule.
        /// </summary>
        [Input("forwardingRuleName", required: true)]
        public string ForwardingRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetForwardingRuleArgs()
        {
        }
        public static new GetForwardingRuleArgs Empty => new GetForwardingRuleArgs();
    }

    public sealed class GetForwardingRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DNS forwarding ruleset.
        /// </summary>
        [Input("dnsForwardingRulesetName", required: true)]
        public Input<string> DnsForwardingRulesetName { get; set; } = null!;

        /// <summary>
        /// The name of the forwarding rule.
        /// </summary>
        [Input("forwardingRuleName", required: true)]
        public Input<string> ForwardingRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetForwardingRuleInvokeArgs()
        {
        }
        public static new GetForwardingRuleInvokeArgs Empty => new GetForwardingRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetForwardingRuleResult
    {
        /// <summary>
        /// The domain name for the forwarding rule.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// ETag of the forwarding rule.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The state of forwarding rule.
        /// </summary>
        public readonly string? ForwardingRuleState;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Metadata attached to the forwarding rule.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Metadata;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The current provisioning state of the forwarding rule. This is a read-only property and any attempt to set this value will be ignored.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// DNS servers to forward the DNS query to.
        /// </summary>
        public readonly ImmutableArray<Outputs.TargetDnsServerResponse> TargetDnsServers;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetForwardingRuleResult(
            string domainName,

            string etag,

            string? forwardingRuleState,

            string id,

            ImmutableDictionary<string, string>? metadata,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableArray<Outputs.TargetDnsServerResponse> targetDnsServers,

            string type)
        {
            DomainName = domainName;
            Etag = etag;
            ForwardingRuleState = forwardingRuleState;
            Id = id;
            Metadata = metadata;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            TargetDnsServers = targetDnsServers;
            Type = type;
        }
    }
}
