// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Network.V20200601.Outputs
{

    [OutputType]
    public sealed class ConnectionMonitorTestConfigurationResponse
    {
        /// <summary>
        /// The parameters used to perform test evaluation over HTTP.
        /// </summary>
        public readonly Outputs.ConnectionMonitorHttpConfigurationResponse? HttpConfiguration;
        /// <summary>
        /// The parameters used to perform test evaluation over ICMP.
        /// </summary>
        public readonly Outputs.ConnectionMonitorIcmpConfigurationResponse? IcmpConfiguration;
        /// <summary>
        /// The name of the connection monitor test configuration.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
        /// </summary>
        public readonly string? PreferredIPVersion;
        /// <summary>
        /// The protocol to use in test evaluation.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The threshold for declaring a test successful.
        /// </summary>
        public readonly Outputs.ConnectionMonitorSuccessThresholdResponse? SuccessThreshold;
        /// <summary>
        /// The parameters used to perform test evaluation over TCP.
        /// </summary>
        public readonly Outputs.ConnectionMonitorTcpConfigurationResponse? TcpConfiguration;
        /// <summary>
        /// The frequency of test evaluation, in seconds.
        /// </summary>
        public readonly int? TestFrequencySec;

        [OutputConstructor]
        private ConnectionMonitorTestConfigurationResponse(
            Outputs.ConnectionMonitorHttpConfigurationResponse? httpConfiguration,

            Outputs.ConnectionMonitorIcmpConfigurationResponse? icmpConfiguration,

            string name,

            string? preferredIPVersion,

            string protocol,

            Outputs.ConnectionMonitorSuccessThresholdResponse? successThreshold,

            Outputs.ConnectionMonitorTcpConfigurationResponse? tcpConfiguration,

            int? testFrequencySec)
        {
            HttpConfiguration = httpConfiguration;
            IcmpConfiguration = icmpConfiguration;
            Name = name;
            PreferredIPVersion = preferredIPVersion;
            Protocol = protocol;
            SuccessThreshold = successThreshold;
            TcpConfiguration = tcpConfiguration;
            TestFrequencySec = testFrequencySec;
        }
    }
}
