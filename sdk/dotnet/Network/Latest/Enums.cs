// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Network.Latest
{
    /// <summary>
    /// The access type of the rule.
    /// </summary>
    [EnumType]
    public readonly struct Access : IEquatable<Access>
    {
        private readonly string _value;

        private Access(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Access Allow { get; } = new Access("Allow");
        public static Access Deny { get; } = new Access("Deny");

        public static bool operator ==(Access left, Access right) => left.Equals(right);
        public static bool operator !=(Access left, Access right) => !left.Equals(right);

        public static explicit operator string(Access value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Access other && Equals(other);
        public bool Equals(Access other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the override action to be applied when rule matches.
    /// </summary>
    [EnumType]
    public readonly struct ActionType : IEquatable<ActionType>
    {
        private readonly string _value;

        private ActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionType Allow { get; } = new ActionType("Allow");
        public static ActionType Block { get; } = new ActionType("Block");
        public static ActionType Log { get; } = new ActionType("Log");
        public static ActionType Redirect { get; } = new ActionType("Redirect");

        public static bool operator ==(ActionType left, ActionType right) => left.Equals(right);
        public static bool operator !=(ActionType left, ActionType right) => !left.Equals(right);

        public static explicit operator string(ActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionType other && Equals(other);
        public bool Equals(ActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Cookie based affinity.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewayCookieBasedAffinity : IEquatable<ApplicationGatewayCookieBasedAffinity>
    {
        private readonly string _value;

        private ApplicationGatewayCookieBasedAffinity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewayCookieBasedAffinity Enabled { get; } = new ApplicationGatewayCookieBasedAffinity("Enabled");
        public static ApplicationGatewayCookieBasedAffinity Disabled { get; } = new ApplicationGatewayCookieBasedAffinity("Disabled");

        public static bool operator ==(ApplicationGatewayCookieBasedAffinity left, ApplicationGatewayCookieBasedAffinity right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewayCookieBasedAffinity left, ApplicationGatewayCookieBasedAffinity right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewayCookieBasedAffinity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewayCookieBasedAffinity other && Equals(other);
        public bool Equals(ApplicationGatewayCookieBasedAffinity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status code of the application gateway customer error.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewayCustomErrorStatusCode : IEquatable<ApplicationGatewayCustomErrorStatusCode>
    {
        private readonly string _value;

        private ApplicationGatewayCustomErrorStatusCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewayCustomErrorStatusCode HttpStatus403 { get; } = new ApplicationGatewayCustomErrorStatusCode("HttpStatus403");
        public static ApplicationGatewayCustomErrorStatusCode HttpStatus502 { get; } = new ApplicationGatewayCustomErrorStatusCode("HttpStatus502");

        public static bool operator ==(ApplicationGatewayCustomErrorStatusCode left, ApplicationGatewayCustomErrorStatusCode right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewayCustomErrorStatusCode left, ApplicationGatewayCustomErrorStatusCode right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewayCustomErrorStatusCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewayCustomErrorStatusCode other && Equals(other);
        public bool Equals(ApplicationGatewayCustomErrorStatusCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Web application firewall mode.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewayFirewallMode : IEquatable<ApplicationGatewayFirewallMode>
    {
        private readonly string _value;

        private ApplicationGatewayFirewallMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewayFirewallMode Detection { get; } = new ApplicationGatewayFirewallMode("Detection");
        public static ApplicationGatewayFirewallMode Prevention { get; } = new ApplicationGatewayFirewallMode("Prevention");

        public static bool operator ==(ApplicationGatewayFirewallMode left, ApplicationGatewayFirewallMode right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewayFirewallMode left, ApplicationGatewayFirewallMode right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewayFirewallMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewayFirewallMode other && Equals(other);
        public bool Equals(ApplicationGatewayFirewallMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol used for the probe.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewayProtocol : IEquatable<ApplicationGatewayProtocol>
    {
        private readonly string _value;

        private ApplicationGatewayProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewayProtocol Http { get; } = new ApplicationGatewayProtocol("Http");
        public static ApplicationGatewayProtocol Https { get; } = new ApplicationGatewayProtocol("Https");

        public static bool operator ==(ApplicationGatewayProtocol left, ApplicationGatewayProtocol right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewayProtocol left, ApplicationGatewayProtocol right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewayProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewayProtocol other && Equals(other);
        public bool Equals(ApplicationGatewayProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// HTTP redirection type.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewayRedirectType : IEquatable<ApplicationGatewayRedirectType>
    {
        private readonly string _value;

        private ApplicationGatewayRedirectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewayRedirectType Permanent { get; } = new ApplicationGatewayRedirectType("Permanent");
        public static ApplicationGatewayRedirectType Found { get; } = new ApplicationGatewayRedirectType("Found");
        public static ApplicationGatewayRedirectType SeeOther { get; } = new ApplicationGatewayRedirectType("SeeOther");
        public static ApplicationGatewayRedirectType Temporary { get; } = new ApplicationGatewayRedirectType("Temporary");

        public static bool operator ==(ApplicationGatewayRedirectType left, ApplicationGatewayRedirectType right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewayRedirectType left, ApplicationGatewayRedirectType right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewayRedirectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewayRedirectType other && Equals(other);
        public bool Equals(ApplicationGatewayRedirectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rule type.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewayRequestRoutingRuleType : IEquatable<ApplicationGatewayRequestRoutingRuleType>
    {
        private readonly string _value;

        private ApplicationGatewayRequestRoutingRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewayRequestRoutingRuleType Basic { get; } = new ApplicationGatewayRequestRoutingRuleType("Basic");
        public static ApplicationGatewayRequestRoutingRuleType PathBasedRouting { get; } = new ApplicationGatewayRequestRoutingRuleType("PathBasedRouting");

        public static bool operator ==(ApplicationGatewayRequestRoutingRuleType left, ApplicationGatewayRequestRoutingRuleType right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewayRequestRoutingRuleType left, ApplicationGatewayRequestRoutingRuleType right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewayRequestRoutingRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewayRequestRoutingRuleType other && Equals(other);
        public bool Equals(ApplicationGatewayRequestRoutingRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of an application gateway SKU.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewaySkuName : IEquatable<ApplicationGatewaySkuName>
    {
        private readonly string _value;

        private ApplicationGatewaySkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewaySkuName Standard_Small { get; } = new ApplicationGatewaySkuName("Standard_Small");
        public static ApplicationGatewaySkuName Standard_Medium { get; } = new ApplicationGatewaySkuName("Standard_Medium");
        public static ApplicationGatewaySkuName Standard_Large { get; } = new ApplicationGatewaySkuName("Standard_Large");
        public static ApplicationGatewaySkuName WAF_Medium { get; } = new ApplicationGatewaySkuName("WAF_Medium");
        public static ApplicationGatewaySkuName WAF_Large { get; } = new ApplicationGatewaySkuName("WAF_Large");
        public static ApplicationGatewaySkuName Standard_v2 { get; } = new ApplicationGatewaySkuName("Standard_v2");
        public static ApplicationGatewaySkuName WAF_v2 { get; } = new ApplicationGatewaySkuName("WAF_v2");

        public static bool operator ==(ApplicationGatewaySkuName left, ApplicationGatewaySkuName right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewaySkuName left, ApplicationGatewaySkuName right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewaySkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewaySkuName other && Equals(other);
        public bool Equals(ApplicationGatewaySkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ssl cipher suites enums.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewaySslCipherSuite : IEquatable<ApplicationGatewaySslCipherSuite>
    {
        private readonly string _value;

        private ApplicationGatewaySslCipherSuite(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_RSA_WITH_AES_256_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_RSA_WITH_AES_128_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 { get; } = new ApplicationGatewaySslCipherSuite("TLS_RSA_WITH_AES_256_GCM_SHA384");
        public static ApplicationGatewaySslCipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_RSA_WITH_AES_128_GCM_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_RSA_WITH_AES_256_CBC_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_RSA_WITH_AES_128_CBC_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_RSA_WITH_AES_256_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_RSA_WITH_AES_256_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_RSA_WITH_AES_128_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_RSA_WITH_AES_128_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_DSS_WITH_AES_256_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_DSS_WITH_AES_128_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_RSA_WITH_3DES_EDE_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA { get; } = new ApplicationGatewaySslCipherSuite("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
        public static ApplicationGatewaySslCipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 { get; } = new ApplicationGatewaySslCipherSuite("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384");

        public static bool operator ==(ApplicationGatewaySslCipherSuite left, ApplicationGatewaySslCipherSuite right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewaySslCipherSuite left, ApplicationGatewaySslCipherSuite right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewaySslCipherSuite value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewaySslCipherSuite other && Equals(other);
        public bool Equals(ApplicationGatewaySslCipherSuite other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of Ssl predefined policy.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewaySslPolicyName : IEquatable<ApplicationGatewaySslPolicyName>
    {
        private readonly string _value;

        private ApplicationGatewaySslPolicyName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewaySslPolicyName AppGwSslPolicy20150501 { get; } = new ApplicationGatewaySslPolicyName("AppGwSslPolicy20150501");
        public static ApplicationGatewaySslPolicyName AppGwSslPolicy20170401 { get; } = new ApplicationGatewaySslPolicyName("AppGwSslPolicy20170401");
        public static ApplicationGatewaySslPolicyName AppGwSslPolicy20170401S { get; } = new ApplicationGatewaySslPolicyName("AppGwSslPolicy20170401S");

        public static bool operator ==(ApplicationGatewaySslPolicyName left, ApplicationGatewaySslPolicyName right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewaySslPolicyName left, ApplicationGatewaySslPolicyName right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewaySslPolicyName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewaySslPolicyName other && Equals(other);
        public bool Equals(ApplicationGatewaySslPolicyName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Ssl Policy.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewaySslPolicyType : IEquatable<ApplicationGatewaySslPolicyType>
    {
        private readonly string _value;

        private ApplicationGatewaySslPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewaySslPolicyType Predefined { get; } = new ApplicationGatewaySslPolicyType("Predefined");
        public static ApplicationGatewaySslPolicyType Custom { get; } = new ApplicationGatewaySslPolicyType("Custom");

        public static bool operator ==(ApplicationGatewaySslPolicyType left, ApplicationGatewaySslPolicyType right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewaySslPolicyType left, ApplicationGatewaySslPolicyType right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewaySslPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewaySslPolicyType other && Equals(other);
        public bool Equals(ApplicationGatewaySslPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Minimum version of Ssl protocol to be supported on application gateway.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewaySslProtocol : IEquatable<ApplicationGatewaySslProtocol>
    {
        private readonly string _value;

        private ApplicationGatewaySslProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewaySslProtocol TLSv1_0 { get; } = new ApplicationGatewaySslProtocol("TLSv1_0");
        public static ApplicationGatewaySslProtocol TLSv1_1 { get; } = new ApplicationGatewaySslProtocol("TLSv1_1");
        public static ApplicationGatewaySslProtocol TLSv1_2 { get; } = new ApplicationGatewaySslProtocol("TLSv1_2");

        public static bool operator ==(ApplicationGatewaySslProtocol left, ApplicationGatewaySslProtocol right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewaySslProtocol left, ApplicationGatewaySslProtocol right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewaySslProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewaySslProtocol other && Equals(other);
        public bool Equals(ApplicationGatewaySslProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of an application gateway.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGatewayTier : IEquatable<ApplicationGatewayTier>
    {
        private readonly string _value;

        private ApplicationGatewayTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGatewayTier Standard { get; } = new ApplicationGatewayTier("Standard");
        public static ApplicationGatewayTier WAF { get; } = new ApplicationGatewayTier("WAF");
        public static ApplicationGatewayTier Standard_v2 { get; } = new ApplicationGatewayTier("Standard_v2");
        public static ApplicationGatewayTier WAF_v2 { get; } = new ApplicationGatewayTier("WAF_v2");

        public static bool operator ==(ApplicationGatewayTier left, ApplicationGatewayTier right) => left.Equals(right);
        public static bool operator !=(ApplicationGatewayTier left, ApplicationGatewayTier right) => !left.Equals(right);

        public static explicit operator string(ApplicationGatewayTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGatewayTier other && Equals(other);
        public bool Equals(ApplicationGatewayTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authorization use status.
    /// </summary>
    [EnumType]
    public readonly struct AuthorizationUseStatus : IEquatable<AuthorizationUseStatus>
    {
        private readonly string _value;

        private AuthorizationUseStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthorizationUseStatus Available { get; } = new AuthorizationUseStatus("Available");
        public static AuthorizationUseStatus InUse { get; } = new AuthorizationUseStatus("InUse");

        public static bool operator ==(AuthorizationUseStatus left, AuthorizationUseStatus right) => left.Equals(right);
        public static bool operator !=(AuthorizationUseStatus left, AuthorizationUseStatus right) => !left.Equals(right);

        public static explicit operator string(AuthorizationUseStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthorizationUseStatus other && Equals(other);
        public bool Equals(AuthorizationUseStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol type.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallApplicationRuleProtocolType : IEquatable<AzureFirewallApplicationRuleProtocolType>
    {
        private readonly string _value;

        private AzureFirewallApplicationRuleProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallApplicationRuleProtocolType Http { get; } = new AzureFirewallApplicationRuleProtocolType("Http");
        public static AzureFirewallApplicationRuleProtocolType Https { get; } = new AzureFirewallApplicationRuleProtocolType("Https");
        public static AzureFirewallApplicationRuleProtocolType Mssql { get; } = new AzureFirewallApplicationRuleProtocolType("Mssql");

        public static bool operator ==(AzureFirewallApplicationRuleProtocolType left, AzureFirewallApplicationRuleProtocolType right) => left.Equals(right);
        public static bool operator !=(AzureFirewallApplicationRuleProtocolType left, AzureFirewallApplicationRuleProtocolType right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallApplicationRuleProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallApplicationRuleProtocolType other && Equals(other);
        public bool Equals(AzureFirewallApplicationRuleProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallNatRCActionType : IEquatable<AzureFirewallNatRCActionType>
    {
        private readonly string _value;

        private AzureFirewallNatRCActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallNatRCActionType Snat { get; } = new AzureFirewallNatRCActionType("Snat");
        public static AzureFirewallNatRCActionType Dnat { get; } = new AzureFirewallNatRCActionType("Dnat");

        public static bool operator ==(AzureFirewallNatRCActionType left, AzureFirewallNatRCActionType right) => left.Equals(right);
        public static bool operator !=(AzureFirewallNatRCActionType left, AzureFirewallNatRCActionType right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallNatRCActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallNatRCActionType other && Equals(other);
        public bool Equals(AzureFirewallNatRCActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol of a Network Rule resource.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallNetworkRuleProtocol : IEquatable<AzureFirewallNetworkRuleProtocol>
    {
        private readonly string _value;

        private AzureFirewallNetworkRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallNetworkRuleProtocol TCP { get; } = new AzureFirewallNetworkRuleProtocol("TCP");
        public static AzureFirewallNetworkRuleProtocol UDP { get; } = new AzureFirewallNetworkRuleProtocol("UDP");
        public static AzureFirewallNetworkRuleProtocol Any { get; } = new AzureFirewallNetworkRuleProtocol("Any");
        public static AzureFirewallNetworkRuleProtocol ICMP { get; } = new AzureFirewallNetworkRuleProtocol("ICMP");

        public static bool operator ==(AzureFirewallNetworkRuleProtocol left, AzureFirewallNetworkRuleProtocol right) => left.Equals(right);
        public static bool operator !=(AzureFirewallNetworkRuleProtocol left, AzureFirewallNetworkRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallNetworkRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallNetworkRuleProtocol other && Equals(other);
        public bool Equals(AzureFirewallNetworkRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallRCActionType : IEquatable<AzureFirewallRCActionType>
    {
        private readonly string _value;

        private AzureFirewallRCActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallRCActionType Allow { get; } = new AzureFirewallRCActionType("Allow");
        public static AzureFirewallRCActionType Deny { get; } = new AzureFirewallRCActionType("Deny");

        public static bool operator ==(AzureFirewallRCActionType left, AzureFirewallRCActionType right) => left.Equals(right);
        public static bool operator !=(AzureFirewallRCActionType left, AzureFirewallRCActionType right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallRCActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallRCActionType other && Equals(other);
        public bool Equals(AzureFirewallRCActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of an Azure Firewall SKU.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallSkuName : IEquatable<AzureFirewallSkuName>
    {
        private readonly string _value;

        private AzureFirewallSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallSkuName AZFW_VNet { get; } = new AzureFirewallSkuName("AZFW_VNet");
        public static AzureFirewallSkuName AZFW_Hub { get; } = new AzureFirewallSkuName("AZFW_Hub");

        public static bool operator ==(AzureFirewallSkuName left, AzureFirewallSkuName right) => left.Equals(right);
        public static bool operator !=(AzureFirewallSkuName left, AzureFirewallSkuName right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallSkuName other && Equals(other);
        public bool Equals(AzureFirewallSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of an Azure Firewall.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallSkuTier : IEquatable<AzureFirewallSkuTier>
    {
        private readonly string _value;

        private AzureFirewallSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallSkuTier Standard { get; } = new AzureFirewallSkuTier("Standard");
        public static AzureFirewallSkuTier Premium { get; } = new AzureFirewallSkuTier("Premium");

        public static bool operator ==(AzureFirewallSkuTier left, AzureFirewallSkuTier right) => left.Equals(right);
        public static bool operator !=(AzureFirewallSkuTier left, AzureFirewallSkuTier right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallSkuTier other && Equals(other);
        public bool Equals(AzureFirewallSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation mode for Threat Intelligence.
    /// </summary>
    [EnumType]
    public readonly struct AzureFirewallThreatIntelMode : IEquatable<AzureFirewallThreatIntelMode>
    {
        private readonly string _value;

        private AzureFirewallThreatIntelMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFirewallThreatIntelMode Alert { get; } = new AzureFirewallThreatIntelMode("Alert");
        public static AzureFirewallThreatIntelMode Deny { get; } = new AzureFirewallThreatIntelMode("Deny");
        public static AzureFirewallThreatIntelMode Off { get; } = new AzureFirewallThreatIntelMode("Off");

        public static bool operator ==(AzureFirewallThreatIntelMode left, AzureFirewallThreatIntelMode right) => left.Equals(right);
        public static bool operator !=(AzureFirewallThreatIntelMode left, AzureFirewallThreatIntelMode right) => !left.Equals(right);

        public static explicit operator string(AzureFirewallThreatIntelMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFirewallThreatIntelMode other && Equals(other);
        public bool Equals(AzureFirewallThreatIntelMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct BackendEnabledState : IEquatable<BackendEnabledState>
    {
        private readonly string _value;

        private BackendEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackendEnabledState Enabled { get; } = new BackendEnabledState("Enabled");
        public static BackendEnabledState Disabled { get; } = new BackendEnabledState("Disabled");

        public static bool operator ==(BackendEnabledState left, BackendEnabledState right) => left.Equals(right);
        public static bool operator !=(BackendEnabledState left, BackendEnabledState right) => !left.Equals(right);

        public static explicit operator string(BackendEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackendEnabledState other && Equals(other);
        public bool Equals(BackendEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The commissioned state of the Custom IP Prefix.
    /// </summary>
    [EnumType]
    public readonly struct CommissionedState : IEquatable<CommissionedState>
    {
        private readonly string _value;

        private CommissionedState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CommissionedState Provisioning { get; } = new CommissionedState("Provisioning");
        public static CommissionedState Provisioned { get; } = new CommissionedState("Provisioned");
        public static CommissionedState Commissioning { get; } = new CommissionedState("Commissioning");
        public static CommissionedState Commissioned { get; } = new CommissionedState("Commissioned");
        public static CommissionedState Decommissioning { get; } = new CommissionedState("Decommissioning");
        public static CommissionedState Deprovisioning { get; } = new CommissionedState("Deprovisioning");

        public static bool operator ==(CommissionedState left, CommissionedState right) => left.Equals(right);
        public static bool operator !=(CommissionedState left, CommissionedState right) => !left.Equals(right);

        public static explicit operator string(CommissionedState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CommissionedState other && Equals(other);
        public bool Equals(CommissionedState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of item included in the filter. Currently only 'AgentAddress' is supported.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionMonitorEndpointFilterItemType : IEquatable<ConnectionMonitorEndpointFilterItemType>
    {
        private readonly string _value;

        private ConnectionMonitorEndpointFilterItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionMonitorEndpointFilterItemType AgentAddress { get; } = new ConnectionMonitorEndpointFilterItemType("AgentAddress");

        public static bool operator ==(ConnectionMonitorEndpointFilterItemType left, ConnectionMonitorEndpointFilterItemType right) => left.Equals(right);
        public static bool operator !=(ConnectionMonitorEndpointFilterItemType left, ConnectionMonitorEndpointFilterItemType right) => !left.Equals(right);

        public static explicit operator string(ConnectionMonitorEndpointFilterItemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionMonitorEndpointFilterItemType other && Equals(other);
        public bool Equals(ConnectionMonitorEndpointFilterItemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The behavior of the endpoint filter. Currently only 'Include' is supported.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionMonitorEndpointFilterType : IEquatable<ConnectionMonitorEndpointFilterType>
    {
        private readonly string _value;

        private ConnectionMonitorEndpointFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionMonitorEndpointFilterType Include { get; } = new ConnectionMonitorEndpointFilterType("Include");

        public static bool operator ==(ConnectionMonitorEndpointFilterType left, ConnectionMonitorEndpointFilterType right) => left.Equals(right);
        public static bool operator !=(ConnectionMonitorEndpointFilterType left, ConnectionMonitorEndpointFilterType right) => !left.Equals(right);

        public static explicit operator string(ConnectionMonitorEndpointFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionMonitorEndpointFilterType other && Equals(other);
        public bool Equals(ConnectionMonitorEndpointFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol to use in test evaluation.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionMonitorTestConfigurationProtocol : IEquatable<ConnectionMonitorTestConfigurationProtocol>
    {
        private readonly string _value;

        private ConnectionMonitorTestConfigurationProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionMonitorTestConfigurationProtocol Tcp { get; } = new ConnectionMonitorTestConfigurationProtocol("Tcp");
        public static ConnectionMonitorTestConfigurationProtocol Http { get; } = new ConnectionMonitorTestConfigurationProtocol("Http");
        public static ConnectionMonitorTestConfigurationProtocol Icmp { get; } = new ConnectionMonitorTestConfigurationProtocol("Icmp");

        public static bool operator ==(ConnectionMonitorTestConfigurationProtocol left, ConnectionMonitorTestConfigurationProtocol right) => left.Equals(right);
        public static bool operator !=(ConnectionMonitorTestConfigurationProtocol left, ConnectionMonitorTestConfigurationProtocol right) => !left.Equals(right);

        public static explicit operator string(ConnectionMonitorTestConfigurationProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionMonitorTestConfigurationProtocol other && Equals(other);
        public bool Equals(ConnectionMonitorTestConfigurationProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Test coverage for the endpoint.
    /// </summary>
    [EnumType]
    public readonly struct CoverageLevel : IEquatable<CoverageLevel>
    {
        private readonly string _value;

        private CoverageLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CoverageLevel Default { get; } = new CoverageLevel("Default");
        public static CoverageLevel Low { get; } = new CoverageLevel("Low");
        public static CoverageLevel BelowAverage { get; } = new CoverageLevel("BelowAverage");
        public static CoverageLevel Average { get; } = new CoverageLevel("Average");
        public static CoverageLevel AboveAverage { get; } = new CoverageLevel("AboveAverage");
        public static CoverageLevel Full { get; } = new CoverageLevel("Full");

        public static bool operator ==(CoverageLevel left, CoverageLevel right) => left.Equals(right);
        public static bool operator !=(CoverageLevel left, CoverageLevel right) => !left.Equals(right);

        public static explicit operator string(CoverageLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CoverageLevel other && Equals(other);
        public bool Equals(CoverageLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
    /// </summary>
    [EnumType]
    public readonly struct CustomRuleEnabledState : IEquatable<CustomRuleEnabledState>
    {
        private readonly string _value;

        private CustomRuleEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomRuleEnabledState Disabled { get; } = new CustomRuleEnabledState("Disabled");
        public static CustomRuleEnabledState Enabled { get; } = new CustomRuleEnabledState("Enabled");

        public static bool operator ==(CustomRuleEnabledState left, CustomRuleEnabledState right) => left.Equals(right);
        public static bool operator !=(CustomRuleEnabledState left, CustomRuleEnabledState right) => !left.Equals(right);

        public static explicit operator string(CustomRuleEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomRuleEnabledState other && Equals(other);
        public bool Equals(CustomRuleEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol for which the DDoS protection policy is being customized.
    /// </summary>
    [EnumType]
    public readonly struct DdosCustomPolicyProtocol : IEquatable<DdosCustomPolicyProtocol>
    {
        private readonly string _value;

        private DdosCustomPolicyProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DdosCustomPolicyProtocol Tcp { get; } = new DdosCustomPolicyProtocol("Tcp");
        public static DdosCustomPolicyProtocol Udp { get; } = new DdosCustomPolicyProtocol("Udp");
        public static DdosCustomPolicyProtocol Syn { get; } = new DdosCustomPolicyProtocol("Syn");

        public static bool operator ==(DdosCustomPolicyProtocol left, DdosCustomPolicyProtocol right) => left.Equals(right);
        public static bool operator !=(DdosCustomPolicyProtocol left, DdosCustomPolicyProtocol right) => !left.Equals(right);

        public static explicit operator string(DdosCustomPolicyProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DdosCustomPolicyProtocol other && Equals(other);
        public bool Equals(DdosCustomPolicyProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
    /// </summary>
    [EnumType]
    public readonly struct DdosCustomPolicyTriggerSensitivityOverride : IEquatable<DdosCustomPolicyTriggerSensitivityOverride>
    {
        private readonly string _value;

        private DdosCustomPolicyTriggerSensitivityOverride(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DdosCustomPolicyTriggerSensitivityOverride Relaxed { get; } = new DdosCustomPolicyTriggerSensitivityOverride("Relaxed");
        public static DdosCustomPolicyTriggerSensitivityOverride Low { get; } = new DdosCustomPolicyTriggerSensitivityOverride("Low");
        public static DdosCustomPolicyTriggerSensitivityOverride Default { get; } = new DdosCustomPolicyTriggerSensitivityOverride("Default");
        public static DdosCustomPolicyTriggerSensitivityOverride High { get; } = new DdosCustomPolicyTriggerSensitivityOverride("High");

        public static bool operator ==(DdosCustomPolicyTriggerSensitivityOverride left, DdosCustomPolicyTriggerSensitivityOverride right) => left.Equals(right);
        public static bool operator !=(DdosCustomPolicyTriggerSensitivityOverride left, DdosCustomPolicyTriggerSensitivityOverride right) => !left.Equals(right);

        public static explicit operator string(DdosCustomPolicyTriggerSensitivityOverride value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DdosCustomPolicyTriggerSensitivityOverride other && Equals(other);
        public bool Equals(DdosCustomPolicyTriggerSensitivityOverride other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.
    /// </summary>
    [EnumType]
    public readonly struct DdosSettingsProtectionCoverage : IEquatable<DdosSettingsProtectionCoverage>
    {
        private readonly string _value;

        private DdosSettingsProtectionCoverage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DdosSettingsProtectionCoverage Basic { get; } = new DdosSettingsProtectionCoverage("Basic");
        public static DdosSettingsProtectionCoverage Standard { get; } = new DdosSettingsProtectionCoverage("Standard");

        public static bool operator ==(DdosSettingsProtectionCoverage left, DdosSettingsProtectionCoverage right) => left.Equals(right);
        public static bool operator !=(DdosSettingsProtectionCoverage left, DdosSettingsProtectionCoverage right) => !left.Equals(right);

        public static explicit operator string(DdosSettingsProtectionCoverage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DdosSettingsProtectionCoverage other && Equals(other);
        public bool Equals(DdosSettingsProtectionCoverage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Destination port behavior.
    /// </summary>
    [EnumType]
    public readonly struct DestinationPortBehavior : IEquatable<DestinationPortBehavior>
    {
        private readonly string _value;

        private DestinationPortBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DestinationPortBehavior None { get; } = new DestinationPortBehavior("None");
        public static DestinationPortBehavior ListenIfAvailable { get; } = new DestinationPortBehavior("ListenIfAvailable");

        public static bool operator ==(DestinationPortBehavior left, DestinationPortBehavior right) => left.Equals(right);
        public static bool operator !=(DestinationPortBehavior left, DestinationPortBehavior right) => !left.Equals(right);

        public static explicit operator string(DestinationPortBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DestinationPortBehavior other && Equals(other);
        public bool Equals(DestinationPortBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The DH Group used in IKE Phase 1 for initial SA.
    /// </summary>
    [EnumType]
    public readonly struct DhGroup : IEquatable<DhGroup>
    {
        private readonly string _value;

        private DhGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DhGroup None { get; } = new DhGroup("None");
        public static DhGroup DHGroup1 { get; } = new DhGroup("DHGroup1");
        public static DhGroup DHGroup2 { get; } = new DhGroup("DHGroup2");
        public static DhGroup DHGroup14 { get; } = new DhGroup("DHGroup14");
        public static DhGroup DHGroup2048 { get; } = new DhGroup("DHGroup2048");
        public static DhGroup ECP256 { get; } = new DhGroup("ECP256");
        public static DhGroup ECP384 { get; } = new DhGroup("ECP384");
        public static DhGroup DHGroup24 { get; } = new DhGroup("DHGroup24");

        public static bool operator ==(DhGroup left, DhGroup right) => left.Equals(right);
        public static bool operator !=(DhGroup left, DhGroup right) => !left.Equals(right);

        public static explicit operator string(DhGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DhGroup other && Equals(other);
        public bool Equals(DhGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to use dynamic compression for cached content
    /// </summary>
    [EnumType]
    public readonly struct DynamicCompressionEnabled : IEquatable<DynamicCompressionEnabled>
    {
        private readonly string _value;

        private DynamicCompressionEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicCompressionEnabled Enabled { get; } = new DynamicCompressionEnabled("Enabled");
        public static DynamicCompressionEnabled Disabled { get; } = new DynamicCompressionEnabled("Disabled");

        public static bool operator ==(DynamicCompressionEnabled left, DynamicCompressionEnabled right) => left.Equals(right);
        public static bool operator !=(DynamicCompressionEnabled left, DynamicCompressionEnabled right) => !left.Equals(right);

        public static explicit operator string(DynamicCompressionEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicCompressionEnabled other && Equals(other);
        public bool Equals(DynamicCompressionEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The monitoring status of the endpoint.
    /// </summary>
    [EnumType]
    public readonly struct EndpointMonitorStatus : IEquatable<EndpointMonitorStatus>
    {
        private readonly string _value;

        private EndpointMonitorStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EndpointMonitorStatus CheckingEndpoint { get; } = new EndpointMonitorStatus("CheckingEndpoint");
        public static EndpointMonitorStatus Online { get; } = new EndpointMonitorStatus("Online");
        public static EndpointMonitorStatus Degraded { get; } = new EndpointMonitorStatus("Degraded");
        public static EndpointMonitorStatus Disabled { get; } = new EndpointMonitorStatus("Disabled");
        public static EndpointMonitorStatus Inactive { get; } = new EndpointMonitorStatus("Inactive");
        public static EndpointMonitorStatus Stopped { get; } = new EndpointMonitorStatus("Stopped");

        public static bool operator ==(EndpointMonitorStatus left, EndpointMonitorStatus right) => left.Equals(right);
        public static bool operator !=(EndpointMonitorStatus left, EndpointMonitorStatus right) => !left.Equals(right);

        public static explicit operator string(EndpointMonitorStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointMonitorStatus other && Equals(other);
        public bool Equals(EndpointMonitorStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
    /// </summary>
    [EnumType]
    public readonly struct EndpointStatus : IEquatable<EndpointStatus>
    {
        private readonly string _value;

        private EndpointStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EndpointStatus Enabled { get; } = new EndpointStatus("Enabled");
        public static EndpointStatus Disabled { get; } = new EndpointStatus("Disabled");

        public static bool operator ==(EndpointStatus left, EndpointStatus right) => left.Equals(right);
        public static bool operator !=(EndpointStatus left, EndpointStatus right) => !left.Equals(right);

        public static explicit operator string(EndpointStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointStatus other && Equals(other);
        public bool Equals(EndpointStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The endpoint type.
    /// </summary>
    [EnumType]
    public readonly struct EndpointType : IEquatable<EndpointType>
    {
        private readonly string _value;

        private EndpointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EndpointType AzureVM { get; } = new EndpointType("AzureVM");
        public static EndpointType AzureVNet { get; } = new EndpointType("AzureVNet");
        public static EndpointType AzureSubnet { get; } = new EndpointType("AzureSubnet");
        public static EndpointType ExternalAddress { get; } = new EndpointType("ExternalAddress");
        public static EndpointType MMAWorkspaceMachine { get; } = new EndpointType("MMAWorkspaceMachine");
        public static EndpointType MMAWorkspaceNetwork { get; } = new EndpointType("MMAWorkspaceNetwork");

        public static bool operator ==(EndpointType left, EndpointType right) => left.Equals(right);
        public static bool operator !=(EndpointType left, EndpointType right) => !left.Equals(right);

        public static explicit operator string(EndpointType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointType other && Equals(other);
        public bool Equals(EndpointType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
    /// </summary>
    [EnumType]
    public readonly struct EnforceCertificateNameCheckEnabledState : IEquatable<EnforceCertificateNameCheckEnabledState>
    {
        private readonly string _value;

        private EnforceCertificateNameCheckEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnforceCertificateNameCheckEnabledState Enabled { get; } = new EnforceCertificateNameCheckEnabledState("Enabled");
        public static EnforceCertificateNameCheckEnabledState Disabled { get; } = new EnforceCertificateNameCheckEnabledState("Disabled");

        public static bool operator ==(EnforceCertificateNameCheckEnabledState left, EnforceCertificateNameCheckEnabledState right) => left.Equals(right);
        public static bool operator !=(EnforceCertificateNameCheckEnabledState left, EnforceCertificateNameCheckEnabledState right) => !left.Equals(right);

        public static explicit operator string(EnforceCertificateNameCheckEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnforceCertificateNameCheckEnabledState other && Equals(other);
        public bool Equals(EnforceCertificateNameCheckEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of peering.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteCircuitPeeringState : IEquatable<ExpressRouteCircuitPeeringState>
    {
        private readonly string _value;

        private ExpressRouteCircuitPeeringState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteCircuitPeeringState Disabled { get; } = new ExpressRouteCircuitPeeringState("Disabled");
        public static ExpressRouteCircuitPeeringState Enabled { get; } = new ExpressRouteCircuitPeeringState("Enabled");

        public static bool operator ==(ExpressRouteCircuitPeeringState left, ExpressRouteCircuitPeeringState right) => left.Equals(right);
        public static bool operator !=(ExpressRouteCircuitPeeringState left, ExpressRouteCircuitPeeringState right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteCircuitPeeringState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteCircuitPeeringState other && Equals(other);
        public bool Equals(ExpressRouteCircuitPeeringState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The family of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteCircuitSkuFamily : IEquatable<ExpressRouteCircuitSkuFamily>
    {
        private readonly string _value;

        private ExpressRouteCircuitSkuFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteCircuitSkuFamily UnlimitedData { get; } = new ExpressRouteCircuitSkuFamily("UnlimitedData");
        public static ExpressRouteCircuitSkuFamily MeteredData { get; } = new ExpressRouteCircuitSkuFamily("MeteredData");

        public static bool operator ==(ExpressRouteCircuitSkuFamily left, ExpressRouteCircuitSkuFamily right) => left.Equals(right);
        public static bool operator !=(ExpressRouteCircuitSkuFamily left, ExpressRouteCircuitSkuFamily right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteCircuitSkuFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteCircuitSkuFamily other && Equals(other);
        public bool Equals(ExpressRouteCircuitSkuFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteCircuitSkuTier : IEquatable<ExpressRouteCircuitSkuTier>
    {
        private readonly string _value;

        private ExpressRouteCircuitSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteCircuitSkuTier Standard { get; } = new ExpressRouteCircuitSkuTier("Standard");
        public static ExpressRouteCircuitSkuTier Premium { get; } = new ExpressRouteCircuitSkuTier("Premium");
        public static ExpressRouteCircuitSkuTier Basic { get; } = new ExpressRouteCircuitSkuTier("Basic");
        public static ExpressRouteCircuitSkuTier Local { get; } = new ExpressRouteCircuitSkuTier("Local");

        public static bool operator ==(ExpressRouteCircuitSkuTier left, ExpressRouteCircuitSkuTier right) => left.Equals(right);
        public static bool operator !=(ExpressRouteCircuitSkuTier left, ExpressRouteCircuitSkuTier right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteCircuitSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteCircuitSkuTier other && Equals(other);
        public bool Equals(ExpressRouteCircuitSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Administrative state of the physical port.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteLinkAdminState : IEquatable<ExpressRouteLinkAdminState>
    {
        private readonly string _value;

        private ExpressRouteLinkAdminState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteLinkAdminState Enabled { get; } = new ExpressRouteLinkAdminState("Enabled");
        public static ExpressRouteLinkAdminState Disabled { get; } = new ExpressRouteLinkAdminState("Disabled");

        public static bool operator ==(ExpressRouteLinkAdminState left, ExpressRouteLinkAdminState right) => left.Equals(right);
        public static bool operator !=(ExpressRouteLinkAdminState left, ExpressRouteLinkAdminState right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteLinkAdminState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteLinkAdminState other && Equals(other);
        public bool Equals(ExpressRouteLinkAdminState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Mac security cipher.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteLinkMacSecCipher : IEquatable<ExpressRouteLinkMacSecCipher>
    {
        private readonly string _value;

        private ExpressRouteLinkMacSecCipher(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteLinkMacSecCipher GcmAes256 { get; } = new ExpressRouteLinkMacSecCipher("GcmAes256");
        public static ExpressRouteLinkMacSecCipher GcmAes128 { get; } = new ExpressRouteLinkMacSecCipher("GcmAes128");
        public static ExpressRouteLinkMacSecCipher GcmAesXpn128 { get; } = new ExpressRouteLinkMacSecCipher("GcmAesXpn128");
        public static ExpressRouteLinkMacSecCipher GcmAesXpn256 { get; } = new ExpressRouteLinkMacSecCipher("GcmAesXpn256");

        public static bool operator ==(ExpressRouteLinkMacSecCipher left, ExpressRouteLinkMacSecCipher right) => left.Equals(right);
        public static bool operator !=(ExpressRouteLinkMacSecCipher left, ExpressRouteLinkMacSecCipher right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteLinkMacSecCipher value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteLinkMacSecCipher other && Equals(other);
        public bool Equals(ExpressRouteLinkMacSecCipher other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sci mode enabled/disabled.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteLinkMacSecSciState : IEquatable<ExpressRouteLinkMacSecSciState>
    {
        private readonly string _value;

        private ExpressRouteLinkMacSecSciState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteLinkMacSecSciState Disabled { get; } = new ExpressRouteLinkMacSecSciState("Disabled");
        public static ExpressRouteLinkMacSecSciState Enabled { get; } = new ExpressRouteLinkMacSecSciState("Enabled");

        public static bool operator ==(ExpressRouteLinkMacSecSciState left, ExpressRouteLinkMacSecSciState right) => left.Equals(right);
        public static bool operator !=(ExpressRouteLinkMacSecSciState left, ExpressRouteLinkMacSecSciState right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteLinkMacSecSciState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteLinkMacSecSciState other && Equals(other);
        public bool Equals(ExpressRouteLinkMacSecSciState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The peering state.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRoutePeeringState : IEquatable<ExpressRoutePeeringState>
    {
        private readonly string _value;

        private ExpressRoutePeeringState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRoutePeeringState Disabled { get; } = new ExpressRoutePeeringState("Disabled");
        public static ExpressRoutePeeringState Enabled { get; } = new ExpressRoutePeeringState("Enabled");

        public static bool operator ==(ExpressRoutePeeringState left, ExpressRoutePeeringState right) => left.Equals(right);
        public static bool operator !=(ExpressRoutePeeringState left, ExpressRoutePeeringState right) => !left.Equals(right);

        public static explicit operator string(ExpressRoutePeeringState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRoutePeeringState other && Equals(other);
        public bool Equals(ExpressRoutePeeringState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The peering type.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRoutePeeringType : IEquatable<ExpressRoutePeeringType>
    {
        private readonly string _value;

        private ExpressRoutePeeringType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRoutePeeringType AzurePublicPeering { get; } = new ExpressRoutePeeringType("AzurePublicPeering");
        public static ExpressRoutePeeringType AzurePrivatePeering { get; } = new ExpressRoutePeeringType("AzurePrivatePeering");
        public static ExpressRoutePeeringType MicrosoftPeering { get; } = new ExpressRoutePeeringType("MicrosoftPeering");

        public static bool operator ==(ExpressRoutePeeringType left, ExpressRoutePeeringType right) => left.Equals(right);
        public static bool operator !=(ExpressRoutePeeringType left, ExpressRoutePeeringType right) => !left.Equals(right);

        public static explicit operator string(ExpressRoutePeeringType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRoutePeeringType other && Equals(other);
        public bool Equals(ExpressRoutePeeringType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Encapsulation method on physical ports.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRoutePortsEncapsulation : IEquatable<ExpressRoutePortsEncapsulation>
    {
        private readonly string _value;

        private ExpressRoutePortsEncapsulation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRoutePortsEncapsulation Dot1Q { get; } = new ExpressRoutePortsEncapsulation("Dot1Q");
        public static ExpressRoutePortsEncapsulation QinQ { get; } = new ExpressRoutePortsEncapsulation("QinQ");

        public static bool operator ==(ExpressRoutePortsEncapsulation left, ExpressRoutePortsEncapsulation right) => left.Equals(right);
        public static bool operator !=(ExpressRoutePortsEncapsulation left, ExpressRoutePortsEncapsulation right) => !left.Equals(right);

        public static explicit operator string(ExpressRoutePortsEncapsulation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRoutePortsEncapsulation other && Equals(other);
        public bool Equals(ExpressRoutePortsEncapsulation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationTypes EdgeZone { get; } = new ExtendedLocationTypes("EdgeZone");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyFilterRuleActionType : IEquatable<FirewallPolicyFilterRuleActionType>
    {
        private readonly string _value;

        private FirewallPolicyFilterRuleActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyFilterRuleActionType Allow { get; } = new FirewallPolicyFilterRuleActionType("Allow");
        public static FirewallPolicyFilterRuleActionType Deny { get; } = new FirewallPolicyFilterRuleActionType("Deny");

        public static bool operator ==(FirewallPolicyFilterRuleActionType left, FirewallPolicyFilterRuleActionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyFilterRuleActionType left, FirewallPolicyFilterRuleActionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyFilterRuleActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyFilterRuleActionType other && Equals(other);
        public bool Equals(FirewallPolicyFilterRuleActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyFilterRuleCollectionActionType : IEquatable<FirewallPolicyFilterRuleCollectionActionType>
    {
        private readonly string _value;

        private FirewallPolicyFilterRuleCollectionActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyFilterRuleCollectionActionType Allow { get; } = new FirewallPolicyFilterRuleCollectionActionType("Allow");
        public static FirewallPolicyFilterRuleCollectionActionType Deny { get; } = new FirewallPolicyFilterRuleCollectionActionType("Deny");

        public static bool operator ==(FirewallPolicyFilterRuleCollectionActionType left, FirewallPolicyFilterRuleCollectionActionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyFilterRuleCollectionActionType left, FirewallPolicyFilterRuleCollectionActionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyFilterRuleCollectionActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyFilterRuleCollectionActionType other && Equals(other);
        public bool Equals(FirewallPolicyFilterRuleCollectionActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rule bypass protocol.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyIntrusionDetectionProtocol : IEquatable<FirewallPolicyIntrusionDetectionProtocol>
    {
        private readonly string _value;

        private FirewallPolicyIntrusionDetectionProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyIntrusionDetectionProtocol TCP { get; } = new FirewallPolicyIntrusionDetectionProtocol("TCP");
        public static FirewallPolicyIntrusionDetectionProtocol UDP { get; } = new FirewallPolicyIntrusionDetectionProtocol("UDP");
        public static FirewallPolicyIntrusionDetectionProtocol ICMP { get; } = new FirewallPolicyIntrusionDetectionProtocol("ICMP");
        public static FirewallPolicyIntrusionDetectionProtocol ANY { get; } = new FirewallPolicyIntrusionDetectionProtocol("ANY");

        public static bool operator ==(FirewallPolicyIntrusionDetectionProtocol left, FirewallPolicyIntrusionDetectionProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyIntrusionDetectionProtocol left, FirewallPolicyIntrusionDetectionProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyIntrusionDetectionProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyIntrusionDetectionProtocol other && Equals(other);
        public bool Equals(FirewallPolicyIntrusionDetectionProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Intrusion detection general state.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyIntrusionDetectionStateType : IEquatable<FirewallPolicyIntrusionDetectionStateType>
    {
        private readonly string _value;

        private FirewallPolicyIntrusionDetectionStateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyIntrusionDetectionStateType Off { get; } = new FirewallPolicyIntrusionDetectionStateType("Off");
        public static FirewallPolicyIntrusionDetectionStateType Alert { get; } = new FirewallPolicyIntrusionDetectionStateType("Alert");
        public static FirewallPolicyIntrusionDetectionStateType Deny { get; } = new FirewallPolicyIntrusionDetectionStateType("Deny");

        public static bool operator ==(FirewallPolicyIntrusionDetectionStateType left, FirewallPolicyIntrusionDetectionStateType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyIntrusionDetectionStateType left, FirewallPolicyIntrusionDetectionStateType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyIntrusionDetectionStateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyIntrusionDetectionStateType other && Equals(other);
        public bool Equals(FirewallPolicyIntrusionDetectionStateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyNatRuleActionType : IEquatable<FirewallPolicyNatRuleActionType>
    {
        private readonly string _value;

        private FirewallPolicyNatRuleActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyNatRuleActionType DNAT { get; } = new FirewallPolicyNatRuleActionType("DNAT");

        public static bool operator ==(FirewallPolicyNatRuleActionType left, FirewallPolicyNatRuleActionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyNatRuleActionType left, FirewallPolicyNatRuleActionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyNatRuleActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyNatRuleActionType other && Equals(other);
        public bool Equals(FirewallPolicyNatRuleActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyNatRuleCollectionActionType : IEquatable<FirewallPolicyNatRuleCollectionActionType>
    {
        private readonly string _value;

        private FirewallPolicyNatRuleCollectionActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyNatRuleCollectionActionType DNAT { get; } = new FirewallPolicyNatRuleCollectionActionType("DNAT");

        public static bool operator ==(FirewallPolicyNatRuleCollectionActionType left, FirewallPolicyNatRuleCollectionActionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyNatRuleCollectionActionType left, FirewallPolicyNatRuleCollectionActionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyNatRuleCollectionActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyNatRuleCollectionActionType other && Equals(other);
        public bool Equals(FirewallPolicyNatRuleCollectionActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol type.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleApplicationProtocolType : IEquatable<FirewallPolicyRuleApplicationProtocolType>
    {
        private readonly string _value;

        private FirewallPolicyRuleApplicationProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleApplicationProtocolType Http { get; } = new FirewallPolicyRuleApplicationProtocolType("Http");
        public static FirewallPolicyRuleApplicationProtocolType Https { get; } = new FirewallPolicyRuleApplicationProtocolType("Https");

        public static bool operator ==(FirewallPolicyRuleApplicationProtocolType left, FirewallPolicyRuleApplicationProtocolType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleApplicationProtocolType left, FirewallPolicyRuleApplicationProtocolType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleApplicationProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleApplicationProtocolType other && Equals(other);
        public bool Equals(FirewallPolicyRuleApplicationProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the rule collection.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleCollectionType : IEquatable<FirewallPolicyRuleCollectionType>
    {
        private readonly string _value;

        private FirewallPolicyRuleCollectionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleCollectionType FirewallPolicyNatRuleCollection { get; } = new FirewallPolicyRuleCollectionType("FirewallPolicyNatRuleCollection");
        public static FirewallPolicyRuleCollectionType FirewallPolicyFilterRuleCollection { get; } = new FirewallPolicyRuleCollectionType("FirewallPolicyFilterRuleCollection");

        public static bool operator ==(FirewallPolicyRuleCollectionType left, FirewallPolicyRuleCollectionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleCollectionType left, FirewallPolicyRuleCollectionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleCollectionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleCollectionType other && Equals(other);
        public bool Equals(FirewallPolicyRuleCollectionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol type.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleConditionApplicationProtocolType : IEquatable<FirewallPolicyRuleConditionApplicationProtocolType>
    {
        private readonly string _value;

        private FirewallPolicyRuleConditionApplicationProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleConditionApplicationProtocolType Http { get; } = new FirewallPolicyRuleConditionApplicationProtocolType("Http");
        public static FirewallPolicyRuleConditionApplicationProtocolType Https { get; } = new FirewallPolicyRuleConditionApplicationProtocolType("Https");

        public static bool operator ==(FirewallPolicyRuleConditionApplicationProtocolType left, FirewallPolicyRuleConditionApplicationProtocolType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleConditionApplicationProtocolType left, FirewallPolicyRuleConditionApplicationProtocolType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleConditionApplicationProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleConditionApplicationProtocolType other && Equals(other);
        public bool Equals(FirewallPolicyRuleConditionApplicationProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Network protocol of a Rule condition.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleConditionNetworkProtocol : IEquatable<FirewallPolicyRuleConditionNetworkProtocol>
    {
        private readonly string _value;

        private FirewallPolicyRuleConditionNetworkProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleConditionNetworkProtocol TCP { get; } = new FirewallPolicyRuleConditionNetworkProtocol("TCP");
        public static FirewallPolicyRuleConditionNetworkProtocol UDP { get; } = new FirewallPolicyRuleConditionNetworkProtocol("UDP");
        public static FirewallPolicyRuleConditionNetworkProtocol Any { get; } = new FirewallPolicyRuleConditionNetworkProtocol("Any");
        public static FirewallPolicyRuleConditionNetworkProtocol ICMP { get; } = new FirewallPolicyRuleConditionNetworkProtocol("ICMP");

        public static bool operator ==(FirewallPolicyRuleConditionNetworkProtocol left, FirewallPolicyRuleConditionNetworkProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleConditionNetworkProtocol left, FirewallPolicyRuleConditionNetworkProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleConditionNetworkProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleConditionNetworkProtocol other && Equals(other);
        public bool Equals(FirewallPolicyRuleConditionNetworkProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rule Condition Type.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleConditionType : IEquatable<FirewallPolicyRuleConditionType>
    {
        private readonly string _value;

        private FirewallPolicyRuleConditionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleConditionType ApplicationRuleCondition { get; } = new FirewallPolicyRuleConditionType("ApplicationRuleCondition");
        public static FirewallPolicyRuleConditionType NetworkRuleCondition { get; } = new FirewallPolicyRuleConditionType("NetworkRuleCondition");
        public static FirewallPolicyRuleConditionType NatRuleCondition { get; } = new FirewallPolicyRuleConditionType("NatRuleCondition");

        public static bool operator ==(FirewallPolicyRuleConditionType left, FirewallPolicyRuleConditionType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleConditionType left, FirewallPolicyRuleConditionType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleConditionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleConditionType other && Equals(other);
        public bool Equals(FirewallPolicyRuleConditionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Network protocol of a Rule.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleNetworkProtocol : IEquatable<FirewallPolicyRuleNetworkProtocol>
    {
        private readonly string _value;

        private FirewallPolicyRuleNetworkProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleNetworkProtocol TCP { get; } = new FirewallPolicyRuleNetworkProtocol("TCP");
        public static FirewallPolicyRuleNetworkProtocol UDP { get; } = new FirewallPolicyRuleNetworkProtocol("UDP");
        public static FirewallPolicyRuleNetworkProtocol Any { get; } = new FirewallPolicyRuleNetworkProtocol("Any");
        public static FirewallPolicyRuleNetworkProtocol ICMP { get; } = new FirewallPolicyRuleNetworkProtocol("ICMP");

        public static bool operator ==(FirewallPolicyRuleNetworkProtocol left, FirewallPolicyRuleNetworkProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleNetworkProtocol left, FirewallPolicyRuleNetworkProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleNetworkProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleNetworkProtocol other && Equals(other);
        public bool Equals(FirewallPolicyRuleNetworkProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the rule.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicyRuleType : IEquatable<FirewallPolicyRuleType>
    {
        private readonly string _value;

        private FirewallPolicyRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleType FirewallPolicyNatRule { get; } = new FirewallPolicyRuleType("FirewallPolicyNatRule");
        public static FirewallPolicyRuleType FirewallPolicyFilterRule { get; } = new FirewallPolicyRuleType("FirewallPolicyFilterRule");

        public static bool operator ==(FirewallPolicyRuleType left, FirewallPolicyRuleType right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleType left, FirewallPolicyRuleType right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleType other && Equals(other);
        public bool Equals(FirewallPolicyRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of Firewall Policy.
    /// </summary>
    [EnumType]
    public readonly struct FirewallPolicySkuTier : IEquatable<FirewallPolicySkuTier>
    {
        private readonly string _value;

        private FirewallPolicySkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicySkuTier Standard { get; } = new FirewallPolicySkuTier("Standard");
        public static FirewallPolicySkuTier Premium { get; } = new FirewallPolicySkuTier("Premium");

        public static bool operator ==(FirewallPolicySkuTier left, FirewallPolicySkuTier right) => left.Equals(right);
        public static bool operator !=(FirewallPolicySkuTier left, FirewallPolicySkuTier right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicySkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicySkuTier other && Equals(other);
        public bool Equals(FirewallPolicySkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The file type of flow log.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogFormatType : IEquatable<FlowLogFormatType>
    {
        private readonly string _value;

        private FlowLogFormatType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogFormatType JSON { get; } = new FlowLogFormatType("JSON");

        public static bool operator ==(FlowLogFormatType left, FlowLogFormatType right) => left.Equals(right);
        public static bool operator !=(FlowLogFormatType left, FlowLogFormatType right) => !left.Equals(right);

        public static explicit operator string(FlowLogFormatType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogFormatType other && Equals(other);
        public bool Equals(FlowLogFormatType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct FrontDoorEnabledState : IEquatable<FrontDoorEnabledState>
    {
        private readonly string _value;

        private FrontDoorEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontDoorEnabledState Enabled { get; } = new FrontDoorEnabledState("Enabled");
        public static FrontDoorEnabledState Disabled { get; } = new FrontDoorEnabledState("Disabled");

        public static bool operator ==(FrontDoorEnabledState left, FrontDoorEnabledState right) => left.Equals(right);
        public static bool operator !=(FrontDoorEnabledState left, FrontDoorEnabledState right) => !left.Equals(right);

        public static explicit operator string(FrontDoorEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontDoorEnabledState other && Equals(other);
        public bool Equals(FrontDoorEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol this rule will use when forwarding traffic to backends.
    /// </summary>
    [EnumType]
    public readonly struct FrontDoorForwardingProtocol : IEquatable<FrontDoorForwardingProtocol>
    {
        private readonly string _value;

        private FrontDoorForwardingProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontDoorForwardingProtocol HttpOnly { get; } = new FrontDoorForwardingProtocol("HttpOnly");
        public static FrontDoorForwardingProtocol HttpsOnly { get; } = new FrontDoorForwardingProtocol("HttpsOnly");
        public static FrontDoorForwardingProtocol MatchRequest { get; } = new FrontDoorForwardingProtocol("MatchRequest");

        public static bool operator ==(FrontDoorForwardingProtocol left, FrontDoorForwardingProtocol right) => left.Equals(right);
        public static bool operator !=(FrontDoorForwardingProtocol left, FrontDoorForwardingProtocol right) => !left.Equals(right);

        public static explicit operator string(FrontDoorForwardingProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontDoorForwardingProtocol other && Equals(other);
        public bool Equals(FrontDoorForwardingProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configures which HTTP method to use to probe the backends defined under backendPools.
    /// </summary>
    [EnumType]
    public readonly struct FrontDoorHealthProbeMethod : IEquatable<FrontDoorHealthProbeMethod>
    {
        private readonly string _value;

        private FrontDoorHealthProbeMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontDoorHealthProbeMethod GET { get; } = new FrontDoorHealthProbeMethod("GET");
        public static FrontDoorHealthProbeMethod HEAD { get; } = new FrontDoorHealthProbeMethod("HEAD");

        public static bool operator ==(FrontDoorHealthProbeMethod left, FrontDoorHealthProbeMethod right) => left.Equals(right);
        public static bool operator !=(FrontDoorHealthProbeMethod left, FrontDoorHealthProbeMethod right) => !left.Equals(right);

        public static explicit operator string(FrontDoorHealthProbeMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontDoorHealthProbeMethod other && Equals(other);
        public bool Equals(FrontDoorHealthProbeMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Accepted protocol schemes.
    /// </summary>
    [EnumType]
    public readonly struct FrontDoorProtocol : IEquatable<FrontDoorProtocol>
    {
        private readonly string _value;

        private FrontDoorProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontDoorProtocol Http { get; } = new FrontDoorProtocol("Http");
        public static FrontDoorProtocol Https { get; } = new FrontDoorProtocol("Https");

        public static bool operator ==(FrontDoorProtocol left, FrontDoorProtocol right) => left.Equals(right);
        public static bool operator !=(FrontDoorProtocol left, FrontDoorProtocol right) => !left.Equals(right);

        public static explicit operator string(FrontDoorProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontDoorProtocol other && Equals(other);
        public bool Equals(FrontDoorProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Treatment of URL query terms when forming the cache key.
    /// </summary>
    [EnumType]
    public readonly struct FrontDoorQuery : IEquatable<FrontDoorQuery>
    {
        private readonly string _value;

        private FrontDoorQuery(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontDoorQuery StripNone { get; } = new FrontDoorQuery("StripNone");
        public static FrontDoorQuery StripAll { get; } = new FrontDoorQuery("StripAll");
        public static FrontDoorQuery StripOnly { get; } = new FrontDoorQuery("StripOnly");
        public static FrontDoorQuery StripAllExcept { get; } = new FrontDoorQuery("StripAllExcept");

        public static bool operator ==(FrontDoorQuery left, FrontDoorQuery right) => left.Equals(right);
        public static bool operator !=(FrontDoorQuery left, FrontDoorQuery right) => !left.Equals(right);

        public static explicit operator string(FrontDoorQuery value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontDoorQuery other && Equals(other);
        public bool Equals(FrontDoorQuery other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol of the destination to where the traffic is redirected
    /// </summary>
    [EnumType]
    public readonly struct FrontDoorRedirectProtocol : IEquatable<FrontDoorRedirectProtocol>
    {
        private readonly string _value;

        private FrontDoorRedirectProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontDoorRedirectProtocol HttpOnly { get; } = new FrontDoorRedirectProtocol("HttpOnly");
        public static FrontDoorRedirectProtocol HttpsOnly { get; } = new FrontDoorRedirectProtocol("HttpsOnly");
        public static FrontDoorRedirectProtocol MatchRequest { get; } = new FrontDoorRedirectProtocol("MatchRequest");

        public static bool operator ==(FrontDoorRedirectProtocol left, FrontDoorRedirectProtocol right) => left.Equals(right);
        public static bool operator !=(FrontDoorRedirectProtocol left, FrontDoorRedirectProtocol right) => !left.Equals(right);

        public static explicit operator string(FrontDoorRedirectProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontDoorRedirectProtocol other && Equals(other);
        public bool Equals(FrontDoorRedirectProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The redirect type the rule will use when redirecting traffic.
    /// </summary>
    [EnumType]
    public readonly struct FrontDoorRedirectType : IEquatable<FrontDoorRedirectType>
    {
        private readonly string _value;

        private FrontDoorRedirectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontDoorRedirectType Moved { get; } = new FrontDoorRedirectType("Moved");
        public static FrontDoorRedirectType Found { get; } = new FrontDoorRedirectType("Found");
        public static FrontDoorRedirectType TemporaryRedirect { get; } = new FrontDoorRedirectType("TemporaryRedirect");
        public static FrontDoorRedirectType PermanentRedirect { get; } = new FrontDoorRedirectType("PermanentRedirect");

        public static bool operator ==(FrontDoorRedirectType left, FrontDoorRedirectType right) => left.Equals(right);
        public static bool operator !=(FrontDoorRedirectType left, FrontDoorRedirectType right) => !left.Equals(right);

        public static explicit operator string(FrontDoorRedirectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontDoorRedirectType other && Equals(other);
        public bool Equals(FrontDoorRedirectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The HTTP method to use.
    /// </summary>
    [EnumType]
    public readonly struct HTTPConfigurationMethod : IEquatable<HTTPConfigurationMethod>
    {
        private readonly string _value;

        private HTTPConfigurationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HTTPConfigurationMethod Get { get; } = new HTTPConfigurationMethod("Get");
        public static HTTPConfigurationMethod Post { get; } = new HTTPConfigurationMethod("Post");

        public static bool operator ==(HTTPConfigurationMethod left, HTTPConfigurationMethod right) => left.Equals(right);
        public static bool operator !=(HTTPConfigurationMethod left, HTTPConfigurationMethod right) => !left.Equals(right);

        public static explicit operator string(HTTPConfigurationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HTTPConfigurationMethod other && Equals(other);
        public bool Equals(HTTPConfigurationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Which type of manipulation to apply to the header.
    /// </summary>
    [EnumType]
    public readonly struct HeaderActionType : IEquatable<HeaderActionType>
    {
        private readonly string _value;

        private HeaderActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HeaderActionType Append { get; } = new HeaderActionType("Append");
        public static HeaderActionType Delete { get; } = new HeaderActionType("Delete");
        public static HeaderActionType Overwrite { get; } = new HeaderActionType("Overwrite");

        public static bool operator ==(HeaderActionType left, HeaderActionType right) => left.Equals(right);
        public static bool operator !=(HeaderActionType left, HeaderActionType right) => !left.Equals(right);

        public static explicit operator string(HeaderActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HeaderActionType other && Equals(other);
        public bool Equals(HeaderActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
    /// </summary>
    [EnumType]
    public readonly struct HealthProbeEnabled : IEquatable<HealthProbeEnabled>
    {
        private readonly string _value;

        private HealthProbeEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HealthProbeEnabled Enabled { get; } = new HealthProbeEnabled("Enabled");
        public static HealthProbeEnabled Disabled { get; } = new HealthProbeEnabled("Disabled");

        public static bool operator ==(HealthProbeEnabled left, HealthProbeEnabled right) => left.Equals(right);
        public static bool operator !=(HealthProbeEnabled left, HealthProbeEnabled right) => !left.Equals(right);

        public static explicit operator string(HealthProbeEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HealthProbeEnabled other && Equals(other);
        public bool Equals(HealthProbeEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The private IP address allocation method.
    /// </summary>
    [EnumType]
    public readonly struct IPAllocationMethod : IEquatable<IPAllocationMethod>
    {
        private readonly string _value;

        private IPAllocationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPAllocationMethod Static { get; } = new IPAllocationMethod("Static");
        public static IPAllocationMethod Dynamic { get; } = new IPAllocationMethod("Dynamic");

        public static bool operator ==(IPAllocationMethod left, IPAllocationMethod right) => left.Equals(right);
        public static bool operator !=(IPAllocationMethod left, IPAllocationMethod right) => !left.Equals(right);

        public static explicit operator string(IPAllocationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPAllocationMethod other && Equals(other);
        public bool Equals(IPAllocationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
    /// </summary>
    [EnumType]
    public readonly struct IPVersion : IEquatable<IPVersion>
    {
        private readonly string _value;

        private IPVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPVersion IPv4 { get; } = new IPVersion("IPv4");
        public static IPVersion IPv6 { get; } = new IPVersion("IPv6");

        public static bool operator ==(IPVersion left, IPVersion right) => left.Equals(right);
        public static bool operator !=(IPVersion left, IPVersion right) => !left.Equals(right);

        public static explicit operator string(IPVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPVersion other && Equals(other);
        public bool Equals(IPVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IKE encryption algorithm (IKE phase 2).
    /// </summary>
    [EnumType]
    public readonly struct IkeEncryption : IEquatable<IkeEncryption>
    {
        private readonly string _value;

        private IkeEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IkeEncryption DES { get; } = new IkeEncryption("DES");
        public static IkeEncryption DES3 { get; } = new IkeEncryption("DES3");
        public static IkeEncryption AES128 { get; } = new IkeEncryption("AES128");
        public static IkeEncryption AES192 { get; } = new IkeEncryption("AES192");
        public static IkeEncryption AES256 { get; } = new IkeEncryption("AES256");
        public static IkeEncryption GCMAES256 { get; } = new IkeEncryption("GCMAES256");
        public static IkeEncryption GCMAES128 { get; } = new IkeEncryption("GCMAES128");

        public static bool operator ==(IkeEncryption left, IkeEncryption right) => left.Equals(right);
        public static bool operator !=(IkeEncryption left, IkeEncryption right) => !left.Equals(right);

        public static explicit operator string(IkeEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IkeEncryption other && Equals(other);
        public bool Equals(IkeEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IKE integrity algorithm (IKE phase 2).
    /// </summary>
    [EnumType]
    public readonly struct IkeIntegrity : IEquatable<IkeIntegrity>
    {
        private readonly string _value;

        private IkeIntegrity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IkeIntegrity MD5 { get; } = new IkeIntegrity("MD5");
        public static IkeIntegrity SHA1 { get; } = new IkeIntegrity("SHA1");
        public static IkeIntegrity SHA256 { get; } = new IkeIntegrity("SHA256");
        public static IkeIntegrity SHA384 { get; } = new IkeIntegrity("SHA384");
        public static IkeIntegrity GCMAES256 { get; } = new IkeIntegrity("GCMAES256");
        public static IkeIntegrity GCMAES128 { get; } = new IkeIntegrity("GCMAES128");

        public static bool operator ==(IkeIntegrity left, IkeIntegrity right) => left.Equals(right);
        public static bool operator !=(IkeIntegrity left, IkeIntegrity right) => !left.Equals(right);

        public static explicit operator string(IkeIntegrity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IkeIntegrity other && Equals(other);
        public bool Equals(IkeIntegrity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type for the IpAllocation.
    /// </summary>
    [EnumType]
    public readonly struct IpAllocationType : IEquatable<IpAllocationType>
    {
        private readonly string _value;

        private IpAllocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpAllocationType Undefined { get; } = new IpAllocationType("Undefined");
        public static IpAllocationType Hypernet { get; } = new IpAllocationType("Hypernet");

        public static bool operator ==(IpAllocationType left, IpAllocationType right) => left.Equals(right);
        public static bool operator !=(IpAllocationType left, IpAllocationType right) => !left.Equals(right);

        public static explicit operator string(IpAllocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpAllocationType other && Equals(other);
        public bool Equals(IpAllocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IPSec encryption algorithm (IKE phase 1).
    /// </summary>
    [EnumType]
    public readonly struct IpsecEncryption : IEquatable<IpsecEncryption>
    {
        private readonly string _value;

        private IpsecEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpsecEncryption None { get; } = new IpsecEncryption("None");
        public static IpsecEncryption DES { get; } = new IpsecEncryption("DES");
        public static IpsecEncryption DES3 { get; } = new IpsecEncryption("DES3");
        public static IpsecEncryption AES128 { get; } = new IpsecEncryption("AES128");
        public static IpsecEncryption AES192 { get; } = new IpsecEncryption("AES192");
        public static IpsecEncryption AES256 { get; } = new IpsecEncryption("AES256");
        public static IpsecEncryption GCMAES128 { get; } = new IpsecEncryption("GCMAES128");
        public static IpsecEncryption GCMAES192 { get; } = new IpsecEncryption("GCMAES192");
        public static IpsecEncryption GCMAES256 { get; } = new IpsecEncryption("GCMAES256");

        public static bool operator ==(IpsecEncryption left, IpsecEncryption right) => left.Equals(right);
        public static bool operator !=(IpsecEncryption left, IpsecEncryption right) => !left.Equals(right);

        public static explicit operator string(IpsecEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpsecEncryption other && Equals(other);
        public bool Equals(IpsecEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IPSec integrity algorithm (IKE phase 1).
    /// </summary>
    [EnumType]
    public readonly struct IpsecIntegrity : IEquatable<IpsecIntegrity>
    {
        private readonly string _value;

        private IpsecIntegrity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpsecIntegrity MD5 { get; } = new IpsecIntegrity("MD5");
        public static IpsecIntegrity SHA1 { get; } = new IpsecIntegrity("SHA1");
        public static IpsecIntegrity SHA256 { get; } = new IpsecIntegrity("SHA256");
        public static IpsecIntegrity GCMAES128 { get; } = new IpsecIntegrity("GCMAES128");
        public static IpsecIntegrity GCMAES192 { get; } = new IpsecIntegrity("GCMAES192");
        public static IpsecIntegrity GCMAES256 { get; } = new IpsecIntegrity("GCMAES256");

        public static bool operator ==(IpsecIntegrity left, IpsecIntegrity right) => left.Equals(right);
        public static bool operator !=(IpsecIntegrity left, IpsecIntegrity right) => !left.Equals(right);

        public static explicit operator string(IpsecIntegrity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpsecIntegrity other && Equals(other);
        public bool Equals(IpsecIntegrity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol for the outbound rule in load balancer.
    /// </summary>
    [EnumType]
    public readonly struct LoadBalancerOutboundRuleProtocol : IEquatable<LoadBalancerOutboundRuleProtocol>
    {
        private readonly string _value;

        private LoadBalancerOutboundRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoadBalancerOutboundRuleProtocol Tcp { get; } = new LoadBalancerOutboundRuleProtocol("Tcp");
        public static LoadBalancerOutboundRuleProtocol Udp { get; } = new LoadBalancerOutboundRuleProtocol("Udp");
        public static LoadBalancerOutboundRuleProtocol All { get; } = new LoadBalancerOutboundRuleProtocol("All");

        public static bool operator ==(LoadBalancerOutboundRuleProtocol left, LoadBalancerOutboundRuleProtocol right) => left.Equals(right);
        public static bool operator !=(LoadBalancerOutboundRuleProtocol left, LoadBalancerOutboundRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(LoadBalancerOutboundRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadBalancerOutboundRuleProtocol other && Equals(other);
        public bool Equals(LoadBalancerOutboundRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of a load balancer SKU.
    /// </summary>
    [EnumType]
    public readonly struct LoadBalancerSkuName : IEquatable<LoadBalancerSkuName>
    {
        private readonly string _value;

        private LoadBalancerSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoadBalancerSkuName Basic { get; } = new LoadBalancerSkuName("Basic");
        public static LoadBalancerSkuName Standard { get; } = new LoadBalancerSkuName("Standard");

        public static bool operator ==(LoadBalancerSkuName left, LoadBalancerSkuName right) => left.Equals(right);
        public static bool operator !=(LoadBalancerSkuName left, LoadBalancerSkuName right) => !left.Equals(right);

        public static explicit operator string(LoadBalancerSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadBalancerSkuName other && Equals(other);
        public bool Equals(LoadBalancerSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of a load balancer SKU.
    /// </summary>
    [EnumType]
    public readonly struct LoadBalancerSkuTier : IEquatable<LoadBalancerSkuTier>
    {
        private readonly string _value;

        private LoadBalancerSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoadBalancerSkuTier Regional { get; } = new LoadBalancerSkuTier("Regional");
        public static LoadBalancerSkuTier Global { get; } = new LoadBalancerSkuTier("Global");

        public static bool operator ==(LoadBalancerSkuTier left, LoadBalancerSkuTier right) => left.Equals(right);
        public static bool operator !=(LoadBalancerSkuTier left, LoadBalancerSkuTier right) => !left.Equals(right);

        public static explicit operator string(LoadBalancerSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadBalancerSkuTier other && Equals(other);
        public bool Equals(LoadBalancerSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The load distribution policy for this rule.
    /// </summary>
    [EnumType]
    public readonly struct LoadDistribution : IEquatable<LoadDistribution>
    {
        private readonly string _value;

        private LoadDistribution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoadDistribution Default { get; } = new LoadDistribution("Default");
        public static LoadDistribution SourceIP { get; } = new LoadDistribution("SourceIP");
        public static LoadDistribution SourceIPProtocol { get; } = new LoadDistribution("SourceIPProtocol");

        public static bool operator ==(LoadDistribution left, LoadDistribution right) => left.Equals(right);
        public static bool operator !=(LoadDistribution left, LoadDistribution right) => !left.Equals(right);

        public static explicit operator string(LoadDistribution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadDistribution other && Equals(other);
        public bool Equals(LoadDistribution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the managed rule. Defaults to Disabled if not specified.
    /// </summary>
    [EnumType]
    public readonly struct ManagedRuleEnabledState : IEquatable<ManagedRuleEnabledState>
    {
        private readonly string _value;

        private ManagedRuleEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedRuleEnabledState Disabled { get; } = new ManagedRuleEnabledState("Disabled");

        public static bool operator ==(ManagedRuleEnabledState left, ManagedRuleEnabledState right) => left.Equals(right);
        public static bool operator !=(ManagedRuleEnabledState left, ManagedRuleEnabledState right) => !left.Equals(right);

        public static explicit operator string(ManagedRuleEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedRuleEnabledState other && Equals(other);
        public bool Equals(ManagedRuleEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The variable type to be excluded.
    /// </summary>
    [EnumType]
    public readonly struct ManagedRuleExclusionMatchVariable : IEquatable<ManagedRuleExclusionMatchVariable>
    {
        private readonly string _value;

        private ManagedRuleExclusionMatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedRuleExclusionMatchVariable RequestHeaderNames { get; } = new ManagedRuleExclusionMatchVariable("RequestHeaderNames");
        public static ManagedRuleExclusionMatchVariable RequestCookieNames { get; } = new ManagedRuleExclusionMatchVariable("RequestCookieNames");
        public static ManagedRuleExclusionMatchVariable QueryStringArgNames { get; } = new ManagedRuleExclusionMatchVariable("QueryStringArgNames");
        public static ManagedRuleExclusionMatchVariable RequestBodyPostArgNames { get; } = new ManagedRuleExclusionMatchVariable("RequestBodyPostArgNames");

        public static bool operator ==(ManagedRuleExclusionMatchVariable left, ManagedRuleExclusionMatchVariable right) => left.Equals(right);
        public static bool operator !=(ManagedRuleExclusionMatchVariable left, ManagedRuleExclusionMatchVariable right) => !left.Equals(right);

        public static explicit operator string(ManagedRuleExclusionMatchVariable value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedRuleExclusionMatchVariable other && Equals(other);
        public bool Equals(ManagedRuleExclusionMatchVariable other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
    /// </summary>
    [EnumType]
    public readonly struct ManagedRuleExclusionSelectorMatchOperator : IEquatable<ManagedRuleExclusionSelectorMatchOperator>
    {
        private readonly string _value;

        private ManagedRuleExclusionSelectorMatchOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedRuleExclusionSelectorMatchOperator EqualsValue { get; } = new ManagedRuleExclusionSelectorMatchOperator("Equals");
        public static ManagedRuleExclusionSelectorMatchOperator Contains { get; } = new ManagedRuleExclusionSelectorMatchOperator("Contains");
        public static ManagedRuleExclusionSelectorMatchOperator StartsWith { get; } = new ManagedRuleExclusionSelectorMatchOperator("StartsWith");
        public static ManagedRuleExclusionSelectorMatchOperator EndsWith { get; } = new ManagedRuleExclusionSelectorMatchOperator("EndsWith");
        public static ManagedRuleExclusionSelectorMatchOperator EqualsAny { get; } = new ManagedRuleExclusionSelectorMatchOperator("EqualsAny");

        public static bool operator ==(ManagedRuleExclusionSelectorMatchOperator left, ManagedRuleExclusionSelectorMatchOperator right) => left.Equals(right);
        public static bool operator !=(ManagedRuleExclusionSelectorMatchOperator left, ManagedRuleExclusionSelectorMatchOperator right) => !left.Equals(right);

        public static explicit operator string(ManagedRuleExclusionSelectorMatchOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedRuleExclusionSelectorMatchOperator other && Equals(other);
        public bool Equals(ManagedRuleExclusionSelectorMatchOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
    /// </summary>
    [EnumType]
    public readonly struct MatchProcessingBehavior : IEquatable<MatchProcessingBehavior>
    {
        private readonly string _value;

        private MatchProcessingBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MatchProcessingBehavior Continue { get; } = new MatchProcessingBehavior("Continue");
        public static MatchProcessingBehavior Stop { get; } = new MatchProcessingBehavior("Stop");

        public static bool operator ==(MatchProcessingBehavior left, MatchProcessingBehavior right) => left.Equals(right);
        public static bool operator !=(MatchProcessingBehavior left, MatchProcessingBehavior right) => !left.Equals(right);

        public static explicit operator string(MatchProcessingBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MatchProcessingBehavior other && Equals(other);
        public bool Equals(MatchProcessingBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
    /// </summary>
    [EnumType]
    public readonly struct MonitorProtocol : IEquatable<MonitorProtocol>
    {
        private readonly string _value;

        private MonitorProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitorProtocol HTTP { get; } = new MonitorProtocol("HTTP");
        public static MonitorProtocol HTTPS { get; } = new MonitorProtocol("HTTPS");
        public static MonitorProtocol TCP { get; } = new MonitorProtocol("TCP");

        public static bool operator ==(MonitorProtocol left, MonitorProtocol right) => left.Equals(right);
        public static bool operator !=(MonitorProtocol left, MonitorProtocol right) => !left.Equals(right);

        public static explicit operator string(MonitorProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitorProtocol other && Equals(other);
        public bool Equals(MonitorProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of Nat Gateway SKU.
    /// </summary>
    [EnumType]
    public readonly struct NatGatewaySkuName : IEquatable<NatGatewaySkuName>
    {
        private readonly string _value;

        private NatGatewaySkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NatGatewaySkuName Standard { get; } = new NatGatewaySkuName("Standard");

        public static bool operator ==(NatGatewaySkuName left, NatGatewaySkuName right) => left.Equals(right);
        public static bool operator !=(NatGatewaySkuName left, NatGatewaySkuName right) => !left.Equals(right);

        public static explicit operator string(NatGatewaySkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NatGatewaySkuName other && Equals(other);
        public bool Equals(NatGatewaySkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Comparison type to use for matching with the variable value.
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator Any { get; } = new Operator("Any");
        public static Operator IPMatch { get; } = new Operator("IPMatch");
        public static Operator GeoMatch { get; } = new Operator("GeoMatch");
        public static Operator Equal { get; } = new Operator("Equal");
        public static Operator Contains { get; } = new Operator("Contains");
        public static Operator LessThan { get; } = new Operator("LessThan");
        public static Operator GreaterThan { get; } = new Operator("GreaterThan");
        public static Operator LessThanOrEqual { get; } = new Operator("LessThanOrEqual");
        public static Operator GreaterThanOrEqual { get; } = new Operator("GreaterThanOrEqual");
        public static Operator BeginsWith { get; } = new Operator("BeginsWith");
        public static Operator EndsWith { get; } = new Operator("EndsWith");
        public static Operator RegEx { get; } = new Operator("RegEx");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Connection monitor output destination type. Currently, only "Workspace" is supported.
    /// </summary>
    [EnumType]
    public readonly struct OutputType : IEquatable<OutputType>
    {
        private readonly string _value;

        private OutputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OutputType Workspace { get; } = new OutputType("Workspace");

        public static bool operator ==(OutputType left, OutputType right) => left.Equals(right);
        public static bool operator !=(OutputType left, OutputType right) => !left.Equals(right);

        public static explicit operator string(OutputType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OutputType other && Equals(other);
        public bool Equals(OutputType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The variable to be excluded.
    /// </summary>
    [EnumType]
    public readonly struct OwaspCrsExclusionEntryMatchVariable : IEquatable<OwaspCrsExclusionEntryMatchVariable>
    {
        private readonly string _value;

        private OwaspCrsExclusionEntryMatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OwaspCrsExclusionEntryMatchVariable RequestHeaderNames { get; } = new OwaspCrsExclusionEntryMatchVariable("RequestHeaderNames");
        public static OwaspCrsExclusionEntryMatchVariable RequestCookieNames { get; } = new OwaspCrsExclusionEntryMatchVariable("RequestCookieNames");
        public static OwaspCrsExclusionEntryMatchVariable RequestArgNames { get; } = new OwaspCrsExclusionEntryMatchVariable("RequestArgNames");

        public static bool operator ==(OwaspCrsExclusionEntryMatchVariable left, OwaspCrsExclusionEntryMatchVariable right) => left.Equals(right);
        public static bool operator !=(OwaspCrsExclusionEntryMatchVariable left, OwaspCrsExclusionEntryMatchVariable right) => !left.Equals(right);

        public static explicit operator string(OwaspCrsExclusionEntryMatchVariable value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OwaspCrsExclusionEntryMatchVariable other && Equals(other);
        public bool Equals(OwaspCrsExclusionEntryMatchVariable other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
    /// </summary>
    [EnumType]
    public readonly struct OwaspCrsExclusionEntrySelectorMatchOperator : IEquatable<OwaspCrsExclusionEntrySelectorMatchOperator>
    {
        private readonly string _value;

        private OwaspCrsExclusionEntrySelectorMatchOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OwaspCrsExclusionEntrySelectorMatchOperator EqualsValue { get; } = new OwaspCrsExclusionEntrySelectorMatchOperator("Equals");
        public static OwaspCrsExclusionEntrySelectorMatchOperator Contains { get; } = new OwaspCrsExclusionEntrySelectorMatchOperator("Contains");
        public static OwaspCrsExclusionEntrySelectorMatchOperator StartsWith { get; } = new OwaspCrsExclusionEntrySelectorMatchOperator("StartsWith");
        public static OwaspCrsExclusionEntrySelectorMatchOperator EndsWith { get; } = new OwaspCrsExclusionEntrySelectorMatchOperator("EndsWith");
        public static OwaspCrsExclusionEntrySelectorMatchOperator EqualsAny { get; } = new OwaspCrsExclusionEntrySelectorMatchOperator("EqualsAny");

        public static bool operator ==(OwaspCrsExclusionEntrySelectorMatchOperator left, OwaspCrsExclusionEntrySelectorMatchOperator right) => left.Equals(right);
        public static bool operator !=(OwaspCrsExclusionEntrySelectorMatchOperator left, OwaspCrsExclusionEntrySelectorMatchOperator right) => !left.Equals(right);

        public static explicit operator string(OwaspCrsExclusionEntrySelectorMatchOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OwaspCrsExclusionEntrySelectorMatchOperator other && Equals(other);
        public bool Equals(OwaspCrsExclusionEntrySelectorMatchOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol to be filtered on.
    /// </summary>
    [EnumType]
    public readonly struct PcProtocol : IEquatable<PcProtocol>
    {
        private readonly string _value;

        private PcProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PcProtocol TCP { get; } = new PcProtocol("TCP");
        public static PcProtocol UDP { get; } = new PcProtocol("UDP");
        public static PcProtocol Any { get; } = new PcProtocol("Any");

        public static bool operator ==(PcProtocol left, PcProtocol right) => left.Equals(right);
        public static bool operator !=(PcProtocol left, PcProtocol right) => !left.Equals(right);

        public static explicit operator string(PcProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PcProtocol other && Equals(other);
        public bool Equals(PcProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Pfs Group used in IKE Phase 2 for new child SA.
    /// </summary>
    [EnumType]
    public readonly struct PfsGroup : IEquatable<PfsGroup>
    {
        private readonly string _value;

        private PfsGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PfsGroup None { get; } = new PfsGroup("None");
        public static PfsGroup PFS1 { get; } = new PfsGroup("PFS1");
        public static PfsGroup PFS2 { get; } = new PfsGroup("PFS2");
        public static PfsGroup PFS2048 { get; } = new PfsGroup("PFS2048");
        public static PfsGroup ECP256 { get; } = new PfsGroup("ECP256");
        public static PfsGroup ECP384 { get; } = new PfsGroup("ECP384");
        public static PfsGroup PFS24 { get; } = new PfsGroup("PFS24");
        public static PfsGroup PFS14 { get; } = new PfsGroup("PFS14");
        public static PfsGroup PFSMM { get; } = new PfsGroup("PFSMM");

        public static bool operator ==(PfsGroup left, PfsGroup right) => left.Equals(right);
        public static bool operator !=(PfsGroup left, PfsGroup right) => !left.Equals(right);

        public static explicit operator string(PfsGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PfsGroup other && Equals(other);
        public bool Equals(PfsGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.
    /// </summary>
    [EnumType]
    public readonly struct PolicyEnabledState : IEquatable<PolicyEnabledState>
    {
        private readonly string _value;

        private PolicyEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyEnabledState Disabled { get; } = new PolicyEnabledState("Disabled");
        public static PolicyEnabledState Enabled { get; } = new PolicyEnabledState("Enabled");

        public static bool operator ==(PolicyEnabledState left, PolicyEnabledState right) => left.Equals(right);
        public static bool operator !=(PolicyEnabledState left, PolicyEnabledState right) => !left.Equals(right);

        public static explicit operator string(PolicyEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyEnabledState other && Equals(other);
        public bool Equals(PolicyEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if it is in detection mode or prevention mode at policy level.
    /// </summary>
    [EnumType]
    public readonly struct PolicyMode : IEquatable<PolicyMode>
    {
        private readonly string _value;

        private PolicyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyMode Prevention { get; } = new PolicyMode("Prevention");
        public static PolicyMode Detection { get; } = new PolicyMode("Detection");

        public static bool operator ==(PolicyMode left, PolicyMode right) => left.Equals(right);
        public static bool operator !=(PolicyMode left, PolicyMode right) => !left.Equals(right);

        public static explicit operator string(PolicyMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyMode other && Equals(other);
        public bool Equals(PolicyMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
    /// </summary>
    [EnumType]
    public readonly struct PreferredIPVersion : IEquatable<PreferredIPVersion>
    {
        private readonly string _value;

        private PreferredIPVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PreferredIPVersion IPv4 { get; } = new PreferredIPVersion("IPv4");
        public static PreferredIPVersion IPv6 { get; } = new PreferredIPVersion("IPv6");

        public static bool operator ==(PreferredIPVersion left, PreferredIPVersion right) => left.Equals(right);
        public static bool operator !=(PreferredIPVersion left, PreferredIPVersion right) => !left.Equals(right);

        public static explicit operator string(PreferredIPVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PreferredIPVersion other && Equals(other);
        public bool Equals(PreferredIPVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
    /// </summary>
    [EnumType]
    public readonly struct ProbeProtocol : IEquatable<ProbeProtocol>
    {
        private readonly string _value;

        private ProbeProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProbeProtocol Http { get; } = new ProbeProtocol("Http");
        public static ProbeProtocol Tcp { get; } = new ProbeProtocol("Tcp");
        public static ProbeProtocol Https { get; } = new ProbeProtocol("Https");

        public static bool operator ==(ProbeProtocol left, ProbeProtocol right) => left.Equals(right);
        public static bool operator !=(ProbeProtocol left, ProbeProtocol right) => !left.Equals(right);

        public static explicit operator string(ProbeProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProbeProtocol other && Equals(other);
        public bool Equals(ProbeProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The profile-level monitoring status of the Traffic Manager profile.
    /// </summary>
    [EnumType]
    public readonly struct ProfileMonitorStatus : IEquatable<ProfileMonitorStatus>
    {
        private readonly string _value;

        private ProfileMonitorStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProfileMonitorStatus CheckingEndpoints { get; } = new ProfileMonitorStatus("CheckingEndpoints");
        public static ProfileMonitorStatus Online { get; } = new ProfileMonitorStatus("Online");
        public static ProfileMonitorStatus Degraded { get; } = new ProfileMonitorStatus("Degraded");
        public static ProfileMonitorStatus Disabled { get; } = new ProfileMonitorStatus("Disabled");
        public static ProfileMonitorStatus Inactive { get; } = new ProfileMonitorStatus("Inactive");

        public static bool operator ==(ProfileMonitorStatus left, ProfileMonitorStatus right) => left.Equals(right);
        public static bool operator !=(ProfileMonitorStatus left, ProfileMonitorStatus right) => !left.Equals(right);

        public static explicit operator string(ProfileMonitorStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProfileMonitorStatus other && Equals(other);
        public bool Equals(ProfileMonitorStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the Traffic Manager profile.
    /// </summary>
    [EnumType]
    public readonly struct ProfileStatus : IEquatable<ProfileStatus>
    {
        private readonly string _value;

        private ProfileStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProfileStatus Enabled { get; } = new ProfileStatus("Enabled");
        public static ProfileStatus Disabled { get; } = new ProfileStatus("Disabled");

        public static bool operator ==(ProfileStatus left, ProfileStatus right) => left.Equals(right);
        public static bool operator !=(ProfileStatus left, ProfileStatus right) => !left.Equals(right);

        public static explicit operator string(ProfileStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProfileStatus other && Equals(other);
        public bool Equals(ProfileStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// RNM supported protocol types.
    /// </summary>
    [EnumType]
    public readonly struct ProtocolType : IEquatable<ProtocolType>
    {
        private readonly string _value;

        private ProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtocolType DoNotUse { get; } = new ProtocolType("DoNotUse");
        public static ProtocolType Icmp { get; } = new ProtocolType("Icmp");
        public static ProtocolType Tcp { get; } = new ProtocolType("Tcp");
        public static ProtocolType Udp { get; } = new ProtocolType("Udp");
        public static ProtocolType Gre { get; } = new ProtocolType("Gre");
        public static ProtocolType Esp { get; } = new ProtocolType("Esp");
        public static ProtocolType Ah { get; } = new ProtocolType("Ah");
        public static ProtocolType Vxlan { get; } = new ProtocolType("Vxlan");
        public static ProtocolType All { get; } = new ProtocolType("All");

        public static bool operator ==(ProtocolType left, ProtocolType right) => left.Equals(right);
        public static bool operator !=(ProtocolType left, ProtocolType right) => !left.Equals(right);

        public static explicit operator string(ProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtocolType other && Equals(other);
        public bool Equals(ProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of a public IP address SKU.
    /// </summary>
    [EnumType]
    public readonly struct PublicIPAddressSkuName : IEquatable<PublicIPAddressSkuName>
    {
        private readonly string _value;

        private PublicIPAddressSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicIPAddressSkuName Basic { get; } = new PublicIPAddressSkuName("Basic");
        public static PublicIPAddressSkuName Standard { get; } = new PublicIPAddressSkuName("Standard");

        public static bool operator ==(PublicIPAddressSkuName left, PublicIPAddressSkuName right) => left.Equals(right);
        public static bool operator !=(PublicIPAddressSkuName left, PublicIPAddressSkuName right) => !left.Equals(right);

        public static explicit operator string(PublicIPAddressSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicIPAddressSkuName other && Equals(other);
        public bool Equals(PublicIPAddressSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of a public IP address SKU.
    /// </summary>
    [EnumType]
    public readonly struct PublicIPAddressSkuTier : IEquatable<PublicIPAddressSkuTier>
    {
        private readonly string _value;

        private PublicIPAddressSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicIPAddressSkuTier Regional { get; } = new PublicIPAddressSkuTier("Regional");
        public static PublicIPAddressSkuTier Global { get; } = new PublicIPAddressSkuTier("Global");

        public static bool operator ==(PublicIPAddressSkuTier left, PublicIPAddressSkuTier right) => left.Equals(right);
        public static bool operator !=(PublicIPAddressSkuTier left, PublicIPAddressSkuTier right) => !left.Equals(right);

        public static explicit operator string(PublicIPAddressSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicIPAddressSkuTier other && Equals(other);
        public bool Equals(PublicIPAddressSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of a public IP prefix SKU.
    /// </summary>
    [EnumType]
    public readonly struct PublicIPPrefixSkuName : IEquatable<PublicIPPrefixSkuName>
    {
        private readonly string _value;

        private PublicIPPrefixSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicIPPrefixSkuName Standard { get; } = new PublicIPPrefixSkuName("Standard");

        public static bool operator ==(PublicIPPrefixSkuName left, PublicIPPrefixSkuName right) => left.Equals(right);
        public static bool operator !=(PublicIPPrefixSkuName left, PublicIPPrefixSkuName right) => !left.Equals(right);

        public static explicit operator string(PublicIPPrefixSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicIPPrefixSkuName other && Equals(other);
        public bool Equals(PublicIPPrefixSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of a public IP prefix SKU.
    /// </summary>
    [EnumType]
    public readonly struct PublicIPPrefixSkuTier : IEquatable<PublicIPPrefixSkuTier>
    {
        private readonly string _value;

        private PublicIPPrefixSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicIPPrefixSkuTier Regional { get; } = new PublicIPPrefixSkuTier("Regional");
        public static PublicIPPrefixSkuTier Global { get; } = new PublicIPPrefixSkuTier("Global");

        public static bool operator ==(PublicIPPrefixSkuTier left, PublicIPPrefixSkuTier right) => left.Equals(right);
        public static bool operator !=(PublicIPPrefixSkuTier left, PublicIPPrefixSkuTier right) => !left.Equals(right);

        public static explicit operator string(PublicIPPrefixSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicIPPrefixSkuTier other && Equals(other);
        public bool Equals(PublicIPPrefixSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned, UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rule type of the rule.
    /// </summary>
    [EnumType]
    public readonly struct RouteFilterRuleType : IEquatable<RouteFilterRuleType>
    {
        private readonly string _value;

        private RouteFilterRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RouteFilterRuleType Community { get; } = new RouteFilterRuleType("Community");

        public static bool operator ==(RouteFilterRuleType left, RouteFilterRuleType right) => left.Equals(right);
        public static bool operator !=(RouteFilterRuleType left, RouteFilterRuleType right) => !left.Equals(right);

        public static explicit operator string(RouteFilterRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RouteFilterRuleType other && Equals(other);
        public bool Equals(RouteFilterRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of Azure hop the packet should be sent to.
    /// </summary>
    [EnumType]
    public readonly struct RouteNextHopType : IEquatable<RouteNextHopType>
    {
        private readonly string _value;

        private RouteNextHopType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RouteNextHopType VirtualNetworkGateway { get; } = new RouteNextHopType("VirtualNetworkGateway");
        public static RouteNextHopType VnetLocal { get; } = new RouteNextHopType("VnetLocal");
        public static RouteNextHopType Internet { get; } = new RouteNextHopType("Internet");
        public static RouteNextHopType VirtualAppliance { get; } = new RouteNextHopType("VirtualAppliance");
        public static RouteNextHopType None { get; } = new RouteNextHopType("None");

        public static bool operator ==(RouteNextHopType left, RouteNextHopType right) => left.Equals(right);
        public static bool operator !=(RouteNextHopType left, RouteNextHopType right) => !left.Equals(right);

        public static explicit operator string(RouteNextHopType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RouteNextHopType other && Equals(other);
        public bool Equals(RouteNextHopType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct RoutingRuleEnabledState : IEquatable<RoutingRuleEnabledState>
    {
        private readonly string _value;

        private RoutingRuleEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingRuleEnabledState Enabled { get; } = new RoutingRuleEnabledState("Enabled");
        public static RoutingRuleEnabledState Disabled { get; } = new RoutingRuleEnabledState("Disabled");

        public static bool operator ==(RoutingRuleEnabledState left, RoutingRuleEnabledState right) => left.Equals(right);
        public static bool operator !=(RoutingRuleEnabledState left, RoutingRuleEnabledState right) => !left.Equals(right);

        public static explicit operator string(RoutingRuleEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingRuleEnabledState other && Equals(other);
        public bool Equals(RoutingRuleEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes type of rule.
    /// </summary>
    [EnumType]
    public readonly struct RuleType : IEquatable<RuleType>
    {
        private readonly string _value;

        private RuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleType MatchRule { get; } = new RuleType("MatchRule");
        public static RuleType RateLimitRule { get; } = new RuleType("RateLimitRule");

        public static bool operator ==(RuleType left, RuleType right) => left.Equals(right);
        public static bool operator !=(RuleType left, RuleType right) => !left.Equals(right);

        public static explicit operator string(RuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleType other && Equals(other);
        public bool Equals(RuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Match Variable
    /// </summary>
    [EnumType]
    public readonly struct RulesEngineMatchVariable : IEquatable<RulesEngineMatchVariable>
    {
        private readonly string _value;

        private RulesEngineMatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RulesEngineMatchVariable IsMobile { get; } = new RulesEngineMatchVariable("IsMobile");
        public static RulesEngineMatchVariable RemoteAddr { get; } = new RulesEngineMatchVariable("RemoteAddr");
        public static RulesEngineMatchVariable RequestMethod { get; } = new RulesEngineMatchVariable("RequestMethod");
        public static RulesEngineMatchVariable QueryString { get; } = new RulesEngineMatchVariable("QueryString");
        public static RulesEngineMatchVariable PostArgs { get; } = new RulesEngineMatchVariable("PostArgs");
        public static RulesEngineMatchVariable RequestUri { get; } = new RulesEngineMatchVariable("RequestUri");
        public static RulesEngineMatchVariable RequestPath { get; } = new RulesEngineMatchVariable("RequestPath");
        public static RulesEngineMatchVariable RequestFilename { get; } = new RulesEngineMatchVariable("RequestFilename");
        public static RulesEngineMatchVariable RequestFilenameExtension { get; } = new RulesEngineMatchVariable("RequestFilenameExtension");
        public static RulesEngineMatchVariable RequestHeader { get; } = new RulesEngineMatchVariable("RequestHeader");
        public static RulesEngineMatchVariable RequestBody { get; } = new RulesEngineMatchVariable("RequestBody");
        public static RulesEngineMatchVariable RequestScheme { get; } = new RulesEngineMatchVariable("RequestScheme");

        public static bool operator ==(RulesEngineMatchVariable left, RulesEngineMatchVariable right) => left.Equals(right);
        public static bool operator !=(RulesEngineMatchVariable left, RulesEngineMatchVariable right) => !left.Equals(right);

        public static explicit operator string(RulesEngineMatchVariable value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RulesEngineMatchVariable other && Equals(other);
        public bool Equals(RulesEngineMatchVariable other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to apply to the match condition.
    /// </summary>
    [EnumType]
    public readonly struct RulesEngineOperator : IEquatable<RulesEngineOperator>
    {
        private readonly string _value;

        private RulesEngineOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RulesEngineOperator Any { get; } = new RulesEngineOperator("Any");
        public static RulesEngineOperator IPMatch { get; } = new RulesEngineOperator("IPMatch");
        public static RulesEngineOperator GeoMatch { get; } = new RulesEngineOperator("GeoMatch");
        public static RulesEngineOperator Equal { get; } = new RulesEngineOperator("Equal");
        public static RulesEngineOperator Contains { get; } = new RulesEngineOperator("Contains");
        public static RulesEngineOperator LessThan { get; } = new RulesEngineOperator("LessThan");
        public static RulesEngineOperator GreaterThan { get; } = new RulesEngineOperator("GreaterThan");
        public static RulesEngineOperator LessThanOrEqual { get; } = new RulesEngineOperator("LessThanOrEqual");
        public static RulesEngineOperator GreaterThanOrEqual { get; } = new RulesEngineOperator("GreaterThanOrEqual");
        public static RulesEngineOperator BeginsWith { get; } = new RulesEngineOperator("BeginsWith");
        public static RulesEngineOperator EndsWith { get; } = new RulesEngineOperator("EndsWith");

        public static bool operator ==(RulesEngineOperator left, RulesEngineOperator right) => left.Equals(right);
        public static bool operator !=(RulesEngineOperator left, RulesEngineOperator right) => !left.Equals(right);

        public static explicit operator string(RulesEngineOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RulesEngineOperator other && Equals(other);
        public bool Equals(RulesEngineOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The security provider name.
    /// </summary>
    [EnumType]
    public readonly struct SecurityProviderName : IEquatable<SecurityProviderName>
    {
        private readonly string _value;

        private SecurityProviderName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityProviderName ZScaler { get; } = new SecurityProviderName("ZScaler");
        public static SecurityProviderName IBoss { get; } = new SecurityProviderName("IBoss");
        public static SecurityProviderName Checkpoint { get; } = new SecurityProviderName("Checkpoint");

        public static bool operator ==(SecurityProviderName left, SecurityProviderName right) => left.Equals(right);
        public static bool operator !=(SecurityProviderName left, SecurityProviderName right) => !left.Equals(right);

        public static explicit operator string(SecurityProviderName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityProviderName other && Equals(other);
        public bool Equals(SecurityProviderName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network traffic is allowed or denied.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleAccess : IEquatable<SecurityRuleAccess>
    {
        private readonly string _value;

        private SecurityRuleAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityRuleAccess Allow { get; } = new SecurityRuleAccess("Allow");
        public static SecurityRuleAccess Deny { get; } = new SecurityRuleAccess("Deny");

        public static bool operator ==(SecurityRuleAccess left, SecurityRuleAccess right) => left.Equals(right);
        public static bool operator !=(SecurityRuleAccess left, SecurityRuleAccess right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleAccess other && Equals(other);
        public bool Equals(SecurityRuleAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleDirection : IEquatable<SecurityRuleDirection>
    {
        private readonly string _value;

        private SecurityRuleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityRuleDirection Inbound { get; } = new SecurityRuleDirection("Inbound");
        public static SecurityRuleDirection Outbound { get; } = new SecurityRuleDirection("Outbound");

        public static bool operator ==(SecurityRuleDirection left, SecurityRuleDirection right) => left.Equals(right);
        public static bool operator !=(SecurityRuleDirection left, SecurityRuleDirection right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleDirection other && Equals(other);
        public bool Equals(SecurityRuleDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network protocol this rule applies to.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleProtocol : IEquatable<SecurityRuleProtocol>
    {
        private readonly string _value;

        private SecurityRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityRuleProtocol Tcp { get; } = new SecurityRuleProtocol("Tcp");
        public static SecurityRuleProtocol Udp { get; } = new SecurityRuleProtocol("Udp");
        public static SecurityRuleProtocol Icmp { get; } = new SecurityRuleProtocol("Icmp");
        public static SecurityRuleProtocol Esp { get; } = new SecurityRuleProtocol("Esp");
        public static SecurityRuleProtocol Asterisk { get; } = new SecurityRuleProtocol("*");
        public static SecurityRuleProtocol Ah { get; } = new SecurityRuleProtocol("Ah");

        public static bool operator ==(SecurityRuleProtocol left, SecurityRuleProtocol right) => left.Equals(right);
        public static bool operator !=(SecurityRuleProtocol left, SecurityRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleProtocol other && Equals(other);
        public bool Equals(SecurityRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The ServiceProviderProvisioningState state of the resource.
    /// </summary>
    [EnumType]
    public readonly struct ServiceProviderProvisioningState : IEquatable<ServiceProviderProvisioningState>
    {
        private readonly string _value;

        private ServiceProviderProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceProviderProvisioningState NotProvisioned { get; } = new ServiceProviderProvisioningState("NotProvisioned");
        public static ServiceProviderProvisioningState Provisioning { get; } = new ServiceProviderProvisioningState("Provisioning");
        public static ServiceProviderProvisioningState Provisioned { get; } = new ServiceProviderProvisioningState("Provisioned");
        public static ServiceProviderProvisioningState Deprovisioning { get; } = new ServiceProviderProvisioningState("Deprovisioning");

        public static bool operator ==(ServiceProviderProvisioningState left, ServiceProviderProvisioningState right) => left.Equals(right);
        public static bool operator !=(ServiceProviderProvisioningState left, ServiceProviderProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ServiceProviderProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceProviderProvisioningState other && Equals(other);
        public bool Equals(ServiceProviderProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct SessionAffinityEnabledState : IEquatable<SessionAffinityEnabledState>
    {
        private readonly string _value;

        private SessionAffinityEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionAffinityEnabledState Enabled { get; } = new SessionAffinityEnabledState("Enabled");
        public static SessionAffinityEnabledState Disabled { get; } = new SessionAffinityEnabledState("Disabled");

        public static bool operator ==(SessionAffinityEnabledState left, SessionAffinityEnabledState right) => left.Equals(right);
        public static bool operator !=(SessionAffinityEnabledState left, SessionAffinityEnabledState right) => !left.Equals(right);

        public static explicit operator string(SessionAffinityEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionAffinityEnabledState other && Equals(other);
        public bool Equals(SessionAffinityEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the Experiment
    /// </summary>
    [EnumType]
    public readonly struct State : IEquatable<State>
    {
        private readonly string _value;

        private State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static State Enabled { get; } = new State("Enabled");
        public static State Disabled { get; } = new State("Disabled");

        public static bool operator ==(State left, State right) => left.Equals(right);
        public static bool operator !=(State left, State right) => !left.Equals(right);

        public static explicit operator string(State value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is State other && Equals(other);
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The traffic routing method of the Traffic Manager profile.
    /// </summary>
    [EnumType]
    public readonly struct TrafficRoutingMethod : IEquatable<TrafficRoutingMethod>
    {
        private readonly string _value;

        private TrafficRoutingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TrafficRoutingMethod Performance { get; } = new TrafficRoutingMethod("Performance");
        public static TrafficRoutingMethod Priority { get; } = new TrafficRoutingMethod("Priority");
        public static TrafficRoutingMethod Weighted { get; } = new TrafficRoutingMethod("Weighted");
        public static TrafficRoutingMethod Geographic { get; } = new TrafficRoutingMethod("Geographic");
        public static TrafficRoutingMethod MultiValue { get; } = new TrafficRoutingMethod("MultiValue");
        public static TrafficRoutingMethod Subnet { get; } = new TrafficRoutingMethod("Subnet");

        public static bool operator ==(TrafficRoutingMethod left, TrafficRoutingMethod right) => left.Equals(right);
        public static bool operator !=(TrafficRoutingMethod left, TrafficRoutingMethod right) => !left.Equals(right);

        public static explicit operator string(TrafficRoutingMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrafficRoutingMethod other && Equals(other);
        public bool Equals(TrafficRoutingMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
    /// </summary>
    [EnumType]
    public readonly struct TrafficViewEnrollmentStatus : IEquatable<TrafficViewEnrollmentStatus>
    {
        private readonly string _value;

        private TrafficViewEnrollmentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TrafficViewEnrollmentStatus Enabled { get; } = new TrafficViewEnrollmentStatus("Enabled");
        public static TrafficViewEnrollmentStatus Disabled { get; } = new TrafficViewEnrollmentStatus("Disabled");

        public static bool operator ==(TrafficViewEnrollmentStatus left, TrafficViewEnrollmentStatus right) => left.Equals(right);
        public static bool operator !=(TrafficViewEnrollmentStatus left, TrafficViewEnrollmentStatus right) => !left.Equals(right);

        public static explicit operator string(TrafficViewEnrollmentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrafficViewEnrollmentStatus other && Equals(other);
        public bool Equals(TrafficViewEnrollmentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes what transforms are applied before matching
    /// </summary>
    [EnumType]
    public readonly struct Transform : IEquatable<Transform>
    {
        private readonly string _value;

        private Transform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Transform Lowercase { get; } = new Transform("Lowercase");
        public static Transform Uppercase { get; } = new Transform("Uppercase");
        public static Transform Trim { get; } = new Transform("Trim");
        public static Transform UrlDecode { get; } = new Transform("UrlDecode");
        public static Transform UrlEncode { get; } = new Transform("UrlEncode");
        public static Transform RemoveNulls { get; } = new Transform("RemoveNulls");

        public static bool operator ==(Transform left, Transform right) => left.Equals(right);
        public static bool operator !=(Transform left, Transform right) => !left.Equals(right);

        public static explicit operator string(Transform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Transform other && Equals(other);
        public bool Equals(Transform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes what transforms applied before matching.
    /// </summary>
    [EnumType]
    public readonly struct TransformType : IEquatable<TransformType>
    {
        private readonly string _value;

        private TransformType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransformType Lowercase { get; } = new TransformType("Lowercase");
        public static TransformType Uppercase { get; } = new TransformType("Uppercase");
        public static TransformType Trim { get; } = new TransformType("Trim");
        public static TransformType UrlDecode { get; } = new TransformType("UrlDecode");
        public static TransformType UrlEncode { get; } = new TransformType("UrlEncode");
        public static TransformType RemoveNulls { get; } = new TransformType("RemoveNulls");

        public static bool operator ==(TransformType left, TransformType right) => left.Equals(right);
        public static bool operator !=(TransformType left, TransformType right) => !left.Equals(right);

        public static explicit operator string(TransformType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransformType other && Equals(other);
        public bool Equals(TransformType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The reference to the transport protocol used by the load balancing rule.
    /// </summary>
    [EnumType]
    public readonly struct TransportProtocol : IEquatable<TransportProtocol>
    {
        private readonly string _value;

        private TransportProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransportProtocol Udp { get; } = new TransportProtocol("Udp");
        public static TransportProtocol Tcp { get; } = new TransportProtocol("Tcp");
        public static TransportProtocol All { get; } = new TransportProtocol("All");

        public static bool operator ==(TransportProtocol left, TransportProtocol right) => left.Equals(right);
        public static bool operator !=(TransportProtocol left, TransportProtocol right) => !left.Equals(right);

        public static explicit operator string(TransportProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransportProtocol other && Equals(other);
        public bool Equals(TransportProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The connection mode for this connection.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkGatewayConnectionMode : IEquatable<VirtualNetworkGatewayConnectionMode>
    {
        private readonly string _value;

        private VirtualNetworkGatewayConnectionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkGatewayConnectionMode Default { get; } = new VirtualNetworkGatewayConnectionMode("Default");
        public static VirtualNetworkGatewayConnectionMode ResponderOnly { get; } = new VirtualNetworkGatewayConnectionMode("ResponderOnly");
        public static VirtualNetworkGatewayConnectionMode InitiatorOnly { get; } = new VirtualNetworkGatewayConnectionMode("InitiatorOnly");

        public static bool operator ==(VirtualNetworkGatewayConnectionMode left, VirtualNetworkGatewayConnectionMode right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkGatewayConnectionMode left, VirtualNetworkGatewayConnectionMode right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkGatewayConnectionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkGatewayConnectionMode other && Equals(other);
        public bool Equals(VirtualNetworkGatewayConnectionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Connection protocol used for this connection.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkGatewayConnectionProtocol : IEquatable<VirtualNetworkGatewayConnectionProtocol>
    {
        private readonly string _value;

        private VirtualNetworkGatewayConnectionProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkGatewayConnectionProtocol IKEv2 { get; } = new VirtualNetworkGatewayConnectionProtocol("IKEv2");
        public static VirtualNetworkGatewayConnectionProtocol IKEv1 { get; } = new VirtualNetworkGatewayConnectionProtocol("IKEv1");

        public static bool operator ==(VirtualNetworkGatewayConnectionProtocol left, VirtualNetworkGatewayConnectionProtocol right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkGatewayConnectionProtocol left, VirtualNetworkGatewayConnectionProtocol right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkGatewayConnectionProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkGatewayConnectionProtocol other && Equals(other);
        public bool Equals(VirtualNetworkGatewayConnectionProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gateway connection type.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkGatewayConnectionType : IEquatable<VirtualNetworkGatewayConnectionType>
    {
        private readonly string _value;

        private VirtualNetworkGatewayConnectionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkGatewayConnectionType IPsec { get; } = new VirtualNetworkGatewayConnectionType("IPsec");
        public static VirtualNetworkGatewayConnectionType Vnet2Vnet { get; } = new VirtualNetworkGatewayConnectionType("Vnet2Vnet");
        public static VirtualNetworkGatewayConnectionType ExpressRoute { get; } = new VirtualNetworkGatewayConnectionType("ExpressRoute");
        public static VirtualNetworkGatewayConnectionType VPNClient { get; } = new VirtualNetworkGatewayConnectionType("VPNClient");

        public static bool operator ==(VirtualNetworkGatewayConnectionType left, VirtualNetworkGatewayConnectionType right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkGatewayConnectionType left, VirtualNetworkGatewayConnectionType right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkGatewayConnectionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkGatewayConnectionType other && Equals(other);
        public bool Equals(VirtualNetworkGatewayConnectionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gateway SKU name.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkGatewaySkuName : IEquatable<VirtualNetworkGatewaySkuName>
    {
        private readonly string _value;

        private VirtualNetworkGatewaySkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkGatewaySkuName Basic { get; } = new VirtualNetworkGatewaySkuName("Basic");
        public static VirtualNetworkGatewaySkuName HighPerformance { get; } = new VirtualNetworkGatewaySkuName("HighPerformance");
        public static VirtualNetworkGatewaySkuName Standard { get; } = new VirtualNetworkGatewaySkuName("Standard");
        public static VirtualNetworkGatewaySkuName UltraPerformance { get; } = new VirtualNetworkGatewaySkuName("UltraPerformance");
        public static VirtualNetworkGatewaySkuName VpnGw1 { get; } = new VirtualNetworkGatewaySkuName("VpnGw1");
        public static VirtualNetworkGatewaySkuName VpnGw2 { get; } = new VirtualNetworkGatewaySkuName("VpnGw2");
        public static VirtualNetworkGatewaySkuName VpnGw3 { get; } = new VirtualNetworkGatewaySkuName("VpnGw3");
        public static VirtualNetworkGatewaySkuName VpnGw4 { get; } = new VirtualNetworkGatewaySkuName("VpnGw4");
        public static VirtualNetworkGatewaySkuName VpnGw5 { get; } = new VirtualNetworkGatewaySkuName("VpnGw5");
        public static VirtualNetworkGatewaySkuName VpnGw1AZ { get; } = new VirtualNetworkGatewaySkuName("VpnGw1AZ");
        public static VirtualNetworkGatewaySkuName VpnGw2AZ { get; } = new VirtualNetworkGatewaySkuName("VpnGw2AZ");
        public static VirtualNetworkGatewaySkuName VpnGw3AZ { get; } = new VirtualNetworkGatewaySkuName("VpnGw3AZ");
        public static VirtualNetworkGatewaySkuName VpnGw4AZ { get; } = new VirtualNetworkGatewaySkuName("VpnGw4AZ");
        public static VirtualNetworkGatewaySkuName VpnGw5AZ { get; } = new VirtualNetworkGatewaySkuName("VpnGw5AZ");
        public static VirtualNetworkGatewaySkuName ErGw1AZ { get; } = new VirtualNetworkGatewaySkuName("ErGw1AZ");
        public static VirtualNetworkGatewaySkuName ErGw2AZ { get; } = new VirtualNetworkGatewaySkuName("ErGw2AZ");
        public static VirtualNetworkGatewaySkuName ErGw3AZ { get; } = new VirtualNetworkGatewaySkuName("ErGw3AZ");

        public static bool operator ==(VirtualNetworkGatewaySkuName left, VirtualNetworkGatewaySkuName right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkGatewaySkuName left, VirtualNetworkGatewaySkuName right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkGatewaySkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkGatewaySkuName other && Equals(other);
        public bool Equals(VirtualNetworkGatewaySkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gateway SKU tier.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkGatewaySkuTier : IEquatable<VirtualNetworkGatewaySkuTier>
    {
        private readonly string _value;

        private VirtualNetworkGatewaySkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkGatewaySkuTier Basic { get; } = new VirtualNetworkGatewaySkuTier("Basic");
        public static VirtualNetworkGatewaySkuTier HighPerformance { get; } = new VirtualNetworkGatewaySkuTier("HighPerformance");
        public static VirtualNetworkGatewaySkuTier Standard { get; } = new VirtualNetworkGatewaySkuTier("Standard");
        public static VirtualNetworkGatewaySkuTier UltraPerformance { get; } = new VirtualNetworkGatewaySkuTier("UltraPerformance");
        public static VirtualNetworkGatewaySkuTier VpnGw1 { get; } = new VirtualNetworkGatewaySkuTier("VpnGw1");
        public static VirtualNetworkGatewaySkuTier VpnGw2 { get; } = new VirtualNetworkGatewaySkuTier("VpnGw2");
        public static VirtualNetworkGatewaySkuTier VpnGw3 { get; } = new VirtualNetworkGatewaySkuTier("VpnGw3");
        public static VirtualNetworkGatewaySkuTier VpnGw4 { get; } = new VirtualNetworkGatewaySkuTier("VpnGw4");
        public static VirtualNetworkGatewaySkuTier VpnGw5 { get; } = new VirtualNetworkGatewaySkuTier("VpnGw5");
        public static VirtualNetworkGatewaySkuTier VpnGw1AZ { get; } = new VirtualNetworkGatewaySkuTier("VpnGw1AZ");
        public static VirtualNetworkGatewaySkuTier VpnGw2AZ { get; } = new VirtualNetworkGatewaySkuTier("VpnGw2AZ");
        public static VirtualNetworkGatewaySkuTier VpnGw3AZ { get; } = new VirtualNetworkGatewaySkuTier("VpnGw3AZ");
        public static VirtualNetworkGatewaySkuTier VpnGw4AZ { get; } = new VirtualNetworkGatewaySkuTier("VpnGw4AZ");
        public static VirtualNetworkGatewaySkuTier VpnGw5AZ { get; } = new VirtualNetworkGatewaySkuTier("VpnGw5AZ");
        public static VirtualNetworkGatewaySkuTier ErGw1AZ { get; } = new VirtualNetworkGatewaySkuTier("ErGw1AZ");
        public static VirtualNetworkGatewaySkuTier ErGw2AZ { get; } = new VirtualNetworkGatewaySkuTier("ErGw2AZ");
        public static VirtualNetworkGatewaySkuTier ErGw3AZ { get; } = new VirtualNetworkGatewaySkuTier("ErGw3AZ");

        public static bool operator ==(VirtualNetworkGatewaySkuTier left, VirtualNetworkGatewaySkuTier right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkGatewaySkuTier left, VirtualNetworkGatewaySkuTier right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkGatewaySkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkGatewaySkuTier other && Equals(other);
        public bool Equals(VirtualNetworkGatewaySkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this virtual network gateway.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkGatewayType : IEquatable<VirtualNetworkGatewayType>
    {
        private readonly string _value;

        private VirtualNetworkGatewayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkGatewayType Vpn { get; } = new VirtualNetworkGatewayType("Vpn");
        public static VirtualNetworkGatewayType ExpressRoute { get; } = new VirtualNetworkGatewayType("ExpressRoute");
        public static VirtualNetworkGatewayType LocalGateway { get; } = new VirtualNetworkGatewayType("LocalGateway");

        public static bool operator ==(VirtualNetworkGatewayType left, VirtualNetworkGatewayType right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkGatewayType left, VirtualNetworkGatewayType right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkGatewayType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkGatewayType other && Equals(other);
        public bool Equals(VirtualNetworkGatewayType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the virtual network peering.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkPeeringState : IEquatable<VirtualNetworkPeeringState>
    {
        private readonly string _value;

        private VirtualNetworkPeeringState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkPeeringState Initiated { get; } = new VirtualNetworkPeeringState("Initiated");
        public static VirtualNetworkPeeringState Connected { get; } = new VirtualNetworkPeeringState("Connected");
        public static VirtualNetworkPeeringState Disconnected { get; } = new VirtualNetworkPeeringState("Disconnected");

        public static bool operator ==(VirtualNetworkPeeringState left, VirtualNetworkPeeringState right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkPeeringState left, VirtualNetworkPeeringState right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkPeeringState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkPeeringState other && Equals(other);
        public bool Equals(VirtualNetworkPeeringState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// VPN authentication types enabled for the VpnServerConfiguration.
    /// </summary>
    [EnumType]
    public readonly struct VpnAuthenticationType : IEquatable<VpnAuthenticationType>
    {
        private readonly string _value;

        private VpnAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpnAuthenticationType Certificate { get; } = new VpnAuthenticationType("Certificate");
        public static VpnAuthenticationType Radius { get; } = new VpnAuthenticationType("Radius");
        public static VpnAuthenticationType AAD { get; } = new VpnAuthenticationType("AAD");

        public static bool operator ==(VpnAuthenticationType left, VpnAuthenticationType right) => left.Equals(right);
        public static bool operator !=(VpnAuthenticationType left, VpnAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(VpnAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpnAuthenticationType other && Equals(other);
        public bool Equals(VpnAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// VPN client protocol enabled for the virtual network gateway.
    /// </summary>
    [EnumType]
    public readonly struct VpnClientProtocol : IEquatable<VpnClientProtocol>
    {
        private readonly string _value;

        private VpnClientProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpnClientProtocol IkeV2 { get; } = new VpnClientProtocol("IkeV2");
        public static VpnClientProtocol SSTP { get; } = new VpnClientProtocol("SSTP");
        public static VpnClientProtocol OpenVPN { get; } = new VpnClientProtocol("OpenVPN");

        public static bool operator ==(VpnClientProtocol left, VpnClientProtocol right) => left.Equals(right);
        public static bool operator !=(VpnClientProtocol left, VpnClientProtocol right) => !left.Equals(right);

        public static explicit operator string(VpnClientProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpnClientProtocol other && Equals(other);
        public bool Equals(VpnClientProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
    /// </summary>
    [EnumType]
    public readonly struct VpnGatewayGeneration : IEquatable<VpnGatewayGeneration>
    {
        private readonly string _value;

        private VpnGatewayGeneration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpnGatewayGeneration None { get; } = new VpnGatewayGeneration("None");
        public static VpnGatewayGeneration Generation1 { get; } = new VpnGatewayGeneration("Generation1");
        public static VpnGatewayGeneration Generation2 { get; } = new VpnGatewayGeneration("Generation2");

        public static bool operator ==(VpnGatewayGeneration left, VpnGatewayGeneration right) => left.Equals(right);
        public static bool operator !=(VpnGatewayGeneration left, VpnGatewayGeneration right) => !left.Equals(right);

        public static explicit operator string(VpnGatewayGeneration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpnGatewayGeneration other && Equals(other);
        public bool Equals(VpnGatewayGeneration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// VPN protocol enabled for the VpnServerConfiguration.
    /// </summary>
    [EnumType]
    public readonly struct VpnGatewayTunnelingProtocol : IEquatable<VpnGatewayTunnelingProtocol>
    {
        private readonly string _value;

        private VpnGatewayTunnelingProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpnGatewayTunnelingProtocol IkeV2 { get; } = new VpnGatewayTunnelingProtocol("IkeV2");
        public static VpnGatewayTunnelingProtocol OpenVPN { get; } = new VpnGatewayTunnelingProtocol("OpenVPN");

        public static bool operator ==(VpnGatewayTunnelingProtocol left, VpnGatewayTunnelingProtocol right) => left.Equals(right);
        public static bool operator !=(VpnGatewayTunnelingProtocol left, VpnGatewayTunnelingProtocol right) => !left.Equals(right);

        public static explicit operator string(VpnGatewayTunnelingProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpnGatewayTunnelingProtocol other && Equals(other);
        public bool Equals(VpnGatewayTunnelingProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this virtual network gateway.
    /// </summary>
    [EnumType]
    public readonly struct VpnType : IEquatable<VpnType>
    {
        private readonly string _value;

        private VpnType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpnType PolicyBased { get; } = new VpnType("PolicyBased");
        public static VpnType RouteBased { get; } = new VpnType("RouteBased");

        public static bool operator ==(VpnType left, VpnType right) => left.Equals(right);
        public static bool operator !=(VpnType left, VpnType right) => !left.Equals(right);

        public static explicit operator string(VpnType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpnType other && Equals(other);
        public bool Equals(VpnType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Actions.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallAction : IEquatable<WebApplicationFirewallAction>
    {
        private readonly string _value;

        private WebApplicationFirewallAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallAction Allow { get; } = new WebApplicationFirewallAction("Allow");
        public static WebApplicationFirewallAction Block { get; } = new WebApplicationFirewallAction("Block");
        public static WebApplicationFirewallAction Log { get; } = new WebApplicationFirewallAction("Log");

        public static bool operator ==(WebApplicationFirewallAction left, WebApplicationFirewallAction right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallAction left, WebApplicationFirewallAction right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallAction other && Equals(other);
        public bool Equals(WebApplicationFirewallAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the policy.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallEnabledState : IEquatable<WebApplicationFirewallEnabledState>
    {
        private readonly string _value;

        private WebApplicationFirewallEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallEnabledState Disabled { get; } = new WebApplicationFirewallEnabledState("Disabled");
        public static WebApplicationFirewallEnabledState Enabled { get; } = new WebApplicationFirewallEnabledState("Enabled");

        public static bool operator ==(WebApplicationFirewallEnabledState left, WebApplicationFirewallEnabledState right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallEnabledState left, WebApplicationFirewallEnabledState right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallEnabledState other && Equals(other);
        public bool Equals(WebApplicationFirewallEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Match Variable.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallMatchVariable : IEquatable<WebApplicationFirewallMatchVariable>
    {
        private readonly string _value;

        private WebApplicationFirewallMatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallMatchVariable RemoteAddr { get; } = new WebApplicationFirewallMatchVariable("RemoteAddr");
        public static WebApplicationFirewallMatchVariable RequestMethod { get; } = new WebApplicationFirewallMatchVariable("RequestMethod");
        public static WebApplicationFirewallMatchVariable QueryString { get; } = new WebApplicationFirewallMatchVariable("QueryString");
        public static WebApplicationFirewallMatchVariable PostArgs { get; } = new WebApplicationFirewallMatchVariable("PostArgs");
        public static WebApplicationFirewallMatchVariable RequestUri { get; } = new WebApplicationFirewallMatchVariable("RequestUri");
        public static WebApplicationFirewallMatchVariable RequestHeaders { get; } = new WebApplicationFirewallMatchVariable("RequestHeaders");
        public static WebApplicationFirewallMatchVariable RequestBody { get; } = new WebApplicationFirewallMatchVariable("RequestBody");
        public static WebApplicationFirewallMatchVariable RequestCookies { get; } = new WebApplicationFirewallMatchVariable("RequestCookies");

        public static bool operator ==(WebApplicationFirewallMatchVariable left, WebApplicationFirewallMatchVariable right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallMatchVariable left, WebApplicationFirewallMatchVariable right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallMatchVariable value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallMatchVariable other && Equals(other);
        public bool Equals(WebApplicationFirewallMatchVariable other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode of the policy.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallMode : IEquatable<WebApplicationFirewallMode>
    {
        private readonly string _value;

        private WebApplicationFirewallMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallMode Prevention { get; } = new WebApplicationFirewallMode("Prevention");
        public static WebApplicationFirewallMode Detection { get; } = new WebApplicationFirewallMode("Detection");

        public static bool operator ==(WebApplicationFirewallMode left, WebApplicationFirewallMode right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallMode left, WebApplicationFirewallMode right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallMode other && Equals(other);
        public bool Equals(WebApplicationFirewallMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operator to be matched.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallOperator : IEquatable<WebApplicationFirewallOperator>
    {
        private readonly string _value;

        private WebApplicationFirewallOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallOperator IPMatch { get; } = new WebApplicationFirewallOperator("IPMatch");
        public static WebApplicationFirewallOperator Equal { get; } = new WebApplicationFirewallOperator("Equal");
        public static WebApplicationFirewallOperator Contains { get; } = new WebApplicationFirewallOperator("Contains");
        public static WebApplicationFirewallOperator LessThan { get; } = new WebApplicationFirewallOperator("LessThan");
        public static WebApplicationFirewallOperator GreaterThan { get; } = new WebApplicationFirewallOperator("GreaterThan");
        public static WebApplicationFirewallOperator LessThanOrEqual { get; } = new WebApplicationFirewallOperator("LessThanOrEqual");
        public static WebApplicationFirewallOperator GreaterThanOrEqual { get; } = new WebApplicationFirewallOperator("GreaterThanOrEqual");
        public static WebApplicationFirewallOperator BeginsWith { get; } = new WebApplicationFirewallOperator("BeginsWith");
        public static WebApplicationFirewallOperator EndsWith { get; } = new WebApplicationFirewallOperator("EndsWith");
        public static WebApplicationFirewallOperator Regex { get; } = new WebApplicationFirewallOperator("Regex");
        public static WebApplicationFirewallOperator GeoMatch { get; } = new WebApplicationFirewallOperator("GeoMatch");

        public static bool operator ==(WebApplicationFirewallOperator left, WebApplicationFirewallOperator right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallOperator left, WebApplicationFirewallOperator right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallOperator other && Equals(other);
        public bool Equals(WebApplicationFirewallOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rule type.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallRuleType : IEquatable<WebApplicationFirewallRuleType>
    {
        private readonly string _value;

        private WebApplicationFirewallRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallRuleType MatchRule { get; } = new WebApplicationFirewallRuleType("MatchRule");
        public static WebApplicationFirewallRuleType Invalid { get; } = new WebApplicationFirewallRuleType("Invalid");

        public static bool operator ==(WebApplicationFirewallRuleType left, WebApplicationFirewallRuleType right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallRuleType left, WebApplicationFirewallRuleType right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallRuleType other && Equals(other);
        public bool Equals(WebApplicationFirewallRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Transforms applied before matching.
    /// </summary>
    [EnumType]
    public readonly struct WebApplicationFirewallTransform : IEquatable<WebApplicationFirewallTransform>
    {
        private readonly string _value;

        private WebApplicationFirewallTransform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebApplicationFirewallTransform Lowercase { get; } = new WebApplicationFirewallTransform("Lowercase");
        public static WebApplicationFirewallTransform Trim { get; } = new WebApplicationFirewallTransform("Trim");
        public static WebApplicationFirewallTransform UrlDecode { get; } = new WebApplicationFirewallTransform("UrlDecode");
        public static WebApplicationFirewallTransform UrlEncode { get; } = new WebApplicationFirewallTransform("UrlEncode");
        public static WebApplicationFirewallTransform RemoveNulls { get; } = new WebApplicationFirewallTransform("RemoveNulls");
        public static WebApplicationFirewallTransform HtmlEntityDecode { get; } = new WebApplicationFirewallTransform("HtmlEntityDecode");

        public static bool operator ==(WebApplicationFirewallTransform left, WebApplicationFirewallTransform right) => left.Equals(right);
        public static bool operator !=(WebApplicationFirewallTransform left, WebApplicationFirewallTransform right) => !left.Equals(right);

        public static explicit operator string(WebApplicationFirewallTransform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebApplicationFirewallTransform other && Equals(other);
        public bool Equals(WebApplicationFirewallTransform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this DNS zone (Public or Private).
    /// </summary>
    [EnumType]
    public readonly struct ZoneType : IEquatable<ZoneType>
    {
        private readonly string _value;

        private ZoneType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ZoneType Public { get; } = new ZoneType("Public");
        public static ZoneType Private { get; } = new ZoneType("Private");

        public static bool operator ==(ZoneType left, ZoneType right) => left.Equals(right);
        public static bool operator !=(ZoneType left, ZoneType right) => !left.Equals(right);

        public static explicit operator string(ZoneType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ZoneType other && Equals(other);
        public bool Equals(ZoneType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
