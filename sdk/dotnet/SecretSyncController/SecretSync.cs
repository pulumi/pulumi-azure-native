// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SecretSyncController
{
    /// <summary>
    /// The SecretSync resource.
    /// Azure REST API version: 2024-08-21-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:secretsynccontroller:SecretSync")]
    public partial class SecretSync : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The complex type of the extended location.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.AzureResourceManagerCommonTypesExtendedLocationResponse?> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing the value in this field. This field is not used to resolve synchronization conflicts.
        /// </summary>
        [Output("forceSynchronization")]
        public Output<string?> ForceSynchronization { get; private set; } = null!;

        /// <summary>
        /// Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
        /// </summary>
        [Output("kubernetesSecretType")]
        public Output<string> KubernetesSecretType { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
        /// </summary>
        [Output("objectSecretMapping")]
        public Output<ImmutableArray<Outputs.KubernetesSecretObjectMappingResponse>> ObjectSecretMapping { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the SecretSync instance.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to access the cloud provider secret store.
        /// </summary>
        [Output("secretProviderClassName")]
        public Output<string> SecretProviderClassName { get; private set; } = null!;

        /// <summary>
        /// ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience field in the service account token must be passed as parameter in the controller configuration. The audience is used when requesting a token from the API server for the service account; the supported audiences are defined by each provider.
        /// </summary>
        [Output("serviceAccountName")]
        public Output<string> ServiceAccountName { get; private set; } = null!;

        /// <summary>
        /// SecretSyncStatus defines the observed state of the secret synchronization process.
        /// </summary>
        [Output("status")]
        public Output<Outputs.SecretSyncStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SecretSync resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretSync(string name, SecretSyncArgs args, CustomResourceOptions? options = null)
            : base("azure-native:secretsynccontroller:SecretSync", name, args ?? new SecretSyncArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretSync(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:secretsynccontroller:SecretSync", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:secretsynccontroller/v20240821preview:SecretSync" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretSync resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretSync Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SecretSync(name, id, options);
        }
    }

    public sealed class SecretSyncArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The complex type of the extended location.
        /// </summary>
        [Input("extendedLocation")]
        public Input<Inputs.AzureResourceManagerCommonTypesExtendedLocationArgs>? ExtendedLocation { get; set; }

        /// <summary>
        /// ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing the value in this field. This field is not used to resolve synchronization conflicts.
        /// </summary>
        [Input("forceSynchronization")]
        public Input<string>? ForceSynchronization { get; set; }

        /// <summary>
        /// Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
        /// </summary>
        [Input("kubernetesSecretType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.SecretSyncController.KubernetesSecretType> KubernetesSecretType { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("objectSecretMapping", required: true)]
        private InputList<Inputs.KubernetesSecretObjectMappingArgs>? _objectSecretMapping;

        /// <summary>
        /// An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
        /// </summary>
        public InputList<Inputs.KubernetesSecretObjectMappingArgs> ObjectSecretMapping
        {
            get => _objectSecretMapping ?? (_objectSecretMapping = new InputList<Inputs.KubernetesSecretObjectMappingArgs>());
            set => _objectSecretMapping = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to access the cloud provider secret store.
        /// </summary>
        [Input("secretProviderClassName", required: true)]
        public Input<string> SecretProviderClassName { get; set; } = null!;

        /// <summary>
        /// The name of the SecretSync
        /// </summary>
        [Input("secretSyncName")]
        public Input<string>? SecretSyncName { get; set; }

        /// <summary>
        /// ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience field in the service account token must be passed as parameter in the controller configuration. The audience is used when requesting a token from the API server for the service account; the supported audiences are defined by each provider.
        /// </summary>
        [Input("serviceAccountName", required: true)]
        public Input<string> ServiceAccountName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SecretSyncArgs()
        {
        }
        public static new SecretSyncArgs Empty => new SecretSyncArgs();
    }
}
