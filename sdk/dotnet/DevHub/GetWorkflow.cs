// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevHub
{
    public static class GetWorkflow
    {
        /// <summary>
        /// Resource representation of a workflow
        /// API Version: 2022-04-01-preview.
        /// </summary>
        public static Task<GetWorkflowResult> InvokeAsync(GetWorkflowArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkflowResult>("azure-native:devhub:getWorkflow", args ?? new GetWorkflowArgs(), options.WithDefaults());

        /// <summary>
        /// Resource representation of a workflow
        /// API Version: 2022-04-01-preview.
        /// </summary>
        public static Output<GetWorkflowResult> Invoke(GetWorkflowInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkflowResult>("azure-native:devhub:getWorkflow", args ?? new GetWorkflowInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkflowArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workflow resource.
        /// </summary>
        [Input("workflowName", required: true)]
        public string WorkflowName { get; set; } = null!;

        public GetWorkflowArgs()
        {
        }
        public static new GetWorkflowArgs Empty => new GetWorkflowArgs();
    }

    public sealed class GetWorkflowInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workflow resource.
        /// </summary>
        [Input("workflowName", required: true)]
        public Input<string> WorkflowName { get; set; } = null!;

        public GetWorkflowInvokeArgs()
        {
        }
        public static new GetWorkflowInvokeArgs Empty => new GetWorkflowInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkflowResult
    {
        /// <summary>
        /// Information on the azure container registry
        /// </summary>
        public readonly Outputs.ACRResponse? Acr;
        /// <summary>
        /// The Azure Kubernetes Cluster Resource the application will be deployed to.
        /// </summary>
        public readonly string? AksResourceId;
        /// <summary>
        /// Determines the authorization status of requests.
        /// </summary>
        public readonly string AuthStatus;
        /// <summary>
        /// Repository Branch Name
        /// </summary>
        public readonly string? BranchName;
        public readonly Outputs.DeploymentPropertiesResponse? DeploymentProperties;
        /// <summary>
        /// Path to Dockerfile Build Context within the repository.
        /// </summary>
        public readonly string? DockerBuildContext;
        /// <summary>
        /// Path to the Dockerfile within the repository.
        /// </summary>
        public readonly string? Dockerfile;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        public readonly Outputs.WorkflowRunResponse? LastWorkflowRun;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Kubernetes namespace the application is deployed to.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// The fields needed for OIDC with GitHub.
        /// </summary>
        public readonly Outputs.GitHubWorkflowProfileResponseOidcCredentials? OidcCredentials;
        /// <summary>
        /// The status of the Pull Request submitted against the users repository.
        /// </summary>
        public readonly string PrStatus;
        /// <summary>
        /// The URL to the Pull Request submitted against the users repository.
        /// </summary>
        public readonly string PrURL;
        /// <summary>
        /// The number associated with the submitted pull request.
        /// </summary>
        public readonly int PullNumber;
        /// <summary>
        /// Repository Name
        /// </summary>
        public readonly string? RepositoryName;
        /// <summary>
        /// Repository Owner
        /// </summary>
        public readonly string? RepositoryOwner;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetWorkflowResult(
            Outputs.ACRResponse? acr,

            string? aksResourceId,

            string authStatus,

            string? branchName,

            Outputs.DeploymentPropertiesResponse? deploymentProperties,

            string? dockerBuildContext,

            string? dockerfile,

            string id,

            Outputs.WorkflowRunResponse? lastWorkflowRun,

            string location,

            string name,

            string? @namespace,

            Outputs.GitHubWorkflowProfileResponseOidcCredentials? oidcCredentials,

            string prStatus,

            string prURL,

            int pullNumber,

            string? repositoryName,

            string? repositoryOwner,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Acr = acr;
            AksResourceId = aksResourceId;
            AuthStatus = authStatus;
            BranchName = branchName;
            DeploymentProperties = deploymentProperties;
            DockerBuildContext = dockerBuildContext;
            Dockerfile = dockerfile;
            Id = id;
            LastWorkflowRun = lastWorkflowRun;
            Location = location;
            Name = name;
            Namespace = @namespace;
            OidcCredentials = oidcCredentials;
            PrStatus = prStatus;
            PrURL = prURL;
            PullNumber = pullNumber;
            RepositoryName = repositoryName;
            RepositoryOwner = repositoryOwner;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
