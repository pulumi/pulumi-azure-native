// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevHub.V20230801
{
    /// <summary>
    /// Resource representation of a workflow
    /// </summary>
    [AzureNativeResourceType("azure-native:devhub/v20230801:Workflow")]
    public partial class Workflow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Information on the azure container registry
        /// </summary>
        [Output("acr")]
        public Output<Outputs.ACRResponse?> Acr { get; private set; } = null!;

        /// <summary>
        /// The Azure Kubernetes Cluster Resource the application will be deployed to.
        /// </summary>
        [Output("aksResourceId")]
        public Output<string?> AksResourceId { get; private set; } = null!;

        /// <summary>
        /// The name of the app.
        /// </summary>
        [Output("appName")]
        public Output<string?> AppName { get; private set; } = null!;

        /// <summary>
        /// Determines the authorization status of requests.
        /// </summary>
        [Output("authStatus")]
        public Output<string> AuthStatus { get; private set; } = null!;

        /// <summary>
        /// Repository Branch Name
        /// </summary>
        [Output("branchName")]
        public Output<string?> BranchName { get; private set; } = null!;

        /// <summary>
        /// The version of the language image used for building the code in the generated dockerfile.
        /// </summary>
        [Output("builderVersion")]
        public Output<string?> BuilderVersion { get; private set; } = null!;

        [Output("deploymentProperties")]
        public Output<Outputs.DeploymentPropertiesResponse?> DeploymentProperties { get; private set; } = null!;

        /// <summary>
        /// Path to Dockerfile Build Context within the repository.
        /// </summary>
        [Output("dockerBuildContext")]
        public Output<string?> DockerBuildContext { get; private set; } = null!;

        /// <summary>
        /// Path to the Dockerfile within the repository.
        /// </summary>
        [Output("dockerfile")]
        public Output<string?> Dockerfile { get; private set; } = null!;

        /// <summary>
        /// The mode of generation to be used for generating Dockerfiles.
        /// </summary>
        [Output("dockerfileGenerationMode")]
        public Output<string?> DockerfileGenerationMode { get; private set; } = null!;

        /// <summary>
        /// The directory to output the generated Dockerfile to.
        /// </summary>
        [Output("dockerfileOutputDirectory")]
        public Output<string?> DockerfileOutputDirectory { get; private set; } = null!;

        /// <summary>
        /// The programming language used.
        /// </summary>
        [Output("generationLanguage")]
        public Output<string?> GenerationLanguage { get; private set; } = null!;

        /// <summary>
        /// The name of the image to be generated.
        /// </summary>
        [Output("imageName")]
        public Output<string?> ImageName { get; private set; } = null!;

        /// <summary>
        /// The tag to apply to the generated image.
        /// </summary>
        [Output("imageTag")]
        public Output<string?> ImageTag { get; private set; } = null!;

        /// <summary>
        /// The version of the language image used for execution in the generated dockerfile.
        /// </summary>
        [Output("languageVersion")]
        public Output<string?> LanguageVersion { get; private set; } = null!;

        [Output("lastWorkflowRun")]
        public Output<Outputs.WorkflowRunResponse?> LastWorkflowRun { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The mode of generation to be used for generating Manifest.
        /// </summary>
        [Output("manifestGenerationMode")]
        public Output<string?> ManifestGenerationMode { get; private set; } = null!;

        /// <summary>
        /// The directory to output the generated manifests to.
        /// </summary>
        [Output("manifestOutputDirectory")]
        public Output<string?> ManifestOutputDirectory { get; private set; } = null!;

        /// <summary>
        /// Determines the type of manifests to be generated.
        /// </summary>
        [Output("manifestType")]
        public Output<string?> ManifestType { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Kubernetes namespace the application is deployed to.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The fields needed for OIDC with GitHub.
        /// </summary>
        [Output("oidcCredentials")]
        public Output<Outputs.GitHubWorkflowProfileResponseOidcCredentials?> OidcCredentials { get; private set; } = null!;

        /// <summary>
        /// The port the application is exposed on.
        /// </summary>
        [Output("port")]
        public Output<string?> Port { get; private set; } = null!;

        /// <summary>
        /// The status of the Pull Request submitted against the users repository.
        /// </summary>
        [Output("prStatus")]
        public Output<string> PrStatus { get; private set; } = null!;

        /// <summary>
        /// The URL to the Pull Request submitted against the users repository.
        /// </summary>
        [Output("prURL")]
        public Output<string> PrURL { get; private set; } = null!;

        /// <summary>
        /// The number associated with the submitted pull request.
        /// </summary>
        [Output("pullNumber")]
        public Output<int> PullNumber { get; private set; } = null!;

        /// <summary>
        /// Repository Name
        /// </summary>
        [Output("repositoryName")]
        public Output<string?> RepositoryName { get; private set; } = null!;

        /// <summary>
        /// Repository Owner
        /// </summary>
        [Output("repositoryOwner")]
        public Output<string?> RepositoryOwner { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Workflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workflow(string name, WorkflowArgs args, CustomResourceOptions? options = null)
            : base("azure-native:devhub/v20230801:Workflow", name, args ?? new WorkflowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workflow(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:devhub/v20230801:Workflow", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:devhub:Workflow" },
                    new global::Pulumi.Alias { Type = "azure-native:devhub/v20220401preview:Workflow" },
                    new global::Pulumi.Alias { Type = "azure-native:devhub/v20221011preview:Workflow" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workflow Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Workflow(name, id, options);
        }
    }

    public sealed class WorkflowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information on the azure container registry
        /// </summary>
        [Input("acr")]
        public Input<Inputs.ACRArgs>? Acr { get; set; }

        /// <summary>
        /// The Azure Kubernetes Cluster Resource the application will be deployed to.
        /// </summary>
        [Input("aksResourceId")]
        public Input<string>? AksResourceId { get; set; }

        /// <summary>
        /// The name of the app.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        /// <summary>
        /// Repository Branch Name
        /// </summary>
        [Input("branchName")]
        public Input<string>? BranchName { get; set; }

        /// <summary>
        /// The version of the language image used for building the code in the generated dockerfile.
        /// </summary>
        [Input("builderVersion")]
        public Input<string>? BuilderVersion { get; set; }

        [Input("deploymentProperties")]
        public Input<Inputs.DeploymentPropertiesArgs>? DeploymentProperties { get; set; }

        /// <summary>
        /// Path to Dockerfile Build Context within the repository.
        /// </summary>
        [Input("dockerBuildContext")]
        public Input<string>? DockerBuildContext { get; set; }

        /// <summary>
        /// Path to the Dockerfile within the repository.
        /// </summary>
        [Input("dockerfile")]
        public Input<string>? Dockerfile { get; set; }

        /// <summary>
        /// The mode of generation to be used for generating Dockerfiles.
        /// </summary>
        [Input("dockerfileGenerationMode")]
        public InputUnion<string, Pulumi.AzureNative.DevHub.V20230801.DockerfileGenerationMode>? DockerfileGenerationMode { get; set; }

        /// <summary>
        /// The directory to output the generated Dockerfile to.
        /// </summary>
        [Input("dockerfileOutputDirectory")]
        public Input<string>? DockerfileOutputDirectory { get; set; }

        /// <summary>
        /// The programming language used.
        /// </summary>
        [Input("generationLanguage")]
        public InputUnion<string, Pulumi.AzureNative.DevHub.V20230801.GenerationLanguage>? GenerationLanguage { get; set; }

        /// <summary>
        /// The name of the image to be generated.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// The tag to apply to the generated image.
        /// </summary>
        [Input("imageTag")]
        public Input<string>? ImageTag { get; set; }

        /// <summary>
        /// The version of the language image used for execution in the generated dockerfile.
        /// </summary>
        [Input("languageVersion")]
        public Input<string>? LanguageVersion { get; set; }

        [Input("lastWorkflowRun")]
        public Input<Inputs.WorkflowRunArgs>? LastWorkflowRun { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The mode of generation to be used for generating Manifest.
        /// </summary>
        [Input("manifestGenerationMode")]
        public InputUnion<string, Pulumi.AzureNative.DevHub.V20230801.ManifestGenerationMode>? ManifestGenerationMode { get; set; }

        /// <summary>
        /// The directory to output the generated manifests to.
        /// </summary>
        [Input("manifestOutputDirectory")]
        public Input<string>? ManifestOutputDirectory { get; set; }

        /// <summary>
        /// Determines the type of manifests to be generated.
        /// </summary>
        [Input("manifestType")]
        public InputUnion<string, Pulumi.AzureNative.DevHub.V20230801.GenerationManifestType>? ManifestType { get; set; }

        /// <summary>
        /// Kubernetes namespace the application is deployed to.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The fields needed for OIDC with GitHub.
        /// </summary>
        [Input("oidcCredentials")]
        public Input<Inputs.GitHubWorkflowProfileOidcCredentialsArgs>? OidcCredentials { get; set; }

        /// <summary>
        /// The port the application is exposed on.
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// Repository Name
        /// </summary>
        [Input("repositoryName")]
        public Input<string>? RepositoryName { get; set; }

        /// <summary>
        /// Repository Owner
        /// </summary>
        [Input("repositoryOwner")]
        public Input<string>? RepositoryOwner { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the workflow resource.
        /// </summary>
        [Input("workflowName")]
        public Input<string>? WorkflowName { get; set; }

        public WorkflowArgs()
        {
        }
        public static new WorkflowArgs Empty => new WorkflowArgs();
    }
}
