// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DevHub.V20221011Preview
{
    /// <summary>
    /// The mode of generation to be used for generating Dockerfiles.
    /// </summary>
    [EnumType]
    public readonly struct DockerfileGenerationMode : IEquatable<DockerfileGenerationMode>
    {
        private readonly string _value;

        private DockerfileGenerationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Dockerfiles will be generated
        /// </summary>
        public static DockerfileGenerationMode Enabled { get; } = new DockerfileGenerationMode("enabled");
        /// <summary>
        /// Dockerfiles will not be generated
        /// </summary>
        public static DockerfileGenerationMode Disabled { get; } = new DockerfileGenerationMode("disabled");

        public static bool operator ==(DockerfileGenerationMode left, DockerfileGenerationMode right) => left.Equals(right);
        public static bool operator !=(DockerfileGenerationMode left, DockerfileGenerationMode right) => !left.Equals(right);

        public static explicit operator string(DockerfileGenerationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DockerfileGenerationMode other && Equals(other);
        public bool Equals(DockerfileGenerationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The programming language used.
    /// </summary>
    [EnumType]
    public readonly struct GenerationLanguage : IEquatable<GenerationLanguage>
    {
        private readonly string _value;

        private GenerationLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// clojure language
        /// </summary>
        public static GenerationLanguage Clojure { get; } = new GenerationLanguage("clojure");
        /// <summary>
        /// csharp language
        /// </summary>
        public static GenerationLanguage Csharp { get; } = new GenerationLanguage("csharp");
        /// <summary>
        /// erlang language
        /// </summary>
        public static GenerationLanguage Erlang { get; } = new GenerationLanguage("erlang");
        /// <summary>
        /// go language
        /// </summary>
        public static GenerationLanguage Go { get; } = new GenerationLanguage("go");
        /// <summary>
        /// gomodule language
        /// </summary>
        public static GenerationLanguage Gomodule { get; } = new GenerationLanguage("gomodule");
        /// <summary>
        /// gradle language
        /// </summary>
        public static GenerationLanguage Gradle { get; } = new GenerationLanguage("gradle");
        /// <summary>
        /// java language
        /// </summary>
        public static GenerationLanguage Java { get; } = new GenerationLanguage("java");
        /// <summary>
        /// javascript language
        /// </summary>
        public static GenerationLanguage Javascript { get; } = new GenerationLanguage("javascript");
        /// <summary>
        /// php language
        /// </summary>
        public static GenerationLanguage Php { get; } = new GenerationLanguage("php");
        /// <summary>
        /// python language
        /// </summary>
        public static GenerationLanguage Python { get; } = new GenerationLanguage("python");
        /// <summary>
        /// ruby language
        /// </summary>
        public static GenerationLanguage Ruby { get; } = new GenerationLanguage("ruby");
        /// <summary>
        /// rust language
        /// </summary>
        public static GenerationLanguage Rust { get; } = new GenerationLanguage("rust");
        /// <summary>
        /// swift language
        /// </summary>
        public static GenerationLanguage Swift { get; } = new GenerationLanguage("swift");

        public static bool operator ==(GenerationLanguage left, GenerationLanguage right) => left.Equals(right);
        public static bool operator !=(GenerationLanguage left, GenerationLanguage right) => !left.Equals(right);

        public static explicit operator string(GenerationLanguage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GenerationLanguage other && Equals(other);
        public bool Equals(GenerationLanguage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of manifests to be generated.
    /// </summary>
    [EnumType]
    public readonly struct GenerationManifestType : IEquatable<GenerationManifestType>
    {
        private readonly string _value;

        private GenerationManifestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Helm manifests
        /// </summary>
        public static GenerationManifestType Helm { get; } = new GenerationManifestType("helm");
        /// <summary>
        /// Kubernetes manifests
        /// </summary>
        public static GenerationManifestType Kube { get; } = new GenerationManifestType("kube");

        public static bool operator ==(GenerationManifestType left, GenerationManifestType right) => left.Equals(right);
        public static bool operator !=(GenerationManifestType left, GenerationManifestType right) => !left.Equals(right);

        public static explicit operator string(GenerationManifestType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GenerationManifestType other && Equals(other);
        public bool Equals(GenerationManifestType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode of generation to be used for generating Manifest.
    /// </summary>
    [EnumType]
    public readonly struct ManifestGenerationMode : IEquatable<ManifestGenerationMode>
    {
        private readonly string _value;

        private ManifestGenerationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Manifests will be generated
        /// </summary>
        public static ManifestGenerationMode Enabled { get; } = new ManifestGenerationMode("enabled");
        /// <summary>
        /// Manifests will not be generated
        /// </summary>
        public static ManifestGenerationMode Disabled { get; } = new ManifestGenerationMode("disabled");

        public static bool operator ==(ManifestGenerationMode left, ManifestGenerationMode right) => left.Equals(right);
        public static bool operator !=(ManifestGenerationMode left, ManifestGenerationMode right) => !left.Equals(right);

        public static explicit operator string(ManifestGenerationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManifestGenerationMode other && Equals(other);
        public bool Equals(ManifestGenerationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of manifests within the repository.
    /// </summary>
    [EnumType]
    public readonly struct ManifestType : IEquatable<ManifestType>
    {
        private readonly string _value;

        private ManifestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Repositories using helm
        /// </summary>
        public static ManifestType Helm { get; } = new ManifestType("helm");
        /// <summary>
        /// Repositories using kubernetes manifests
        /// </summary>
        public static ManifestType Kube { get; } = new ManifestType("kube");

        public static bool operator ==(ManifestType left, ManifestType right) => left.Equals(right);
        public static bool operator !=(ManifestType left, ManifestType right) => !left.Equals(right);

        public static explicit operator string(ManifestType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManifestType other && Equals(other);
        public bool Equals(ManifestType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the status of the workflow run
    /// </summary>
    [EnumType]
    public readonly struct WorkflowRunStatus : IEquatable<WorkflowRunStatus>
    {
        private readonly string _value;

        private WorkflowRunStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Workflow run is queued
        /// </summary>
        public static WorkflowRunStatus Queued { get; } = new WorkflowRunStatus("queued");
        /// <summary>
        /// Workflow run is inprogress
        /// </summary>
        public static WorkflowRunStatus Inprogress { get; } = new WorkflowRunStatus("inprogress");
        /// <summary>
        /// Workflow run is completed
        /// </summary>
        public static WorkflowRunStatus Completed { get; } = new WorkflowRunStatus("completed");

        public static bool operator ==(WorkflowRunStatus left, WorkflowRunStatus right) => left.Equals(right);
        public static bool operator !=(WorkflowRunStatus left, WorkflowRunStatus right) => !left.Equals(right);

        public static explicit operator string(WorkflowRunStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowRunStatus other && Equals(other);
        public bool Equals(WorkflowRunStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
