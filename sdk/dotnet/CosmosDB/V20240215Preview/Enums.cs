// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.CosmosDB.V20240215Preview
{
    /// <summary>
    /// The mode to create a mongo cluster.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The node type deployed in the node group.
    /// </summary>
    [EnumType]
    public readonly struct NodeKind : IEquatable<NodeKind>
    {
        private readonly string _value;

        private NodeKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodeKind Shard { get; } = new NodeKind("Shard");

        public static bool operator ==(NodeKind left, NodeKind right) => left.Equals(right);
        public static bool operator !=(NodeKind left, NodeKind right) => !left.Equals(right);

        public static explicit operator string(NodeKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeKind other && Equals(other);
        public bool Equals(NodeKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Instance type for the service.
    /// </summary>
    [EnumType]
    public readonly struct ServiceSize : IEquatable<ServiceSize>
    {
        private readonly string _value;

        private ServiceSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSize Cosmos_D4s { get; } = new ServiceSize("Cosmos.D4s");
        public static ServiceSize Cosmos_D8s { get; } = new ServiceSize("Cosmos.D8s");
        public static ServiceSize Cosmos_D16s { get; } = new ServiceSize("Cosmos.D16s");

        public static bool operator ==(ServiceSize left, ServiceSize right) => left.Equals(right);
        public static bool operator !=(ServiceSize left, ServiceSize right) => !left.Equals(right);

        public static explicit operator string(ServiceSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSize other && Equals(other);
        public bool Equals(ServiceSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ServiceType for the service.
    /// </summary>
    [EnumType]
    public readonly struct ServiceType : IEquatable<ServiceType>
    {
        private readonly string _value;

        private ServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceType SqlDedicatedGateway { get; } = new ServiceType("SqlDedicatedGateway");
        public static ServiceType DataTransfer { get; } = new ServiceType("DataTransfer");
        public static ServiceType GraphAPICompute { get; } = new ServiceType("GraphAPICompute");
        public static ServiceType MaterializedViewsBuilder { get; } = new ServiceType("MaterializedViewsBuilder");

        public static bool operator ==(ServiceType left, ServiceType right) => left.Equals(right);
        public static bool operator !=(ServiceType left, ServiceType right) => !left.Equals(right);

        public static explicit operator string(ServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceType other && Equals(other);
        public bool Equals(ServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
