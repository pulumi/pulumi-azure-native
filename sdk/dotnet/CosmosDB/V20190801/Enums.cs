// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.CosmosDB.V20190801
{
    /// <summary>
    /// Sort order for composite paths.
    /// </summary>
    [EnumType]
    public readonly struct CompositePathSortOrder : IEquatable<CompositePathSortOrder>
    {
        private readonly string _value;

        private CompositePathSortOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CompositePathSortOrder Ascending { get; } = new CompositePathSortOrder("Ascending");
        public static CompositePathSortOrder Descending { get; } = new CompositePathSortOrder("Descending");

        public static bool operator ==(CompositePathSortOrder left, CompositePathSortOrder right) => left.Equals(right);
        public static bool operator !=(CompositePathSortOrder left, CompositePathSortOrder right) => !left.Equals(right);

        public static explicit operator string(CompositePathSortOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CompositePathSortOrder other && Equals(other);
        public bool Equals(CompositePathSortOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the conflict resolution mode.
    /// </summary>
    [EnumType]
    public readonly struct ConflictResolutionMode : IEquatable<ConflictResolutionMode>
    {
        private readonly string _value;

        private ConflictResolutionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConflictResolutionMode LastWriterWins { get; } = new ConflictResolutionMode("LastWriterWins");
        public static ConflictResolutionMode Custom { get; } = new ConflictResolutionMode("Custom");

        public static bool operator ==(ConflictResolutionMode left, ConflictResolutionMode right) => left.Equals(right);
        public static bool operator !=(ConflictResolutionMode left, ConflictResolutionMode right) => !left.Equals(right);

        public static explicit operator string(ConflictResolutionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConflictResolutionMode other && Equals(other);
        public bool Equals(ConflictResolutionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The datatype for which the indexing behavior is applied to.
    /// </summary>
    [EnumType]
    public readonly struct DataType : IEquatable<DataType>
    {
        private readonly string _value;

        private DataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataType String { get; } = new DataType("String");
        public static DataType Number { get; } = new DataType("Number");
        public static DataType Point { get; } = new DataType("Point");
        public static DataType Polygon { get; } = new DataType("Polygon");
        public static DataType LineString { get; } = new DataType("LineString");
        public static DataType MultiPolygon { get; } = new DataType("MultiPolygon");

        public static bool operator ==(DataType left, DataType right) => left.Equals(right);
        public static bool operator !=(DataType left, DataType right) => !left.Equals(right);

        public static explicit operator string(DataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataType other && Equals(other);
        public bool Equals(DataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the type of index.
    /// </summary>
    [EnumType]
    public readonly struct IndexKind : IEquatable<IndexKind>
    {
        private readonly string _value;

        private IndexKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexKind Hash { get; } = new IndexKind("Hash");
        public static IndexKind Range { get; } = new IndexKind("Range");
        public static IndexKind Spatial { get; } = new IndexKind("Spatial");

        public static bool operator ==(IndexKind left, IndexKind right) => left.Equals(right);
        public static bool operator !=(IndexKind left, IndexKind right) => !left.Equals(right);

        public static explicit operator string(IndexKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexKind other && Equals(other);
        public bool Equals(IndexKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the indexing mode.
    /// </summary>
    [EnumType]
    public readonly struct IndexingMode : IEquatable<IndexingMode>
    {
        private readonly string _value;

        private IndexingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexingMode Consistent { get; } = new IndexingMode("Consistent");
        public static IndexingMode Lazy { get; } = new IndexingMode("Lazy");
        public static IndexingMode None { get; } = new IndexingMode("None");

        public static bool operator ==(IndexingMode left, IndexingMode right) => left.Equals(right);
        public static bool operator !=(IndexingMode left, IndexingMode right) => !left.Equals(right);

        public static explicit operator string(IndexingMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexingMode other && Equals(other);
        public bool Equals(IndexingMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the kind of algorithm used for partitioning
    /// </summary>
    [EnumType]
    public readonly struct PartitionKind : IEquatable<PartitionKind>
    {
        private readonly string _value;

        private PartitionKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PartitionKind Hash { get; } = new PartitionKind("Hash");
        public static PartitionKind Range { get; } = new PartitionKind("Range");

        public static bool operator ==(PartitionKind left, PartitionKind right) => left.Equals(right);
        public static bool operator !=(PartitionKind left, PartitionKind right) => !left.Equals(right);

        public static explicit operator string(PartitionKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PartitionKind other && Equals(other);
        public bool Equals(PartitionKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the spatial type of index.
    /// </summary>
    [EnumType]
    public readonly struct SpatialType : IEquatable<SpatialType>
    {
        private readonly string _value;

        private SpatialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpatialType Point { get; } = new SpatialType("Point");
        public static SpatialType LineString { get; } = new SpatialType("LineString");
        public static SpatialType Polygon { get; } = new SpatialType("Polygon");
        public static SpatialType MultiPolygon { get; } = new SpatialType("MultiPolygon");

        public static bool operator ==(SpatialType left, SpatialType right) => left.Equals(right);
        public static bool operator !=(SpatialType left, SpatialType right) => !left.Equals(right);

        public static explicit operator string(SpatialType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpatialType other && Equals(other);
        public bool Equals(SpatialType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation the trigger is associated with
    /// </summary>
    [EnumType]
    public readonly struct TriggerOperation : IEquatable<TriggerOperation>
    {
        private readonly string _value;

        private TriggerOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerOperation All { get; } = new TriggerOperation("All");
        public static TriggerOperation Create { get; } = new TriggerOperation("Create");
        public static TriggerOperation Update { get; } = new TriggerOperation("Update");
        public static TriggerOperation Delete { get; } = new TriggerOperation("Delete");
        public static TriggerOperation Replace { get; } = new TriggerOperation("Replace");

        public static bool operator ==(TriggerOperation left, TriggerOperation right) => left.Equals(right);
        public static bool operator !=(TriggerOperation left, TriggerOperation right) => !left.Equals(right);

        public static explicit operator string(TriggerOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerOperation other && Equals(other);
        public bool Equals(TriggerOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the Trigger
    /// </summary>
    [EnumType]
    public readonly struct TriggerType : IEquatable<TriggerType>
    {
        private readonly string _value;

        private TriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerType Pre { get; } = new TriggerType("Pre");
        public static TriggerType Post { get; } = new TriggerType("Post");

        public static bool operator ==(TriggerType left, TriggerType right) => left.Equals(right);
        public static bool operator !=(TriggerType left, TriggerType right) => !left.Equals(right);

        public static explicit operator string(TriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerType other && Equals(other);
        public bool Equals(TriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
