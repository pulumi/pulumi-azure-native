// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.CosmosDB.V20230915Preview
{
    /// <summary>
    /// Describes the types of schema for analytical storage.
    /// </summary>
    [EnumType]
    public readonly struct AnalyticalStorageSchemaType : IEquatable<AnalyticalStorageSchemaType>
    {
        private readonly string _value;

        private AnalyticalStorageSchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalyticalStorageSchemaType WellDefined { get; } = new AnalyticalStorageSchemaType("WellDefined");
        public static AnalyticalStorageSchemaType FullFidelity { get; } = new AnalyticalStorageSchemaType("FullFidelity");

        public static bool operator ==(AnalyticalStorageSchemaType left, AnalyticalStorageSchemaType right) => left.Equals(right);
        public static bool operator !=(AnalyticalStorageSchemaType left, AnalyticalStorageSchemaType right) => !left.Equals(right);

        public static explicit operator string(AnalyticalStorageSchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalyticalStorageSchemaType other && Equals(other);
        public bool Equals(AnalyticalStorageSchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the status of migration between backup policy types.
    /// </summary>
    [EnumType]
    public readonly struct BackupPolicyMigrationStatus : IEquatable<BackupPolicyMigrationStatus>
    {
        private readonly string _value;

        private BackupPolicyMigrationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupPolicyMigrationStatus Invalid { get; } = new BackupPolicyMigrationStatus("Invalid");
        public static BackupPolicyMigrationStatus InProgress { get; } = new BackupPolicyMigrationStatus("InProgress");
        public static BackupPolicyMigrationStatus Completed { get; } = new BackupPolicyMigrationStatus("Completed");
        public static BackupPolicyMigrationStatus Failed { get; } = new BackupPolicyMigrationStatus("Failed");

        public static bool operator ==(BackupPolicyMigrationStatus left, BackupPolicyMigrationStatus right) => left.Equals(right);
        public static bool operator !=(BackupPolicyMigrationStatus left, BackupPolicyMigrationStatus right) => !left.Equals(right);

        public static explicit operator string(BackupPolicyMigrationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupPolicyMigrationStatus other && Equals(other);
        public bool Equals(BackupPolicyMigrationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the mode of backups.
    /// </summary>
    [EnumType]
    public readonly struct BackupPolicyType : IEquatable<BackupPolicyType>
    {
        private readonly string _value;

        private BackupPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupPolicyType Periodic { get; } = new BackupPolicyType("Periodic");
        public static BackupPolicyType Continuous { get; } = new BackupPolicyType("Continuous");

        public static bool operator ==(BackupPolicyType left, BackupPolicyType right) => left.Equals(right);
        public static bool operator !=(BackupPolicyType left, BackupPolicyType right) => !left.Equals(right);

        public static explicit operator string(BackupPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupPolicyType other && Equals(other);
        public bool Equals(BackupPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum to indicate type of backup residency
    /// </summary>
    [EnumType]
    public readonly struct BackupStorageRedundancy : IEquatable<BackupStorageRedundancy>
    {
        private readonly string _value;

        private BackupStorageRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupStorageRedundancy Geo { get; } = new BackupStorageRedundancy("Geo");
        public static BackupStorageRedundancy Local { get; } = new BackupStorageRedundancy("Local");
        public static BackupStorageRedundancy Zone { get; } = new BackupStorageRedundancy("Zone");

        public static bool operator ==(BackupStorageRedundancy left, BackupStorageRedundancy right) => left.Equals(right);
        public static bool operator !=(BackupStorageRedundancy left, BackupStorageRedundancy right) => !left.Equals(right);

        public static explicit operator string(BackupStorageRedundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupStorageRedundancy other && Equals(other);
        public bool Equals(BackupStorageRedundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The cassandra connector offer type for the Cosmos DB database C* account.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorOffer : IEquatable<ConnectorOffer>
    {
        private readonly string _value;

        private ConnectorOffer(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorOffer Small { get; } = new ConnectorOffer("Small");

        public static bool operator ==(ConnectorOffer left, ConnectorOffer right) => left.Equals(right);
        public static bool operator !=(ConnectorOffer left, ConnectorOffer right) => !left.Equals(right);

        public static explicit operator string(ConnectorOffer value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorOffer other && Equals(other);
        public bool Equals(ConnectorOffer other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum to indicate type of Continuos backup mode
    /// </summary>
    [EnumType]
    public readonly struct ContinuousTier : IEquatable<ContinuousTier>
    {
        private readonly string _value;

        private ContinuousTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContinuousTier Continuous7Days { get; } = new ContinuousTier("Continuous7Days");
        public static ContinuousTier Continuous30Days { get; } = new ContinuousTier("Continuous30Days");

        public static bool operator ==(ContinuousTier left, ContinuousTier right) => left.Equals(right);
        public static bool operator !=(ContinuousTier left, ContinuousTier right) => !left.Equals(right);

        public static explicit operator string(ContinuousTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContinuousTier other && Equals(other);
        public bool Equals(ContinuousTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum to indicate the mode of account creation.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode Restore { get; } = new CreateMode("Restore");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the status of the Customer Managed Key feature on the account. In case there are errors, the property provides troubleshooting guidance.
    /// </summary>
    [EnumType]
    public readonly struct CustomerManagedKeyStatus : IEquatable<CustomerManagedKeyStatus>
    {
        private readonly string _value;

        private CustomerManagedKeyStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_Azure_Cosmos_DB_service_is_unable_to_obtain_the_AAD_authentication_token_for_the_account_s_default_identity_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_azure_active_directory_token_acquisition_error_4000_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the Azure Cosmos DB service is unable to obtain the AAD authentication token for the account's default identity; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-active-directory-token-acquisition-error (4000).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_Azure_Cosmos_DB_account_s_key_vault_key_URI_does_not_follow_the_expected_format_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_improper_syntax_detected_on_the_key_vault_uri_property_4006_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the Azure Cosmos DB account's key vault key URI does not follow the expected format; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#improper-syntax-detected-on-the-key-vault-uri-property (4006).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_current_default_identity_no_longer_has_permission_to_the_associated_Key_Vault_key_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_default_identity_is_unauthorized_to_access_the_azure_key_vault_key_4002_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the current default identity no longer has permission to the associated Key Vault key; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#default-identity-is-unauthorized-to-access-the-azure-key-vault-key (4002).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_Azure_Key_Vault_DNS_name_specified_by_the_account_s_keyvaultkeyuri_property_could_not_be_resolved_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_unable_to_resolve_the_key_vaults_dns_4009_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the Azure Key Vault DNS name specified by the account's keyvaultkeyuri property could not be resolved; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#unable-to-resolve-the-key-vaults-dns (4009).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_correspondent_key_is_not_found_on_the_specified_Key_Vault_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_azure_key_vault_resource_not_found_4003_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the correspondent key is not found on the specified Key Vault; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-key-vault-resource-not-found (4003).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_Azure_Cosmos_DB_service_is_unable_to_wrap_or_unwrap_the_key_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_internal_unwrapping_procedure_error_4005_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the Azure Cosmos DB service is unable to wrap or unwrap the key; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#internal-unwrapping-procedure-error (4005).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_Azure_Cosmos_DB_account_has_an_undefined_default_identity_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_invalid_azure_cosmos_db_default_identity_4015_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the Azure Cosmos DB account has an undefined default identity; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#invalid-azure-cosmos-db-default-identity (4015).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_access_rules_are_blocking_outbound_requests_to_the_Azure_Key_Vault_service_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_4016_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the access rules are blocking outbound requests to the Azure Key Vault service; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide (4016).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_because_the_correspondent_Azure_Key_Vault_was_not_found_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide_azure_key_vault_resource_not_found_4017_ { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked because the correspondent Azure Key Vault was not found; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-key-vault-resource-not-found (4017).");
        public static CustomerManagedKeyStatus Access_to_your_account_is_currently_revoked_for_more_details_about_this_error_and_how_to_restore_access_to_your_account_please_visit_https_learn_microsoft_com_en_us_azure_cosmos_db_cmk_troubleshooting_guide { get; } = new CustomerManagedKeyStatus("Access to your account is currently revoked; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide");
        public static CustomerManagedKeyStatus Access_to_the_configured_customer_managed_key_confirmed_ { get; } = new CustomerManagedKeyStatus("Access to the configured customer managed key confirmed.");

        public static bool operator ==(CustomerManagedKeyStatus left, CustomerManagedKeyStatus right) => left.Equals(right);
        public static bool operator !=(CustomerManagedKeyStatus left, CustomerManagedKeyStatus right) => !left.Equals(right);

        public static explicit operator string(CustomerManagedKeyStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomerManagedKeyStatus other && Equals(other);
        public bool Equals(CustomerManagedKeyStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the type of database account. This can only be set at database account creation.
    /// </summary>
    [EnumType]
    public readonly struct DatabaseAccountKind : IEquatable<DatabaseAccountKind>
    {
        private readonly string _value;

        private DatabaseAccountKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabaseAccountKind GlobalDocumentDB { get; } = new DatabaseAccountKind("GlobalDocumentDB");
        public static DatabaseAccountKind MongoDB { get; } = new DatabaseAccountKind("MongoDB");
        public static DatabaseAccountKind Parse { get; } = new DatabaseAccountKind("Parse");

        public static bool operator ==(DatabaseAccountKind left, DatabaseAccountKind right) => left.Equals(right);
        public static bool operator !=(DatabaseAccountKind left, DatabaseAccountKind right) => !left.Equals(right);

        public static explicit operator string(DatabaseAccountKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseAccountKind other && Equals(other);
        public bool Equals(DatabaseAccountKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The offer type for the database
    /// </summary>
    [EnumType]
    public readonly struct DatabaseAccountOfferType : IEquatable<DatabaseAccountOfferType>
    {
        private readonly string _value;

        private DatabaseAccountOfferType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabaseAccountOfferType Standard { get; } = new DatabaseAccountOfferType("Standard");

        public static bool operator ==(DatabaseAccountOfferType left, DatabaseAccountOfferType right) => left.Equals(right);
        public static bool operator !=(DatabaseAccountOfferType left, DatabaseAccountOfferType right) => !left.Equals(right);

        public static explicit operator string(DatabaseAccountOfferType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseAccountOfferType other && Equals(other);
        public bool Equals(DatabaseAccountOfferType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The default consistency level and configuration settings of the Cosmos DB account.
    /// </summary>
    [EnumType]
    public readonly struct DefaultConsistencyLevel : IEquatable<DefaultConsistencyLevel>
    {
        private readonly string _value;

        private DefaultConsistencyLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DefaultConsistencyLevel Eventual { get; } = new DefaultConsistencyLevel("Eventual");
        public static DefaultConsistencyLevel Session { get; } = new DefaultConsistencyLevel("Session");
        public static DefaultConsistencyLevel BoundedStaleness { get; } = new DefaultConsistencyLevel("BoundedStaleness");
        public static DefaultConsistencyLevel Strong { get; } = new DefaultConsistencyLevel("Strong");
        public static DefaultConsistencyLevel ConsistentPrefix { get; } = new DefaultConsistencyLevel("ConsistentPrefix");

        public static bool operator ==(DefaultConsistencyLevel left, DefaultConsistencyLevel right) => left.Equals(right);
        public static bool operator !=(DefaultConsistencyLevel left, DefaultConsistencyLevel right) => !left.Equals(right);

        public static explicit operator string(DefaultConsistencyLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefaultConsistencyLevel other && Equals(other);
        public bool Equals(DefaultConsistencyLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum to indicate default Priority Level of request for Priority Based Execution.
    /// </summary>
    [EnumType]
    public readonly struct DefaultPriorityLevel : IEquatable<DefaultPriorityLevel>
    {
        private readonly string _value;

        private DefaultPriorityLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DefaultPriorityLevel High { get; } = new DefaultPriorityLevel("High");
        public static DefaultPriorityLevel Low { get; } = new DefaultPriorityLevel("Low");

        public static bool operator ==(DefaultPriorityLevel left, DefaultPriorityLevel right) => left.Equals(right);
        public static bool operator !=(DefaultPriorityLevel left, DefaultPriorityLevel right) => !left.Equals(right);

        public static explicit operator string(DefaultPriorityLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefaultPriorityLevel other && Equals(other);
        public bool Equals(DefaultPriorityLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describe the level of detail with which queries are to be logged.
    /// </summary>
    [EnumType]
    public readonly struct EnableFullTextQuery : IEquatable<EnableFullTextQuery>
    {
        private readonly string _value;

        private EnableFullTextQuery(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableFullTextQuery None { get; } = new EnableFullTextQuery("None");
        public static EnableFullTextQuery True { get; } = new EnableFullTextQuery("True");
        public static EnableFullTextQuery False { get; } = new EnableFullTextQuery("False");

        public static bool operator ==(EnableFullTextQuery left, EnableFullTextQuery right) => left.Equals(right);
        public static bool operator !=(EnableFullTextQuery left, EnableFullTextQuery right) => !left.Equals(right);

        public static explicit operator string(EnableFullTextQuery value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableFullTextQuery other && Equals(other);
        public bool Equals(EnableFullTextQuery other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the minimum allowed Tls version. The default is Tls 1.0, except for Cassandra and Mongo API's, which only work with Tls 1.2.
    /// </summary>
    [EnumType]
    public readonly struct MinimalTlsVersion : IEquatable<MinimalTlsVersion>
    {
        private readonly string _value;

        private MinimalTlsVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MinimalTlsVersion Tls { get; } = new MinimalTlsVersion("Tls");
        public static MinimalTlsVersion Tls11 { get; } = new MinimalTlsVersion("Tls11");
        public static MinimalTlsVersion Tls12 { get; } = new MinimalTlsVersion("Tls12");

        public static bool operator ==(MinimalTlsVersion left, MinimalTlsVersion right) => left.Equals(right);
        public static bool operator !=(MinimalTlsVersion left, MinimalTlsVersion right) => !left.Equals(right);

        public static explicit operator string(MinimalTlsVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MinimalTlsVersion other && Equals(other);
        public bool Equals(MinimalTlsVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates what services are allowed to bypass firewall checks.
    /// </summary>
    [EnumType]
    public readonly struct NetworkAclBypass : IEquatable<NetworkAclBypass>
    {
        private readonly string _value;

        private NetworkAclBypass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkAclBypass None { get; } = new NetworkAclBypass("None");
        public static NetworkAclBypass AzureServices { get; } = new NetworkAclBypass("AzureServices");

        public static bool operator ==(NetworkAclBypass left, NetworkAclBypass right) => left.Equals(right);
        public static bool operator !=(NetworkAclBypass left, NetworkAclBypass right) => !left.Equals(right);

        public static explicit operator string(NetworkAclBypass value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkAclBypass other && Equals(other);
        public bool Equals(NetworkAclBypass other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether requests from Public Network are allowed
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");
        public static PublicNetworkAccess SecuredByPerimeter { get; } = new PublicNetworkAccess("SecuredByPerimeter");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned,UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the mode of the restore.
    /// </summary>
    [EnumType]
    public readonly struct RestoreMode : IEquatable<RestoreMode>
    {
        private readonly string _value;

        private RestoreMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RestoreMode PointInTime { get; } = new RestoreMode("PointInTime");

        public static bool operator ==(RestoreMode left, RestoreMode right) => left.Equals(right);
        public static bool operator !=(RestoreMode left, RestoreMode right) => !left.Equals(right);

        public static explicit operator string(RestoreMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RestoreMode other && Equals(other);
        public bool Equals(RestoreMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the ServerVersion of an a MongoDB account.
    /// </summary>
    [EnumType]
    public readonly struct ServerVersion : IEquatable<ServerVersion>
    {
        private readonly string _value;

        private ServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerVersion ServerVersion_3_2 { get; } = new ServerVersion("3.2");
        public static ServerVersion ServerVersion_3_6 { get; } = new ServerVersion("3.6");
        public static ServerVersion ServerVersion_4_0 { get; } = new ServerVersion("4.0");
        public static ServerVersion ServerVersion_4_2 { get; } = new ServerVersion("4.2");

        public static bool operator ==(ServerVersion left, ServerVersion right) => left.Equals(right);
        public static bool operator !=(ServerVersion left, ServerVersion right) => !left.Equals(right);

        public static explicit operator string(ServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerVersion other && Equals(other);
        public bool Equals(ServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
