// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Sql.V20170301Preview
{
    /// <summary>
    /// Collation of the metadata catalog.
    /// </summary>
    [EnumType]
    public readonly struct CatalogCollationType : IEquatable<CatalogCollationType>
    {
        private readonly string _value;

        private CatalogCollationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CatalogCollationType DATABASE_DEFAULT { get; } = new CatalogCollationType("DATABASE_DEFAULT");
        public static CatalogCollationType SQL_Latin1_General_CP1_CI_AS { get; } = new CatalogCollationType("SQL_Latin1_General_CP1_CI_AS");

        public static bool operator ==(CatalogCollationType left, CatalogCollationType right) => left.Equals(right);
        public static bool operator !=(CatalogCollationType left, CatalogCollationType right) => !left.Equals(right);

        public static explicit operator string(CatalogCollationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CatalogCollationType other && Equals(other);
        public bool Equals(CatalogCollationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the mode of database creation.
    /// 
    /// Default: regular database creation.
    /// 
    /// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
    /// 
    /// Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
    /// 
    /// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
    /// 
    /// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
    /// 
    /// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
    /// 
    /// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
    /// 
    /// Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode Copy { get; } = new CreateMode("Copy");
        public static CreateMode Secondary { get; } = new CreateMode("Secondary");
        public static CreateMode OnlineSecondary { get; } = new CreateMode("OnlineSecondary");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode Restore { get; } = new CreateMode("Restore");
        public static CreateMode Recovery { get; } = new CreateMode("Recovery");
        public static CreateMode RestoreExternalBackup { get; } = new CreateMode("RestoreExternalBackup");
        public static CreateMode RestoreExternalBackupSecondary { get; } = new CreateMode("RestoreExternalBackupSecondary");
        public static CreateMode RestoreLongTermRetentionBackup { get; } = new CreateMode("RestoreLongTermRetentionBackup");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Schedule interval type
    /// </summary>
    [EnumType]
    public readonly struct JobScheduleType : IEquatable<JobScheduleType>
    {
        private readonly string _value;

        private JobScheduleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobScheduleType Once { get; } = new JobScheduleType("Once");
        public static JobScheduleType Recurring { get; } = new JobScheduleType("Recurring");

        public static bool operator ==(JobScheduleType left, JobScheduleType right) => left.Equals(right);
        public static bool operator !=(JobScheduleType left, JobScheduleType right) => !left.Equals(right);

        public static explicit operator string(JobScheduleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobScheduleType other && Equals(other);
        public bool Equals(JobScheduleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The source of the action to execute.
    /// </summary>
    [EnumType]
    public readonly struct JobStepActionSource : IEquatable<JobStepActionSource>
    {
        private readonly string _value;

        private JobStepActionSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepActionSource Inline { get; } = new JobStepActionSource("Inline");

        public static bool operator ==(JobStepActionSource left, JobStepActionSource right) => left.Equals(right);
        public static bool operator !=(JobStepActionSource left, JobStepActionSource right) => !left.Equals(right);

        public static explicit operator string(JobStepActionSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepActionSource other && Equals(other);
        public bool Equals(JobStepActionSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of action being executed by the job step.
    /// </summary>
    [EnumType]
    public readonly struct JobStepActionType : IEquatable<JobStepActionType>
    {
        private readonly string _value;

        private JobStepActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepActionType TSql { get; } = new JobStepActionType("TSql");

        public static bool operator ==(JobStepActionType left, JobStepActionType right) => left.Equals(right);
        public static bool operator !=(JobStepActionType left, JobStepActionType right) => !left.Equals(right);

        public static explicit operator string(JobStepActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepActionType other && Equals(other);
        public bool Equals(JobStepActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The output destination type.
    /// </summary>
    [EnumType]
    public readonly struct JobStepOutputType : IEquatable<JobStepOutputType>
    {
        private readonly string _value;

        private JobStepOutputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepOutputType SqlDatabase { get; } = new JobStepOutputType("SqlDatabase");

        public static bool operator ==(JobStepOutputType left, JobStepOutputType right) => left.Equals(right);
        public static bool operator !=(JobStepOutputType left, JobStepOutputType right) => !left.Equals(right);

        public static explicit operator string(JobStepOutputType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepOutputType other && Equals(other);
        public bool Equals(JobStepOutputType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the target is included or excluded from the group.
    /// </summary>
    [EnumType]
    public readonly struct JobTargetGroupMembershipType : IEquatable<JobTargetGroupMembershipType>
    {
        private readonly string _value;

        private JobTargetGroupMembershipType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobTargetGroupMembershipType Include { get; } = new JobTargetGroupMembershipType("Include");
        public static JobTargetGroupMembershipType Exclude { get; } = new JobTargetGroupMembershipType("Exclude");

        public static bool operator ==(JobTargetGroupMembershipType left, JobTargetGroupMembershipType right) => left.Equals(right);
        public static bool operator !=(JobTargetGroupMembershipType left, JobTargetGroupMembershipType right) => !left.Equals(right);

        public static explicit operator string(JobTargetGroupMembershipType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobTargetGroupMembershipType other && Equals(other);
        public bool Equals(JobTargetGroupMembershipType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The target type.
    /// </summary>
    [EnumType]
    public readonly struct JobTargetType : IEquatable<JobTargetType>
    {
        private readonly string _value;

        private JobTargetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobTargetType TargetGroup { get; } = new JobTargetType("TargetGroup");
        public static JobTargetType SqlDatabase { get; } = new JobTargetType("SqlDatabase");
        public static JobTargetType SqlElasticPool { get; } = new JobTargetType("SqlElasticPool");
        public static JobTargetType SqlShardMap { get; } = new JobTargetType("SqlShardMap");
        public static JobTargetType SqlServer { get; } = new JobTargetType("SqlServer");

        public static bool operator ==(JobTargetType left, JobTargetType right) => left.Equals(right);
        public static bool operator !=(JobTargetType left, JobTargetType right) => !left.Equals(right);

        public static explicit operator string(JobTargetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobTargetType other && Equals(other);
        public bool Equals(JobTargetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
    /// </summary>
    [EnumType]
    public readonly struct ManagedDatabaseCreateMode : IEquatable<ManagedDatabaseCreateMode>
    {
        private readonly string _value;

        private ManagedDatabaseCreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedDatabaseCreateMode Default { get; } = new ManagedDatabaseCreateMode("Default");
        public static ManagedDatabaseCreateMode RestoreExternalBackup { get; } = new ManagedDatabaseCreateMode("RestoreExternalBackup");
        public static ManagedDatabaseCreateMode PointInTimeRestore { get; } = new ManagedDatabaseCreateMode("PointInTimeRestore");
        public static ManagedDatabaseCreateMode Recovery { get; } = new ManagedDatabaseCreateMode("Recovery");
        public static ManagedDatabaseCreateMode RestoreLongTermRetentionBackup { get; } = new ManagedDatabaseCreateMode("RestoreLongTermRetentionBackup");

        public static bool operator ==(ManagedDatabaseCreateMode left, ManagedDatabaseCreateMode right) => left.Equals(right);
        public static bool operator !=(ManagedDatabaseCreateMode left, ManagedDatabaseCreateMode right) => !left.Equals(right);

        public static explicit operator string(ManagedDatabaseCreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedDatabaseCreateMode other && Equals(other);
        public bool Equals(ManagedDatabaseCreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the managed instance administrator.
    /// </summary>
    [EnumType]
    public readonly struct ManagedInstanceAdministratorType : IEquatable<ManagedInstanceAdministratorType>
    {
        private readonly string _value;

        private ManagedInstanceAdministratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedInstanceAdministratorType ActiveDirectory { get; } = new ManagedInstanceAdministratorType("ActiveDirectory");

        public static bool operator ==(ManagedInstanceAdministratorType left, ManagedInstanceAdministratorType right) => left.Equals(right);
        public static bool operator !=(ManagedInstanceAdministratorType left, ManagedInstanceAdministratorType right) => !left.Equals(right);

        public static explicit operator string(ManagedInstanceAdministratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedInstanceAdministratorType other && Equals(other);
        public bool Equals(ManagedInstanceAdministratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the sample schema to apply when creating this database.
    /// </summary>
    [EnumType]
    public readonly struct SampleName : IEquatable<SampleName>
    {
        private readonly string _value;

        private SampleName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SampleName AdventureWorksLT { get; } = new SampleName("AdventureWorksLT");
        public static SampleName WideWorldImportersStd { get; } = new SampleName("WideWorldImportersStd");
        public static SampleName WideWorldImportersFull { get; } = new SampleName("WideWorldImportersFull");

        public static bool operator ==(SampleName left, SampleName right) => left.Equals(right);
        public static bool operator !=(SampleName left, SampleName right) => !left.Equals(right);

        public static explicit operator string(SampleName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SampleName other && Equals(other);
        public bool Equals(SampleName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SensitivityLabelRank : IEquatable<SensitivityLabelRank>
    {
        private readonly string _value;

        private SensitivityLabelRank(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SensitivityLabelRank None { get; } = new SensitivityLabelRank("None");
        public static SensitivityLabelRank Low { get; } = new SensitivityLabelRank("Low");
        public static SensitivityLabelRank Medium { get; } = new SensitivityLabelRank("Medium");
        public static SensitivityLabelRank High { get; } = new SensitivityLabelRank("High");
        public static SensitivityLabelRank Critical { get; } = new SensitivityLabelRank("Critical");

        public static bool operator ==(SensitivityLabelRank left, SensitivityLabelRank right) => left.Equals(right);
        public static bool operator !=(SensitivityLabelRank left, SensitivityLabelRank right) => !left.Equals(right);

        public static explicit operator string(SensitivityLabelRank value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SensitivityLabelRank other && Equals(other);
        public bool Equals(SensitivityLabelRank other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
