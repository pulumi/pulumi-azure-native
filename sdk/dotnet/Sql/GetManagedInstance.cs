// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql
{
    public static class GetManagedInstance
    {
        /// <summary>
        /// Gets a managed instance.
        /// Azure REST API version: 2021-11-01.
        /// </summary>
        public static Task<GetManagedInstanceResult> InvokeAsync(GetManagedInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedInstanceResult>("azure-native:sql:getManagedInstance", args ?? new GetManagedInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a managed instance.
        /// Azure REST API version: 2021-11-01.
        /// </summary>
        public static Output<GetManagedInstanceResult> Invoke(GetManagedInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedInstanceResult>("azure-native:sql:getManagedInstance", args ?? new GetManagedInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The child resources to include in the response.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the managed instance.
        /// </summary>
        [Input("managedInstanceName", required: true)]
        public string ManagedInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetManagedInstanceArgs()
        {
        }
        public static new GetManagedInstanceArgs Empty => new GetManagedInstanceArgs();
    }

    public sealed class GetManagedInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The child resources to include in the response.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The name of the managed instance.
        /// </summary>
        [Input("managedInstanceName", required: true)]
        public Input<string> ManagedInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetManagedInstanceInvokeArgs()
        {
        }
        public static new GetManagedInstanceInvokeArgs Empty => new GetManagedInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedInstanceResult
    {
        /// <summary>
        /// Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).
        /// </summary>
        public readonly string? AdministratorLogin;
        /// <summary>
        /// The Azure Active Directory administrator of the server.
        /// </summary>
        public readonly Outputs.ManagedInstanceExternalAdministratorResponse? Administrators;
        /// <summary>
        /// Collation of the managed instance.
        /// </summary>
        public readonly string? Collation;
        /// <summary>
        /// The storage account type used to store backups for this instance. The options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage), Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
        /// </summary>
        public readonly string CurrentBackupStorageRedundancy;
        /// <summary>
        /// The Dns Zone that the managed instance is in.
        /// </summary>
        public readonly string DnsZone;
        /// <summary>
        /// The fully qualified domain name of the managed instance.
        /// </summary>
        public readonly string FullyQualifiedDomainName;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Active Directory identity of the managed instance.
        /// </summary>
        public readonly Outputs.ResourceIdentityResponse? Identity;
        /// <summary>
        /// The Id of the instance pool this managed server belongs to.
        /// </summary>
        public readonly string? InstancePoolId;
        /// <summary>
        /// A CMK URI of the key to use for encryption.
        /// </summary>
        public readonly string? KeyId;
        /// <summary>
        /// The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
        /// </summary>
        public readonly string? LicenseType;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Specifies maintenance configuration id to apply to this managed instance.
        /// </summary>
        public readonly string? MaintenanceConfigurationId;
        /// <summary>
        /// Minimal TLS version. Allowed values: 'None', '1.0', '1.1', '1.2'
        /// </summary>
        public readonly string? MinimalTlsVersion;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource id of a user assigned identity to be used by default.
        /// </summary>
        public readonly string? PrimaryUserAssignedIdentityId;
        /// <summary>
        /// List of private endpoint connections on a managed instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagedInstancePecPropertyResponse> PrivateEndpointConnections;
        public readonly string ProvisioningState;
        /// <summary>
        /// Connection type used for connecting to the instance.
        /// </summary>
        public readonly string? ProxyOverride;
        /// <summary>
        /// Whether or not the public data endpoint is enabled.
        /// </summary>
        public readonly bool? PublicDataEndpointEnabled;
        /// <summary>
        /// The storage account type to be used to store backups for this instance. The options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage), Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
        /// </summary>
        public readonly string? RequestedBackupStorageRedundancy;
        /// <summary>
        /// The managed instance's service principal.
        /// </summary>
        public readonly Outputs.ServicePrincipalResponse? ServicePrincipal;
        /// <summary>
        /// Managed instance SKU. Allowed values for sku.name: GP_Gen5, GP_G8IM, GP_G8IH, BC_Gen5, BC_G8IM, BC_G8IH
        /// </summary>
        public readonly Outputs.SkuResponse? Sku;
        /// <summary>
        /// The state of the managed instance.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Storage size in GB. Minimum value: 32. Maximum value: 16384. Increments of 32 GB allowed only. Maximum value depends on the selected hardware family and number of vCores.
        /// </summary>
        public readonly int? StorageSizeInGB;
        /// <summary>
        /// Subnet resource ID for the managed instance.
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Id of the timezone. Allowed values are timezones supported by Windows.
        /// Windows keeps details on supported timezones, including the id, in registry under
        /// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
        /// You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.
        /// List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// An example of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
        /// </summary>
        public readonly string? TimezoneId;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
        /// </summary>
        public readonly int? VCores;
        /// <summary>
        /// Whether or not the multi-az is enabled.
        /// </summary>
        public readonly bool? ZoneRedundant;

        [OutputConstructor]
        private GetManagedInstanceResult(
            string? administratorLogin,

            Outputs.ManagedInstanceExternalAdministratorResponse? administrators,

            string? collation,

            string currentBackupStorageRedundancy,

            string dnsZone,

            string fullyQualifiedDomainName,

            string id,

            Outputs.ResourceIdentityResponse? identity,

            string? instancePoolId,

            string? keyId,

            string? licenseType,

            string location,

            string? maintenanceConfigurationId,

            string? minimalTlsVersion,

            string name,

            string? primaryUserAssignedIdentityId,

            ImmutableArray<Outputs.ManagedInstancePecPropertyResponse> privateEndpointConnections,

            string provisioningState,

            string? proxyOverride,

            bool? publicDataEndpointEnabled,

            string? requestedBackupStorageRedundancy,

            Outputs.ServicePrincipalResponse? servicePrincipal,

            Outputs.SkuResponse? sku,

            string state,

            int? storageSizeInGB,

            string? subnetId,

            ImmutableDictionary<string, string>? tags,

            string? timezoneId,

            string type,

            int? vCores,

            bool? zoneRedundant)
        {
            AdministratorLogin = administratorLogin;
            Administrators = administrators;
            Collation = collation;
            CurrentBackupStorageRedundancy = currentBackupStorageRedundancy;
            DnsZone = dnsZone;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            Id = id;
            Identity = identity;
            InstancePoolId = instancePoolId;
            KeyId = keyId;
            LicenseType = licenseType;
            Location = location;
            MaintenanceConfigurationId = maintenanceConfigurationId;
            MinimalTlsVersion = minimalTlsVersion;
            Name = name;
            PrimaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            ProxyOverride = proxyOverride;
            PublicDataEndpointEnabled = publicDataEndpointEnabled;
            RequestedBackupStorageRedundancy = requestedBackupStorageRedundancy;
            ServicePrincipal = servicePrincipal;
            Sku = sku;
            State = state;
            StorageSizeInGB = storageSizeInGB;
            SubnetId = subnetId;
            Tags = tags;
            TimezoneId = timezoneId;
            Type = type;
            VCores = vCores;
            ZoneRedundant = zoneRedundant;
        }
    }
}
