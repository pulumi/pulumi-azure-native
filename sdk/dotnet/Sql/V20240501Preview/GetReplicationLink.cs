// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20240501Preview
{
    public static class GetReplicationLink
    {
        /// <summary>
        /// Gets a replication link.
        /// </summary>
        public static Task<GetReplicationLinkResult> InvokeAsync(GetReplicationLinkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReplicationLinkResult>("azure-native:sql/v20240501preview:getReplicationLink", args ?? new GetReplicationLinkArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a replication link.
        /// </summary>
        public static Output<GetReplicationLinkResult> Invoke(GetReplicationLinkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReplicationLinkResult>("azure-native:sql/v20240501preview:getReplicationLink", args ?? new GetReplicationLinkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReplicationLinkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the replication link.
        /// </summary>
        [Input("linkId", required: true)]
        public string LinkId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetReplicationLinkArgs()
        {
        }
        public static new GetReplicationLinkArgs Empty => new GetReplicationLinkArgs();
    }

    public sealed class GetReplicationLinkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the replication link.
        /// </summary>
        [Input("linkId", required: true)]
        public Input<string> LinkId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetReplicationLinkInvokeArgs()
        {
        }
        public static new GetReplicationLinkInvokeArgs Empty => new GetReplicationLinkInvokeArgs();
    }


    [OutputType]
    public sealed class GetReplicationLinkResult
    {
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the user is currently allowed to terminate the link.
        /// </summary>
        public readonly bool IsTerminationAllowed;
        /// <summary>
        /// Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
        /// </summary>
        public readonly string? LinkType;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Resource partner database.
        /// </summary>
        public readonly string PartnerDatabase;
        /// <summary>
        /// Resource partner database Id.
        /// </summary>
        public readonly string PartnerDatabaseId;
        /// <summary>
        /// Resource partner location.
        /// </summary>
        public readonly string PartnerLocation;
        /// <summary>
        /// Partner replication role.
        /// </summary>
        public readonly string PartnerRole;
        /// <summary>
        /// Resource partner server.
        /// </summary>
        public readonly string PartnerServer;
        /// <summary>
        /// Seeding completion percentage for the link.
        /// </summary>
        public readonly int PercentComplete;
        /// <summary>
        /// Replication mode.
        /// </summary>
        public readonly string ReplicationMode;
        /// <summary>
        /// Replication state (PENDING, SEEDING, CATCHUP, SUSPENDED).
        /// </summary>
        public readonly string ReplicationState;
        /// <summary>
        /// Local replication role.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// Time at which the link was created.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetReplicationLinkResult(
            string id,

            bool isTerminationAllowed,

            string? linkType,

            string name,

            string partnerDatabase,

            string partnerDatabaseId,

            string partnerLocation,

            string partnerRole,

            string partnerServer,

            int percentComplete,

            string replicationMode,

            string replicationState,

            string role,

            string startTime,

            string type)
        {
            Id = id;
            IsTerminationAllowed = isTerminationAllowed;
            LinkType = linkType;
            Name = name;
            PartnerDatabase = partnerDatabase;
            PartnerDatabaseId = partnerDatabaseId;
            PartnerLocation = partnerLocation;
            PartnerRole = partnerRole;
            PartnerServer = partnerServer;
            PercentComplete = percentComplete;
            ReplicationMode = replicationMode;
            ReplicationState = replicationState;
            Role = role;
            StartTime = startTime;
            Type = type;
        }
    }
}
