// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Sql.V20140401
{
    /// <summary>
    /// Contains information about a database Threat Detection policy.
    /// </summary>
    [AzureNextGenResourceType("azure-nextgen:sql/v20140401:DatabaseThreatDetectionPolicy")]
    public partial class DatabaseThreatDetectionPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action.
        /// </summary>
        [Output("disabledAlerts")]
        public Output<string?> DisabledAlerts { get; private set; } = null!;

        /// <summary>
        /// Specifies that the alert is sent to the account administrators.
        /// </summary>
        [Output("emailAccountAdmins")]
        public Output<string?> EmailAccountAdmins { get; private set; } = null!;

        /// <summary>
        /// Specifies the semicolon-separated list of e-mail addresses to which the alert is sent.
        /// </summary>
        [Output("emailAddresses")]
        public Output<string?> EmailAddresses { get; private set; } = null!;

        /// <summary>
        /// Resource kind.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep in the Threat Detection audit logs.
        /// </summary>
        [Output("retentionDays")]
        public Output<int?> RetentionDays { get; private set; } = null!;

        /// <summary>
        /// Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the Threat Detection audit storage account. If state is Enabled, storageAccountAccessKey is required.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is required.
        /// </summary>
        [Output("storageEndpoint")]
        public Output<string?> StorageEndpoint { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to use the default server policy.
        /// </summary>
        [Output("useServerDefault")]
        public Output<string?> UseServerDefault { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseThreatDetectionPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseThreatDetectionPolicy(string name, DatabaseThreatDetectionPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:sql/v20140401:DatabaseThreatDetectionPolicy", name, args ?? new DatabaseThreatDetectionPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseThreatDetectionPolicy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:sql/v20140401:DatabaseThreatDetectionPolicy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:sql:DatabaseThreatDetectionPolicy"},
                    new Pulumi.Alias { Type = "azure-nextgen:sql/latest:DatabaseThreatDetectionPolicy"},
                    new Pulumi.Alias { Type = "azure-nextgen:sql/v20180601preview:DatabaseThreatDetectionPolicy"},
                    new Pulumi.Alias { Type = "azure-nextgen:sql/v20200202preview:DatabaseThreatDetectionPolicy"},
                    new Pulumi.Alias { Type = "azure-nextgen:sql/v20200801preview:DatabaseThreatDetectionPolicy"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseThreatDetectionPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseThreatDetectionPolicy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DatabaseThreatDetectionPolicy(name, id, options);
        }
    }

    public sealed class DatabaseThreatDetectionPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the database for which database Threat Detection policy is defined.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action.
        /// </summary>
        [Input("disabledAlerts")]
        public Input<string>? DisabledAlerts { get; set; }

        /// <summary>
        /// Specifies that the alert is sent to the account administrators.
        /// </summary>
        [Input("emailAccountAdmins")]
        public InputUnion<string, Pulumi.AzureNextGen.Sql.V20140401.SecurityAlertPolicyEmailAccountAdmins>? EmailAccountAdmins { get; set; }

        /// <summary>
        /// Specifies the semicolon-separated list of e-mail addresses to which the alert is sent.
        /// </summary>
        [Input("emailAddresses")]
        public Input<string>? EmailAddresses { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep in the Threat Detection audit logs.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        /// <summary>
        /// The name of the security alert policy.
        /// </summary>
        [Input("securityAlertPolicyName", required: true)]
        public Input<string> SecurityAlertPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        /// <summary>
        /// Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
        /// </summary>
        [Input("state", required: true)]
        public InputUnion<string, Pulumi.AzureNextGen.Sql.V20140401.SecurityAlertPolicyState> State { get; set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the Threat Detection audit storage account. If state is Enabled, storageAccountAccessKey is required.
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is required.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        /// <summary>
        /// Specifies whether to use the default server policy.
        /// </summary>
        [Input("useServerDefault")]
        public InputUnion<string, Pulumi.AzureNextGen.Sql.V20140401.SecurityAlertPolicyUseServerDefault>? UseServerDefault { get; set; }

        public DatabaseThreatDetectionPolicyArgs()
        {
        }
    }
}
