// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Sql.V20230501Preview
{
    /// <summary>
    /// The BackupStorageAccessTier for the LTR backups
    /// </summary>
    [EnumType]
    public readonly struct BackupStorageAccessTier : IEquatable<BackupStorageAccessTier>
    {
        private readonly string _value;

        private BackupStorageAccessTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupStorageAccessTier Hot { get; } = new BackupStorageAccessTier("Hot");
        public static BackupStorageAccessTier Archive { get; } = new BackupStorageAccessTier("Archive");

        public static bool operator ==(BackupStorageAccessTier left, BackupStorageAccessTier right) => left.Equals(right);
        public static bool operator !=(BackupStorageAccessTier left, BackupStorageAccessTier right) => !left.Equals(right);

        public static explicit operator string(BackupStorageAccessTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupStorageAccessTier other && Equals(other);
        public bool Equals(BackupStorageAccessTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
    /// </summary>
    [EnumType]
    public readonly struct ReplicationLinkType : IEquatable<ReplicationLinkType>
    {
        private readonly string _value;

        private ReplicationLinkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationLinkType GEO { get; } = new ReplicationLinkType("GEO");
        public static ReplicationLinkType NAMED { get; } = new ReplicationLinkType("NAMED");
        public static ReplicationLinkType STANDBY { get; } = new ReplicationLinkType("STANDBY");

        public static bool operator ==(ReplicationLinkType left, ReplicationLinkType right) => left.Equals(right);
        public static bool operator !=(ReplicationLinkType left, ReplicationLinkType right) => !left.Equals(right);

        public static explicit operator string(ReplicationLinkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationLinkType other && Equals(other);
        public bool Equals(ReplicationLinkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
