// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Sql
{
    /// <summary>
    /// The type of administrator.
    /// </summary>
    [EnumType]
    public readonly struct AdministratorType : IEquatable<AdministratorType>
    {
        private readonly string _value;

        private AdministratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdministratorType ActiveDirectory { get; } = new AdministratorType("ActiveDirectory");

        public static bool operator ==(AdministratorType left, AdministratorType right) => left.Equals(right);
        public static bool operator !=(AdministratorType left, AdministratorType right) => !left.Equals(right);

        public static explicit operator string(AdministratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdministratorType other && Equals(other);
        public bool Equals(AdministratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Collation of the metadata catalog.
    /// </summary>
    [EnumType]
    public readonly struct CatalogCollationType : IEquatable<CatalogCollationType>
    {
        private readonly string _value;

        private CatalogCollationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CatalogCollationType DATABASE_DEFAULT { get; } = new CatalogCollationType("DATABASE_DEFAULT");
        public static CatalogCollationType SQL_Latin1_General_CP1_CI_AS { get; } = new CatalogCollationType("SQL_Latin1_General_CP1_CI_AS");

        public static bool operator ==(CatalogCollationType left, CatalogCollationType right) => left.Equals(right);
        public static bool operator !=(CatalogCollationType left, CatalogCollationType right) => !left.Equals(right);

        public static explicit operator string(CatalogCollationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CatalogCollationType other && Equals(other);
        public bool Equals(CatalogCollationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the mode of database creation.
    /// 
    /// Default: regular database creation.
    /// 
    /// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
    /// 
    /// OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
    /// 
    /// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
    /// 
    /// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
    /// 
    /// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
    /// 
    /// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
    /// 
    /// Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Copy { get; } = new CreateMode("Copy");
        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode NonReadableSecondary { get; } = new CreateMode("NonReadableSecondary");
        public static CreateMode OnlineSecondary { get; } = new CreateMode("OnlineSecondary");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode Recovery { get; } = new CreateMode("Recovery");
        public static CreateMode Restore { get; } = new CreateMode("Restore");
        public static CreateMode RestoreLongTermRetentionBackup { get; } = new CreateMode("RestoreLongTermRetentionBackup");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
    /// 
    /// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
    /// 
    /// ```azurecli
    /// az sql db list-editions -l &lt;location&gt; -o table
    /// ````
    /// 
    /// ```powershell
    /// Get-AzSqlServerServiceObjective -Location &lt;location&gt;
    /// ````
    /// </summary>
    [EnumType]
    public readonly struct DatabaseEdition : IEquatable<DatabaseEdition>
    {
        private readonly string _value;

        private DatabaseEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabaseEdition Web { get; } = new DatabaseEdition("Web");
        public static DatabaseEdition Business { get; } = new DatabaseEdition("Business");
        public static DatabaseEdition Basic { get; } = new DatabaseEdition("Basic");
        public static DatabaseEdition Standard { get; } = new DatabaseEdition("Standard");
        public static DatabaseEdition Premium { get; } = new DatabaseEdition("Premium");
        public static DatabaseEdition PremiumRS { get; } = new DatabaseEdition("PremiumRS");
        public static DatabaseEdition Free { get; } = new DatabaseEdition("Free");
        public static DatabaseEdition Stretch { get; } = new DatabaseEdition("Stretch");
        public static DatabaseEdition DataWarehouse { get; } = new DatabaseEdition("DataWarehouse");
        public static DatabaseEdition System { get; } = new DatabaseEdition("System");
        public static DatabaseEdition System2 { get; } = new DatabaseEdition("System2");
        public static DatabaseEdition GeneralPurpose { get; } = new DatabaseEdition("GeneralPurpose");
        public static DatabaseEdition BusinessCritical { get; } = new DatabaseEdition("BusinessCritical");
        public static DatabaseEdition Hyperscale { get; } = new DatabaseEdition("Hyperscale");

        public static bool operator ==(DatabaseEdition left, DatabaseEdition right) => left.Equals(right);
        public static bool operator !=(DatabaseEdition left, DatabaseEdition right) => !left.Equals(right);

        public static explicit operator string(DatabaseEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseEdition other && Equals(other);
        public bool Equals(DatabaseEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The edition of the elastic pool.
    /// </summary>
    [EnumType]
    public readonly struct ElasticPoolEdition : IEquatable<ElasticPoolEdition>
    {
        private readonly string _value;

        private ElasticPoolEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ElasticPoolEdition Basic { get; } = new ElasticPoolEdition("Basic");
        public static ElasticPoolEdition Standard { get; } = new ElasticPoolEdition("Standard");
        public static ElasticPoolEdition Premium { get; } = new ElasticPoolEdition("Premium");
        public static ElasticPoolEdition GeneralPurpose { get; } = new ElasticPoolEdition("GeneralPurpose");
        public static ElasticPoolEdition BusinessCritical { get; } = new ElasticPoolEdition("BusinessCritical");

        public static bool operator ==(ElasticPoolEdition left, ElasticPoolEdition right) => left.Equals(right);
        public static bool operator !=(ElasticPoolEdition left, ElasticPoolEdition right) => !left.Equals(right);

        public static explicit operator string(ElasticPoolEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ElasticPoolEdition other && Equals(other);
        public bool Equals(ElasticPoolEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the geo backup policy.
    /// </summary>
    [EnumType]
    public readonly struct GeoBackupPolicyState : IEquatable<GeoBackupPolicyState>
    {
        private readonly string _value;

        private GeoBackupPolicyState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GeoBackupPolicyState Disabled { get; } = new GeoBackupPolicyState("Disabled");
        public static GeoBackupPolicyState Enabled { get; } = new GeoBackupPolicyState("Enabled");

        public static bool operator ==(GeoBackupPolicyState left, GeoBackupPolicyState right) => left.Equals(right);
        public static bool operator !=(GeoBackupPolicyState left, GeoBackupPolicyState right) => !left.Equals(right);

        public static explicit operator string(GeoBackupPolicyState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GeoBackupPolicyState other && Equals(other);
        public bool Equals(GeoBackupPolicyState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType None { get; } = new IdentityType("None");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).
    /// </summary>
    [EnumType]
    public readonly struct InstancePoolLicenseType : IEquatable<InstancePoolLicenseType>
    {
        private readonly string _value;

        private InstancePoolLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstancePoolLicenseType LicenseIncluded { get; } = new InstancePoolLicenseType("LicenseIncluded");
        public static InstancePoolLicenseType BasePrice { get; } = new InstancePoolLicenseType("BasePrice");

        public static bool operator ==(InstancePoolLicenseType left, InstancePoolLicenseType right) => left.Equals(right);
        public static bool operator !=(InstancePoolLicenseType left, InstancePoolLicenseType right) => !left.Equals(right);

        public static explicit operator string(InstancePoolLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstancePoolLicenseType other && Equals(other);
        public bool Equals(InstancePoolLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Schedule interval type
    /// </summary>
    [EnumType]
    public readonly struct JobScheduleType : IEquatable<JobScheduleType>
    {
        private readonly string _value;

        private JobScheduleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobScheduleType Once { get; } = new JobScheduleType("Once");
        public static JobScheduleType Recurring { get; } = new JobScheduleType("Recurring");

        public static bool operator ==(JobScheduleType left, JobScheduleType right) => left.Equals(right);
        public static bool operator !=(JobScheduleType left, JobScheduleType right) => !left.Equals(right);

        public static explicit operator string(JobScheduleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobScheduleType other && Equals(other);
        public bool Equals(JobScheduleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The source of the action to execute.
    /// </summary>
    [EnumType]
    public readonly struct JobStepActionSource : IEquatable<JobStepActionSource>
    {
        private readonly string _value;

        private JobStepActionSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepActionSource Inline { get; } = new JobStepActionSource("Inline");

        public static bool operator ==(JobStepActionSource left, JobStepActionSource right) => left.Equals(right);
        public static bool operator !=(JobStepActionSource left, JobStepActionSource right) => !left.Equals(right);

        public static explicit operator string(JobStepActionSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepActionSource other && Equals(other);
        public bool Equals(JobStepActionSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of action being executed by the job step.
    /// </summary>
    [EnumType]
    public readonly struct JobStepActionType : IEquatable<JobStepActionType>
    {
        private readonly string _value;

        private JobStepActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepActionType TSql { get; } = new JobStepActionType("TSql");

        public static bool operator ==(JobStepActionType left, JobStepActionType right) => left.Equals(right);
        public static bool operator !=(JobStepActionType left, JobStepActionType right) => !left.Equals(right);

        public static explicit operator string(JobStepActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepActionType other && Equals(other);
        public bool Equals(JobStepActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The output destination type.
    /// </summary>
    [EnumType]
    public readonly struct JobStepOutputType : IEquatable<JobStepOutputType>
    {
        private readonly string _value;

        private JobStepOutputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepOutputType SqlDatabase { get; } = new JobStepOutputType("SqlDatabase");

        public static bool operator ==(JobStepOutputType left, JobStepOutputType right) => left.Equals(right);
        public static bool operator !=(JobStepOutputType left, JobStepOutputType right) => !left.Equals(right);

        public static explicit operator string(JobStepOutputType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepOutputType other && Equals(other);
        public bool Equals(JobStepOutputType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the target is included or excluded from the group.
    /// </summary>
    [EnumType]
    public readonly struct JobTargetGroupMembershipType : IEquatable<JobTargetGroupMembershipType>
    {
        private readonly string _value;

        private JobTargetGroupMembershipType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobTargetGroupMembershipType Include { get; } = new JobTargetGroupMembershipType("Include");
        public static JobTargetGroupMembershipType Exclude { get; } = new JobTargetGroupMembershipType("Exclude");

        public static bool operator ==(JobTargetGroupMembershipType left, JobTargetGroupMembershipType right) => left.Equals(right);
        public static bool operator !=(JobTargetGroupMembershipType left, JobTargetGroupMembershipType right) => !left.Equals(right);

        public static explicit operator string(JobTargetGroupMembershipType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobTargetGroupMembershipType other && Equals(other);
        public bool Equals(JobTargetGroupMembershipType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The target type.
    /// </summary>
    [EnumType]
    public readonly struct JobTargetType : IEquatable<JobTargetType>
    {
        private readonly string _value;

        private JobTargetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobTargetType TargetGroup { get; } = new JobTargetType("TargetGroup");
        public static JobTargetType SqlDatabase { get; } = new JobTargetType("SqlDatabase");
        public static JobTargetType SqlElasticPool { get; } = new JobTargetType("SqlElasticPool");
        public static JobTargetType SqlShardMap { get; } = new JobTargetType("SqlShardMap");
        public static JobTargetType SqlServer { get; } = new JobTargetType("SqlServer");

        public static bool operator ==(JobTargetType left, JobTargetType right) => left.Equals(right);
        public static bool operator !=(JobTargetType left, JobTargetType right) => !left.Equals(right);

        public static explicit operator string(JobTargetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobTargetType other && Equals(other);
        public bool Equals(JobTargetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore. RestoreLongTermRetentionBackup: Create a database by restoring from a long term retention backup (longTermRetentionBackupResourceId required).
    /// </summary>
    [EnumType]
    public readonly struct ManagedDatabaseCreateMode : IEquatable<ManagedDatabaseCreateMode>
    {
        private readonly string _value;

        private ManagedDatabaseCreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedDatabaseCreateMode Default { get; } = new ManagedDatabaseCreateMode("Default");
        public static ManagedDatabaseCreateMode RestoreExternalBackup { get; } = new ManagedDatabaseCreateMode("RestoreExternalBackup");
        public static ManagedDatabaseCreateMode PointInTimeRestore { get; } = new ManagedDatabaseCreateMode("PointInTimeRestore");
        public static ManagedDatabaseCreateMode Recovery { get; } = new ManagedDatabaseCreateMode("Recovery");
        public static ManagedDatabaseCreateMode RestoreLongTermRetentionBackup { get; } = new ManagedDatabaseCreateMode("RestoreLongTermRetentionBackup");

        public static bool operator ==(ManagedDatabaseCreateMode left, ManagedDatabaseCreateMode right) => left.Equals(right);
        public static bool operator !=(ManagedDatabaseCreateMode left, ManagedDatabaseCreateMode right) => !left.Equals(right);

        public static explicit operator string(ManagedDatabaseCreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedDatabaseCreateMode other && Equals(other);
        public bool Equals(ManagedDatabaseCreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the managed instance administrator.
    /// </summary>
    [EnumType]
    public readonly struct ManagedInstanceAdministratorType : IEquatable<ManagedInstanceAdministratorType>
    {
        private readonly string _value;

        private ManagedInstanceAdministratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedInstanceAdministratorType ActiveDirectory { get; } = new ManagedInstanceAdministratorType("ActiveDirectory");

        public static bool operator ==(ManagedInstanceAdministratorType left, ManagedInstanceAdministratorType right) => left.Equals(right);
        public static bool operator !=(ManagedInstanceAdministratorType left, ManagedInstanceAdministratorType right) => !left.Equals(right);

        public static explicit operator string(ManagedInstanceAdministratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedInstanceAdministratorType other && Equals(other);
        public bool Equals(ManagedInstanceAdministratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
    /// </summary>
    [EnumType]
    public readonly struct ManagedInstanceLicenseType : IEquatable<ManagedInstanceLicenseType>
    {
        private readonly string _value;

        private ManagedInstanceLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedInstanceLicenseType LicenseIncluded { get; } = new ManagedInstanceLicenseType("LicenseIncluded");
        public static ManagedInstanceLicenseType BasePrice { get; } = new ManagedInstanceLicenseType("BasePrice");

        public static bool operator ==(ManagedInstanceLicenseType left, ManagedInstanceLicenseType right) => left.Equals(right);
        public static bool operator !=(ManagedInstanceLicenseType left, ManagedInstanceLicenseType right) => !left.Equals(right);

        public static explicit operator string(ManagedInstanceLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedInstanceLicenseType other && Equals(other);
        public bool Equals(ManagedInstanceLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Connection type used for connecting to the instance.
    /// </summary>
    [EnumType]
    public readonly struct ManagedInstanceProxyOverride : IEquatable<ManagedInstanceProxyOverride>
    {
        private readonly string _value;

        private ManagedInstanceProxyOverride(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedInstanceProxyOverride Proxy { get; } = new ManagedInstanceProxyOverride("Proxy");
        public static ManagedInstanceProxyOverride Redirect { get; } = new ManagedInstanceProxyOverride("Redirect");
        public static ManagedInstanceProxyOverride Default { get; } = new ManagedInstanceProxyOverride("Default");

        public static bool operator ==(ManagedInstanceProxyOverride left, ManagedInstanceProxyOverride right) => left.Equals(right);
        public static bool operator !=(ManagedInstanceProxyOverride left, ManagedInstanceProxyOverride right) => !left.Equals(right);

        public static explicit operator string(ManagedInstanceProxyOverride value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedInstanceProxyOverride other && Equals(other);
        public bool Equals(ManagedInstanceProxyOverride other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the mode of database creation.
    /// 
    /// Default: Regular instance creation.
    /// 
    /// Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.
    /// </summary>
    [EnumType]
    public readonly struct ManagedServerCreateMode : IEquatable<ManagedServerCreateMode>
    {
        private readonly string _value;

        private ManagedServerCreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServerCreateMode Default { get; } = new ManagedServerCreateMode("Default");
        public static ManagedServerCreateMode PointInTimeRestore { get; } = new ManagedServerCreateMode("PointInTimeRestore");

        public static bool operator ==(ManagedServerCreateMode left, ManagedServerCreateMode right) => left.Equals(right);
        public static bool operator !=(ManagedServerCreateMode left, ManagedServerCreateMode right) => !left.Equals(right);

        public static explicit operator string(ManagedServerCreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServerCreateMode other && Equals(other);
        public bool Equals(ManagedServerCreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The private link service connection status.
    /// </summary>
    [EnumType]
    public readonly struct PrivateLinkServiceConnectionStateStatus : IEquatable<PrivateLinkServiceConnectionStateStatus>
    {
        private readonly string _value;

        private PrivateLinkServiceConnectionStateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateLinkServiceConnectionStateStatus Approved { get; } = new PrivateLinkServiceConnectionStateStatus("Approved");
        public static PrivateLinkServiceConnectionStateStatus Pending { get; } = new PrivateLinkServiceConnectionStateStatus("Pending");
        public static PrivateLinkServiceConnectionStateStatus Rejected { get; } = new PrivateLinkServiceConnectionStateStatus("Rejected");
        public static PrivateLinkServiceConnectionStateStatus Disconnected { get; } = new PrivateLinkServiceConnectionStateStatus("Disconnected");

        public static bool operator ==(PrivateLinkServiceConnectionStateStatus left, PrivateLinkServiceConnectionStateStatus right) => left.Equals(right);
        public static bool operator !=(PrivateLinkServiceConnectionStateStatus left, PrivateLinkServiceConnectionStateStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateLinkServiceConnectionStateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateLinkServiceConnectionStateStatus other && Equals(other);
        public bool Equals(PrivateLinkServiceConnectionStateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Failover policy of the read-only endpoint for the failover group.
    /// </summary>
    [EnumType]
    public readonly struct ReadOnlyEndpointFailoverPolicy : IEquatable<ReadOnlyEndpointFailoverPolicy>
    {
        private readonly string _value;

        private ReadOnlyEndpointFailoverPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReadOnlyEndpointFailoverPolicy Disabled { get; } = new ReadOnlyEndpointFailoverPolicy("Disabled");
        public static ReadOnlyEndpointFailoverPolicy Enabled { get; } = new ReadOnlyEndpointFailoverPolicy("Enabled");

        public static bool operator ==(ReadOnlyEndpointFailoverPolicy left, ReadOnlyEndpointFailoverPolicy right) => left.Equals(right);
        public static bool operator !=(ReadOnlyEndpointFailoverPolicy left, ReadOnlyEndpointFailoverPolicy right) => !left.Equals(right);

        public static explicit operator string(ReadOnlyEndpointFailoverPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReadOnlyEndpointFailoverPolicy other && Equals(other);
        public bool Equals(ReadOnlyEndpointFailoverPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition.
    /// </summary>
    [EnumType]
    public readonly struct ReadScale : IEquatable<ReadScale>
    {
        private readonly string _value;

        private ReadScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReadScale Enabled { get; } = new ReadScale("Enabled");
        public static ReadScale Disabled { get; } = new ReadScale("Disabled");

        public static bool operator ==(ReadScale left, ReadScale right) => left.Equals(right);
        public static bool operator !=(ReadScale left, ReadScale right) => !left.Equals(right);

        public static explicit operator string(ReadScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReadScale other && Equals(other);
        public bool Equals(ReadScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
    /// </summary>
    [EnumType]
    public readonly struct ReadWriteEndpointFailoverPolicy : IEquatable<ReadWriteEndpointFailoverPolicy>
    {
        private readonly string _value;

        private ReadWriteEndpointFailoverPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReadWriteEndpointFailoverPolicy Manual { get; } = new ReadWriteEndpointFailoverPolicy("Manual");
        public static ReadWriteEndpointFailoverPolicy Automatic { get; } = new ReadWriteEndpointFailoverPolicy("Automatic");

        public static bool operator ==(ReadWriteEndpointFailoverPolicy left, ReadWriteEndpointFailoverPolicy right) => left.Equals(right);
        public static bool operator !=(ReadWriteEndpointFailoverPolicy left, ReadWriteEndpointFailoverPolicy right) => !left.Equals(right);

        public static explicit operator string(ReadWriteEndpointFailoverPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReadWriteEndpointFailoverPolicy other && Equals(other);
        public bool Equals(ReadWriteEndpointFailoverPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.
    /// </summary>
    [EnumType]
    public readonly struct SampleName : IEquatable<SampleName>
    {
        private readonly string _value;

        private SampleName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SampleName AdventureWorksLT { get; } = new SampleName("AdventureWorksLT");

        public static bool operator ==(SampleName left, SampleName right) => left.Equals(right);
        public static bool operator !=(SampleName left, SampleName right) => !left.Equals(right);

        public static explicit operator string(SampleName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SampleName other && Equals(other);
        public bool Equals(SampleName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies that the alert is sent to the account administrators.
    /// </summary>
    [EnumType]
    public readonly struct SecurityAlertPolicyEmailAccountAdmins : IEquatable<SecurityAlertPolicyEmailAccountAdmins>
    {
        private readonly string _value;

        private SecurityAlertPolicyEmailAccountAdmins(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityAlertPolicyEmailAccountAdmins Enabled { get; } = new SecurityAlertPolicyEmailAccountAdmins("Enabled");
        public static SecurityAlertPolicyEmailAccountAdmins Disabled { get; } = new SecurityAlertPolicyEmailAccountAdmins("Disabled");

        public static bool operator ==(SecurityAlertPolicyEmailAccountAdmins left, SecurityAlertPolicyEmailAccountAdmins right) => left.Equals(right);
        public static bool operator !=(SecurityAlertPolicyEmailAccountAdmins left, SecurityAlertPolicyEmailAccountAdmins right) => !left.Equals(right);

        public static explicit operator string(SecurityAlertPolicyEmailAccountAdmins value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityAlertPolicyEmailAccountAdmins other && Equals(other);
        public bool Equals(SecurityAlertPolicyEmailAccountAdmins other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
    /// </summary>
    [EnumType]
    public readonly struct SecurityAlertPolicyState : IEquatable<SecurityAlertPolicyState>
    {
        private readonly string _value;

        private SecurityAlertPolicyState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityAlertPolicyState New { get; } = new SecurityAlertPolicyState("New");
        public static SecurityAlertPolicyState Enabled { get; } = new SecurityAlertPolicyState("Enabled");
        public static SecurityAlertPolicyState Disabled { get; } = new SecurityAlertPolicyState("Disabled");

        public static bool operator ==(SecurityAlertPolicyState left, SecurityAlertPolicyState right) => left.Equals(right);
        public static bool operator !=(SecurityAlertPolicyState left, SecurityAlertPolicyState right) => !left.Equals(right);

        public static explicit operator string(SecurityAlertPolicyState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityAlertPolicyState other && Equals(other);
        public bool Equals(SecurityAlertPolicyState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether to use the default server policy.
    /// </summary>
    [EnumType]
    public readonly struct SecurityAlertPolicyUseServerDefault : IEquatable<SecurityAlertPolicyUseServerDefault>
    {
        private readonly string _value;

        private SecurityAlertPolicyUseServerDefault(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityAlertPolicyUseServerDefault Enabled { get; } = new SecurityAlertPolicyUseServerDefault("Enabled");
        public static SecurityAlertPolicyUseServerDefault Disabled { get; } = new SecurityAlertPolicyUseServerDefault("Disabled");

        public static bool operator ==(SecurityAlertPolicyUseServerDefault left, SecurityAlertPolicyUseServerDefault right) => left.Equals(right);
        public static bool operator !=(SecurityAlertPolicyUseServerDefault left, SecurityAlertPolicyUseServerDefault right) => !left.Equals(right);

        public static explicit operator string(SecurityAlertPolicyUseServerDefault value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityAlertPolicyUseServerDefault other && Equals(other);
        public bool Equals(SecurityAlertPolicyUseServerDefault other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SensitivityLabelRank : IEquatable<SensitivityLabelRank>
    {
        private readonly string _value;

        private SensitivityLabelRank(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SensitivityLabelRank None { get; } = new SensitivityLabelRank("None");
        public static SensitivityLabelRank Low { get; } = new SensitivityLabelRank("Low");
        public static SensitivityLabelRank Medium { get; } = new SensitivityLabelRank("Medium");
        public static SensitivityLabelRank High { get; } = new SensitivityLabelRank("High");
        public static SensitivityLabelRank Critical { get; } = new SensitivityLabelRank("Critical");

        public static bool operator ==(SensitivityLabelRank left, SensitivityLabelRank right) => left.Equals(right);
        public static bool operator !=(SensitivityLabelRank left, SensitivityLabelRank right) => !left.Equals(right);

        public static explicit operator string(SensitivityLabelRank value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SensitivityLabelRank other && Equals(other);
        public bool Equals(SensitivityLabelRank other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The server key type like 'ServiceManaged', 'AzureKeyVault'.
    /// </summary>
    [EnumType]
    public readonly struct ServerKeyType : IEquatable<ServerKeyType>
    {
        private readonly string _value;

        private ServerKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerKeyType ServiceManaged { get; } = new ServerKeyType("ServiceManaged");
        public static ServerKeyType AzureKeyVault { get; } = new ServerKeyType("AzureKeyVault");

        public static bool operator ==(ServerKeyType left, ServerKeyType right) => left.Equals(right);
        public static bool operator !=(ServerKeyType left, ServerKeyType right) => !left.Equals(right);

        public static explicit operator string(ServerKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerKeyType other && Equals(other);
        public bool Equals(ServerKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The version of the server.
    /// </summary>
    [EnumType]
    public readonly struct ServerVersion : IEquatable<ServerVersion>
    {
        private readonly string _value;

        private ServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerVersion ServerVersion_2_0 { get; } = new ServerVersion("2.0");
        public static ServerVersion ServerVersion_12_0 { get; } = new ServerVersion("12.0");

        public static bool operator ==(ServerVersion left, ServerVersion right) => left.Equals(right);
        public static bool operator !=(ServerVersion left, ServerVersion right) => !left.Equals(right);

        public static explicit operator string(ServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerVersion other && Equals(other);
        public bool Equals(ServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property. 
    /// 
    /// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
    /// 
    /// ```azurecli
    /// az sql db list-editions -l &lt;location&gt; -o table
    /// ````
    /// 
    /// ```powershell
    /// Get-AzSqlServerServiceObjective -Location &lt;location&gt;
    /// ````
    /// </summary>
    [EnumType]
    public readonly struct ServiceObjectiveName : IEquatable<ServiceObjectiveName>
    {
        private readonly string _value;

        private ServiceObjectiveName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceObjectiveName System { get; } = new ServiceObjectiveName("System");
        public static ServiceObjectiveName System0 { get; } = new ServiceObjectiveName("System0");
        public static ServiceObjectiveName System1 { get; } = new ServiceObjectiveName("System1");
        public static ServiceObjectiveName System2 { get; } = new ServiceObjectiveName("System2");
        public static ServiceObjectiveName System3 { get; } = new ServiceObjectiveName("System3");
        public static ServiceObjectiveName System4 { get; } = new ServiceObjectiveName("System4");
        public static ServiceObjectiveName System2L { get; } = new ServiceObjectiveName("System2L");
        public static ServiceObjectiveName System3L { get; } = new ServiceObjectiveName("System3L");
        public static ServiceObjectiveName System4L { get; } = new ServiceObjectiveName("System4L");
        public static ServiceObjectiveName Free { get; } = new ServiceObjectiveName("Free");
        public static ServiceObjectiveName Basic { get; } = new ServiceObjectiveName("Basic");
        public static ServiceObjectiveName S0 { get; } = new ServiceObjectiveName("S0");
        public static ServiceObjectiveName S1 { get; } = new ServiceObjectiveName("S1");
        public static ServiceObjectiveName S2 { get; } = new ServiceObjectiveName("S2");
        public static ServiceObjectiveName S3 { get; } = new ServiceObjectiveName("S3");
        public static ServiceObjectiveName S4 { get; } = new ServiceObjectiveName("S4");
        public static ServiceObjectiveName S6 { get; } = new ServiceObjectiveName("S6");
        public static ServiceObjectiveName S7 { get; } = new ServiceObjectiveName("S7");
        public static ServiceObjectiveName S9 { get; } = new ServiceObjectiveName("S9");
        public static ServiceObjectiveName S12 { get; } = new ServiceObjectiveName("S12");
        public static ServiceObjectiveName P1 { get; } = new ServiceObjectiveName("P1");
        public static ServiceObjectiveName P2 { get; } = new ServiceObjectiveName("P2");
        public static ServiceObjectiveName P3 { get; } = new ServiceObjectiveName("P3");
        public static ServiceObjectiveName P4 { get; } = new ServiceObjectiveName("P4");
        public static ServiceObjectiveName P6 { get; } = new ServiceObjectiveName("P6");
        public static ServiceObjectiveName P11 { get; } = new ServiceObjectiveName("P11");
        public static ServiceObjectiveName P15 { get; } = new ServiceObjectiveName("P15");
        public static ServiceObjectiveName PRS1 { get; } = new ServiceObjectiveName("PRS1");
        public static ServiceObjectiveName PRS2 { get; } = new ServiceObjectiveName("PRS2");
        public static ServiceObjectiveName PRS4 { get; } = new ServiceObjectiveName("PRS4");
        public static ServiceObjectiveName PRS6 { get; } = new ServiceObjectiveName("PRS6");
        public static ServiceObjectiveName DW100 { get; } = new ServiceObjectiveName("DW100");
        public static ServiceObjectiveName DW200 { get; } = new ServiceObjectiveName("DW200");
        public static ServiceObjectiveName DW300 { get; } = new ServiceObjectiveName("DW300");
        public static ServiceObjectiveName DW400 { get; } = new ServiceObjectiveName("DW400");
        public static ServiceObjectiveName DW500 { get; } = new ServiceObjectiveName("DW500");
        public static ServiceObjectiveName DW600 { get; } = new ServiceObjectiveName("DW600");
        public static ServiceObjectiveName DW1000 { get; } = new ServiceObjectiveName("DW1000");
        public static ServiceObjectiveName DW1200 { get; } = new ServiceObjectiveName("DW1200");
        public static ServiceObjectiveName DW1000c { get; } = new ServiceObjectiveName("DW1000c");
        public static ServiceObjectiveName DW1500 { get; } = new ServiceObjectiveName("DW1500");
        public static ServiceObjectiveName DW1500c { get; } = new ServiceObjectiveName("DW1500c");
        public static ServiceObjectiveName DW2000 { get; } = new ServiceObjectiveName("DW2000");
        public static ServiceObjectiveName DW2000c { get; } = new ServiceObjectiveName("DW2000c");
        public static ServiceObjectiveName DW3000 { get; } = new ServiceObjectiveName("DW3000");
        public static ServiceObjectiveName DW2500c { get; } = new ServiceObjectiveName("DW2500c");
        public static ServiceObjectiveName DW3000c { get; } = new ServiceObjectiveName("DW3000c");
        public static ServiceObjectiveName DW6000 { get; } = new ServiceObjectiveName("DW6000");
        public static ServiceObjectiveName DW5000c { get; } = new ServiceObjectiveName("DW5000c");
        public static ServiceObjectiveName DW6000c { get; } = new ServiceObjectiveName("DW6000c");
        public static ServiceObjectiveName DW7500c { get; } = new ServiceObjectiveName("DW7500c");
        public static ServiceObjectiveName DW10000c { get; } = new ServiceObjectiveName("DW10000c");
        public static ServiceObjectiveName DW15000c { get; } = new ServiceObjectiveName("DW15000c");
        public static ServiceObjectiveName DW30000c { get; } = new ServiceObjectiveName("DW30000c");
        public static ServiceObjectiveName DS100 { get; } = new ServiceObjectiveName("DS100");
        public static ServiceObjectiveName DS200 { get; } = new ServiceObjectiveName("DS200");
        public static ServiceObjectiveName DS300 { get; } = new ServiceObjectiveName("DS300");
        public static ServiceObjectiveName DS400 { get; } = new ServiceObjectiveName("DS400");
        public static ServiceObjectiveName DS500 { get; } = new ServiceObjectiveName("DS500");
        public static ServiceObjectiveName DS600 { get; } = new ServiceObjectiveName("DS600");
        public static ServiceObjectiveName DS1000 { get; } = new ServiceObjectiveName("DS1000");
        public static ServiceObjectiveName DS1200 { get; } = new ServiceObjectiveName("DS1200");
        public static ServiceObjectiveName DS1500 { get; } = new ServiceObjectiveName("DS1500");
        public static ServiceObjectiveName DS2000 { get; } = new ServiceObjectiveName("DS2000");
        public static ServiceObjectiveName ElasticPool { get; } = new ServiceObjectiveName("ElasticPool");

        public static bool operator ==(ServiceObjectiveName left, ServiceObjectiveName right) => left.Equals(right);
        public static bool operator !=(ServiceObjectiveName left, ServiceObjectiveName right) => !left.Equals(right);

        public static explicit operator string(ServiceObjectiveName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceObjectiveName other && Equals(other);
        public bool Equals(ServiceObjectiveName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage account type used to store backups for this instance. The options are LRS (LocallyRedundantStorage), ZRS (ZoneRedundantStorage) and GRS (GeoRedundantStorage)
    /// </summary>
    [EnumType]
    public readonly struct StorageAccountType : IEquatable<StorageAccountType>
    {
        private readonly string _value;

        private StorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAccountType GRS { get; } = new StorageAccountType("GRS");
        public static StorageAccountType LRS { get; } = new StorageAccountType("LRS");
        public static StorageAccountType ZRS { get; } = new StorageAccountType("ZRS");

        public static bool operator ==(StorageAccountType left, StorageAccountType right) => left.Equals(right);
        public static bool operator !=(StorageAccountType left, StorageAccountType right) => !left.Equals(right);

        public static explicit operator string(StorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAccountType other && Equals(other);
        public bool Equals(StorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Conflict resolution policy of the sync group.
    /// </summary>
    [EnumType]
    public readonly struct SyncConflictResolutionPolicy : IEquatable<SyncConflictResolutionPolicy>
    {
        private readonly string _value;

        private SyncConflictResolutionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SyncConflictResolutionPolicy HubWin { get; } = new SyncConflictResolutionPolicy("HubWin");
        public static SyncConflictResolutionPolicy MemberWin { get; } = new SyncConflictResolutionPolicy("MemberWin");

        public static bool operator ==(SyncConflictResolutionPolicy left, SyncConflictResolutionPolicy right) => left.Equals(right);
        public static bool operator !=(SyncConflictResolutionPolicy left, SyncConflictResolutionPolicy right) => !left.Equals(right);

        public static explicit operator string(SyncConflictResolutionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SyncConflictResolutionPolicy other && Equals(other);
        public bool Equals(SyncConflictResolutionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sync direction of the sync member.
    /// </summary>
    [EnumType]
    public readonly struct SyncDirection : IEquatable<SyncDirection>
    {
        private readonly string _value;

        private SyncDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SyncDirection Bidirectional { get; } = new SyncDirection("Bidirectional");
        public static SyncDirection OneWayMemberToHub { get; } = new SyncDirection("OneWayMemberToHub");
        public static SyncDirection OneWayHubToMember { get; } = new SyncDirection("OneWayHubToMember");

        public static bool operator ==(SyncDirection left, SyncDirection right) => left.Equals(right);
        public static bool operator !=(SyncDirection left, SyncDirection right) => !left.Equals(right);

        public static explicit operator string(SyncDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SyncDirection other && Equals(other);
        public bool Equals(SyncDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Database type of the sync member.
    /// </summary>
    [EnumType]
    public readonly struct SyncMemberDbType : IEquatable<SyncMemberDbType>
    {
        private readonly string _value;

        private SyncMemberDbType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SyncMemberDbType AzureSqlDatabase { get; } = new SyncMemberDbType("AzureSqlDatabase");
        public static SyncMemberDbType SqlServerDatabase { get; } = new SyncMemberDbType("SqlServerDatabase");

        public static bool operator ==(SyncMemberDbType left, SyncMemberDbType right) => left.Equals(right);
        public static bool operator !=(SyncMemberDbType left, SyncMemberDbType right) => !left.Equals(right);

        public static explicit operator string(SyncMemberDbType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SyncMemberDbType other && Equals(other);
        public bool Equals(SyncMemberDbType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the database transparent data encryption.
    /// </summary>
    [EnumType]
    public readonly struct TransparentDataEncryptionStatus : IEquatable<TransparentDataEncryptionStatus>
    {
        private readonly string _value;

        private TransparentDataEncryptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransparentDataEncryptionStatus Enabled { get; } = new TransparentDataEncryptionStatus("Enabled");
        public static TransparentDataEncryptionStatus Disabled { get; } = new TransparentDataEncryptionStatus("Disabled");

        public static bool operator ==(TransparentDataEncryptionStatus left, TransparentDataEncryptionStatus right) => left.Equals(right);
        public static bool operator !=(TransparentDataEncryptionStatus left, TransparentDataEncryptionStatus right) => !left.Equals(right);

        public static explicit operator string(TransparentDataEncryptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransparentDataEncryptionStatus other && Equals(other);
        public bool Equals(TransparentDataEncryptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
