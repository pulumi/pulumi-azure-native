// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20201101Preview
{
    public static class GetServer
    {
        /// <summary>
        /// An Azure SQL Database server.
        /// </summary>
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("azure-native:sql/v20201101preview:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        /// <summary>
        /// An Azure SQL Database server.
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetServerResult>("azure-native:sql/v20201101preview:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The child resources to include in the response.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetServerArgs()
        {
        }
    }

    public sealed class GetServerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The child resources to include in the response.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetServerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServerResult
    {
        /// <summary>
        /// Administrator username for the server. Once created it cannot be changed.
        /// </summary>
        public readonly string? AdministratorLogin;
        /// <summary>
        /// The Azure Active Directory identity of the server.
        /// </summary>
        public readonly Outputs.ServerExternalAdministratorResponse? Administrators;
        /// <summary>
        /// The fully qualified domain name of the server.
        /// </summary>
        public readonly string FullyQualifiedDomainName;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Active Directory identity of the server.
        /// </summary>
        public readonly Outputs.ResourceIdentityResponse? Identity;
        /// <summary>
        /// A CMK URI of the key to use for encryption.
        /// </summary>
        public readonly string? KeyId;
        /// <summary>
        /// Kind of sql server. This is metadata used for the Azure portal experience.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
        /// </summary>
        public readonly string? MinimalTlsVersion;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource id of a user assigned identity to be used by default.
        /// </summary>
        public readonly string? PrimaryUserAssignedIdentityId;
        /// <summary>
        /// List of private endpoint connections on a server
        /// </summary>
        public readonly ImmutableArray<Outputs.ServerPrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The state of the server.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The version of the server.
        /// </summary>
        public readonly string? Version;
        /// <summary>
        /// Whether or not existing server has a workspace created and if it allows connection from workspace
        /// </summary>
        public readonly string WorkspaceFeature;

        [OutputConstructor]
        private GetServerResult(
            string? administratorLogin,

            Outputs.ServerExternalAdministratorResponse? administrators,

            string fullyQualifiedDomainName,

            string id,

            Outputs.ResourceIdentityResponse? identity,

            string? keyId,

            string kind,

            string location,

            string? minimalTlsVersion,

            string name,

            string? primaryUserAssignedIdentityId,

            ImmutableArray<Outputs.ServerPrivateEndpointConnectionResponse> privateEndpointConnections,

            string? publicNetworkAccess,

            string state,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? version,

            string workspaceFeature)
        {
            AdministratorLogin = administratorLogin;
            Administrators = administrators;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            Id = id;
            Identity = identity;
            KeyId = keyId;
            Kind = kind;
            Location = location;
            MinimalTlsVersion = minimalTlsVersion;
            Name = name;
            PrimaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            PrivateEndpointConnections = privateEndpointConnections;
            PublicNetworkAccess = publicNetworkAccess;
            State = state;
            Tags = tags;
            Type = type;
            Version = version;
            WorkspaceFeature = workspaceFeature;
        }
    }
}
