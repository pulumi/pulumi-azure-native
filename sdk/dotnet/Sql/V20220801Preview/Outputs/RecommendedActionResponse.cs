// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20220801Preview.Outputs
{

    /// <summary>
    /// Database, Server or Elastic Pool Recommended Action.
    /// </summary>
    [OutputType]
    public sealed class RecommendedActionResponse
    {
        /// <summary>
        /// Gets additional details specific to this recommended action.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Details;
        /// <summary>
        /// Gets the error details if and why this recommended action is put to error state.
        /// </summary>
        public readonly Outputs.RecommendedActionErrorInfoResponse ErrorDetails;
        /// <summary>
        /// Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change
        /// </summary>
        public readonly ImmutableArray<Outputs.RecommendedActionImpactRecordResponse> EstimatedImpact;
        /// <summary>
        /// Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation
        /// </summary>
        public readonly string ExecuteActionDuration;
        /// <summary>
        /// Gets if approval for applying this recommended action was given by user/system.
        /// </summary>
        public readonly string ExecuteActionInitiatedBy;
        /// <summary>
        /// Gets the time when this recommended action was approved for execution.
        /// </summary>
        public readonly string ExecuteActionInitiatedTime;
        /// <summary>
        /// Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time
        /// </summary>
        public readonly string ExecuteActionStartTime;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Gets the implementation details of this recommended action for user to apply it manually.
        /// </summary>
        public readonly Outputs.RecommendedActionImplementationInfoResponse ImplementationDetails;
        /// <summary>
        /// Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.
        /// </summary>
        public readonly bool IsArchivedAction;
        /// <summary>
        /// Gets if this recommended action is actionable by user
        /// </summary>
        public readonly bool IsExecutableAction;
        /// <summary>
        /// Gets if changes applied by this recommended action can be reverted by user
        /// </summary>
        public readonly bool IsRevertableAction;
        /// <summary>
        /// Resource kind.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Gets time when this recommended action was last refreshed.
        /// </summary>
        public readonly string LastRefresh;
        /// <summary>
        /// Gets the linked objects, if any.
        /// </summary>
        public readonly ImmutableArray<string> LinkedObjects;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change
        /// </summary>
        public readonly ImmutableArray<Outputs.RecommendedActionImpactRecordResponse> ObservedImpact;
        /// <summary>
        /// Gets the reason for recommending this action. e.g., DuplicateIndex
        /// </summary>
        public readonly string RecommendationReason;
        /// <summary>
        /// Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.
        /// </summary>
        public readonly string RevertActionDuration;
        /// <summary>
        /// Gets if approval for reverting this recommended action was given by user/system.
        /// </summary>
        public readonly string RevertActionInitiatedBy;
        /// <summary>
        /// Gets the time when this recommended action was approved for revert.
        /// </summary>
        public readonly string RevertActionInitiatedTime;
        /// <summary>
        /// Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.
        /// </summary>
        public readonly string RevertActionStartTime;
        /// <summary>
        /// Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact
        /// </summary>
        public readonly int Score;
        /// <summary>
        /// Gets the info of the current state the recommended action is in.
        /// </summary>
        public readonly Outputs.RecommendedActionStateInfoResponse State;
        /// <summary>
        /// Gets the time series info of metrics for this recommended action e.g., CPU consumption time series
        /// </summary>
        public readonly ImmutableArray<Outputs.RecommendedActionMetricInfoResponse> TimeSeries;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Gets the time since when this recommended action is valid.
        /// </summary>
        public readonly string ValidSince;

        [OutputConstructor]
        private RecommendedActionResponse(
            ImmutableDictionary<string, object> details,

            Outputs.RecommendedActionErrorInfoResponse errorDetails,

            ImmutableArray<Outputs.RecommendedActionImpactRecordResponse> estimatedImpact,

            string executeActionDuration,

            string executeActionInitiatedBy,

            string executeActionInitiatedTime,

            string executeActionStartTime,

            string id,

            Outputs.RecommendedActionImplementationInfoResponse implementationDetails,

            bool isArchivedAction,

            bool isExecutableAction,

            bool isRevertableAction,

            string kind,

            string lastRefresh,

            ImmutableArray<string> linkedObjects,

            string location,

            string name,

            ImmutableArray<Outputs.RecommendedActionImpactRecordResponse> observedImpact,

            string recommendationReason,

            string revertActionDuration,

            string revertActionInitiatedBy,

            string revertActionInitiatedTime,

            string revertActionStartTime,

            int score,

            Outputs.RecommendedActionStateInfoResponse state,

            ImmutableArray<Outputs.RecommendedActionMetricInfoResponse> timeSeries,

            string type,

            string validSince)
        {
            Details = details;
            ErrorDetails = errorDetails;
            EstimatedImpact = estimatedImpact;
            ExecuteActionDuration = executeActionDuration;
            ExecuteActionInitiatedBy = executeActionInitiatedBy;
            ExecuteActionInitiatedTime = executeActionInitiatedTime;
            ExecuteActionStartTime = executeActionStartTime;
            Id = id;
            ImplementationDetails = implementationDetails;
            IsArchivedAction = isArchivedAction;
            IsExecutableAction = isExecutableAction;
            IsRevertableAction = isRevertableAction;
            Kind = kind;
            LastRefresh = lastRefresh;
            LinkedObjects = linkedObjects;
            Location = location;
            Name = name;
            ObservedImpact = observedImpact;
            RecommendationReason = recommendationReason;
            RevertActionDuration = revertActionDuration;
            RevertActionInitiatedBy = revertActionInitiatedBy;
            RevertActionInitiatedTime = revertActionInitiatedTime;
            RevertActionStartTime = revertActionStartTime;
            Score = score;
            State = state;
            TimeSeries = timeSeries;
            Type = type;
            ValidSince = validSince;
        }
    }
}
