// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Sql.Latest
{
    public static class GetElasticPool
    {
        public static Task<GetElasticPoolResult> InvokeAsync(GetElasticPoolArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetElasticPoolResult>("azure-nextgen:sql/latest:getElasticPool", args ?? new GetElasticPoolArgs(), options.WithVersion());
    }


    public sealed class GetElasticPoolArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the elastic pool to be retrieved.
        /// </summary>
        [Input("elasticPoolName", required: true)]
        public string ElasticPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetElasticPoolArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetElasticPoolResult
    {
        /// <summary>
        /// The creation date of the elastic pool (ISO8601 format).
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// The maximum DTU any one database can consume.
        /// </summary>
        public readonly int? DatabaseDtuMax;
        /// <summary>
        /// The minimum DTU all databases are guaranteed.
        /// </summary>
        public readonly int? DatabaseDtuMin;
        /// <summary>
        /// The total shared DTU for the database elastic pool.
        /// </summary>
        public readonly int? Dtu;
        /// <summary>
        /// The edition of the elastic pool.
        /// </summary>
        public readonly string? Edition;
        /// <summary>
        /// Kind of elastic pool.  This is metadata used for the Azure portal experience.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The state of the elastic pool.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Gets storage limit for the database elastic pool in MB.
        /// </summary>
        public readonly int? StorageMB;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
        /// </summary>
        public readonly bool? ZoneRedundant;

        [OutputConstructor]
        private GetElasticPoolResult(
            string creationDate,

            int? databaseDtuMax,

            int? databaseDtuMin,

            int? dtu,

            string? edition,

            string kind,

            string location,

            string name,

            string state,

            int? storageMB,

            ImmutableDictionary<string, string>? tags,

            string type,

            bool? zoneRedundant)
        {
            CreationDate = creationDate;
            DatabaseDtuMax = databaseDtuMax;
            DatabaseDtuMin = databaseDtuMin;
            Dtu = dtu;
            Edition = edition;
            Kind = kind;
            Location = location;
            Name = name;
            State = state;
            StorageMB = storageMB;
            Tags = tags;
            Type = type;
            ZoneRedundant = zoneRedundant;
        }
    }
}
