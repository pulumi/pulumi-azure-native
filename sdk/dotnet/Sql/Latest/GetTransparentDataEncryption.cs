// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Sql.Latest
{
    [Obsolete(@"The 'latest' version is deprecated. Please migrate to the function in the top-level module: 'azure-nextgen:sql:getTransparentDataEncryption'.")]
    public static class GetTransparentDataEncryption
    {
        /// <summary>
        /// Represents a database transparent data encryption configuration.
        /// Latest API Version: 2014-04-01.
        /// </summary>
        public static Task<GetTransparentDataEncryptionResult> InvokeAsync(GetTransparentDataEncryptionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTransparentDataEncryptionResult>("azure-nextgen:sql/latest:getTransparentDataEncryption", args ?? new GetTransparentDataEncryptionArgs(), options.WithVersion());
    }


    public sealed class GetTransparentDataEncryptionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database for which the transparent data encryption applies.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        /// <summary>
        /// The name of the transparent data encryption configuration.
        /// </summary>
        [Input("transparentDataEncryptionName", required: true)]
        public string TransparentDataEncryptionName { get; set; } = null!;

        public GetTransparentDataEncryptionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTransparentDataEncryptionResult
    {
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the database transparent data encryption.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTransparentDataEncryptionResult(
            string id,

            string location,

            string name,

            string? status,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            Status = status;
            Type = type;
        }
    }
}
