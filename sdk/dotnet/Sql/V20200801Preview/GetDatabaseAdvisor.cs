// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20200801Preview
{
    public static class GetDatabaseAdvisor
    {
        /// <summary>
        /// Database, Server or Elastic Pool Advisor.
        /// </summary>
        public static Task<GetDatabaseAdvisorResult> InvokeAsync(GetDatabaseAdvisorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseAdvisorResult>("azure-native:sql/v20200801preview:getDatabaseAdvisor", args ?? new GetDatabaseAdvisorArgs(), options.WithDefaults());

        /// <summary>
        /// Database, Server or Elastic Pool Advisor.
        /// </summary>
        public static Output<GetDatabaseAdvisorResult> Invoke(GetDatabaseAdvisorInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatabaseAdvisorResult>("azure-native:sql/v20200801preview:getDatabaseAdvisor", args ?? new GetDatabaseAdvisorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseAdvisorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Database Advisor.
        /// </summary>
        [Input("advisorName", required: true)]
        public string AdvisorName { get; set; } = null!;

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetDatabaseAdvisorArgs()
        {
        }
        public static new GetDatabaseAdvisorArgs Empty => new GetDatabaseAdvisorArgs();
    }

    public sealed class GetDatabaseAdvisorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Database Advisor.
        /// </summary>
        [Input("advisorName", required: true)]
        public Input<string> AdvisorName { get; set; } = null!;

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetDatabaseAdvisorInvokeArgs()
        {
        }
        public static new GetDatabaseAdvisorInvokeArgs Empty => new GetDatabaseAdvisorInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseAdvisorResult
    {
        /// <summary>
        /// Gets the status of availability of this advisor to customers. Possible values are 'GA', 'PublicPreview', 'LimitedPublicPreview' and 'PrivatePreview'.
        /// </summary>
        public readonly string AdvisorStatus;
        /// <summary>
        /// Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'
        /// </summary>
        public readonly string AutoExecuteStatus;
        /// <summary>
        /// Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are 'Subscription', 'Server', 'ElasticPool', 'Database' and 'Default' (when status is not explicitly set on any level).
        /// </summary>
        public readonly string AutoExecuteStatusInheritedFrom;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource kind.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Gets the time when the current resource was analyzed for recommendations by this advisor.
        /// </summary>
        public readonly string LastChecked;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets that status of recommendations for this advisor and reason for not having any recommendations. Possible values include, but are not limited to, 'Ok' (Recommendations available),LowActivity (not enough workload to analyze), 'DbSeemsTuned' (Database is doing well), etc.
        /// </summary>
        public readonly string RecommendationsStatus;
        /// <summary>
        /// Gets the recommended actions for this advisor.
        /// </summary>
        public readonly ImmutableArray<Outputs.RecommendedActionResponse> RecommendedActions;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDatabaseAdvisorResult(
            string advisorStatus,

            string autoExecuteStatus,

            string autoExecuteStatusInheritedFrom,

            string id,

            string kind,

            string lastChecked,

            string location,

            string name,

            string recommendationsStatus,

            ImmutableArray<Outputs.RecommendedActionResponse> recommendedActions,

            string type)
        {
            AdvisorStatus = advisorStatus;
            AutoExecuteStatus = autoExecuteStatus;
            AutoExecuteStatusInheritedFrom = autoExecuteStatusInheritedFrom;
            Id = id;
            Kind = kind;
            LastChecked = lastChecked;
            Location = location;
            Name = name;
            RecommendationsStatus = recommendationsStatus;
            RecommendedActions = recommendedActions;
            Type = type;
        }
    }
}
