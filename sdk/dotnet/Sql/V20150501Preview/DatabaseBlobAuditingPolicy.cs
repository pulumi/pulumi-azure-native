// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20150501Preview
{
    /// <summary>
    /// A database blob auditing policy.
    /// </summary>
    [AzureNativeResourceType("azure-native:sql/v20150501preview:DatabaseBlobAuditingPolicy")]
    public partial class DatabaseBlobAuditingPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the Actions and Actions-Groups to audit.
        /// </summary>
        [Output("auditActionsAndGroups")]
        public Output<ImmutableArray<string>> AuditActionsAndGroups { get; private set; } = null!;

        /// <summary>
        /// Specifies whether storageAccountAccessKey value is the storage’s secondary key.
        /// </summary>
        [Output("isStorageSecondaryKeyInUse")]
        public Output<bool?> IsStorageSecondaryKeyInUse { get; private set; } = null!;

        /// <summary>
        /// Resource kind.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep in the audit logs.
        /// </summary>
        [Output("retentionDays")]
        public Output<int?> RetentionDays { get; private set; } = null!;

        /// <summary>
        /// Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Specifies the blob storage subscription Id.
        /// </summary>
        [Output("storageAccountSubscriptionId")]
        public Output<string?> StorageAccountSubscriptionId { get; private set; } = null!;

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
        /// </summary>
        [Output("storageEndpoint")]
        public Output<string?> StorageEndpoint { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseBlobAuditingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseBlobAuditingPolicy(string name, DatabaseBlobAuditingPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure-native:sql/v20150501preview:DatabaseBlobAuditingPolicy", name, args ?? new DatabaseBlobAuditingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseBlobAuditingPolicy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:sql/v20150501preview:DatabaseBlobAuditingPolicy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:sql:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20170301preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20200202preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20200801preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20201101preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20210201preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20210501preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20210801preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20211101:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20211101preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20220201preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20220501preview:DatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20220801preview:DatabaseBlobAuditingPolicy"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseBlobAuditingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseBlobAuditingPolicy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DatabaseBlobAuditingPolicy(name, id, options);
        }
    }

    public sealed class DatabaseBlobAuditingPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("auditActionsAndGroups")]
        private InputList<string>? _auditActionsAndGroups;

        /// <summary>
        /// Specifies the Actions and Actions-Groups to audit.
        /// </summary>
        public InputList<string> AuditActionsAndGroups
        {
            get => _auditActionsAndGroups ?? (_auditActionsAndGroups = new InputList<string>());
            set => _auditActionsAndGroups = value;
        }

        /// <summary>
        /// The name of the blob auditing policy.
        /// </summary>
        [Input("blobAuditingPolicyName")]
        public Input<string>? BlobAuditingPolicyName { get; set; }

        /// <summary>
        /// The name of the database for which the blob auditing policy will be defined.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// Specifies whether storageAccountAccessKey value is the storage’s secondary key.
        /// </summary>
        [Input("isStorageSecondaryKeyInUse")]
        public Input<bool>? IsStorageSecondaryKeyInUse { get; set; }

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep in the audit logs.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        /// <summary>
        /// Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
        /// </summary>
        [Input("state", required: true)]
        public Input<Pulumi.AzureNative.Sql.V20150501Preview.BlobAuditingPolicyState> State { get; set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the auditing storage account. If state is Enabled, storageAccountAccessKey is required.
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// Specifies the blob storage subscription Id.
        /// </summary>
        [Input("storageAccountSubscriptionId")]
        public Input<string>? StorageAccountSubscriptionId { get; set; }

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public DatabaseBlobAuditingPolicyArgs()
        {
        }
        public static new DatabaseBlobAuditingPolicyArgs Empty => new DatabaseBlobAuditingPolicyArgs();
    }
}
