// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20150501Preview
{
    public static class GetDatabaseBlobAuditingPolicy
    {
        /// <summary>
        /// A database blob auditing policy.
        /// </summary>
        public static Task<GetDatabaseBlobAuditingPolicyResult> InvokeAsync(GetDatabaseBlobAuditingPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseBlobAuditingPolicyResult>("azure-native:sql/v20150501preview:getDatabaseBlobAuditingPolicy", args ?? new GetDatabaseBlobAuditingPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// A database blob auditing policy.
        /// </summary>
        public static Output<GetDatabaseBlobAuditingPolicyResult> Invoke(GetDatabaseBlobAuditingPolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatabaseBlobAuditingPolicyResult>("azure-native:sql/v20150501preview:getDatabaseBlobAuditingPolicy", args ?? new GetDatabaseBlobAuditingPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseBlobAuditingPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the blob auditing policy.
        /// </summary>
        [Input("blobAuditingPolicyName", required: true)]
        public string BlobAuditingPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the database for which the blob audit policy is defined.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetDatabaseBlobAuditingPolicyArgs()
        {
        }
        public static new GetDatabaseBlobAuditingPolicyArgs Empty => new GetDatabaseBlobAuditingPolicyArgs();
    }

    public sealed class GetDatabaseBlobAuditingPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the blob auditing policy.
        /// </summary>
        [Input("blobAuditingPolicyName", required: true)]
        public Input<string> BlobAuditingPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the database for which the blob audit policy is defined.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetDatabaseBlobAuditingPolicyInvokeArgs()
        {
        }
        public static new GetDatabaseBlobAuditingPolicyInvokeArgs Empty => new GetDatabaseBlobAuditingPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseBlobAuditingPolicyResult
    {
        /// <summary>
        /// Specifies the Actions and Actions-Groups to audit.
        /// </summary>
        public readonly ImmutableArray<string> AuditActionsAndGroups;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether storageAccountAccessKey value is the storageâ€™s secondary key.
        /// </summary>
        public readonly bool? IsStorageSecondaryKeyInUse;
        /// <summary>
        /// Resource kind.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the number of days to keep in the audit logs.
        /// </summary>
        public readonly int? RetentionDays;
        /// <summary>
        /// Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Specifies the blob storage subscription Id.
        /// </summary>
        public readonly string? StorageAccountSubscriptionId;
        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
        /// </summary>
        public readonly string? StorageEndpoint;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDatabaseBlobAuditingPolicyResult(
            ImmutableArray<string> auditActionsAndGroups,

            string id,

            bool? isStorageSecondaryKeyInUse,

            string kind,

            string name,

            int? retentionDays,

            string state,

            string? storageAccountSubscriptionId,

            string? storageEndpoint,

            string type)
        {
            AuditActionsAndGroups = auditActionsAndGroups;
            Id = id;
            IsStorageSecondaryKeyInUse = isStorageSecondaryKeyInUse;
            Kind = kind;
            Name = name;
            RetentionDays = retentionDays;
            State = state;
            StorageAccountSubscriptionId = storageAccountSubscriptionId;
            StorageEndpoint = storageEndpoint;
            Type = type;
        }
    }
}
