// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Sql.V20150501Preview
{
    public static class GetSyncGroup
    {
        public static Task<GetSyncGroupResult> InvokeAsync(GetSyncGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSyncGroupResult>("azure-nextgen:sql/v20150501preview:getSyncGroup", args ?? new GetSyncGroupArgs(), options.WithVersion());
    }


    public sealed class GetSyncGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database on which the sync group is hosted.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        /// <summary>
        /// The name of the sync group.
        /// </summary>
        [Input("syncGroupName", required: true)]
        public string SyncGroupName { get; set; } = null!;

        public GetSyncGroupArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSyncGroupResult
    {
        /// <summary>
        /// Conflict resolution policy of the sync group.
        /// </summary>
        public readonly string? ConflictResolutionPolicy;
        /// <summary>
        /// Password for the sync group hub database credential.
        /// </summary>
        public readonly string? HubDatabasePassword;
        /// <summary>
        /// User name for the sync group hub database credential.
        /// </summary>
        public readonly string? HubDatabaseUserName;
        /// <summary>
        /// Sync interval of the sync group.
        /// </summary>
        public readonly int? Interval;
        /// <summary>
        /// Last sync time of the sync group.
        /// </summary>
        public readonly string LastSyncTime;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Sync schema of the sync group.
        /// </summary>
        public readonly Outputs.SyncGroupSchemaResponse? Schema;
        /// <summary>
        /// ARM resource id of the sync database in the sync group.
        /// </summary>
        public readonly string? SyncDatabaseId;
        /// <summary>
        /// Sync state of the sync group.
        /// </summary>
        public readonly string SyncState;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSyncGroupResult(
            string? conflictResolutionPolicy,

            string? hubDatabasePassword,

            string? hubDatabaseUserName,

            int? interval,

            string lastSyncTime,

            string name,

            Outputs.SyncGroupSchemaResponse? schema,

            string? syncDatabaseId,

            string syncState,

            string type)
        {
            ConflictResolutionPolicy = conflictResolutionPolicy;
            HubDatabasePassword = hubDatabasePassword;
            HubDatabaseUserName = hubDatabaseUserName;
            Interval = interval;
            LastSyncTime = lastSyncTime;
            Name = name;
            Schema = schema;
            SyncDatabaseId = syncDatabaseId;
            SyncState = syncState;
            Type = type;
        }
    }
}
