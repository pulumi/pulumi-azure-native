// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Sql.Inputs
{

    /// <summary>
    /// Represents the properties of a database.
    /// </summary>
    public sealed class DatabasePropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The collation of the database. If createMode is not Default, this value is ignored.
        /// </summary>
        [Input("collation")]
        public Input<string>? Collation { get; set; }

        /// <summary>
        /// The containment state of the database.
        /// </summary>
        [Input("containmentState", required: true)]
        public Input<int> ContainmentState { get; set; } = null!;

        /// <summary>
        /// Specifies the mode of database creation.
        /// 
        /// Default: regular database creation.
        /// 
        /// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
        /// 
        /// OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
        /// 
        /// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
        /// 
        /// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
        /// 
        /// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
        /// 
        /// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
        /// 
        /// Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
        /// </summary>
        [Input("createMode")]
        public Input<string>? CreateMode { get; set; }

        /// <summary>
        /// The creation date of the database (ISO8601 format).
        /// </summary>
        [Input("creationDate", required: true)]
        public Input<string> CreationDate { get; set; } = null!;

        /// <summary>
        /// The current service level objective ID of the database. This is the ID of the service level objective that is currently active.
        /// </summary>
        [Input("currentServiceObjectiveId", required: true)]
        public Input<string> CurrentServiceObjectiveId { get; set; } = null!;

        /// <summary>
        /// The ID of the database.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// The default secondary region for this database.
        /// </summary>
        [Input("defaultSecondaryLocation", required: true)]
        public Input<string> DefaultSecondaryLocation { get; set; } = null!;

        /// <summary>
        /// This records the earliest start date and time that restore is available for this database (ISO8601 format).
        /// </summary>
        [Input("earliestRestoreDate", required: true)]
        public Input<string> EarliestRestoreDate { get; set; } = null!;

        /// <summary>
        /// The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
        /// 
        /// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
        /// 
        /// ```azurecli
        /// az sql db list-editions -l &lt;location&gt; -o table
        /// ````
        /// 
        /// ```powershell
        /// Get-AzSqlServerServiceObjective -Location &lt;location&gt;
        /// ````
        /// </summary>
        [Input("edition")]
        public Input<string>? Edition { get; set; }

        /// <summary>
        /// The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition.
        /// </summary>
        [Input("elasticPoolName")]
        public Input<string>? ElasticPoolName { get; set; }

        /// <summary>
        /// The resource identifier of the failover group containing this database.
        /// </summary>
        [Input("failoverGroupId", required: true)]
        public Input<string> FailoverGroupId { get; set; } = null!;

        /// <summary>
        /// The max size of the database expressed in bytes. If createMode is not Default, this value is ignored. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: "Capabilities_ListByLocation."
        /// </summary>
        [Input("maxSizeBytes")]
        public Input<string>? MaxSizeBytes { get; set; }

        /// <summary>
        /// Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition.
        /// </summary>
        [Input("readScale")]
        public Input<string>? ReadScale { get; set; }

        [Input("recommendedIndex", required: true)]
        private InputList<Inputs.RecommendedIndexResponseGetArgs>? _recommendedIndex;

        /// <summary>
        /// The recommended indices for this database.
        /// </summary>
        public InputList<Inputs.RecommendedIndexResponseGetArgs> RecommendedIndex
        {
            get => _recommendedIndex ?? (_recommendedIndex = new InputList<Inputs.RecommendedIndexResponseGetArgs>());
            set => _recommendedIndex = value;
        }

        /// <summary>
        /// Conditional. If createMode is RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery point to restore from.
        /// </summary>
        [Input("recoveryServicesRecoveryPointResourceId")]
        public Input<string>? RecoveryServicesRecoveryPointResourceId { get; set; }

        /// <summary>
        /// The configured service level objective ID of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.
        /// 
        /// The list of SKUs may vary by region and support offer. To determine the service objective ids that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API.
        /// </summary>
        [Input("requestedServiceObjectiveId")]
        public Input<string>? RequestedServiceObjectiveId { get; set; }

        /// <summary>
        /// The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property. 
        /// 
        /// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
        /// 
        /// ```azurecli
        /// az sql db list-editions -l &lt;location&gt; -o table
        /// ````
        /// 
        /// ```powershell
        /// Get-AzSqlServerServiceObjective -Location &lt;location&gt;
        /// ````
        /// </summary>
        [Input("requestedServiceObjectiveName")]
        public Input<string>? RequestedServiceObjectiveName { get; set; }

        /// <summary>
        /// Conditional. If createMode is PointInTimeRestore, this value is required. If createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value.
        /// </summary>
        [Input("restorePointInTime")]
        public Input<string>? RestorePointInTime { get; set; }

        /// <summary>
        /// Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.
        /// </summary>
        [Input("sampleName")]
        public Input<string>? SampleName { get; set; }

        /// <summary>
        /// The current service level objective of the database.
        /// </summary>
        [Input("serviceLevelObjective", required: true)]
        public Input<string> ServiceLevelObjective { get; set; } = null!;

        [Input("serviceTierAdvisors", required: true)]
        private InputList<Inputs.ServiceTierAdvisorResponseGetArgs>? _serviceTierAdvisors;

        /// <summary>
        /// The list of service tier advisors for this database. Expanded property
        /// </summary>
        public InputList<Inputs.ServiceTierAdvisorResponseGetArgs> ServiceTierAdvisors
        {
            get => _serviceTierAdvisors ?? (_serviceTierAdvisors = new InputList<Inputs.ServiceTierAdvisorResponseGetArgs>());
            set => _serviceTierAdvisors = value;
        }

        /// <summary>
        /// Conditional. If createMode is Restore and sourceDatabaseId is the deleted database's original resource id when it existed (as opposed to its current restorable dropped database id), then this value is required. Specifies the time that the database was deleted.
        /// </summary>
        [Input("sourceDatabaseDeletionDate")]
        public Input<string>? SourceDatabaseDeletionDate { get; set; }

        /// <summary>
        /// Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source database must be the same as the new database being created.
        /// </summary>
        [Input("sourceDatabaseId")]
        public Input<string>? SourceDatabaseId { get; set; }

        /// <summary>
        /// The status of the database.
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        [Input("transparentDataEncryption", required: true)]
        private InputList<Inputs.TransparentDataEncryptionResponseGetArgs>? _transparentDataEncryption;

        /// <summary>
        /// The transparent data encryption info for this database.
        /// </summary>
        public InputList<Inputs.TransparentDataEncryptionResponseGetArgs> TransparentDataEncryption
        {
            get => _transparentDataEncryption ?? (_transparentDataEncryption = new InputList<Inputs.TransparentDataEncryptionResponseGetArgs>());
            set => _transparentDataEncryption = value;
        }

        /// <summary>
        /// Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public DatabasePropertiesResponseGetArgs()
        {
        }
    }
}
