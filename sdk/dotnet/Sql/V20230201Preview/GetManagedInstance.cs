// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20230201Preview
{
    public static class GetManagedInstance
    {
        /// <summary>
        /// Gets a managed instance.
        /// </summary>
        public static Task<GetManagedInstanceResult> InvokeAsync(GetManagedInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedInstanceResult>("azure-native:sql/v20230201preview:getManagedInstance", args ?? new GetManagedInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a managed instance.
        /// </summary>
        public static Output<GetManagedInstanceResult> Invoke(GetManagedInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedInstanceResult>("azure-native:sql/v20230201preview:getManagedInstance", args ?? new GetManagedInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The child resources to include in the response.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the managed instance.
        /// </summary>
        [Input("managedInstanceName", required: true)]
        public string ManagedInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetManagedInstanceArgs()
        {
        }
        public static new GetManagedInstanceArgs Empty => new GetManagedInstanceArgs();
    }

    public sealed class GetManagedInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The child resources to include in the response.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The name of the managed instance.
        /// </summary>
        [Input("managedInstanceName", required: true)]
        public Input<string> ManagedInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetManagedInstanceInvokeArgs()
        {
        }
        public static new GetManagedInstanceInvokeArgs Empty => new GetManagedInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedInstanceResult
    {
        /// <summary>
        /// Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).
        /// </summary>
        public readonly string? AdministratorLogin;
        /// <summary>
        /// The Azure Active Directory administrator of the instance. This can only be used at instance create time. If used for instance update, it will be ignored or it will result in an error. For updates individual APIs will need to be used.
        /// </summary>
        public readonly Outputs.ManagedInstanceExternalAdministratorResponse? Administrators;
        /// <summary>
        /// Collation of the managed instance.
        /// </summary>
        public readonly string? Collation;
        /// <summary>
        /// Specifies the point in time (ISO8601 format) of the Managed Instance creation.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The storage account type used to store backups for this instance. The options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage), Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
        /// </summary>
        public readonly string CurrentBackupStorageRedundancy;
        /// <summary>
        /// The Dns Zone that the managed instance is in.
        /// </summary>
        public readonly string DnsZone;
        /// <summary>
        /// Status of external governance.
        /// </summary>
        public readonly string ExternalGovernanceStatus;
        /// <summary>
        /// The fully qualified domain name of the managed instance.
        /// </summary>
        public readonly string FullyQualifiedDomainName;
        /// <summary>
        /// Hybrid secondary usage. Possible values are 'Active' (default value) and 'Passive' (customer uses the secondary as Passive DR).
        /// </summary>
        public readonly string? HybridSecondaryUsage;
        /// <summary>
        /// Hybrid secondary usage detected. Possible values are 'Active' (customer does not meet the requirements to use the secondary as Passive DR) and 'Passive' (customer meets the requirements to use the secondary as Passive DR).
        /// </summary>
        public readonly string HybridSecondaryUsageDetected;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Active Directory identity of the managed instance.
        /// </summary>
        public readonly Outputs.ResourceIdentityResponse? Identity;
        /// <summary>
        /// The Id of the instance pool this managed server belongs to.
        /// </summary>
        public readonly string? InstancePoolId;
        /// <summary>
        /// Whether or not this is a GPv2 variant of General Purpose edition.
        /// </summary>
        public readonly bool? IsGeneralPurposeV2;
        /// <summary>
        /// A CMK URI of the key to use for encryption.
        /// </summary>
        public readonly string? KeyId;
        /// <summary>
        /// The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
        /// </summary>
        public readonly string? LicenseType;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Specifies maintenance configuration id to apply to this managed instance.
        /// </summary>
        public readonly string? MaintenanceConfigurationId;
        /// <summary>
        /// Minimal TLS version. Allowed values: 'None', '1.0', '1.1', '1.2'
        /// </summary>
        public readonly string? MinimalTlsVersion;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Weather or not Managed Instance is freemium.
        /// </summary>
        public readonly string? PricingModel;
        /// <summary>
        /// The resource id of a user assigned identity to be used by default.
        /// </summary>
        public readonly string? PrimaryUserAssignedIdentityId;
        /// <summary>
        /// List of private endpoint connections on a managed instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagedInstancePecPropertyResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of managed instance.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Connection type used for connecting to the instance.
        /// </summary>
        public readonly string? ProxyOverride;
        /// <summary>
        /// Whether or not the public data endpoint is enabled.
        /// </summary>
        public readonly bool? PublicDataEndpointEnabled;
        /// <summary>
        /// The storage account type to be used to store backups for this instance. The options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage), Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
        /// </summary>
        public readonly string? RequestedBackupStorageRedundancy;
        /// <summary>
        /// The managed instance's service principal.
        /// </summary>
        public readonly Outputs.ServicePrincipalResponse? ServicePrincipal;
        /// <summary>
        /// Managed instance SKU. Allowed values for sku.name: GP_Gen5, GP_G8IM, GP_G8IH, BC_Gen5, BC_G8IM, BC_G8IH
        /// </summary>
        public readonly Outputs.SkuResponse? Sku;
        /// <summary>
        /// The state of the managed instance.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Storage IOps. Minimum value: 300. Maximum value: 80000. Increments of 1 IOps allowed only. Maximum value depends on the selected hardware family and number of vCores.
        /// </summary>
        public readonly int? StorageIOps;
        /// <summary>
        /// Storage size in GB. Minimum value: 32. Maximum value: 16384. Increments of 32 GB allowed only. Maximum value depends on the selected hardware family and number of vCores.
        /// </summary>
        public readonly int? StorageSizeInGB;
        /// <summary>
        /// Storage throughput MBps parameter is not supported in the instance create/update operation.
        /// </summary>
        public readonly int? StorageThroughputMBps;
        /// <summary>
        /// Subnet resource ID for the managed instance.
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Id of the timezone. Allowed values are timezones supported by Windows.
        /// Windows keeps details on supported timezones, including the id, in registry under
        /// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
        /// You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.
        /// List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// An example of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
        /// </summary>
        public readonly string? TimezoneId;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
        /// </summary>
        public readonly int? VCores;
        /// <summary>
        /// Virtual cluster resource id for the Managed Instance.
        /// </summary>
        public readonly string VirtualClusterId;
        /// <summary>
        /// Whether or not the multi-az is enabled.
        /// </summary>
        public readonly bool? ZoneRedundant;

        [OutputConstructor]
        private GetManagedInstanceResult(
            string? administratorLogin,

            Outputs.ManagedInstanceExternalAdministratorResponse? administrators,

            string? collation,

            string createTime,

            string currentBackupStorageRedundancy,

            string dnsZone,

            string externalGovernanceStatus,

            string fullyQualifiedDomainName,

            string? hybridSecondaryUsage,

            string hybridSecondaryUsageDetected,

            string id,

            Outputs.ResourceIdentityResponse? identity,

            string? instancePoolId,

            bool? isGeneralPurposeV2,

            string? keyId,

            string? licenseType,

            string location,

            string? maintenanceConfigurationId,

            string? minimalTlsVersion,

            string name,

            string? pricingModel,

            string? primaryUserAssignedIdentityId,

            ImmutableArray<Outputs.ManagedInstancePecPropertyResponse> privateEndpointConnections,

            string provisioningState,

            string? proxyOverride,

            bool? publicDataEndpointEnabled,

            string? requestedBackupStorageRedundancy,

            Outputs.ServicePrincipalResponse? servicePrincipal,

            Outputs.SkuResponse? sku,

            string state,

            int? storageIOps,

            int? storageSizeInGB,

            int? storageThroughputMBps,

            string? subnetId,

            ImmutableDictionary<string, string>? tags,

            string? timezoneId,

            string type,

            int? vCores,

            string virtualClusterId,

            bool? zoneRedundant)
        {
            AdministratorLogin = administratorLogin;
            Administrators = administrators;
            Collation = collation;
            CreateTime = createTime;
            CurrentBackupStorageRedundancy = currentBackupStorageRedundancy;
            DnsZone = dnsZone;
            ExternalGovernanceStatus = externalGovernanceStatus;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            HybridSecondaryUsage = hybridSecondaryUsage;
            HybridSecondaryUsageDetected = hybridSecondaryUsageDetected;
            Id = id;
            Identity = identity;
            InstancePoolId = instancePoolId;
            IsGeneralPurposeV2 = isGeneralPurposeV2;
            KeyId = keyId;
            LicenseType = licenseType;
            Location = location;
            MaintenanceConfigurationId = maintenanceConfigurationId;
            MinimalTlsVersion = minimalTlsVersion;
            Name = name;
            PricingModel = pricingModel;
            PrimaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            ProxyOverride = proxyOverride;
            PublicDataEndpointEnabled = publicDataEndpointEnabled;
            RequestedBackupStorageRedundancy = requestedBackupStorageRedundancy;
            ServicePrincipal = servicePrincipal;
            Sku = sku;
            State = state;
            StorageIOps = storageIOps;
            StorageSizeInGB = storageSizeInGB;
            StorageThroughputMBps = storageThroughputMBps;
            SubnetId = subnetId;
            Tags = tags;
            TimezoneId = timezoneId;
            Type = type;
            VCores = vCores;
            VirtualClusterId = virtualClusterId;
            ZoneRedundant = zoneRedundant;
        }
    }
}
