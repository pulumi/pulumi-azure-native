// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Sql.V20230201Preview
{
    /// <summary>
    /// Type of the sever administrator.
    /// </summary>
    [EnumType]
    public readonly struct AdministratorType : IEquatable<AdministratorType>
    {
        private readonly string _value;

        private AdministratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdministratorType ActiveDirectory { get; } = new AdministratorType("ActiveDirectory");

        public static bool operator ==(AdministratorType left, AdministratorType right) => left.Equals(right);
        public static bool operator !=(AdministratorType left, AdministratorType right) => !left.Equals(right);

        public static explicit operator string(AdministratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdministratorType other && Equals(other);
        public bool Equals(AdministratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType None { get; } = new IdentityType("None");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType SystemAssigned_UserAssigned { get; } = new IdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The source of the action to execute.
    /// </summary>
    [EnumType]
    public readonly struct JobStepActionSource : IEquatable<JobStepActionSource>
    {
        private readonly string _value;

        private JobStepActionSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepActionSource Inline { get; } = new JobStepActionSource("Inline");

        public static bool operator ==(JobStepActionSource left, JobStepActionSource right) => left.Equals(right);
        public static bool operator !=(JobStepActionSource left, JobStepActionSource right) => !left.Equals(right);

        public static explicit operator string(JobStepActionSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepActionSource other && Equals(other);
        public bool Equals(JobStepActionSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of action being executed by the job step.
    /// </summary>
    [EnumType]
    public readonly struct JobStepActionType : IEquatable<JobStepActionType>
    {
        private readonly string _value;

        private JobStepActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepActionType TSql { get; } = new JobStepActionType("TSql");

        public static bool operator ==(JobStepActionType left, JobStepActionType right) => left.Equals(right);
        public static bool operator !=(JobStepActionType left, JobStepActionType right) => !left.Equals(right);

        public static explicit operator string(JobStepActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepActionType other && Equals(other);
        public bool Equals(JobStepActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The output destination type.
    /// </summary>
    [EnumType]
    public readonly struct JobStepOutputType : IEquatable<JobStepOutputType>
    {
        private readonly string _value;

        private JobStepOutputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStepOutputType SqlDatabase { get; } = new JobStepOutputType("SqlDatabase");

        public static bool operator ==(JobStepOutputType left, JobStepOutputType right) => left.Equals(right);
        public static bool operator !=(JobStepOutputType left, JobStepOutputType right) => !left.Equals(right);

        public static explicit operator string(JobStepOutputType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStepOutputType other && Equals(other);
        public bool Equals(JobStepOutputType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Principal Type of the sever administrator.
    /// </summary>
    [EnumType]
    public readonly struct PrincipalType : IEquatable<PrincipalType>
    {
        private readonly string _value;

        private PrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalType User { get; } = new PrincipalType("User");
        public static PrincipalType Group { get; } = new PrincipalType("Group");
        public static PrincipalType Application { get; } = new PrincipalType("Application");

        public static bool operator ==(PrincipalType left, PrincipalType right) => left.Equals(right);
        public static bool operator !=(PrincipalType left, PrincipalType right) => !left.Equals(right);

        public static explicit operator string(PrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalType other && Equals(other);
        public bool Equals(PrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The replication mode of a distributed availability group. Parameter will be ignored during link creation.
    /// </summary>
    [EnumType]
    public readonly struct ReplicationModeType : IEquatable<ReplicationModeType>
    {
        private readonly string _value;

        private ReplicationModeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationModeType Async { get; } = new ReplicationModeType("Async");
        public static ReplicationModeType Sync { get; } = new ReplicationModeType("Sync");

        public static bool operator ==(ReplicationModeType left, ReplicationModeType right) => left.Equals(right);
        public static bool operator !=(ReplicationModeType left, ReplicationModeType right) => !left.Equals(right);

        public static explicit operator string(ReplicationModeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationModeType other && Equals(other);
        public bool Equals(ReplicationModeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not to restrict outbound network access for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct ServerNetworkAccessFlag : IEquatable<ServerNetworkAccessFlag>
    {
        private readonly string _value;

        private ServerNetworkAccessFlag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerNetworkAccessFlag Enabled { get; } = new ServerNetworkAccessFlag("Enabled");
        public static ServerNetworkAccessFlag Disabled { get; } = new ServerNetworkAccessFlag("Disabled");

        public static bool operator ==(ServerNetworkAccessFlag left, ServerNetworkAccessFlag right) => left.Equals(right);
        public static bool operator !=(ServerNetworkAccessFlag left, ServerNetworkAccessFlag right) => !left.Equals(right);

        public static explicit operator string(ServerNetworkAccessFlag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerNetworkAccessFlag other && Equals(other);
        public bool Equals(ServerNetworkAccessFlag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled' or 'SecuredByPerimeter'
    /// </summary>
    [EnumType]
    public readonly struct ServerPublicNetworkAccessFlag : IEquatable<ServerPublicNetworkAccessFlag>
    {
        private readonly string _value;

        private ServerPublicNetworkAccessFlag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerPublicNetworkAccessFlag Enabled { get; } = new ServerPublicNetworkAccessFlag("Enabled");
        public static ServerPublicNetworkAccessFlag Disabled { get; } = new ServerPublicNetworkAccessFlag("Disabled");
        public static ServerPublicNetworkAccessFlag SecuredByPerimeter { get; } = new ServerPublicNetworkAccessFlag("SecuredByPerimeter");

        public static bool operator ==(ServerPublicNetworkAccessFlag left, ServerPublicNetworkAccessFlag right) => left.Equals(right);
        public static bool operator !=(ServerPublicNetworkAccessFlag left, ServerPublicNetworkAccessFlag right) => !left.Equals(right);

        public static explicit operator string(ServerPublicNetworkAccessFlag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerPublicNetworkAccessFlag other && Equals(other);
        public bool Equals(ServerPublicNetworkAccessFlag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
