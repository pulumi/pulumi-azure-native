// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Sql.V20171001Preview
{
    public static class GetManagedDatabaseVulnerabilityAssessment
    {
        public static Task<GetManagedDatabaseVulnerabilityAssessmentResult> InvokeAsync(GetManagedDatabaseVulnerabilityAssessmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagedDatabaseVulnerabilityAssessmentResult>("azure-nextgen:sql/v20171001preview:getManagedDatabaseVulnerabilityAssessment", args ?? new GetManagedDatabaseVulnerabilityAssessmentArgs(), options.WithVersion());
    }


    public sealed class GetManagedDatabaseVulnerabilityAssessmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database for which the vulnerability assessment is defined.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the managed instance.
        /// </summary>
        [Input("managedInstanceName", required: true)]
        public string ManagedInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the vulnerability assessment.
        /// </summary>
        [Input("vulnerabilityAssessmentName", required: true)]
        public string VulnerabilityAssessmentName { get; set; } = null!;

        public GetManagedDatabaseVulnerabilityAssessmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetManagedDatabaseVulnerabilityAssessmentResult
    {
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The recurring scans settings
        /// </summary>
        public readonly Outputs.VulnerabilityAssessmentRecurringScansPropertiesResponse? RecurringScans;
        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
        /// </summary>
        public readonly string? StorageAccountAccessKey;
        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
        /// </summary>
        public readonly string? StorageContainerPath;
        /// <summary>
        /// A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
        /// </summary>
        public readonly string? StorageContainerSasKey;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetManagedDatabaseVulnerabilityAssessmentResult(
            string name,

            Outputs.VulnerabilityAssessmentRecurringScansPropertiesResponse? recurringScans,

            string? storageAccountAccessKey,

            string? storageContainerPath,

            string? storageContainerSasKey,

            string type)
        {
            Name = name;
            RecurringScans = recurringScans;
            StorageAccountAccessKey = storageAccountAccessKey;
            StorageContainerPath = storageContainerPath;
            StorageContainerSasKey = storageContainerSasKey;
            Type = type;
        }
    }
}
