// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20211101Preview
{
    public static class GetServerAdvisor
    {
        /// <summary>
        /// Gets a server advisor.
        /// </summary>
        public static Task<GetServerAdvisorResult> InvokeAsync(GetServerAdvisorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerAdvisorResult>("azure-native:sql/v20211101preview:getServerAdvisor", args ?? new GetServerAdvisorArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a server advisor.
        /// </summary>
        public static Output<GetServerAdvisorResult> Invoke(GetServerAdvisorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerAdvisorResult>("azure-native:sql/v20211101preview:getServerAdvisor", args ?? new GetServerAdvisorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerAdvisorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Server Advisor.
        /// </summary>
        [Input("advisorName", required: true)]
        public string AdvisorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetServerAdvisorArgs()
        {
        }
        public static new GetServerAdvisorArgs Empty => new GetServerAdvisorArgs();
    }

    public sealed class GetServerAdvisorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Server Advisor.
        /// </summary>
        [Input("advisorName", required: true)]
        public Input<string> AdvisorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetServerAdvisorInvokeArgs()
        {
        }
        public static new GetServerAdvisorInvokeArgs Empty => new GetServerAdvisorInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerAdvisorResult
    {
        /// <summary>
        /// Gets the status of availability of this advisor to customers. Possible values are 'GA', 'PublicPreview', 'LimitedPublicPreview' and 'PrivatePreview'.
        /// </summary>
        public readonly string AdvisorStatus;
        /// <summary>
        /// Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'
        /// </summary>
        public readonly string AutoExecuteStatus;
        /// <summary>
        /// Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are 'Subscription', 'Server', 'ElasticPool', 'Database' and 'Default' (when status is not explicitly set on any level).
        /// </summary>
        public readonly string AutoExecuteStatusInheritedFrom;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource kind.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Gets the time when the current resource was analyzed for recommendations by this advisor.
        /// </summary>
        public readonly string LastChecked;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets that status of recommendations for this advisor and reason for not having any recommendations. Possible values include, but are not limited to, 'Ok' (Recommendations available),LowActivity (not enough workload to analyze), 'DbSeemsTuned' (Database is doing well), etc.
        /// </summary>
        public readonly string RecommendationsStatus;
        /// <summary>
        /// Gets the recommended actions for this advisor.
        /// </summary>
        public readonly ImmutableArray<Outputs.RecommendedActionResponse> RecommendedActions;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetServerAdvisorResult(
            string advisorStatus,

            string autoExecuteStatus,

            string autoExecuteStatusInheritedFrom,

            string id,

            string kind,

            string lastChecked,

            string location,

            string name,

            string recommendationsStatus,

            ImmutableArray<Outputs.RecommendedActionResponse> recommendedActions,

            string type)
        {
            AdvisorStatus = advisorStatus;
            AutoExecuteStatus = autoExecuteStatus;
            AutoExecuteStatusInheritedFrom = autoExecuteStatusInheritedFrom;
            Id = id;
            Kind = kind;
            LastChecked = lastChecked;
            Location = location;
            Name = name;
            RecommendationsStatus = recommendationsStatus;
            RecommendedActions = recommendedActions;
            Type = type;
        }
    }
}
