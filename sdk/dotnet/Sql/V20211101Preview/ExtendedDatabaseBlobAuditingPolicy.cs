// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sql.V20211101Preview
{
    /// <summary>
    /// An extended database blob auditing policy.
    /// </summary>
    [AzureNativeResourceType("azure-native:sql/v20211101preview:ExtendedDatabaseBlobAuditingPolicy")]
    public partial class ExtendedDatabaseBlobAuditingPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the Actions-Groups and Actions to audit.
        /// 
        /// The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
        /// 
        /// BATCH_COMPLETED_GROUP,
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
        /// FAILED_DATABASE_AUTHENTICATION_GROUP.
        /// 
        /// This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
        /// 
        /// The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
        /// 
        /// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
        /// BACKUP_RESTORE_GROUP
        /// DATABASE_LOGOUT_GROUP
        /// DATABASE_OBJECT_CHANGE_GROUP
        /// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
        /// DATABASE_OPERATION_GROUP
        /// DATABASE_PERMISSION_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
        /// DATABASE_ROLE_MEMBER_CHANGE_GROUP
        /// FAILED_DATABASE_AUTHENTICATION_GROUP
        /// SCHEMA_OBJECT_ACCESS_GROUP
        /// SCHEMA_OBJECT_CHANGE_GROUP
        /// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        /// USER_CHANGE_PASSWORD_GROUP
        /// BATCH_STARTED_GROUP
        /// BATCH_COMPLETED_GROUP
        /// DBCC_GROUP
        /// DATABASE_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_CHANGE_GROUP
        /// LEDGER_OPERATION_GROUP
        /// 
        /// These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
        /// 
        /// For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
        /// 
        /// For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
        /// SELECT
        /// UPDATE
        /// INSERT
        /// DELETE
        /// EXECUTE
        /// RECEIVE
        /// REFERENCES
        /// 
        /// The general form for defining an action to be audited is:
        /// {action} ON {object} BY {principal}
        /// 
        /// Note that &lt;object&gt; in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
        /// 
        /// For example:
        /// SELECT on dbo.myTable by public
        /// SELECT on DATABASE::myDatabase by public
        /// SELECT on SCHEMA::mySchema by public
        /// 
        /// For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
        /// </summary>
        [Output("auditActionsAndGroups")]
        public Output<ImmutableArray<string>> AuditActionsAndGroups { get; private set; } = null!;

        /// <summary>
        /// Specifies whether audit events are sent to Azure Monitor. 
        /// In order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.
        /// 
        /// When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
        /// Note that for server level audit you should use the 'master' database as {databaseName}.
        /// 
        /// Diagnostic Settings URI format:
        /// PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// 
        /// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// </summary>
        [Output("isAzureMonitorTargetEnabled")]
        public Output<bool?> IsAzureMonitorTargetEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether Managed Identity is used to access blob storage
        /// </summary>
        [Output("isManagedIdentityInUse")]
        public Output<bool?> IsManagedIdentityInUse { get; private set; } = null!;

        /// <summary>
        /// Specifies whether storageAccountAccessKey value is the storage's secondary key.
        /// </summary>
        [Output("isStorageSecondaryKeyInUse")]
        public Output<bool?> IsStorageSecondaryKeyInUse { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies condition of where clause when creating an audit.
        /// </summary>
        [Output("predicateExpression")]
        public Output<string?> PredicateExpression { get; private set; } = null!;

        /// <summary>
        /// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
        /// The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
        /// </summary>
        [Output("queueDelayMs")]
        public Output<int?> QueueDelayMs { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep in the audit logs in the storage account.
        /// </summary>
        [Output("retentionDays")]
        public Output<int?> RetentionDays { get; private set; } = null!;

        /// <summary>
        /// Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Specifies the blob storage subscription Id.
        /// </summary>
        [Output("storageAccountSubscriptionId")]
        public Output<string?> StorageAccountSubscriptionId { get; private set; } = null!;

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
        /// </summary>
        [Output("storageEndpoint")]
        public Output<string?> StorageEndpoint { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ExtendedDatabaseBlobAuditingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExtendedDatabaseBlobAuditingPolicy(string name, ExtendedDatabaseBlobAuditingPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure-native:sql/v20211101preview:ExtendedDatabaseBlobAuditingPolicy", name, args ?? new ExtendedDatabaseBlobAuditingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExtendedDatabaseBlobAuditingPolicy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:sql/v20211101preview:ExtendedDatabaseBlobAuditingPolicy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:sql:ExtendedDatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20170301preview:ExtendedDatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20200202preview:ExtendedDatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20200801preview:ExtendedDatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20201101preview:ExtendedDatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20210201preview:ExtendedDatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20210501preview:ExtendedDatabaseBlobAuditingPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:sql/v20210801preview:ExtendedDatabaseBlobAuditingPolicy"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExtendedDatabaseBlobAuditingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExtendedDatabaseBlobAuditingPolicy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ExtendedDatabaseBlobAuditingPolicy(name, id, options);
        }
    }

    public sealed class ExtendedDatabaseBlobAuditingPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("auditActionsAndGroups")]
        private InputList<string>? _auditActionsAndGroups;

        /// <summary>
        /// Specifies the Actions-Groups and Actions to audit.
        /// 
        /// The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
        /// 
        /// BATCH_COMPLETED_GROUP,
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
        /// FAILED_DATABASE_AUTHENTICATION_GROUP.
        /// 
        /// This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
        /// 
        /// The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
        /// 
        /// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
        /// BACKUP_RESTORE_GROUP
        /// DATABASE_LOGOUT_GROUP
        /// DATABASE_OBJECT_CHANGE_GROUP
        /// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
        /// DATABASE_OPERATION_GROUP
        /// DATABASE_PERMISSION_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
        /// DATABASE_ROLE_MEMBER_CHANGE_GROUP
        /// FAILED_DATABASE_AUTHENTICATION_GROUP
        /// SCHEMA_OBJECT_ACCESS_GROUP
        /// SCHEMA_OBJECT_CHANGE_GROUP
        /// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        /// USER_CHANGE_PASSWORD_GROUP
        /// BATCH_STARTED_GROUP
        /// BATCH_COMPLETED_GROUP
        /// DBCC_GROUP
        /// DATABASE_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_CHANGE_GROUP
        /// LEDGER_OPERATION_GROUP
        /// 
        /// These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
        /// 
        /// For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
        /// 
        /// For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
        /// SELECT
        /// UPDATE
        /// INSERT
        /// DELETE
        /// EXECUTE
        /// RECEIVE
        /// REFERENCES
        /// 
        /// The general form for defining an action to be audited is:
        /// {action} ON {object} BY {principal}
        /// 
        /// Note that &lt;object&gt; in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
        /// 
        /// For example:
        /// SELECT on dbo.myTable by public
        /// SELECT on DATABASE::myDatabase by public
        /// SELECT on SCHEMA::mySchema by public
        /// 
        /// For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
        /// </summary>
        public InputList<string> AuditActionsAndGroups
        {
            get => _auditActionsAndGroups ?? (_auditActionsAndGroups = new InputList<string>());
            set => _auditActionsAndGroups = value;
        }

        /// <summary>
        /// The name of the blob auditing policy.
        /// </summary>
        [Input("blobAuditingPolicyName")]
        public Input<string>? BlobAuditingPolicyName { get; set; }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// Specifies whether audit events are sent to Azure Monitor. 
        /// In order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.
        /// 
        /// When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
        /// Note that for server level audit you should use the 'master' database as {databaseName}.
        /// 
        /// Diagnostic Settings URI format:
        /// PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// 
        /// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// </summary>
        [Input("isAzureMonitorTargetEnabled")]
        public Input<bool>? IsAzureMonitorTargetEnabled { get; set; }

        /// <summary>
        /// Specifies whether Managed Identity is used to access blob storage
        /// </summary>
        [Input("isManagedIdentityInUse")]
        public Input<bool>? IsManagedIdentityInUse { get; set; }

        /// <summary>
        /// Specifies whether storageAccountAccessKey value is the storage's secondary key.
        /// </summary>
        [Input("isStorageSecondaryKeyInUse")]
        public Input<bool>? IsStorageSecondaryKeyInUse { get; set; }

        /// <summary>
        /// Specifies condition of where clause when creating an audit.
        /// </summary>
        [Input("predicateExpression")]
        public Input<string>? PredicateExpression { get; set; }

        /// <summary>
        /// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
        /// The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
        /// </summary>
        [Input("queueDelayMs")]
        public Input<int>? QueueDelayMs { get; set; }

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep in the audit logs in the storage account.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        /// <summary>
        /// Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
        /// </summary>
        [Input("state", required: true)]
        public Input<Pulumi.AzureNative.Sql.V20211101Preview.BlobAuditingPolicyState> State { get; set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the auditing storage account. 
        /// If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
        /// Prerequisites for using managed identity authentication:
        /// 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
        /// 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.
        /// For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// Specifies the blob storage subscription Id.
        /// </summary>
        [Input("storageAccountSubscriptionId")]
        public Input<string>? StorageAccountSubscriptionId { get; set; }

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public ExtendedDatabaseBlobAuditingPolicyArgs()
        {
        }
        public static new ExtendedDatabaseBlobAuditingPolicyArgs Empty => new ExtendedDatabaseBlobAuditingPolicyArgs();
    }
}
