// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.PolicyInsights
{
    /// <summary>
    /// The remediation definition.
    /// API Version: 2021-10-01.
    /// Previous API Version: 2019-07-01. See https://github.com/pulumi/pulumi-azure-native/discussions/1834 for information on migrating from v1 to v2 of the provider.
    /// </summary>
    [AzureNativeResourceType("azure-native:policyinsights:RemediationAtSubscription")]
    public partial class RemediationAtSubscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The remediation correlation Id. Can be used to find events related to the remediation in the activity log.
        /// </summary>
        [Output("correlationId")]
        public Output<string> CorrelationId { get; private set; } = null!;

        /// <summary>
        /// The time at which the remediation was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// The deployment status summary for all deployments created by the remediation.
        /// </summary>
        [Output("deploymentStatus")]
        public Output<Outputs.RemediationDeploymentSummaryResponse> DeploymentStatus { get; private set; } = null!;

        /// <summary>
        /// The remediation failure threshold settings
        /// </summary>
        [Output("failureThreshold")]
        public Output<Outputs.RemediationPropertiesResponseFailureThreshold?> FailureThreshold { get; private set; } = null!;

        /// <summary>
        /// The filters that will be applied to determine which resources to remediate.
        /// </summary>
        [Output("filters")]
        public Output<Outputs.RemediationFiltersResponse?> Filters { get; private set; } = null!;

        /// <summary>
        /// The time at which the remediation was last updated.
        /// </summary>
        [Output("lastUpdatedOn")]
        public Output<string> LastUpdatedOn { get; private set; } = null!;

        /// <summary>
        /// The name of the remediation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
        /// </summary>
        [Output("parallelDeployments")]
        public Output<int?> ParallelDeployments { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the policy assignment that should be remediated.
        /// </summary>
        [Output("policyAssignmentId")]
        public Output<string?> PolicyAssignmentId { get; private set; } = null!;

        /// <summary>
        /// The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
        /// </summary>
        [Output("policyDefinitionReferenceId")]
        public Output<string?> PolicyDefinitionReferenceId { get; private set; } = null!;

        /// <summary>
        /// The status of the remediation. This refers to the entire remediation task, not individual deployments. Allowed values are Evaluating, Canceled, Cancelling, Failed, Complete, or Succeeded.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
        /// </summary>
        [Output("resourceCount")]
        public Output<int?> ResourceCount { get; private set; } = null!;

        /// <summary>
        /// The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
        /// </summary>
        [Output("resourceDiscoveryMode")]
        public Output<string?> ResourceDiscoveryMode { get; private set; } = null!;

        /// <summary>
        /// The remediation status message. Provides additional details regarding the state of the remediation.
        /// </summary>
        [Output("statusMessage")]
        public Output<string> StatusMessage { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the remediation.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RemediationAtSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RemediationAtSubscription(string name, RemediationAtSubscriptionArgs? args = null, CustomResourceOptions? options = null)
            : base("azure-native:policyinsights:RemediationAtSubscription", name, args ?? new RemediationAtSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RemediationAtSubscription(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:policyinsights:RemediationAtSubscription", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:policyinsights/v20180701preview:RemediationAtSubscription"},
                    new global::Pulumi.Alias { Type = "azure-native:policyinsights/v20190701:RemediationAtSubscription"},
                    new global::Pulumi.Alias { Type = "azure-native:policyinsights/v20211001:RemediationAtSubscription"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RemediationAtSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RemediationAtSubscription Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RemediationAtSubscription(name, id, options);
        }
    }

    public sealed class RemediationAtSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The remediation failure threshold settings
        /// </summary>
        [Input("failureThreshold")]
        public Input<Inputs.RemediationPropertiesFailureThresholdArgs>? FailureThreshold { get; set; }

        /// <summary>
        /// The filters that will be applied to determine which resources to remediate.
        /// </summary>
        [Input("filters")]
        public Input<Inputs.RemediationFiltersArgs>? Filters { get; set; }

        /// <summary>
        /// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
        /// </summary>
        [Input("parallelDeployments")]
        public Input<int>? ParallelDeployments { get; set; }

        /// <summary>
        /// The resource ID of the policy assignment that should be remediated.
        /// </summary>
        [Input("policyAssignmentId")]
        public Input<string>? PolicyAssignmentId { get; set; }

        /// <summary>
        /// The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
        /// </summary>
        [Input("policyDefinitionReferenceId")]
        public Input<string>? PolicyDefinitionReferenceId { get; set; }

        /// <summary>
        /// The name of the remediation.
        /// </summary>
        [Input("remediationName")]
        public Input<string>? RemediationName { get; set; }

        /// <summary>
        /// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
        /// </summary>
        [Input("resourceCount")]
        public Input<int>? ResourceCount { get; set; }

        /// <summary>
        /// The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
        /// </summary>
        [Input("resourceDiscoveryMode")]
        public InputUnion<string, Pulumi.AzureNative.PolicyInsights.ResourceDiscoveryMode>? ResourceDiscoveryMode { get; set; }

        public RemediationAtSubscriptionArgs()
        {
        }
        public static new RemediationAtSubscriptionArgs Empty => new RemediationAtSubscriptionArgs();
    }
}
