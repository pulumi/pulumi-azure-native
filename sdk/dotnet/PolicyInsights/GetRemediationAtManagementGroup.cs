// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.PolicyInsights
{
    public static class GetRemediationAtManagementGroup
    {
        /// <summary>
        /// Gets an existing remediation at management group scope.
        /// Azure REST API version: 2021-10-01.
        /// </summary>
        public static Task<GetRemediationAtManagementGroupResult> InvokeAsync(GetRemediationAtManagementGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRemediationAtManagementGroupResult>("azure-native:policyinsights:getRemediationAtManagementGroup", args ?? new GetRemediationAtManagementGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an existing remediation at management group scope.
        /// Azure REST API version: 2021-10-01.
        /// </summary>
        public static Output<GetRemediationAtManagementGroupResult> Invoke(GetRemediationAtManagementGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRemediationAtManagementGroupResult>("azure-native:policyinsights:getRemediationAtManagementGroup", args ?? new GetRemediationAtManagementGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRemediationAtManagementGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Management group ID.
        /// </summary>
        [Input("managementGroupId", required: true)]
        public string ManagementGroupId { get; set; } = null!;

        /// <summary>
        /// The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
        /// </summary>
        [Input("managementGroupsNamespace", required: true)]
        public string ManagementGroupsNamespace { get; set; } = null!;

        /// <summary>
        /// The name of the remediation.
        /// </summary>
        [Input("remediationName", required: true)]
        public string RemediationName { get; set; } = null!;

        public GetRemediationAtManagementGroupArgs()
        {
        }
        public static new GetRemediationAtManagementGroupArgs Empty => new GetRemediationAtManagementGroupArgs();
    }

    public sealed class GetRemediationAtManagementGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Management group ID.
        /// </summary>
        [Input("managementGroupId", required: true)]
        public Input<string> ManagementGroupId { get; set; } = null!;

        /// <summary>
        /// The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
        /// </summary>
        [Input("managementGroupsNamespace", required: true)]
        public Input<string> ManagementGroupsNamespace { get; set; } = null!;

        /// <summary>
        /// The name of the remediation.
        /// </summary>
        [Input("remediationName", required: true)]
        public Input<string> RemediationName { get; set; } = null!;

        public GetRemediationAtManagementGroupInvokeArgs()
        {
        }
        public static new GetRemediationAtManagementGroupInvokeArgs Empty => new GetRemediationAtManagementGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetRemediationAtManagementGroupResult
    {
        /// <summary>
        /// The remediation correlation Id. Can be used to find events related to the remediation in the activity log.
        /// </summary>
        public readonly string CorrelationId;
        /// <summary>
        /// The time at which the remediation was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// The deployment status summary for all deployments created by the remediation.
        /// </summary>
        public readonly Outputs.RemediationDeploymentSummaryResponse DeploymentStatus;
        /// <summary>
        /// The remediation failure threshold settings
        /// </summary>
        public readonly Outputs.RemediationPropertiesResponseFailureThreshold? FailureThreshold;
        /// <summary>
        /// The filters that will be applied to determine which resources to remediate.
        /// </summary>
        public readonly Outputs.RemediationFiltersResponse? Filters;
        /// <summary>
        /// The ID of the remediation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The time at which the remediation was last updated.
        /// </summary>
        public readonly string LastUpdatedOn;
        /// <summary>
        /// The name of the remediation.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
        /// </summary>
        public readonly int? ParallelDeployments;
        /// <summary>
        /// The resource ID of the policy assignment that should be remediated.
        /// </summary>
        public readonly string? PolicyAssignmentId;
        /// <summary>
        /// The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
        /// </summary>
        public readonly string? PolicyDefinitionReferenceId;
        /// <summary>
        /// The status of the remediation. This refers to the entire remediation task, not individual deployments. Allowed values are Evaluating, Canceled, Cancelling, Failed, Complete, or Succeeded.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
        /// </summary>
        public readonly int? ResourceCount;
        /// <summary>
        /// The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
        /// </summary>
        public readonly string? ResourceDiscoveryMode;
        /// <summary>
        /// The remediation status message. Provides additional details regarding the state of the remediation.
        /// </summary>
        public readonly string StatusMessage;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the remediation.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRemediationAtManagementGroupResult(
            string correlationId,

            string createdOn,

            Outputs.RemediationDeploymentSummaryResponse deploymentStatus,

            Outputs.RemediationPropertiesResponseFailureThreshold? failureThreshold,

            Outputs.RemediationFiltersResponse? filters,

            string id,

            string lastUpdatedOn,

            string name,

            int? parallelDeployments,

            string? policyAssignmentId,

            string? policyDefinitionReferenceId,

            string provisioningState,

            int? resourceCount,

            string? resourceDiscoveryMode,

            string statusMessage,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            CorrelationId = correlationId;
            CreatedOn = createdOn;
            DeploymentStatus = deploymentStatus;
            FailureThreshold = failureThreshold;
            Filters = filters;
            Id = id;
            LastUpdatedOn = lastUpdatedOn;
            Name = name;
            ParallelDeployments = parallelDeployments;
            PolicyAssignmentId = policyAssignmentId;
            PolicyDefinitionReferenceId = policyDefinitionReferenceId;
            ProvisioningState = provisioningState;
            ResourceCount = resourceCount;
            ResourceDiscoveryMode = resourceDiscoveryMode;
            StatusMessage = statusMessage;
            SystemData = systemData;
            Type = type;
        }
    }
}
