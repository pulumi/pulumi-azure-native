// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.PolicyInsights
{
    public static class GetAttestationAtResource
    {
        /// <summary>
        /// Gets an existing attestation at resource scope.
        /// Azure REST API version: 2022-09-01.
        /// 
        /// Other available API versions: 2024-10-01.
        /// </summary>
        public static Task<GetAttestationAtResourceResult> InvokeAsync(GetAttestationAtResourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAttestationAtResourceResult>("azure-native:policyinsights:getAttestationAtResource", args ?? new GetAttestationAtResourceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an existing attestation at resource scope.
        /// Azure REST API version: 2022-09-01.
        /// 
        /// Other available API versions: 2024-10-01.
        /// </summary>
        public static Output<GetAttestationAtResourceResult> Invoke(GetAttestationAtResourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAttestationAtResourceResult>("azure-native:policyinsights:getAttestationAtResource", args ?? new GetAttestationAtResourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAttestationAtResourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the attestation.
        /// </summary>
        [Input("attestationName", required: true)]
        public string AttestationName { get; set; } = null!;

        /// <summary>
        /// Resource ID.
        /// </summary>
        [Input("resourceId", required: true)]
        public string ResourceId { get; set; } = null!;

        public GetAttestationAtResourceArgs()
        {
        }
        public static new GetAttestationAtResourceArgs Empty => new GetAttestationAtResourceArgs();
    }

    public sealed class GetAttestationAtResourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the attestation.
        /// </summary>
        [Input("attestationName", required: true)]
        public Input<string> AttestationName { get; set; } = null!;

        /// <summary>
        /// Resource ID.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        public GetAttestationAtResourceInvokeArgs()
        {
        }
        public static new GetAttestationAtResourceInvokeArgs Empty => new GetAttestationAtResourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetAttestationAtResourceResult
    {
        /// <summary>
        /// The time the evidence was assessed
        /// </summary>
        public readonly string? AssessmentDate;
        /// <summary>
        /// Comments describing why this attestation was created.
        /// </summary>
        public readonly string? Comments;
        /// <summary>
        /// The compliance state that should be set on the resource.
        /// </summary>
        public readonly string? ComplianceState;
        /// <summary>
        /// The evidence supporting the compliance state set in this attestation.
        /// </summary>
        public readonly ImmutableArray<Outputs.AttestationEvidenceResponse> Evidence;
        /// <summary>
        /// The time the compliance state should expire.
        /// </summary>
        public readonly string? ExpiresOn;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The time the compliance state was last changed in this attestation.
        /// </summary>
        public readonly string LastComplianceStateChangeAt;
        /// <summary>
        /// Additional metadata for this attestation
        /// </summary>
        public readonly object? Metadata;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The person responsible for setting the state of the resource. This value is typically an Azure Active Directory object ID.
        /// </summary>
        public readonly string? Owner;
        /// <summary>
        /// The resource ID of the policy assignment that the attestation is setting the state for.
        /// </summary>
        public readonly string PolicyAssignmentId;
        /// <summary>
        /// The policy definition reference ID from a policy set definition that the attestation is setting the state for. If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition.
        /// </summary>
        public readonly string? PolicyDefinitionReferenceId;
        /// <summary>
        /// The status of the attestation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAttestationAtResourceResult(
            string? assessmentDate,

            string? comments,

            string? complianceState,

            ImmutableArray<Outputs.AttestationEvidenceResponse> evidence,

            string? expiresOn,

            string id,

            string lastComplianceStateChangeAt,

            object? metadata,

            string name,

            string? owner,

            string policyAssignmentId,

            string? policyDefinitionReferenceId,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AssessmentDate = assessmentDate;
            Comments = comments;
            ComplianceState = complianceState;
            Evidence = evidence;
            ExpiresOn = expiresOn;
            Id = id;
            LastComplianceStateChangeAt = lastComplianceStateChangeAt;
            Metadata = metadata;
            Name = name;
            Owner = owner;
            PolicyAssignmentId = policyAssignmentId;
            PolicyDefinitionReferenceId = policyDefinitionReferenceId;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
