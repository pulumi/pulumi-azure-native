// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ComputeSchedule
{
    /// <summary>
    /// The action the scheduled action should perform in the resources
    /// </summary>
    [EnumType]
    public readonly struct ActionType : IEquatable<ActionType>
    {
        private readonly string _value;

        private ActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Perform a start action on the specified resources
        /// </summary>
        public static ActionType Start { get; } = new ActionType("Start");
        /// <summary>
        /// Perform a deallocate action on the specified resources
        /// </summary>
        public static ActionType Deallocate { get; } = new ActionType("Deallocate");
        /// <summary>
        /// Perform hibernate and deallocate on the specified resources
        /// </summary>
        public static ActionType Hibernate { get; } = new ActionType("Hibernate");

        public static bool operator ==(ActionType left, ActionType right) => left.Equals(right);
        public static bool operator !=(ActionType left, ActionType right) => !left.Equals(right);

        public static explicit operator string(ActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionType other && Equals(other);
        public bool Equals(ActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of deadline the scheduled action is supposed to follow for the schedule. If no value is passed, it will default to InitiateAt.
    /// </summary>
    [EnumType]
    public readonly struct DeadlineType : IEquatable<DeadlineType>
    {
        private readonly string _value;

        private DeadlineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value of Unknown.
        /// </summary>
        public static DeadlineType Unknown { get; } = new DeadlineType("Unknown");
        /// <summary>
        /// Initiate the operation at the given deadline.
        /// </summary>
        public static DeadlineType InitiateAt { get; } = new DeadlineType("InitiateAt");
        /// <summary>
        /// Complete the operation by the given deadline.
        /// </summary>
        public static DeadlineType CompleteBy { get; } = new DeadlineType("CompleteBy");

        public static bool operator ==(DeadlineType left, DeadlineType right) => left.Equals(right);
        public static bool operator !=(DeadlineType left, DeadlineType right) => !left.Equals(right);

        public static explicit operator string(DeadlineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeadlineType other && Equals(other);
        public bool Equals(DeadlineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The language the notification should be sent on.
    /// </summary>
    [EnumType]
    public readonly struct Language : IEquatable<Language>
    {
        private readonly string _value;

        private Language(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// American english language
        /// </summary>
        public static Language EnUs { get; } = new Language("en-us");

        public static bool operator ==(Language left, Language right) => left.Equals(right);
        public static bool operator !=(Language left, Language right) => !left.Equals(right);

        public static explicit operator string(Language value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Language other && Equals(other);
        public bool Equals(Language other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Representation of the months available selection in a gregorian calendar
    /// </summary>
    [EnumType]
    public readonly struct Month : IEquatable<Month>
    {
        private readonly string _value;

        private Month(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The January month.
        /// </summary>
        public static Month January { get; } = new Month("January");
        /// <summary>
        /// The February month.
        /// </summary>
        public static Month February { get; } = new Month("February");
        /// <summary>
        /// The March month.
        /// </summary>
        public static Month March { get; } = new Month("March");
        /// <summary>
        /// The April month.
        /// </summary>
        public static Month April { get; } = new Month("April");
        /// <summary>
        /// The May month.
        /// </summary>
        public static Month May { get; } = new Month("May");
        /// <summary>
        /// The June month.
        /// </summary>
        public static Month June { get; } = new Month("June");
        /// <summary>
        /// The July month.
        /// </summary>
        public static Month July { get; } = new Month("July");
        /// <summary>
        /// The August month.
        /// </summary>
        public static Month August { get; } = new Month("August");
        /// <summary>
        /// The September month.
        /// </summary>
        public static Month September { get; } = new Month("September");
        /// <summary>
        /// The October month.
        /// </summary>
        public static Month October { get; } = new Month("October");
        /// <summary>
        /// The November month.
        /// </summary>
        public static Month November { get; } = new Month("November");
        /// <summary>
        /// The December month.
        /// </summary>
        public static Month December { get; } = new Month("December");
        /// <summary>
        /// All months
        /// </summary>
        public static Month All { get; } = new Month("All");

        public static bool operator ==(Month left, Month right) => left.Equals(right);
        public static bool operator !=(Month left, Month right) => !left.Equals(right);

        public static explicit operator string(Month value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Month other && Equals(other);
        public bool Equals(Month other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of notification to be sent.
    /// </summary>
    [EnumType]
    public readonly struct NotificationType : IEquatable<NotificationType>
    {
        private readonly string _value;

        private NotificationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Notify through e-mail
        /// </summary>
        public static NotificationType Email { get; } = new NotificationType("Email");

        public static bool operator ==(NotificationType left, NotificationType right) => left.Equals(right);
        public static bool operator !=(NotificationType left, NotificationType right) => !left.Equals(right);

        public static explicit operator string(NotificationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationType other && Equals(other);
        public bool Equals(NotificationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Details that could optimize the user's request
    /// </summary>
    [EnumType]
    public readonly struct OptimizationPreference : IEquatable<OptimizationPreference>
    {
        private readonly string _value;

        private OptimizationPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Optimize while considering cost savings
        /// </summary>
        public static OptimizationPreference Cost { get; } = new OptimizationPreference("Cost");
        /// <summary>
        /// Optimize while considering availability of resources
        /// </summary>
        public static OptimizationPreference Availability { get; } = new OptimizationPreference("Availability");
        /// <summary>
        /// Optimize while considering a balance of cost and availability
        /// </summary>
        public static OptimizationPreference CostAvailabilityBalanced { get; } = new OptimizationPreference("CostAvailabilityBalanced");

        public static bool operator ==(OptimizationPreference left, OptimizationPreference right) => left.Equals(right);
        public static bool operator !=(OptimizationPreference left, OptimizationPreference right) => !left.Equals(right);

        public static explicit operator string(OptimizationPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OptimizationPreference other && Equals(other);
        public bool Equals(OptimizationPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of resource the scheduled action is targeting
    /// </summary>
    [EnumType]
    public readonly struct ResourceType : IEquatable<ResourceType>
    {
        private readonly string _value;

        private ResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Resources defined are Virtual Machines
        /// </summary>
        public static ResourceType VirtualMachine { get; } = new ResourceType("VirtualMachine");
        /// <summary>
        /// Resources defined are Virtual Machines Scale Sets
        /// </summary>
        public static ResourceType VirtualMachineScaleSet { get; } = new ResourceType("VirtualMachineScaleSet");

        public static bool operator ==(ResourceType left, ResourceType right) => left.Equals(right);
        public static bool operator !=(ResourceType left, ResourceType right) => !left.Equals(right);

        public static explicit operator string(ResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceType other && Equals(other);
        public bool Equals(ResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Representation of the possible selection of days in a week in a gregorian calendar
    /// </summary>
    [EnumType]
    public readonly struct WeekDay : IEquatable<WeekDay>
    {
        private readonly string _value;

        private WeekDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Monday weekday.
        /// </summary>
        public static WeekDay Monday { get; } = new WeekDay("Monday");
        /// <summary>
        /// Tuesday weekday.
        /// </summary>
        public static WeekDay Tuesday { get; } = new WeekDay("Tuesday");
        /// <summary>
        /// Wednesday weekday.
        /// </summary>
        public static WeekDay Wednesday { get; } = new WeekDay("Wednesday");
        /// <summary>
        /// Thursday weekday.
        /// </summary>
        public static WeekDay Thursday { get; } = new WeekDay("Thursday");
        /// <summary>
        /// Friday weekday.
        /// </summary>
        public static WeekDay Friday { get; } = new WeekDay("Friday");
        /// <summary>
        /// Saturday weekday.
        /// </summary>
        public static WeekDay Saturday { get; } = new WeekDay("Saturday");
        /// <summary>
        /// Sunday weekday.
        /// </summary>
        public static WeekDay Sunday { get; } = new WeekDay("Sunday");
        /// <summary>
        /// All week days
        /// </summary>
        public static WeekDay All { get; } = new WeekDay("All");

        public static bool operator ==(WeekDay left, WeekDay right) => left.Equals(right);
        public static bool operator !=(WeekDay left, WeekDay right) => !left.Equals(right);

        public static explicit operator string(WeekDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeekDay other && Equals(other);
        public bool Equals(WeekDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
