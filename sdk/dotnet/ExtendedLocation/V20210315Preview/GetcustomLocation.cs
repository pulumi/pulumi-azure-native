// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ExtendedLocation.V20210315Preview
{
    public static class GetcustomLocation
    {
        /// <summary>
        /// Custom Locations definition.
        /// </summary>
        public static Task<GetcustomLocationResult> InvokeAsync(GetcustomLocationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetcustomLocationResult>("azure-native:extendedlocation/v20210315preview:getcustomLocation", args ?? new GetcustomLocationArgs(), options.WithVersion());
    }


    public sealed class GetcustomLocationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Custom Locations name.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        public GetcustomLocationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetcustomLocationResult
    {
        /// <summary>
        /// This is optional input that contains the authentication that should be used to generate the namespace.
        /// </summary>
        public readonly Outputs.CustomLocationPropertiesResponseAuthentication? Authentication;
        /// <summary>
        /// Contains the reference to the add-on that contains charts to deploy CRDs and operators.
        /// </summary>
        public readonly ImmutableArray<string> ClusterExtensionIds;
        /// <summary>
        /// Display name for the Custom Locations location.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
        /// </summary>
        public readonly string? HostResourceId;
        /// <summary>
        /// Type of host the Custom Locations is referencing (Kubernetes, etc...).
        /// </summary>
        public readonly string? HostType;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Kubernetes namespace that will be created on the specified cluster.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// Provisioning State for the Custom Location.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetcustomLocationResult(
            Outputs.CustomLocationPropertiesResponseAuthentication? authentication,

            ImmutableArray<string> clusterExtensionIds,

            string? displayName,

            string? hostResourceId,

            string? hostType,

            string id,

            string location,

            string name,

            string? @namespace,

            string? provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Authentication = authentication;
            ClusterExtensionIds = clusterExtensionIds;
            DisplayName = displayName;
            HostResourceId = hostResourceId;
            HostType = hostType;
            Id = id;
            Location = location;
            Name = name;
            Namespace = @namespace;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
