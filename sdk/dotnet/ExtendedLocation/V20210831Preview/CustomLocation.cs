// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ExtendedLocation.V20210831Preview
{
    /// <summary>
    /// Custom Locations definition.
    /// </summary>
    [AzureNativeResourceType("azure-native:extendedlocation/v20210831preview:CustomLocation")]
    public partial class CustomLocation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This is optional input that contains the authentication that should be used to generate the namespace.
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.CustomLocationPropertiesResponseAuthentication?> Authentication { get; private set; } = null!;

        /// <summary>
        /// Contains the reference to the add-on that contains charts to deploy CRDs and operators.
        /// </summary>
        [Output("clusterExtensionIds")]
        public Output<ImmutableArray<string>> ClusterExtensionIds { get; private set; } = null!;

        /// <summary>
        /// Display name for the Custom Locations location.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
        /// </summary>
        [Output("hostResourceId")]
        public Output<string?> HostResourceId { get; private set; } = null!;

        /// <summary>
        /// Type of host the Custom Locations is referencing (Kubernetes, etc...).
        /// </summary>
        [Output("hostType")]
        public Output<string?> HostType { get; private set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Kubernetes namespace that will be created on the specified cluster.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Provisioning State for the Custom Location.
        /// </summary>
        [Output("provisioningState")]
        public Output<string?> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CustomLocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomLocation(string name, CustomLocationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:extendedlocation/v20210831preview:CustomLocation", name, args ?? new CustomLocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomLocation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:extendedlocation/v20210831preview:CustomLocation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:extendedlocation:CustomLocation" },
                    new global::Pulumi.Alias { Type = "azure-native:extendedlocation/v20210315preview:CustomLocation" },
                    new global::Pulumi.Alias { Type = "azure-native:extendedlocation/v20210815:CustomLocation" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomLocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomLocation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CustomLocation(name, id, options);
        }
    }

    public sealed class CustomLocationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is optional input that contains the authentication that should be used to generate the namespace.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.CustomLocationPropertiesAuthenticationArgs>? Authentication { get; set; }

        [Input("clusterExtensionIds")]
        private InputList<string>? _clusterExtensionIds;

        /// <summary>
        /// Contains the reference to the add-on that contains charts to deploy CRDs and operators.
        /// </summary>
        public InputList<string> ClusterExtensionIds
        {
            get => _clusterExtensionIds ?? (_clusterExtensionIds = new InputList<string>());
            set => _clusterExtensionIds = value;
        }

        /// <summary>
        /// Display name for the Custom Locations location.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
        /// </summary>
        [Input("hostResourceId")]
        public Input<string>? HostResourceId { get; set; }

        /// <summary>
        /// Type of host the Custom Locations is referencing (Kubernetes, etc...).
        /// </summary>
        [Input("hostType")]
        public InputUnion<string, Pulumi.AzureNative.ExtendedLocation.V20210831Preview.HostType>? HostType { get; set; }

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Kubernetes namespace that will be created on the specified cluster.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Provisioning State for the Custom Location.
        /// </summary>
        [Input("provisioningState")]
        public Input<string>? ProvisioningState { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Custom Locations name.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CustomLocationArgs()
        {
        }
        public static new CustomLocationArgs Empty => new CustomLocationArgs();
    }
}
