// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.WeightsAndBiases
{
    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The region of the instance
    /// </summary>
    [EnumType]
    public readonly struct Region : IEquatable<Region>
    {
        private readonly string _value;

        private Region(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Region: East US
        /// </summary>
        public static Region Eastus { get; } = new Region("eastus");
        /// <summary>
        /// Region: Central US
        /// </summary>
        public static Region Centralus { get; } = new Region("centralus");
        /// <summary>
        /// Region: West US
        /// </summary>
        public static Region Westus { get; } = new Region("westus");
        /// <summary>
        /// Region: West Europe
        /// </summary>
        public static Region Westeurope { get; } = new Region("westeurope");
        /// <summary>
        /// Region: Japan East
        /// </summary>
        public static Region Japaneast { get; } = new Region("japaneast");
        /// <summary>
        /// Region: Korea Central
        /// </summary>
        public static Region Koreacentral { get; } = new Region("koreacentral");

        public static bool operator ==(Region left, Region right) => left.Equals(right);
        public static bool operator !=(Region left, Region right) => !left.Equals(right);

        public static explicit operator string(Region value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Region other && Equals(other);
        public bool Equals(Region other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the Single Sign On for the resource
    /// </summary>
    [EnumType]
    public readonly struct SingleSignOnStates : IEquatable<SingleSignOnStates>
    {
        private readonly string _value;

        private SingleSignOnStates(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Initial state of the SSO resource
        /// </summary>
        public static SingleSignOnStates Initial { get; } = new SingleSignOnStates("Initial");
        /// <summary>
        /// State of the SSO resource when it is enabled
        /// </summary>
        public static SingleSignOnStates Enable { get; } = new SingleSignOnStates("Enable");
        /// <summary>
        /// State of the SSO resource when it is disabled
        /// </summary>
        public static SingleSignOnStates Disable { get; } = new SingleSignOnStates("Disable");

        public static bool operator ==(SingleSignOnStates left, SingleSignOnStates right) => left.Equals(right);
        public static bool operator !=(SingleSignOnStates left, SingleSignOnStates right) => !left.Equals(right);

        public static explicit operator string(SingleSignOnStates value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleSignOnStates other && Equals(other);
        public bool Equals(SingleSignOnStates other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Single Sign-On mechanism being used
    /// </summary>
    [EnumType]
    public readonly struct SingleSignOnType : IEquatable<SingleSignOnType>
    {
        private readonly string _value;

        private SingleSignOnType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Security Assertion Markup Language (SAML) based Single Sign-On
        /// </summary>
        public static SingleSignOnType Saml { get; } = new SingleSignOnType("Saml");
        /// <summary>
        /// OpenID Connect based Single Sign-On.
        /// </summary>
        public static SingleSignOnType OpenId { get; } = new SingleSignOnType("OpenId");

        public static bool operator ==(SingleSignOnType left, SingleSignOnType right) => left.Equals(right);
        public static bool operator !=(SingleSignOnType left, SingleSignOnType right) => !left.Equals(right);

        public static explicit operator string(SingleSignOnType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleSignOnType other && Equals(other);
        public bool Equals(SingleSignOnType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
