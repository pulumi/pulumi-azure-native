// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.CustomProviders.V20180901Preview
{
    /// <summary>
    /// The routing types that are supported for action requests.
    /// </summary>
    [EnumType]
    public readonly struct ActionRouting : IEquatable<ActionRouting>
    {
        private readonly string _value;

        private ActionRouting(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionRouting Proxy { get; } = new ActionRouting("Proxy");

        public static bool operator ==(ActionRouting left, ActionRouting right) => left.Equals(right);
        public static bool operator !=(ActionRouting left, ActionRouting right) => !left.Equals(right);

        public static explicit operator string(ActionRouting value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionRouting other && Equals(other);
        public bool Equals(ActionRouting other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The routing types that are supported for resource requests.
    /// </summary>
    [EnumType]
    public readonly struct ResourceTypeRouting : IEquatable<ResourceTypeRouting>
    {
        private readonly string _value;

        private ResourceTypeRouting(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceTypeRouting Proxy { get; } = new ResourceTypeRouting("Proxy");
        public static ResourceTypeRouting Proxy_Cache { get; } = new ResourceTypeRouting("Proxy,Cache");

        public static bool operator ==(ResourceTypeRouting left, ResourceTypeRouting right) => left.Equals(right);
        public static bool operator !=(ResourceTypeRouting left, ResourceTypeRouting right) => !left.Equals(right);

        public static explicit operator string(ResourceTypeRouting value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceTypeRouting other && Equals(other);
        public bool Equals(ResourceTypeRouting other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of validation to run against a matching request.
    /// </summary>
    [EnumType]
    public readonly struct ValidationType : IEquatable<ValidationType>
    {
        private readonly string _value;

        private ValidationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ValidationType Swagger { get; } = new ValidationType("Swagger");

        public static bool operator ==(ValidationType left, ValidationType right) => left.Equals(right);
        public static bool operator !=(ValidationType left, ValidationType right) => !left.Equals(right);

        public static explicit operator string(ValidationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ValidationType other && Equals(other);
        public bool Equals(ValidationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
