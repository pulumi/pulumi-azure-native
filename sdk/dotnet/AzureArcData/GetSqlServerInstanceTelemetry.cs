// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureArcData
{
    public static class GetSqlServerInstanceTelemetry
    {
        /// <summary>
        /// Retrieves SQL Server instance telemetry
        /// Azure REST API version: 2024-01-01.
        /// </summary>
        public static Task<GetSqlServerInstanceTelemetryResult> InvokeAsync(GetSqlServerInstanceTelemetryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlServerInstanceTelemetryResult>("azure-native:azurearcdata:getSqlServerInstanceTelemetry", args ?? new GetSqlServerInstanceTelemetryArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves SQL Server instance telemetry
        /// Azure REST API version: 2024-01-01.
        /// </summary>
        public static Output<GetSqlServerInstanceTelemetryResult> Invoke(GetSqlServerInstanceTelemetryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlServerInstanceTelemetryResult>("azure-native:azurearcdata:getSqlServerInstanceTelemetry", args ?? new GetSqlServerInstanceTelemetryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlServerInstanceTelemetryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The aggregation type to use for the numerical columns in the dataset.
        /// </summary>
        [Input("aggregationType")]
        public Union<string, Pulumi.AzureNative.AzureArcData.AggregationType>? AggregationType { get; set; }

        [Input("databaseNames")]
        private List<string>? _databaseNames;

        /// <summary>
        /// The list of database names to return telemetry for. If not specified, telemetry for all databases will be aggregated and returned.
        /// </summary>
        public List<string> DatabaseNames
        {
            get => _databaseNames ?? (_databaseNames = new List<string>());
            set => _databaseNames = value;
        }

        /// <summary>
        /// The name of the telemetry dataset to retrieve.
        /// </summary>
        [Input("datasetName", required: true)]
        public string DatasetName { get; set; } = null!;

        /// <summary>
        /// The end time for the time range to fetch telemetry for. If not specified, the current time is used.
        /// </summary>
        [Input("endTime")]
        public string? EndTime { get; set; }

        /// <summary>
        /// The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples: PT15M, PT1H, P1D
        /// </summary>
        [Input("interval")]
        public string? Interval { get; set; }

        /// <summary>
        /// The name of the Azure resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of SQL Server Instance
        /// </summary>
        [Input("sqlServerInstanceName", required: true)]
        public string SqlServerInstanceName { get; set; } = null!;

        /// <summary>
        /// The start time for the time range to fetch telemetry for. If not specified, the current time minus 1 hour is used.
        /// </summary>
        [Input("startTime")]
        public string? StartTime { get; set; }

        public GetSqlServerInstanceTelemetryArgs()
        {
            AggregationType = "Average";
            Interval = "PT1H";
        }
        public static new GetSqlServerInstanceTelemetryArgs Empty => new GetSqlServerInstanceTelemetryArgs();
    }

    public sealed class GetSqlServerInstanceTelemetryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The aggregation type to use for the numerical columns in the dataset.
        /// </summary>
        [Input("aggregationType")]
        public InputUnion<string, Pulumi.AzureNative.AzureArcData.AggregationType>? AggregationType { get; set; }

        [Input("databaseNames")]
        private InputList<string>? _databaseNames;

        /// <summary>
        /// The list of database names to return telemetry for. If not specified, telemetry for all databases will be aggregated and returned.
        /// </summary>
        public InputList<string> DatabaseNames
        {
            get => _databaseNames ?? (_databaseNames = new InputList<string>());
            set => _databaseNames = value;
        }

        /// <summary>
        /// The name of the telemetry dataset to retrieve.
        /// </summary>
        [Input("datasetName", required: true)]
        public Input<string> DatasetName { get; set; } = null!;

        /// <summary>
        /// The end time for the time range to fetch telemetry for. If not specified, the current time is used.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples: PT15M, PT1H, P1D
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The name of the Azure resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of SQL Server Instance
        /// </summary>
        [Input("sqlServerInstanceName", required: true)]
        public Input<string> SqlServerInstanceName { get; set; } = null!;

        /// <summary>
        /// The start time for the time range to fetch telemetry for. If not specified, the current time minus 1 hour is used.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        public GetSqlServerInstanceTelemetryInvokeArgs()
        {
            AggregationType = "Average";
            Interval = "PT1H";
        }
        public static new GetSqlServerInstanceTelemetryInvokeArgs Empty => new GetSqlServerInstanceTelemetryInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlServerInstanceTelemetryResult
    {
        /// <summary>
        /// The columns of the result telemetry table for the SQL Server instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.SqlServerInstanceTelemetryColumnResponse> Columns;
        /// <summary>
        /// The link to the next section of rows of the telemetry response for the SQL Server instance. Null if no more sections are available.
        /// </summary>
        public readonly string NextLink;
        /// <summary>
        /// A list of rows from the result telemetry table for the SQL Server instance.
        /// </summary>
        public readonly ImmutableArray<ImmutableArray<string>> Rows;

        [OutputConstructor]
        private GetSqlServerInstanceTelemetryResult(
            ImmutableArray<Outputs.SqlServerInstanceTelemetryColumnResponse> columns,

            string nextLink,

            ImmutableArray<ImmutableArray<string>> rows)
        {
            Columns = columns;
            NextLink = nextLink;
            Rows = rows;
        }
    }
}
