// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureArcData.V20210701Preview
{
    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationTypes CustomLocation { get; } = new ExtendedLocationTypes("CustomLocation");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The infrastructure the data controller is running on.
    /// </summary>
    [EnumType]
    public readonly struct Infrastructure : IEquatable<Infrastructure>
    {
        private readonly string _value;

        private Infrastructure(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Infrastructure Azure { get; } = new Infrastructure("azure");
        public static Infrastructure Gcp { get; } = new Infrastructure("gcp");
        public static Infrastructure Aws { get; } = new Infrastructure("aws");
        public static Infrastructure Alibaba { get; } = new Infrastructure("alibaba");
        public static Infrastructure Onpremises { get; } = new Infrastructure("onpremises");
        public static Infrastructure Other { get; } = new Infrastructure("other");

        public static bool operator ==(Infrastructure left, Infrastructure right) => left.Equals(right);
        public static bool operator !=(Infrastructure left, Infrastructure right) => !left.Equals(right);

        public static explicit operator string(Infrastructure value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Infrastructure other && Equals(other);
        public bool Equals(Infrastructure other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The license type to apply for this managed instance.
    /// </summary>
    [EnumType]
    public readonly struct LicenseType : IEquatable<LicenseType>
    {
        private readonly string _value;

        private LicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseType BasePrice { get; } = new LicenseType("BasePrice");
        public static LicenseType LicenseIncluded { get; } = new LicenseType("LicenseIncluded");

        public static bool operator ==(LicenseType left, LicenseType right) => left.Equals(right);
        public static bool operator !=(LicenseType left, LicenseType right) => !left.Equals(right);

        public static explicit operator string(LicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseType other && Equals(other);
        public bool Equals(LicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field is required to be implemented by the Resource Provider if the service has more than one tier.
    /// </summary>
    [EnumType]
    public readonly struct PostgresInstanceSkuTier : IEquatable<PostgresInstanceSkuTier>
    {
        private readonly string _value;

        private PostgresInstanceSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresInstanceSkuTier Hyperscale { get; } = new PostgresInstanceSkuTier("Hyperscale");

        public static bool operator ==(PostgresInstanceSkuTier left, PostgresInstanceSkuTier right) => left.Equals(right);
        public static bool operator !=(PostgresInstanceSkuTier left, PostgresInstanceSkuTier right) => !left.Equals(right);

        public static explicit operator string(PostgresInstanceSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresInstanceSkuTier other && Equals(other);
        public bool Equals(PostgresInstanceSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier for this managed instance.
    /// </summary>
    [EnumType]
    public readonly struct SqlManagedInstanceSkuTier : IEquatable<SqlManagedInstanceSkuTier>
    {
        private readonly string _value;

        private SqlManagedInstanceSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SqlManagedInstanceSkuTier GeneralPurpose { get; } = new SqlManagedInstanceSkuTier("GeneralPurpose");
        public static SqlManagedInstanceSkuTier BusinessCritical { get; } = new SqlManagedInstanceSkuTier("BusinessCritical");

        public static bool operator ==(SqlManagedInstanceSkuTier left, SqlManagedInstanceSkuTier right) => left.Equals(right);
        public static bool operator !=(SqlManagedInstanceSkuTier left, SqlManagedInstanceSkuTier right) => !left.Equals(right);

        public static explicit operator string(SqlManagedInstanceSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlManagedInstanceSkuTier other && Equals(other);
        public bool Equals(SqlManagedInstanceSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
