// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureArcData.V20240101.Outputs
{

    /// <summary>
    /// The specifications of the availability group state
    /// </summary>
    [OutputType]
    public sealed class AvailabilityGroupInfoResponse
    {
        /// <summary>
        /// Preferred location for performing backups on the availability databases in this availability group.
        /// </summary>
        public readonly string AutomatedBackupPreferenceDescription;
        /// <summary>
        /// Specifies whether this is a basic availability group.
        /// </summary>
        public readonly bool? BasicFeatures;
        /// <summary>
        /// SQL Server availability group cluster type description
        /// </summary>
        public readonly string ClusterTypeDescription;
        /// <summary>
        /// Specifies whether the availability group supports failover for database health conditions.
        /// </summary>
        public readonly bool? DbFailover;
        /// <summary>
        /// Specifies whether DTC support has been enabled for this availability group.
        /// </summary>
        public readonly bool? DtcSupport;
        /// <summary>
        /// User-defined failure condition level under which an automatic failover must be triggered.
        /// </summary>
        public readonly int? FailureConditionLevel;
        /// <summary>
        /// Wait time (in milliseconds) for the sp_server_diagnostics system stored procedure to return server-health information, before the server instance is assumed to be slow or not responding.
        /// </summary>
        public readonly int? HealthCheckTimeout;
        /// <summary>
        /// SQL Server availability group contained system databases.
        /// </summary>
        public readonly bool? IsContained;
        /// <summary>
        /// Specifies whether this is a distributed availability group.
        /// </summary>
        public readonly bool? IsDistributed;
        /// <summary>
        /// Indicates the recovery health of the primary replica.
        /// </summary>
        public readonly string PrimaryRecoveryHealthDescription;
        /// <summary>
        /// Name of the server instance that is hosting the current primary replica.
        /// </summary>
        public readonly string PrimaryReplica;
        public readonly string ReplicationPartnerType;
        /// <summary>
        /// The number of secondary replicas that must be in a synchronized state for a commit to complete.
        /// </summary>
        public readonly int? RequiredSynchronizedSecondariesToCommit;
        /// <summary>
        /// Indicates the recovery health of a secondary replica.
        /// </summary>
        public readonly string SecondaryRecoveryHealthDescription;
        /// <summary>
        /// Reflects a roll-up of the synchronization health of all availability replicas in the availability group.
        /// </summary>
        public readonly string SynchronizationHealthDescription;
        /// <summary>
        /// SQL Server availability group current version.
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private AvailabilityGroupInfoResponse(
            string automatedBackupPreferenceDescription,

            bool? basicFeatures,

            string clusterTypeDescription,

            bool? dbFailover,

            bool? dtcSupport,

            int? failureConditionLevel,

            int? healthCheckTimeout,

            bool? isContained,

            bool? isDistributed,

            string primaryRecoveryHealthDescription,

            string primaryReplica,

            string replicationPartnerType,

            int? requiredSynchronizedSecondariesToCommit,

            string secondaryRecoveryHealthDescription,

            string synchronizationHealthDescription,

            int version)
        {
            AutomatedBackupPreferenceDescription = automatedBackupPreferenceDescription;
            BasicFeatures = basicFeatures;
            ClusterTypeDescription = clusterTypeDescription;
            DbFailover = dbFailover;
            DtcSupport = dtcSupport;
            FailureConditionLevel = failureConditionLevel;
            HealthCheckTimeout = healthCheckTimeout;
            IsContained = isContained;
            IsDistributed = isDistributed;
            PrimaryRecoveryHealthDescription = primaryRecoveryHealthDescription;
            PrimaryReplica = primaryReplica;
            ReplicationPartnerType = replicationPartnerType;
            RequiredSynchronizedSecondariesToCommit = requiredSynchronizedSecondariesToCommit;
            SecondaryRecoveryHealthDescription = secondaryRecoveryHealthDescription;
            SynchronizationHealthDescription = synchronizationHealthDescription;
            Version = version;
        }
    }
}
