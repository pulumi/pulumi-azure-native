// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureArcData
{
    /// <summary>
    /// SQL Server license type.
    /// </summary>
    [EnumType]
    public readonly struct ArcSqlServerLicenseType : IEquatable<ArcSqlServerLicenseType>
    {
        private readonly string _value;

        private ArcSqlServerLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ArcSqlServerLicenseType Paid { get; } = new ArcSqlServerLicenseType("Paid");
        public static ArcSqlServerLicenseType Free { get; } = new ArcSqlServerLicenseType("Free");
        public static ArcSqlServerLicenseType HADR { get; } = new ArcSqlServerLicenseType("HADR");
        public static ArcSqlServerLicenseType Undefined { get; } = new ArcSqlServerLicenseType("Undefined");

        public static bool operator ==(ArcSqlServerLicenseType left, ArcSqlServerLicenseType right) => left.Equals(right);
        public static bool operator !=(ArcSqlServerLicenseType left, ArcSqlServerLicenseType right) => !left.Equals(right);

        public static explicit operator string(ArcSqlServerLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ArcSqlServerLicenseType other && Equals(other);
        public bool Equals(ArcSqlServerLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The cloud connectivity status.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionStatus : IEquatable<ConnectionStatus>
    {
        private readonly string _value;

        private ConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionStatus Connected { get; } = new ConnectionStatus("Connected");
        public static ConnectionStatus Disconnected { get; } = new ConnectionStatus("Disconnected");
        public static ConnectionStatus Unknown { get; } = new ConnectionStatus("Unknown");

        public static bool operator ==(ConnectionStatus left, ConnectionStatus right) => left.Equals(right);
        public static bool operator !=(ConnectionStatus left, ConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(ConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionStatus other && Equals(other);
        public bool Equals(ConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of Azure Defender.
    /// </summary>
    [EnumType]
    public readonly struct DefenderStatus : IEquatable<DefenderStatus>
    {
        private readonly string _value;

        private DefenderStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DefenderStatus Protected { get; } = new DefenderStatus("Protected");
        public static DefenderStatus Unprotected { get; } = new DefenderStatus("Unprotected");
        public static DefenderStatus Unknown { get; } = new DefenderStatus("Unknown");

        public static bool operator ==(DefenderStatus left, DefenderStatus right) => left.Equals(right);
        public static bool operator !=(DefenderStatus left, DefenderStatus right) => !left.Equals(right);

        public static explicit operator string(DefenderStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefenderStatus other && Equals(other);
        public bool Equals(DefenderStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SQL Server edition.
    /// </summary>
    [EnumType]
    public readonly struct EditionType : IEquatable<EditionType>
    {
        private readonly string _value;

        private EditionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EditionType Evaluation { get; } = new EditionType("Evaluation");
        public static EditionType Enterprise { get; } = new EditionType("Enterprise");
        public static EditionType Standard { get; } = new EditionType("Standard");
        public static EditionType Web { get; } = new EditionType("Web");
        public static EditionType Developer { get; } = new EditionType("Developer");
        public static EditionType Express { get; } = new EditionType("Express");

        public static bool operator ==(EditionType left, EditionType right) => left.Equals(right);
        public static bool operator !=(EditionType left, EditionType right) => !left.Equals(right);

        public static explicit operator string(EditionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EditionType other && Equals(other);
        public bool Equals(EditionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationTypes CustomLocation { get; } = new ExtendedLocationTypes("CustomLocation");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field is required to be implemented by the Resource Provider if the service has more than one tier.
    /// </summary>
    [EnumType]
    public readonly struct PostgresInstanceSkuTier : IEquatable<PostgresInstanceSkuTier>
    {
        private readonly string _value;

        private PostgresInstanceSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresInstanceSkuTier Hyperscale { get; } = new PostgresInstanceSkuTier("Hyperscale");

        public static bool operator ==(PostgresInstanceSkuTier left, PostgresInstanceSkuTier right) => left.Equals(right);
        public static bool operator !=(PostgresInstanceSkuTier left, PostgresInstanceSkuTier right) => !left.Equals(right);

        public static explicit operator string(PostgresInstanceSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresInstanceSkuTier other && Equals(other);
        public bool Equals(PostgresInstanceSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field is required to be implemented by the Resource Provider if the service has more than one tier.
    /// </summary>
    [EnumType]
    public readonly struct SqlManagedInstanceSkuTier : IEquatable<SqlManagedInstanceSkuTier>
    {
        private readonly string _value;

        private SqlManagedInstanceSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SqlManagedInstanceSkuTier GeneralPurpose { get; } = new SqlManagedInstanceSkuTier("GeneralPurpose");
        public static SqlManagedInstanceSkuTier BusinessCritical { get; } = new SqlManagedInstanceSkuTier("BusinessCritical");

        public static bool operator ==(SqlManagedInstanceSkuTier left, SqlManagedInstanceSkuTier right) => left.Equals(right);
        public static bool operator !=(SqlManagedInstanceSkuTier left, SqlManagedInstanceSkuTier right) => !left.Equals(right);

        public static explicit operator string(SqlManagedInstanceSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlManagedInstanceSkuTier other && Equals(other);
        public bool Equals(SqlManagedInstanceSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SQL Server version.
    /// </summary>
    [EnumType]
    public readonly struct SqlVersion : IEquatable<SqlVersion>
    {
        private readonly string _value;

        private SqlVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SqlVersion SQL_Server_2019 { get; } = new SqlVersion("SQL Server 2019");
        public static SqlVersion SQL_Server_2017 { get; } = new SqlVersion("SQL Server 2017");
        public static SqlVersion SQL_Server_2016 { get; } = new SqlVersion("SQL Server 2016");

        public static bool operator ==(SqlVersion left, SqlVersion right) => left.Equals(right);
        public static bool operator !=(SqlVersion left, SqlVersion right) => !left.Equals(right);

        public static explicit operator string(SqlVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlVersion other && Equals(other);
        public bool Equals(SqlVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
