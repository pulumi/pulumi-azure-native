// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Authorization.Outputs
{

    [OutputType]
    public sealed class PolicyAssignmentPropertiesResponseResult
    {
        /// <summary>
        /// This message will be part of response in case of policy violation.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The display name of the policy assignment.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
        /// </summary>
        public readonly string? EnforcementMode;
        /// <summary>
        /// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Metadata;
        /// <summary>
        /// The policy's excluded scopes.
        /// </summary>
        public readonly ImmutableArray<string> NotScopes;
        /// <summary>
        /// The parameter values for the assigned policy rule. The keys are the parameter names.
        /// </summary>
        public readonly Outputs.ParameterValuesResponseResult? Parameters;
        /// <summary>
        /// The ID of the policy definition or policy set definition being assigned.
        /// </summary>
        public readonly string? PolicyDefinitionId;
        /// <summary>
        /// The scope for the policy assignment.
        /// </summary>
        public readonly string? Scope;

        [OutputConstructor]
        private PolicyAssignmentPropertiesResponseResult(
            string? description,

            string? displayName,

            string? enforcementMode,

            ImmutableDictionary<string, string>? metadata,

            ImmutableArray<string> notScopes,

            Outputs.ParameterValuesResponseResult? parameters,

            string? policyDefinitionId,

            string? scope)
        {
            Description = description;
            DisplayName = displayName;
            EnforcementMode = enforcementMode;
            Metadata = metadata;
            NotScopes = notScopes;
            Parameters = parameters;
            PolicyDefinitionId = policyDefinitionId;
            Scope = scope;
        }
    }
}
