// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Authorization.Outputs
{

    [OutputType]
    public sealed class PolicySetDefinitionPropertiesResponse
    {
        /// <summary>
        /// The policy set definition description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The display name of the policy set definition.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Metadata;
        /// <summary>
        /// The policy set definition parameters that can be used in policy definition references.
        /// </summary>
        public readonly Outputs.ParameterDefinitionsResponse? Parameters;
        /// <summary>
        /// The metadata describing groups of policy definition references within the policy set definition.
        /// </summary>
        public readonly ImmutableArray<Outputs.PolicyDefinitionGroupResponse> PolicyDefinitionGroups;
        /// <summary>
        /// An array of policy definition references.
        /// </summary>
        public readonly ImmutableArray<Outputs.PolicyDefinitionReferenceResponse> PolicyDefinitions;
        /// <summary>
        /// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
        /// </summary>
        public readonly string? PolicyType;

        [OutputConstructor]
        private PolicySetDefinitionPropertiesResponse(
            string? description,

            string? displayName,

            ImmutableDictionary<string, string>? metadata,

            Outputs.ParameterDefinitionsResponse? parameters,

            ImmutableArray<Outputs.PolicyDefinitionGroupResponse> policyDefinitionGroups,

            ImmutableArray<Outputs.PolicyDefinitionReferenceResponse> policyDefinitions,

            string? policyType)
        {
            Description = description;
            DisplayName = displayName;
            Metadata = metadata;
            Parameters = parameters;
            PolicyDefinitionGroups = policyDefinitionGroups;
            PolicyDefinitions = policyDefinitions;
            PolicyType = policyType;
        }
    }
}
