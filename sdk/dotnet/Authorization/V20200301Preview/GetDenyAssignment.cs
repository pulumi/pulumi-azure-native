// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Authorization.V20200301Preview
{
    public static class GetDenyAssignment
    {
        /// <summary>
        /// Deny Assignment
        /// </summary>
        public static Task<GetDenyAssignmentResult> InvokeAsync(GetDenyAssignmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDenyAssignmentResult>("azure-nextgen:authorization/v20200301preview:getDenyAssignment", args ?? new GetDenyAssignmentArgs(), options.WithVersion());
    }


    public sealed class GetDenyAssignmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the deny assignment. It can be any valid GUID.
        /// </summary>
        [Input("denyAssignmentName", required: true)]
        public string DenyAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetDenyAssignmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDenyAssignmentResult
    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        public readonly string? Condition;
        /// <summary>
        /// Version of the condition. Currently accepted value is '2.0'
        /// </summary>
        public readonly string? ConditionVersion;
        /// <summary>
        /// Id of the user who created the assignment
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Time it was created
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// The display name of the deny assignment.
        /// </summary>
        public readonly string? DenyAssignmentName;
        /// <summary>
        /// The description of the deny assignment.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        public readonly bool? DoNotApplyToChildScopes;
        /// <summary>
        /// Array of principals to which the deny assignment does not apply.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrincipalResponse> ExcludePrincipals;
        /// <summary>
        /// The deny assignment ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        public readonly bool? IsSystemProtected;
        /// <summary>
        /// The deny assignment name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// An array of permissions that are denied by the deny assignment.
        /// </summary>
        public readonly ImmutableArray<Outputs.PermissionResponse> Permissions;
        /// <summary>
        /// Array of principals to which the deny assignment applies.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrincipalResponse> Principals;
        /// <summary>
        /// The deny assignment scope.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The deny assignment type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Id of the user who updated the assignment
        /// </summary>
        public readonly string UpdatedBy;
        /// <summary>
        /// Time it was updated
        /// </summary>
        public readonly string UpdatedOn;

        [OutputConstructor]
        private GetDenyAssignmentResult(
            string? condition,

            string? conditionVersion,

            string createdBy,

            string createdOn,

            string? denyAssignmentName,

            string? description,

            bool? doNotApplyToChildScopes,

            ImmutableArray<Outputs.PrincipalResponse> excludePrincipals,

            string id,

            bool? isSystemProtected,

            string name,

            ImmutableArray<Outputs.PermissionResponse> permissions,

            ImmutableArray<Outputs.PrincipalResponse> principals,

            string? scope,

            string type,

            string updatedBy,

            string updatedOn)
        {
            Condition = condition;
            ConditionVersion = conditionVersion;
            CreatedBy = createdBy;
            CreatedOn = createdOn;
            DenyAssignmentName = denyAssignmentName;
            Description = description;
            DoNotApplyToChildScopes = doNotApplyToChildScopes;
            ExcludePrincipals = excludePrincipals;
            Id = id;
            IsSystemProtected = isSystemProtected;
            Name = name;
            Permissions = permissions;
            Principals = principals;
            Scope = scope;
            Type = type;
            UpdatedBy = updatedBy;
            UpdatedOn = updatedOn;
        }
    }
}
