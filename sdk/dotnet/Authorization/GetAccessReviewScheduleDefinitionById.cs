// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Authorization
{
    public static class GetAccessReviewScheduleDefinitionById
    {
        public static Task<GetAccessReviewScheduleDefinitionByIdResult> InvokeAsync(GetAccessReviewScheduleDefinitionByIdArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccessReviewScheduleDefinitionByIdResult>("azure-nextgen:authorization:getAccessReviewScheduleDefinitionById", args ?? new GetAccessReviewScheduleDefinitionByIdArgs(), options.WithVersion());
    }


    public sealed class GetAccessReviewScheduleDefinitionByIdArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the access review schedule definition.
        /// </summary>
        [Input("scheduleDefinitionId", required: true)]
        public string ScheduleDefinitionId { get; set; } = null!;

        public GetAccessReviewScheduleDefinitionByIdArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAccessReviewScheduleDefinitionByIdResult
    {
        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        public readonly bool? AutoApplyDecisionsEnabled;
        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        public readonly string? DefaultDecision;
        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        public readonly bool? DefaultDecisionEnabled;
        /// <summary>
        /// The description provided by the access review creator and visible to admins.
        /// </summary>
        public readonly string? DescriptionForAdmins;
        /// <summary>
        /// The description provided by the access review creator to be shown to reviewers.
        /// </summary>
        public readonly string? DescriptionForReviewers;
        /// <summary>
        /// The display name for the schedule definition.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The DateTime when the review is scheduled to end. Required if type is endDate
        /// </summary>
        public readonly string? EndDate;
        /// <summary>
        /// The access review schedule definition id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The duration in days for an instance.
        /// </summary>
        public readonly int? InstanceDurationInDays;
        /// <summary>
        /// This is the collection of instances returned when one does an expand on it.
        /// </summary>
        public readonly ImmutableArray<Outputs.AccessReviewInstanceResponse> Instances;
        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        public readonly int? Interval;
        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        public readonly bool? JustificationRequiredOnApproval;
        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        public readonly bool? MailNotificationsEnabled;
        /// <summary>
        /// The access review schedule definition unique id.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        public readonly int? NumberOfOccurrences;
        /// <summary>
        /// The identity id
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The identity display name
        /// </summary>
        public readonly string PrincipalName;
        /// <summary>
        /// The identity type user/servicePrincipal to review
        /// </summary>
        public readonly string PrincipalType;
        /// <summary>
        /// Flag to indicate whether showing recommendations to reviewers is enabled.
        /// </summary>
        public readonly bool? RecommendationsEnabled;
        /// <summary>
        /// Flag to indicate whether sending reminder emails to reviewers are enabled.
        /// </summary>
        public readonly bool? ReminderNotificationsEnabled;
        /// <summary>
        /// ResourceId in which this review is getting created
        /// </summary>
        public readonly string ResourceId;
        /// <summary>
        /// This is the collection of reviewers.
        /// </summary>
        public readonly ImmutableArray<Outputs.AccessReviewReviewerResponse> Reviewers;
        /// <summary>
        /// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
        /// </summary>
        public readonly string ReviewersType;
        /// <summary>
        /// This is used to indicate the role being reviewed
        /// </summary>
        public readonly string RoleDefinitionId;
        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        public readonly string? StartDate;
        /// <summary>
        /// This read-only field specifies the status of an accessReview.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The user principal name(if valid)
        /// </summary>
        public readonly string UserPrincipalName;

        [OutputConstructor]
        private GetAccessReviewScheduleDefinitionByIdResult(
            bool? autoApplyDecisionsEnabled,

            string? defaultDecision,

            bool? defaultDecisionEnabled,

            string? descriptionForAdmins,

            string? descriptionForReviewers,

            string? displayName,

            string? endDate,

            string id,

            int? instanceDurationInDays,

            ImmutableArray<Outputs.AccessReviewInstanceResponse> instances,

            int? interval,

            bool? justificationRequiredOnApproval,

            bool? mailNotificationsEnabled,

            string name,

            int? numberOfOccurrences,

            string principalId,

            string principalName,

            string principalType,

            bool? recommendationsEnabled,

            bool? reminderNotificationsEnabled,

            string resourceId,

            ImmutableArray<Outputs.AccessReviewReviewerResponse> reviewers,

            string reviewersType,

            string roleDefinitionId,

            string? startDate,

            string status,

            string type,

            string userPrincipalName)
        {
            AutoApplyDecisionsEnabled = autoApplyDecisionsEnabled;
            DefaultDecision = defaultDecision;
            DefaultDecisionEnabled = defaultDecisionEnabled;
            DescriptionForAdmins = descriptionForAdmins;
            DescriptionForReviewers = descriptionForReviewers;
            DisplayName = displayName;
            EndDate = endDate;
            Id = id;
            InstanceDurationInDays = instanceDurationInDays;
            Instances = instances;
            Interval = interval;
            JustificationRequiredOnApproval = justificationRequiredOnApproval;
            MailNotificationsEnabled = mailNotificationsEnabled;
            Name = name;
            NumberOfOccurrences = numberOfOccurrences;
            PrincipalId = principalId;
            PrincipalName = principalName;
            PrincipalType = principalType;
            RecommendationsEnabled = recommendationsEnabled;
            ReminderNotificationsEnabled = reminderNotificationsEnabled;
            ResourceId = resourceId;
            Reviewers = reviewers;
            ReviewersType = reviewersType;
            RoleDefinitionId = roleDefinitionId;
            StartDate = startDate;
            Status = status;
            Type = type;
            UserPrincipalName = userPrincipalName;
        }
    }
}
