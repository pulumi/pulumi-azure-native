// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20200501
{
    public static class GetManagementLockAtResourceLevel
    {
        /// <summary>
        /// Get the management lock of a resource or any level below resource.
        /// </summary>
        public static Task<GetManagementLockAtResourceLevelResult> InvokeAsync(GetManagementLockAtResourceLevelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagementLockAtResourceLevelResult>("azure-native:authorization/v20200501:getManagementLockAtResourceLevel", args ?? new GetManagementLockAtResourceLevelArgs(), options.WithDefaults());

        /// <summary>
        /// Get the management lock of a resource or any level below resource.
        /// </summary>
        public static Output<GetManagementLockAtResourceLevelResult> Invoke(GetManagementLockAtResourceLevelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementLockAtResourceLevelResult>("azure-native:authorization/v20200501:getManagementLockAtResourceLevel", args ?? new GetManagementLockAtResourceLevelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementLockAtResourceLevelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of lock.
        /// </summary>
        [Input("lockName", required: true)]
        public string LockName { get; set; } = null!;

        /// <summary>
        /// An extra path parameter needed in some services, like SQL Databases.
        /// </summary>
        [Input("parentResourcePath", required: true)]
        public string ParentResourcePath { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. 
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        /// <summary>
        /// The namespace of the resource provider.
        /// </summary>
        [Input("resourceProviderNamespace", required: true)]
        public string ResourceProviderNamespace { get; set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Input("resourceType", required: true)]
        public string ResourceType { get; set; } = null!;

        public GetManagementLockAtResourceLevelArgs()
        {
        }
        public static new GetManagementLockAtResourceLevelArgs Empty => new GetManagementLockAtResourceLevelArgs();
    }

    public sealed class GetManagementLockAtResourceLevelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of lock.
        /// </summary>
        [Input("lockName", required: true)]
        public Input<string> LockName { get; set; } = null!;

        /// <summary>
        /// An extra path parameter needed in some services, like SQL Databases.
        /// </summary>
        [Input("parentResourcePath", required: true)]
        public Input<string> ParentResourcePath { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. 
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        /// <summary>
        /// The namespace of the resource provider.
        /// </summary>
        [Input("resourceProviderNamespace", required: true)]
        public Input<string> ResourceProviderNamespace { get; set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        public GetManagementLockAtResourceLevelInvokeArgs()
        {
        }
        public static new GetManagementLockAtResourceLevelInvokeArgs Empty => new GetManagementLockAtResourceLevelInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementLockAtResourceLevelResult
    {
        /// <summary>
        /// The resource ID of the lock.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
        /// </summary>
        public readonly string Level;
        /// <summary>
        /// The name of the lock.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Notes about the lock. Maximum of 512 characters.
        /// </summary>
        public readonly string? Notes;
        /// <summary>
        /// The owners of the lock.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagementLockOwnerResponse> Owners;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The resource type of the lock - Microsoft.Authorization/locks.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetManagementLockAtResourceLevelResult(
            string id,

            string level,

            string name,

            string? notes,

            ImmutableArray<Outputs.ManagementLockOwnerResponse> owners,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Id = id;
            Level = level;
            Name = name;
            Notes = notes;
            Owners = owners;
            SystemData = systemData;
            Type = type;
        }
    }
}
