// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Authorization.V20200501
{
    /// <summary>
    /// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
    /// </summary>
    [EnumType]
    public readonly struct LockLevel : IEquatable<LockLevel>
    {
        private readonly string _value;

        private LockLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LockLevel NotSpecified { get; } = new LockLevel("NotSpecified");
        public static LockLevel CanNotDelete { get; } = new LockLevel("CanNotDelete");
        public static LockLevel ReadOnly { get; } = new LockLevel("ReadOnly");

        public static bool operator ==(LockLevel left, LockLevel right) => left.Equals(right);
        public static bool operator !=(LockLevel left, LockLevel right) => !left.Equals(right);

        public static explicit operator string(LockLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LockLevel other && Equals(other);
        public bool Equals(LockLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PublicNetworkAccessOptions : IEquatable<PublicNetworkAccessOptions>
    {
        private readonly string _value;

        private PublicNetworkAccessOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccessOptions Enabled { get; } = new PublicNetworkAccessOptions("Enabled");
        public static PublicNetworkAccessOptions Disabled { get; } = new PublicNetworkAccessOptions("Disabled");

        public static bool operator ==(PublicNetworkAccessOptions left, PublicNetworkAccessOptions right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessOptions left, PublicNetworkAccessOptions right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessOptions other && Equals(other);
        public bool Equals(PublicNetworkAccessOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
