// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization
{
    public static class GetRoleManagementPolicy
    {
        /// <summary>
        /// Get the specified role management policy for a resource scope
        /// Azure REST API version: 2024-09-01-preview.
        /// 
        /// Other available API versions: 2020-10-01, 2020-10-01-preview, 2024-02-01-preview.
        /// </summary>
        public static Task<GetRoleManagementPolicyResult> InvokeAsync(GetRoleManagementPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleManagementPolicyResult>("azure-native:authorization:getRoleManagementPolicy", args ?? new GetRoleManagementPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Get the specified role management policy for a resource scope
        /// Azure REST API version: 2024-09-01-preview.
        /// 
        /// Other available API versions: 2020-10-01, 2020-10-01-preview, 2024-02-01-preview.
        /// </summary>
        public static Output<GetRoleManagementPolicyResult> Invoke(GetRoleManagementPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleManagementPolicyResult>("azure-native:authorization:getRoleManagementPolicy", args ?? new GetRoleManagementPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleManagementPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name (guid) of the role management policy to get.
        /// </summary>
        [Input("roleManagementPolicyName", required: true)]
        public string RoleManagementPolicyName { get; set; } = null!;

        /// <summary>
        /// The scope of the role management policy.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetRoleManagementPolicyArgs()
        {
        }
        public static new GetRoleManagementPolicyArgs Empty => new GetRoleManagementPolicyArgs();
    }

    public sealed class GetRoleManagementPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name (guid) of the role management policy to get.
        /// </summary>
        [Input("roleManagementPolicyName", required: true)]
        public Input<string> RoleManagementPolicyName { get; set; } = null!;

        /// <summary>
        /// The scope of the role management policy.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetRoleManagementPolicyInvokeArgs()
        {
        }
        public static new GetRoleManagementPolicyInvokeArgs Empty => new GetRoleManagementPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleManagementPolicyResult
    {
        /// <summary>
        /// The role management policy description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The role management policy display name.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The readonly computed rule applied to the policy.
        /// </summary>
        public readonly ImmutableArray<object> EffectiveRules;
        /// <summary>
        /// The role management policy Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The role management policy is default policy.
        /// </summary>
        public readonly bool? IsOrganizationDefault;
        /// <summary>
        /// The name of the entity last modified it
        /// </summary>
        public readonly Outputs.PrincipalResponse LastModifiedBy;
        /// <summary>
        /// The last modified date time.
        /// </summary>
        public readonly string LastModifiedDateTime;
        /// <summary>
        /// The role management policy name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Additional properties of scope
        /// </summary>
        public readonly Outputs.PolicyPropertiesResponse PolicyProperties;
        /// <summary>
        /// The rule applied to the policy.
        /// </summary>
        public readonly ImmutableArray<object> Rules;
        /// <summary>
        /// The role management policy scope.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The role management policy type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRoleManagementPolicyResult(
            string? description,

            string? displayName,

            ImmutableArray<object> effectiveRules,

            string id,

            bool? isOrganizationDefault,

            Outputs.PrincipalResponse lastModifiedBy,

            string lastModifiedDateTime,

            string name,

            Outputs.PolicyPropertiesResponse policyProperties,

            ImmutableArray<object> rules,

            string? scope,

            string type)
        {
            Description = description;
            DisplayName = displayName;
            EffectiveRules = effectiveRules;
            Id = id;
            IsOrganizationDefault = isOrganizationDefault;
            LastModifiedBy = lastModifiedBy;
            LastModifiedDateTime = lastModifiedDateTime;
            Name = name;
            PolicyProperties = policyProperties;
            Rules = rules;
            Scope = scope;
            Type = type;
        }
    }
}
