// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Authorization.V20180501Preview
{
    /// <summary>
    /// The recurrence type : weekly, monthly, etc.
    /// </summary>
    [EnumType]
    public readonly struct AccessReviewRecurrencePatternType : IEquatable<AccessReviewRecurrencePatternType>
    {
        private readonly string _value;

        private AccessReviewRecurrencePatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessReviewRecurrencePatternType Weekly { get; } = new AccessReviewRecurrencePatternType("weekly");
        public static AccessReviewRecurrencePatternType AbsoluteMonthly { get; } = new AccessReviewRecurrencePatternType("absoluteMonthly");

        public static bool operator ==(AccessReviewRecurrencePatternType left, AccessReviewRecurrencePatternType right) => left.Equals(right);
        public static bool operator !=(AccessReviewRecurrencePatternType left, AccessReviewRecurrencePatternType right) => !left.Equals(right);

        public static explicit operator string(AccessReviewRecurrencePatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessReviewRecurrencePatternType other && Equals(other);
        public bool Equals(AccessReviewRecurrencePatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The recurrence range type. The possible values are: endDate, noEnd, numbered.
    /// </summary>
    [EnumType]
    public readonly struct AccessReviewRecurrenceRangeType : IEquatable<AccessReviewRecurrenceRangeType>
    {
        private readonly string _value;

        private AccessReviewRecurrenceRangeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessReviewRecurrenceRangeType EndDate { get; } = new AccessReviewRecurrenceRangeType("endDate");
        public static AccessReviewRecurrenceRangeType NoEnd { get; } = new AccessReviewRecurrenceRangeType("noEnd");
        public static AccessReviewRecurrenceRangeType Numbered { get; } = new AccessReviewRecurrenceRangeType("numbered");

        public static bool operator ==(AccessReviewRecurrenceRangeType left, AccessReviewRecurrenceRangeType right) => left.Equals(right);
        public static bool operator !=(AccessReviewRecurrenceRangeType left, AccessReviewRecurrenceRangeType right) => !left.Equals(right);

        public static explicit operator string(AccessReviewRecurrenceRangeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessReviewRecurrenceRangeType other && Equals(other);
        public bool Equals(AccessReviewRecurrenceRangeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This specifies the behavior for the autoReview feature when an access review completes.
    /// </summary>
    [EnumType]
    public readonly struct DefaultDecisionType : IEquatable<DefaultDecisionType>
    {
        private readonly string _value;

        private DefaultDecisionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DefaultDecisionType Approve { get; } = new DefaultDecisionType("Approve");
        public static DefaultDecisionType Deny { get; } = new DefaultDecisionType("Deny");
        public static DefaultDecisionType Recommendation { get; } = new DefaultDecisionType("Recommendation");

        public static bool operator ==(DefaultDecisionType left, DefaultDecisionType right) => left.Equals(right);
        public static bool operator !=(DefaultDecisionType left, DefaultDecisionType right) => !left.Equals(right);

        public static explicit operator string(DefaultDecisionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefaultDecisionType other && Equals(other);
        public bool Equals(DefaultDecisionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
