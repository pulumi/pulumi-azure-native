// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20160901
{
    [Obsolete(@"Version 2016-09-01 will be removed in v2 of the provider.")]
    public static class GetManagementLockAtSubscriptionLevel
    {
        /// <summary>
        /// Gets a management lock at the subscription level.
        /// </summary>
        public static Task<GetManagementLockAtSubscriptionLevelResult> InvokeAsync(GetManagementLockAtSubscriptionLevelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagementLockAtSubscriptionLevelResult>("azure-native:authorization/v20160901:getManagementLockAtSubscriptionLevel", args ?? new GetManagementLockAtSubscriptionLevelArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a management lock at the subscription level.
        /// </summary>
        public static Output<GetManagementLockAtSubscriptionLevelResult> Invoke(GetManagementLockAtSubscriptionLevelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementLockAtSubscriptionLevelResult>("azure-native:authorization/v20160901:getManagementLockAtSubscriptionLevel", args ?? new GetManagementLockAtSubscriptionLevelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementLockAtSubscriptionLevelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lock to get.
        /// </summary>
        [Input("lockName", required: true)]
        public string LockName { get; set; } = null!;

        public GetManagementLockAtSubscriptionLevelArgs()
        {
        }
        public static new GetManagementLockAtSubscriptionLevelArgs Empty => new GetManagementLockAtSubscriptionLevelArgs();
    }

    public sealed class GetManagementLockAtSubscriptionLevelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lock to get.
        /// </summary>
        [Input("lockName", required: true)]
        public Input<string> LockName { get; set; } = null!;

        public GetManagementLockAtSubscriptionLevelInvokeArgs()
        {
        }
        public static new GetManagementLockAtSubscriptionLevelInvokeArgs Empty => new GetManagementLockAtSubscriptionLevelInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementLockAtSubscriptionLevelResult
    {
        /// <summary>
        /// The resource ID of the lock.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
        /// </summary>
        public readonly string Level;
        /// <summary>
        /// The name of the lock.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Notes about the lock. Maximum of 512 characters.
        /// </summary>
        public readonly string? Notes;
        /// <summary>
        /// The owners of the lock.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagementLockOwnerResponse> Owners;
        /// <summary>
        /// The resource type of the lock - Microsoft.Authorization/locks.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetManagementLockAtSubscriptionLevelResult(
            string id,

            string level,

            string name,

            string? notes,

            ImmutableArray<Outputs.ManagementLockOwnerResponse> owners,

            string type)
        {
            Id = id;
            Level = level;
            Name = name;
            Notes = notes;
            Owners = owners;
            Type = type;
        }
    }
}
