// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Authorization.V20220701Preview
{
    /// <summary>
    /// The option whether validate the exemption is at or under the assignment scope.
    /// </summary>
    [EnumType]
    public readonly struct AssignmentScopeValidation : IEquatable<AssignmentScopeValidation>
    {
        private readonly string _value;

        private AssignmentScopeValidation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This option will validate the exemption is at or under the assignment scope.
        /// </summary>
        public static AssignmentScopeValidation Default { get; } = new AssignmentScopeValidation("Default");
        /// <summary>
        /// This option will bypass the validation the exemption scope is at or under the policy assignment scope.
        /// </summary>
        public static AssignmentScopeValidation DoNotValidate { get; } = new AssignmentScopeValidation("DoNotValidate");

        public static bool operator ==(AssignmentScopeValidation left, AssignmentScopeValidation right) => left.Equals(right);
        public static bool operator !=(AssignmentScopeValidation left, AssignmentScopeValidation right) => !left.Equals(right);

        public static explicit operator string(AssignmentScopeValidation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssignmentScopeValidation other && Equals(other);
        public bool Equals(AssignmentScopeValidation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The policy exemption category. Possible values are Waiver and Mitigated.
    /// </summary>
    [EnumType]
    public readonly struct ExemptionCategory : IEquatable<ExemptionCategory>
    {
        private readonly string _value;

        private ExemptionCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This category of exemptions usually means the scope is not applicable for the policy.
        /// </summary>
        public static ExemptionCategory Waiver { get; } = new ExemptionCategory("Waiver");
        /// <summary>
        /// This category of exemptions usually means the mitigation actions have been applied to the scope.
        /// </summary>
        public static ExemptionCategory Mitigated { get; } = new ExemptionCategory("Mitigated");

        public static bool operator ==(ExemptionCategory left, ExemptionCategory right) => left.Equals(right);
        public static bool operator !=(ExemptionCategory left, ExemptionCategory right) => !left.Equals(right);

        public static explicit operator string(ExemptionCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExemptionCategory other && Equals(other);
        public bool Equals(ExemptionCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The selector kind.
    /// </summary>
    [EnumType]
    public readonly struct SelectorKind : IEquatable<SelectorKind>
    {
        private readonly string _value;

        private SelectorKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The selector kind to filter policies by the resource location.
        /// </summary>
        public static SelectorKind ResourceLocation { get; } = new SelectorKind("resourceLocation");
        /// <summary>
        /// The selector kind to filter policies by the resource type.
        /// </summary>
        public static SelectorKind ResourceType { get; } = new SelectorKind("resourceType");
        /// <summary>
        /// The selector kind to filter policies by the resource without location.
        /// </summary>
        public static SelectorKind ResourceWithoutLocation { get; } = new SelectorKind("resourceWithoutLocation");
        /// <summary>
        /// The selector kind to filter policies by the policy definition reference ID.
        /// </summary>
        public static SelectorKind PolicyDefinitionReferenceId { get; } = new SelectorKind("policyDefinitionReferenceId");

        public static bool operator ==(SelectorKind left, SelectorKind right) => left.Equals(right);
        public static bool operator !=(SelectorKind left, SelectorKind right) => !left.Equals(right);

        public static explicit operator string(SelectorKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SelectorKind other && Equals(other);
        public bool Equals(SelectorKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
