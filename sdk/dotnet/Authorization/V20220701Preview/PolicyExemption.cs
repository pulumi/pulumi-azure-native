// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20220701Preview
{
    /// <summary>
    /// The policy exemption.
    /// </summary>
    [AzureNativeResourceType("azure-native:authorization/v20220701preview:PolicyExemption")]
    public partial class PolicyExemption : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the policy exemption.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Properties for the policy exemption.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.PolicyExemptionPropertiesResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource (Microsoft.Authorization/policyExemptions).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyExemption resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyExemption(string name, PolicyExemptionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:authorization/v20220701preview:PolicyExemption", name, args ?? new PolicyExemptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyExemption(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:authorization/v20220701preview:PolicyExemption", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:authorization:PolicyExemption"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20200701preview:PolicyExemption"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyExemption resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyExemption Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PolicyExemption(name, id, options);
        }
    }

    public sealed class PolicyExemptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the policy exemption to delete.
        /// </summary>
        [Input("policyExemptionName")]
        public Input<string>? PolicyExemptionName { get; set; }

        /// <summary>
        /// Properties for the policy exemption.
        /// </summary>
        [Input("properties", required: true)]
        public Input<Inputs.PolicyExemptionPropertiesArgs> Properties { get; set; } = null!;

        /// <summary>
        /// The scope of the policy exemption. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public PolicyExemptionArgs()
        {
        }
        public static new PolicyExemptionArgs Empty => new PolicyExemptionArgs();
    }
}
