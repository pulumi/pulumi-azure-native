// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20220701Preview.Inputs
{

    /// <summary>
    /// The policy exemption properties.
    /// </summary>
    public sealed class PolicyExemptionPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The option whether validate the exemption is at or under the assignment scope.
        /// </summary>
        [Input("assignmentScopeValidation")]
        public InputUnion<string, Pulumi.AzureNative.Authorization.V20220701Preview.AssignmentScopeValidation>? AssignmentScopeValidation { get; set; }

        /// <summary>
        /// The description of the policy exemption.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the policy exemption.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The policy exemption category. Possible values are Waiver and Mitigated.
        /// </summary>
        [Input("exemptionCategory", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Authorization.V20220701Preview.ExemptionCategory> ExemptionCategory { get; set; } = null!;

        /// <summary>
        /// The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        [Input("metadata")]
        public Input<object>? Metadata { get; set; }

        /// <summary>
        /// The ID of the policy assignment that is being exempted.
        /// </summary>
        [Input("policyAssignmentId", required: true)]
        public Input<string> PolicyAssignmentId { get; set; } = null!;

        [Input("policyDefinitionReferenceIds")]
        private InputList<string>? _policyDefinitionReferenceIds;

        /// <summary>
        /// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
        /// </summary>
        public InputList<string> PolicyDefinitionReferenceIds
        {
            get => _policyDefinitionReferenceIds ?? (_policyDefinitionReferenceIds = new InputList<string>());
            set => _policyDefinitionReferenceIds = value;
        }

        [Input("resourceSelectors")]
        private InputList<Inputs.ResourceSelectorArgs>? _resourceSelectors;

        /// <summary>
        /// The resource selector list to filter policies by resource properties.
        /// </summary>
        public InputList<Inputs.ResourceSelectorArgs> ResourceSelectors
        {
            get => _resourceSelectors ?? (_resourceSelectors = new InputList<Inputs.ResourceSelectorArgs>());
            set => _resourceSelectors = value;
        }

        public PolicyExemptionPropertiesArgs()
        {
            AssignmentScopeValidation = "Default";
        }
        public static new PolicyExemptionPropertiesArgs Empty => new PolicyExemptionPropertiesArgs();
    }
}
